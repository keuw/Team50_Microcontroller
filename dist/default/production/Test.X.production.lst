

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 19:38:20 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           ; Version 1.40
    75                           ; Generated 01/12/2016 GMT
    76                           ; 
    77                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F4620 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     
   109                           	psect	idataCOMRAM
   110  003336                     __pidataCOMRAM:
   111                           	opt stack 0
   112                           
   113                           ;initializer for hex_to_dec@F3232
   114  003336  00                 	db	0
   115  003337  01                 	db	1
   116  003338  02                 	db	2
   117  003339  03                 	db	3
   118  00333A  04                 	db	4
   119  00333B  05                 	db	5
   120  00333C  06                 	db	6
   121  00333D  07                 	db	7
   122  00333E  08                 	db	8
   123  00333F  09                 	db	9
   124  003340  0A                 	db	10
   125  003341  0B                 	db	11
   126  003342  0C                 	db	12
   127  003343  0D                 	db	13
   128  003344  0E                 	db	14
   129  003345  0F                 	db	15
   130                           
   131                           	psect	mediumconst
   132  00FE3C                     __pmediumconst:
   133                           	opt stack 0
   134  00FE3C  00                 	db	0
   135  00FE3D                     _keys:
   136                           	opt stack 0
   137  00FE3D  31                 	db	49
   138  00FE3E  32                 	db	50
   139  00FE3F  33                 	db	51
   140  00FE40  41                 	db	65
   141  00FE41  34                 	db	52
   142  00FE42  35                 	db	53
   143  00FE43  36                 	db	54
   144  00FE44  42                 	db	66
   145  00FE45  37                 	db	55
   146  00FE46  38                 	db	56
   147  00FE47  39                 	db	57
   148  00FE48  43                 	db	67
   149  00FE49  2A                 	db	42
   150  00FE4A  30                 	db	48
   151  00FE4B  23                 	db	35
   152  00FE4C  44                 	db	68
   153  00FE4D  00                 	db	0
   154  00FE4E                     __end_of_keys:
   155                           	opt stack 0
   156  00FE4E                     _dpowers:
   157                           	opt stack 0
   158  00FE4E  0001               	dw	1
   159  00FE50  000A               	dw	10
   160  00FE52  0064               	dw	100
   161  00FE54  03E8               	dw	1000
   162  00FE56  2710               	dw	10000
   163  00FE58                     __end_of_dpowers:
   164                           	opt stack 0
   165  00FE58                     _hexpowers:
   166                           	opt stack 0
   167  00FE58  0001               	dw	1
   168  00FE5A  0010               	dw	16
   169  00FE5C  0100               	dw	256
   170  00FE5E  1000               	dw	4096
   171  00FE60                     __end_of_hexpowers:
   172                           	opt stack 0
   173  00FE60                     _happynewyear:
   174                           	opt stack 0
   175  00FE60  30                 	db	48
   176  00FE61  35                 	db	53
   177  00FE62  17                 	db	23
   178  00FE63  02                 	db	2
   179  00FE64  10                 	db	16
   180  00FE65  04                 	db	4
   181  00FE66  17                 	db	23
   182  00FE67                     __end_of_happynewyear:
   183                           	opt stack 0
   184  00FE67                     exp@coeff:
   185                           	opt stack 0
   186  00FE67  00                 	db	0
   187  00FE68  80                 	db	128
   188  00FE69  3F                 	db	63
   189  00FE6A  72                 	db	114
   190  00FE6B  31                 	db	49
   191  00FE6C  3F                 	db	63
   192  00FE6D  FE                 	db	254
   193  00FE6E  75                 	db	117
   194  00FE6F  3E                 	db	62
   195  00FE70  58                 	db	88
   196  00FE71  63                 	db	99
   197  00FE72  3D                 	db	61
   198  00FE73  95                 	db	149
   199  00FE74  1D                 	db	29
   200  00FE75  3C                 	db	60
   201  00FE76  C5                 	db	197
   202  00FE77  AE                 	db	174
   203  00FE78  3A                 	db	58
   204  00FE79  79                 	db	121
   205  00FE7A  21                 	db	33
   206  00FE7B  39                 	db	57
   207  00FE7C  94                 	db	148
   208  00FE7D  80                 	db	128
   209  00FE7E  37                 	db	55
   210  00FE7F  93                 	db	147
   211  00FE80  A7                 	db	167
   212  00FE81  35                 	db	53
   213  00FE82  56                 	db	86
   214  00FE83  15                 	db	21
   215  00FE84  34                 	db	52
   216  00FE85                     __end_ofexp@coeff:
   217                           	opt stack 0
   218  00FE85                     log@coeff:
   219                           	opt stack 0
   220  00FE85  00                 	db	0
   221  00FE86  00                 	db	0
   222  00FE87  00                 	db	0
   223  00FE88  00                 	db	0
   224  00FE89  80                 	db	128
   225  00FE8A  3F                 	db	63
   226  00FE8B  F0                 	db	240
   227  00FE8C  FF                 	db	255
   228  00FE8D  BE                 	db	190
   229  00FE8E  E2                 	db	226
   230  00FE8F  A9                 	db	169
   231  00FE90  3E                 	db	62
   232  00FE91  83                 	db	131
   233  00FE92  76                 	db	118
   234  00FE93  BE                 	db	190
   235  00FE94  AE                 	db	174
   236  00FE95  2B                 	db	43
   237  00FE96  3E                 	db	62
   238  00FE97  3C                 	db	60
   239  00FE98  C3                 	db	195
   240  00FE99  BD                 	db	189
   241  00FE9A  D2                 	db	210
   242  00FE9B  13                 	db	19
   243  00FE9C  3D                 	db	61
   244  00FE9D  78                 	db	120
   245  00FE9E  D3                 	db	211
   246  00FE9F  BB                 	db	187
   247  00FEA0                     __end_oflog@coeff:
   248                           	opt stack 0
   249  0000                     _ADCON0	set	4034
   250  0000                     _ADCON1	set	4033
   251  0000                     _EEADR	set	4009
   252  0000                     _EEADRH	set	4010
   253  0000                     _EECON1bits	set	4006
   254  0000                     _EECON2	set	4007
   255  0000                     _EEDATA	set	4008
   256  0000                     _INTCONbits	set	4082
   257  0000                     _LATA	set	3977
   258  0000                     _LATB	set	3978
   259  0000                     _LATC	set	3979
   260  0000                     _LATD	set	3980
   261  0000                     _LATDbits	set	3980
   262  0000                     _LATE	set	3981
   263  0000                     _PIR2bits	set	4001
   264  0000                     _PORTB	set	3969
   265  0000                     _PORTBbits	set	3969
   266  0000                     _PORTCbits	set	3970
   267  0000                     _PORTEbits	set	3972
   268  0000                     _SSPADD	set	4040
   269  0000                     _SSPBUF	set	4041
   270  0000                     _SSPCON1	set	4038
   271  0000                     _SSPCON2	set	4037
   272  0000                     _SSPSTAT	set	4039
   273  0000                     _TRISA	set	3986
   274  0000                     _TRISB	set	3987
   275  0000                     _TRISC	set	3988
   276  0000                     _TRISD	set	3989
   277  0000                     _TRISE	set	3990
   278  0000                     _ACKDT	set	32301
   279  0000                     _ACKEN	set	32300
   280  0000                     _INT1IE	set	32643
   281  0000                     _INT1IF	set	32640
   282  0000                     _PEN	set	32298
   283  0000                     _RCEN	set	32299
   284  0000                     _RSEN	set	32297
   285  0000                     _SEN	set	32296
   286  0000                     _TRISC3	set	31907
   287  0000                     _TRISC4	set	31908
   288  0000                     _nRBPU	set	32655
   289  00FEA0                     STR_1:
   290  00FEA0  50                 	db	80	;'P'
   291  00FEA1  72                 	db	114	;'r'
   292  00FEA2  65                 	db	101	;'e'
   293  00FEA3  73                 	db	115	;'s'
   294  00FEA4  73                 	db	115	;'s'
   295  00FEA5  20                 	db	32
   296  00FEA6  31                 	db	49	;'1'
   297  00FEA7  20                 	db	32
   298  00FEA8  74                 	db	116	;'t'
   299  00FEA9  6F                 	db	111	;'o'
   300  00FEAA  20                 	db	32
   301  00FEAB  62                 	db	98	;'b'
   302  00FEAC  65                 	db	101	;'e'
   303  00FEAD  67                 	db	103	;'g'
   304  00FEAE  69                 	db	105	;'i'
   305  00FEAF  6E                 	db	110	;'n'
   306  00FEB0  20                 	db	32
   307  00FEB1  6F                 	db	111	;'o'
   308  00FEB2  70                 	db	112	;'p'
   309  00FEB3  65                 	db	101	;'e'
   310  00FEB4  72                 	db	114	;'r'
   311  00FEB5  61                 	db	97	;'a'
   312  00FEB6  74                 	db	116	;'t'
   313  00FEB7  69                 	db	105	;'i'
   314  00FEB8  6F                 	db	111	;'o'
   315  00FEB9  6E                 	db	110	;'n'
   316  00FEBA  00                 	db	0
   317  00FEBB                     STR_24:
   318  00FEBB  44                 	db	68	;'D'
   319  00FEBC  61                 	db	97	;'a'
   320  00FEBD  74                 	db	116	;'t'
   321  00FEBE  65                 	db	101	;'e'
   322  00FEBF  3A                 	db	58	;':'
   323  00FEC0  20                 	db	32
   324  00FEC1  25                 	db	37
   325  00FEC2  30                 	db	48	;'0'
   326  00FEC3  32                 	db	50	;'2'
   327  00FEC4  78                 	db	120	;'x'
   328  00FEC5  2F                 	db	47
   329  00FEC6  25                 	db	37
   330  00FEC7  30                 	db	48	;'0'
   331  00FEC8  32                 	db	50	;'2'
   332  00FEC9  78                 	db	120	;'x'
   333  00FECA  2F                 	db	47
   334  00FECB  25                 	db	37
   335  00FECC  30                 	db	48	;'0'
   336  00FECD  32                 	db	50	;'2'
   337  00FECE  78                 	db	120	;'x'
   338  00FECF  20                 	db	32
   339  00FED0  20                 	db	32
   340  00FED1  00                 	db	0
   341  00FED2                     STR_25:
   342  00FED2  54                 	db	84	;'T'
   343  00FED3  69                 	db	105	;'i'
   344  00FED4  6D                 	db	109	;'m'
   345  00FED5  65                 	db	101	;'e'
   346  00FED6  3A                 	db	58	;':'
   347  00FED7  20                 	db	32
   348  00FED8  25                 	db	37
   349  00FED9  30                 	db	48	;'0'
   350  00FEDA  32                 	db	50	;'2'
   351  00FEDB  78                 	db	120	;'x'
   352  00FEDC  3A                 	db	58	;':'
   353  00FEDD  25                 	db	37
   354  00FEDE  30                 	db	48	;'0'
   355  00FEDF  32                 	db	50	;'2'
   356  00FEE0  78                 	db	120	;'x'
   357  00FEE1  3A                 	db	58	;':'
   358  00FEE2  25                 	db	37
   359  00FEE3  30                 	db	48	;'0'
   360  00FEE4  32                 	db	50	;'2'
   361  00FEE5  78                 	db	120	;'x'
   362  00FEE6  20                 	db	32
   363  00FEE7  20                 	db	32
   364  00FEE8  00                 	db	0
   365  00FEE9                     STR_8:
   366  00FEE9  25                 	db	37
   367  00FEEA  75                 	db	117	;'u'
   368  00FEEB  7C                 	db	124
   369  00FEEC  25                 	db	37
   370  00FEED  75                 	db	117	;'u'
   371  00FEEE  7C                 	db	124
   372  00FEEF  25                 	db	37
   373  00FEF0  75                 	db	117	;'u'
   374  00FEF1  7C                 	db	124
   375  00FEF2  25                 	db	37
   376  00FEF3  75                 	db	117	;'u'
   377  00FEF4  20                 	db	32
   378  00FEF5  20                 	db	32
   379  00FEF6  20                 	db	32
   380  00FEF7  20                 	db	32
   381  00FEF8  20                 	db	32
   382  00FEF9  20                 	db	32
   383  00FEFA  20                 	db	32
   384  00FEFB  20                 	db	32
   385  00FEFC  00                 	db	0
   386  00FEFD                     STR_11:
   387  00FEFD  54                 	db	84	;'T'
   388  00FEFE  69                 	db	105	;'i'
   389  00FEFF  6D                 	db	109	;'m'
   390  00FF00  65                 	db	101	;'e'
   391  00FF01  3A                 	db	58	;':'
   392  00FF02  20                 	db	32
   393  00FF03  25                 	db	37
   394  00FF04  69                 	db	105	;'i'
   395  00FF05  73                 	db	115	;'s'
   396  00FF06  20                 	db	32
   397  00FF07  20                 	db	32
   398  00FF08  20                 	db	32
   399  00FF09  20                 	db	32
   400  00FF0A  20                 	db	32
   401  00FF0B  20                 	db	32
   402  00FF0C  20                 	db	32
   403  00FF0D  20                 	db	32
   404  00FF0E  20                 	db	32
   405  00FF0F  00                 	db	0
   406  00FF10                     STR_7:
   407  00FF10  25                 	db	37
   408  00FF11  75                 	db	117	;'u'
   409  00FF12  7C                 	db	124
   410  00FF13  25                 	db	37
   411  00FF14  75                 	db	117	;'u'
   412  00FF15  7C                 	db	124
   413  00FF16  25                 	db	37
   414  00FF17  75                 	db	117	;'u'
   415  00FF18  7C                 	db	124
   416  00FF19  25                 	db	37
   417  00FF1A  75                 	db	117	;'u'
   418  00FF1B  7C                 	db	124
   419  00FF1C  25                 	db	37
   420  00FF1D  75                 	db	117	;'u'
   421  00FF1E  7C                 	db	124
   422  00FF1F  25                 	db	37
   423  00FF20  75                 	db	117	;'u'
   424  00FF21  00                 	db	0
   425  00FF22                     STR_26:
   426  00FF22  30                 	db	48	;'0'
   427  00FF23  31                 	db	49	;'1'
   428  00FF24  32                 	db	50	;'2'
   429  00FF25  33                 	db	51	;'3'
   430  00FF26  34                 	db	52	;'4'
   431  00FF27  35                 	db	53	;'5'
   432  00FF28  36                 	db	54	;'6'
   433  00FF29  37                 	db	55	;'7'
   434  00FF2A  38                 	db	56	;'8'
   435  00FF2B  39                 	db	57	;'9'
   436  00FF2C  61                 	db	97	;'a'
   437  00FF2D  62                 	db	98	;'b'
   438  00FF2E  63                 	db	99	;'c'
   439  00FF2F  64                 	db	100	;'d'
   440  00FF30  65                 	db	101	;'e'
   441  00FF31  66                 	db	102	;'f'
   442  00FF32  00                 	db	0
   443  00FF33                     STR_3:
   444  00FF33  20                 	db	32
   445  00FF34  20                 	db	32
   446  00FF35  20                 	db	32
   447  00FF36  20                 	db	32
   448  00FF37  20                 	db	32
   449  00FF38  20                 	db	32
   450  00FF39  20                 	db	32
   451  00FF3A  20                 	db	32
   452  00FF3B  20                 	db	32
   453  00FF3C  20                 	db	32
   454  00FF3D  20                 	db	32
   455  00FF3E  20                 	db	32
   456  00FF3F  20                 	db	32
   457  00FF40  20                 	db	32
   458  00FF41  20                 	db	32
   459  00FF42  20                 	db	32
   460  00FF43  00                 	db	0
   461  00FF44                     STR_2:
   462  00FF44  53                 	db	83	;'S'
   463  00FF45  61                 	db	97	;'a'
   464  00FF46  76                 	db	118	;'v'
   465  00FF47  65                 	db	101	;'e'
   466  00FF48  64                 	db	100	;'d'
   467  00FF49  20                 	db	32
   468  00FF4A  20                 	db	32
   469  00FF4B  20                 	db	32
   470  00FF4C  20                 	db	32
   471  00FF4D  20                 	db	32
   472  00FF4E  20                 	db	32
   473  00FF4F  20                 	db	32
   474  00FF50  20                 	db	32
   475  00FF51  20                 	db	32
   476  00FF52  20                 	db	32
   477  00FF53  20                 	db	32
   478  00FF54  00                 	db	0
   479  00FF55                     STR_4:
   480  00FF55  44                 	db	68	;'D'
   481  00FF56  65                 	db	101	;'e'
   482  00FF57  6C                 	db	108	;'l'
   483  00FF58  65                 	db	101	;'e'
   484  00FF59  74                 	db	116	;'t'
   485  00FF5A  65                 	db	101	;'e'
   486  00FF5B  64                 	db	100	;'d'
   487  00FF5C  20                 	db	32
   488  00FF5D  20                 	db	32
   489  00FF5E  20                 	db	32
   490  00FF5F  20                 	db	32
   491  00FF60  20                 	db	32
   492  00FF61  20                 	db	32
   493  00FF62  20                 	db	32
   494  00FF63  20                 	db	32
   495  00FF64  20                 	db	32
   496  00FF65  00                 	db	0
   497  00FF66                     STR_13:
   498  00FF66  43                 	db	67	;'C'
   499  00FF67  6F                 	db	111	;'o'
   500  00FF68  75                 	db	117	;'u'
   501  00FF69  6E                 	db	110	;'n'
   502  00FF6A  74                 	db	116	;'t'
   503  00FF6B  3A                 	db	58	;':'
   504  00FF6C  20                 	db	32
   505  00FF6D  25                 	db	37
   506  00FF6E  75                 	db	117	;'u'
   507  00FF6F  20                 	db	32
   508  00FF70  20                 	db	32
   509  00FF71  20                 	db	32
   510  00FF72  20                 	db	32
   511  00FF73  20                 	db	32
   512  00FF74  20                 	db	32
   513  00FF75  20                 	db	32
   514  00FF76  00                 	db	0
   515  00FF77                     STR_12:
   516  00FF77  54                 	db	84	;'T'
   517  00FF78  6F                 	db	111	;'o'
   518  00FF79  74                 	db	116	;'t'
   519  00FF7A  61                 	db	97	;'a'
   520  00FF7B  6C                 	db	108	;'l'
   521  00FF7C  20                 	db	32
   522  00FF7D  42                 	db	66	;'B'
   523  00FF7E  6F                 	db	111	;'o'
   524  00FF7F  74                 	db	116	;'t'
   525  00FF80  74                 	db	116	;'t'
   526  00FF81  6C                 	db	108	;'l'
   527  00FF82  65                 	db	101	;'e'
   528  00FF83  20                 	db	32
   529  00FF84  20                 	db	32
   530  00FF85  20                 	db	32
   531  00FF86  20                 	db	32
   532  00FF87  00                 	db	0
   533  00FF88                     STR_14:
   534  00FF88  59                 	db	89	;'Y'
   535  00FF89  4F                 	db	79	;'O'
   536  00FF8A  50                 	db	80	;'P'
   537  00FF8B  20                 	db	32
   538  00FF8C  57                 	db	87	;'W'
   539  00FF8D  69                 	db	105	;'i'
   540  00FF8E  74                 	db	116	;'t'
   541  00FF8F  68                 	db	104	;'h'
   542  00FF90  20                 	db	32
   543  00FF91  43                 	db	67	;'C'
   544  00FF92  61                 	db	97	;'a'
   545  00FF93  70                 	db	112	;'p'
   546  00FF94  20                 	db	32
   547  00FF95  20                 	db	32
   548  00FF96  20                 	db	32
   549  00FF97  20                 	db	32
   550  00FF98  00                 	db	0
   551  00FF99                     STR_18:
   552  00FF99  45                 	db	69	;'E'
   553  00FF9A  53                 	db	83	;'S'
   554  00FF9B  4B                 	db	75	;'K'
   555  00FF9C  41                 	db	65	;'A'
   556  00FF9D  20                 	db	32
   557  00FF9E  57                 	db	87	;'W'
   558  00FF9F  69                 	db	105	;'i'
   559  00FFA0  74                 	db	116	;'t'
   560  00FFA1  68                 	db	104	;'h'
   561  00FFA2  20                 	db	32
   562  00FFA3  43                 	db	67	;'C'
   563  00FFA4  61                 	db	97	;'a'
   564  00FFA5  70                 	db	112	;'p'
   565  00FFA6  20                 	db	32
   566  00FFA7  20                 	db	32
   567  00FFA8  20                 	db	32
   568  00FFA9  00                 	db	0
   569  00FFAA                     STR_22:
   570  00FFAA  4F                 	db	79	;'O'
   571  00FFAB  70                 	db	112	;'p'
   572  00FFAC  65                 	db	101	;'e'
   573  00FFAD  72                 	db	114	;'r'
   574  00FFAE  61                 	db	97	;'a'
   575  00FFAF  74                 	db	116	;'t'
   576  00FFB0  69                 	db	105	;'i'
   577  00FFB1  6F                 	db	111	;'o'
   578  00FFB2  6E                 	db	110	;'n'
   579  00FFB3  20                 	db	32
   580  00FFB4  44                 	db	68	;'D'
   581  00FFB5  6F                 	db	111	;'o'
   582  00FFB6  6E                 	db	110	;'n'
   583  00FFB7  65                 	db	101	;'e'
   584  00FFB8  21                 	db	33
   585  00FFB9  20                 	db	32
   586  00FFBA  00                 	db	0
   587  00FFBB                     STR_10:
   588  00FFBB  54                 	db	84	;'T'
   589  00FFBC  6F                 	db	111	;'o'
   590  00FFBD  74                 	db	116	;'t'
   591  00FFBE  61                 	db	97	;'a'
   592  00FFBF  6C                 	db	108	;'l'
   593  00FFC0  20                 	db	32
   594  00FFC1  4F                 	db	79	;'O'
   595  00FFC2  70                 	db	112	;'p'
   596  00FFC3  65                 	db	101	;'e'
   597  00FFC4  72                 	db	114	;'r'
   598  00FFC5  61                 	db	97	;'a'
   599  00FFC6  74                 	db	116	;'t'
   600  00FFC7  69                 	db	105	;'i'
   601  00FFC8  6F                 	db	111	;'o'
   602  00FFC9  6E                 	db	110	;'n'
   603  00FFCA  20                 	db	32
   604  00FFCB  00                 	db	0
   605  00FFCC                     STR_16:
   606  00FFCC  59                 	db	89	;'Y'
   607  00FFCD  4F                 	db	79	;'O'
   608  00FFCE  50                 	db	80	;'P'
   609  00FFCF  20                 	db	32
   610  00FFD0  57                 	db	87	;'W'
   611  00FFD1  69                 	db	105	;'i'
   612  00FFD2  74                 	db	116	;'t'
   613  00FFD3  68                 	db	104	;'h'
   614  00FFD4  20                 	db	32
   615  00FFD5  4E                 	db	78	;'N'
   616  00FFD6  6F                 	db	111	;'o'
   617  00FFD7  20                 	db	32
   618  00FFD8  43                 	db	67	;'C'
   619  00FFD9  61                 	db	97	;'a'
   620  00FFDA  70                 	db	112	;'p'
   621  00FFDB  20                 	db	32
   622  00FFDC  00                 	db	0
   623  00FFDD                     STR_20:
   624  00FFDD  45                 	db	69	;'E'
   625  00FFDE  53                 	db	83	;'S'
   626  00FFDF  4B                 	db	75	;'K'
   627  00FFE0  41                 	db	65	;'A'
   628  00FFE1  20                 	db	32
   629  00FFE2  57                 	db	87	;'W'
   630  00FFE3  69                 	db	105	;'i'
   631  00FFE4  74                 	db	116	;'t'
   632  00FFE5  68                 	db	104	;'h'
   633  00FFE6  20                 	db	32
   634  00FFE7  4E                 	db	78	;'N'
   635  00FFE8  6F                 	db	111	;'o'
   636  00FFE9  20                 	db	32
   637  00FFEA  43                 	db	67	;'C'
   638  00FFEB  61                 	db	97	;'a'
   639  00FFEC  70                 	db	112	;'p'
   640  00FFED  00                 	db	0
   641  00FFEE                     STR_6:
   642  00FFEE  59                 	db	89	;'Y'
   643  00FFEF  20                 	db	32
   644  00FFF0  20                 	db	32
   645  00FFF1  7C                 	db	124
   646  00FFF2  59                 	db	89	;'Y'
   647  00FFF3  6E                 	db	110	;'n'
   648  00FFF4  63                 	db	99	;'c'
   649  00FFF5  7C                 	db	124
   650  00FFF6  45                 	db	69	;'E'
   651  00FFF7  20                 	db	32
   652  00FFF8  20                 	db	32
   653  00FFF9  7C                 	db	124
   654  00FFFA  45                 	db	69	;'E'
   655  00FFFB  6E                 	db	110	;'n'
   656  00FFFC  63                 	db	99	;'c'
   657  00FFFD  00                 	db	0
   658  0000                     
   659                           ; #config settings
   660  00FFFE  00                 	db	0	; dummy byte at the end
   661  0000                     
   662                           	psect	cinit
   663  0031AC                     __pcinit:
   664                           	opt stack 0
   665  0031AC                     start_initialization:
   666                           	opt stack 0
   667  0031AC                     __initialization:
   668                           	opt stack 0
   669                           
   670                           ; Initialize objects allocated to COMRAM (16 bytes)
   671                           ; load TBLPTR registers with __pidataCOMRAM
   672  0031AC  0E36               	movlw	low __pidataCOMRAM
   673  0031AE  6EF6               	movwf	tblptrl,c
   674  0031B0  0E33               	movlw	high __pidataCOMRAM
   675  0031B2  6EF7               	movwf	tblptrh,c
   676  0031B4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   677  0031B6  6EF8               	movwf	tblptru,c
   678  0031B8  EE00  F055         	lfsr	0,__pdataCOMRAM
   679  0031BC  EE10 F010          	lfsr	1,16
   680  0031C0                     copy_data0:
   681  0031C0  0009               	tblrd		*+
   682  0031C2  CFF5 FFEE          	movff	tablat,postinc0
   683  0031C6  50E5               	movf	postdec1,w,c
   684  0031C8  50E1               	movf	fsr1l,w,c
   685  0031CA  E1FA               	bnz	copy_data0
   686                           
   687                           ; Clear objects allocated to BANK1 (1 bytes)
   688  0031CC  0101               	movlb	1
   689  0031CE  6B55               	clrf	__pbssBANK1& (0+255),b
   690                           
   691                           ; Clear objects allocated to BANK0 (1 bytes)
   692  0031D0  0100               	movlb	0
   693  0031D2  6BFB               	clrf	__pbssBANK0& (0+255),b
   694                           
   695                           ; Clear objects allocated to COMRAM (2 bytes)
   696  0031D4  6A66               	clrf	(__pbssCOMRAM+1)& (0+255),c
   697  0031D6  6A65               	clrf	__pbssCOMRAM& (0+255),c
   698  0031D8                     end_of_initialization:
   699                           	opt stack 0
   700  0031D8                     __end_of__initialization:
   701                           	opt stack 0
   702  0031D8  9067               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   703  0031DA  9267               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   704  0031DC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   705  0031DE  6EF8               	movwf	tblptru,c
   706  0031E0  0100               	movlb	0
   707  0031E2  EFD9  F004         	goto	_main	;jump to C main() function
   708                           tblptru	equ	0xFF8
   709                           tblptrh	equ	0xFF7
   710                           tblptrl	equ	0xFF6
   711                           tablat	equ	0xFF5
   712                           postinc0	equ	0xFEE
   713                           postdec1	equ	0xFE5
   714                           fsr1l	equ	0xFE1
   715                           
   716                           	psect	bssCOMRAM
   717  000065                     __pbssCOMRAM:
   718                           	opt stack 0
   719  000065                     _errno:
   720                           	opt stack 0
   721  000065                     	ds	2
   722                           tblptru	equ	0xFF8
   723                           tblptrh	equ	0xFF7
   724                           tblptrl	equ	0xFF6
   725                           tablat	equ	0xFF5
   726                           postinc0	equ	0xFEE
   727                           postdec1	equ	0xFE5
   728                           fsr1l	equ	0xFE1
   729                           
   730                           	psect	dataCOMRAM
   731  000055                     __pdataCOMRAM:
   732                           	opt stack 0
   733  000055                     hex_to_dec@F3232:
   734                           	opt stack 0
   735  000055                     	ds	16
   736                           tblptru	equ	0xFF8
   737                           tblptrh	equ	0xFF7
   738                           tblptrl	equ	0xFF6
   739                           tablat	equ	0xFF5
   740                           postinc0	equ	0xFEE
   741                           postdec1	equ	0xFE5
   742                           fsr1l	equ	0xFE1
   743                           
   744                           	psect	bssBANK0
   745  0000FB                     __pbssBANK0:
   746                           	opt stack 0
   747  0000FB                     _bot_type:
   748                           	opt stack 0
   749  0000FB                     	ds	1
   750                           tblptru	equ	0xFF8
   751                           tblptrh	equ	0xFF7
   752                           tblptrl	equ	0xFF6
   753                           tablat	equ	0xFF5
   754                           postinc0	equ	0xFEE
   755                           postdec1	equ	0xFE5
   756                           fsr1l	equ	0xFE1
   757                           
   758                           	psect	bssBANK1
   759  000155                     __pbssBANK1:
   760                           	opt stack 0
   761  000155                     _curr_state:
   762                           	opt stack 0
   763  000155                     	ds	1
   764                           tblptru	equ	0xFF8
   765                           tblptrh	equ	0xFF7
   766                           tblptrl	equ	0xFF6
   767                           tablat	equ	0xFF5
   768                           postinc0	equ	0xFEE
   769                           postdec1	equ	0xFE5
   770                           fsr1l	equ	0xFE1
   771                           
   772                           	psect	cstackBANK1
   773  000100                     __pcstackBANK1:
   774                           	opt stack 0
   775  000100                     init_operation@luminosity1:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x0
   779  000100                     	ds	2
   780  000102                     init_operation@detection_time:
   781                           	opt stack 0
   782                           
   783                           ; 7 bytes @ 0x2
   784  000102                     	ds	7
   785  000109                     _init_operation$1504:
   786                           	opt stack 0
   787                           
   788                           ; 3 bytes @ 0x9
   789  000109                     	ds	3
   790  00010C                     init_operation@g1:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0xC
   794  00010C                     	ds	2
   795  00010E                     init_operation@c1:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0xE
   799  00010E                     	ds	2
   800  000110                     init_operation@c2:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x10
   804  000110                     	ds	2
   805  000112                     init_operation@c1_616:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x12
   809  000112                     	ds	2
   810  000114                     init_operation@c2_620:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x14
   814  000114                     	ds	2
   815  000116                     init_operation@g2:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x16
   819  000116                     	ds	2
   820  000118                     init_operation@g1_614:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x18
   824  000118                     	ds	2
   825  00011A                     init_operation@g2_618:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x1A
   829  00011A                     	ds	2
   830  00011C                     init_operation@r1:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0x1C
   834  00011C                     	ds	2
   835  00011E                     init_operation@b1:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x1E
   839  00011E                     	ds	2
   840  000120                     init_operation@i:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x20
   844  000120                     	ds	2
   845  000122                     init_operation@r2:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x22
   849  000122                     	ds	2
   850  000124                     init_operation@b2:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x24
   854  000124                     	ds	2
   855  000126                     init_operation@r1_613:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x26
   859  000126                     	ds	2
   860  000128                     init_operation@b1_615:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x28
   864  000128                     	ds	2
   865  00012A                     init_operation@r2_617:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x2A
   869  00012A                     	ds	2
   870  00012C                     init_operation@b2_619:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x2C
   874  00012C                     	ds	2
   875  00012E                     init_operation@red:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x2E
   879  00012E                     	ds	2
   880  000130                     init_operation@green:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x30
   884  000130                     	ds	2
   885  000132                     init_operation@blue:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x32
   889  000132                     	ds	2
   890  000134                     init_operation@clear:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x34
   894  000134                     	ds	2
   895  000136                     main@start_time:
   896                           	opt stack 0
   897                           
   898                           ; 7 bytes @ 0x36
   899  000136                     	ds	7
   900  00013D                     main@end_time:
   901                           	opt stack 0
   902                           
   903                           ; 7 bytes @ 0x3D
   904  00013D                     	ds	7
   905  000144                     main@time:
   906                           	opt stack 0
   907                           
   908                           ; 7 bytes @ 0x44
   909  000144                     	ds	7
   910  00014B                     main@temp:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x4B
   914  00014B                     	ds	2
   915  00014D                     main@pressed:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x4D
   919  00014D                     	ds	1
   920  00014E                     main@bot_count:
   921                           	opt stack 0
   922                           
   923                           ; 4 bytes @ 0x4E
   924  00014E                     	ds	4
   925  000152                     main@step_state:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x52
   929  000152                     	ds	2
   930  000154                     main@mem:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x54
   934  000154                     	ds	1
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           tblptrl	equ	0xFF6
   938                           tablat	equ	0xFF5
   939                           postinc0	equ	0xFEE
   940                           postdec1	equ	0xFE5
   941                           fsr1l	equ	0xFE1
   942                           
   943                           	psect	cstackBANK0
   944  000080                     __pcstackBANK0:
   945                           	opt stack 0
   946  000080                     ??___altoft:
   947                           
   948                           ; 1 bytes @ 0x0
   949  000080                     	ds	4
   950  000084                     ?_floor:
   951                           	opt stack 0
   952  000084                     floor@x:
   953                           	opt stack 0
   954                           
   955                           ; 3 bytes @ 0x4
   956  000084                     	ds	3
   957  000087                     floor@i:
   958                           	opt stack 0
   959                           
   960                           ; 3 bytes @ 0x7
   961  000087                     	ds	3
   962  00008A                     floor@expon:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0xA
   966  00008A                     	ds	2
   967  00008C                     ?_exp:
   968                           	opt stack 0
   969  00008C                     exp@x:
   970                           	opt stack 0
   971                           
   972                           ; 3 bytes @ 0xC
   973  00008C                     	ds	3
   974  00008F                     _exp$1507:
   975                           	opt stack 0
   976                           
   977                           ; 3 bytes @ 0xF
   978  00008F                     	ds	3
   979  000092                     exp@exponent:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x12
   983  000092                     	ds	2
   984  000094                     exp@sign:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x14
   988  000094                     	ds	1
   989  000095                     ?_pow:
   990                           	opt stack 0
   991  000095                     pow@x:
   992                           	opt stack 0
   993                           
   994                           ; 3 bytes @ 0x15
   995  000095                     	ds	3
   996  000098                     pow@y:
   997                           	opt stack 0
   998                           
   999                           ; 3 bytes @ 0x18
  1000  000098                     	ds	3
  1001  00009B                     _pow$1505:
  1002                           	opt stack 0
  1003                           
  1004                           ; 3 bytes @ 0x1B
  1005  00009B                     	ds	3
  1006  00009E                     _pow$1506:
  1007                           	opt stack 0
  1008                           
  1009                           ; 3 bytes @ 0x1E
  1010  00009E                     	ds	3
  1011  0000A1                     pow@sign:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0x21
  1015  0000A1                     	ds	1
  1016  0000A2                     pow@yi:
  1017                           	opt stack 0
  1018                           
  1019                           ; 4 bytes @ 0x22
  1020  0000A2                     	ds	4
  1021  0000A6                     ?_dec_to_hex:
  1022                           	opt stack 0
  1023  0000A6                     dec_to_hex@num:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x26
  1027  0000A6                     	ds	2
  1028  0000A8                     _dec_to_hex$1500:
  1029                           	opt stack 0
  1030                           
  1031                           ; 3 bytes @ 0x28
  1032  0000A8                     	ds	3
  1033  0000AB                     _dec_to_hex$1501:
  1034                           	opt stack 0
  1035                           
  1036                           ; 3 bytes @ 0x2B
  1037  0000AB                     	ds	3
  1038  0000AE                     dec_to_hex@temp:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x2E
  1042  0000AE                     	ds	2
  1043  0000B0                     dec_to_hex@i:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x30
  1047  0000B0                     	ds	2
  1048  0000B2                     dec_to_hex@hexnum:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x32
  1052  0000B2                     	ds	2
  1053  0000B4                     dec_to_hex@quotient:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x34
  1057  0000B4                     	ds	2
  1058  0000B6                     ?_time_difference:
  1059                           	opt stack 0
  1060  0000B6                     time_difference@time1:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x36
  1064  0000B6                     	ds	2
  1065  0000B8                     time_difference@time2:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x38
  1069  0000B8                     	ds	2
  1070  0000BA                     ??_time_difference:
  1071                           
  1072                           ; 1 bytes @ 0x3A
  1073  0000BA                     	ds	2
  1074  0000BC                     time_difference@hr1:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x3C
  1078  0000BC                     	ds	2
  1079  0000BE                     time_difference@hr2:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x3E
  1083  0000BE                     	ds	2
  1084  0000C0                     time_difference@min1:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x40
  1088  0000C0                     	ds	2
  1089  0000C2                     time_difference@min2:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x42
  1093  0000C2                     	ds	2
  1094  0000C4                     time_difference@s1:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x44
  1098  0000C4                     	ds	2
  1099  0000C6                     time_difference@s2:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x46
  1103  0000C6                     	ds	2
  1104  0000C8                     time_difference@d1:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x48
  1108  0000C8                     	ds	2
  1109  0000CA                     time_difference@d2:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x4A
  1113  0000CA                     	ds	2
  1114  0000CC                     time_difference@d3:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x4C
  1118  0000CC                     	ds	2
  1119  0000CE                     ?_printf:
  1120                           	opt stack 0
  1121  0000CE                     printf@f:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0x4E
  1125  0000CE                     	ds	14
  1126  0000DC                     ??_printf:
  1127                           
  1128                           ; 1 bytes @ 0x5C
  1129  0000DC                     	ds	4
  1130  0000E0                     printf@idx:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x60
  1134  0000E0                     	ds	1
  1135  0000E1                     printf@ap:
  1136                           	opt stack 0
  1137                           
  1138                           ; 2 bytes @ 0x61
  1139  0000E1                     	ds	2
  1140  0000E3                     printf@prec:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x63
  1144  0000E3                     	ds	1
  1145  0000E4                     printf@val:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x64
  1149  0000E4                     	ds	2
  1150  0000E6                     printf@flag:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x66
  1154  0000E6                     	ds	1
  1155  0000E7                     printf@width:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0x67
  1159  0000E7                     	ds	2
  1160  0000E9                     printf@c:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x69
  1164  0000E9                     	ds	1
  1165  0000EA                     init_operation@start_time:
  1166                           	opt stack 0
  1167  0000EA                     runtime@start_time:
  1168                           	opt stack 0
  1169  0000EA                     bottle_count@bot_count:
  1170                           	opt stack 0
  1171  0000EA                     operation_end@step_state:
  1172                           	opt stack 0
  1173  0000EA                     date_time@time:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x6A
  1177  0000EA                     	ds	2
  1178  0000EC                     ??_operation_end:
  1179  0000EC                     ??_date_time:
  1180  0000EC                     ??_bottle_count:
  1181  0000EC                     init_operation@time:
  1182                           	opt stack 0
  1183  0000EC                     runtime@end_time:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x6C
  1187  0000EC                     	ds	2
  1188  0000EE                     init_operation@bot_count:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x6E
  1192  0000EE                     	ds	1
  1193  0000EF                     date_time@i:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x6F
  1197  0000EF                     	ds	1
  1198  0000F0                     init_operation@step_state:
  1199                           	opt stack 0
  1200                           
  1201                           ; 2 bytes @ 0x70
  1202  0000F0                     	ds	2
  1203  0000F2                     ??_init_operation:
  1204                           
  1205                           ; 1 bytes @ 0x72
  1206  0000F2                     	ds	2
  1207  0000F4                     ??_main:
  1208                           
  1209                           ; 1 bytes @ 0x74
  1210  0000F4                     	ds	7
  1211                           tblptru	equ	0xFF8
  1212                           tblptrh	equ	0xFF7
  1213                           tblptrl	equ	0xFF6
  1214                           tablat	equ	0xFF5
  1215                           postinc0	equ	0xFEE
  1216                           postdec1	equ	0xFE5
  1217                           fsr1l	equ	0xFE1
  1218                           
  1219                           	psect	cstackCOMRAM
  1220  000001                     __pcstackCOMRAM:
  1221                           	opt stack 0
  1222  000001                     i2eeprom_readbyte@address:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x0
  1226  000001                     	ds	2
  1227  000003                     i2eeprom_writebyte@address:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x2
  1231  000003                     	ds	2
  1232  000005                     i2eeprom_writebyte@data:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x4
  1236  000005                     	ds	1
  1237  000006                     
  1238                           ; 3 bytes @ 0x5
  1239  000006                     	ds	3
  1240  000009                     ??_keypressed:
  1241                           
  1242                           ; 1 bytes @ 0x8
  1243  000009                     	ds	16
  1244  000019                     ??_isdigit:
  1245  000019                     ??_I2C_Master_Wait:
  1246  000019                     ?___wmul:
  1247                           	opt stack 0
  1248  000019                     ?___awdiv:
  1249                           	opt stack 0
  1250  000019                     ?___lwdiv:
  1251                           	opt stack 0
  1252  000019                     ?___ftpack:
  1253                           	opt stack 0
  1254  000019                     ?_frexp:
  1255                           	opt stack 0
  1256  000019                     ?___ftneg:
  1257                           	opt stack 0
  1258  000019                     ?___lldiv:
  1259                           	opt stack 0
  1260  000019                     lcdNibble@temp:
  1261                           	opt stack 0
  1262  000019                     stepper@r:
  1263                           	opt stack 0
  1264  000019                     stepper_rev@r:
  1265                           	opt stack 0
  1266  000019                     eeprom_readbyte@address:
  1267                           	opt stack 0
  1268  000019                     ___wmul@multiplier:
  1269                           	opt stack 0
  1270  000019                     ___awdiv@dividend:
  1271                           	opt stack 0
  1272  000019                     ___lwdiv@dividend:
  1273                           	opt stack 0
  1274  000019                     ___ftpack@arg:
  1275                           	opt stack 0
  1276  000019                     ___ftneg@f1:
  1277                           	opt stack 0
  1278  000019                     frexp@value:
  1279                           	opt stack 0
  1280  000019                     ___lldiv@dividend:
  1281                           	opt stack 0
  1282                           
  1283                           ; 4 bytes @ 0x18
  1284  000019                     	ds	1
  1285  00001A                     lcdNibble@data:
  1286                           	opt stack 0
  1287  00001A                     I2C_Master_Read@a:
  1288                           	opt stack 0
  1289  00001A                     _isdigit$1053:
  1290                           	opt stack 0
  1291  00001A                     I2C_Master_Write@d:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x19
  1295  00001A                     	ds	1
  1296  00001B                     ??_stepper:
  1297  00001B                     ??_stepper_rev:
  1298  00001B                     lcdInst@data:
  1299                           	opt stack 0
  1300  00001B                     putch@data:
  1301                           	opt stack 0
  1302  00001B                     I2C_Master_Read@temp:
  1303                           	opt stack 0
  1304  00001B                     isdigit@c:
  1305                           	opt stack 0
  1306  00001B                     eeprom_writebyte@address:
  1307                           	opt stack 0
  1308  00001B                     ___wmul@multiplicand:
  1309                           	opt stack 0
  1310  00001B                     ___awdiv@divisor:
  1311                           	opt stack 0
  1312  00001B                     ___lwdiv@divisor:
  1313                           	opt stack 0
  1314                           
  1315                           ; 2 bytes @ 0x1A
  1316  00001B                     	ds	1
  1317  00001C                     ??_initLCD:
  1318  00001C                     ___ftpack@exp:
  1319                           	opt stack 0
  1320  00001C                     update_time@time:
  1321                           	opt stack 0
  1322  00001C                     stepper@i:
  1323                           	opt stack 0
  1324  00001C                     stepper_rev@i:
  1325                           	opt stack 0
  1326  00001C                     read_colorsensor1@red:
  1327                           	opt stack 0
  1328  00001C                     read_colorsensor2@red:
  1329                           	opt stack 0
  1330  00001C                     frexp@eptr:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0x1B
  1334  00001C                     	ds	1
  1335  00001D                     eeprom_writebyte@data:
  1336                           	opt stack 0
  1337  00001D                     ___awdiv@counter:
  1338                           	opt stack 0
  1339  00001D                     ___ftpack@sign:
  1340                           	opt stack 0
  1341  00001D                     ___lwdiv@counter:
  1342                           	opt stack 0
  1343  00001D                     ___wmul@product:
  1344                           	opt stack 0
  1345  00001D                     ___lldiv@divisor:
  1346                           	opt stack 0
  1347                           
  1348                           ; 4 bytes @ 0x1C
  1349  00001D                     	ds	1
  1350  00001E                     ??___ftpack:
  1351  00001E                     ??_frexp:
  1352  00001E                     update_time@i:
  1353                           	opt stack 0
  1354  00001E                     ___awdiv@sign:
  1355                           	opt stack 0
  1356  00001E                     stepper_state@step_state:
  1357                           	opt stack 0
  1358  00001E                     read_colorsensor1@green:
  1359                           	opt stack 0
  1360  00001E                     read_colorsensor2@green:
  1361                           	opt stack 0
  1362  00001E                     ___lwdiv@quotient:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0x1D
  1366  00001E                     	ds	1
  1367  00001F                     ___awdiv@quotient:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x1E
  1371  00001F                     	ds	1
  1372  000020                     ??_stepper_state:
  1373  000020                     ?___lwmod:
  1374                           	opt stack 0
  1375  000020                     read_colorsensor1@blue:
  1376                           	opt stack 0
  1377  000020                     read_colorsensor2@blue:
  1378                           	opt stack 0
  1379  000020                     ___lwmod@dividend:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x1F
  1383  000020                     	ds	1
  1384  000021                     ?___awtoft:
  1385                           	opt stack 0
  1386  000021                     ?___lltoft:
  1387                           	opt stack 0
  1388  000021                     ___awtoft@c:
  1389                           	opt stack 0
  1390  000021                     ___lldiv@quotient:
  1391                           	opt stack 0
  1392  000021                     ___lltoft@c:
  1393                           	opt stack 0
  1394                           
  1395                           ; 4 bytes @ 0x20
  1396  000021                     	ds	1
  1397  000022                     stepper_state@next_state:
  1398                           	opt stack 0
  1399  000022                     read_colorsensor1@clear:
  1400                           	opt stack 0
  1401  000022                     read_colorsensor2@clear:
  1402                           	opt stack 0
  1403  000022                     ___lwmod@divisor:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x21
  1407  000022                     	ds	2
  1408  000024                     ___awtoft@sign:
  1409                           	opt stack 0
  1410  000024                     ___lwmod@counter:
  1411                           	opt stack 0
  1412                           
  1413                           ; 1 bytes @ 0x23
  1414  000024                     	ds	1
  1415  000025                     ??___lltoft:
  1416  000025                     ?___ftdiv:
  1417                           	opt stack 0
  1418  000025                     ?___ftmul:
  1419                           	opt stack 0
  1420  000025                     ___lldiv@counter:
  1421                           	opt stack 0
  1422  000025                     ___ftdiv@f1:
  1423                           	opt stack 0
  1424  000025                     ___ftmul@f1:
  1425                           	opt stack 0
  1426                           
  1427                           ; 3 bytes @ 0x24
  1428  000025                     	ds	1
  1429  000026                     I2C_Master_Init@c:
  1430                           	opt stack 0
  1431                           
  1432                           ; 4 bytes @ 0x25
  1433  000026                     	ds	2
  1434  000028                     ___ftdiv@f2:
  1435                           	opt stack 0
  1436  000028                     ___ftmul@f2:
  1437                           	opt stack 0
  1438                           
  1439                           ; 3 bytes @ 0x27
  1440  000028                     	ds	1
  1441  000029                     ___lltoft@exp:
  1442                           	opt stack 0
  1443                           
  1444                           ; 1 bytes @ 0x28
  1445  000029                     	ds	1
  1446  00002A                     ??_I2C_Master_Init:
  1447                           
  1448                           ; 1 bytes @ 0x29
  1449  00002A                     	ds	1
  1450  00002B                     ??___ftdiv:
  1451  00002B                     ??___ftmul:
  1452                           
  1453                           ; 1 bytes @ 0x2A
  1454  00002B                     	ds	3
  1455  00002E                     ___ftdiv@cntr:
  1456                           	opt stack 0
  1457  00002E                     ___ftmul@exp:
  1458                           	opt stack 0
  1459                           
  1460                           ; 1 bytes @ 0x2D
  1461  00002E                     	ds	1
  1462  00002F                     ___ftdiv@f3:
  1463                           	opt stack 0
  1464  00002F                     ___ftmul@f3_as_product:
  1465                           	opt stack 0
  1466                           
  1467                           ; 3 bytes @ 0x2E
  1468  00002F                     	ds	3
  1469  000032                     ___ftdiv@exp:
  1470                           	opt stack 0
  1471  000032                     ___ftmul@cntr:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x31
  1475  000032                     	ds	1
  1476  000033                     ___ftdiv@sign:
  1477                           	opt stack 0
  1478  000033                     ___ftmul@sign:
  1479                           	opt stack 0
  1480                           
  1481                           ; 1 bytes @ 0x32
  1482  000033                     	ds	1
  1483  000034                     ?___ftadd:
  1484                           	opt stack 0
  1485  000034                     ___ftadd@f1:
  1486                           	opt stack 0
  1487  000034                     ___ftge@ff1:
  1488                           	opt stack 0
  1489                           
  1490                           ; 3 bytes @ 0x33
  1491  000034                     	ds	3
  1492  000037                     ___ftadd@f2:
  1493                           	opt stack 0
  1494  000037                     ___ftge@ff2:
  1495                           	opt stack 0
  1496                           
  1497                           ; 3 bytes @ 0x36
  1498  000037                     	ds	3
  1499  00003A                     ??___ftadd:
  1500  00003A                     ??___ftge:
  1501                           
  1502                           ; 1 bytes @ 0x39
  1503  00003A                     	ds	3
  1504  00003D                     ___ftadd@sign:
  1505                           	opt stack 0
  1506                           
  1507                           ; 1 bytes @ 0x3C
  1508  00003D                     	ds	1
  1509  00003E                     ___ftadd@exp2:
  1510                           	opt stack 0
  1511                           
  1512                           ; 1 bytes @ 0x3D
  1513  00003E                     	ds	1
  1514  00003F                     ___ftadd@exp1:
  1515                           	opt stack 0
  1516                           
  1517                           ; 1 bytes @ 0x3E
  1518  00003F                     	ds	1
  1519  000040                     ?___ftsub:
  1520                           	opt stack 0
  1521  000040                     ?_eval_poly:
  1522                           	opt stack 0
  1523  000040                     ?___fttol:
  1524                           	opt stack 0
  1525  000040                     ___ftsub@f1:
  1526                           	opt stack 0
  1527  000040                     ___fttol@f1:
  1528                           	opt stack 0
  1529  000040                     eval_poly@x:
  1530                           	opt stack 0
  1531                           
  1532                           ; 3 bytes @ 0x3F
  1533  000040                     	ds	3
  1534  000043                     eval_poly@d:
  1535                           	opt stack 0
  1536  000043                     ___ftsub@f2:
  1537                           	opt stack 0
  1538                           
  1539                           ; 3 bytes @ 0x42
  1540  000043                     	ds	1
  1541  000044                     ??___fttol:
  1542                           
  1543                           ; 1 bytes @ 0x43
  1544  000044                     	ds	1
  1545  000045                     eval_poly@n:
  1546                           	opt stack 0
  1547                           
  1548                           ; 2 bytes @ 0x44
  1549  000045                     	ds	1
  1550  000046                     
  1551                           ; 1 bytes @ 0x45
  1552  000046                     	ds	1
  1553  000047                     ??_eval_poly:
  1554                           
  1555                           ; 1 bytes @ 0x46
  1556  000047                     	ds	2
  1557  000049                     ___fttol@sign1:
  1558                           	opt stack 0
  1559  000049                     eval_poly@res:
  1560                           	opt stack 0
  1561                           
  1562                           ; 3 bytes @ 0x48
  1563  000049                     	ds	1
  1564  00004A                     ___fttol@lval:
  1565                           	opt stack 0
  1566                           
  1567                           ; 4 bytes @ 0x49
  1568  00004A                     	ds	2
  1569  00004C                     ?_log:
  1570                           	opt stack 0
  1571  00004C                     ?_ldexp:
  1572                           	opt stack 0
  1573  00004C                     ldexp@value:
  1574                           	opt stack 0
  1575  00004C                     log@x:
  1576                           	opt stack 0
  1577                           
  1578                           ; 3 bytes @ 0x4B
  1579  00004C                     	ds	2
  1580  00004E                     ___fttol@exp1:
  1581                           	opt stack 0
  1582                           
  1583                           ; 1 bytes @ 0x4D
  1584  00004E                     	ds	1
  1585  00004F                     ?___altoft:
  1586                           	opt stack 0
  1587  00004F                     ldexp@newexp:
  1588                           	opt stack 0
  1589  00004F                     log@exponent:
  1590                           	opt stack 0
  1591  00004F                     ___altoft@c:
  1592                           	opt stack 0
  1593                           
  1594                           ; 4 bytes @ 0x4E
  1595  00004F                     	ds	2
  1596  000051                     ??_ldexp:
  1597                           
  1598                           ; 1 bytes @ 0x50
  1599  000051                     	ds	2
  1600  000053                     ___altoft@exp:
  1601                           	opt stack 0
  1602                           
  1603                           ; 1 bytes @ 0x52
  1604  000053                     	ds	1
  1605  000054                     ___altoft@sign:
  1606                           	opt stack 0
  1607                           
  1608                           ; 1 bytes @ 0x53
  1609  000054                     	ds	1
  1610  000055                     tblptru	equ	0xFF8
  1611                           tblptrh	equ	0xFF7
  1612                           tblptrl	equ	0xFF6
  1613                           tablat	equ	0xFF5
  1614                           postinc0	equ	0xFEE
  1615                           postdec1	equ	0xFE5
  1616                           fsr1l	equ	0xFE1
  1617                           
  1618                           ; 1 bytes @ 0x54
  1619 ;;
  1620 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
  1621 ;;
  1622 ;; *************** function _main *****************
  1623 ;; Defined at:
  1624 ;;		line 73 in file "main.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;		None
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;  time            7   68[BANK1 ] unsigned char [7]
  1629 ;;  end_time        7   61[BANK1 ] unsigned char [7]
  1630 ;;  start_time      7   54[BANK1 ] unsigned char [7]
  1631 ;;  bot_count       4   78[BANK1 ] unsigned char [4]
  1632 ;;  step_state      2   82[BANK1 ] unsigned char [2]
  1633 ;;  temp            2   75[BANK1 ] int 
  1634 ;;  mem             1   84[BANK1 ] unsigned char [1]
  1635 ;;  pressed         1   77[BANK1 ] unsigned char 
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      void 
  1638 ;; Registers used:
  1639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;      Totals:         0       7      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;Total ram usage:       38 bytes
  1650 ;; Hardware stack levels required when called:   10
  1651 ;; This function calls:
  1652 ;;		_I2C_Master_Init
  1653 ;;		_bottle_count
  1654 ;;		_date_time
  1655 ;;		_eeprom_readbyte
  1656 ;;		_eeprom_writebyte
  1657 ;;		_initLCD
  1658 ;;		_init_operation
  1659 ;;		_lcdInst
  1660 ;;		_operation_end
  1661 ;;		_printf
  1662 ;;		_runtime
  1663 ;;		_update_time
  1664 ;; This function is called by:
  1665 ;;		Startup code after reset
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           	psect	text0
  1670  0009B2                     __ptext0:
  1671                           	opt stack 0
  1672  0009B2                     _main:
  1673                           	opt stack 21
  1674                           
  1675                           ;main.c: 77: TRISA = 0xFF;
  1676                           
  1677                           ;incstack = 0
  1678  0009B2  6892               	setf	3986,c	;volatile
  1679                           
  1680                           ;main.c: 78: TRISB = 0xFF;
  1681  0009B4  6893               	setf	3987,c	;volatile
  1682                           
  1683                           ;main.c: 79: TRISC = 0x18;
  1684  0009B6  0E18               	movlw	24
  1685  0009B8  6E94               	movwf	3988,c	;volatile
  1686                           
  1687                           ;main.c: 80: TRISD = 0x00;
  1688  0009BA  0E00               	movlw	0
  1689  0009BC  6E95               	movwf	3989,c	;volatile
  1690                           
  1691                           ;main.c: 81: TRISE = 0x00;
  1692  0009BE  0E00               	movlw	0
  1693  0009C0  6E96               	movwf	3990,c	;volatile
  1694                           
  1695                           ;main.c: 83: LATA = 0x00;
  1696  0009C2  0E00               	movlw	0
  1697  0009C4  6E89               	movwf	3977,c	;volatile
  1698                           
  1699                           ;main.c: 84: LATB = 0x00;
  1700  0009C6  0E00               	movlw	0
  1701  0009C8  6E8A               	movwf	3978,c	;volatile
  1702                           
  1703                           ;main.c: 85: LATC = 0x00;
  1704  0009CA  0E00               	movlw	0
  1705  0009CC  6E8B               	movwf	3979,c	;volatile
  1706                           
  1707                           ;main.c: 86: LATD = 0x00;
  1708  0009CE  0E00               	movlw	0
  1709  0009D0  6E8C               	movwf	3980,c	;volatile
  1710                           
  1711                           ;main.c: 87: LATE = 0x00;
  1712  0009D2  0E00               	movlw	0
  1713  0009D4  6E8D               	movwf	3981,c	;volatile
  1714                           
  1715                           ;main.c: 89: ADCON0 = 0x00;
  1716  0009D6  0E00               	movlw	0
  1717  0009D8  6EC2               	movwf	4034,c	;volatile
  1718                           
  1719                           ;main.c: 90: ADCON1 = 0xFF;
  1720  0009DA  68C1               	setf	4033,c	;volatile
  1721                           
  1722                           ;main.c: 92: INT1IE = 1;
  1723  0009DC  86F0               	bsf	intcon3,3,c	;volatile
  1724                           
  1725                           ;main.c: 93: (INTCONbits.GIE = 1);
  1726  0009DE  8EF2               	bsf	intcon,7,c	;volatile
  1727                           
  1728                           ;main.c: 95: nRBPU = 0;
  1729  0009E0  9EF1               	bcf	intcon2,7,c	;volatile
  1730                           
  1731                           ;main.c: 99: lcdInst(0b00000001);;
  1732  0009E2  0E01               	movlw	1
  1733  0009E4  ECA9  F019         	call	_lcdInst
  1734                           
  1735                           ;main.c: 100: initLCD();
  1736  0009E8  EC72  F018         	call	_initLCD	;wreg free
  1737                           
  1738                           ;main.c: 101: unsigned char time[7];
  1739                           ;main.c: 102: unsigned char start_time[7];
  1740                           ;main.c: 103: unsigned char end_time[7];
  1741                           ;main.c: 104: unsigned char bot_count[4];
  1742                           ;main.c: 105: unsigned char step_state[2];
  1743                           ;main.c: 106: unsigned char mem[1];
  1744                           ;main.c: 109: I2C_Master_Init(10000);
  1745  0009EC  0E10               	movlw	16
  1746  0009EE  6E26               	movwf	I2C_Master_Init@c,c
  1747  0009F0  0E27               	movlw	39
  1748  0009F2  6E27               	movwf	I2C_Master_Init@c+1,c
  1749  0009F4  0E00               	movlw	0
  1750  0009F6  6E28               	movwf	I2C_Master_Init@c+2,c
  1751  0009F8  0E00               	movlw	0
  1752  0009FA  6E29               	movwf	I2C_Master_Init@c+3,c
  1753  0009FC  ECD0  F017         	call	_I2C_Master_Init	;wreg free
  1754                           
  1755                           ;main.c: 112: lcdInst(0b00000001);;
  1756  000A00  0E01               	movlw	1
  1757  000A02  ECA9  F019         	call	_lcdInst
  1758                           
  1759                           ;main.c: 113: initLCD();
  1760  000A06  EC72  F018         	call	_initLCD	;wreg free
  1761                           
  1762                           ;main.c: 114: lcdInst(0b10000000);;
  1763  000A0A  0E80               	movlw	128
  1764  000A0C  ECA9  F019         	call	_lcdInst
  1765                           
  1766                           ;main.c: 116: if (eeprom_readbyte(20) == 0xFF){
  1767  000A10  0E00               	movlw	0
  1768  000A12  6E1A               	movwf	eeprom_readbyte@address+1,c
  1769  000A14  0E14               	movlw	20
  1770  000A16  6E19               	movwf	eeprom_readbyte@address,c
  1771  000A18  EC7C  F019         	call	_eeprom_readbyte	;wreg free
  1772  000A1C  0AFF               	xorlw	255
  1773  000A1E  A4D8               	btfss	status,2,c
  1774  000A20  D028               	goto	l5625
  1775                           
  1776                           ;main.c: 117: eeprom_writebyte(20, 20);
  1777  000A22  0E00               	movlw	0
  1778  000A24  6E1C               	movwf	eeprom_writebyte@address+1,c
  1779  000A26  0E14               	movlw	20
  1780  000A28  6E1B               	movwf	eeprom_writebyte@address,c
  1781  000A2A  0E14               	movlw	20
  1782  000A2C  6E1D               	movwf	eeprom_writebyte@data,c
  1783  000A2E  EC0F  F019         	call	_eeprom_writebyte	;wreg free
  1784                           
  1785                           ;main.c: 118: eeprom_writebyte(21, 0);
  1786  000A32  0E00               	movlw	0
  1787  000A34  6E1C               	movwf	eeprom_writebyte@address+1,c
  1788  000A36  0E15               	movlw	21
  1789  000A38  6E1B               	movwf	eeprom_writebyte@address,c
  1790  000A3A  0E00               	movlw	0
  1791  000A3C  6E1D               	movwf	eeprom_writebyte@data,c
  1792  000A3E  EC0F  F019         	call	_eeprom_writebyte	;wreg free
  1793                           
  1794                           ;main.c: 119: eeprom_writebyte(22, 0);
  1795  000A42  0E00               	movlw	0
  1796  000A44  6E1C               	movwf	eeprom_writebyte@address+1,c
  1797  000A46  0E16               	movlw	22
  1798  000A48  6E1B               	movwf	eeprom_writebyte@address,c
  1799  000A4A  0E00               	movlw	0
  1800  000A4C  6E1D               	movwf	eeprom_writebyte@data,c
  1801  000A4E  EC0F  F019         	call	_eeprom_writebyte	;wreg free
  1802                           
  1803                           ;main.c: 120: eeprom_writebyte(23, 0);
  1804  000A52  0E00               	movlw	0
  1805  000A54  6E1C               	movwf	eeprom_writebyte@address+1,c
  1806  000A56  0E17               	movlw	23
  1807  000A58  6E1B               	movwf	eeprom_writebyte@address,c
  1808  000A5A  0E00               	movlw	0
  1809  000A5C  6E1D               	movwf	eeprom_writebyte@data,c
  1810  000A5E  EC0F  F019         	call	_eeprom_writebyte	;wreg free
  1811                           
  1812                           ;main.c: 121: eeprom_writebyte(24, 0);
  1813  000A62  0E00               	movlw	0
  1814  000A64  6E1C               	movwf	eeprom_writebyte@address+1,c
  1815  000A66  0E18               	movlw	24
  1816  000A68  6E1B               	movwf	eeprom_writebyte@address,c
  1817  000A6A  0E00               	movlw	0
  1818  000A6C  6E1D               	movwf	eeprom_writebyte@data,c
  1819  000A6E  EC0F  F019         	call	_eeprom_writebyte	;wreg free
  1820  000A72                     l5625:
  1821                           
  1822                           ;main.c: 122: }
  1823                           ;main.c: 124: printf("Press 1 to begin operation");
  1824  000A72  0EA0               	movlw	low STR_1
  1825  000A74  0100               	movlb	0	; () banked
  1826  000A76  6FCE               	movwf	printf@f& (0+255),b
  1827  000A78  0EFE               	movlw	high STR_1
  1828  000A7A  0100               	movlb	0	; () banked
  1829  000A7C  6FCF               	movwf	(printf@f+1)& (0+255),b
  1830  000A7E  EC15  F007         	call	_printf	;wreg free
  1831                           
  1832                           ;main.c: 125: curr_state = STANDBY;
  1833  000A82  0E00               	movlw	0
  1834  000A84  0101               	movlb	1	; () banked
  1835  000A86  6F55               	movwf	_curr_state& (0+255),b
  1836                           
  1837                           ; BSR set to: 1
  1838                           ;main.c: 126: bot_type = O;
  1839  000A88  0E05               	movlw	5
  1840  000A8A  0100               	movlb	0	; () banked
  1841  000A8C  6FFB               	movwf	_bot_type& (0+255),b
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;main.c: 127: int temp = 0;
  1845  000A8E  0E00               	movlw	0
  1846  000A90  0101               	movlb	1	; () banked
  1847  000A92  6F4C               	movwf	(main@temp+1)& (0+255),b
  1848  000A94  0E00               	movlw	0
  1849  000A96  6F4B               	movwf	main@temp& (0+255),b
  1850                           
  1851                           ; BSR set to: 1
  1852                           ;main.c: 130: switch(curr_state){
  1853                           
  1854                           ;main.c: 128: char pressed;
  1855                           ;main.c: 129: while (1){
  1856  000A98  D19F               	goto	l5691
  1857  000A9A                     l5633:
  1858                           
  1859                           ; BSR set to: 1
  1860                           ;main.c: 132: operation_end(step_state);
  1861  000A9A  0E52               	movlw	low main@step_state
  1862  000A9C  0100               	movlb	0	; () banked
  1863  000A9E  6FEA               	movwf	operation_end@step_state& (0+255),b
  1864  000AA0  0E01               	movlw	high main@step_state
  1865  000AA2  0100               	movlb	0	; () banked
  1866  000AA4  6FEB               	movwf	(operation_end@step_state+1)& (0+255),b
  1867  000AA6  EC30  F017         	call	_operation_end	;wreg free
  1868                           
  1869                           ;main.c: 133: break;
  1870  000AAA  D1B0               	goto	l5693
  1871  000AAC                     l5635:
  1872                           
  1873                           ;main.c: 135: mem[0] = 21;
  1874  000AAC  0E15               	movlw	21
  1875  000AAE  0101               	movlb	1	; () banked
  1876  000AB0  6F54               	movwf	main@mem& (0+255),b
  1877                           
  1878                           ; BSR set to: 1
  1879                           ;main.c: 136: init_operation(start_time, time, bot_count, step_state);
  1880  000AB2  0E36               	movlw	low main@start_time
  1881  000AB4  0100               	movlb	0	; () banked
  1882  000AB6  6FEA               	movwf	init_operation@start_time& (0+255),b
  1883  000AB8  0E01               	movlw	high main@start_time
  1884  000ABA  0100               	movlb	0	; () banked
  1885  000ABC  6FEB               	movwf	(init_operation@start_time+1)& (0+255),b
  1886  000ABE  0E44               	movlw	low main@time
  1887  000AC0  0100               	movlb	0	; () banked
  1888  000AC2  6FEC               	movwf	init_operation@time& (0+255),b
  1889  000AC4  0E01               	movlw	high main@time
  1890  000AC6  0100               	movlb	0	; () banked
  1891  000AC8  6FED               	movwf	(init_operation@time+1)& (0+255),b
  1892  000ACA  0E4E               	movlw	low main@bot_count
  1893  000ACC  0100               	movlb	0	; () banked
  1894  000ACE  6FEE               	movwf	init_operation@bot_count& (0+255),b
  1895  000AD0  0E01               	movlw	high main@bot_count
  1896  000AD2  0100               	movlb	0	; () banked
  1897  000AD4  6FEF               	movwf	(init_operation@bot_count+1)& (0+255),b
  1898  000AD6  0E52               	movlw	low main@step_state
  1899  000AD8  0100               	movlb	0	; () banked
  1900  000ADA  6FF0               	movwf	init_operation@step_state& (0+255),b
  1901  000ADC  0E01               	movlw	high main@step_state
  1902  000ADE  0100               	movlb	0	; () banked
  1903  000AE0  6FF1               	movwf	(init_operation@step_state+1)& (0+255),b
  1904  000AE2  EC09  F000         	call	_init_operation	;wreg free
  1905                           
  1906                           ;main.c: 137: update_time(end_time);
  1907  000AE6  0E3D               	movlw	low main@end_time
  1908  000AE8  6E1C               	movwf	update_time@time,c
  1909  000AEA  0E01               	movlw	high main@end_time
  1910  000AEC  6E1D               	movwf	update_time@time+1,c
  1911  000AEE  EC69  F017         	call	_update_time	;wreg free
  1912                           
  1913                           ;main.c: 138: temp = 0;
  1914  000AF2  0E00               	movlw	0
  1915  000AF4  0101               	movlb	1	; () banked
  1916  000AF6  6F4C               	movwf	(main@temp+1)& (0+255),b
  1917  000AF8  0E00               	movlw	0
  1918  000AFA  D09B               	goto	L1
  1919  000AFC                     l5643:
  1920                           
  1921                           ; BSR set to: 1
  1922                           ;main.c: 141: date_time(time);
  1923  000AFC  0E44               	movlw	low main@time
  1924  000AFE  0100               	movlb	0	; () banked
  1925  000B00  6FEA               	movwf	date_time@time& (0+255),b
  1926  000B02  0E01               	movlw	high main@time
  1927  000B04  0100               	movlb	0	; () banked
  1928  000B06  6FEB               	movwf	(date_time@time+1)& (0+255),b
  1929  000B08  EC77  F00F         	call	_date_time	;wreg free
  1930                           
  1931                           ;main.c: 142: break;
  1932  000B0C  D17F               	goto	l5693
  1933  000B0E                     l5645:
  1934                           
  1935                           ;main.c: 144: bottle_count(bot_count);
  1936  000B0E  0E4E               	movlw	low main@bot_count
  1937  000B10  0100               	movlb	0	; () banked
  1938  000B12  6FEA               	movwf	bottle_count@bot_count& (0+255),b
  1939  000B14  0E01               	movlw	high main@bot_count
  1940  000B16  0100               	movlb	0	; () banked
  1941  000B18  6FEB               	movwf	(bottle_count@bot_count+1)& (0+255),b
  1942  000B1A  ECFC  F008         	call	_bottle_count	;wreg free
  1943                           
  1944                           ;main.c: 145: break;
  1945  000B1E  D176               	goto	l5693
  1946  000B20                     l5647:
  1947                           
  1948                           ;main.c: 147: runtime(start_time, end_time);
  1949  000B20  0E36               	movlw	low main@start_time
  1950  000B22  0100               	movlb	0	; () banked
  1951  000B24  6FEA               	movwf	runtime@start_time& (0+255),b
  1952  000B26  0E01               	movlw	high main@start_time
  1953  000B28  0100               	movlb	0	; () banked
  1954  000B2A  6FEB               	movwf	(runtime@start_time+1)& (0+255),b
  1955  000B2C  0E3D               	movlw	low main@end_time
  1956  000B2E  0100               	movlb	0	; () banked
  1957  000B30  6FEC               	movwf	runtime@end_time& (0+255),b
  1958  000B32  0E01               	movlw	high main@end_time
  1959  000B34  0100               	movlb	0	; () banked
  1960  000B36  6FED               	movwf	(runtime@end_time+1)& (0+255),b
  1961  000B38  EC4D  F018         	call	_runtime	;wreg free
  1962                           
  1963                           ;main.c: 148: break;
  1964  000B3C  D167               	goto	l5693
  1965  000B3E                     l5649:
  1966                           
  1967                           ;main.c: 150: if (temp == 0){
  1968  000B3E  0101               	movlb	1	; () banked
  1969  000B40  514B               	movf	main@temp& (0+255),w,b
  1970  000B42  0101               	movlb	1	; () banked
  1971  000B44  114C               	iorwf	(main@temp+1)& (0+255),w,b
  1972  000B46  A4D8               	btfss	status,2,c
  1973  000B48  D161               	goto	l5693
  1974                           
  1975                           ; BSR set to: 1
  1976                           ;main.c: 151: eeprom_writebyte((eeprom_readbyte(20) + 1), bot_count[0]);
  1977  000B4A  0E00               	movlw	0
  1978  000B4C  6E1A               	movwf	eeprom_readbyte@address+1,c
  1979  000B4E  0E14               	movlw	20
  1980  000B50  6E19               	movwf	eeprom_readbyte@address,c
  1981  000B52  EC7C  F019         	call	_eeprom_readbyte	;wreg free
  1982  000B56  0100               	movlb	0	; () banked
  1983  000B58  6FF4               	movwf	??_main& (0+255),b
  1984  000B5A  0E01               	movlw	1
  1985  000B5C  0100               	movlb	0	; () banked
  1986  000B5E  25F4               	addwf	??_main& (0+255),w,b
  1987  000B60  6E1B               	movwf	eeprom_writebyte@address,c
  1988  000B62  6A1C               	clrf	eeprom_writebyte@address+1,c
  1989  000B64  0E00               	movlw	0
  1990  000B66  221C               	addwfc	eeprom_writebyte@address+1,f,c
  1991  000B68  C14E  F01D         	movff	main@bot_count,eeprom_writebyte@data
  1992  000B6C  EC0F  F019         	call	_eeprom_writebyte	;wreg free
  1993                           
  1994                           ;main.c: 152: eeprom_writebyte((eeprom_readbyte(20) + 2), bot_count[1]);
  1995  000B70  0E00               	movlw	0
  1996  000B72  6E1A               	movwf	eeprom_readbyte@address+1,c
  1997  000B74  0E14               	movlw	20
  1998  000B76  6E19               	movwf	eeprom_readbyte@address,c
  1999  000B78  EC7C  F019         	call	_eeprom_readbyte	;wreg free
  2000  000B7C  0100               	movlb	0	; () banked
  2001  000B7E  6FF4               	movwf	??_main& (0+255),b
  2002  000B80  0E02               	movlw	2
  2003  000B82  0100               	movlb	0	; () banked
  2004  000B84  25F4               	addwf	??_main& (0+255),w,b
  2005  000B86  6E1B               	movwf	eeprom_writebyte@address,c
  2006  000B88  6A1C               	clrf	eeprom_writebyte@address+1,c
  2007  000B8A  0E00               	movlw	0
  2008  000B8C  221C               	addwfc	eeprom_writebyte@address+1,f,c
  2009  000B8E  C14F  F01D         	movff	main@bot_count+1,eeprom_writebyte@data
  2010  000B92  EC0F  F019         	call	_eeprom_writebyte	;wreg free
  2011                           
  2012                           ;main.c: 153: eeprom_writebyte((eeprom_readbyte(20) + 3), bot_count[2]);
  2013  000B96  0E00               	movlw	0
  2014  000B98  6E1A               	movwf	eeprom_readbyte@address+1,c
  2015  000B9A  0E14               	movlw	20
  2016  000B9C  6E19               	movwf	eeprom_readbyte@address,c
  2017  000B9E  EC7C  F019         	call	_eeprom_readbyte	;wreg free
  2018  000BA2  0100               	movlb	0	; () banked
  2019  000BA4  6FF4               	movwf	??_main& (0+255),b
  2020  000BA6  0E03               	movlw	3
  2021  000BA8  0100               	movlb	0	; () banked
  2022  000BAA  25F4               	addwf	??_main& (0+255),w,b
  2023  000BAC  6E1B               	movwf	eeprom_writebyte@address,c
  2024  000BAE  6A1C               	clrf	eeprom_writebyte@address+1,c
  2025  000BB0  0E00               	movlw	0
  2026  000BB2  221C               	addwfc	eeprom_writebyte@address+1,f,c
  2027  000BB4  C150  F01D         	movff	main@bot_count+2,eeprom_writebyte@data
  2028  000BB8  EC0F  F019         	call	_eeprom_writebyte	;wreg free
  2029                           
  2030                           ;main.c: 154: eeprom_writebyte((eeprom_readbyte(20) + 4), bot_count[3]);
  2031  000BBC  0E00               	movlw	0
  2032  000BBE  6E1A               	movwf	eeprom_readbyte@address+1,c
  2033  000BC0  0E14               	movlw	20
  2034  000BC2  6E19               	movwf	eeprom_readbyte@address,c
  2035  000BC4  EC7C  F019         	call	_eeprom_readbyte	;wreg free
  2036  000BC8  0100               	movlb	0	; () banked
  2037  000BCA  6FF4               	movwf	??_main& (0+255),b
  2038  000BCC  0E04               	movlw	4
  2039  000BCE  0100               	movlb	0	; () banked
  2040  000BD0  25F4               	addwf	??_main& (0+255),w,b
  2041  000BD2  6E1B               	movwf	eeprom_writebyte@address,c
  2042  000BD4  6A1C               	clrf	eeprom_writebyte@address+1,c
  2043  000BD6  0E00               	movlw	0
  2044  000BD8  221C               	addwfc	eeprom_writebyte@address+1,f,c
  2045  000BDA  C151  F01D         	movff	main@bot_count+3,eeprom_writebyte@data
  2046  000BDE  EC0F  F019         	call	_eeprom_writebyte	;wreg free
  2047                           
  2048                           ;main.c: 155: eeprom_writebyte(20, (eeprom_readbyte(20) + 4));
  2049  000BE2  0E00               	movlw	0
  2050  000BE4  6E1C               	movwf	eeprom_writebyte@address+1,c
  2051  000BE6  0E14               	movlw	20
  2052  000BE8  6E1B               	movwf	eeprom_writebyte@address,c
  2053  000BEA  0E00               	movlw	0
  2054  000BEC  6E1A               	movwf	eeprom_readbyte@address+1,c
  2055  000BEE  0E14               	movlw	20
  2056  000BF0  6E19               	movwf	eeprom_readbyte@address,c
  2057  000BF2  EC7C  F019         	call	_eeprom_readbyte	;wreg free
  2058  000BF6  0F04               	addlw	4
  2059  000BF8  6E1D               	movwf	eeprom_writebyte@data,c
  2060  000BFA  EC0F  F019         	call	_eeprom_writebyte	;wreg free
  2061                           
  2062                           ;main.c: 156: lcdInst(0b10000000);;
  2063  000BFE  0E80               	movlw	128
  2064  000C00  ECA9  F019         	call	_lcdInst
  2065                           
  2066                           ;main.c: 157: printf("Saved           ");
  2067  000C04  0E44               	movlw	low STR_2
  2068  000C06  0100               	movlb	0	; () banked
  2069  000C08  6FCE               	movwf	printf@f& (0+255),b
  2070  000C0A  0EFF               	movlw	high STR_2
  2071  000C0C  0100               	movlb	0	; () banked
  2072  000C0E  6FCF               	movwf	(printf@f+1)& (0+255),b
  2073  000C10  EC15  F007         	call	_printf	;wreg free
  2074                           
  2075                           ;main.c: 158: lcdInst(0b11000000);;
  2076  000C14  0EC0               	movlw	192
  2077  000C16  ECA9  F019         	call	_lcdInst
  2078                           
  2079                           ;main.c: 159: printf("                ");
  2080  000C1A  0E33               	movlw	low STR_3
  2081  000C1C  0100               	movlb	0	; () banked
  2082  000C1E  6FCE               	movwf	printf@f& (0+255),b
  2083  000C20  0EFF               	movlw	high STR_3
  2084  000C22  0100               	movlb	0	; () banked
  2085  000C24  6FCF               	movwf	(printf@f+1)& (0+255),b
  2086  000C26  EC15  F007         	call	_printf	;wreg free
  2087                           
  2088                           ;main.c: 160: temp = 1;
  2089  000C2A  0E00               	movlw	0
  2090  000C2C  0101               	movlb	1	; () banked
  2091  000C2E  6F4C               	movwf	(main@temp+1)& (0+255),b
  2092  000C30  0E01               	movlw	1
  2093  000C32                     L1:
  2094  000C32  6F4B               	movwf	main@temp& (0+255),b
  2095                           
  2096                           ; BSR set to: 1
  2097                           ;main.c: 161: }
  2098                           ;main.c: 162: break;
  2099  000C34  D0EB               	goto	l5693
  2100  000C36                     l5659:
  2101                           
  2102                           ; BSR set to: 1
  2103                           ;main.c: 164: lcdInst(0b10000000);;
  2104  000C36  0E80               	movlw	128
  2105  000C38  ECA9  F019         	call	_lcdInst
  2106                           
  2107                           ;main.c: 165: printf("Deleted         ");
  2108  000C3C  0E55               	movlw	low STR_4
  2109  000C3E  0100               	movlb	0	; () banked
  2110  000C40  6FCE               	movwf	printf@f& (0+255),b
  2111  000C42  0EFF               	movlw	high STR_4
  2112  000C44  0100               	movlb	0	; () banked
  2113  000C46  6FCF               	movwf	(printf@f+1)& (0+255),b
  2114  000C48  EC15  F007         	call	_printf	;wreg free
  2115                           
  2116                           ;main.c: 166: lcdInst(0b11000000);;
  2117  000C4C  0EC0               	movlw	192
  2118  000C4E  ECA9  F019         	call	_lcdInst
  2119                           
  2120                           ;main.c: 167: printf("                ");
  2121  000C52  0E33               	movlw	low STR_3
  2122  000C54  0100               	movlb	0	; () banked
  2123  000C56  6FCE               	movwf	printf@f& (0+255),b
  2124  000C58  0EFF               	movlw	high STR_3
  2125  000C5A  0100               	movlb	0	; () banked
  2126  000C5C  6FCF               	movwf	(printf@f+1)& (0+255),b
  2127  000C5E  EC15  F007         	call	_printf	;wreg free
  2128                           
  2129                           ;main.c: 168: break;
  2130  000C62  D0D4               	goto	l5693
  2131  000C64                     l5665:
  2132                           
  2133                           ;main.c: 170: lcdInst(0b10000000);;
  2134  000C64  0E80               	movlw	128
  2135  000C66  ECA9  F019         	call	_lcdInst
  2136                           
  2137                           ;main.c: 171: printf("Y  |Ync|E  |Enc");
  2138  000C6A  0EEE               	movlw	low STR_6
  2139  000C6C  0100               	movlb	0	; () banked
  2140  000C6E  6FCE               	movwf	printf@f& (0+255),b
  2141  000C70  0EFF               	movlw	high STR_6
  2142  000C72  0100               	movlb	0	; () banked
  2143  000C74  6FCF               	movwf	(printf@f+1)& (0+255),b
  2144  000C76  EC15  F007         	call	_printf	;wreg free
  2145                           
  2146                           ;main.c: 172: lcdInst(0b11000000);;
  2147  000C7A  0EC0               	movlw	192
  2148  000C7C  ECA9  F019         	call	_lcdInst
  2149                           
  2150                           ;main.c: 173: printf("%u|%u|%u|%u|%u|%u", eeprom_readbyte(mem[0]), eeprom_readbyte(mem[0
      +                          ]+1), eeprom_readbyte(mem[0]+2), eeprom_readbyte(mem[0]+3), eeprom_readbyte(20), mem[0])
      +                          ;
  2151  000C80  0E10               	movlw	low STR_7
  2152  000C82  0100               	movlb	0	; () banked
  2153  000C84  6FCE               	movwf	printf@f& (0+255),b
  2154  000C86  0EFF               	movlw	high STR_7
  2155  000C88  0100               	movlb	0	; () banked
  2156  000C8A  6FCF               	movwf	(printf@f+1)& (0+255),b
  2157  000C8C  C154  F019         	movff	main@mem,eeprom_readbyte@address
  2158  000C90  6A1A               	clrf	eeprom_readbyte@address+1,c
  2159  000C92  EC7C  F019         	call	_eeprom_readbyte	;wreg free
  2160  000C96  0100               	movlb	0	; () banked
  2161  000C98  6FF4               	movwf	??_main& (0+255),b
  2162  000C9A  0100               	movlb	0	; () banked
  2163  000C9C  51F4               	movf	??_main& (0+255),w,b
  2164  000C9E  0100               	movlb	0	; () banked
  2165  000CA0  6FD0               	movwf	(?_printf+2)& (0+255),b
  2166  000CA2  6BD1               	clrf	(?_printf+3)& (0+255),b
  2167  000CA4  0E01               	movlw	1
  2168  000CA6  0101               	movlb	1	; () banked
  2169  000CA8  2554               	addwf	main@mem& (0+255),w,b
  2170  000CAA  6E19               	movwf	eeprom_readbyte@address,c
  2171  000CAC  6A1A               	clrf	eeprom_readbyte@address+1,c
  2172  000CAE  0E00               	movlw	0
  2173  000CB0  221A               	addwfc	eeprom_readbyte@address+1,f,c
  2174  000CB2  EC7C  F019         	call	_eeprom_readbyte	;wreg free
  2175  000CB6  0100               	movlb	0	; () banked
  2176  000CB8  6FF5               	movwf	(??_main+1)& (0+255),b
  2177  000CBA  0100               	movlb	0	; () banked
  2178  000CBC  51F5               	movf	(??_main+1)& (0+255),w,b
  2179  000CBE  0100               	movlb	0	; () banked
  2180  000CC0  6FD2               	movwf	(?_printf+4)& (0+255),b
  2181  000CC2  6BD3               	clrf	(?_printf+5)& (0+255),b
  2182  000CC4  0E02               	movlw	2
  2183  000CC6  0101               	movlb	1	; () banked
  2184  000CC8  2554               	addwf	main@mem& (0+255),w,b
  2185  000CCA  6E19               	movwf	eeprom_readbyte@address,c
  2186  000CCC  6A1A               	clrf	eeprom_readbyte@address+1,c
  2187  000CCE  0E00               	movlw	0
  2188  000CD0  221A               	addwfc	eeprom_readbyte@address+1,f,c
  2189  000CD2  EC7C  F019         	call	_eeprom_readbyte	;wreg free
  2190  000CD6  0100               	movlb	0	; () banked
  2191  000CD8  6FF6               	movwf	(??_main+2)& (0+255),b
  2192  000CDA  0100               	movlb	0	; () banked
  2193  000CDC  51F6               	movf	(??_main+2)& (0+255),w,b
  2194  000CDE  0100               	movlb	0	; () banked
  2195  000CE0  6FD4               	movwf	(?_printf+6)& (0+255),b
  2196  000CE2  6BD5               	clrf	(?_printf+7)& (0+255),b
  2197  000CE4  0E03               	movlw	3
  2198  000CE6  0101               	movlb	1	; () banked
  2199  000CE8  2554               	addwf	main@mem& (0+255),w,b
  2200  000CEA  6E19               	movwf	eeprom_readbyte@address,c
  2201  000CEC  6A1A               	clrf	eeprom_readbyte@address+1,c
  2202  000CEE  0E00               	movlw	0
  2203  000CF0  221A               	addwfc	eeprom_readbyte@address+1,f,c
  2204  000CF2  EC7C  F019         	call	_eeprom_readbyte	;wreg free
  2205  000CF6  0100               	movlb	0	; () banked
  2206  000CF8  6FF7               	movwf	(??_main+3)& (0+255),b
  2207  000CFA  0100               	movlb	0	; () banked
  2208  000CFC  51F7               	movf	(??_main+3)& (0+255),w,b
  2209  000CFE  0100               	movlb	0	; () banked
  2210  000D00  6FD6               	movwf	(?_printf+8)& (0+255),b
  2211  000D02  6BD7               	clrf	(?_printf+9)& (0+255),b
  2212  000D04  0E00               	movlw	0
  2213  000D06  6E1A               	movwf	eeprom_readbyte@address+1,c
  2214  000D08  0E14               	movlw	20
  2215  000D0A  6E19               	movwf	eeprom_readbyte@address,c
  2216  000D0C  EC7C  F019         	call	_eeprom_readbyte	;wreg free
  2217  000D10  0100               	movlb	0	; () banked
  2218  000D12  6FF8               	movwf	(??_main+4)& (0+255),b
  2219  000D14  0100               	movlb	0	; () banked
  2220  000D16  51F8               	movf	(??_main+4)& (0+255),w,b
  2221  000D18  0100               	movlb	0	; () banked
  2222  000D1A  6FD8               	movwf	(?_printf+10)& (0+255),b
  2223  000D1C  6BD9               	clrf	(?_printf+11)& (0+255),b
  2224  000D1E  C154  F0DA         	movff	main@mem,?_printf+12
  2225  000D22  0100               	movlb	0	; () banked
  2226  000D24  6BDB               	clrf	(?_printf+13)& (0+255),b
  2227  000D26  EC15  F007         	call	_printf	;wreg free
  2228                           
  2229                           ;main.c: 174: if (PORTBbits.RB1 == 1){
  2230  000D2A  B281               	btfsc	3969,1,c	;volatile
  2231  000D2C  D011               	goto	l5677
  2232  000D2E  D06E               	goto	l5693
  2233  000D30                     l5675:
  2234                           
  2235                           ;main.c: 176: pressed = keys[(PORTB & 0xF0)>>4];
  2236  000D30  3881               	swapf	3969,w,c	;volatile
  2237  000D32  0B0F               	andlw	15
  2238  000D34  0B0F               	andlw	15
  2239  000D36  0100               	movlb	0	; () banked
  2240  000D38  6FF4               	movwf	??_main& (0+255),b
  2241  000D3A  6BF5               	clrf	(??_main+1)& (0+255),b
  2242  000D3C  0E3D               	movlw	low _keys
  2243  000D3E  0100               	movlb	0	; () banked
  2244  000D40  25F4               	addwf	??_main& (0+255),w,b
  2245  000D42  6EF6               	movwf	tblptrl,c
  2246  000D44  0EFE               	movlw	high _keys
  2247  000D46  21F5               	addwfc	(??_main+1)& (0+255),w,b
  2248  000D48  6EF7               	movwf	tblptrh,c
  2249  000D4A                     	if	0	;There are less than 3 active tblptr bytes
  2250  000D4A                     	endif
  2251  000D4A  0008               	tblrd		*
  2252  000D4C  CFF5 F14D          	movff	tablat,main@pressed
  2253  000D50                     l5677:
  2254  000D50  B281               	btfsc	3969,1,c	;volatile
  2255  000D52  D7EE               	goto	l5675
  2256                           
  2257                           ;main.c: 177: }
  2258                           ;main.c: 178: if ((mem[0] > 21) && pressed == '8'){
  2259  000D54  0E15               	movlw	21
  2260  000D56  0101               	movlb	1	; () banked
  2261  000D58  6554               	cpfsgt	main@mem& (0+255),b
  2262  000D5A  D009               	goto	l5685
  2263                           
  2264                           ; BSR set to: 1
  2265  000D5C  0E38               	movlw	56
  2266  000D5E  0101               	movlb	1	; () banked
  2267  000D60  194D               	xorwf	main@pressed& (0+255),w,b
  2268  000D62  A4D8               	btfss	status,2,c
  2269  000D64  D004               	goto	l5685
  2270                           
  2271                           ; BSR set to: 1
  2272                           ;main.c: 179: mem[0] -= 4;
  2273  000D66  0E04               	movlw	4
  2274  000D68  0101               	movlb	1	; () banked
  2275  000D6A  5F54               	subwf	main@mem& (0+255),f,b
  2276                           
  2277                           ;main.c: 180: }
  2278  000D6C  D04F               	goto	l5693
  2279  000D6E                     l5685:
  2280                           
  2281                           ; BSR set to: 1
  2282                           ;main.c: 181: else if ((mem[0] < eeprom_readbyte(20) - 3) && pressed == '9'){
  2283  000D6E  0EFD               	movlw	253
  2284  000D70  0100               	movlb	0	; () banked
  2285  000D72  6FF4               	movwf	??_main& (0+255),b
  2286  000D74  0EFF               	movlw	255
  2287  000D76  0100               	movlb	0	; () banked
  2288  000D78  6FF5               	movwf	(??_main+1)& (0+255),b
  2289  000D7A  0E00               	movlw	0
  2290  000D7C  6E1A               	movwf	eeprom_readbyte@address+1,c
  2291  000D7E  0E14               	movlw	20
  2292  000D80  6E19               	movwf	eeprom_readbyte@address,c
  2293  000D82  EC7C  F019         	call	_eeprom_readbyte	;wreg free
  2294  000D86  0100               	movlb	0	; () banked
  2295  000D88  6FF6               	movwf	(??_main+2)& (0+255),b
  2296  000D8A  6BF7               	clrf	(??_main+3)& (0+255),b
  2297  000D8C  0100               	movlb	0	; () banked
  2298  000D8E  51F4               	movf	??_main& (0+255),w,b
  2299  000D90  0100               	movlb	0	; () banked
  2300  000D92  27F6               	addwf	(??_main+2)& (0+255),f,b
  2301  000D94  0100               	movlb	0	; () banked
  2302  000D96  51F5               	movf	(??_main+1)& (0+255),w,b
  2303  000D98  0100               	movlb	0	; () banked
  2304  000D9A  23F7               	addwfc	(??_main+3)& (0+255),f,b
  2305  000D9C  0101               	movlb	1	; () banked
  2306  000D9E  5154               	movf	main@mem& (0+255),w,b
  2307  000DA0  0100               	movlb	0	; () banked
  2308  000DA2  6FF8               	movwf	(??_main+4)& (0+255),b
  2309  000DA4  6BF9               	clrf	(??_main+5)& (0+255),b
  2310  000DA6  0100               	movlb	0	; () banked
  2311  000DA8  51F6               	movf	(??_main+2)& (0+255),w,b
  2312  000DAA  0100               	movlb	0	; () banked
  2313  000DAC  5DF8               	subwf	(??_main+4)& (0+255),w,b
  2314  000DAE  0100               	movlb	0	; () banked
  2315  000DB0  51F9               	movf	(??_main+5)& (0+255),w,b
  2316  000DB2  0A80               	xorlw	128
  2317  000DB4  0100               	movlb	0	; () banked
  2318  000DB6  6FFA               	movwf	(??_main+6)& (0+255),b
  2319  000DB8  0100               	movlb	0	; () banked
  2320  000DBA  51F7               	movf	(??_main+3)& (0+255),w,b
  2321  000DBC  0A80               	xorlw	128
  2322  000DBE  0100               	movlb	0	; () banked
  2323  000DC0  59FA               	subwfb	(??_main+6)& (0+255),w,b
  2324  000DC2  B0D8               	btfsc	status,0,c
  2325  000DC4  D023               	goto	l5693
  2326                           
  2327                           ; BSR set to: 0
  2328  000DC6  0E39               	movlw	57
  2329  000DC8  0101               	movlb	1	; () banked
  2330  000DCA  194D               	xorwf	main@pressed& (0+255),w,b
  2331  000DCC  A4D8               	btfss	status,2,c
  2332  000DCE  D01E               	goto	l5693
  2333                           
  2334                           ; BSR set to: 1
  2335                           ;main.c: 182: mem[0] += 4;
  2336  000DD0  0E04               	movlw	4
  2337  000DD2  0101               	movlb	1	; () banked
  2338  000DD4  2754               	addwf	main@mem& (0+255),f,b
  2339                           
  2340                           ; BSR set to: 1
  2341                           ;main.c: 183: }
  2342                           ;main.c: 184: }
  2343                           ;main.c: 185: }
  2344                           
  2345                           ; BSR set to: 1
  2346                           
  2347                           ; BSR set to: 1
  2348  000DD6  D01A               	goto	l5693
  2349  000DD8                     l5691:
  2350  000DD8  0101               	movlb	1	; () banked
  2351  000DDA  5155               	movf	_curr_state& (0+255),w,b
  2352                           
  2353                           ; Switch size 1, requested type "space"
  2354                           ; Number of cases is 8, Range of values is 1 to 8
  2355                           ; switch strategies available:
  2356                           ; Name         Instructions Cycles
  2357                           ; simple_byte           25    13 (average)
  2358                           ;	Chosen strategy is simple_byte
  2359  000DDC  0A01               	xorlw	1	; case 1
  2360  000DDE  B4D8               	btfsc	status,2,c
  2361  000DE0  D665               	goto	l5635
  2362  000DE2  0A03               	xorlw	3	; case 2
  2363  000DE4  B4D8               	btfsc	status,2,c
  2364  000DE6  D659               	goto	l5633
  2365  000DE8  0A01               	xorlw	1	; case 3
  2366  000DEA  B4D8               	btfsc	status,2,c
  2367  000DEC  D687               	goto	l5643
  2368  000DEE  0A07               	xorlw	7	; case 4
  2369  000DF0  B4D8               	btfsc	status,2,c
  2370  000DF2  D68D               	goto	l5645
  2371  000DF4  0A01               	xorlw	1	; case 5
  2372  000DF6  B4D8               	btfsc	status,2,c
  2373  000DF8  D693               	goto	l5647
  2374  000DFA  0A03               	xorlw	3	; case 6
  2375  000DFC  B4D8               	btfsc	status,2,c
  2376  000DFE  D69F               	goto	l5649
  2377  000E00  0A01               	xorlw	1	; case 7
  2378  000E02  B4D8               	btfsc	status,2,c
  2379  000E04  D718               	goto	l5659
  2380  000E06  0A0F               	xorlw	15	; case 8
  2381  000E08  B4D8               	btfsc	status,2,c
  2382  000E0A  D72C               	goto	l5665
  2383  000E0C                     l5693:
  2384                           
  2385                           ;main.c: 186: _delay((unsigned long)((100)*(10000000/4000.0)));
  2386  000E0C  0E02               	movlw	2
  2387  000E0E  0100               	movlb	0	; () banked
  2388  000E10  6FF5               	movwf	(??_main+1)& (0+255),b
  2389  000E12  0E45               	movlw	69
  2390  000E14  0100               	movlb	0	; () banked
  2391  000E16  6FF4               	movwf	??_main& (0+255),b
  2392  000E18  0EA9               	movlw	169
  2393  000E1A                     u5607:
  2394  000E1A  2EE8               	decfsz	wreg,f,c
  2395  000E1C  D7FE               	bra	u5607
  2396  000E1E  2FF4               	decfsz	??_main& (0+255),f,b
  2397  000E20  D7FC               	bra	u5607
  2398  000E22  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  2399  000E24  D7FA               	bra	u5607
  2400  000E26  D000               	nop2	
  2401  000E28  D7D7               	goto	l5691
  2402  000E2A                     __end_of_main:
  2403                           	opt stack 0
  2404                           tblptru	equ	0xFF8
  2405                           tblptrh	equ	0xFF7
  2406                           tblptrl	equ	0xFF6
  2407                           tablat	equ	0xFF5
  2408                           intcon	equ	0xFF2
  2409                           intcon2	equ	0xFF1
  2410                           intcon3	equ	0xFF0
  2411                           postinc0	equ	0xFEE
  2412                           wreg	equ	0xFE8
  2413                           postdec1	equ	0xFE5
  2414                           fsr1l	equ	0xFE1
  2415                           status	equ	0xFD8
  2416                           
  2417 ;; *************** function _runtime *****************
  2418 ;; Defined at:
  2419 ;;		line 438 in file "main.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;  start_time      2  106[BANK0 ] PTR unsigned char 
  2422 ;;		 -> main@start_time(7), 
  2423 ;;  end_time        2  108[BANK0 ] PTR unsigned char 
  2424 ;;		 -> main@end_time(7), 
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;		None
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      void 
  2429 ;; Registers used:
  2430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2436 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;Total ram usage:        4 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    9
  2443 ;; This function calls:
  2444 ;;		_lcdInst
  2445 ;;		_printf
  2446 ;;		_time_difference
  2447 ;; This function is called by:
  2448 ;;		_main
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	text1
  2453  00309A                     __ptext1:
  2454                           	opt stack 0
  2455  00309A                     _runtime:
  2456                           	opt stack 21
  2457                           
  2458                           ;main.c: 439: lcdInst(0b10000000);;
  2459                           
  2460                           ;incstack = 0
  2461  00309A  0E80               	movlw	128
  2462  00309C  ECA9  F019         	call	_lcdInst
  2463                           
  2464                           ;main.c: 440: printf("Total Operation ");
  2465  0030A0  0EBB               	movlw	low STR_10
  2466  0030A2  0100               	movlb	0	; () banked
  2467  0030A4  6FCE               	movwf	printf@f& (0+255),b
  2468  0030A6  0EFF               	movlw	high STR_10
  2469  0030A8  0100               	movlb	0	; () banked
  2470  0030AA  6FCF               	movwf	(printf@f+1)& (0+255),b
  2471  0030AC  EC15  F007         	call	_printf	;wreg free
  2472                           
  2473                           ;main.c: 441: lcdInst(0b11000000);;
  2474  0030B0  0EC0               	movlw	192
  2475  0030B2  ECA9  F019         	call	_lcdInst
  2476                           
  2477                           ;main.c: 442: printf("Time: %is         ", time_difference(end_time, start_time));
  2478  0030B6  0EFD               	movlw	low STR_11
  2479  0030B8  0100               	movlb	0	; () banked
  2480  0030BA  6FCE               	movwf	printf@f& (0+255),b
  2481  0030BC  0EFE               	movlw	high STR_11
  2482  0030BE  0100               	movlb	0	; () banked
  2483  0030C0  6FCF               	movwf	(printf@f+1)& (0+255),b
  2484  0030C2  C0EC  F0B6         	movff	runtime@end_time,time_difference@time1
  2485  0030C6  C0ED  F0B7         	movff	runtime@end_time+1,time_difference@time1+1
  2486  0030CA  C0EA  F0B8         	movff	runtime@start_time,time_difference@time2
  2487  0030CE  C0EB  F0B9         	movff	runtime@start_time+1,time_difference@time2+1
  2488  0030D2  ECE8  F00C         	call	_time_difference	;wreg free
  2489  0030D6  C0B6  F0D0         	movff	?_time_difference,?_printf+2
  2490  0030DA  C0B7  F0D1         	movff	?_time_difference+1,?_printf+3
  2491  0030DE  EC15  F007         	call	_printf	;wreg free
  2492  0030E2  0012               	return		;funcret
  2493  0030E4                     __end_of_runtime:
  2494                           	opt stack 0
  2495                           tblptru	equ	0xFF8
  2496                           tblptrh	equ	0xFF7
  2497                           tblptrl	equ	0xFF6
  2498                           tablat	equ	0xFF5
  2499                           intcon	equ	0xFF2
  2500                           intcon2	equ	0xFF1
  2501                           intcon3	equ	0xFF0
  2502                           postinc0	equ	0xFEE
  2503                           wreg	equ	0xFE8
  2504                           postdec1	equ	0xFE5
  2505                           fsr1l	equ	0xFE1
  2506                           status	equ	0xFD8
  2507                           
  2508 ;; *************** function _operation_end *****************
  2509 ;; Defined at:
  2510 ;;		line 484 in file "main.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;  step_state      2  106[BANK0 ] PTR unsigned char 
  2513 ;;		 -> main@step_state(2), 
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;		None
  2516 ;; Return value:  Size  Location     Type
  2517 ;;                  1    wreg      void 
  2518 ;; Registers used:
  2519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2525 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2527 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2528 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2529 ;;Total ram usage:        4 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; Hardware stack levels required when called:    5
  2532 ;; This function calls:
  2533 ;;		_lcdInst
  2534 ;;		_printf
  2535 ;;		_stepper_state
  2536 ;; This function is called by:
  2537 ;;		_main
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           	psect	text2
  2542  002E60                     __ptext2:
  2543                           	opt stack 0
  2544  002E60                     _operation_end:
  2545                           	opt stack 25
  2546                           
  2547                           ;main.c: 485: PORTEbits.RE1 = 0;
  2548                           
  2549                           ;incstack = 0
  2550  002E60  9284               	bcf	3972,1,c	;volatile
  2551                           
  2552                           ;main.c: 486: PORTEbits.RE0 = 1;
  2553  002E62  8084               	bsf	3972,0,c	;volatile
  2554                           
  2555                           ;main.c: 487: lcdInst(0b10000000);;
  2556  002E64  0E80               	movlw	128
  2557  002E66  ECA9  F019         	call	_lcdInst
  2558                           
  2559                           ;main.c: 488: printf("Operation Done! ");
  2560  002E6A  0EAA               	movlw	low STR_22
  2561  002E6C  0100               	movlb	0	; () banked
  2562  002E6E  6FCE               	movwf	printf@f& (0+255),b
  2563  002E70  0EFF               	movlw	high STR_22
  2564  002E72  0100               	movlb	0	; () banked
  2565  002E74  6FCF               	movwf	(printf@f+1)& (0+255),b
  2566  002E76  EC15  F007         	call	_printf	;wreg free
  2567                           
  2568                           ;main.c: 489: lcdInst(0b11000000);;
  2569  002E7A  0EC0               	movlw	192
  2570  002E7C  ECA9  F019         	call	_lcdInst
  2571                           
  2572                           ;main.c: 490: printf("                ");
  2573  002E80  0E33               	movlw	low STR_3
  2574  002E82  0100               	movlb	0	; () banked
  2575  002E84  6FCE               	movwf	printf@f& (0+255),b
  2576  002E86  0EFF               	movlw	high STR_3
  2577  002E88  0100               	movlb	0	; () banked
  2578  002E8A  6FCF               	movwf	(printf@f+1)& (0+255),b
  2579  002E8C  EC15  F007         	call	_printf	;wreg free
  2580                           
  2581                           ;main.c: 491: curr_state = RUNTIME;
  2582  002E90  0E05               	movlw	5
  2583  002E92  0101               	movlb	1	; () banked
  2584  002E94  6F55               	movwf	_curr_state& (0+255),b
  2585                           
  2586                           ; BSR set to: 1
  2587                           ;main.c: 492: step_state[1] = 1;
  2588  002E96  0100               	movlb	0	; () banked
  2589  002E98  EE20 F001          	lfsr	2,1
  2590  002E9C  51EA               	movf	operation_end@step_state& (0+255),w,b
  2591  002E9E  26D9               	addwf	fsr2l,f,c
  2592  002EA0  51EB               	movf	(operation_end@step_state+1)& (0+255),w,b
  2593  002EA2  22DA               	addwfc	fsr2h,f,c
  2594  002EA4  0E01               	movlw	1
  2595  002EA6  6EDF               	movwf	indf2,c
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;main.c: 493: stepper_state(step_state);
  2599  002EA8  C0EA  F01E         	movff	operation_end@step_state,stepper_state@step_state
  2600  002EAC  C0EB  F01F         	movff	operation_end@step_state+1,stepper_state@step_state+1
  2601  002EB0  EC16  F00B         	call	_stepper_state	;wreg free
  2602                           
  2603                           ;main.c: 494: _delay((unsigned long)((500)*(10000000/4000.0)));
  2604  002EB4  0E07               	movlw	7
  2605  002EB6  0100               	movlb	0	; () banked
  2606  002EB8  6FED               	movwf	(??_operation_end+1)& (0+255),b
  2607  002EBA  0E58               	movlw	88
  2608  002EBC  0100               	movlb	0	; () banked
  2609  002EBE  6FEC               	movwf	??_operation_end& (0+255),b
  2610  002EC0  0E59               	movlw	89
  2611  002EC2                     u5617:
  2612  002EC2  2EE8               	decfsz	wreg,f,c
  2613  002EC4  D7FE               	bra	u5617
  2614  002EC6  2FEC               	decfsz	??_operation_end& (0+255),f,b
  2615  002EC8  D7FC               	bra	u5617
  2616  002ECA  2FED               	decfsz	(??_operation_end+1)& (0+255),f,b
  2617  002ECC  D7FA               	bra	u5617
  2618  002ECE  D000               	nop2	
  2619  002ED0  0012               	return	
  2620  002ED2                     __end_of_operation_end:
  2621                           	opt stack 0
  2622                           tblptru	equ	0xFF8
  2623                           tblptrh	equ	0xFF7
  2624                           tblptrl	equ	0xFF6
  2625                           tablat	equ	0xFF5
  2626                           intcon	equ	0xFF2
  2627                           intcon2	equ	0xFF1
  2628                           intcon3	equ	0xFF0
  2629                           postinc0	equ	0xFEE
  2630                           wreg	equ	0xFE8
  2631                           postdec1	equ	0xFE5
  2632                           fsr1l	equ	0xFE1
  2633                           indf2	equ	0xFDF
  2634                           fsr2h	equ	0xFDA
  2635                           fsr2l	equ	0xFD9
  2636                           status	equ	0xFD8
  2637                           
  2638 ;; *************** function _init_operation *****************
  2639 ;; Defined at:
  2640 ;;		line 330 in file "main.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;  start_time      2  106[BANK0 ] PTR unsigned char 
  2643 ;;		 -> main@start_time(7), 
  2644 ;;  time            2  108[BANK0 ] PTR unsigned char 
  2645 ;;		 -> main@time(7), 
  2646 ;;  bot_count       2  110[BANK0 ] PTR unsigned char 
  2647 ;;		 -> main@bot_count(4), 
  2648 ;;  step_state      2  112[BANK0 ] PTR unsigned char 
  2649 ;;		 -> main@step_state(2), 
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;  b2              2   44[BANK1 ] int 
  2652 ;;  r2              2   42[BANK1 ] int 
  2653 ;;  b1              2   40[BANK1 ] int 
  2654 ;;  r1              2   38[BANK1 ] int 
  2655 ;;  g2              2   26[BANK1 ] int 
  2656 ;;  g1              2   24[BANK1 ] int 
  2657 ;;  c2              2   20[BANK1 ] int 
  2658 ;;  c1              2   18[BANK1 ] int 
  2659 ;;  b2              2   36[BANK1 ] int 
  2660 ;;  r2              2   34[BANK1 ] int 
  2661 ;;  b1              2   30[BANK1 ] int 
  2662 ;;  r1              2   28[BANK1 ] int 
  2663 ;;  g2              2   22[BANK1 ] int 
  2664 ;;  c2              2   16[BANK1 ] int 
  2665 ;;  c1              2   14[BANK1 ] int 
  2666 ;;  g1              2   12[BANK1 ] int 
  2667 ;;  luminosity1     2    0[BANK1 ] int 
  2668 ;;  i               2   32[BANK1 ] int 
  2669 ;;  detection_ti    7    2[BANK1 ] unsigned char [7]
  2670 ;;  clear           2   52[BANK1 ] unsigned char [2]
  2671 ;;  blue            2   50[BANK1 ] unsigned char [2]
  2672 ;;  green           2   48[BANK1 ] unsigned char [2]
  2673 ;;  red             2   46[BANK1 ] unsigned char [2]
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  1    wreg      void 
  2676 ;; Registers used:
  2677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2683 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2684 ;;      Locals:         0       0      54       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2685 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;      Totals:         0      10      54       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;Total ram usage:       64 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    9
  2690 ;; This function calls:
  2691 ;;		___awtoft
  2692 ;;		___ftadd
  2693 ;;		___ftdiv
  2694 ;;		___ftge
  2695 ;;		___ftmul
  2696 ;;		___fttol
  2697 ;;		_initLCD
  2698 ;;		_lcdInst
  2699 ;;		_printf
  2700 ;;		_read_colorsensor1
  2701 ;;		_read_colorsensor2
  2702 ;;		_stepper_state
  2703 ;;		_time_difference
  2704 ;;		_update_time
  2705 ;; This function is called by:
  2706 ;;		_main
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           	psect	text3
  2711  000012                     __ptext3:
  2712                           	opt stack 0
  2713  000012                     _init_operation:
  2714                           	opt stack 21
  2715                           
  2716                           ;main.c: 331: update_time(start_time);
  2717                           
  2718                           ;incstack = 0
  2719  000012  C0EA  F01C         	movff	init_operation@start_time,update_time@time
  2720  000016  C0EB  F01D         	movff	init_operation@start_time+1,update_time@time+1
  2721  00001A  EC69  F017         	call	_update_time	;wreg free
  2722                           
  2723                           ;main.c: 332: update_time(time);
  2724  00001E  C0EC  F01C         	movff	init_operation@time,update_time@time
  2725  000022  C0ED  F01D         	movff	init_operation@time+1,update_time@time+1
  2726  000026  EC69  F017         	call	_update_time	;wreg free
  2727                           
  2728                           ;main.c: 333: lcdInst(0b00000001);;
  2729  00002A  0E01               	movlw	1
  2730  00002C  ECA9  F019         	call	_lcdInst
  2731                           
  2732                           ;main.c: 334: initLCD();
  2733  000030  EC72  F018         	call	_initLCD	;wreg free
  2734                           
  2735                           ;main.c: 335: step_state[0] = 1;
  2736  000034  C0F0  FFD9         	movff	init_operation@step_state,fsr2l
  2737  000038  C0F1  FFDA         	movff	init_operation@step_state+1,fsr2h
  2738  00003C  0E01               	movlw	1
  2739  00003E  6EDF               	movwf	indf2,c
  2740                           
  2741                           ;main.c: 336: step_state[1] = 1;
  2742  000040  0100               	movlb	0	; () banked
  2743  000042  EE20 F001          	lfsr	2,1
  2744  000046  51F0               	movf	init_operation@step_state& (0+255),w,b
  2745  000048  26D9               	addwf	fsr2l,f,c
  2746  00004A  51F1               	movf	(init_operation@step_state+1)& (0+255),w,b
  2747  00004C  22DA               	addwfc	fsr2h,f,c
  2748  00004E  0E01               	movlw	1
  2749  000050  6EDF               	movwf	indf2,c
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;main.c: 338: unsigned char detection_time[7];
  2753                           ;main.c: 339: update_time(detection_time);
  2754  000052  0E02               	movlw	low init_operation@detection_time
  2755  000054  6E1C               	movwf	update_time@time,c
  2756  000056  0E01               	movlw	high init_operation@detection_time
  2757  000058  6E1D               	movwf	update_time@time+1,c
  2758  00005A  EC69  F017         	call	_update_time	;wreg free
  2759                           
  2760                           ;main.c: 340: for (int i = 0; i<4; i++){
  2761  00005E  0E00               	movlw	0
  2762  000060  0101               	movlb	1	; () banked
  2763  000062  6F21               	movwf	(init_operation@i+1)& (0+255),b
  2764  000064  0E00               	movlw	0
  2765  000066  6F20               	movwf	init_operation@i& (0+255),b
  2766                           
  2767                           ; BSR set to: 1
  2768  000068  0101               	movlb	1	; () banked
  2769  00006A  BF21               	btfsc	(init_operation@i+1)& (0+255),7,b
  2770  00006C  D008               	goto	l5365
  2771  00006E  0101               	movlb	1	; () banked
  2772  000070  5121               	movf	(init_operation@i+1)& (0+255),w,b
  2773  000072  E11B               	bnz	l188
  2774  000074  0E04               	movlw	4
  2775  000076  0101               	movlb	1	; () banked
  2776  000078  5D20               	subwf	init_operation@i& (0+255),w,b
  2777  00007A  B0D8               	btfsc	status,0,c
  2778  00007C  D016               	goto	l188
  2779  00007E                     l5365:
  2780                           
  2781                           ; BSR set to: 1
  2782                           ;main.c: 341: bot_count[i] = 0;
  2783  00007E  0101               	movlb	1	; () banked
  2784  000080  5120               	movf	init_operation@i& (0+255),w,b
  2785  000082  0100               	movlb	0	; () banked
  2786  000084  25EE               	addwf	init_operation@bot_count& (0+255),w,b
  2787  000086  6ED9               	movwf	fsr2l,c
  2788  000088  0101               	movlb	1	; () banked
  2789  00008A  5121               	movf	(init_operation@i+1)& (0+255),w,b
  2790  00008C  0100               	movlb	0	; () banked
  2791  00008E  21EF               	addwfc	(init_operation@bot_count+1)& (0+255),w,b
  2792  000090  6EDA               	movwf	fsr2h,c
  2793  000092  0E00               	movlw	0
  2794  000094  6EDF               	movwf	indf2,c
  2795                           
  2796                           ; BSR set to: 0
  2797  000096  0101               	movlb	1	; () banked
  2798  000098  4B20               	infsnz	init_operation@i& (0+255),f,b
  2799  00009A  2B21               	incf	(init_operation@i+1)& (0+255),f,b
  2800                           
  2801                           ; BSR set to: 1
  2802  00009C  0101               	movlb	1	; () banked
  2803  00009E  BF21               	btfsc	(init_operation@i+1)& (0+255),7,b
  2804  0000A0  D7EE               	goto	l5365
  2805  0000A2  0101               	movlb	1	; () banked
  2806  0000A4  5121               	movf	(init_operation@i+1)& (0+255),w,b
  2807  0000A6  E101               	bnz	u5190
  2808  0000A8  D7E5               	goto	L2
  2809  0000AA                     u5190:
  2810  0000AA                     l188:
  2811                           
  2812                           ; BSR set to: 1
  2813                           ;main.c: 342: }
  2814                           ;main.c: 344: unsigned char red[2];
  2815                           ;main.c: 345: unsigned char green[2];
  2816                           ;main.c: 346: unsigned char blue[2];
  2817                           ;main.c: 347: unsigned char clear[2];
  2818                           ;main.c: 349: PORTEbits.RE1 = 1;
  2819  0000AA  8284               	bsf	3972,1,c	;volatile
  2820                           
  2821                           ;main.c: 350: PORTEbits.RE0 = 1;
  2822  0000AC  8084               	bsf	3972,0,c	;volatile
  2823                           
  2824                           ;main.c: 352: while((curr_state != OPERATION_END) && (time_difference(time, detection_ti
      +                          me) <20)){
  2825  0000AE  EFB7  F004         	goto	l5517
  2826  0000B2                     l5371:
  2827                           
  2828                           ;main.c: 353: update_time(time);
  2829  0000B2  C0EC  F01C         	movff	init_operation@time,update_time@time
  2830  0000B6  C0ED  F01D         	movff	init_operation@time+1,update_time@time+1
  2831  0000BA  EC69  F017         	call	_update_time	;wreg free
  2832                           
  2833                           ;main.c: 361: read_colorsensor1(red, green, blue, clear);
  2834  0000BE  0E2E               	movlw	low init_operation@red
  2835  0000C0  6E1C               	movwf	read_colorsensor1@red,c
  2836  0000C2  0E01               	movlw	high init_operation@red
  2837  0000C4  6E1D               	movwf	read_colorsensor1@red+1,c
  2838  0000C6  0E30               	movlw	low init_operation@green
  2839  0000C8  6E1E               	movwf	read_colorsensor1@green,c
  2840  0000CA  0E01               	movlw	high init_operation@green
  2841  0000CC  6E1F               	movwf	read_colorsensor1@green+1,c
  2842  0000CE  0E32               	movlw	low init_operation@blue
  2843  0000D0  6E20               	movwf	read_colorsensor1@blue,c
  2844  0000D2  0E01               	movlw	high init_operation@blue
  2845  0000D4  6E21               	movwf	read_colorsensor1@blue+1,c
  2846  0000D6  0E34               	movlw	low init_operation@clear
  2847  0000D8  6E22               	movwf	read_colorsensor1@clear,c
  2848  0000DA  0E01               	movlw	high init_operation@clear
  2849  0000DC  6E23               	movwf	read_colorsensor1@clear+1,c
  2850  0000DE  EC3E  F011         	call	_read_colorsensor1	;wreg free
  2851                           
  2852                           ;main.c: 362: int r1 = (red[0]<<8) | red[1];
  2853  0000E2  0101               	movlb	1	; () banked
  2854  0000E4  512F               	movf	(init_operation@red+1)& (0+255),w,b
  2855  0000E6  C12E  F0F2         	movff	init_operation@red,??_init_operation
  2856  0000EA  0100               	movlb	0	; () banked
  2857  0000EC  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  2858  0000EE  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  2859  0000F2  0100               	movlb	0	; () banked
  2860  0000F4  6BF2               	clrf	??_init_operation& (0+255),b
  2861  0000F6  0100               	movlb	0	; () banked
  2862  0000F8  11F2               	iorwf	??_init_operation& (0+255),w,b
  2863  0000FA  0101               	movlb	1	; () banked
  2864  0000FC  6F1C               	movwf	init_operation@r1& (0+255),b
  2865  0000FE  0100               	movlb	0	; () banked
  2866  000100  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  2867  000102  0101               	movlb	1	; () banked
  2868  000104  6F1D               	movwf	(init_operation@r1+1)& (0+255),b
  2869                           
  2870                           ; BSR set to: 1
  2871                           ;main.c: 363: int g1 = (green[0]<<8) | green[1];
  2872  000106  0101               	movlb	1	; () banked
  2873  000108  5131               	movf	(init_operation@green+1)& (0+255),w,b
  2874  00010A  C130  F0F2         	movff	init_operation@green,??_init_operation
  2875  00010E  0100               	movlb	0	; () banked
  2876  000110  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  2877  000112  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  2878  000116  0100               	movlb	0	; () banked
  2879  000118  6BF2               	clrf	??_init_operation& (0+255),b
  2880  00011A  0100               	movlb	0	; () banked
  2881  00011C  11F2               	iorwf	??_init_operation& (0+255),w,b
  2882  00011E  0101               	movlb	1	; () banked
  2883  000120  6F0C               	movwf	init_operation@g1& (0+255),b
  2884  000122  0100               	movlb	0	; () banked
  2885  000124  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  2886  000126  0101               	movlb	1	; () banked
  2887  000128  6F0D               	movwf	(init_operation@g1+1)& (0+255),b
  2888                           
  2889                           ; BSR set to: 1
  2890                           ;main.c: 364: int b1 = (blue[0]<<8) | blue[1];
  2891  00012A  0101               	movlb	1	; () banked
  2892  00012C  5133               	movf	(init_operation@blue+1)& (0+255),w,b
  2893  00012E  C132  F0F2         	movff	init_operation@blue,??_init_operation
  2894  000132  0100               	movlb	0	; () banked
  2895  000134  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  2896  000136  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  2897  00013A  0100               	movlb	0	; () banked
  2898  00013C  6BF2               	clrf	??_init_operation& (0+255),b
  2899  00013E  0100               	movlb	0	; () banked
  2900  000140  11F2               	iorwf	??_init_operation& (0+255),w,b
  2901  000142  0101               	movlb	1	; () banked
  2902  000144  6F1E               	movwf	init_operation@b1& (0+255),b
  2903  000146  0100               	movlb	0	; () banked
  2904  000148  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  2905  00014A  0101               	movlb	1	; () banked
  2906  00014C  6F1F               	movwf	(init_operation@b1+1)& (0+255),b
  2907                           
  2908                           ; BSR set to: 1
  2909                           ;main.c: 365: int c1 = (clear[0]<<8) | clear[1];
  2910  00014E  0101               	movlb	1	; () banked
  2911  000150  5135               	movf	(init_operation@clear+1)& (0+255),w,b
  2912  000152  C134  F0F2         	movff	init_operation@clear,??_init_operation
  2913  000156  0100               	movlb	0	; () banked
  2914  000158  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  2915  00015A  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  2916  00015E  0100               	movlb	0	; () banked
  2917  000160  6BF2               	clrf	??_init_operation& (0+255),b
  2918  000162  0100               	movlb	0	; () banked
  2919  000164  11F2               	iorwf	??_init_operation& (0+255),w,b
  2920  000166  0101               	movlb	1	; () banked
  2921  000168  6F0E               	movwf	init_operation@c1& (0+255),b
  2922  00016A  0100               	movlb	0	; () banked
  2923  00016C  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  2924  00016E  0101               	movlb	1	; () banked
  2925  000170  6F0F               	movwf	(init_operation@c1+1)& (0+255),b
  2926                           
  2927                           ; BSR set to: 1
  2928                           ;main.c: 366: read_colorsensor2(red, green, blue, clear);
  2929  000172  0E2E               	movlw	low init_operation@red
  2930  000174  6E1C               	movwf	read_colorsensor2@red,c
  2931  000176  0E01               	movlw	high init_operation@red
  2932  000178  6E1D               	movwf	read_colorsensor2@red+1,c
  2933  00017A  0E30               	movlw	low init_operation@green
  2934  00017C  6E1E               	movwf	read_colorsensor2@green,c
  2935  00017E  0E01               	movlw	high init_operation@green
  2936  000180  6E1F               	movwf	read_colorsensor2@green+1,c
  2937  000182  0E32               	movlw	low init_operation@blue
  2938  000184  6E20               	movwf	read_colorsensor2@blue,c
  2939  000186  0E01               	movlw	high init_operation@blue
  2940  000188  6E21               	movwf	read_colorsensor2@blue+1,c
  2941  00018A  0E34               	movlw	low init_operation@clear
  2942  00018C  6E22               	movwf	read_colorsensor2@clear,c
  2943  00018E  0E01               	movlw	high init_operation@clear
  2944  000190  6E23               	movwf	read_colorsensor2@clear+1,c
  2945  000192  ECB1  F010         	call	_read_colorsensor2	;wreg free
  2946                           
  2947                           ;main.c: 367: int r2 = (red[0]<<8) | red[1];
  2948  000196  0101               	movlb	1	; () banked
  2949  000198  512F               	movf	(init_operation@red+1)& (0+255),w,b
  2950  00019A  C12E  F0F2         	movff	init_operation@red,??_init_operation
  2951  00019E  0100               	movlb	0	; () banked
  2952  0001A0  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  2953  0001A2  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  2954  0001A6  0100               	movlb	0	; () banked
  2955  0001A8  6BF2               	clrf	??_init_operation& (0+255),b
  2956  0001AA  0100               	movlb	0	; () banked
  2957  0001AC  11F2               	iorwf	??_init_operation& (0+255),w,b
  2958  0001AE  0101               	movlb	1	; () banked
  2959  0001B0  6F22               	movwf	init_operation@r2& (0+255),b
  2960  0001B2  0100               	movlb	0	; () banked
  2961  0001B4  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  2962  0001B6  0101               	movlb	1	; () banked
  2963  0001B8  6F23               	movwf	(init_operation@r2+1)& (0+255),b
  2964                           
  2965                           ; BSR set to: 1
  2966                           ;main.c: 368: int g2 = (green[0]<<8) | green[1];
  2967  0001BA  0101               	movlb	1	; () banked
  2968  0001BC  5131               	movf	(init_operation@green+1)& (0+255),w,b
  2969  0001BE  C130  F0F2         	movff	init_operation@green,??_init_operation
  2970  0001C2  0100               	movlb	0	; () banked
  2971  0001C4  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  2972  0001C6  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  2973  0001CA  0100               	movlb	0	; () banked
  2974  0001CC  6BF2               	clrf	??_init_operation& (0+255),b
  2975  0001CE  0100               	movlb	0	; () banked
  2976  0001D0  11F2               	iorwf	??_init_operation& (0+255),w,b
  2977  0001D2  0101               	movlb	1	; () banked
  2978  0001D4  6F16               	movwf	init_operation@g2& (0+255),b
  2979  0001D6  0100               	movlb	0	; () banked
  2980  0001D8  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  2981  0001DA  0101               	movlb	1	; () banked
  2982  0001DC  6F17               	movwf	(init_operation@g2+1)& (0+255),b
  2983                           
  2984                           ; BSR set to: 1
  2985                           ;main.c: 369: int b2 = (blue[0]<<8) | blue[1];
  2986  0001DE  0101               	movlb	1	; () banked
  2987  0001E0  5133               	movf	(init_operation@blue+1)& (0+255),w,b
  2988  0001E2  C132  F0F2         	movff	init_operation@blue,??_init_operation
  2989  0001E6  0100               	movlb	0	; () banked
  2990  0001E8  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  2991  0001EA  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  2992  0001EE  0100               	movlb	0	; () banked
  2993  0001F0  6BF2               	clrf	??_init_operation& (0+255),b
  2994  0001F2  0100               	movlb	0	; () banked
  2995  0001F4  11F2               	iorwf	??_init_operation& (0+255),w,b
  2996  0001F6  0101               	movlb	1	; () banked
  2997  0001F8  6F24               	movwf	init_operation@b2& (0+255),b
  2998  0001FA  0100               	movlb	0	; () banked
  2999  0001FC  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  3000  0001FE  0101               	movlb	1	; () banked
  3001  000200  6F25               	movwf	(init_operation@b2+1)& (0+255),b
  3002                           
  3003                           ; BSR set to: 1
  3004                           ;main.c: 370: int c2 = (clear[0]<<8) | clear[1];
  3005  000202  0101               	movlb	1	; () banked
  3006  000204  5135               	movf	(init_operation@clear+1)& (0+255),w,b
  3007  000206  C134  F0F2         	movff	init_operation@clear,??_init_operation
  3008  00020A  0100               	movlb	0	; () banked
  3009  00020C  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  3010  00020E  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  3011  000212  0100               	movlb	0	; () banked
  3012  000214  6BF2               	clrf	??_init_operation& (0+255),b
  3013  000216  0100               	movlb	0	; () banked
  3014  000218  11F2               	iorwf	??_init_operation& (0+255),w,b
  3015  00021A  0101               	movlb	1	; () banked
  3016  00021C  6F10               	movwf	init_operation@c2& (0+255),b
  3017  00021E  0100               	movlb	0	; () banked
  3018  000220  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  3019  000222  0101               	movlb	1	; () banked
  3020  000224  6F11               	movwf	(init_operation@c2+1)& (0+255),b
  3021                           
  3022                           ; BSR set to: 1
  3023                           ;main.c: 372: int luminosity1 = (-0.32466*r2) + (1.57837*g2) + (-0.73191*b2);
  3024  000226  0E08               	movlw	8
  3025  000228  6E28               	movwf	___ftmul@f2,c
  3026  00022A  0ECA               	movlw	202
  3027  00022C  6E29               	movwf	___ftmul@f2+1,c
  3028  00022E  0E3F               	movlw	63
  3029  000230  6E2A               	movwf	___ftmul@f2+2,c
  3030  000232  C116  F021         	movff	init_operation@g2,___awtoft@c
  3031  000236  C117  F022         	movff	init_operation@g2+1,___awtoft@c+1
  3032  00023A  ECF3  F018         	call	___awtoft	;wreg free
  3033  00023E  C021  F025         	movff	?___awtoft,___ftmul@f1
  3034  000242  C022  F026         	movff	?___awtoft+1,___ftmul@f1+1
  3035  000246  C023  F027         	movff	?___awtoft+2,___ftmul@f1+2
  3036  00024A  ECCE  F012         	call	___ftmul	;wreg free
  3037  00024E  C025  F037         	movff	?___ftmul,___ftadd@f2
  3038  000252  C026  F038         	movff	?___ftmul+1,___ftadd@f2+1
  3039  000256  C027  F039         	movff	?___ftmul+2,___ftadd@f2+2
  3040  00025A  0E3A               	movlw	58
  3041  00025C  6E28               	movwf	___ftmul@f2,c
  3042  00025E  0EA6               	movlw	166
  3043  000260  6E29               	movwf	___ftmul@f2+1,c
  3044  000262  0EBE               	movlw	190
  3045  000264  6E2A               	movwf	___ftmul@f2+2,c
  3046  000266  C122  F021         	movff	init_operation@r2,___awtoft@c
  3047  00026A  C123  F022         	movff	init_operation@r2+1,___awtoft@c+1
  3048  00026E  ECF3  F018         	call	___awtoft	;wreg free
  3049  000272  C021  F025         	movff	?___awtoft,___ftmul@f1
  3050  000276  C022  F026         	movff	?___awtoft+1,___ftmul@f1+1
  3051  00027A  C023  F027         	movff	?___awtoft+2,___ftmul@f1+2
  3052  00027E  ECCE  F012         	call	___ftmul	;wreg free
  3053  000282  C025  F034         	movff	?___ftmul,___ftadd@f1
  3054  000286  C026  F035         	movff	?___ftmul+1,___ftadd@f1+1
  3055  00028A  C027  F036         	movff	?___ftmul+2,___ftadd@f1+2
  3056  00028E  ECD0  F00D         	call	___ftadd	;wreg free
  3057  000292  C034  F109         	movff	?___ftadd,_init_operation$1504
  3058  000296  C035  F10A         	movff	?___ftadd+1,_init_operation$1504+1
  3059  00029A  C036  F10B         	movff	?___ftadd+2,_init_operation$1504+2
  3060                           
  3061                           ;main.c: 372: int luminosity1 = (-0.32466*r2) + (1.57837*g2) + (-0.73191*b2);
  3062  00029E  0E5E               	movlw	94
  3063  0002A0  6E28               	movwf	___ftmul@f2,c
  3064  0002A2  0E3B               	movlw	59
  3065  0002A4  6E29               	movwf	___ftmul@f2+1,c
  3066  0002A6  0EBF               	movlw	191
  3067  0002A8  6E2A               	movwf	___ftmul@f2+2,c
  3068  0002AA  C124  F021         	movff	init_operation@b2,___awtoft@c
  3069  0002AE  C125  F022         	movff	init_operation@b2+1,___awtoft@c+1
  3070  0002B2  ECF3  F018         	call	___awtoft	;wreg free
  3071  0002B6  C021  F025         	movff	?___awtoft,___ftmul@f1
  3072  0002BA  C022  F026         	movff	?___awtoft+1,___ftmul@f1+1
  3073  0002BE  C023  F027         	movff	?___awtoft+2,___ftmul@f1+2
  3074  0002C2  ECCE  F012         	call	___ftmul	;wreg free
  3075  0002C6  C025  F037         	movff	?___ftmul,___ftadd@f2
  3076  0002CA  C026  F038         	movff	?___ftmul+1,___ftadd@f2+1
  3077  0002CE  C027  F039         	movff	?___ftmul+2,___ftadd@f2+2
  3078  0002D2  C109  F034         	movff	_init_operation$1504,___ftadd@f1
  3079  0002D6  C10A  F035         	movff	_init_operation$1504+1,___ftadd@f1+1
  3080  0002DA  C10B  F036         	movff	_init_operation$1504+2,___ftadd@f1+2
  3081  0002DE  ECD0  F00D         	call	___ftadd	;wreg free
  3082  0002E2  C034  F040         	movff	?___ftadd,___fttol@f1
  3083  0002E6  C035  F041         	movff	?___ftadd+1,___fttol@f1+1
  3084  0002EA  C036  F042         	movff	?___ftadd+2,___fttol@f1+2
  3085  0002EE  EC54  F012         	call	___fttol	;wreg free
  3086  0002F2  C040  F100         	movff	?___fttol,init_operation@luminosity1
  3087  0002F6  C041  F101         	movff	?___fttol+1,init_operation@luminosity1+1
  3088                           
  3089                           ;main.c: 374: lcdInst(0b10000000);;
  3090  0002FA  0E80               	movlw	128
  3091  0002FC  ECA9  F019         	call	_lcdInst
  3092                           
  3093                           ;main.c: 375: printf("%u|%u|%u|%u        ", r1, b1, c1);
  3094  000300  0EE9               	movlw	low STR_8
  3095  000302  0100               	movlb	0	; () banked
  3096  000304  6FCE               	movwf	printf@f& (0+255),b
  3097  000306  0EFE               	movlw	high STR_8
  3098  000308  0100               	movlb	0	; () banked
  3099  00030A  6FCF               	movwf	(printf@f+1)& (0+255),b
  3100  00030C  C11C  F0D0         	movff	init_operation@r1,?_printf+2
  3101  000310  C11D  F0D1         	movff	init_operation@r1+1,?_printf+3
  3102  000314  C11E  F0D2         	movff	init_operation@b1,?_printf+4
  3103  000318  C11F  F0D3         	movff	init_operation@b1+1,?_printf+5
  3104  00031C  C10E  F0D4         	movff	init_operation@c1,?_printf+6
  3105  000320  C10F  F0D5         	movff	init_operation@c1+1,?_printf+7
  3106  000324  EC15  F007         	call	_printf	;wreg free
  3107                           
  3108                           ;main.c: 376: lcdInst(0b11000000);;
  3109  000328  0EC0               	movlw	192
  3110  00032A  ECA9  F019         	call	_lcdInst
  3111                           
  3112                           ;main.c: 377: printf("%u|%u|%u|%u        ", r2, b2, c2);
  3113  00032E  0EE9               	movlw	low STR_8
  3114  000330  0100               	movlb	0	; () banked
  3115  000332  6FCE               	movwf	printf@f& (0+255),b
  3116  000334  0EFE               	movlw	high STR_8
  3117  000336  0100               	movlb	0	; () banked
  3118  000338  6FCF               	movwf	(printf@f+1)& (0+255),b
  3119  00033A  C122  F0D0         	movff	init_operation@r2,?_printf+2
  3120  00033E  C123  F0D1         	movff	init_operation@r2+1,?_printf+3
  3121  000342  C124  F0D2         	movff	init_operation@b2,?_printf+4
  3122  000346  C125  F0D3         	movff	init_operation@b2+1,?_printf+5
  3123  00034A  C110  F0D4         	movff	init_operation@c2,?_printf+6
  3124  00034E  C111  F0D5         	movff	init_operation@c2+1,?_printf+7
  3125  000352  EC15  F007         	call	_printf	;wreg free
  3126                           
  3127                           ;main.c: 379: if ((unsigned int)(r1+g1+b1) > 3600 || (unsigned int)(r2+g2+b2) > 3600 || 
      +                          b1 > r1 || b2 > r2){
  3128  000356  0101               	movlb	1	; () banked
  3129  000358  510C               	movf	init_operation@g1& (0+255),w,b
  3130  00035A  0101               	movlb	1	; () banked
  3131  00035C  251C               	addwf	init_operation@r1& (0+255),w,b
  3132  00035E  0100               	movlb	0	; () banked
  3133  000360  6FF2               	movwf	??_init_operation& (0+255),b
  3134  000362  0101               	movlb	1	; () banked
  3135  000364  510D               	movf	(init_operation@g1+1)& (0+255),w,b
  3136  000366  0101               	movlb	1	; () banked
  3137  000368  211D               	addwfc	(init_operation@r1+1)& (0+255),w,b
  3138  00036A  0100               	movlb	0	; () banked
  3139  00036C  6FF3               	movwf	(??_init_operation+1)& (0+255),b
  3140  00036E  0101               	movlb	1	; () banked
  3141  000370  511E               	movf	init_operation@b1& (0+255),w,b
  3142  000372  0100               	movlb	0	; () banked
  3143  000374  27F2               	addwf	??_init_operation& (0+255),f,b
  3144  000376  0101               	movlb	1	; () banked
  3145  000378  511F               	movf	(init_operation@b1+1)& (0+255),w,b
  3146  00037A  0100               	movlb	0	; () banked
  3147  00037C  23F3               	addwfc	(??_init_operation+1)& (0+255),f,b
  3148  00037E  0E11               	movlw	17
  3149  000380  0100               	movlb	0	; () banked
  3150  000382  5DF2               	subwf	??_init_operation& (0+255),w,b
  3151  000384  0E0E               	movlw	14
  3152  000386  0100               	movlb	0	; () banked
  3153  000388  59F3               	subwfb	(??_init_operation+1)& (0+255),w,b
  3154  00038A  B0D8               	btfsc	status,0,c
  3155  00038C  D03C               	goto	l5413
  3156                           
  3157                           ; BSR set to: 0
  3158  00038E  0101               	movlb	1	; () banked
  3159  000390  5116               	movf	init_operation@g2& (0+255),w,b
  3160  000392  0101               	movlb	1	; () banked
  3161  000394  2522               	addwf	init_operation@r2& (0+255),w,b
  3162  000396  0100               	movlb	0	; () banked
  3163  000398  6FF2               	movwf	??_init_operation& (0+255),b
  3164  00039A  0101               	movlb	1	; () banked
  3165  00039C  5117               	movf	(init_operation@g2+1)& (0+255),w,b
  3166  00039E  0101               	movlb	1	; () banked
  3167  0003A0  2123               	addwfc	(init_operation@r2+1)& (0+255),w,b
  3168  0003A2  0100               	movlb	0	; () banked
  3169  0003A4  6FF3               	movwf	(??_init_operation+1)& (0+255),b
  3170  0003A6  0101               	movlb	1	; () banked
  3171  0003A8  5124               	movf	init_operation@b2& (0+255),w,b
  3172  0003AA  0100               	movlb	0	; () banked
  3173  0003AC  27F2               	addwf	??_init_operation& (0+255),f,b
  3174  0003AE  0101               	movlb	1	; () banked
  3175  0003B0  5125               	movf	(init_operation@b2+1)& (0+255),w,b
  3176  0003B2  0100               	movlb	0	; () banked
  3177  0003B4  23F3               	addwfc	(??_init_operation+1)& (0+255),f,b
  3178  0003B6  0E11               	movlw	17
  3179  0003B8  0100               	movlb	0	; () banked
  3180  0003BA  5DF2               	subwf	??_init_operation& (0+255),w,b
  3181  0003BC  0E0E               	movlw	14
  3182  0003BE  0100               	movlb	0	; () banked
  3183  0003C0  59F3               	subwfb	(??_init_operation+1)& (0+255),w,b
  3184  0003C2  B0D8               	btfsc	status,0,c
  3185  0003C4  D020               	goto	l5413
  3186                           
  3187                           ; BSR set to: 0
  3188  0003C6  0101               	movlb	1	; () banked
  3189  0003C8  511E               	movf	init_operation@b1& (0+255),w,b
  3190  0003CA  0101               	movlb	1	; () banked
  3191  0003CC  5D1C               	subwf	init_operation@r1& (0+255),w,b
  3192  0003CE  0101               	movlb	1	; () banked
  3193  0003D0  511D               	movf	(init_operation@r1+1)& (0+255),w,b
  3194  0003D2  0A80               	xorlw	128
  3195  0003D4  0100               	movlb	0	; () banked
  3196  0003D6  6FF2               	movwf	??_init_operation& (0+255),b
  3197  0003D8  0101               	movlb	1	; () banked
  3198  0003DA  511F               	movf	(init_operation@b1+1)& (0+255),w,b
  3199  0003DC  0A80               	xorlw	128
  3200  0003DE  0100               	movlb	0	; () banked
  3201  0003E0  59F2               	subwfb	??_init_operation& (0+255),w,b
  3202  0003E2  A0D8               	btfss	status,0,c
  3203  0003E4  D010               	goto	l5413
  3204                           
  3205                           ; BSR set to: 0
  3206  0003E6  0101               	movlb	1	; () banked
  3207  0003E8  5124               	movf	init_operation@b2& (0+255),w,b
  3208  0003EA  0101               	movlb	1	; () banked
  3209  0003EC  5D22               	subwf	init_operation@r2& (0+255),w,b
  3210  0003EE  0101               	movlb	1	; () banked
  3211  0003F0  5123               	movf	(init_operation@r2+1)& (0+255),w,b
  3212  0003F2  0A80               	xorlw	128
  3213  0003F4  0100               	movlb	0	; () banked
  3214  0003F6  6FF2               	movwf	??_init_operation& (0+255),b
  3215  0003F8  0101               	movlb	1	; () banked
  3216  0003FA  5125               	movf	(init_operation@b2+1)& (0+255),w,b
  3217  0003FC  0A80               	xorlw	128
  3218  0003FE  0100               	movlb	0	; () banked
  3219  000400  59F2               	subwfb	??_init_operation& (0+255),w,b
  3220  000402  B0D8               	btfsc	status,0,c
  3221  000404  D2A6               	goto	l5515
  3222  000406                     l5413:
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;main.c: 380: _delay((unsigned long)((2000)*(10000000/4000.0)));
  3226  000406  0E1A               	movlw	26
  3227  000408  0100               	movlb	0	; () banked
  3228  00040A  6FF3               	movwf	(??_init_operation+1)& (0+255),b
  3229  00040C  0E5E               	movlw	94
  3230  00040E  0100               	movlb	0	; () banked
  3231  000410  6FF2               	movwf	??_init_operation& (0+255),b
  3232  000412  0E6E               	movlw	110
  3233  000414                     u5627:
  3234  000414  2EE8               	decfsz	wreg,f,c
  3235  000416  D7FE               	bra	u5627
  3236  000418  2FF2               	decfsz	??_init_operation& (0+255),f,b
  3237  00041A  D7FC               	bra	u5627
  3238  00041C  2FF3               	decfsz	(??_init_operation+1)& (0+255),f,b
  3239  00041E  D7FA               	bra	u5627
  3240  000420  F000               	nop	
  3241                           
  3242                           ;main.c: 381: read_colorsensor1(red, green, blue, clear);
  3243  000422  0E2E               	movlw	low init_operation@red
  3244  000424  6E1C               	movwf	read_colorsensor1@red,c
  3245  000426  0E01               	movlw	high init_operation@red
  3246  000428  6E1D               	movwf	read_colorsensor1@red+1,c
  3247  00042A  0E30               	movlw	low init_operation@green
  3248  00042C  6E1E               	movwf	read_colorsensor1@green,c
  3249  00042E  0E01               	movlw	high init_operation@green
  3250  000430  6E1F               	movwf	read_colorsensor1@green+1,c
  3251  000432  0E32               	movlw	low init_operation@blue
  3252  000434  6E20               	movwf	read_colorsensor1@blue,c
  3253  000436  0E01               	movlw	high init_operation@blue
  3254  000438  6E21               	movwf	read_colorsensor1@blue+1,c
  3255  00043A  0E34               	movlw	low init_operation@clear
  3256  00043C  6E22               	movwf	read_colorsensor1@clear,c
  3257  00043E  0E01               	movlw	high init_operation@clear
  3258  000440  6E23               	movwf	read_colorsensor1@clear+1,c
  3259  000442  EC3E  F011         	call	_read_colorsensor1	;wreg free
  3260                           
  3261                           ;main.c: 382: int r1 = (red[0]<<8) | red[1];
  3262  000446  0101               	movlb	1	; () banked
  3263  000448  512F               	movf	(init_operation@red+1)& (0+255),w,b
  3264  00044A  C12E  F0F2         	movff	init_operation@red,??_init_operation
  3265  00044E  0100               	movlb	0	; () banked
  3266  000450  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  3267  000452  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  3268  000456  0100               	movlb	0	; () banked
  3269  000458  6BF2               	clrf	??_init_operation& (0+255),b
  3270  00045A  0100               	movlb	0	; () banked
  3271  00045C  11F2               	iorwf	??_init_operation& (0+255),w,b
  3272  00045E  0101               	movlb	1	; () banked
  3273  000460  6F26               	movwf	init_operation@r1_613& (0+255),b
  3274  000462  0100               	movlb	0	; () banked
  3275  000464  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  3276  000466  0101               	movlb	1	; () banked
  3277  000468  6F27               	movwf	(init_operation@r1_613+1)& (0+255),b
  3278                           
  3279                           ; BSR set to: 1
  3280                           ;main.c: 383: int g1 = (green[0]<<8) | green[1];
  3281  00046A  0101               	movlb	1	; () banked
  3282  00046C  5131               	movf	(init_operation@green+1)& (0+255),w,b
  3283  00046E  C130  F0F2         	movff	init_operation@green,??_init_operation
  3284  000472  0100               	movlb	0	; () banked
  3285  000474  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  3286  000476  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  3287  00047A  0100               	movlb	0	; () banked
  3288  00047C  6BF2               	clrf	??_init_operation& (0+255),b
  3289  00047E  0100               	movlb	0	; () banked
  3290  000480  11F2               	iorwf	??_init_operation& (0+255),w,b
  3291  000482  0101               	movlb	1	; () banked
  3292  000484  6F18               	movwf	init_operation@g1_614& (0+255),b
  3293  000486  0100               	movlb	0	; () banked
  3294  000488  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  3295  00048A  0101               	movlb	1	; () banked
  3296  00048C  6F19               	movwf	(init_operation@g1_614+1)& (0+255),b
  3297                           
  3298                           ; BSR set to: 1
  3299                           ;main.c: 384: int b1 = (blue[0]<<8) | blue[1];
  3300  00048E  0101               	movlb	1	; () banked
  3301  000490  5133               	movf	(init_operation@blue+1)& (0+255),w,b
  3302  000492  C132  F0F2         	movff	init_operation@blue,??_init_operation
  3303  000496  0100               	movlb	0	; () banked
  3304  000498  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  3305  00049A  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  3306  00049E  0100               	movlb	0	; () banked
  3307  0004A0  6BF2               	clrf	??_init_operation& (0+255),b
  3308  0004A2  0100               	movlb	0	; () banked
  3309  0004A4  11F2               	iorwf	??_init_operation& (0+255),w,b
  3310  0004A6  0101               	movlb	1	; () banked
  3311  0004A8  6F28               	movwf	init_operation@b1_615& (0+255),b
  3312  0004AA  0100               	movlb	0	; () banked
  3313  0004AC  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  3314  0004AE  0101               	movlb	1	; () banked
  3315  0004B0  6F29               	movwf	(init_operation@b1_615+1)& (0+255),b
  3316                           
  3317                           ; BSR set to: 1
  3318                           ;main.c: 385: int c1 = (clear[0]<<8) | clear[1];
  3319  0004B2  0101               	movlb	1	; () banked
  3320  0004B4  5135               	movf	(init_operation@clear+1)& (0+255),w,b
  3321  0004B6  C134  F0F2         	movff	init_operation@clear,??_init_operation
  3322  0004BA  0100               	movlb	0	; () banked
  3323  0004BC  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  3324  0004BE  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  3325  0004C2  0100               	movlb	0	; () banked
  3326  0004C4  6BF2               	clrf	??_init_operation& (0+255),b
  3327  0004C6  0100               	movlb	0	; () banked
  3328  0004C8  11F2               	iorwf	??_init_operation& (0+255),w,b
  3329  0004CA  0101               	movlb	1	; () banked
  3330  0004CC  6F12               	movwf	init_operation@c1_616& (0+255),b
  3331  0004CE  0100               	movlb	0	; () banked
  3332  0004D0  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  3333  0004D2  0101               	movlb	1	; () banked
  3334  0004D4  6F13               	movwf	(init_operation@c1_616+1)& (0+255),b
  3335                           
  3336                           ; BSR set to: 1
  3337                           ;main.c: 386: read_colorsensor2(red, green, blue, clear);
  3338  0004D6  0E2E               	movlw	low init_operation@red
  3339  0004D8  6E1C               	movwf	read_colorsensor2@red,c
  3340  0004DA  0E01               	movlw	high init_operation@red
  3341  0004DC  6E1D               	movwf	read_colorsensor2@red+1,c
  3342  0004DE  0E30               	movlw	low init_operation@green
  3343  0004E0  6E1E               	movwf	read_colorsensor2@green,c
  3344  0004E2  0E01               	movlw	high init_operation@green
  3345  0004E4  6E1F               	movwf	read_colorsensor2@green+1,c
  3346  0004E6  0E32               	movlw	low init_operation@blue
  3347  0004E8  6E20               	movwf	read_colorsensor2@blue,c
  3348  0004EA  0E01               	movlw	high init_operation@blue
  3349  0004EC  6E21               	movwf	read_colorsensor2@blue+1,c
  3350  0004EE  0E34               	movlw	low init_operation@clear
  3351  0004F0  6E22               	movwf	read_colorsensor2@clear,c
  3352  0004F2  0E01               	movlw	high init_operation@clear
  3353  0004F4  6E23               	movwf	read_colorsensor2@clear+1,c
  3354  0004F6  ECB1  F010         	call	_read_colorsensor2	;wreg free
  3355                           
  3356                           ;main.c: 387: int r2 = (red[0]<<8) | red[1];
  3357  0004FA  0101               	movlb	1	; () banked
  3358  0004FC  512F               	movf	(init_operation@red+1)& (0+255),w,b
  3359  0004FE  C12E  F0F2         	movff	init_operation@red,??_init_operation
  3360  000502  0100               	movlb	0	; () banked
  3361  000504  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  3362  000506  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  3363  00050A  0100               	movlb	0	; () banked
  3364  00050C  6BF2               	clrf	??_init_operation& (0+255),b
  3365  00050E  0100               	movlb	0	; () banked
  3366  000510  11F2               	iorwf	??_init_operation& (0+255),w,b
  3367  000512  0101               	movlb	1	; () banked
  3368  000514  6F2A               	movwf	init_operation@r2_617& (0+255),b
  3369  000516  0100               	movlb	0	; () banked
  3370  000518  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  3371  00051A  0101               	movlb	1	; () banked
  3372  00051C  6F2B               	movwf	(init_operation@r2_617+1)& (0+255),b
  3373                           
  3374                           ; BSR set to: 1
  3375                           ;main.c: 388: int g2 = (green[0]<<8) | green[1];
  3376  00051E  0101               	movlb	1	; () banked
  3377  000520  5131               	movf	(init_operation@green+1)& (0+255),w,b
  3378  000522  C130  F0F2         	movff	init_operation@green,??_init_operation
  3379  000526  0100               	movlb	0	; () banked
  3380  000528  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  3381  00052A  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  3382  00052E  0100               	movlb	0	; () banked
  3383  000530  6BF2               	clrf	??_init_operation& (0+255),b
  3384  000532  0100               	movlb	0	; () banked
  3385  000534  11F2               	iorwf	??_init_operation& (0+255),w,b
  3386  000536  0101               	movlb	1	; () banked
  3387  000538  6F1A               	movwf	init_operation@g2_618& (0+255),b
  3388  00053A  0100               	movlb	0	; () banked
  3389  00053C  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  3390  00053E  0101               	movlb	1	; () banked
  3391  000540  6F1B               	movwf	(init_operation@g2_618+1)& (0+255),b
  3392                           
  3393                           ; BSR set to: 1
  3394                           ;main.c: 389: int b2 = (blue[0]<<8) | blue[1];
  3395  000542  0101               	movlb	1	; () banked
  3396  000544  5133               	movf	(init_operation@blue+1)& (0+255),w,b
  3397  000546  C132  F0F2         	movff	init_operation@blue,??_init_operation
  3398  00054A  0100               	movlb	0	; () banked
  3399  00054C  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  3400  00054E  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  3401  000552  0100               	movlb	0	; () banked
  3402  000554  6BF2               	clrf	??_init_operation& (0+255),b
  3403  000556  0100               	movlb	0	; () banked
  3404  000558  11F2               	iorwf	??_init_operation& (0+255),w,b
  3405  00055A  0101               	movlb	1	; () banked
  3406  00055C  6F2C               	movwf	init_operation@b2_619& (0+255),b
  3407  00055E  0100               	movlb	0	; () banked
  3408  000560  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  3409  000562  0101               	movlb	1	; () banked
  3410  000564  6F2D               	movwf	(init_operation@b2_619+1)& (0+255),b
  3411                           
  3412                           ; BSR set to: 1
  3413                           ;main.c: 390: int c2 = (clear[0]<<8) | clear[1];
  3414  000566  0101               	movlb	1	; () banked
  3415  000568  5135               	movf	(init_operation@clear+1)& (0+255),w,b
  3416  00056A  C134  F0F2         	movff	init_operation@clear,??_init_operation
  3417  00056E  0100               	movlb	0	; () banked
  3418  000570  6BF3               	clrf	(??_init_operation+1)& (0+255),b
  3419  000572  C0F2  F0F3         	movff	??_init_operation,??_init_operation+1
  3420  000576  0100               	movlb	0	; () banked
  3421  000578  6BF2               	clrf	??_init_operation& (0+255),b
  3422  00057A  0100               	movlb	0	; () banked
  3423  00057C  11F2               	iorwf	??_init_operation& (0+255),w,b
  3424  00057E  0101               	movlb	1	; () banked
  3425  000580  6F14               	movwf	init_operation@c2_620& (0+255),b
  3426  000582  0100               	movlb	0	; () banked
  3427  000584  51F3               	movf	(??_init_operation+1)& (0+255),w,b
  3428  000586  0101               	movlb	1	; () banked
  3429  000588  6F15               	movwf	(init_operation@c2_620+1)& (0+255),b
  3430                           
  3431                           ; BSR set to: 1
  3432                           ;main.c: 391: PORTEbits.RE1 = 0;
  3433  00058A  9284               	bcf	3972,1,c	;volatile
  3434                           
  3435                           ; BSR set to: 1
  3436                           ;main.c: 393: if (((float)r1/(float)b1 > 1.7 && (unsigned int)(r2+g2+b2) > 5600) || ((fl
      +                          oat)r2/(float)b2 > 1.7 && ((unsigned int)r1+g1+b1) > 6200)){
  3437  00058C  0E9A               	movlw	154
  3438  00058E  6E34               	movwf	___ftge@ff1,c
  3439  000590  0ED9               	movlw	217
  3440  000592  6E35               	movwf	___ftge@ff1+1,c
  3441  000594  0E3F               	movlw	63
  3442  000596  6E36               	movwf	___ftge@ff1+2,c
  3443  000598  C128  F021         	movff	init_operation@b1_615,___awtoft@c
  3444  00059C  C129  F022         	movff	init_operation@b1_615+1,___awtoft@c+1
  3445  0005A0  ECF3  F018         	call	___awtoft	;wreg free
  3446  0005A4  C021  F028         	movff	?___awtoft,___ftdiv@f2
  3447  0005A8  C022  F029         	movff	?___awtoft+1,___ftdiv@f2+1
  3448  0005AC  C023  F02A         	movff	?___awtoft+2,___ftdiv@f2+2
  3449  0005B0  C126  F021         	movff	init_operation@r1_613,___awtoft@c
  3450  0005B4  C127  F022         	movff	init_operation@r1_613+1,___awtoft@c+1
  3451  0005B8  ECF3  F018         	call	___awtoft	;wreg free
  3452  0005BC  C021  F025         	movff	?___awtoft,___ftdiv@f1
  3453  0005C0  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  3454  0005C4  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  3455  0005C8  ECC1  F013         	call	___ftdiv	;wreg free
  3456  0005CC  C025  F037         	movff	?___ftdiv,___ftge@ff2
  3457  0005D0  C026  F038         	movff	?___ftdiv+1,___ftge@ff2+1
  3458  0005D4  C027  F039         	movff	?___ftdiv+2,___ftge@ff2+2
  3459  0005D8  EC9D  F015         	call	___ftge	;wreg free
  3460  0005DC  B0D8               	btfsc	status,0,c
  3461  0005DE  D01C               	goto	l5441
  3462  0005E0  0101               	movlb	1	; () banked
  3463  0005E2  511A               	movf	init_operation@g2_618& (0+255),w,b
  3464  0005E4  0101               	movlb	1	; () banked
  3465  0005E6  252A               	addwf	init_operation@r2_617& (0+255),w,b
  3466  0005E8  0100               	movlb	0	; () banked
  3467  0005EA  6FF2               	movwf	??_init_operation& (0+255),b
  3468  0005EC  0101               	movlb	1	; () banked
  3469  0005EE  511B               	movf	(init_operation@g2_618+1)& (0+255),w,b
  3470  0005F0  0101               	movlb	1	; () banked
  3471  0005F2  212B               	addwfc	(init_operation@r2_617+1)& (0+255),w,b
  3472  0005F4  0100               	movlb	0	; () banked
  3473  0005F6  6FF3               	movwf	(??_init_operation+1)& (0+255),b
  3474  0005F8  0101               	movlb	1	; () banked
  3475  0005FA  512C               	movf	init_operation@b2_619& (0+255),w,b
  3476  0005FC  0100               	movlb	0	; () banked
  3477  0005FE  27F2               	addwf	??_init_operation& (0+255),f,b
  3478  000600  0101               	movlb	1	; () banked
  3479  000602  512D               	movf	(init_operation@b2_619+1)& (0+255),w,b
  3480  000604  0100               	movlb	0	; () banked
  3481  000606  23F3               	addwfc	(??_init_operation+1)& (0+255),f,b
  3482  000608  0EE1               	movlw	225
  3483  00060A  0100               	movlb	0	; () banked
  3484  00060C  5DF2               	subwf	??_init_operation& (0+255),w,b
  3485  00060E  0E15               	movlw	21
  3486  000610  0100               	movlb	0	; () banked
  3487  000612  59F3               	subwfb	(??_init_operation+1)& (0+255),w,b
  3488  000614  B0D8               	btfsc	status,0,c
  3489  000616  D046               	goto	l5445
  3490  000618                     l5441:
  3491  000618  0E9A               	movlw	154
  3492  00061A  6E34               	movwf	___ftge@ff1,c
  3493  00061C  0ED9               	movlw	217
  3494  00061E  6E35               	movwf	___ftge@ff1+1,c
  3495  000620  0E3F               	movlw	63
  3496  000622  6E36               	movwf	___ftge@ff1+2,c
  3497  000624  C12C  F021         	movff	init_operation@b2_619,___awtoft@c
  3498  000628  C12D  F022         	movff	init_operation@b2_619+1,___awtoft@c+1
  3499  00062C  ECF3  F018         	call	___awtoft	;wreg free
  3500  000630  C021  F028         	movff	?___awtoft,___ftdiv@f2
  3501  000634  C022  F029         	movff	?___awtoft+1,___ftdiv@f2+1
  3502  000638  C023  F02A         	movff	?___awtoft+2,___ftdiv@f2+2
  3503  00063C  C12A  F021         	movff	init_operation@r2_617,___awtoft@c
  3504  000640  C12B  F022         	movff	init_operation@r2_617+1,___awtoft@c+1
  3505  000644  ECF3  F018         	call	___awtoft	;wreg free
  3506  000648  C021  F025         	movff	?___awtoft,___ftdiv@f1
  3507  00064C  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  3508  000650  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  3509  000654  ECC1  F013         	call	___ftdiv	;wreg free
  3510  000658  C025  F037         	movff	?___ftdiv,___ftge@ff2
  3511  00065C  C026  F038         	movff	?___ftdiv+1,___ftge@ff2+1
  3512  000660  C027  F039         	movff	?___ftdiv+2,___ftge@ff2+2
  3513  000664  EC9D  F015         	call	___ftge	;wreg free
  3514  000668  B0D8               	btfsc	status,0,c
  3515  00066A  D047               	goto	l5459
  3516  00066C  0101               	movlb	1	; () banked
  3517  00066E  5118               	movf	init_operation@g1_614& (0+255),w,b
  3518  000670  0101               	movlb	1	; () banked
  3519  000672  2526               	addwf	init_operation@r1_613& (0+255),w,b
  3520  000674  0100               	movlb	0	; () banked
  3521  000676  6FF2               	movwf	??_init_operation& (0+255),b
  3522  000678  0101               	movlb	1	; () banked
  3523  00067A  5119               	movf	(init_operation@g1_614+1)& (0+255),w,b
  3524  00067C  0101               	movlb	1	; () banked
  3525  00067E  2127               	addwfc	(init_operation@r1_613+1)& (0+255),w,b
  3526  000680  0100               	movlb	0	; () banked
  3527  000682  6FF3               	movwf	(??_init_operation+1)& (0+255),b
  3528  000684  0101               	movlb	1	; () banked
  3529  000686  5128               	movf	init_operation@b1_615& (0+255),w,b
  3530  000688  0100               	movlb	0	; () banked
  3531  00068A  27F2               	addwf	??_init_operation& (0+255),f,b
  3532  00068C  0101               	movlb	1	; () banked
  3533  00068E  5129               	movf	(init_operation@b1_615+1)& (0+255),w,b
  3534  000690  0100               	movlb	0	; () banked
  3535  000692  23F3               	addwfc	(??_init_operation+1)& (0+255),f,b
  3536  000694  0E39               	movlw	57
  3537  000696  0100               	movlb	0	; () banked
  3538  000698  5DF2               	subwf	??_init_operation& (0+255),w,b
  3539  00069A  0E18               	movlw	24
  3540  00069C  0100               	movlb	0	; () banked
  3541  00069E  59F3               	subwfb	(??_init_operation+1)& (0+255),w,b
  3542  0006A0  A0D8               	btfss	status,0,c
  3543  0006A2  D02B               	goto	l5459
  3544  0006A4                     l5445:
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;main.c: 394: step_state[1] = 1;
  3548  0006A4  0100               	movlb	0	; () banked
  3549  0006A6  EE20 F001          	lfsr	2,1
  3550  0006AA  51F0               	movf	init_operation@step_state& (0+255),w,b
  3551  0006AC  26D9               	addwf	fsr2l,f,c
  3552  0006AE  51F1               	movf	(init_operation@step_state+1)& (0+255),w,b
  3553  0006B0  22DA               	addwfc	fsr2h,f,c
  3554  0006B2  0E01               	movlw	1
  3555  0006B4  6EDF               	movwf	indf2,c
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;main.c: 395: stepper_state(step_state);
  3559  0006B6  C0F0  F01E         	movff	init_operation@step_state,stepper_state@step_state
  3560  0006BA  C0F1  F01F         	movff	init_operation@step_state+1,stepper_state@step_state+1
  3561  0006BE  EC16  F00B         	call	_stepper_state	;wreg free
  3562                           
  3563                           ;main.c: 396: PORTEbits.RE0 = 0;
  3564  0006C2  9084               	bcf	3972,0,c	;volatile
  3565                           
  3566                           ;main.c: 397: bot_count[0] ++;
  3567  0006C4  C0EE  FFD9         	movff	init_operation@bot_count,fsr2l
  3568  0006C8  C0EF  FFDA         	movff	init_operation@bot_count+1,fsr2h
  3569  0006CC  2ADF               	incf	indf2,f,c
  3570                           
  3571                           ;main.c: 398: _delay((unsigned long)((150)*(10000000/4000.0)));
  3572  0006CE  0E02               	movlw	2
  3573  0006D0  0100               	movlb	0	; () banked
  3574  0006D2  6FF3               	movwf	(??_init_operation+1)& (0+255),b
  3575  0006D4  0EE7               	movlw	231
  3576  0006D6  0100               	movlb	0	; () banked
  3577  0006D8  6FF2               	movwf	??_init_operation& (0+255),b
  3578  0006DA  0E00               	movlw	0
  3579  0006DC                     u5637:
  3580  0006DC  2EE8               	decfsz	wreg,f,c
  3581  0006DE  D7FE               	bra	u5637
  3582  0006E0  2FF2               	decfsz	??_init_operation& (0+255),f,b
  3583  0006E2  D7FC               	bra	u5637
  3584  0006E4  2FF3               	decfsz	(??_init_operation+1)& (0+255),f,b
  3585  0006E6  D7FA               	bra	u5637
  3586  0006E8  F000               	nop	
  3587                           
  3588                           ;main.c: 399: PORTEbits.RE0 = 1;
  3589  0006EA  8084               	bsf	3972,0,c	;volatile
  3590                           
  3591                           ;main.c: 400: update_time(detection_time);
  3592  0006EC  0E02               	movlw	low init_operation@detection_time
  3593  0006EE  6E1C               	movwf	update_time@time,c
  3594  0006F0  0E01               	movlw	high init_operation@detection_time
  3595  0006F2  6E1D               	movwf	update_time@time+1,c
  3596  0006F4  EC69  F017         	call	_update_time	;wreg free
  3597                           
  3598                           ;main.c: 401: }
  3599  0006F8  D12B               	goto	l5513
  3600  0006FA                     l5459:
  3601                           
  3602                           ;main.c: 402: else if ((float)b1/(float)r1 > 1.01 || (float)b2/(float)r2 > 1.01){
  3603  0006FA  0E48               	movlw	72
  3604  0006FC  6E34               	movwf	___ftge@ff1,c
  3605  0006FE  0E81               	movlw	129
  3606  000700  6E35               	movwf	___ftge@ff1+1,c
  3607  000702  0E3F               	movlw	63
  3608  000704  6E36               	movwf	___ftge@ff1+2,c
  3609  000706  C126  F021         	movff	init_operation@r1_613,___awtoft@c
  3610  00070A  C127  F022         	movff	init_operation@r1_613+1,___awtoft@c+1
  3611  00070E  ECF3  F018         	call	___awtoft	;wreg free
  3612  000712  C021  F028         	movff	?___awtoft,___ftdiv@f2
  3613  000716  C022  F029         	movff	?___awtoft+1,___ftdiv@f2+1
  3614  00071A  C023  F02A         	movff	?___awtoft+2,___ftdiv@f2+2
  3615  00071E  C128  F021         	movff	init_operation@b1_615,___awtoft@c
  3616  000722  C129  F022         	movff	init_operation@b1_615+1,___awtoft@c+1
  3617  000726  ECF3  F018         	call	___awtoft	;wreg free
  3618  00072A  C021  F025         	movff	?___awtoft,___ftdiv@f1
  3619  00072E  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  3620  000732  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  3621  000736  ECC1  F013         	call	___ftdiv	;wreg free
  3622  00073A  C025  F037         	movff	?___ftdiv,___ftge@ff2
  3623  00073E  C026  F038         	movff	?___ftdiv+1,___ftge@ff2+1
  3624  000742  C027  F039         	movff	?___ftdiv+2,___ftge@ff2+2
  3625  000746  EC9D  F015         	call	___ftge	;wreg free
  3626  00074A  A0D8               	btfss	status,0,c
  3627  00074C  D02A               	goto	l5463
  3628  00074E  0E48               	movlw	72
  3629  000750  6E34               	movwf	___ftge@ff1,c
  3630  000752  0E81               	movlw	129
  3631  000754  6E35               	movwf	___ftge@ff1+1,c
  3632  000756  0E3F               	movlw	63
  3633  000758  6E36               	movwf	___ftge@ff1+2,c
  3634  00075A  C12A  F021         	movff	init_operation@r2_617,___awtoft@c
  3635  00075E  C12B  F022         	movff	init_operation@r2_617+1,___awtoft@c+1
  3636  000762  ECF3  F018         	call	___awtoft	;wreg free
  3637  000766  C021  F028         	movff	?___awtoft,___ftdiv@f2
  3638  00076A  C022  F029         	movff	?___awtoft+1,___ftdiv@f2+1
  3639  00076E  C023  F02A         	movff	?___awtoft+2,___ftdiv@f2+2
  3640  000772  C12C  F021         	movff	init_operation@b2_619,___awtoft@c
  3641  000776  C12D  F022         	movff	init_operation@b2_619+1,___awtoft@c+1
  3642  00077A  ECF3  F018         	call	___awtoft	;wreg free
  3643  00077E  C021  F025         	movff	?___awtoft,___ftdiv@f1
  3644  000782  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  3645  000786  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  3646  00078A  ECC1  F013         	call	___ftdiv	;wreg free
  3647  00078E  C025  F037         	movff	?___ftdiv,___ftge@ff2
  3648  000792  C026  F038         	movff	?___ftdiv+1,___ftge@ff2+1
  3649  000796  C027  F039         	movff	?___ftdiv+2,___ftge@ff2+2
  3650  00079A  EC9D  F015         	call	___ftge	;wreg free
  3651  00079E  B0D8               	btfsc	status,0,c
  3652  0007A0  D02E               	goto	l5477
  3653  0007A2                     l5463:
  3654                           
  3655                           ;main.c: 403: step_state[1] = 3;
  3656  0007A2  0100               	movlb	0	; () banked
  3657  0007A4  EE20 F001          	lfsr	2,1
  3658  0007A8  51F0               	movf	init_operation@step_state& (0+255),w,b
  3659  0007AA  26D9               	addwf	fsr2l,f,c
  3660  0007AC  51F1               	movf	(init_operation@step_state+1)& (0+255),w,b
  3661  0007AE  22DA               	addwfc	fsr2h,f,c
  3662  0007B0  0E03               	movlw	3
  3663  0007B2  6EDF               	movwf	indf2,c
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;main.c: 404: stepper_state(step_state);
  3667  0007B4  C0F0  F01E         	movff	init_operation@step_state,stepper_state@step_state
  3668  0007B8  C0F1  F01F         	movff	init_operation@step_state+1,stepper_state@step_state+1
  3669  0007BC  EC16  F00B         	call	_stepper_state	;wreg free
  3670                           
  3671                           ;main.c: 405: PORTEbits.RE0 = 0;
  3672  0007C0  9084               	bcf	3972,0,c	;volatile
  3673                           
  3674                           ;main.c: 406: bot_count[2] ++;
  3675  0007C2  0100               	movlb	0	; () banked
  3676  0007C4  EE20 F002          	lfsr	2,2
  3677  0007C8  51EE               	movf	init_operation@bot_count& (0+255),w,b
  3678  0007CA  26D9               	addwf	fsr2l,f,c
  3679  0007CC  51EF               	movf	(init_operation@bot_count+1)& (0+255),w,b
  3680  0007CE  22DA               	addwfc	fsr2h,f,c
  3681  0007D0  2ADF               	incf	indf2,f,c
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;main.c: 407: _delay((unsigned long)((150)*(10000000/4000.0)));
  3685  0007D2  0E02               	movlw	2
  3686  0007D4  0100               	movlb	0	; () banked
  3687  0007D6  6FF3               	movwf	(??_init_operation+1)& (0+255),b
  3688  0007D8  0EE7               	movlw	231
  3689  0007DA  0100               	movlb	0	; () banked
  3690  0007DC  6FF2               	movwf	??_init_operation& (0+255),b
  3691  0007DE  0E00               	movlw	0
  3692  0007E0                     u5647:
  3693  0007E0  2EE8               	decfsz	wreg,f,c
  3694  0007E2  D7FE               	bra	u5647
  3695  0007E4  2FF2               	decfsz	??_init_operation& (0+255),f,b
  3696  0007E6  D7FC               	bra	u5647
  3697  0007E8  2FF3               	decfsz	(??_init_operation+1)& (0+255),f,b
  3698  0007EA  D7FA               	bra	u5647
  3699  0007EC  F000               	nop	
  3700                           
  3701                           ;main.c: 408: PORTEbits.RE0 = 1;
  3702  0007EE  8084               	bsf	3972,0,c	;volatile
  3703                           
  3704                           ;main.c: 409: update_time(detection_time);
  3705  0007F0  0E02               	movlw	low init_operation@detection_time
  3706  0007F2  6E1C               	movwf	update_time@time,c
  3707  0007F4  0E01               	movlw	high init_operation@detection_time
  3708  0007F6  6E1D               	movwf	update_time@time+1,c
  3709  0007F8  EC69  F017         	call	_update_time	;wreg free
  3710                           
  3711                           ;main.c: 410: }
  3712  0007FC  D0A9               	goto	l5513
  3713  0007FE                     l5477:
  3714                           
  3715                           ;main.c: 412: else if ((unsigned int)(r1+g1+b1) > 6800 || (unsigned int)(r2+g2+b2) > 650
      +                          0){
  3716  0007FE  0101               	movlb	1	; () banked
  3717  000800  5118               	movf	init_operation@g1_614& (0+255),w,b
  3718  000802  0101               	movlb	1	; () banked
  3719  000804  2526               	addwf	init_operation@r1_613& (0+255),w,b
  3720  000806  0100               	movlb	0	; () banked
  3721  000808  6FF2               	movwf	??_init_operation& (0+255),b
  3722  00080A  0101               	movlb	1	; () banked
  3723  00080C  5119               	movf	(init_operation@g1_614+1)& (0+255),w,b
  3724  00080E  0101               	movlb	1	; () banked
  3725  000810  2127               	addwfc	(init_operation@r1_613+1)& (0+255),w,b
  3726  000812  0100               	movlb	0	; () banked
  3727  000814  6FF3               	movwf	(??_init_operation+1)& (0+255),b
  3728  000816  0101               	movlb	1	; () banked
  3729  000818  5128               	movf	init_operation@b1_615& (0+255),w,b
  3730  00081A  0100               	movlb	0	; () banked
  3731  00081C  27F2               	addwf	??_init_operation& (0+255),f,b
  3732  00081E  0101               	movlb	1	; () banked
  3733  000820  5129               	movf	(init_operation@b1_615+1)& (0+255),w,b
  3734  000822  0100               	movlb	0	; () banked
  3735  000824  23F3               	addwfc	(??_init_operation+1)& (0+255),f,b
  3736  000826  0E91               	movlw	145
  3737  000828  0100               	movlb	0	; () banked
  3738  00082A  5DF2               	subwf	??_init_operation& (0+255),w,b
  3739  00082C  0E1A               	movlw	26
  3740  00082E  0100               	movlb	0	; () banked
  3741  000830  59F3               	subwfb	(??_init_operation+1)& (0+255),w,b
  3742  000832  B0D8               	btfsc	status,0,c
  3743  000834  D01C               	goto	l5481
  3744                           
  3745                           ; BSR set to: 0
  3746  000836  0101               	movlb	1	; () banked
  3747  000838  511A               	movf	init_operation@g2_618& (0+255),w,b
  3748  00083A  0101               	movlb	1	; () banked
  3749  00083C  252A               	addwf	init_operation@r2_617& (0+255),w,b
  3750  00083E  0100               	movlb	0	; () banked
  3751  000840  6FF2               	movwf	??_init_operation& (0+255),b
  3752  000842  0101               	movlb	1	; () banked
  3753  000844  511B               	movf	(init_operation@g2_618+1)& (0+255),w,b
  3754  000846  0101               	movlb	1	; () banked
  3755  000848  212B               	addwfc	(init_operation@r2_617+1)& (0+255),w,b
  3756  00084A  0100               	movlb	0	; () banked
  3757  00084C  6FF3               	movwf	(??_init_operation+1)& (0+255),b
  3758  00084E  0101               	movlb	1	; () banked
  3759  000850  512C               	movf	init_operation@b2_619& (0+255),w,b
  3760  000852  0100               	movlb	0	; () banked
  3761  000854  27F2               	addwf	??_init_operation& (0+255),f,b
  3762  000856  0101               	movlb	1	; () banked
  3763  000858  512D               	movf	(init_operation@b2_619+1)& (0+255),w,b
  3764  00085A  0100               	movlb	0	; () banked
  3765  00085C  23F3               	addwfc	(??_init_operation+1)& (0+255),f,b
  3766  00085E  0E65               	movlw	101
  3767  000860  0100               	movlb	0	; () banked
  3768  000862  5DF2               	subwf	??_init_operation& (0+255),w,b
  3769  000864  0E19               	movlw	25
  3770  000866  0100               	movlb	0	; () banked
  3771  000868  59F3               	subwfb	(??_init_operation+1)& (0+255),w,b
  3772  00086A  A0D8               	btfss	status,0,c
  3773  00086C  D02E               	goto	l5495
  3774  00086E                     l5481:
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;main.c: 413: step_state[1] = 2;
  3778  00086E  0100               	movlb	0	; () banked
  3779  000870  EE20 F001          	lfsr	2,1
  3780  000874  51F0               	movf	init_operation@step_state& (0+255),w,b
  3781  000876  26D9               	addwf	fsr2l,f,c
  3782  000878  51F1               	movf	(init_operation@step_state+1)& (0+255),w,b
  3783  00087A  22DA               	addwfc	fsr2h,f,c
  3784  00087C  0E02               	movlw	2
  3785  00087E  6EDF               	movwf	indf2,c
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;main.c: 414: stepper_state(step_state);
  3789  000880  C0F0  F01E         	movff	init_operation@step_state,stepper_state@step_state
  3790  000884  C0F1  F01F         	movff	init_operation@step_state+1,stepper_state@step_state+1
  3791  000888  EC16  F00B         	call	_stepper_state	;wreg free
  3792                           
  3793                           ;main.c: 415: PORTEbits.RE0 = 0;
  3794  00088C  9084               	bcf	3972,0,c	;volatile
  3795                           
  3796                           ;main.c: 416: bot_count[1] ++;
  3797  00088E  0100               	movlb	0	; () banked
  3798  000890  EE20 F001          	lfsr	2,1
  3799  000894  51EE               	movf	init_operation@bot_count& (0+255),w,b
  3800  000896  26D9               	addwf	fsr2l,f,c
  3801  000898  51EF               	movf	(init_operation@bot_count+1)& (0+255),w,b
  3802  00089A  22DA               	addwfc	fsr2h,f,c
  3803  00089C  2ADF               	incf	indf2,f,c
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;main.c: 417: _delay((unsigned long)((150)*(10000000/4000.0)));
  3807  00089E  0E02               	movlw	2
  3808  0008A0  0100               	movlb	0	; () banked
  3809  0008A2  6FF3               	movwf	(??_init_operation+1)& (0+255),b
  3810  0008A4  0EE7               	movlw	231
  3811  0008A6  0100               	movlb	0	; () banked
  3812  0008A8  6FF2               	movwf	??_init_operation& (0+255),b
  3813  0008AA  0E00               	movlw	0
  3814  0008AC                     u5657:
  3815  0008AC  2EE8               	decfsz	wreg,f,c
  3816  0008AE  D7FE               	bra	u5657
  3817  0008B0  2FF2               	decfsz	??_init_operation& (0+255),f,b
  3818  0008B2  D7FC               	bra	u5657
  3819  0008B4  2FF3               	decfsz	(??_init_operation+1)& (0+255),f,b
  3820  0008B6  D7FA               	bra	u5657
  3821  0008B8  F000               	nop	
  3822                           
  3823                           ;main.c: 418: PORTEbits.RE0 = 1;
  3824  0008BA  8084               	bsf	3972,0,c	;volatile
  3825                           
  3826                           ;main.c: 419: update_time(detection_time);
  3827  0008BC  0E02               	movlw	low init_operation@detection_time
  3828  0008BE  6E1C               	movwf	update_time@time,c
  3829  0008C0  0E01               	movlw	high init_operation@detection_time
  3830  0008C2  6E1D               	movwf	update_time@time+1,c
  3831  0008C4  EC69  F017         	call	_update_time	;wreg free
  3832                           
  3833                           ;main.c: 420: }
  3834  0008C8  D043               	goto	l5513
  3835  0008CA                     l5495:
  3836                           
  3837                           ;main.c: 422: else if ((c1 > 2550 || c2 > 3400)){
  3838  0008CA  0101               	movlb	1	; () banked
  3839  0008CC  BF13               	btfsc	(init_operation@c1_616+1)& (0+255),7,b
  3840  0008CE  D008               	goto	l5497
  3841  0008D0  0EF7               	movlw	247
  3842  0008D2  0101               	movlb	1	; () banked
  3843  0008D4  5D12               	subwf	init_operation@c1_616& (0+255),w,b
  3844  0008D6  0E09               	movlw	9
  3845  0008D8  0101               	movlb	1	; () banked
  3846  0008DA  5913               	subwfb	(init_operation@c1_616+1)& (0+255),w,b
  3847  0008DC  B0D8               	btfsc	status,0,c
  3848  0008DE  D00B               	goto	l5499
  3849  0008E0                     l5497:
  3850                           
  3851                           ; BSR set to: 1
  3852  0008E0  0101               	movlb	1	; () banked
  3853  0008E2  BF15               	btfsc	(init_operation@c2_620+1)& (0+255),7,b
  3854  0008E4  D035               	goto	l5513
  3855  0008E6  0E49               	movlw	73
  3856  0008E8  0101               	movlb	1	; () banked
  3857  0008EA  5D14               	subwf	init_operation@c2_620& (0+255),w,b
  3858  0008EC  0E0D               	movlw	13
  3859  0008EE  0101               	movlb	1	; () banked
  3860  0008F0  5915               	subwfb	(init_operation@c2_620+1)& (0+255),w,b
  3861  0008F2  A0D8               	btfss	status,0,c
  3862  0008F4  D02D               	goto	l5513
  3863  0008F6                     l5499:
  3864                           
  3865                           ; BSR set to: 1
  3866                           ;main.c: 423: step_state[1] = 4;
  3867  0008F6  0100               	movlb	0	; () banked
  3868  0008F8  EE20 F001          	lfsr	2,1
  3869  0008FC  51F0               	movf	init_operation@step_state& (0+255),w,b
  3870  0008FE  26D9               	addwf	fsr2l,f,c
  3871  000900  51F1               	movf	(init_operation@step_state+1)& (0+255),w,b
  3872  000902  22DA               	addwfc	fsr2h,f,c
  3873  000904  0E04               	movlw	4
  3874  000906  6EDF               	movwf	indf2,c
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;main.c: 424: stepper_state(step_state);
  3878  000908  C0F0  F01E         	movff	init_operation@step_state,stepper_state@step_state
  3879  00090C  C0F1  F01F         	movff	init_operation@step_state+1,stepper_state@step_state+1
  3880  000910  EC16  F00B         	call	_stepper_state	;wreg free
  3881                           
  3882                           ;main.c: 425: PORTEbits.RE0 = 0;
  3883  000914  9084               	bcf	3972,0,c	;volatile
  3884                           
  3885                           ;main.c: 426: bot_count[3] ++;
  3886  000916  0100               	movlb	0	; () banked
  3887  000918  EE20 F003          	lfsr	2,3
  3888  00091C  51EE               	movf	init_operation@bot_count& (0+255),w,b
  3889  00091E  26D9               	addwf	fsr2l,f,c
  3890  000920  51EF               	movf	(init_operation@bot_count+1)& (0+255),w,b
  3891  000922  22DA               	addwfc	fsr2h,f,c
  3892  000924  2ADF               	incf	indf2,f,c
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;main.c: 427: _delay((unsigned long)((150)*(10000000/4000.0)));
  3896  000926  0E02               	movlw	2
  3897  000928  0100               	movlb	0	; () banked
  3898  00092A  6FF3               	movwf	(??_init_operation+1)& (0+255),b
  3899  00092C  0EE7               	movlw	231
  3900  00092E  0100               	movlb	0	; () banked
  3901  000930  6FF2               	movwf	??_init_operation& (0+255),b
  3902  000932  0E00               	movlw	0
  3903  000934                     u5667:
  3904  000934  2EE8               	decfsz	wreg,f,c
  3905  000936  D7FE               	bra	u5667
  3906  000938  2FF2               	decfsz	??_init_operation& (0+255),f,b
  3907  00093A  D7FC               	bra	u5667
  3908  00093C  2FF3               	decfsz	(??_init_operation+1)& (0+255),f,b
  3909  00093E  D7FA               	bra	u5667
  3910  000940  F000               	nop	
  3911                           
  3912                           ;main.c: 428: PORTEbits.RE0 = 1;
  3913  000942  8084               	bsf	3972,0,c	;volatile
  3914                           
  3915                           ;main.c: 429: update_time(detection_time);
  3916  000944  0E02               	movlw	low init_operation@detection_time
  3917  000946  6E1C               	movwf	update_time@time,c
  3918  000948  0E01               	movlw	high init_operation@detection_time
  3919  00094A  6E1D               	movwf	update_time@time+1,c
  3920  00094C  EC69  F017         	call	_update_time	;wreg free
  3921  000950                     l5513:
  3922                           
  3923                           ;main.c: 430: }
  3924                           ;main.c: 431: PORTEbits.RE1 = 1;
  3925  000950  8284               	bsf	3972,1,c	;volatile
  3926  000952                     l5515:
  3927                           
  3928                           ;main.c: 432: }
  3929                           ;main.c: 433: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3930  000952  0E0D               	movlw	13
  3931  000954  0100               	movlb	0	; () banked
  3932  000956  6FF3               	movwf	(??_init_operation+1)& (0+255),b
  3933  000958  0EAF               	movlw	175
  3934  00095A  0100               	movlb	0	; () banked
  3935  00095C  6FF2               	movwf	??_init_operation& (0+255),b
  3936  00095E  0EB6               	movlw	182
  3937  000960                     u5677:
  3938  000960  2EE8               	decfsz	wreg,f,c
  3939  000962  D7FE               	bra	u5677
  3940  000964  2FF2               	decfsz	??_init_operation& (0+255),f,b
  3941  000966  D7FC               	bra	u5677
  3942  000968  2FF3               	decfsz	(??_init_operation+1)& (0+255),f,b
  3943  00096A  D7FA               	bra	u5677
  3944  00096C  F000               	nop	
  3945  00096E                     l5517:
  3946  00096E  0E02               	movlw	2
  3947  000970  0101               	movlb	1	; () banked
  3948  000972  1955               	xorwf	_curr_state& (0+255),w,b
  3949  000974  B4D8               	btfsc	status,2,c
  3950  000976  D019               	goto	l5521
  3951                           
  3952                           ; BSR set to: 1
  3953  000978  C0EC  F0B6         	movff	init_operation@time,time_difference@time1
  3954  00097C  C0ED  F0B7         	movff	init_operation@time+1,time_difference@time1+1
  3955  000980  0E02               	movlw	low init_operation@detection_time
  3956  000982  0100               	movlb	0	; () banked
  3957  000984  6FB8               	movwf	time_difference@time2& (0+255),b
  3958  000986  0E01               	movlw	high init_operation@detection_time
  3959  000988  0100               	movlb	0	; () banked
  3960  00098A  6FB9               	movwf	(time_difference@time2+1)& (0+255),b
  3961  00098C  ECE8  F00C         	call	_time_difference	;wreg free
  3962  000990  0100               	movlb	0	; () banked
  3963  000992  BFB7               	btfsc	(?_time_difference+1)& (0+255),7,b
  3964  000994  EF59  F000         	goto	l5371
  3965  000998  0100               	movlb	0	; () banked
  3966  00099A  51B7               	movf	(?_time_difference+1)& (0+255),w,b
  3967  00099C  E106               	bnz	l5521
  3968  00099E  0E14               	movlw	20
  3969  0009A0  0100               	movlb	0	; () banked
  3970  0009A2  5DB6               	subwf	?_time_difference& (0+255),w,b
  3971  0009A4  A0D8               	btfss	status,0,c
  3972  0009A6  EF59  F000         	goto	l5371
  3973  0009AA                     l5521:
  3974                           
  3975                           ;main.c: 434: }
  3976                           ;main.c: 435: curr_state = OPERATION_END;
  3977  0009AA  0E02               	movlw	2
  3978  0009AC  0101               	movlb	1	; () banked
  3979  0009AE  6F55               	movwf	_curr_state& (0+255),b
  3980                           
  3981                           ; BSR set to: 1
  3982  0009B0  0012               	return		;funcret
  3983  0009B2                     __end_of_init_operation:
  3984                           	opt stack 0
  3985                           tblptru	equ	0xFF8
  3986                           tblptrh	equ	0xFF7
  3987                           tblptrl	equ	0xFF6
  3988                           tablat	equ	0xFF5
  3989                           intcon	equ	0xFF2
  3990                           intcon2	equ	0xFF1
  3991                           intcon3	equ	0xFF0
  3992                           postinc0	equ	0xFEE
  3993                           wreg	equ	0xFE8
  3994                           postdec1	equ	0xFE5
  3995                           fsr1l	equ	0xFE1
  3996                           indf2	equ	0xFDF
  3997                           fsr2h	equ	0xFDA
  3998                           fsr2l	equ	0xFD9
  3999                           status	equ	0xFD8
  4000                           
  4001 ;; *************** function _update_time *****************
  4002 ;; Defined at:
  4003 ;;		line 263 in file "main.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  time            2   27[COMRAM] PTR unsigned char 
  4006 ;;		 -> init_operation@detection_time(7), main@end_time(7), main@time(7), main@start_time(7), 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  i               1   29[COMRAM] unsigned char 
  4009 ;; Return value:  Size  Location     Type
  4010 ;;                  1    wreg      void 
  4011 ;; Registers used:
  4012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4018 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4019 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;Total ram usage:        3 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; Hardware stack levels required when called:    4
  4025 ;; This function calls:
  4026 ;;		_I2C_Master_Read
  4027 ;;		_I2C_Master_Start
  4028 ;;		_I2C_Master_Stop
  4029 ;;		_I2C_Master_Write
  4030 ;; This function is called by:
  4031 ;;		_main
  4032 ;;		_init_operation
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text4
  4037  002ED2                     __ptext4:
  4038                           	opt stack 0
  4039  002ED2                     _update_time:
  4040                           	opt stack 26
  4041                           
  4042                           ;main.c: 264: I2C_Master_Start();
  4043                           
  4044                           ; BSR set to: 1
  4045                           ;incstack = 0
  4046  002ED2  ECB8  F019         	call	_I2C_Master_Start	;wreg free
  4047                           
  4048                           ;main.c: 265: I2C_Master_Write(0b11010000);
  4049  002ED6  0E00               	movlw	0
  4050  002ED8  6E1B               	movwf	I2C_Master_Write@d+1,c
  4051  002EDA  0ED0               	movlw	208
  4052  002EDC  6E1A               	movwf	I2C_Master_Write@d,c
  4053  002EDE  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  4054                           
  4055                           ;main.c: 266: I2C_Master_Write(0x00);
  4056  002EE2  0E00               	movlw	0
  4057  002EE4  6E1B               	movwf	I2C_Master_Write@d+1,c
  4058  002EE6  0E00               	movlw	0
  4059  002EE8  6E1A               	movwf	I2C_Master_Write@d,c
  4060  002EEA  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  4061                           
  4062                           ;main.c: 267: I2C_Master_Stop();
  4063  002EEE  ECB4  F019         	call	_I2C_Master_Stop	;wreg free
  4064                           
  4065                           ;main.c: 270: I2C_Master_Start();
  4066  002EF2  ECB8  F019         	call	_I2C_Master_Start	;wreg free
  4067                           
  4068                           ;main.c: 271: I2C_Master_Write(0b11010001);
  4069  002EF6  0E00               	movlw	0
  4070  002EF8  6E1B               	movwf	I2C_Master_Write@d+1,c
  4071  002EFA  0ED1               	movlw	209
  4072  002EFC  6E1A               	movwf	I2C_Master_Write@d,c
  4073  002EFE  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  4074                           
  4075                           ;main.c: 272: for(unsigned char i=0;i<0x06;i++){
  4076  002F02  0E00               	movlw	0
  4077  002F04  6E1E               	movwf	update_time@i,c
  4078  002F06                     l5267:
  4079  002F06  0E05               	movlw	5
  4080  002F08  641E               	cpfsgt	update_time@i,c
  4081  002F0A  D001               	goto	l5271
  4082  002F0C  D00E               	goto	l5277
  4083  002F0E                     l5271:
  4084                           
  4085                           ;main.c: 273: time[i] = I2C_Master_Read(1);
  4086  002F0E  501E               	movf	update_time@i,w,c
  4087  002F10  0D01               	mullw	1
  4088  002F12  50F3               	movf	prodl,w,c
  4089  002F14  241C               	addwf	update_time@time,w,c
  4090  002F16  6ED9               	movwf	fsr2l,c
  4091  002F18  50F4               	movf	prodh,w,c
  4092  002F1A  201D               	addwfc	update_time@time+1,w,c
  4093  002F1C  6EDA               	movwf	fsr2h,c
  4094  002F1E  0E01               	movlw	1
  4095  002F20  EC22  F019         	call	_I2C_Master_Read
  4096  002F24  6EDF               	movwf	indf2,c
  4097  002F26  2A1E               	incf	update_time@i,f,c
  4098  002F28  D7EE               	goto	l5267
  4099  002F2A                     l5277:
  4100                           
  4101                           ;main.c: 274: }
  4102                           ;main.c: 275: time[6] = I2C_Master_Read(0);
  4103  002F2A  EE20 F006          	lfsr	2,6
  4104  002F2E  501C               	movf	update_time@time,w,c
  4105  002F30  26D9               	addwf	fsr2l,f,c
  4106  002F32  501D               	movf	update_time@time+1,w,c
  4107  002F34  22DA               	addwfc	fsr2h,f,c
  4108  002F36  0E00               	movlw	0
  4109  002F38  EC22  F019         	call	_I2C_Master_Read
  4110  002F3C  6EDF               	movwf	indf2,c
  4111                           
  4112                           ;main.c: 276: I2C_Master_Stop();
  4113  002F3E  ECB4  F019         	call	_I2C_Master_Stop	;wreg free
  4114  002F42  0012               	return		;funcret
  4115  002F44                     __end_of_update_time:
  4116                           	opt stack 0
  4117                           tblptru	equ	0xFF8
  4118                           tblptrh	equ	0xFF7
  4119                           tblptrl	equ	0xFF6
  4120                           tablat	equ	0xFF5
  4121                           prodh	equ	0xFF4
  4122                           prodl	equ	0xFF3
  4123                           intcon	equ	0xFF2
  4124                           intcon2	equ	0xFF1
  4125                           intcon3	equ	0xFF0
  4126                           postinc0	equ	0xFEE
  4127                           wreg	equ	0xFE8
  4128                           postdec1	equ	0xFE5
  4129                           fsr1l	equ	0xFE1
  4130                           indf2	equ	0xFDF
  4131                           fsr2h	equ	0xFDA
  4132                           fsr2l	equ	0xFD9
  4133                           status	equ	0xFD8
  4134                           
  4135 ;; *************** function _time_difference *****************
  4136 ;; Defined at:
  4137 ;;		line 318 in file "main.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  time1           2   54[BANK0 ] PTR unsigned char 
  4140 ;;		 -> main@end_time(7), main@time(7), 
  4141 ;;  time2           2   56[BANK0 ] PTR unsigned char 
  4142 ;;		 -> init_operation@detection_time(7), main@start_time(7), 
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;  d3              2   76[BANK0 ] int 
  4145 ;;  d2              2   74[BANK0 ] int 
  4146 ;;  d1              2   72[BANK0 ] int 
  4147 ;;  s2              2   70[BANK0 ] int 
  4148 ;;  s1              2   68[BANK0 ] int 
  4149 ;;  min2            2   66[BANK0 ] int 
  4150 ;;  min1            2   64[BANK0 ] int 
  4151 ;;  hr2             2   62[BANK0 ] int 
  4152 ;;  hr1             2   60[BANK0 ] int 
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  2   54[BANK0 ] int 
  4155 ;; Registers used:
  4156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4162 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;Total ram usage:       24 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; Hardware stack levels required when called:    8
  4169 ;; This function calls:
  4170 ;;		___wmul
  4171 ;;		_dec_to_hex
  4172 ;; This function is called by:
  4173 ;;		_init_operation
  4174 ;;		_runtime
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           	psect	text5
  4179  0019D0                     __ptext5:
  4180                           	opt stack 0
  4181  0019D0                     _time_difference:
  4182                           	opt stack 21
  4183                           
  4184                           ;main.c: 319: int hr1, hr2, min1, min2, s1, s2;
  4185                           ;main.c: 320: int d1, d2, d3;
  4186                           ;main.c: 321: hr1 = time1[2]; hr2 = time2[2]; min1 = time1[1]; min2 = time2[1];
  4187                           
  4188                           ;incstack = 0
  4189  0019D0  0100               	movlb	0	; () banked
  4190  0019D2  EE20 F002          	lfsr	2,2
  4191  0019D6  51B6               	movf	time_difference@time1& (0+255),w,b
  4192  0019D8  26D9               	addwf	fsr2l,f,c
  4193  0019DA  51B7               	movf	(time_difference@time1+1)& (0+255),w,b
  4194  0019DC  22DA               	addwfc	fsr2h,f,c
  4195  0019DE  50DF               	movf	indf2,w,c
  4196  0019E0  0100               	movlb	0	; () banked
  4197  0019E2  6FBA               	movwf	??_time_difference& (0+255),b
  4198  0019E4  0100               	movlb	0	; () banked
  4199  0019E6  51BA               	movf	??_time_difference& (0+255),w,b
  4200  0019E8  0100               	movlb	0	; () banked
  4201  0019EA  6FBC               	movwf	time_difference@hr1& (0+255),b
  4202  0019EC  6BBD               	clrf	(time_difference@hr1+1)& (0+255),b
  4203  0019EE  0100               	movlb	0	; () banked
  4204  0019F0  EE20 F002          	lfsr	2,2
  4205  0019F4  51B8               	movf	time_difference@time2& (0+255),w,b
  4206  0019F6  26D9               	addwf	fsr2l,f,c
  4207  0019F8  51B9               	movf	(time_difference@time2+1)& (0+255),w,b
  4208  0019FA  22DA               	addwfc	fsr2h,f,c
  4209  0019FC  50DF               	movf	indf2,w,c
  4210  0019FE  0100               	movlb	0	; () banked
  4211  001A00  6FBA               	movwf	??_time_difference& (0+255),b
  4212  001A02  0100               	movlb	0	; () banked
  4213  001A04  51BA               	movf	??_time_difference& (0+255),w,b
  4214  001A06  0100               	movlb	0	; () banked
  4215  001A08  6FBE               	movwf	time_difference@hr2& (0+255),b
  4216  001A0A  6BBF               	clrf	(time_difference@hr2+1)& (0+255),b
  4217  001A0C  0100               	movlb	0	; () banked
  4218  001A0E  EE20 F001          	lfsr	2,1
  4219  001A12  51B6               	movf	time_difference@time1& (0+255),w,b
  4220  001A14  26D9               	addwf	fsr2l,f,c
  4221  001A16  51B7               	movf	(time_difference@time1+1)& (0+255),w,b
  4222  001A18  22DA               	addwfc	fsr2h,f,c
  4223  001A1A  50DF               	movf	indf2,w,c
  4224  001A1C  0100               	movlb	0	; () banked
  4225  001A1E  6FBA               	movwf	??_time_difference& (0+255),b
  4226  001A20  0100               	movlb	0	; () banked
  4227  001A22  51BA               	movf	??_time_difference& (0+255),w,b
  4228  001A24  0100               	movlb	0	; () banked
  4229  001A26  6FC0               	movwf	time_difference@min1& (0+255),b
  4230  001A28  6BC1               	clrf	(time_difference@min1+1)& (0+255),b
  4231  001A2A  0100               	movlb	0	; () banked
  4232  001A2C  EE20 F001          	lfsr	2,1
  4233  001A30  51B8               	movf	time_difference@time2& (0+255),w,b
  4234  001A32  26D9               	addwf	fsr2l,f,c
  4235  001A34  51B9               	movf	(time_difference@time2+1)& (0+255),w,b
  4236  001A36  22DA               	addwfc	fsr2h,f,c
  4237  001A38  50DF               	movf	indf2,w,c
  4238  001A3A  0100               	movlb	0	; () banked
  4239  001A3C  6FBA               	movwf	??_time_difference& (0+255),b
  4240  001A3E  0100               	movlb	0	; () banked
  4241  001A40  51BA               	movf	??_time_difference& (0+255),w,b
  4242  001A42  0100               	movlb	0	; () banked
  4243  001A44  6FC2               	movwf	time_difference@min2& (0+255),b
  4244  001A46  6BC3               	clrf	(time_difference@min2+1)& (0+255),b
  4245                           
  4246                           ;main.c: 322: s1 = time1[0]; s2 = time2[0];
  4247  001A48  C0B6  FFD9         	movff	time_difference@time1,fsr2l
  4248  001A4C  C0B7  FFDA         	movff	time_difference@time1+1,fsr2h
  4249  001A50  50DF               	movf	indf2,w,c
  4250  001A52  0100               	movlb	0	; () banked
  4251  001A54  6FBA               	movwf	??_time_difference& (0+255),b
  4252  001A56  0100               	movlb	0	; () banked
  4253  001A58  51BA               	movf	??_time_difference& (0+255),w,b
  4254  001A5A  0100               	movlb	0	; () banked
  4255  001A5C  6FC4               	movwf	time_difference@s1& (0+255),b
  4256  001A5E  6BC5               	clrf	(time_difference@s1+1)& (0+255),b
  4257  001A60  C0B8  FFD9         	movff	time_difference@time2,fsr2l
  4258  001A64  C0B9  FFDA         	movff	time_difference@time2+1,fsr2h
  4259  001A68  50DF               	movf	indf2,w,c
  4260  001A6A  0100               	movlb	0	; () banked
  4261  001A6C  6FBA               	movwf	??_time_difference& (0+255),b
  4262  001A6E  0100               	movlb	0	; () banked
  4263  001A70  51BA               	movf	??_time_difference& (0+255),w,b
  4264  001A72  0100               	movlb	0	; () banked
  4265  001A74  6FC6               	movwf	time_difference@s2& (0+255),b
  4266  001A76  6BC7               	clrf	(time_difference@s2+1)& (0+255),b
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;main.c: 324: d1 = dec_to_hex(hr1) - dec_to_hex(hr2);
  4270  001A78  C0BC  F0A6         	movff	time_difference@hr1,dec_to_hex@num
  4271  001A7C  C0BD  F0A7         	movff	time_difference@hr1+1,dec_to_hex@num+1
  4272  001A80  ECCB  F011         	call	_dec_to_hex	;wreg free
  4273  001A84  C0A6  F0BA         	movff	?_dec_to_hex,??_time_difference
  4274  001A88  C0A7  F0BB         	movff	?_dec_to_hex+1,??_time_difference+1
  4275  001A8C  C0BE  F0A6         	movff	time_difference@hr2,dec_to_hex@num
  4276  001A90  C0BF  F0A7         	movff	time_difference@hr2+1,dec_to_hex@num+1
  4277  001A94  ECCB  F011         	call	_dec_to_hex	;wreg free
  4278  001A98  0100               	movlb	0	; () banked
  4279  001A9A  1FA6               	comf	?_dec_to_hex& (0+255),f,b
  4280  001A9C  0100               	movlb	0	; () banked
  4281  001A9E  1FA7               	comf	(?_dec_to_hex+1)& (0+255),f,b
  4282  001AA0  0100               	movlb	0	; () banked
  4283  001AA2  4BA6               	infsnz	?_dec_to_hex& (0+255),f,b
  4284  001AA4  2BA7               	incf	(?_dec_to_hex+1)& (0+255),f,b
  4285  001AA6  0100               	movlb	0	; () banked
  4286  001AA8  51A6               	movf	?_dec_to_hex& (0+255),w,b
  4287  001AAA  0100               	movlb	0	; () banked
  4288  001AAC  25BA               	addwf	??_time_difference& (0+255),w,b
  4289  001AAE  0100               	movlb	0	; () banked
  4290  001AB0  6FC8               	movwf	time_difference@d1& (0+255),b
  4291  001AB2  0100               	movlb	0	; () banked
  4292  001AB4  51A7               	movf	(?_dec_to_hex+1)& (0+255),w,b
  4293  001AB6  0100               	movlb	0	; () banked
  4294  001AB8  21BB               	addwfc	(??_time_difference+1)& (0+255),w,b
  4295  001ABA  0100               	movlb	0	; () banked
  4296  001ABC  6FC9               	movwf	(time_difference@d1+1)& (0+255),b
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;main.c: 325: d2 = dec_to_hex(min1) - dec_to_hex(min2);
  4300  001ABE  C0C0  F0A6         	movff	time_difference@min1,dec_to_hex@num
  4301  001AC2  C0C1  F0A7         	movff	time_difference@min1+1,dec_to_hex@num+1
  4302  001AC6  ECCB  F011         	call	_dec_to_hex	;wreg free
  4303  001ACA  C0A6  F0BA         	movff	?_dec_to_hex,??_time_difference
  4304  001ACE  C0A7  F0BB         	movff	?_dec_to_hex+1,??_time_difference+1
  4305  001AD2  C0C2  F0A6         	movff	time_difference@min2,dec_to_hex@num
  4306  001AD6  C0C3  F0A7         	movff	time_difference@min2+1,dec_to_hex@num+1
  4307  001ADA  ECCB  F011         	call	_dec_to_hex	;wreg free
  4308  001ADE  0100               	movlb	0	; () banked
  4309  001AE0  1FA6               	comf	?_dec_to_hex& (0+255),f,b
  4310  001AE2  0100               	movlb	0	; () banked
  4311  001AE4  1FA7               	comf	(?_dec_to_hex+1)& (0+255),f,b
  4312  001AE6  0100               	movlb	0	; () banked
  4313  001AE8  4BA6               	infsnz	?_dec_to_hex& (0+255),f,b
  4314  001AEA  2BA7               	incf	(?_dec_to_hex+1)& (0+255),f,b
  4315  001AEC  0100               	movlb	0	; () banked
  4316  001AEE  51A6               	movf	?_dec_to_hex& (0+255),w,b
  4317  001AF0  0100               	movlb	0	; () banked
  4318  001AF2  25BA               	addwf	??_time_difference& (0+255),w,b
  4319  001AF4  0100               	movlb	0	; () banked
  4320  001AF6  6FCA               	movwf	time_difference@d2& (0+255),b
  4321  001AF8  0100               	movlb	0	; () banked
  4322  001AFA  51A7               	movf	(?_dec_to_hex+1)& (0+255),w,b
  4323  001AFC  0100               	movlb	0	; () banked
  4324  001AFE  21BB               	addwfc	(??_time_difference+1)& (0+255),w,b
  4325  001B00  0100               	movlb	0	; () banked
  4326  001B02  6FCB               	movwf	(time_difference@d2+1)& (0+255),b
  4327                           
  4328                           ; BSR set to: 0
  4329                           ;main.c: 326: d3 = dec_to_hex(s1) - dec_to_hex(s2);
  4330  001B04  C0C4  F0A6         	movff	time_difference@s1,dec_to_hex@num
  4331  001B08  C0C5  F0A7         	movff	time_difference@s1+1,dec_to_hex@num+1
  4332  001B0C  ECCB  F011         	call	_dec_to_hex	;wreg free
  4333  001B10  C0A6  F0BA         	movff	?_dec_to_hex,??_time_difference
  4334  001B14  C0A7  F0BB         	movff	?_dec_to_hex+1,??_time_difference+1
  4335  001B18  C0C6  F0A6         	movff	time_difference@s2,dec_to_hex@num
  4336  001B1C  C0C7  F0A7         	movff	time_difference@s2+1,dec_to_hex@num+1
  4337  001B20  ECCB  F011         	call	_dec_to_hex	;wreg free
  4338  001B24  0100               	movlb	0	; () banked
  4339  001B26  1FA6               	comf	?_dec_to_hex& (0+255),f,b
  4340  001B28  0100               	movlb	0	; () banked
  4341  001B2A  1FA7               	comf	(?_dec_to_hex+1)& (0+255),f,b
  4342  001B2C  0100               	movlb	0	; () banked
  4343  001B2E  4BA6               	infsnz	?_dec_to_hex& (0+255),f,b
  4344  001B30  2BA7               	incf	(?_dec_to_hex+1)& (0+255),f,b
  4345  001B32  0100               	movlb	0	; () banked
  4346  001B34  51A6               	movf	?_dec_to_hex& (0+255),w,b
  4347  001B36  0100               	movlb	0	; () banked
  4348  001B38  25BA               	addwf	??_time_difference& (0+255),w,b
  4349  001B3A  0100               	movlb	0	; () banked
  4350  001B3C  6FCC               	movwf	time_difference@d3& (0+255),b
  4351  001B3E  0100               	movlb	0	; () banked
  4352  001B40  51A7               	movf	(?_dec_to_hex+1)& (0+255),w,b
  4353  001B42  0100               	movlb	0	; () banked
  4354  001B44  21BB               	addwfc	(??_time_difference+1)& (0+255),w,b
  4355  001B46  0100               	movlb	0	; () banked
  4356  001B48  6FCD               	movwf	(time_difference@d3+1)& (0+255),b
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;main.c: 327: return 3600*d1 + 60*d2 + d3;
  4360  001B4A  C0C8  F019         	movff	time_difference@d1,___wmul@multiplier
  4361  001B4E  C0C9  F01A         	movff	time_difference@d1+1,___wmul@multiplier+1
  4362  001B52  0E0E               	movlw	14
  4363  001B54  6E1C               	movwf	___wmul@multiplicand+1,c
  4364  001B56  0E10               	movlw	16
  4365  001B58  6E1B               	movwf	___wmul@multiplicand,c
  4366  001B5A  EC35  F019         	call	___wmul	;wreg free
  4367  001B5E  C019  F0BA         	movff	?___wmul,??_time_difference
  4368  001B62  C01A  F0BB         	movff	?___wmul+1,??_time_difference+1
  4369  001B66  C0CA  F019         	movff	time_difference@d2,___wmul@multiplier
  4370  001B6A  C0CB  F01A         	movff	time_difference@d2+1,___wmul@multiplier+1
  4371  001B6E  0E00               	movlw	0
  4372  001B70  6E1C               	movwf	___wmul@multiplicand+1,c
  4373  001B72  0E3C               	movlw	60
  4374  001B74  6E1B               	movwf	___wmul@multiplicand,c
  4375  001B76  EC35  F019         	call	___wmul	;wreg free
  4376  001B7A  5019               	movf	?___wmul,w,c
  4377  001B7C  0100               	movlb	0	; () banked
  4378  001B7E  27BA               	addwf	??_time_difference& (0+255),f,b
  4379  001B80  501A               	movf	?___wmul+1,w,c
  4380  001B82  0100               	movlb	0	; () banked
  4381  001B84  23BB               	addwfc	(??_time_difference+1)& (0+255),f,b
  4382  001B86  0100               	movlb	0	; () banked
  4383  001B88  51CC               	movf	time_difference@d3& (0+255),w,b
  4384  001B8A  0100               	movlb	0	; () banked
  4385  001B8C  25BA               	addwf	??_time_difference& (0+255),w,b
  4386  001B8E  0100               	movlb	0	; () banked
  4387  001B90  6FB6               	movwf	?_time_difference& (0+255),b
  4388  001B92  0100               	movlb	0	; () banked
  4389  001B94  51CD               	movf	(time_difference@d3+1)& (0+255),w,b
  4390  001B96  0100               	movlb	0	; () banked
  4391  001B98  21BB               	addwfc	(??_time_difference+1)& (0+255),w,b
  4392  001B9A  0100               	movlb	0	; () banked
  4393  001B9C  6FB7               	movwf	(?_time_difference+1)& (0+255),b
  4394  001B9E  0012               	return	
  4395  001BA0                     __end_of_time_difference:
  4396                           	opt stack 0
  4397                           tblptru	equ	0xFF8
  4398                           tblptrh	equ	0xFF7
  4399                           tblptrl	equ	0xFF6
  4400                           tablat	equ	0xFF5
  4401                           prodh	equ	0xFF4
  4402                           prodl	equ	0xFF3
  4403                           intcon	equ	0xFF2
  4404                           intcon2	equ	0xFF1
  4405                           intcon3	equ	0xFF0
  4406                           postinc0	equ	0xFEE
  4407                           wreg	equ	0xFE8
  4408                           postdec1	equ	0xFE5
  4409                           fsr1l	equ	0xFE1
  4410                           indf2	equ	0xFDF
  4411                           fsr2h	equ	0xFDA
  4412                           fsr2l	equ	0xFD9
  4413                           status	equ	0xFD8
  4414                           
  4415 ;; *************** function _dec_to_hex *****************
  4416 ;; Defined at:
  4417 ;;		line 285 in file "main.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  num             2   38[BANK0 ] int 
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  quotient        2   52[BANK0 ] int 
  4422 ;;  hexnum          2   50[BANK0 ] int 
  4423 ;;  i               2   48[BANK0 ] int 
  4424 ;;  temp            2   46[BANK0 ] int 
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  2   38[BANK0 ] int 
  4427 ;; Registers used:
  4428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4434 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4437 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;Total ram usage:       16 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; Hardware stack levels required when called:    7
  4441 ;; This function calls:
  4442 ;;		___awdiv
  4443 ;;		___awtoft
  4444 ;;		___ftadd
  4445 ;;		___ftmul
  4446 ;;		___fttol
  4447 ;;		_pow
  4448 ;; This function is called by:
  4449 ;;		_time_difference
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           	psect	text6
  4454  002396                     __ptext6:
  4455                           	opt stack 0
  4456  002396                     _dec_to_hex:
  4457                           	opt stack 21
  4458                           
  4459                           ;main.c: 286: int i = 0, quotient = num, temp, hexnum = 0;
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;incstack = 0
  4463  002396  0E00               	movlw	0
  4464  002398  0100               	movlb	0	; () banked
  4465  00239A  6FB1               	movwf	(dec_to_hex@i+1)& (0+255),b
  4466  00239C  0E00               	movlw	0
  4467  00239E  6FB0               	movwf	dec_to_hex@i& (0+255),b
  4468                           
  4469                           ; BSR set to: 0
  4470  0023A0  C0A6  F0B4         	movff	dec_to_hex@num,dec_to_hex@quotient
  4471  0023A4  C0A7  F0B5         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  4472  0023A8  0E00               	movlw	0
  4473  0023AA  0100               	movlb	0	; () banked
  4474  0023AC  6FB3               	movwf	(dec_to_hex@hexnum+1)& (0+255),b
  4475  0023AE  0E00               	movlw	0
  4476  0023B0  6FB2               	movwf	dec_to_hex@hexnum& (0+255),b
  4477                           
  4478                           ;main.c: 288: while (quotient != 0) {
  4479  0023B2  D06F               	goto	l5059
  4480  0023B4                     l5047:
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;main.c: 289: temp = quotient % 16;
  4484  0023B4  0E0F               	movlw	15
  4485  0023B6  0100               	movlb	0	; () banked
  4486  0023B8  15B4               	andwf	dec_to_hex@quotient& (0+255),w,b
  4487  0023BA  0100               	movlb	0	; () banked
  4488  0023BC  6FAE               	movwf	dec_to_hex@temp& (0+255),b
  4489  0023BE  0100               	movlb	0	; () banked
  4490  0023C0  6BAF               	clrf	(dec_to_hex@temp+1)& (0+255),b
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;main.c: 291: hexnum += temp*pow(10,i);
  4494  0023C2  C0B0  F021         	movff	dec_to_hex@i,___awtoft@c
  4495  0023C6  C0B1  F022         	movff	dec_to_hex@i+1,___awtoft@c+1
  4496  0023CA  ECF3  F018         	call	___awtoft	;wreg free
  4497  0023CE  C021  F0A8         	movff	?___awtoft,_dec_to_hex$1500
  4498  0023D2  C022  F0A9         	movff	?___awtoft+1,_dec_to_hex$1500+1
  4499  0023D6  C023  F0AA         	movff	?___awtoft+2,_dec_to_hex$1500+2
  4500                           
  4501                           ;main.c: 291: hexnum += temp*pow(10,i);
  4502  0023DA  C0A8  F098         	movff	_dec_to_hex$1500,pow@y
  4503  0023DE  C0A9  F099         	movff	_dec_to_hex$1500+1,pow@y+1
  4504  0023E2  C0AA  F09A         	movff	_dec_to_hex$1500+2,pow@y+2
  4505  0023E6  0E00               	movlw	0
  4506  0023E8  0100               	movlb	0	; () banked
  4507  0023EA  6F95               	movwf	pow@x& (0+255),b
  4508  0023EC  0E20               	movlw	32
  4509  0023EE  0100               	movlb	0	; () banked
  4510  0023F0  6F96               	movwf	(pow@x+1)& (0+255),b
  4511  0023F2  0E41               	movlw	65
  4512  0023F4  0100               	movlb	0	; () banked
  4513  0023F6  6F97               	movwf	(pow@x+2)& (0+255),b
  4514  0023F8  ECA6  F00E         	call	_pow	;wreg free
  4515  0023FC  C095  F0AB         	movff	?_pow,_dec_to_hex$1501
  4516  002400  C096  F0AC         	movff	?_pow+1,_dec_to_hex$1501+1
  4517  002404  C097  F0AD         	movff	?_pow+2,_dec_to_hex$1501+2
  4518                           
  4519                           ;main.c: 291: hexnum += temp*pow(10,i);
  4520  002408  C0AB  F028         	movff	_dec_to_hex$1501,___ftmul@f2
  4521  00240C  C0AC  F029         	movff	_dec_to_hex$1501+1,___ftmul@f2+1
  4522  002410  C0AD  F02A         	movff	_dec_to_hex$1501+2,___ftmul@f2+2
  4523  002414  C0AE  F021         	movff	dec_to_hex@temp,___awtoft@c
  4524  002418  C0AF  F022         	movff	dec_to_hex@temp+1,___awtoft@c+1
  4525  00241C  ECF3  F018         	call	___awtoft	;wreg free
  4526  002420  C021  F025         	movff	?___awtoft,___ftmul@f1
  4527  002424  C022  F026         	movff	?___awtoft+1,___ftmul@f1+1
  4528  002428  C023  F027         	movff	?___awtoft+2,___ftmul@f1+2
  4529  00242C  ECCE  F012         	call	___ftmul	;wreg free
  4530  002430  C025  F037         	movff	?___ftmul,___ftadd@f2
  4531  002434  C026  F038         	movff	?___ftmul+1,___ftadd@f2+1
  4532  002438  C027  F039         	movff	?___ftmul+2,___ftadd@f2+2
  4533  00243C  C0B2  F021         	movff	dec_to_hex@hexnum,___awtoft@c
  4534  002440  C0B3  F022         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  4535  002444  ECF3  F018         	call	___awtoft	;wreg free
  4536  002448  C021  F034         	movff	?___awtoft,___ftadd@f1
  4537  00244C  C022  F035         	movff	?___awtoft+1,___ftadd@f1+1
  4538  002450  C023  F036         	movff	?___awtoft+2,___ftadd@f1+2
  4539  002454  ECD0  F00D         	call	___ftadd	;wreg free
  4540  002458  C034  F040         	movff	?___ftadd,___fttol@f1
  4541  00245C  C035  F041         	movff	?___ftadd+1,___fttol@f1+1
  4542  002460  C036  F042         	movff	?___ftadd+2,___fttol@f1+2
  4543  002464  EC54  F012         	call	___fttol	;wreg free
  4544  002468  C040  F0B2         	movff	?___fttol,dec_to_hex@hexnum
  4545  00246C  C041  F0B3         	movff	?___fttol+1,dec_to_hex@hexnum+1
  4546                           
  4547                           ;main.c: 293: quotient = quotient / 16;
  4548  002470  C0B4  F019         	movff	dec_to_hex@quotient,___awdiv@dividend
  4549  002474  C0B5  F01A         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  4550  002478  0E00               	movlw	0
  4551  00247A  6E1C               	movwf	___awdiv@divisor+1,c
  4552  00247C  0E10               	movlw	16
  4553  00247E  6E1B               	movwf	___awdiv@divisor,c
  4554  002480  EC29  F016         	call	___awdiv	;wreg free
  4555  002484  C019  F0B4         	movff	?___awdiv,dec_to_hex@quotient
  4556  002488  C01A  F0B5         	movff	?___awdiv+1,dec_to_hex@quotient+1
  4557                           
  4558                           ;main.c: 294: i += 1;
  4559  00248C  0100               	movlb	0	; () banked
  4560  00248E  4BB0               	infsnz	dec_to_hex@i& (0+255),f,b
  4561  002490  2BB1               	incf	(dec_to_hex@i+1)& (0+255),f,b
  4562  002492                     l5059:
  4563                           
  4564                           ; BSR set to: 0
  4565  002492  0100               	movlb	0	; () banked
  4566  002494  51B4               	movf	dec_to_hex@quotient& (0+255),w,b
  4567  002496  0100               	movlb	0	; () banked
  4568  002498  11B5               	iorwf	(dec_to_hex@quotient+1)& (0+255),w,b
  4569  00249A  A4D8               	btfss	status,2,c
  4570  00249C  D78B               	goto	l5047
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;main.c: 295: }
  4574                           ;main.c: 296: return hexnum;
  4575  00249E  C0B2  F0A6         	movff	dec_to_hex@hexnum,?_dec_to_hex
  4576  0024A2  C0B3  F0A7         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  4577                           
  4578                           ; BSR set to: 0
  4579  0024A6  0012               	return		;funcret
  4580  0024A8                     __end_of_dec_to_hex:
  4581                           	opt stack 0
  4582                           tblptru	equ	0xFF8
  4583                           tblptrh	equ	0xFF7
  4584                           tblptrl	equ	0xFF6
  4585                           tablat	equ	0xFF5
  4586                           prodh	equ	0xFF4
  4587                           prodl	equ	0xFF3
  4588                           intcon	equ	0xFF2
  4589                           intcon2	equ	0xFF1
  4590                           intcon3	equ	0xFF0
  4591                           postinc0	equ	0xFEE
  4592                           wreg	equ	0xFE8
  4593                           postdec1	equ	0xFE5
  4594                           fsr1l	equ	0xFE1
  4595                           indf2	equ	0xFDF
  4596                           fsr2h	equ	0xFDA
  4597                           fsr2l	equ	0xFD9
  4598                           status	equ	0xFD8
  4599                           
  4600 ;; *************** function _pow *****************
  4601 ;; Defined at:
  4602 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;  x               3   21[BANK0 ] int 
  4605 ;;  y               3   24[BANK0 ] int 
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;  yi              4   34[BANK0 ] unsigned long 
  4608 ;;  sign            1   33[BANK0 ] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  3   21[BANK0 ] unsigned char 
  4611 ;; Registers used:
  4612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4618 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;Total ram usage:       17 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    6
  4625 ;; This function calls:
  4626 ;;		___ftge
  4627 ;;		___ftmul
  4628 ;;		___ftneg
  4629 ;;		___fttol
  4630 ;;		___lltoft
  4631 ;;		_exp
  4632 ;;		_log
  4633 ;; This function is called by:
  4634 ;;		_dec_to_hex
  4635 ;;		_hex_to_dec
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text7
  4640  001D4C                     __ptext7:
  4641                           	opt stack 0
  4642  001D4C                     _pow:
  4643                           	opt stack 21
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;incstack = 0
  4647  001D4C  0E00               	movlw	0
  4648  001D4E  0100               	movlb	0	; () banked
  4649  001D50  6FA1               	movwf	pow@sign& (0+255),b
  4650                           
  4651                           ; BSR set to: 0
  4652  001D52  0100               	movlb	0	; () banked
  4653  001D54  5195               	movf	pow@x& (0+255),w,b
  4654  001D56  0100               	movlb	0	; () banked
  4655  001D58  1196               	iorwf	(pow@x+1)& (0+255),w,b
  4656  001D5A  0100               	movlb	0	; () banked
  4657  001D5C  1197               	iorwf	(pow@x+2)& (0+255),w,b
  4658  001D5E  A4D8               	btfss	status,2,c
  4659  001D60  D01E               	goto	l4961
  4660                           
  4661                           ; BSR set to: 0
  4662  001D62  0E00               	movlw	0
  4663  001D64  6E34               	movwf	___ftge@ff1,c
  4664  001D66  0E00               	movlw	0
  4665  001D68  6E35               	movwf	___ftge@ff1+1,c
  4666  001D6A  0E00               	movlw	0
  4667  001D6C  6E36               	movwf	___ftge@ff1+2,c
  4668  001D6E  C098  F037         	movff	pow@y,___ftge@ff2
  4669  001D72  C099  F038         	movff	pow@y+1,___ftge@ff2+1
  4670  001D76  C09A  F039         	movff	pow@y+2,___ftge@ff2+2
  4671  001D7A  EC9D  F015         	call	___ftge	;wreg free
  4672  001D7E  A0D8               	btfss	status,0,c
  4673  001D80  D004               	goto	l915
  4674  001D82  0E00               	movlw	0
  4675  001D84  6E66               	movwf	_errno+1,c
  4676  001D86  0E21               	movlw	33
  4677  001D88  6E65               	movwf	_errno,c
  4678  001D8A                     l915:
  4679  001D8A  0E00               	movlw	0
  4680  001D8C  0100               	movlb	0	; () banked
  4681  001D8E  6F95               	movwf	?_pow& (0+255),b
  4682  001D90  0E00               	movlw	0
  4683  001D92  0100               	movlb	0	; () banked
  4684  001D94  6F96               	movwf	(?_pow+1)& (0+255),b
  4685  001D96  0E00               	movlw	0
  4686  001D98  0100               	movlb	0	; () banked
  4687  001D9A  6F97               	movwf	(?_pow+2)& (0+255),b
  4688                           
  4689                           ; BSR set to: 0
  4690  001D9C  0012               	return	
  4691  001D9E                     l4961:
  4692                           
  4693                           ; BSR set to: 0
  4694  001D9E  0100               	movlb	0	; () banked
  4695  001DA0  5198               	movf	pow@y& (0+255),w,b
  4696  001DA2  0100               	movlb	0	; () banked
  4697  001DA4  1199               	iorwf	(pow@y+1)& (0+255),w,b
  4698  001DA6  0100               	movlb	0	; () banked
  4699  001DA8  119A               	iorwf	(pow@y+2)& (0+255),w,b
  4700  001DAA  A4D8               	btfss	status,2,c
  4701  001DAC  D00A               	goto	l4967
  4702                           
  4703                           ; BSR set to: 0
  4704  001DAE  0E00               	movlw	0
  4705  001DB0  0100               	movlb	0	; () banked
  4706  001DB2  6F95               	movwf	?_pow& (0+255),b
  4707  001DB4  0E80               	movlw	128
  4708  001DB6  0100               	movlb	0	; () banked
  4709  001DB8  6F96               	movwf	(?_pow+1)& (0+255),b
  4710  001DBA  0E3F               	movlw	63
  4711  001DBC  0100               	movlb	0	; () banked
  4712  001DBE  6F97               	movwf	(?_pow+2)& (0+255),b
  4713                           
  4714                           ; BSR set to: 0
  4715  001DC0  0012               	return	
  4716  001DC2                     l4967:
  4717                           
  4718                           ; BSR set to: 0
  4719  001DC2  0100               	movlb	0	; () banked
  4720  001DC4  AF97               	btfss	(pow@x+2)& (0+255),7,b
  4721  001DC6  D048               	goto	l4979
  4722                           
  4723                           ; BSR set to: 0
  4724  001DC8  C098  F040         	movff	pow@y,___fttol@f1
  4725  001DCC  C099  F041         	movff	pow@y+1,___fttol@f1+1
  4726  001DD0  C09A  F042         	movff	pow@y+2,___fttol@f1+2
  4727  001DD4  EC54  F012         	call	___fttol	;wreg free
  4728  001DD8  C040  F0A2         	movff	?___fttol,pow@yi
  4729  001DDC  C041  F0A3         	movff	?___fttol+1,pow@yi+1
  4730  001DE0  C042  F0A4         	movff	?___fttol+2,pow@yi+2
  4731  001DE4  C043  F0A5         	movff	?___fttol+3,pow@yi+3
  4732  001DE8  C0A2  F021         	movff	pow@yi,___lltoft@c
  4733  001DEC  C0A3  F022         	movff	pow@yi+1,___lltoft@c+1
  4734  001DF0  C0A4  F023         	movff	pow@yi+2,___lltoft@c+2
  4735  001DF4  C0A5  F024         	movff	pow@yi+3,___lltoft@c+3
  4736  001DF8  ECA2  F017         	call	___lltoft	;wreg free
  4737  001DFC  0100               	movlb	0	; () banked
  4738  001DFE  5198               	movf	pow@y& (0+255),w,b
  4739  001E00  1821               	xorwf	?___lltoft,w,c
  4740  001E02  E109               	bnz	u4780
  4741  001E04  0100               	movlb	0	; () banked
  4742  001E06  5199               	movf	(pow@y+1)& (0+255),w,b
  4743  001E08  1822               	xorwf	?___lltoft+1,w,c
  4744  001E0A  E105               	bnz	u4780
  4745  001E0C  0100               	movlb	0	; () banked
  4746  001E0E  519A               	movf	(pow@y+2)& (0+255),w,b
  4747  001E10  1823               	xorwf	?___lltoft+2,w,c
  4748  001E12  B4D8               	btfsc	status,2,c
  4749  001E14  D00E               	goto	l4975
  4750  001E16                     u4780:
  4751                           
  4752                           ; BSR set to: 0
  4753  001E16  0E00               	movlw	0
  4754  001E18  6E66               	movwf	_errno+1,c
  4755  001E1A  0E21               	movlw	33
  4756  001E1C  6E65               	movwf	_errno,c
  4757  001E1E  0E00               	movlw	0
  4758  001E20  0100               	movlb	0	; () banked
  4759  001E22  6F95               	movwf	?_pow& (0+255),b
  4760  001E24  0E00               	movlw	0
  4761  001E26  0100               	movlb	0	; () banked
  4762  001E28  6F96               	movwf	(?_pow+1)& (0+255),b
  4763  001E2A  0E00               	movlw	0
  4764  001E2C  0100               	movlb	0	; () banked
  4765  001E2E  6F97               	movwf	(?_pow+2)& (0+255),b
  4766                           
  4767                           ; BSR set to: 0
  4768  001E30  0012               	return	
  4769  001E32                     l4975:
  4770                           
  4771                           ; BSR set to: 0
  4772  001E32  0100               	movlb	0	; () banked
  4773  001E34  51A2               	movf	pow@yi& (0+255),w,b
  4774  001E36  0B01               	andlw	1
  4775  001E38  0100               	movlb	0	; () banked
  4776  001E3A  6FA1               	movwf	pow@sign& (0+255),b
  4777                           
  4778                           ; BSR set to: 0
  4779  001E3C  C095  F019         	movff	pow@x,___ftneg@f1
  4780  001E40  C096  F01A         	movff	pow@x+1,___ftneg@f1+1
  4781  001E44  C097  F01B         	movff	pow@x+2,___ftneg@f1+2
  4782  001E48  EC5B  F019         	call	___ftneg	;wreg free
  4783  001E4C  C019  F095         	movff	?___ftneg,pow@x
  4784  001E50  C01A  F096         	movff	?___ftneg+1,pow@x+1
  4785  001E54  C01B  F097         	movff	?___ftneg+2,pow@x+2
  4786  001E58                     l4979:
  4787  001E58  C095  F04C         	movff	pow@x,log@x
  4788  001E5C  C096  F04D         	movff	pow@x+1,log@x+1
  4789  001E60  C097  F04E         	movff	pow@x+2,log@x+2
  4790  001E64  EC24  F010         	call	_log	;wreg free
  4791  001E68  C04C  F09B         	movff	?_log,_pow$1505
  4792  001E6C  C04D  F09C         	movff	?_log+1,_pow$1505+1
  4793  001E70  C04E  F09D         	movff	?_log+2,_pow$1505+2
  4794  001E74  C09B  F025         	movff	_pow$1505,___ftmul@f1
  4795  001E78  C09C  F026         	movff	_pow$1505+1,___ftmul@f1+1
  4796  001E7C  C09D  F027         	movff	_pow$1505+2,___ftmul@f1+2
  4797  001E80  C098  F028         	movff	pow@y,___ftmul@f2
  4798  001E84  C099  F029         	movff	pow@y+1,___ftmul@f2+1
  4799  001E88  C09A  F02A         	movff	pow@y+2,___ftmul@f2+2
  4800  001E8C  ECCE  F012         	call	___ftmul	;wreg free
  4801  001E90  C025  F09E         	movff	?___ftmul,_pow$1506
  4802  001E94  C026  F09F         	movff	?___ftmul+1,_pow$1506+1
  4803  001E98  C027  F0A0         	movff	?___ftmul+2,_pow$1506+2
  4804  001E9C  C09E  F08C         	movff	_pow$1506,exp@x
  4805  001EA0  C09F  F08D         	movff	_pow$1506+1,exp@x+1
  4806  001EA4  C0A0  F08E         	movff	_pow$1506+2,exp@x+2
  4807  001EA8  EC0C  F00A         	call	_exp	;wreg free
  4808  001EAC  C08C  F095         	movff	?_exp,pow@x
  4809  001EB0  C08D  F096         	movff	?_exp+1,pow@x+1
  4810  001EB4  C08E  F097         	movff	?_exp+2,pow@x+2
  4811  001EB8  0100               	movlb	0	; () banked
  4812  001EBA  51A1               	movf	pow@sign& (0+255),w,b
  4813  001EBC  0100               	movlb	0	; () banked
  4814  001EBE  B4D8               	btfsc	status,2,c
  4815  001EC0  D00F               	goto	l920
  4816                           
  4817                           ; BSR set to: 0
  4818  001EC2  C095  F019         	movff	pow@x,___ftneg@f1
  4819  001EC6  C096  F01A         	movff	pow@x+1,___ftneg@f1+1
  4820  001ECA  C097  F01B         	movff	pow@x+2,___ftneg@f1+2
  4821  001ECE  EC5B  F019         	call	___ftneg	;wreg free
  4822  001ED2  C019  F095         	movff	?___ftneg,?_pow
  4823  001ED6  C01A  F096         	movff	?___ftneg+1,?_pow+1
  4824  001EDA  C01B  F097         	movff	?___ftneg+2,?_pow+2
  4825  001EDE  0012               	return	
  4826  001EE0                     l920:
  4827                           
  4828                           ; BSR set to: 0
  4829  001EE0  C095  F095         	movff	pow@x,?_pow
  4830  001EE4  C096  F096         	movff	pow@x+1,?_pow+1
  4831  001EE8  C097  F097         	movff	pow@x+2,?_pow+2
  4832  001EEC  0012               	return		;funcret
  4833  001EEE                     __end_of_pow:
  4834                           	opt stack 0
  4835                           tblptru	equ	0xFF8
  4836                           tblptrh	equ	0xFF7
  4837                           tblptrl	equ	0xFF6
  4838                           tablat	equ	0xFF5
  4839                           prodh	equ	0xFF4
  4840                           prodl	equ	0xFF3
  4841                           intcon	equ	0xFF2
  4842                           intcon2	equ	0xFF1
  4843                           intcon3	equ	0xFF0
  4844                           postinc0	equ	0xFEE
  4845                           wreg	equ	0xFE8
  4846                           postdec1	equ	0xFE5
  4847                           fsr1l	equ	0xFE1
  4848                           indf2	equ	0xFDF
  4849                           fsr2h	equ	0xFDA
  4850                           fsr2l	equ	0xFD9
  4851                           status	equ	0xFD8
  4852                           
  4853 ;; *************** function _log *****************
  4854 ;; Defined at:
  4855 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;  x               3   75[COMRAM] unsigned char 
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;  exponent        2   78[COMRAM] int 
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  3   75[COMRAM] int 
  4862 ;; Registers used:
  4863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4869 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4873 ;;Total ram usage:        5 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    5
  4876 ;; This function calls:
  4877 ;;		___awtoft
  4878 ;;		___ftadd
  4879 ;;		___ftmul
  4880 ;;		_eval_poly
  4881 ;;		_frexp
  4882 ;; This function is called by:
  4883 ;;		_pow
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           	psect	text8
  4888  002048                     __ptext8:
  4889                           	opt stack 0
  4890  002048                     _log:
  4891                           	opt stack 21
  4892                           
  4893                           ;incstack = 0
  4894  002048  AE4E               	btfss	log@x+2,7,c
  4895  00204A  D00B               	goto	l4891
  4896  00204C  0E00               	movlw	0
  4897  00204E  6E66               	movwf	_errno+1,c
  4898  002050  0E21               	movlw	33
  4899  002052  6E65               	movwf	_errno,c
  4900  002054  0E00               	movlw	0
  4901  002056  6E4C               	movwf	?_log,c
  4902  002058  0E00               	movlw	0
  4903  00205A  6E4D               	movwf	?_log+1,c
  4904  00205C  0E00               	movlw	0
  4905  00205E  6E4E               	movwf	?_log+2,c
  4906  002060  0012               	return	
  4907  002062                     l4891:
  4908  002062  504C               	movf	log@x,w,c
  4909  002064  104D               	iorwf	log@x+1,w,c
  4910  002066  104E               	iorwf	log@x+2,w,c
  4911  002068  A4D8               	btfss	status,2,c
  4912  00206A  D00B               	goto	l4897
  4913  00206C  0E00               	movlw	0
  4914  00206E  6E66               	movwf	_errno+1,c
  4915  002070  0E22               	movlw	34
  4916  002072  6E65               	movwf	_errno,c
  4917  002074  0E00               	movlw	0
  4918  002076  6E4C               	movwf	?_log,c
  4919  002078  0E00               	movlw	0
  4920  00207A  6E4D               	movwf	?_log+1,c
  4921  00207C  0E00               	movlw	0
  4922  00207E  6E4E               	movwf	?_log+2,c
  4923  002080  0012               	return	
  4924  002082                     l4897:
  4925  002082  0E00               	movlw	0
  4926  002084  6E28               	movwf	___ftmul@f2,c
  4927  002086  0E00               	movlw	0
  4928  002088  6E29               	movwf	___ftmul@f2+1,c
  4929  00208A  0E40               	movlw	64
  4930  00208C  6E2A               	movwf	___ftmul@f2+2,c
  4931  00208E  0E4F               	movlw	low log@exponent
  4932  002090  6E1C               	movwf	frexp@eptr,c
  4933  002092  0E00               	movlw	high log@exponent
  4934  002094  6E1D               	movwf	frexp@eptr+1,c
  4935  002096  C04C  F019         	movff	log@x,frexp@value
  4936  00209A  C04D  F01A         	movff	log@x+1,frexp@value+1
  4937  00209E  C04E  F01B         	movff	log@x+2,frexp@value+2
  4938  0020A2  EC55  F015         	call	_frexp	;wreg free
  4939  0020A6  C019  F025         	movff	?_frexp,___ftmul@f1
  4940  0020AA  C01A  F026         	movff	?_frexp+1,___ftmul@f1+1
  4941  0020AE  C01B  F027         	movff	?_frexp+2,___ftmul@f1+2
  4942  0020B2  ECCE  F012         	call	___ftmul	;wreg free
  4943  0020B6  C025  F034         	movff	?___ftmul,___ftadd@f1
  4944  0020BA  C026  F035         	movff	?___ftmul+1,___ftadd@f1+1
  4945  0020BE  C027  F036         	movff	?___ftmul+2,___ftadd@f1+2
  4946  0020C2  0E00               	movlw	0
  4947  0020C4  6E37               	movwf	___ftadd@f2,c
  4948  0020C6  0E80               	movlw	128
  4949  0020C8  6E38               	movwf	___ftadd@f2+1,c
  4950  0020CA  0EBF               	movlw	191
  4951  0020CC  6E39               	movwf	___ftadd@f2+2,c
  4952  0020CE  ECD0  F00D         	call	___ftadd	;wreg free
  4953  0020D2  C034  F04C         	movff	?___ftadd,log@x
  4954  0020D6  C035  F04D         	movff	?___ftadd+1,log@x+1
  4955  0020DA  C036  F04E         	movff	?___ftadd+2,log@x+2
  4956  0020DE  064F               	decf	log@exponent,f,c
  4957  0020E0  A0D8               	btfss	status,0,c
  4958  0020E2  0650               	decf	log@exponent+1,f,c
  4959  0020E4  C04C  F040         	movff	log@x,eval_poly@x
  4960  0020E8  C04D  F041         	movff	log@x+1,eval_poly@x+1
  4961  0020EC  C04E  F042         	movff	log@x+2,eval_poly@x+2
  4962  0020F0  0E85               	movlw	low log@coeff
  4963  0020F2  6E43               	movwf	eval_poly@d,c
  4964  0020F4  0EFE               	movlw	high log@coeff
  4965  0020F6  6E44               	movwf	eval_poly@d+1,c
  4966  0020F8  0E00               	movlw	0
  4967  0020FA  6E46               	movwf	eval_poly@n+1,c
  4968  0020FC  0E08               	movlw	8
  4969  0020FE  6E45               	movwf	eval_poly@n,c
  4970  002100  EC34  F014         	call	_eval_poly	;wreg free
  4971  002104  C040  F04C         	movff	?_eval_poly,log@x
  4972  002108  C041  F04D         	movff	?_eval_poly+1,log@x+1
  4973  00210C  C042  F04E         	movff	?_eval_poly+2,log@x+2
  4974  002110  0E72               	movlw	114
  4975  002112  6E28               	movwf	___ftmul@f2,c
  4976  002114  0E31               	movlw	49
  4977  002116  6E29               	movwf	___ftmul@f2+1,c
  4978  002118  0E3F               	movlw	63
  4979  00211A  6E2A               	movwf	___ftmul@f2+2,c
  4980  00211C  C04F  F021         	movff	log@exponent,___awtoft@c
  4981  002120  C050  F022         	movff	log@exponent+1,___awtoft@c+1
  4982  002124  ECF3  F018         	call	___awtoft	;wreg free
  4983  002128  C021  F025         	movff	?___awtoft,___ftmul@f1
  4984  00212C  C022  F026         	movff	?___awtoft+1,___ftmul@f1+1
  4985  002130  C023  F027         	movff	?___awtoft+2,___ftmul@f1+2
  4986  002134  ECCE  F012         	call	___ftmul	;wreg free
  4987  002138  C025  F034         	movff	?___ftmul,___ftadd@f1
  4988  00213C  C026  F035         	movff	?___ftmul+1,___ftadd@f1+1
  4989  002140  C027  F036         	movff	?___ftmul+2,___ftadd@f1+2
  4990  002144  C04C  F037         	movff	log@x,___ftadd@f2
  4991  002148  C04D  F038         	movff	log@x+1,___ftadd@f2+1
  4992  00214C  C04E  F039         	movff	log@x+2,___ftadd@f2+2
  4993  002150  ECD0  F00D         	call	___ftadd	;wreg free
  4994  002154  C034  F04C         	movff	?___ftadd,?_log
  4995  002158  C035  F04D         	movff	?___ftadd+1,?_log+1
  4996  00215C  C036  F04E         	movff	?___ftadd+2,?_log+2
  4997  002160  0012               	return	
  4998  002162                     __end_of_log:
  4999                           	opt stack 0
  5000                           tblptru	equ	0xFF8
  5001                           tblptrh	equ	0xFF7
  5002                           tblptrl	equ	0xFF6
  5003                           tablat	equ	0xFF5
  5004                           prodh	equ	0xFF4
  5005                           prodl	equ	0xFF3
  5006                           intcon	equ	0xFF2
  5007                           intcon2	equ	0xFF1
  5008                           intcon3	equ	0xFF0
  5009                           postinc0	equ	0xFEE
  5010                           wreg	equ	0xFE8
  5011                           postdec1	equ	0xFE5
  5012                           fsr1l	equ	0xFE1
  5013                           indf2	equ	0xFDF
  5014                           fsr2h	equ	0xFDA
  5015                           fsr2l	equ	0xFD9
  5016                           status	equ	0xFD8
  5017                           
  5018 ;; *************** function _exp *****************
  5019 ;; Defined at:
  5020 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  5021 ;; Parameters:    Size  Location     Type
  5022 ;;  x               3   12[BANK0 ] int 
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;  exponent        2   18[BANK0 ] int 
  5025 ;;  sign            1   20[BANK0 ] unsigned char 
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  3   12[BANK0 ] unsigned char 
  5028 ;; Registers used:
  5029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5035 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;Total ram usage:        9 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    5
  5042 ;; This function calls:
  5043 ;;		___awtoft
  5044 ;;		___ftdiv
  5045 ;;		___ftge
  5046 ;;		___ftmul
  5047 ;;		___ftneg
  5048 ;;		___ftsub
  5049 ;;		___fttol
  5050 ;;		_eval_poly
  5051 ;;		_floor
  5052 ;;		_ldexp
  5053 ;; This function is called by:
  5054 ;;		_pow
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           	psect	text9
  5059  001418                     __ptext9:
  5060                           	opt stack 0
  5061  001418                     _exp:
  5062                           	opt stack 21
  5063                           
  5064                           ;incstack = 0
  5065  001418  0100               	movlb	0	; () banked
  5066  00141A  518C               	movf	exp@x& (0+255),w,b
  5067  00141C  0100               	movlb	0	; () banked
  5068  00141E  118D               	iorwf	(exp@x+1)& (0+255),w,b
  5069  001420  0100               	movlb	0	; () banked
  5070  001422  118E               	iorwf	(exp@x+2)& (0+255),w,b
  5071  001424  A4D8               	btfss	status,2,c
  5072  001426  D00A               	goto	l4913
  5073                           
  5074                           ; BSR set to: 0
  5075  001428  0E00               	movlw	0
  5076  00142A  0100               	movlb	0	; () banked
  5077  00142C  6F8C               	movwf	?_exp& (0+255),b
  5078  00142E  0E80               	movlw	128
  5079  001430  0100               	movlb	0	; () banked
  5080  001432  6F8D               	movwf	(?_exp+1)& (0+255),b
  5081  001434  0E3F               	movlw	63
  5082  001436  0100               	movlb	0	; () banked
  5083  001438  6F8E               	movwf	(?_exp+2)& (0+255),b
  5084                           
  5085                           ; BSR set to: 0
  5086  00143A  0012               	return	
  5087  00143C                     l4913:
  5088                           
  5089                           ; BSR set to: 0
  5090  00143C  0E72               	movlw	114
  5091  00143E  6E34               	movwf	___ftge@ff1,c
  5092  001440  0E31               	movlw	49
  5093  001442  6E35               	movwf	___ftge@ff1+1,c
  5094  001444  0E44               	movlw	68
  5095  001446  6E36               	movwf	___ftge@ff1+2,c
  5096  001448  C08C  F037         	movff	exp@x,___ftge@ff2
  5097  00144C  C08D  F038         	movff	exp@x+1,___ftge@ff2+1
  5098  001450  C08E  F039         	movff	exp@x+2,___ftge@ff2+2
  5099  001454  EC9D  F015         	call	___ftge	;wreg free
  5100  001458  B0D8               	btfsc	status,0,c
  5101  00145A  D00E               	goto	l4919
  5102  00145C  0E00               	movlw	0
  5103  00145E  6E66               	movwf	_errno+1,c
  5104  001460  0E22               	movlw	34
  5105  001462  6E65               	movwf	_errno,c
  5106  001464  0EFF               	movlw	255
  5107  001466  0100               	movlb	0	; () banked
  5108  001468  6F8C               	movwf	?_exp& (0+255),b
  5109  00146A  0E7F               	movlw	127
  5110  00146C  0100               	movlb	0	; () banked
  5111  00146E  6F8D               	movwf	(?_exp+1)& (0+255),b
  5112  001470  0E7F               	movlw	127
  5113  001472  0100               	movlb	0	; () banked
  5114  001474  6F8E               	movwf	(?_exp+2)& (0+255),b
  5115                           
  5116                           ; BSR set to: 0
  5117  001476  0012               	return	
  5118  001478                     l4919:
  5119  001478  C08C  F034         	movff	exp@x,___ftge@ff1
  5120  00147C  C08D  F035         	movff	exp@x+1,___ftge@ff1+1
  5121  001480  C08E  F036         	movff	exp@x+2,___ftge@ff1+2
  5122  001484  0E49               	movlw	73
  5123  001486  6E37               	movwf	___ftge@ff2,c
  5124  001488  0E3A               	movlw	58
  5125  00148A  6E38               	movwf	___ftge@ff2+1,c
  5126  00148C  0EC4               	movlw	196
  5127  00148E  6E39               	movwf	___ftge@ff2+2,c
  5128  001490  EC9D  F015         	call	___ftge	;wreg free
  5129  001494  B0D8               	btfsc	status,0,c
  5130  001496  D00E               	goto	l4925
  5131  001498  0E00               	movlw	0
  5132  00149A  6E66               	movwf	_errno+1,c
  5133  00149C  0E22               	movlw	34
  5134  00149E  6E65               	movwf	_errno,c
  5135  0014A0  0E00               	movlw	0
  5136  0014A2  0100               	movlb	0	; () banked
  5137  0014A4  6F8C               	movwf	?_exp& (0+255),b
  5138  0014A6  0E00               	movlw	0
  5139  0014A8  0100               	movlb	0	; () banked
  5140  0014AA  6F8D               	movwf	(?_exp+1)& (0+255),b
  5141  0014AC  0E00               	movlw	0
  5142  0014AE  0100               	movlb	0	; () banked
  5143  0014B0  6F8E               	movwf	(?_exp+2)& (0+255),b
  5144                           
  5145                           ; BSR set to: 0
  5146  0014B2  0012               	return	
  5147  0014B4                     l4925:
  5148  0014B4  0100               	movlb	0	; () banked
  5149  0014B6  AF8E               	btfss	(exp@x+2)& (0+255),7,b
  5150  0014B8  D002               	goto	u4690
  5151  0014BA  0E01               	movlw	1
  5152  0014BC  D001               	goto	u4700
  5153  0014BE                     u4690:
  5154  0014BE  0E00               	movlw	0
  5155  0014C0                     u4700:
  5156  0014C0  0100               	movlb	0	; () banked
  5157  0014C2  6F94               	movwf	exp@sign& (0+255),b
  5158                           
  5159                           ; BSR set to: 0
  5160  0014C4  0100               	movlb	0	; () banked
  5161  0014C6  5194               	movf	exp@sign& (0+255),w,b
  5162  0014C8  0100               	movlb	0	; () banked
  5163  0014CA  B4D8               	btfsc	status,2,c
  5164  0014CC  D00E               	goto	l1078
  5165                           
  5166                           ; BSR set to: 0
  5167  0014CE  C08C  F019         	movff	exp@x,___ftneg@f1
  5168  0014D2  C08D  F01A         	movff	exp@x+1,___ftneg@f1+1
  5169  0014D6  C08E  F01B         	movff	exp@x+2,___ftneg@f1+2
  5170  0014DA  EC5B  F019         	call	___ftneg	;wreg free
  5171  0014DE  C019  F08C         	movff	?___ftneg,exp@x
  5172  0014E2  C01A  F08D         	movff	?___ftneg+1,exp@x+1
  5173  0014E6  C01B  F08E         	movff	?___ftneg+2,exp@x+2
  5174  0014EA                     l1078:
  5175  0014EA  C08C  F025         	movff	exp@x,___ftmul@f1
  5176  0014EE  C08D  F026         	movff	exp@x+1,___ftmul@f1+1
  5177  0014F2  C08E  F027         	movff	exp@x+2,___ftmul@f1+2
  5178  0014F6  0EAA               	movlw	170
  5179  0014F8  6E28               	movwf	___ftmul@f2,c
  5180  0014FA  0EB8               	movlw	184
  5181  0014FC  6E29               	movwf	___ftmul@f2+1,c
  5182  0014FE  0E3F               	movlw	63
  5183  001500  6E2A               	movwf	___ftmul@f2+2,c
  5184  001502  ECCE  F012         	call	___ftmul	;wreg free
  5185  001506  C025  F08C         	movff	?___ftmul,exp@x
  5186  00150A  C026  F08D         	movff	?___ftmul+1,exp@x+1
  5187  00150E  C027  F08E         	movff	?___ftmul+2,exp@x+2
  5188  001512  C08C  F084         	movff	exp@x,floor@x
  5189  001516  C08D  F085         	movff	exp@x+1,floor@x+1
  5190  00151A  C08E  F086         	movff	exp@x+2,floor@x+2
  5191  00151E  EC48  F013         	call	_floor	;wreg free
  5192  001522  C084  F08F         	movff	?_floor,_exp$1507
  5193  001526  C085  F090         	movff	?_floor+1,_exp$1507+1
  5194  00152A  C086  F091         	movff	?_floor+2,_exp$1507+2
  5195  00152E  C08F  F040         	movff	_exp$1507,___fttol@f1
  5196  001532  C090  F041         	movff	_exp$1507+1,___fttol@f1+1
  5197  001536  C091  F042         	movff	_exp$1507+2,___fttol@f1+2
  5198  00153A  EC54  F012         	call	___fttol	;wreg free
  5199  00153E  C040  F092         	movff	?___fttol,exp@exponent
  5200  001542  C041  F093         	movff	?___fttol+1,exp@exponent+1
  5201  001546  C08C  F040         	movff	exp@x,___ftsub@f1
  5202  00154A  C08D  F041         	movff	exp@x+1,___ftsub@f1+1
  5203  00154E  C08E  F042         	movff	exp@x+2,___ftsub@f1+2
  5204  001552  C092  F021         	movff	exp@exponent,___awtoft@c
  5205  001556  C093  F022         	movff	exp@exponent+1,___awtoft@c+1
  5206  00155A  ECF3  F018         	call	___awtoft	;wreg free
  5207  00155E  C021  F043         	movff	?___awtoft,___ftsub@f2
  5208  001562  C022  F044         	movff	?___awtoft+1,___ftsub@f2+1
  5209  001566  C023  F045         	movff	?___awtoft+2,___ftsub@f2+2
  5210  00156A  ECB6  F018         	call	___ftsub	;wreg free
  5211  00156E  C040  F08C         	movff	?___ftsub,exp@x
  5212  001572  C041  F08D         	movff	?___ftsub+1,exp@x+1
  5213  001576  C042  F08E         	movff	?___ftsub+2,exp@x+2
  5214  00157A  C08C  F040         	movff	exp@x,eval_poly@x
  5215  00157E  C08D  F041         	movff	exp@x+1,eval_poly@x+1
  5216  001582  C08E  F042         	movff	exp@x+2,eval_poly@x+2
  5217  001586  0E67               	movlw	low exp@coeff
  5218  001588  6E43               	movwf	eval_poly@d,c
  5219  00158A  0EFE               	movlw	high exp@coeff
  5220  00158C  6E44               	movwf	eval_poly@d+1,c
  5221  00158E  0E00               	movlw	0
  5222  001590  6E46               	movwf	eval_poly@n+1,c
  5223  001592  0E09               	movlw	9
  5224  001594  6E45               	movwf	eval_poly@n,c
  5225  001596  EC34  F014         	call	_eval_poly	;wreg free
  5226  00159A  C040  F04C         	movff	?_eval_poly,ldexp@value
  5227  00159E  C041  F04D         	movff	?_eval_poly+1,ldexp@value+1
  5228  0015A2  C042  F04E         	movff	?_eval_poly+2,ldexp@value+2
  5229  0015A6  C092  F04F         	movff	exp@exponent,ldexp@newexp
  5230  0015AA  C093  F050         	movff	exp@exponent+1,ldexp@newexp+1
  5231  0015AE  EC9D  F014         	call	_ldexp	;wreg free
  5232  0015B2  C04C  F08C         	movff	?_ldexp,exp@x
  5233  0015B6  C04D  F08D         	movff	?_ldexp+1,exp@x+1
  5234  0015BA  C04E  F08E         	movff	?_ldexp+2,exp@x+2
  5235  0015BE  0100               	movlb	0	; () banked
  5236  0015C0  5194               	movf	exp@sign& (0+255),w,b
  5237  0015C2  0100               	movlb	0	; () banked
  5238  0015C4  B4D8               	btfsc	status,2,c
  5239  0015C6  D02B               	goto	l1079
  5240                           
  5241                           ; BSR set to: 0
  5242  0015C8  0100               	movlb	0	; () banked
  5243  0015CA  298C               	incf	exp@x& (0+255),w,b
  5244  0015CC  E113               	bnz	l4947
  5245  0015CE  0E7F               	movlw	127
  5246  0015D0  0100               	movlb	0	; () banked
  5247  0015D2  198D               	xorwf	(exp@x+1)& (0+255),w,b
  5248  0015D4  E10F               	bnz	l4947
  5249  0015D6  0E7F               	movlw	127
  5250  0015D8  0100               	movlb	0	; () banked
  5251  0015DA  198E               	xorwf	(exp@x+2)& (0+255),w,b
  5252  0015DC  A4D8               	btfss	status,2,c
  5253  0015DE  D00A               	goto	l4947
  5254                           
  5255                           ; BSR set to: 0
  5256  0015E0  0E00               	movlw	0
  5257  0015E2  0100               	movlb	0	; () banked
  5258  0015E4  6F8C               	movwf	?_exp& (0+255),b
  5259  0015E6  0E00               	movlw	0
  5260  0015E8  0100               	movlb	0	; () banked
  5261  0015EA  6F8D               	movwf	(?_exp+1)& (0+255),b
  5262  0015EC  0E00               	movlw	0
  5263  0015EE  0100               	movlb	0	; () banked
  5264  0015F0  6F8E               	movwf	(?_exp+2)& (0+255),b
  5265                           
  5266                           ; BSR set to: 0
  5267  0015F2  0012               	return	
  5268  0015F4                     l4947:
  5269                           
  5270                           ; BSR set to: 0
  5271  0015F4  0E00               	movlw	0
  5272  0015F6  6E25               	movwf	___ftdiv@f1,c
  5273  0015F8  0E80               	movlw	128
  5274  0015FA  6E26               	movwf	___ftdiv@f1+1,c
  5275  0015FC  0E3F               	movlw	63
  5276  0015FE  6E27               	movwf	___ftdiv@f1+2,c
  5277  001600  C08C  F028         	movff	exp@x,___ftdiv@f2
  5278  001604  C08D  F029         	movff	exp@x+1,___ftdiv@f2+1
  5279  001608  C08E  F02A         	movff	exp@x+2,___ftdiv@f2+2
  5280  00160C  ECC1  F013         	call	___ftdiv	;wreg free
  5281  001610  C025  F08C         	movff	?___ftdiv,?_exp
  5282  001614  C026  F08D         	movff	?___ftdiv+1,?_exp+1
  5283  001618  C027  F08E         	movff	?___ftdiv+2,?_exp+2
  5284  00161C  0012               	return	
  5285  00161E                     l1079:
  5286                           
  5287                           ; BSR set to: 0
  5288  00161E  C08C  F08C         	movff	exp@x,?_exp
  5289  001622  C08D  F08D         	movff	exp@x+1,?_exp+1
  5290  001626  C08E  F08E         	movff	exp@x+2,?_exp+2
  5291  00162A  0012               	return		;funcret
  5292  00162C                     __end_of_exp:
  5293                           	opt stack 0
  5294                           tblptru	equ	0xFF8
  5295                           tblptrh	equ	0xFF7
  5296                           tblptrl	equ	0xFF6
  5297                           tablat	equ	0xFF5
  5298                           prodh	equ	0xFF4
  5299                           prodl	equ	0xFF3
  5300                           intcon	equ	0xFF2
  5301                           intcon2	equ	0xFF1
  5302                           intcon3	equ	0xFF0
  5303                           postinc0	equ	0xFEE
  5304                           wreg	equ	0xFE8
  5305                           postdec1	equ	0xFE5
  5306                           fsr1l	equ	0xFE1
  5307                           indf2	equ	0xFDF
  5308                           fsr2h	equ	0xFDA
  5309                           fsr2l	equ	0xFD9
  5310                           status	equ	0xFD8
  5311                           
  5312 ;; *************** function _ldexp *****************
  5313 ;; Defined at:
  5314 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;  value           3   75[COMRAM] unsigned char 
  5317 ;;  newexp          2   78[COMRAM] int 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  3   75[COMRAM] int 
  5322 ;; Registers used:
  5323 ;;		wreg, status,2, status,0
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5329 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5332 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;Total ram usage:        7 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    2
  5336 ;; This function calls:
  5337 ;;		Nothing
  5338 ;; This function is called by:
  5339 ;;		_exp
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text10
  5344  00293A                     __ptext10:
  5345                           	opt stack 0
  5346  00293A                     _ldexp:
  5347                           	opt stack 23
  5348                           
  5349                           ;incstack = 0
  5350  00293A  504C               	movf	ldexp@value,w,c
  5351  00293C  104D               	iorwf	ldexp@value+1,w,c
  5352  00293E  104E               	iorwf	ldexp@value+2,w,c
  5353  002940  A4D8               	btfss	status,2,c
  5354  002942  D007               	goto	l3249
  5355  002944  0E00               	movlw	0
  5356  002946  6E4C               	movwf	?_ldexp,c
  5357  002948  0E00               	movlw	0
  5358  00294A  6E4D               	movwf	?_ldexp+1,c
  5359  00294C  0E00               	movlw	0
  5360  00294E  6E4E               	movwf	?_ldexp+2,c
  5361  002950  0012               	return	
  5362  002952                     l3249:
  5363  002952  504E               	movf	ldexp@value+2,w,c
  5364  002954  0B7F               	andlw	127
  5365  002956  6E51               	movwf	??_ldexp& (0+255),c
  5366  002958  6A52               	clrf	(??_ldexp+1)& (0+255),c
  5367  00295A  90D8               	bcf	status,0,c
  5368  00295C  3651               	rlcf	??_ldexp,f,c
  5369  00295E  3652               	rlcf	??_ldexp+1,f,c
  5370  002960  5051               	movf	??_ldexp,w,c
  5371  002962  264F               	addwf	ldexp@newexp,f,c
  5372  002964  5052               	movf	??_ldexp+1,w,c
  5373  002966  2250               	addwfc	ldexp@newexp+1,f,c
  5374  002968  AE4D               	btfss	ldexp@value+1,7,c
  5375  00296A  D003               	goto	u2700
  5376  00296C  6A51               	clrf	??_ldexp& (0+255),c
  5377  00296E  2A51               	incf	??_ldexp& (0+255),f,c
  5378  002970  D001               	goto	u2708
  5379  002972                     u2700:
  5380  002972  6A51               	clrf	??_ldexp& (0+255),c
  5381  002974                     u2708:
  5382  002974  5051               	movf	??_ldexp,w,c
  5383  002976  264F               	addwf	ldexp@newexp,f,c
  5384  002978  0E00               	movlw	0
  5385  00297A  2250               	addwfc	ldexp@newexp+1,f,c
  5386  00297C  AE50               	btfss	ldexp@newexp+1,7,c
  5387  00297E  D00B               	goto	l3257
  5388  002980  0E00               	movlw	0
  5389  002982  6E66               	movwf	_errno+1,c
  5390  002984  0E22               	movlw	34
  5391  002986  6E65               	movwf	_errno,c
  5392  002988  0E00               	movlw	0
  5393  00298A  6E4C               	movwf	?_ldexp,c
  5394  00298C  0E00               	movlw	0
  5395  00298E  6E4D               	movwf	?_ldexp+1,c
  5396  002990  0E00               	movlw	0
  5397  002992                     L3:
  5398  002992  6E4E               	movwf	?_ldexp+2,c
  5399  002994  0012               	return	
  5400  002996                     l3257:
  5401  002996  BE50               	btfsc	ldexp@newexp+1,7,c
  5402  002998  D015               	goto	l3273
  5403  00299A  0450               	decf	ldexp@newexp+1,w,c
  5404  00299C  A0D8               	btfss	status,0,c
  5405  00299E  D012               	goto	l3273
  5406  0029A0  0E00               	movlw	0
  5407  0029A2  6E66               	movwf	_errno+1,c
  5408  0029A4  0E22               	movlw	34
  5409  0029A6  6E65               	movwf	_errno,c
  5410  0029A8  AE4E               	btfss	ldexp@value+2,7,c
  5411  0029AA  D006               	goto	l3269
  5412  0029AC  0EFF               	movlw	255
  5413  0029AE  6E4C               	movwf	?_ldexp,c
  5414  0029B0  0E7F               	movlw	127
  5415  0029B2  6E4D               	movwf	?_ldexp+1,c
  5416  0029B4  0EFF               	movlw	255
  5417  0029B6  D7ED               	goto	L3
  5418  0029B8                     l3269:
  5419  0029B8  0EFF               	movlw	255
  5420  0029BA  6E4C               	movwf	?_ldexp,c
  5421  0029BC  0E7F               	movlw	127
  5422  0029BE  6E4D               	movwf	?_ldexp+1,c
  5423  0029C0  0E7F               	movlw	127
  5424  0029C2  D7E7               	goto	L3
  5425  0029C4                     l3273:
  5426  0029C4  3450               	rlcf	ldexp@newexp+1,w,c
  5427  0029C6  3050               	rrcf	ldexp@newexp+1,w,c
  5428  0029C8  6E52               	movwf	(??_ldexp+1)& (0+255),c
  5429  0029CA  304F               	rrcf	ldexp@newexp,w,c
  5430  0029CC  6E51               	movwf	??_ldexp& (0+255),c
  5431  0029CE  504E               	movf	ldexp@value+2,w,c
  5432  0029D0  1851               	xorwf	??_ldexp,w,c
  5433  0029D2  0B80               	andlw	-128
  5434  0029D4  1851               	xorwf	??_ldexp,w,c
  5435  0029D6  6E4E               	movwf	ldexp@value+2,c
  5436  0029D8  C04F  F051         	movff	ldexp@newexp,??_ldexp
  5437  0029DC  0E01               	movlw	1
  5438  0029DE  1651               	andwf	??_ldexp,f,c
  5439  0029E0  3251               	rrcf	??_ldexp,f,c
  5440  0029E2  3251               	rrcf	??_ldexp,f,c
  5441  0029E4  504D               	movf	ldexp@value+1,w,c
  5442  0029E6  1851               	xorwf	??_ldexp,w,c
  5443  0029E8  0B7F               	andlw	-129
  5444  0029EA  1851               	xorwf	??_ldexp,w,c
  5445  0029EC  6E4D               	movwf	ldexp@value+1,c
  5446  0029EE  C04C  F04C         	movff	ldexp@value,?_ldexp
  5447  0029F2  C04D  F04D         	movff	ldexp@value+1,?_ldexp+1
  5448  0029F6  C04E  F04E         	movff	ldexp@value+2,?_ldexp+2
  5449  0029FA  0012               	return	
  5450  0029FC                     __end_of_ldexp:
  5451                           	opt stack 0
  5452                           tblptru	equ	0xFF8
  5453                           tblptrh	equ	0xFF7
  5454                           tblptrl	equ	0xFF6
  5455                           tablat	equ	0xFF5
  5456                           prodh	equ	0xFF4
  5457                           prodl	equ	0xFF3
  5458                           intcon	equ	0xFF2
  5459                           intcon2	equ	0xFF1
  5460                           intcon3	equ	0xFF0
  5461                           postinc0	equ	0xFEE
  5462                           wreg	equ	0xFE8
  5463                           postdec1	equ	0xFE5
  5464                           fsr1l	equ	0xFE1
  5465                           indf2	equ	0xFDF
  5466                           fsr2h	equ	0xFDA
  5467                           fsr2l	equ	0xFD9
  5468                           status	equ	0xFD8
  5469                           
  5470 ;; *************** function _floor *****************
  5471 ;; Defined at:
  5472 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;  x               3    4[BANK0 ] int 
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;  i               3    7[BANK0 ] int 
  5477 ;;  expon           2   10[BANK0 ] int 
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  3    4[BANK0 ] int 
  5480 ;; Registers used:
  5481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5487 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5490 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;Total ram usage:        8 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; Hardware stack levels required when called:    4
  5494 ;; This function calls:
  5495 ;;		___altoft
  5496 ;;		___ftadd
  5497 ;;		___ftge
  5498 ;;		___fttol
  5499 ;;		_frexp
  5500 ;; This function is called by:
  5501 ;;		_exp
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           	psect	text11
  5506  002690                     __ptext11:
  5507                           	opt stack 0
  5508  002690                     _floor:
  5509                           	opt stack 21
  5510                           
  5511                           ;incstack = 0
  5512  002690  C084  F019         	movff	floor@x,frexp@value
  5513  002694  C085  F01A         	movff	floor@x+1,frexp@value+1
  5514  002698  C086  F01B         	movff	floor@x+2,frexp@value+2
  5515  00269C  0E8A               	movlw	low floor@expon
  5516  00269E  6E1C               	movwf	frexp@eptr,c
  5517  0026A0  0E00               	movlw	high floor@expon
  5518  0026A2  6E1D               	movwf	frexp@eptr+1,c
  5519  0026A4  EC55  F015         	call	_frexp	;wreg free
  5520  0026A8  0100               	movlb	0	; () banked
  5521  0026AA  AF8B               	btfss	(floor@expon+1)& (0+255),7,b
  5522  0026AC  D017               	goto	l4859
  5523                           
  5524                           ; BSR set to: 0
  5525  0026AE  0100               	movlb	0	; () banked
  5526  0026B0  AF86               	btfss	(floor@x+2)& (0+255),7,b
  5527  0026B2  D00A               	goto	l4855
  5528                           
  5529                           ; BSR set to: 0
  5530  0026B4  0E00               	movlw	0
  5531  0026B6  0100               	movlb	0	; () banked
  5532  0026B8  6F84               	movwf	?_floor& (0+255),b
  5533  0026BA  0E80               	movlw	128
  5534  0026BC  0100               	movlb	0	; () banked
  5535  0026BE  6F85               	movwf	(?_floor+1)& (0+255),b
  5536  0026C0  0EBF               	movlw	191
  5537  0026C2  0100               	movlb	0	; () banked
  5538  0026C4  6F86               	movwf	(?_floor+2)& (0+255),b
  5539                           
  5540                           ; BSR set to: 0
  5541  0026C6  0012               	return	
  5542  0026C8                     l4855:
  5543                           
  5544                           ; BSR set to: 0
  5545  0026C8  0E00               	movlw	0
  5546  0026CA  0100               	movlb	0	; () banked
  5547  0026CC  6F84               	movwf	?_floor& (0+255),b
  5548  0026CE  0E00               	movlw	0
  5549  0026D0  0100               	movlb	0	; () banked
  5550  0026D2  6F85               	movwf	(?_floor+1)& (0+255),b
  5551  0026D4  0E00               	movlw	0
  5552  0026D6  0100               	movlb	0	; () banked
  5553  0026D8  6F86               	movwf	(?_floor+2)& (0+255),b
  5554                           
  5555                           ; BSR set to: 0
  5556  0026DA  0012               	return	
  5557  0026DC                     l4859:
  5558                           
  5559                           ; BSR set to: 0
  5560  0026DC  0100               	movlb	0	; () banked
  5561  0026DE  518B               	movf	(floor@expon+1)& (0+255),w,b
  5562  0026E0  E105               	bnz	u4600
  5563  0026E2  0E15               	movlw	21
  5564  0026E4  0100               	movlb	0	; () banked
  5565  0026E6  5D8A               	subwf	floor@expon& (0+255),w,b
  5566  0026E8  A0D8               	btfss	status,0,c
  5567  0026EA  D007               	goto	l4863
  5568  0026EC                     u4600:
  5569                           
  5570                           ; BSR set to: 0
  5571  0026EC  C084  F084         	movff	floor@x,?_floor
  5572  0026F0  C085  F085         	movff	floor@x+1,?_floor+1
  5573  0026F4  C086  F086         	movff	floor@x+2,?_floor+2
  5574  0026F8  0012               	return	
  5575  0026FA                     l4863:
  5576                           
  5577                           ; BSR set to: 0
  5578  0026FA  C084  F040         	movff	floor@x,___fttol@f1
  5579  0026FE  C085  F041         	movff	floor@x+1,___fttol@f1+1
  5580  002702  C086  F042         	movff	floor@x+2,___fttol@f1+2
  5581  002706  EC54  F012         	call	___fttol	;wreg free
  5582  00270A  C040  F04F         	movff	?___fttol,___altoft@c
  5583  00270E  C041  F050         	movff	?___fttol+1,___altoft@c+1
  5584  002712  C042  F051         	movff	?___fttol+2,___altoft@c+2
  5585  002716  C043  F052         	movff	?___fttol+3,___altoft@c+3
  5586  00271A  ECE5  F015         	call	___altoft	;wreg free
  5587  00271E  C04F  F087         	movff	?___altoft,floor@i
  5588  002722  C050  F088         	movff	?___altoft+1,floor@i+1
  5589  002726  C051  F089         	movff	?___altoft+2,floor@i+2
  5590  00272A  C084  F034         	movff	floor@x,___ftge@ff1
  5591  00272E  C085  F035         	movff	floor@x+1,___ftge@ff1+1
  5592  002732  C086  F036         	movff	floor@x+2,___ftge@ff1+2
  5593  002736  C087  F037         	movff	floor@i,___ftge@ff2
  5594  00273A  C088  F038         	movff	floor@i+1,___ftge@ff2+1
  5595  00273E  C089  F039         	movff	floor@i+2,___ftge@ff2+2
  5596  002742  EC9D  F015         	call	___ftge	;wreg free
  5597  002746  B0D8               	btfsc	status,0,c
  5598  002748  D015               	goto	l1089
  5599  00274A  C087  F034         	movff	floor@i,___ftadd@f1
  5600  00274E  C088  F035         	movff	floor@i+1,___ftadd@f1+1
  5601  002752  C089  F036         	movff	floor@i+2,___ftadd@f1+2
  5602  002756  0E00               	movlw	0
  5603  002758  6E37               	movwf	___ftadd@f2,c
  5604  00275A  0E80               	movlw	128
  5605  00275C  6E38               	movwf	___ftadd@f2+1,c
  5606  00275E  0EBF               	movlw	191
  5607  002760  6E39               	movwf	___ftadd@f2+2,c
  5608  002762  ECD0  F00D         	call	___ftadd	;wreg free
  5609  002766  C034  F084         	movff	?___ftadd,?_floor
  5610  00276A  C035  F085         	movff	?___ftadd+1,?_floor+1
  5611  00276E  C036  F086         	movff	?___ftadd+2,?_floor+2
  5612  002772  0012               	return	
  5613  002774                     l1089:
  5614  002774  C087  F084         	movff	floor@i,?_floor
  5615  002778  C088  F085         	movff	floor@i+1,?_floor+1
  5616  00277C  C089  F086         	movff	floor@i+2,?_floor+2
  5617  002780  0012               	return		;funcret
  5618  002782                     __end_of_floor:
  5619                           	opt stack 0
  5620                           tblptru	equ	0xFF8
  5621                           tblptrh	equ	0xFF7
  5622                           tblptrl	equ	0xFF6
  5623                           tablat	equ	0xFF5
  5624                           prodh	equ	0xFF4
  5625                           prodl	equ	0xFF3
  5626                           intcon	equ	0xFF2
  5627                           intcon2	equ	0xFF1
  5628                           intcon3	equ	0xFF0
  5629                           postinc0	equ	0xFEE
  5630                           wreg	equ	0xFE8
  5631                           postdec1	equ	0xFE5
  5632                           fsr1l	equ	0xFE1
  5633                           indf2	equ	0xFDF
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function _frexp *****************
  5639 ;; Defined at:
  5640 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;  value           3   24[COMRAM] int 
  5643 ;;  eptr            2   27[COMRAM] PTR int 
  5644 ;;		 -> log@exponent(2), floor@expon(2), 
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;		None
  5647 ;; Return value:  Size  Location     Type
  5648 ;;                  3   24[COMRAM] PTR int 
  5649 ;; Registers used:
  5650 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5656 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5659 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5660 ;;Total ram usage:        7 bytes
  5661 ;; Hardware stack levels used:    1
  5662 ;; Hardware stack levels required when called:    2
  5663 ;; This function calls:
  5664 ;;		Nothing
  5665 ;; This function is called by:
  5666 ;;		_floor
  5667 ;;		_log
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           	psect	text12
  5672  002AAA                     __ptext12:
  5673                           	opt stack 0
  5674  002AAA                     _frexp:
  5675                           	opt stack 23
  5676                           
  5677                           ;incstack = 0
  5678  002AAA  5019               	movf	frexp@value,w,c
  5679  002AAC  101A               	iorwf	frexp@value+1,w,c
  5680  002AAE  101B               	iorwf	frexp@value+2,w,c
  5681  002AB0  A4D8               	btfss	status,2,c
  5682  002AB2  D00F               	goto	l4767
  5683  002AB4  C01C  FFD9         	movff	frexp@eptr,fsr2l
  5684  002AB8  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  5685  002ABC  0E00               	movlw	0
  5686  002ABE  6EDE               	movwf	postinc2,c
  5687  002AC0  0E00               	movlw	0
  5688  002AC2  6EDD               	movwf	postdec2,c
  5689  002AC4  0E00               	movlw	0
  5690  002AC6  6E19               	movwf	?_frexp,c
  5691  002AC8  0E00               	movlw	0
  5692  002ACA  6E1A               	movwf	?_frexp+1,c
  5693  002ACC  0E00               	movlw	0
  5694  002ACE  6E1B               	movwf	?_frexp+2,c
  5695  002AD0  0012               	return	
  5696  002AD2                     l4767:
  5697  002AD2  501B               	movf	frexp@value+2,w,c
  5698  002AD4  0B7F               	andlw	127
  5699  002AD6  6E1E               	movwf	??_frexp& (0+255),c
  5700  002AD8  6A1F               	clrf	(??_frexp+1)& (0+255),c
  5701  002ADA  90D8               	bcf	status,0,c
  5702  002ADC  361E               	rlcf	??_frexp,f,c
  5703  002ADE  361F               	rlcf	??_frexp+1,f,c
  5704  002AE0  C01C  FFD9         	movff	frexp@eptr,fsr2l
  5705  002AE4  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  5706  002AE8  C01E  FFDE         	movff	??_frexp,postinc2
  5707  002AEC  C01F  FFDD         	movff	??_frexp+1,postdec2
  5708  002AF0  AE1A               	btfss	frexp@value+1,7,c
  5709  002AF2  D003               	goto	u4500
  5710  002AF4  6A1E               	clrf	??_frexp& (0+255),c
  5711  002AF6  2A1E               	incf	??_frexp& (0+255),f,c
  5712  002AF8  D001               	goto	u4508
  5713  002AFA                     u4500:
  5714  002AFA  6A1E               	clrf	??_frexp& (0+255),c
  5715  002AFC                     u4508:
  5716  002AFC  501E               	movf	??_frexp,w,c
  5717  002AFE  C01C  FFD9         	movff	frexp@eptr,fsr2l
  5718  002B02  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  5719  002B06  12DE               	iorwf	postinc2,f,c
  5720  002B08  0E00               	movlw	0
  5721  002B0A  12DD               	iorwf	postdec2,f,c
  5722  002B0C  C01C  FFD9         	movff	frexp@eptr,fsr2l
  5723  002B10  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  5724  002B14  0E82               	movlw	130
  5725  002B16  26DE               	addwf	postinc2,f,c
  5726  002B18  0EFF               	movlw	255
  5727  002B1A  22DD               	addwfc	postdec2,f,c
  5728  002B1C  801B               	bsf	frexp@value+2,0,c
  5729  002B1E  821B               	bsf	frexp@value+2,1,c
  5730  002B20  841B               	bsf	frexp@value+2,2,c
  5731  002B22  861B               	bsf	frexp@value+2,3,c
  5732  002B24  881B               	bsf	frexp@value+2,4,c
  5733  002B26  8A1B               	bsf	frexp@value+2,5,c
  5734  002B28  9C1B               	bcf	frexp@value+2,6,c
  5735  002B2A  9E1A               	bcf	frexp@value+1,7,c
  5736  002B2C  C019  F019         	movff	frexp@value,?_frexp
  5737  002B30  C01A  F01A         	movff	frexp@value+1,?_frexp+1
  5738  002B34  C01B  F01B         	movff	frexp@value+2,?_frexp+2
  5739  002B38  0012               	return	
  5740  002B3A                     __end_of_frexp:
  5741                           	opt stack 0
  5742                           tblptru	equ	0xFF8
  5743                           tblptrh	equ	0xFF7
  5744                           tblptrl	equ	0xFF6
  5745                           tablat	equ	0xFF5
  5746                           prodh	equ	0xFF4
  5747                           prodl	equ	0xFF3
  5748                           intcon	equ	0xFF2
  5749                           intcon2	equ	0xFF1
  5750                           intcon3	equ	0xFF0
  5751                           postinc0	equ	0xFEE
  5752                           wreg	equ	0xFE8
  5753                           postdec1	equ	0xFE5
  5754                           fsr1l	equ	0xFE1
  5755                           indf2	equ	0xFDF
  5756                           postinc2	equ	0xFDE
  5757                           postdec2	equ	0xFDD
  5758                           fsr2h	equ	0xFDA
  5759                           fsr2l	equ	0xFD9
  5760                           status	equ	0xFD8
  5761                           
  5762 ;; *************** function ___fttol *****************
  5763 ;; Defined at:
  5764 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;  f1              3   63[COMRAM] float 
  5767 ;; Auto vars:     Size  Location     Type
  5768 ;;  lval            4   73[COMRAM] unsigned long 
  5769 ;;  exp1            1   77[COMRAM] unsigned char 
  5770 ;;  sign1           1   72[COMRAM] unsigned char 
  5771 ;; Return value:  Size  Location     Type
  5772 ;;                  4   63[COMRAM] long 
  5773 ;; Registers used:
  5774 ;;		wreg, status,2, status,0
  5775 ;; Tracked objects:
  5776 ;;		On entry : 0/0
  5777 ;;		On exit  : 0/0
  5778 ;;		Unchanged: 0/0
  5779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5780 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;Total ram usage:       15 bytes
  5785 ;; Hardware stack levels used:    1
  5786 ;; Hardware stack levels required when called:    2
  5787 ;; This function calls:
  5788 ;;		Nothing
  5789 ;; This function is called by:
  5790 ;;		_dec_to_hex
  5791 ;;		_init_operation
  5792 ;;		_pow
  5793 ;;		_exp
  5794 ;;		_floor
  5795 ;;		_hex_to_dec
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text13
  5800  0024A8                     __ptext13:
  5801                           	opt stack 0
  5802  0024A8                     ___fttol:
  5803                           	opt stack 22
  5804                           
  5805                           ;incstack = 0
  5806  0024A8  C042  F044         	movff	___fttol@f1+2,??___fttol
  5807  0024AC  6A45               	clrf	(??___fttol+1)& (0+255),c
  5808  0024AE  6A46               	clrf	(??___fttol+2)& (0+255),c
  5809  0024B0  3441               	rlcf	___fttol@f1+1,w,c
  5810  0024B2  3644               	rlcf	??___fttol& (0+255),f,c
  5811  0024B4  E301               	bnc	u4411
  5812  0024B6  8045               	bsf	(??___fttol+1)& (0+255),0,c
  5813  0024B8                     u4411:
  5814  0024B8  5044               	movf	??___fttol,w,c
  5815  0024BA  6E4E               	movwf	___fttol@exp1,c
  5816  0024BC  504E               	movf	___fttol@exp1,w,c
  5817  0024BE  A4D8               	btfss	status,2,c
  5818  0024C0  D009               	goto	l4719
  5819  0024C2  0E00               	movlw	0
  5820  0024C4  6E40               	movwf	?___fttol,c
  5821  0024C6  0E00               	movlw	0
  5822  0024C8  6E41               	movwf	?___fttol+1,c
  5823  0024CA  0E00               	movlw	0
  5824  0024CC  6E42               	movwf	?___fttol+2,c
  5825  0024CE  0E00               	movlw	0
  5826  0024D0  6E43               	movwf	?___fttol+3,c
  5827  0024D2  0012               	return	
  5828  0024D4                     l4719:
  5829  0024D4  0E17               	movlw	23
  5830  0024D6  6E44               	movwf	??___fttol& (0+255),c
  5831  0024D8  C040  F045         	movff	___fttol@f1,??___fttol+1
  5832  0024DC  C041  F046         	movff	___fttol@f1+1,??___fttol+2
  5833  0024E0  C042  F047         	movff	___fttol@f1+2,??___fttol+3
  5834  0024E4  2844               	incf	??___fttol,w,c
  5835  0024E6  6E48               	movwf	(??___fttol+4)& (0+255),c
  5836  0024E8  D004               	goto	u4430
  5837  0024EA                     u4435:
  5838  0024EA  90D8               	bcf	status,0,c
  5839  0024EC  3247               	rrcf	??___fttol+3,f,c
  5840  0024EE  3246               	rrcf	??___fttol+2,f,c
  5841  0024F0  3245               	rrcf	??___fttol+1,f,c
  5842  0024F2                     u4430:
  5843  0024F2  2E48               	decfsz	(??___fttol+4)& (0+255),f,c
  5844  0024F4  D7FA               	goto	u4435
  5845  0024F6  5045               	movf	??___fttol+1,w,c
  5846  0024F8  6E49               	movwf	___fttol@sign1,c
  5847  0024FA  8E41               	bsf	___fttol@f1+1,7,c
  5848  0024FC  0EFF               	movlw	255
  5849  0024FE  1640               	andwf	___fttol@f1,f,c
  5850  002500  0EFF               	movlw	255
  5851  002502  1641               	andwf	___fttol@f1+1,f,c
  5852  002504  0E00               	movlw	0
  5853  002506  1642               	andwf	___fttol@f1+2,f,c
  5854  002508  5040               	movf	___fttol@f1,w,c
  5855  00250A  6E4A               	movwf	___fttol@lval,c
  5856  00250C  5041               	movf	___fttol@f1+1,w,c
  5857  00250E  6E4B               	movwf	___fttol@lval+1,c
  5858  002510  5042               	movf	___fttol@f1+2,w,c
  5859  002512  6E4C               	movwf	___fttol@lval+2,c
  5860  002514  6A4D               	clrf	___fttol@lval+3,c
  5861  002516  0E8E               	movlw	142
  5862  002518  5E4E               	subwf	___fttol@exp1,f,c
  5863  00251A  AE4E               	btfss	___fttol@exp1,7,c
  5864  00251C  D016               	goto	l4741
  5865  00251E  504E               	movf	___fttol@exp1,w,c
  5866  002520  0A80               	xorlw	128
  5867  002522  0F8F               	addlw	143
  5868  002524  B0D8               	btfsc	status,0,c
  5869  002526  D009               	goto	l4737
  5870  002528  0E00               	movlw	0
  5871  00252A  6E40               	movwf	?___fttol,c
  5872  00252C  0E00               	movlw	0
  5873  00252E  6E41               	movwf	?___fttol+1,c
  5874  002530  0E00               	movlw	0
  5875  002532  6E42               	movwf	?___fttol+2,c
  5876  002534  0E00               	movlw	0
  5877  002536  6E43               	movwf	?___fttol+3,c
  5878  002538  0012               	return	
  5879  00253A                     l4737:
  5880  00253A  90D8               	bcf	status,0,c
  5881  00253C  324D               	rrcf	___fttol@lval+3,f,c
  5882  00253E  324C               	rrcf	___fttol@lval+2,f,c
  5883  002540  324B               	rrcf	___fttol@lval+1,f,c
  5884  002542  324A               	rrcf	___fttol@lval,f,c
  5885  002544  3E4E               	incfsz	___fttol@exp1,f,c
  5886  002546  D7F9               	goto	l4737
  5887  002548  D015               	goto	l4751
  5888  00254A                     l4741:
  5889  00254A  0E17               	movlw	23
  5890  00254C  644E               	cpfsgt	___fttol@exp1,c
  5891  00254E  D00F               	goto	l4749
  5892  002550  0E00               	movlw	0
  5893  002552  6E40               	movwf	?___fttol,c
  5894  002554  0E00               	movlw	0
  5895  002556  6E41               	movwf	?___fttol+1,c
  5896  002558  0E00               	movlw	0
  5897  00255A  6E42               	movwf	?___fttol+2,c
  5898  00255C  0E00               	movlw	0
  5899  00255E  6E43               	movwf	?___fttol+3,c
  5900  002560  0012               	return	
  5901  002562                     l4747:
  5902  002562  90D8               	bcf	status,0,c
  5903  002564  364A               	rlcf	___fttol@lval,f,c
  5904  002566  364B               	rlcf	___fttol@lval+1,f,c
  5905  002568  364C               	rlcf	___fttol@lval+2,f,c
  5906  00256A  364D               	rlcf	___fttol@lval+3,f,c
  5907  00256C  064E               	decf	___fttol@exp1,f,c
  5908  00256E                     l4749:
  5909  00256E  504E               	movf	___fttol@exp1,w,c
  5910  002570  A4D8               	btfss	status,2,c
  5911  002572  D7F7               	goto	l4747
  5912  002574                     l4751:
  5913  002574  5049               	movf	___fttol@sign1,w,c
  5914  002576  B4D8               	btfsc	status,2,c
  5915  002578  D008               	goto	l4755
  5916  00257A  1E4D               	comf	___fttol@lval+3,f,c
  5917  00257C  1E4C               	comf	___fttol@lval+2,f,c
  5918  00257E  1E4B               	comf	___fttol@lval+1,f,c
  5919  002580  6C4A               	negf	___fttol@lval,c
  5920  002582  0E00               	movlw	0
  5921  002584  224B               	addwfc	___fttol@lval+1,f,c
  5922  002586  224C               	addwfc	___fttol@lval+2,f,c
  5923  002588  224D               	addwfc	___fttol@lval+3,f,c
  5924  00258A                     l4755:
  5925  00258A  C04A  F040         	movff	___fttol@lval,?___fttol
  5926  00258E  C04B  F041         	movff	___fttol@lval+1,?___fttol+1
  5927  002592  C04C  F042         	movff	___fttol@lval+2,?___fttol+2
  5928  002596  C04D  F043         	movff	___fttol@lval+3,?___fttol+3
  5929  00259A  0012               	return	
  5930  00259C                     __end_of___fttol:
  5931                           	opt stack 0
  5932                           tblptru	equ	0xFF8
  5933                           tblptrh	equ	0xFF7
  5934                           tblptrl	equ	0xFF6
  5935                           tablat	equ	0xFF5
  5936                           prodh	equ	0xFF4
  5937                           prodl	equ	0xFF3
  5938                           intcon	equ	0xFF2
  5939                           intcon2	equ	0xFF1
  5940                           intcon3	equ	0xFF0
  5941                           postinc0	equ	0xFEE
  5942                           wreg	equ	0xFE8
  5943                           postdec1	equ	0xFE5
  5944                           fsr1l	equ	0xFE1
  5945                           indf2	equ	0xFDF
  5946                           postinc2	equ	0xFDE
  5947                           postdec2	equ	0xFDD
  5948                           fsr2h	equ	0xFDA
  5949                           fsr2l	equ	0xFD9
  5950                           status	equ	0xFD8
  5951                           
  5952 ;; *************** function ___ftge *****************
  5953 ;; Defined at:
  5954 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  ff1             3   51[COMRAM] float 
  5957 ;;  ff2             3   54[COMRAM] float 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;		None
  5960 ;; Return value:  Size  Location     Type
  5961 ;;		None               void
  5962 ;; Registers used:
  5963 ;;		wreg, status,2, status,0
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5969 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;Total ram usage:        9 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    2
  5976 ;; This function calls:
  5977 ;;		Nothing
  5978 ;; This function is called by:
  5979 ;;		_init_operation
  5980 ;;		_pow
  5981 ;;		_exp
  5982 ;;		_floor
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           	psect	text14
  5987  002B3A                     __ptext14:
  5988                           	opt stack 0
  5989  002B3A                     ___ftge:
  5990                           	opt stack 22
  5991                           
  5992                           ;incstack = 0
  5993  002B3A  AE36               	btfss	___ftge@ff1+2,7,c
  5994  002B3C  D016               	goto	l4699
  5995  002B3E  C034  F03A         	movff	___ftge@ff1,??___ftge
  5996  002B42  C035  F03B         	movff	___ftge@ff1+1,??___ftge+1
  5997  002B46  C036  F03C         	movff	___ftge@ff1+2,??___ftge+2
  5998  002B4A  1E3A               	comf	??___ftge,f,c
  5999  002B4C  1E3B               	comf	??___ftge+1,f,c
  6000  002B4E  1E3C               	comf	??___ftge+2,f,c
  6001  002B50  2A3A               	incf	??___ftge,f,c
  6002  002B52  0E00               	movlw	0
  6003  002B54  223B               	addwfc	??___ftge+1,f,c
  6004  002B56  223C               	addwfc	??___ftge+2,f,c
  6005  002B58  0E00               	movlw	0
  6006  002B5A  243A               	addwf	??___ftge,w,c
  6007  002B5C  6E34               	movwf	___ftge@ff1,c
  6008  002B5E  0E00               	movlw	0
  6009  002B60  203B               	addwfc	??___ftge+1,w,c
  6010  002B62  6E35               	movwf	___ftge@ff1+1,c
  6011  002B64  0E80               	movlw	128
  6012  002B66  203C               	addwfc	??___ftge+2,w,c
  6013  002B68  6E36               	movwf	___ftge@ff1+2,c
  6014  002B6A                     l4699:
  6015  002B6A  AE39               	btfss	___ftge@ff2+2,7,c
  6016  002B6C  D016               	goto	l4703
  6017  002B6E  C037  F03A         	movff	___ftge@ff2,??___ftge
  6018  002B72  C038  F03B         	movff	___ftge@ff2+1,??___ftge+1
  6019  002B76  C039  F03C         	movff	___ftge@ff2+2,??___ftge+2
  6020  002B7A  1E3A               	comf	??___ftge,f,c
  6021  002B7C  1E3B               	comf	??___ftge+1,f,c
  6022  002B7E  1E3C               	comf	??___ftge+2,f,c
  6023  002B80  2A3A               	incf	??___ftge,f,c
  6024  002B82  0E00               	movlw	0
  6025  002B84  223B               	addwfc	??___ftge+1,f,c
  6026  002B86  223C               	addwfc	??___ftge+2,f,c
  6027  002B88  0E00               	movlw	0
  6028  002B8A  243A               	addwf	??___ftge,w,c
  6029  002B8C  6E37               	movwf	___ftge@ff2,c
  6030  002B8E  0E00               	movlw	0
  6031  002B90  203B               	addwfc	??___ftge+1,w,c
  6032  002B92  6E38               	movwf	___ftge@ff2+1,c
  6033  002B94  0E80               	movlw	128
  6034  002B96  203C               	addwfc	??___ftge+2,w,c
  6035  002B98  6E39               	movwf	___ftge@ff2+2,c
  6036  002B9A                     l4703:
  6037  002B9A  0E00               	movlw	0
  6038  002B9C  1A34               	xorwf	___ftge@ff1,f,c
  6039  002B9E  0E00               	movlw	0
  6040  002BA0  1A35               	xorwf	___ftge@ff1+1,f,c
  6041  002BA2  0E80               	movlw	128
  6042  002BA4  1A36               	xorwf	___ftge@ff1+2,f,c
  6043  002BA6  0E00               	movlw	0
  6044  002BA8  1A37               	xorwf	___ftge@ff2,f,c
  6045  002BAA  0E00               	movlw	0
  6046  002BAC  1A38               	xorwf	___ftge@ff2+1,f,c
  6047  002BAE  0E80               	movlw	128
  6048  002BB0  1A39               	xorwf	___ftge@ff2+2,f,c
  6049  002BB2  5037               	movf	___ftge@ff2,w,c
  6050  002BB4  5C34               	subwf	___ftge@ff1,w,c
  6051  002BB6  5038               	movf	___ftge@ff2+1,w,c
  6052  002BB8  5835               	subwfb	___ftge@ff1+1,w,c
  6053  002BBA  5039               	movf	___ftge@ff2+2,w,c
  6054  002BBC  5836               	subwfb	___ftge@ff1+2,w,c
  6055  002BBE  B0D8               	btfsc	status,0,c
  6056  002BC0  D002               	goto	l4709
  6057  002BC2  90D8               	bcf	status,0,c
  6058  002BC4  0012               	return	
  6059  002BC6                     l4709:
  6060  002BC6  80D8               	bsf	status,0,c
  6061  002BC8  0012               	return	
  6062  002BCA                     __end_of___ftge:
  6063                           	opt stack 0
  6064                           tblptru	equ	0xFF8
  6065                           tblptrh	equ	0xFF7
  6066                           tblptrl	equ	0xFF6
  6067                           tablat	equ	0xFF5
  6068                           prodh	equ	0xFF4
  6069                           prodl	equ	0xFF3
  6070                           intcon	equ	0xFF2
  6071                           intcon2	equ	0xFF1
  6072                           intcon3	equ	0xFF0
  6073                           postinc0	equ	0xFEE
  6074                           wreg	equ	0xFE8
  6075                           postdec1	equ	0xFE5
  6076                           fsr1l	equ	0xFE1
  6077                           indf2	equ	0xFDF
  6078                           postinc2	equ	0xFDE
  6079                           postdec2	equ	0xFDD
  6080                           fsr2h	equ	0xFDA
  6081                           fsr2l	equ	0xFD9
  6082                           status	equ	0xFD8
  6083                           
  6084 ;; *************** function ___altoft *****************
  6085 ;; Defined at:
  6086 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  c               4   78[COMRAM] long 
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;  sign            1   83[COMRAM] unsigned char 
  6091 ;;  exp             1   82[COMRAM] unsigned char 
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  3   78[COMRAM] float 
  6094 ;; Registers used:
  6095 ;;		wreg, status,2, status,0, cstack
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6101 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6104 ;;      Totals:         6       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;Total ram usage:       10 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:    3
  6108 ;; This function calls:
  6109 ;;		___ftpack
  6110 ;; This function is called by:
  6111 ;;		_floor
  6112 ;;		_hex_to_dec
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text15
  6117  002BCA                     __ptext15:
  6118                           	opt stack 0
  6119  002BCA                     ___altoft:
  6120                           	opt stack 21
  6121                           
  6122                           ;incstack = 0
  6123  002BCA  0E00               	movlw	0
  6124  002BCC  6E54               	movwf	___altoft@sign,c
  6125  002BCE  0E8E               	movlw	142
  6126  002BD0  6E53               	movwf	___altoft@exp,c
  6127  002BD2  AE52               	btfss	___altoft@c+3,7,c
  6128  002BD4  D011               	goto	l4571
  6129  002BD6  1E52               	comf	___altoft@c+3,f,c
  6130  002BD8  1E51               	comf	___altoft@c+2,f,c
  6131  002BDA  1E50               	comf	___altoft@c+1,f,c
  6132  002BDC  6C4F               	negf	___altoft@c,c
  6133  002BDE  0E00               	movlw	0
  6134  002BE0  2250               	addwfc	___altoft@c+1,f,c
  6135  002BE2  2251               	addwfc	___altoft@c+2,f,c
  6136  002BE4  2252               	addwfc	___altoft@c+3,f,c
  6137  002BE6  0E01               	movlw	1
  6138  002BE8  6E54               	movwf	___altoft@sign,c
  6139  002BEA  D006               	goto	l4571
  6140  002BEC                     l4569:
  6141  002BEC  90D8               	bcf	status,0,c
  6142  002BEE  3252               	rrcf	___altoft@c+3,f,c
  6143  002BF0  3251               	rrcf	___altoft@c+2,f,c
  6144  002BF2  3250               	rrcf	___altoft@c+1,f,c
  6145  002BF4  324F               	rrcf	___altoft@c,f,c
  6146  002BF6  2A53               	incf	___altoft@exp,f,c
  6147  002BF8                     l4571:
  6148  002BF8  0E00               	movlw	0
  6149  002BFA  144F               	andwf	___altoft@c,w,c
  6150  002BFC  0100               	movlb	0	; () banked
  6151  002BFE  6F80               	movwf	??___altoft& (0+255),b
  6152  002C00  0E00               	movlw	0
  6153  002C02  1450               	andwf	___altoft@c+1,w,c
  6154  002C04  0100               	movlb	0	; () banked
  6155  002C06  6F81               	movwf	(??___altoft+1)& (0+255),b
  6156  002C08  0E00               	movlw	0
  6157  002C0A  1451               	andwf	___altoft@c+2,w,c
  6158  002C0C  0100               	movlb	0	; () banked
  6159  002C0E  6F82               	movwf	(??___altoft+2)& (0+255),b
  6160  002C10  0EFF               	movlw	255
  6161  002C12  1452               	andwf	___altoft@c+3,w,c
  6162  002C14  0100               	movlb	0	; () banked
  6163  002C16  6F83               	movwf	(??___altoft+3)& (0+255),b
  6164  002C18  0100               	movlb	0	; () banked
  6165  002C1A  5180               	movf	??___altoft& (0+255),w,b
  6166  002C1C  0100               	movlb	0	; () banked
  6167  002C1E  1181               	iorwf	(??___altoft+1)& (0+255),w,b
  6168  002C20  0100               	movlb	0	; () banked
  6169  002C22  1182               	iorwf	(??___altoft+2)& (0+255),w,b
  6170  002C24  0100               	movlb	0	; () banked
  6171  002C26  1183               	iorwf	(??___altoft+3)& (0+255),w,b
  6172  002C28  A4D8               	btfss	status,2,c
  6173  002C2A  D7E0               	goto	l4569
  6174                           
  6175                           ; BSR set to: 0
  6176                           
  6177                           ; BSR set to: 0
  6178  002C2C  C04F  F019         	movff	___altoft@c,___ftpack@arg
  6179  002C30  C050  F01A         	movff	___altoft@c+1,___ftpack@arg+1
  6180  002C34  C051  F01B         	movff	___altoft@c+2,___ftpack@arg+2
  6181  002C38  C053  F01C         	movff	___altoft@exp,___ftpack@exp
  6182  002C3C  C054  F01D         	movff	___altoft@sign,___ftpack@sign
  6183  002C40  ECFE  F014         	call	___ftpack	;wreg free
  6184  002C44  C019  F04F         	movff	?___ftpack,?___altoft
  6185  002C48  C01A  F050         	movff	?___ftpack+1,?___altoft+1
  6186  002C4C  C01B  F051         	movff	?___ftpack+2,?___altoft+2
  6187  002C50  0012               	return	
  6188  002C52                     __end_of___altoft:
  6189                           	opt stack 0
  6190                           tblptru	equ	0xFF8
  6191                           tblptrh	equ	0xFF7
  6192                           tblptrl	equ	0xFF6
  6193                           tablat	equ	0xFF5
  6194                           prodh	equ	0xFF4
  6195                           prodl	equ	0xFF3
  6196                           intcon	equ	0xFF2
  6197                           intcon2	equ	0xFF1
  6198                           intcon3	equ	0xFF0
  6199                           postinc0	equ	0xFEE
  6200                           wreg	equ	0xFE8
  6201                           postdec1	equ	0xFE5
  6202                           fsr1l	equ	0xFE1
  6203                           indf2	equ	0xFDF
  6204                           postinc2	equ	0xFDE
  6205                           postdec2	equ	0xFDD
  6206                           fsr2h	equ	0xFDA
  6207                           fsr2l	equ	0xFD9
  6208                           status	equ	0xFD8
  6209                           
  6210 ;; *************** function _eval_poly *****************
  6211 ;; Defined at:
  6212 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;  x               3   63[COMRAM] float 
  6215 ;;  d               2   66[COMRAM] PTR const 
  6216 ;;		 -> log@coeff(27), exp@coeff(30), 
  6217 ;;  n               2   68[COMRAM] int 
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;  res             3   72[COMRAM] int 
  6220 ;; Return value:  Size  Location     Type
  6221 ;;                  3   63[COMRAM] int 
  6222 ;; Registers used:
  6223 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6224 ;; Tracked objects:
  6225 ;;		On entry : 0/0
  6226 ;;		On exit  : 0/0
  6227 ;;		Unchanged: 0/0
  6228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6229 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6232 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6233 ;;Total ram usage:       12 bytes
  6234 ;; Hardware stack levels used:    1
  6235 ;; Hardware stack levels required when called:    4
  6236 ;; This function calls:
  6237 ;;		___ftadd
  6238 ;;		___ftmul
  6239 ;;		___wmul
  6240 ;; This function is called by:
  6241 ;;		_exp
  6242 ;;		_log
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           	psect	text16
  6247  002868                     __ptext16:
  6248                           	opt stack 0
  6249  002868                     _eval_poly:
  6250                           	opt stack 21
  6251                           
  6252                           ;incstack = 0
  6253  002868  C045  F019         	movff	eval_poly@n,___wmul@multiplier
  6254  00286C  C046  F01A         	movff	eval_poly@n+1,___wmul@multiplier+1
  6255  002870  0E00               	movlw	0
  6256  002872  6E1C               	movwf	___wmul@multiplicand+1,c
  6257  002874  0E03               	movlw	3
  6258  002876  6E1B               	movwf	___wmul@multiplicand,c
  6259  002878  EC35  F019         	call	___wmul	;wreg free
  6260  00287C  C043  F047         	movff	eval_poly@d,??_eval_poly
  6261  002880  C044  F048         	movff	eval_poly@d+1,??_eval_poly+1
  6262  002884  5019               	movf	?___wmul,w,c
  6263  002886  2647               	addwf	??_eval_poly,f,c
  6264  002888  501A               	movf	?___wmul+1,w,c
  6265  00288A  2248               	addwfc	??_eval_poly+1,f,c
  6266  00288C  C047  FFF6         	movff	??_eval_poly,tblptrl
  6267  002890  C048  FFF7         	movff	??_eval_poly+1,tblptrh
  6268  002894                     	if	0	;tblptru may be non-zero
  6269  002894                     	endif
  6270  002894                     	if	0	;tblptru may be non-zero
  6271  002894                     	endif
  6272  002894  0009               	tblrd		*+
  6273  002896  CFF5 F049          	movff	tablat,eval_poly@res
  6274  00289A  0009               	tblrd		*+
  6275  00289C  CFF5 F04A          	movff	tablat,eval_poly@res+1
  6276  0028A0  000A               	tblrd		*-
  6277  0028A2  CFF5 F04B          	movff	tablat,eval_poly@res+2
  6278  0028A6  D03E               	goto	l4873
  6279  0028A8                     l4871:
  6280  0028A8  C049  F028         	movff	eval_poly@res,___ftmul@f2
  6281  0028AC  C04A  F029         	movff	eval_poly@res+1,___ftmul@f2+1
  6282  0028B0  C04B  F02A         	movff	eval_poly@res+2,___ftmul@f2+2
  6283  0028B4  C040  F025         	movff	eval_poly@x,___ftmul@f1
  6284  0028B8  C041  F026         	movff	eval_poly@x+1,___ftmul@f1+1
  6285  0028BC  C042  F027         	movff	eval_poly@x+2,___ftmul@f1+2
  6286  0028C0  ECCE  F012         	call	___ftmul	;wreg free
  6287  0028C4  C025  F034         	movff	?___ftmul,___ftadd@f1
  6288  0028C8  C026  F035         	movff	?___ftmul+1,___ftadd@f1+1
  6289  0028CC  C027  F036         	movff	?___ftmul+2,___ftadd@f1+2
  6290  0028D0  0E00               	movlw	0
  6291  0028D2  6E1C               	movwf	___wmul@multiplicand+1,c
  6292  0028D4  0E03               	movlw	3
  6293  0028D6  6E1B               	movwf	___wmul@multiplicand,c
  6294  0028D8  0645               	decf	eval_poly@n,f,c
  6295  0028DA  A0D8               	btfss	status,0,c
  6296  0028DC  0646               	decf	eval_poly@n+1,f,c
  6297  0028DE  C045  F019         	movff	eval_poly@n,___wmul@multiplier
  6298  0028E2  C046  F01A         	movff	eval_poly@n+1,___wmul@multiplier+1
  6299  0028E6  EC35  F019         	call	___wmul	;wreg free
  6300  0028EA  C043  F047         	movff	eval_poly@d,??_eval_poly
  6301  0028EE  C044  F048         	movff	eval_poly@d+1,??_eval_poly+1
  6302  0028F2  5019               	movf	?___wmul,w,c
  6303  0028F4  2647               	addwf	??_eval_poly,f,c
  6304  0028F6  501A               	movf	?___wmul+1,w,c
  6305  0028F8  2248               	addwfc	??_eval_poly+1,f,c
  6306  0028FA  C047  FFF6         	movff	??_eval_poly,tblptrl
  6307  0028FE  C048  FFF7         	movff	??_eval_poly+1,tblptrh
  6308  002902                     	if	0	;tblptru may be non-zero
  6309  002902                     	endif
  6310  002902                     	if	0	;tblptru may be non-zero
  6311  002902                     	endif
  6312  002902  0009               	tblrd		*+
  6313  002904  CFF5 F037          	movff	tablat,___ftadd@f2
  6314  002908  0009               	tblrd		*+
  6315  00290A  CFF5 F038          	movff	tablat,___ftadd@f2+1
  6316  00290E  000A               	tblrd		*-
  6317  002910  CFF5 F039          	movff	tablat,___ftadd@f2+2
  6318  002914  ECD0  F00D         	call	___ftadd	;wreg free
  6319  002918  C034  F049         	movff	?___ftadd,eval_poly@res
  6320  00291C  C035  F04A         	movff	?___ftadd+1,eval_poly@res+1
  6321  002920  C036  F04B         	movff	?___ftadd+2,eval_poly@res+2
  6322  002924                     l4873:
  6323  002924  5045               	movf	eval_poly@n,w,c
  6324  002926  1046               	iorwf	eval_poly@n+1,w,c
  6325  002928  A4D8               	btfss	status,2,c
  6326  00292A  D7BE               	goto	l4871
  6327  00292C  C049  F040         	movff	eval_poly@res,?_eval_poly
  6328  002930  C04A  F041         	movff	eval_poly@res+1,?_eval_poly+1
  6329  002934  C04B  F042         	movff	eval_poly@res+2,?_eval_poly+2
  6330  002938  0012               	return		;funcret
  6331  00293A                     __end_of_eval_poly:
  6332                           	opt stack 0
  6333                           tblptru	equ	0xFF8
  6334                           tblptrh	equ	0xFF7
  6335                           tblptrl	equ	0xFF6
  6336                           tablat	equ	0xFF5
  6337                           prodh	equ	0xFF4
  6338                           prodl	equ	0xFF3
  6339                           intcon	equ	0xFF2
  6340                           intcon2	equ	0xFF1
  6341                           intcon3	equ	0xFF0
  6342                           postinc0	equ	0xFEE
  6343                           wreg	equ	0xFE8
  6344                           postdec1	equ	0xFE5
  6345                           fsr1l	equ	0xFE1
  6346                           indf2	equ	0xFDF
  6347                           postinc2	equ	0xFDE
  6348                           postdec2	equ	0xFDD
  6349                           fsr2h	equ	0xFDA
  6350                           fsr2l	equ	0xFD9
  6351                           status	equ	0xFD8
  6352                           
  6353 ;; *************** function ___ftmul *****************
  6354 ;; Defined at:
  6355 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;  f1              3   36[COMRAM] float 
  6358 ;;  f2              3   39[COMRAM] float 
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;  f3_as_produc    3   46[COMRAM] unsigned um
  6361 ;;  sign            1   50[COMRAM] unsigned char 
  6362 ;;  cntr            1   49[COMRAM] unsigned char 
  6363 ;;  exp             1   45[COMRAM] unsigned char 
  6364 ;; Return value:  Size  Location     Type
  6365 ;;                  3   36[COMRAM] float 
  6366 ;; Registers used:
  6367 ;;		wreg, status,2, status,0, cstack
  6368 ;; Tracked objects:
  6369 ;;		On entry : 0/0
  6370 ;;		On exit  : 0/0
  6371 ;;		Unchanged: 0/0
  6372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6373 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6374 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;Total ram usage:       15 bytes
  6378 ;; Hardware stack levels used:    1
  6379 ;; Hardware stack levels required when called:    3
  6380 ;; This function calls:
  6381 ;;		___ftpack
  6382 ;; This function is called by:
  6383 ;;		_dec_to_hex
  6384 ;;		_init_operation
  6385 ;;		_pow
  6386 ;;		_exp
  6387 ;;		_log
  6388 ;;		_eval_poly
  6389 ;;		_hex_to_dec
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text17
  6394  00259C                     __ptext17:
  6395                           	opt stack 0
  6396  00259C                     ___ftmul:
  6397                           	opt stack 21
  6398                           
  6399                           ;incstack = 0
  6400  00259C  C027  F02B         	movff	___ftmul@f1+2,??___ftmul
  6401  0025A0  6A2C               	clrf	(??___ftmul+1)& (0+255),c
  6402  0025A2  6A2D               	clrf	(??___ftmul+2)& (0+255),c
  6403  0025A4  3426               	rlcf	___ftmul@f1+1,w,c
  6404  0025A6  362B               	rlcf	??___ftmul& (0+255),f,c
  6405  0025A8  E301               	bnc	u4321
  6406  0025AA  802C               	bsf	(??___ftmul+1)& (0+255),0,c
  6407  0025AC                     u4321:
  6408  0025AC  502B               	movf	??___ftmul,w,c
  6409  0025AE  6E2E               	movwf	___ftmul@exp,c
  6410  0025B0  502E               	movf	___ftmul@exp,w,c
  6411  0025B2  A4D8               	btfss	status,2,c
  6412  0025B4  D007               	goto	l4653
  6413  0025B6  0E00               	movlw	0
  6414  0025B8  6E25               	movwf	?___ftmul,c
  6415  0025BA  0E00               	movlw	0
  6416  0025BC  6E26               	movwf	?___ftmul+1,c
  6417  0025BE  0E00               	movlw	0
  6418  0025C0  6E27               	movwf	?___ftmul+2,c
  6419  0025C2  0012               	return	
  6420  0025C4                     l4653:
  6421  0025C4  C02A  F02B         	movff	___ftmul@f2+2,??___ftmul
  6422  0025C8  6A2C               	clrf	(??___ftmul+1)& (0+255),c
  6423  0025CA  6A2D               	clrf	(??___ftmul+2)& (0+255),c
  6424  0025CC  3429               	rlcf	___ftmul@f2+1,w,c
  6425  0025CE  362B               	rlcf	??___ftmul& (0+255),f,c
  6426  0025D0  E301               	bnc	u4341
  6427  0025D2  802C               	bsf	(??___ftmul+1)& (0+255),0,c
  6428  0025D4                     u4341:
  6429  0025D4  502B               	movf	??___ftmul,w,c
  6430  0025D6  6E33               	movwf	___ftmul@sign,c
  6431  0025D8  5033               	movf	___ftmul@sign,w,c
  6432  0025DA  A4D8               	btfss	status,2,c
  6433  0025DC  D007               	goto	l4659
  6434  0025DE  0E00               	movlw	0
  6435  0025E0  6E25               	movwf	?___ftmul,c
  6436  0025E2  0E00               	movlw	0
  6437  0025E4  6E26               	movwf	?___ftmul+1,c
  6438  0025E6  0E00               	movlw	0
  6439  0025E8  6E27               	movwf	?___ftmul+2,c
  6440  0025EA  0012               	return	
  6441  0025EC                     l4659:
  6442  0025EC  5033               	movf	___ftmul@sign,w,c
  6443  0025EE  0F7B               	addlw	123
  6444  0025F0  262E               	addwf	___ftmul@exp,f,c
  6445  0025F2  C027  F033         	movff	___ftmul@f1+2,___ftmul@sign
  6446  0025F6  502A               	movf	___ftmul@f2+2,w,c
  6447  0025F8  1A33               	xorwf	___ftmul@sign,f,c
  6448  0025FA  0E80               	movlw	128
  6449  0025FC  1633               	andwf	___ftmul@sign,f,c
  6450  0025FE  8E26               	bsf	___ftmul@f1+1,7,c
  6451  002600  8E29               	bsf	___ftmul@f2+1,7,c
  6452  002602  0EFF               	movlw	255
  6453  002604  1628               	andwf	___ftmul@f2,f,c
  6454  002606  0EFF               	movlw	255
  6455  002608  1629               	andwf	___ftmul@f2+1,f,c
  6456  00260A  0E00               	movlw	0
  6457  00260C  162A               	andwf	___ftmul@f2+2,f,c
  6458  00260E  0E00               	movlw	0
  6459  002610  6E2F               	movwf	___ftmul@f3_as_product,c
  6460  002612  0E00               	movlw	0
  6461  002614  6E30               	movwf	___ftmul@f3_as_product+1,c
  6462  002616  0E00               	movlw	0
  6463  002618  6E31               	movwf	___ftmul@f3_as_product+2,c
  6464  00261A  0E07               	movlw	7
  6465  00261C  6E32               	movwf	___ftmul@cntr,c
  6466  00261E                     l4673:
  6467  00261E  A025               	btfss	___ftmul@f1,0,c
  6468  002620  D006               	goto	l4677
  6469  002622  5028               	movf	___ftmul@f2,w,c
  6470  002624  262F               	addwf	___ftmul@f3_as_product,f,c
  6471  002626  5029               	movf	___ftmul@f2+1,w,c
  6472  002628  2230               	addwfc	___ftmul@f3_as_product+1,f,c
  6473  00262A  502A               	movf	___ftmul@f2+2,w,c
  6474  00262C  2231               	addwfc	___ftmul@f3_as_product+2,f,c
  6475  00262E                     l4677:
  6476  00262E  90D8               	bcf	status,0,c
  6477  002630  3227               	rrcf	___ftmul@f1+2,f,c
  6478  002632  3226               	rrcf	___ftmul@f1+1,f,c
  6479  002634  3225               	rrcf	___ftmul@f1,f,c
  6480  002636  90D8               	bcf	status,0,c
  6481  002638  3628               	rlcf	___ftmul@f2,f,c
  6482  00263A  3629               	rlcf	___ftmul@f2+1,f,c
  6483  00263C  362A               	rlcf	___ftmul@f2+2,f,c
  6484  00263E  2E32               	decfsz	___ftmul@cntr,f,c
  6485  002640  D7EE               	goto	l4673
  6486  002642  0E09               	movlw	9
  6487  002644  6E32               	movwf	___ftmul@cntr,c
  6488  002646                     l4683:
  6489  002646  A025               	btfss	___ftmul@f1,0,c
  6490  002648  D006               	goto	l4687
  6491  00264A  5028               	movf	___ftmul@f2,w,c
  6492  00264C  262F               	addwf	___ftmul@f3_as_product,f,c
  6493  00264E  5029               	movf	___ftmul@f2+1,w,c
  6494  002650  2230               	addwfc	___ftmul@f3_as_product+1,f,c
  6495  002652  502A               	movf	___ftmul@f2+2,w,c
  6496  002654  2231               	addwfc	___ftmul@f3_as_product+2,f,c
  6497  002656                     l4687:
  6498  002656  90D8               	bcf	status,0,c
  6499  002658  3227               	rrcf	___ftmul@f1+2,f,c
  6500  00265A  3226               	rrcf	___ftmul@f1+1,f,c
  6501  00265C  3225               	rrcf	___ftmul@f1,f,c
  6502  00265E  90D8               	bcf	status,0,c
  6503  002660  3231               	rrcf	___ftmul@f3_as_product+2,f,c
  6504  002662  3230               	rrcf	___ftmul@f3_as_product+1,f,c
  6505  002664  322F               	rrcf	___ftmul@f3_as_product,f,c
  6506  002666  2E32               	decfsz	___ftmul@cntr,f,c
  6507  002668  D7EE               	goto	l4683
  6508  00266A  C02F  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  6509  00266E  C030  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6510  002672  C031  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6511  002676  C02E  F01C         	movff	___ftmul@exp,___ftpack@exp
  6512  00267A  C033  F01D         	movff	___ftmul@sign,___ftpack@sign
  6513  00267E  ECFE  F014         	call	___ftpack	;wreg free
  6514  002682  C019  F025         	movff	?___ftpack,?___ftmul
  6515  002686  C01A  F026         	movff	?___ftpack+1,?___ftmul+1
  6516  00268A  C01B  F027         	movff	?___ftpack+2,?___ftmul+2
  6517  00268E  0012               	return	
  6518  002690                     __end_of___ftmul:
  6519                           	opt stack 0
  6520                           tblptru	equ	0xFF8
  6521                           tblptrh	equ	0xFF7
  6522                           tblptrl	equ	0xFF6
  6523                           tablat	equ	0xFF5
  6524                           prodh	equ	0xFF4
  6525                           prodl	equ	0xFF3
  6526                           intcon	equ	0xFF2
  6527                           intcon2	equ	0xFF1
  6528                           intcon3	equ	0xFF0
  6529                           postinc0	equ	0xFEE
  6530                           wreg	equ	0xFE8
  6531                           postdec1	equ	0xFE5
  6532                           fsr1l	equ	0xFE1
  6533                           indf2	equ	0xFDF
  6534                           postinc2	equ	0xFDE
  6535                           postdec2	equ	0xFDD
  6536                           fsr2h	equ	0xFDA
  6537                           fsr2l	equ	0xFD9
  6538                           status	equ	0xFD8
  6539                           
  6540 ;; *************** function ___ftsub *****************
  6541 ;; Defined at:
  6542 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  f1              3   63[COMRAM] float 
  6545 ;;  f2              3   66[COMRAM] float 
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;		None
  6548 ;; Return value:  Size  Location     Type
  6549 ;;                  3   63[COMRAM] float 
  6550 ;; Registers used:
  6551 ;;		wreg, status,2, status,0, cstack
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6557 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6561 ;;Total ram usage:        6 bytes
  6562 ;; Hardware stack levels used:    1
  6563 ;; Hardware stack levels required when called:    4
  6564 ;; This function calls:
  6565 ;;		___ftadd
  6566 ;; This function is called by:
  6567 ;;		_exp
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           	psect	text18
  6572  00316C                     __ptext18:
  6573                           	opt stack 0
  6574  00316C                     ___ftsub:
  6575                           	opt stack 21
  6576                           
  6577                           ;incstack = 0
  6578  00316C  5043               	movf	___ftsub@f2,w,c
  6579  00316E  1044               	iorwf	___ftsub@f2+1,w,c
  6580  003170  1045               	iorwf	___ftsub@f2+2,w,c
  6581  003172  B4D8               	btfsc	status,2,c
  6582  003174  D006               	goto	l4829
  6583  003176  0E00               	movlw	0
  6584  003178  1A43               	xorwf	___ftsub@f2,f,c
  6585  00317A  0E00               	movlw	0
  6586  00317C  1A44               	xorwf	___ftsub@f2+1,f,c
  6587  00317E  0E80               	movlw	128
  6588  003180  1A45               	xorwf	___ftsub@f2+2,f,c
  6589  003182                     l4829:
  6590  003182  C040  F034         	movff	___ftsub@f1,___ftadd@f1
  6591  003186  C041  F035         	movff	___ftsub@f1+1,___ftadd@f1+1
  6592  00318A  C042  F036         	movff	___ftsub@f1+2,___ftadd@f1+2
  6593  00318E  C043  F037         	movff	___ftsub@f2,___ftadd@f2
  6594  003192  C044  F038         	movff	___ftsub@f2+1,___ftadd@f2+1
  6595  003196  C045  F039         	movff	___ftsub@f2+2,___ftadd@f2+2
  6596  00319A  ECD0  F00D         	call	___ftadd	;wreg free
  6597  00319E  C034  F040         	movff	?___ftadd,?___ftsub
  6598  0031A2  C035  F041         	movff	?___ftadd+1,?___ftsub+1
  6599  0031A6  C036  F042         	movff	?___ftadd+2,?___ftsub+2
  6600  0031AA  0012               	return	
  6601  0031AC                     __end_of___ftsub:
  6602                           	opt stack 0
  6603                           tblptru	equ	0xFF8
  6604                           tblptrh	equ	0xFF7
  6605                           tblptrl	equ	0xFF6
  6606                           tablat	equ	0xFF5
  6607                           prodh	equ	0xFF4
  6608                           prodl	equ	0xFF3
  6609                           intcon	equ	0xFF2
  6610                           intcon2	equ	0xFF1
  6611                           intcon3	equ	0xFF0
  6612                           postinc0	equ	0xFEE
  6613                           wreg	equ	0xFE8
  6614                           postdec1	equ	0xFE5
  6615                           fsr1l	equ	0xFE1
  6616                           indf2	equ	0xFDF
  6617                           postinc2	equ	0xFDE
  6618                           postdec2	equ	0xFDD
  6619                           fsr2h	equ	0xFDA
  6620                           fsr2l	equ	0xFD9
  6621                           status	equ	0xFD8
  6622                           
  6623 ;; *************** function ___ftadd *****************
  6624 ;; Defined at:
  6625 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;  f1              3   51[COMRAM] float 
  6628 ;;  f2              3   54[COMRAM] float 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;  exp1            1   62[COMRAM] unsigned char 
  6631 ;;  exp2            1   61[COMRAM] unsigned char 
  6632 ;;  sign            1   60[COMRAM] unsigned char 
  6633 ;; Return value:  Size  Location     Type
  6634 ;;                  3   51[COMRAM] float 
  6635 ;; Registers used:
  6636 ;;		wreg, status,2, status,0, cstack
  6637 ;; Tracked objects:
  6638 ;;		On entry : 0/0
  6639 ;;		On exit  : 0/0
  6640 ;;		Unchanged: 0/0
  6641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6642 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6643 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;Total ram usage:       12 bytes
  6647 ;; Hardware stack levels used:    1
  6648 ;; Hardware stack levels required when called:    3
  6649 ;; This function calls:
  6650 ;;		___ftpack
  6651 ;; This function is called by:
  6652 ;;		_dec_to_hex
  6653 ;;		_init_operation
  6654 ;;		___ftsub
  6655 ;;		_floor
  6656 ;;		_log
  6657 ;;		_eval_poly
  6658 ;;		_hex_to_dec
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           	psect	text19
  6663  001BA0                     __ptext19:
  6664                           	opt stack 0
  6665  001BA0                     ___ftadd:
  6666                           	opt stack 21
  6667                           
  6668                           ;incstack = 0
  6669  001BA0  C036  F03A         	movff	___ftadd@f1+2,??___ftadd
  6670  001BA4  6A3B               	clrf	(??___ftadd+1)& (0+255),c
  6671  001BA6  6A3C               	clrf	(??___ftadd+2)& (0+255),c
  6672  001BA8  3435               	rlcf	___ftadd@f1+1,w,c
  6673  001BAA  363A               	rlcf	??___ftadd& (0+255),f,c
  6674  001BAC  E301               	bnc	u4111
  6675  001BAE  803B               	bsf	(??___ftadd+1)& (0+255),0,c
  6676  001BB0                     u4111:
  6677  001BB0  503A               	movf	??___ftadd,w,c
  6678  001BB2  6E3F               	movwf	___ftadd@exp1,c
  6679  001BB4  C039  F03A         	movff	___ftadd@f2+2,??___ftadd
  6680  001BB8  6A3B               	clrf	(??___ftadd+1)& (0+255),c
  6681  001BBA  6A3C               	clrf	(??___ftadd+2)& (0+255),c
  6682  001BBC  3438               	rlcf	___ftadd@f2+1,w,c
  6683  001BBE  363A               	rlcf	??___ftadd& (0+255),f,c
  6684  001BC0  E301               	bnc	u4121
  6685  001BC2  803B               	bsf	(??___ftadd+1)& (0+255),0,c
  6686  001BC4                     u4121:
  6687  001BC4  503A               	movf	??___ftadd,w,c
  6688  001BC6  6E3E               	movwf	___ftadd@exp2,c
  6689  001BC8  503F               	movf	___ftadd@exp1,w,c
  6690  001BCA  B4D8               	btfsc	status,2,c
  6691  001BCC  D00B               	goto	l723
  6692  001BCE  503E               	movf	___ftadd@exp2,w,c
  6693  001BD0  5C3F               	subwf	___ftadd@exp1,w,c
  6694  001BD2  B0D8               	btfsc	status,0,c
  6695  001BD4  D00E               	goto	l4585
  6696  001BD6  503F               	movf	___ftadd@exp1,w,c
  6697  001BD8  0800               	sublw	0
  6698  001BDA  243E               	addwf	___ftadd@exp2,w,c
  6699  001BDC  6E3A               	movwf	??___ftadd& (0+255),c
  6700  001BDE  0E18               	movlw	24
  6701  001BE0  643A               	cpfsgt	??___ftadd,c
  6702  001BE2  D007               	goto	l4585
  6703  001BE4                     l723:
  6704  001BE4  C037  F034         	movff	___ftadd@f2,?___ftadd
  6705  001BE8  C038  F035         	movff	___ftadd@f2+1,?___ftadd+1
  6706  001BEC  C039  F036         	movff	___ftadd@f2+2,?___ftadd+2
  6707  001BF0  0012               	return	
  6708  001BF2                     l4585:
  6709  001BF2  503E               	movf	___ftadd@exp2,w,c
  6710  001BF4  B4D8               	btfsc	status,2,c
  6711  001BF6  D00B               	goto	l727
  6712  001BF8  503F               	movf	___ftadd@exp1,w,c
  6713  001BFA  5C3E               	subwf	___ftadd@exp2,w,c
  6714  001BFC  B0D8               	btfsc	status,0,c
  6715  001BFE  D00E               	goto	l4591
  6716  001C00  503E               	movf	___ftadd@exp2,w,c
  6717  001C02  0800               	sublw	0
  6718  001C04  243F               	addwf	___ftadd@exp1,w,c
  6719  001C06  6E3A               	movwf	??___ftadd& (0+255),c
  6720  001C08  0E18               	movlw	24
  6721  001C0A  643A               	cpfsgt	??___ftadd,c
  6722  001C0C  D007               	goto	l4591
  6723  001C0E                     l727:
  6724  001C0E  C034  F034         	movff	___ftadd@f1,?___ftadd
  6725  001C12  C035  F035         	movff	___ftadd@f1+1,?___ftadd+1
  6726  001C16  C036  F036         	movff	___ftadd@f1+2,?___ftadd+2
  6727  001C1A  0012               	return	
  6728  001C1C                     l4591:
  6729  001C1C  0E06               	movlw	6
  6730  001C1E  6E3D               	movwf	___ftadd@sign,c
  6731  001C20  BE36               	btfsc	___ftadd@f1+2,7,c
  6732  001C22  8E3D               	bsf	___ftadd@sign,7,c
  6733  001C24  BE39               	btfsc	___ftadd@f2+2,7,c
  6734  001C26  8C3D               	bsf	___ftadd@sign,6,c
  6735  001C28  8E35               	bsf	___ftadd@f1+1,7,c
  6736  001C2A  0EFF               	movlw	255
  6737  001C2C  1634               	andwf	___ftadd@f1,f,c
  6738  001C2E  0EFF               	movlw	255
  6739  001C30  1635               	andwf	___ftadd@f1+1,f,c
  6740  001C32  0E00               	movlw	0
  6741  001C34  1636               	andwf	___ftadd@f1+2,f,c
  6742  001C36  8E38               	bsf	___ftadd@f2+1,7,c
  6743  001C38  0EFF               	movlw	255
  6744  001C3A  1637               	andwf	___ftadd@f2,f,c
  6745  001C3C  0EFF               	movlw	255
  6746  001C3E  1638               	andwf	___ftadd@f2+1,f,c
  6747  001C40  0E00               	movlw	0
  6748  001C42  1639               	andwf	___ftadd@f2+2,f,c
  6749  001C44  503E               	movf	___ftadd@exp2,w,c
  6750  001C46  5C3F               	subwf	___ftadd@exp1,w,c
  6751  001C48  B0D8               	btfsc	status,0,c
  6752  001C4A  D01B               	goto	l4617
  6753  001C4C                     l4607:
  6754  001C4C  90D8               	bcf	status,0,c
  6755  001C4E  3637               	rlcf	___ftadd@f2,f,c
  6756  001C50  3638               	rlcf	___ftadd@f2+1,f,c
  6757  001C52  3639               	rlcf	___ftadd@f2+2,f,c
  6758  001C54  063E               	decf	___ftadd@exp2,f,c
  6759  001C56  503F               	movf	___ftadd@exp1,w,c
  6760  001C58  183E               	xorwf	___ftadd@exp2,w,c
  6761  001C5A  B4D8               	btfsc	status,2,c
  6762  001C5C  D00D               	goto	l4615
  6763  001C5E  063D               	decf	___ftadd@sign,f,c
  6764  001C60  C03D  F03A         	movff	___ftadd@sign,??___ftadd
  6765  001C64  0E07               	movlw	7
  6766  001C66  163A               	andwf	??___ftadd,f,c
  6767  001C68  B4D8               	btfsc	status,2,c
  6768  001C6A  D006               	goto	l4615
  6769  001C6C  D7EF               	goto	l4607
  6770  001C6E                     l4613:
  6771  001C6E  90D8               	bcf	status,0,c
  6772  001C70  3236               	rrcf	___ftadd@f1+2,f,c
  6773  001C72  3235               	rrcf	___ftadd@f1+1,f,c
  6774  001C74  3234               	rrcf	___ftadd@f1,f,c
  6775  001C76  2A3F               	incf	___ftadd@exp1,f,c
  6776  001C78                     l4615:
  6777  001C78  503E               	movf	___ftadd@exp2,w,c
  6778  001C7A  183F               	xorwf	___ftadd@exp1,w,c
  6779  001C7C  B4D8               	btfsc	status,2,c
  6780  001C7E  D01F               	goto	l738
  6781  001C80  D7F6               	goto	l4613
  6782  001C82                     l4617:
  6783  001C82  503F               	movf	___ftadd@exp1,w,c
  6784  001C84  5C3E               	subwf	___ftadd@exp2,w,c
  6785  001C86  B0D8               	btfsc	status,0,c
  6786  001C88  D01A               	goto	l738
  6787  001C8A                     l4619:
  6788  001C8A  90D8               	bcf	status,0,c
  6789  001C8C  3634               	rlcf	___ftadd@f1,f,c
  6790  001C8E  3635               	rlcf	___ftadd@f1+1,f,c
  6791  001C90  3636               	rlcf	___ftadd@f1+2,f,c
  6792  001C92  063F               	decf	___ftadd@exp1,f,c
  6793  001C94  503F               	movf	___ftadd@exp1,w,c
  6794  001C96  183E               	xorwf	___ftadd@exp2,w,c
  6795  001C98  B4D8               	btfsc	status,2,c
  6796  001C9A  D00D               	goto	l4627
  6797  001C9C  063D               	decf	___ftadd@sign,f,c
  6798  001C9E  C03D  F03A         	movff	___ftadd@sign,??___ftadd
  6799  001CA2  0E07               	movlw	7
  6800  001CA4  163A               	andwf	??___ftadd,f,c
  6801  001CA6  B4D8               	btfsc	status,2,c
  6802  001CA8  D006               	goto	l4627
  6803  001CAA  D7EF               	goto	l4619
  6804  001CAC                     l4625:
  6805  001CAC  90D8               	bcf	status,0,c
  6806  001CAE  3239               	rrcf	___ftadd@f2+2,f,c
  6807  001CB0  3238               	rrcf	___ftadd@f2+1,f,c
  6808  001CB2  3237               	rrcf	___ftadd@f2,f,c
  6809  001CB4  2A3E               	incf	___ftadd@exp2,f,c
  6810  001CB6                     l4627:
  6811  001CB6  503E               	movf	___ftadd@exp2,w,c
  6812  001CB8  183F               	xorwf	___ftadd@exp1,w,c
  6813  001CBA  A4D8               	btfss	status,2,c
  6814  001CBC  D7F7               	goto	l4625
  6815  001CBE                     l738:
  6816  001CBE  AE3D               	btfss	___ftadd@sign,7,c
  6817  001CC0  D00C               	goto	l747
  6818  001CC2  0EFF               	movlw	255
  6819  001CC4  1A34               	xorwf	___ftadd@f1,f,c
  6820  001CC6  0EFF               	movlw	255
  6821  001CC8  1A35               	xorwf	___ftadd@f1+1,f,c
  6822  001CCA  0EFF               	movlw	255
  6823  001CCC  1A36               	xorwf	___ftadd@f1+2,f,c
  6824  001CCE  0E01               	movlw	1
  6825  001CD0  2634               	addwf	___ftadd@f1,f,c
  6826  001CD2  0E00               	movlw	0
  6827  001CD4  2235               	addwfc	___ftadd@f1+1,f,c
  6828  001CD6  0E00               	movlw	0
  6829  001CD8  2236               	addwfc	___ftadd@f1+2,f,c
  6830  001CDA                     l747:
  6831  001CDA  AC3D               	btfss	___ftadd@sign,6,c
  6832  001CDC  D00C               	goto	l4633
  6833  001CDE  0EFF               	movlw	255
  6834  001CE0  1A37               	xorwf	___ftadd@f2,f,c
  6835  001CE2  0EFF               	movlw	255
  6836  001CE4  1A38               	xorwf	___ftadd@f2+1,f,c
  6837  001CE6  0EFF               	movlw	255
  6838  001CE8  1A39               	xorwf	___ftadd@f2+2,f,c
  6839  001CEA  0E01               	movlw	1
  6840  001CEC  2637               	addwf	___ftadd@f2,f,c
  6841  001CEE  0E00               	movlw	0
  6842  001CF0  2238               	addwfc	___ftadd@f2+1,f,c
  6843  001CF2  0E00               	movlw	0
  6844  001CF4  2239               	addwfc	___ftadd@f2+2,f,c
  6845  001CF6                     l4633:
  6846  001CF6  0E00               	movlw	0
  6847  001CF8  6E3D               	movwf	___ftadd@sign,c
  6848  001CFA  5034               	movf	___ftadd@f1,w,c
  6849  001CFC  2637               	addwf	___ftadd@f2,f,c
  6850  001CFE  5035               	movf	___ftadd@f1+1,w,c
  6851  001D00  2238               	addwfc	___ftadd@f2+1,f,c
  6852  001D02  5036               	movf	___ftadd@f1+2,w,c
  6853  001D04  2239               	addwfc	___ftadd@f2+2,f,c
  6854  001D06  AE39               	btfss	___ftadd@f2+2,7,c
  6855  001D08  D00E               	goto	l4643
  6856  001D0A  0EFF               	movlw	255
  6857  001D0C  1A37               	xorwf	___ftadd@f2,f,c
  6858  001D0E  0EFF               	movlw	255
  6859  001D10  1A38               	xorwf	___ftadd@f2+1,f,c
  6860  001D12  0EFF               	movlw	255
  6861  001D14  1A39               	xorwf	___ftadd@f2+2,f,c
  6862  001D16  0E01               	movlw	1
  6863  001D18  2637               	addwf	___ftadd@f2,f,c
  6864  001D1A  0E00               	movlw	0
  6865  001D1C  2238               	addwfc	___ftadd@f2+1,f,c
  6866  001D1E  0E00               	movlw	0
  6867  001D20  2239               	addwfc	___ftadd@f2+2,f,c
  6868  001D22  0E01               	movlw	1
  6869  001D24  6E3D               	movwf	___ftadd@sign,c
  6870  001D26                     l4643:
  6871  001D26  C037  F019         	movff	___ftadd@f2,___ftpack@arg
  6872  001D2A  C038  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  6873  001D2E  C039  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  6874  001D32  C03F  F01C         	movff	___ftadd@exp1,___ftpack@exp
  6875  001D36  C03D  F01D         	movff	___ftadd@sign,___ftpack@sign
  6876  001D3A  ECFE  F014         	call	___ftpack	;wreg free
  6877  001D3E  C019  F034         	movff	?___ftpack,?___ftadd
  6878  001D42  C01A  F035         	movff	?___ftpack+1,?___ftadd+1
  6879  001D46  C01B  F036         	movff	?___ftpack+2,?___ftadd+2
  6880  001D4A  0012               	return	
  6881  001D4C                     __end_of___ftadd:
  6882                           	opt stack 0
  6883                           tblptru	equ	0xFF8
  6884                           tblptrh	equ	0xFF7
  6885                           tblptrl	equ	0xFF6
  6886                           tablat	equ	0xFF5
  6887                           prodh	equ	0xFF4
  6888                           prodl	equ	0xFF3
  6889                           intcon	equ	0xFF2
  6890                           intcon2	equ	0xFF1
  6891                           intcon3	equ	0xFF0
  6892                           postinc0	equ	0xFEE
  6893                           wreg	equ	0xFE8
  6894                           postdec1	equ	0xFE5
  6895                           fsr1l	equ	0xFE1
  6896                           indf2	equ	0xFDF
  6897                           postinc2	equ	0xFDE
  6898                           postdec2	equ	0xFDD
  6899                           fsr2h	equ	0xFDA
  6900                           fsr2l	equ	0xFD9
  6901                           status	equ	0xFD8
  6902                           
  6903 ;; *************** function ___ftneg *****************
  6904 ;; Defined at:
  6905 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;  f1              3   24[COMRAM] float 
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;		None
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  3   24[COMRAM] float 
  6912 ;; Registers used:
  6913 ;;		wreg, status,2, status,0
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6919 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6922 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6923 ;;Total ram usage:        3 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    2
  6926 ;; This function calls:
  6927 ;;		Nothing
  6928 ;; This function is called by:
  6929 ;;		_pow
  6930 ;;		_exp
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           	psect	text20
  6935  0032B6                     __ptext20:
  6936                           	opt stack 0
  6937  0032B6                     ___ftneg:
  6938                           	opt stack 23
  6939                           
  6940                           ;incstack = 0
  6941  0032B6  5019               	movf	___ftneg@f1,w,c
  6942  0032B8  101A               	iorwf	___ftneg@f1+1,w,c
  6943  0032BA  101B               	iorwf	___ftneg@f1+2,w,c
  6944  0032BC  B4D8               	btfsc	status,2,c
  6945  0032BE  D006               	goto	l780
  6946  0032C0  0E00               	movlw	0
  6947  0032C2  1A19               	xorwf	___ftneg@f1,f,c
  6948  0032C4  0E00               	movlw	0
  6949  0032C6  1A1A               	xorwf	___ftneg@f1+1,f,c
  6950  0032C8  0E80               	movlw	128
  6951  0032CA  1A1B               	xorwf	___ftneg@f1+2,f,c
  6952  0032CC                     l780:
  6953  0032CC  C019  F019         	movff	___ftneg@f1,?___ftneg
  6954  0032D0  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  6955  0032D4  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  6956  0032D8  0012               	return		;funcret
  6957  0032DA                     __end_of___ftneg:
  6958                           	opt stack 0
  6959                           tblptru	equ	0xFF8
  6960                           tblptrh	equ	0xFF7
  6961                           tblptrl	equ	0xFF6
  6962                           tablat	equ	0xFF5
  6963                           prodh	equ	0xFF4
  6964                           prodl	equ	0xFF3
  6965                           intcon	equ	0xFF2
  6966                           intcon2	equ	0xFF1
  6967                           intcon3	equ	0xFF0
  6968                           postinc0	equ	0xFEE
  6969                           wreg	equ	0xFE8
  6970                           postdec1	equ	0xFE5
  6971                           fsr1l	equ	0xFE1
  6972                           indf2	equ	0xFDF
  6973                           postinc2	equ	0xFDE
  6974                           postdec2	equ	0xFDD
  6975                           fsr2h	equ	0xFDA
  6976                           fsr2l	equ	0xFD9
  6977                           status	equ	0xFD8
  6978                           
  6979 ;; *************** function ___ftdiv *****************
  6980 ;; Defined at:
  6981 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  6982 ;; Parameters:    Size  Location     Type
  6983 ;;  f1              3   36[COMRAM] float 
  6984 ;;  f2              3   39[COMRAM] float 
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;  f3              3   46[COMRAM] float 
  6987 ;;  sign            1   50[COMRAM] unsigned char 
  6988 ;;  exp             1   49[COMRAM] unsigned char 
  6989 ;;  cntr            1   45[COMRAM] unsigned char 
  6990 ;; Return value:  Size  Location     Type
  6991 ;;                  3   36[COMRAM] float 
  6992 ;; Registers used:
  6993 ;;		wreg, status,2, status,0, cstack
  6994 ;; Tracked objects:
  6995 ;;		On entry : 0/0
  6996 ;;		On exit  : 0/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6999 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7000 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7001 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;Total ram usage:       15 bytes
  7004 ;; Hardware stack levels used:    1
  7005 ;; Hardware stack levels required when called:    3
  7006 ;; This function calls:
  7007 ;;		___ftpack
  7008 ;; This function is called by:
  7009 ;;		_init_operation
  7010 ;;		_exp
  7011 ;; This function uses a non-reentrant model
  7012 ;;
  7013                           
  7014                           	psect	text21
  7015  002782                     __ptext21:
  7016                           	opt stack 0
  7017  002782                     ___ftdiv:
  7018                           	opt stack 22
  7019                           
  7020                           ;incstack = 0
  7021  002782  C027  F02B         	movff	___ftdiv@f1+2,??___ftdiv
  7022  002786  6A2C               	clrf	(??___ftdiv+1)& (0+255),c
  7023  002788  6A2D               	clrf	(??___ftdiv+2)& (0+255),c
  7024  00278A  3426               	rlcf	___ftdiv@f1+1,w,c
  7025  00278C  362B               	rlcf	??___ftdiv& (0+255),f,c
  7026  00278E  E301               	bnc	u4511
  7027  002790  802C               	bsf	(??___ftdiv+1)& (0+255),0,c
  7028  002792                     u4511:
  7029  002792  502B               	movf	??___ftdiv,w,c
  7030  002794  6E32               	movwf	___ftdiv@exp,c
  7031  002796  5032               	movf	___ftdiv@exp,w,c
  7032  002798  A4D8               	btfss	status,2,c
  7033  00279A  D007               	goto	l4785
  7034  00279C  0E00               	movlw	0
  7035  00279E  6E25               	movwf	?___ftdiv,c
  7036  0027A0  0E00               	movlw	0
  7037  0027A2  6E26               	movwf	?___ftdiv+1,c
  7038  0027A4  0E00               	movlw	0
  7039  0027A6  6E27               	movwf	?___ftdiv+2,c
  7040  0027A8  0012               	return	
  7041  0027AA                     l4785:
  7042  0027AA  C02A  F02B         	movff	___ftdiv@f2+2,??___ftdiv
  7043  0027AE  6A2C               	clrf	(??___ftdiv+1)& (0+255),c
  7044  0027B0  6A2D               	clrf	(??___ftdiv+2)& (0+255),c
  7045  0027B2  3429               	rlcf	___ftdiv@f2+1,w,c
  7046  0027B4  362B               	rlcf	??___ftdiv& (0+255),f,c
  7047  0027B6  E301               	bnc	u4531
  7048  0027B8  802C               	bsf	(??___ftdiv+1)& (0+255),0,c
  7049  0027BA                     u4531:
  7050  0027BA  502B               	movf	??___ftdiv,w,c
  7051  0027BC  6E33               	movwf	___ftdiv@sign,c
  7052  0027BE  5033               	movf	___ftdiv@sign,w,c
  7053  0027C0  A4D8               	btfss	status,2,c
  7054  0027C2  D007               	goto	l4791
  7055  0027C4  0E00               	movlw	0
  7056  0027C6  6E25               	movwf	?___ftdiv,c
  7057  0027C8  0E00               	movlw	0
  7058  0027CA  6E26               	movwf	?___ftdiv+1,c
  7059  0027CC  0E00               	movlw	0
  7060  0027CE  6E27               	movwf	?___ftdiv+2,c
  7061  0027D0  0012               	return	
  7062  0027D2                     l4791:
  7063  0027D2  0E00               	movlw	0
  7064  0027D4  6E2F               	movwf	___ftdiv@f3,c
  7065  0027D6  0E00               	movlw	0
  7066  0027D8  6E30               	movwf	___ftdiv@f3+1,c
  7067  0027DA  0E00               	movlw	0
  7068  0027DC  6E31               	movwf	___ftdiv@f3+2,c
  7069  0027DE  5033               	movf	___ftdiv@sign,w,c
  7070  0027E0  0F89               	addlw	137
  7071  0027E2  5E32               	subwf	___ftdiv@exp,f,c
  7072  0027E4  C027  F033         	movff	___ftdiv@f1+2,___ftdiv@sign
  7073  0027E8  502A               	movf	___ftdiv@f2+2,w,c
  7074  0027EA  1A33               	xorwf	___ftdiv@sign,f,c
  7075  0027EC  0E80               	movlw	128
  7076  0027EE  1633               	andwf	___ftdiv@sign,f,c
  7077  0027F0  8E26               	bsf	___ftdiv@f1+1,7,c
  7078  0027F2  0EFF               	movlw	255
  7079  0027F4  1625               	andwf	___ftdiv@f1,f,c
  7080  0027F6  0EFF               	movlw	255
  7081  0027F8  1626               	andwf	___ftdiv@f1+1,f,c
  7082  0027FA  0E00               	movlw	0
  7083  0027FC  1627               	andwf	___ftdiv@f1+2,f,c
  7084  0027FE  8E29               	bsf	___ftdiv@f2+1,7,c
  7085  002800  0EFF               	movlw	255
  7086  002802  1628               	andwf	___ftdiv@f2,f,c
  7087  002804  0EFF               	movlw	255
  7088  002806  1629               	andwf	___ftdiv@f2+1,f,c
  7089  002808  0E00               	movlw	0
  7090  00280A  162A               	andwf	___ftdiv@f2+2,f,c
  7091  00280C  0E18               	movlw	24
  7092  00280E  6E2E               	movwf	___ftdiv@cntr,c
  7093  002810                     l4811:
  7094  002810  90D8               	bcf	status,0,c
  7095  002812  362F               	rlcf	___ftdiv@f3,f,c
  7096  002814  3630               	rlcf	___ftdiv@f3+1,f,c
  7097  002816  3631               	rlcf	___ftdiv@f3+2,f,c
  7098  002818  5028               	movf	___ftdiv@f2,w,c
  7099  00281A  5C25               	subwf	___ftdiv@f1,w,c
  7100  00281C  5029               	movf	___ftdiv@f2+1,w,c
  7101  00281E  5826               	subwfb	___ftdiv@f1+1,w,c
  7102  002820  502A               	movf	___ftdiv@f2+2,w,c
  7103  002822  5827               	subwfb	___ftdiv@f1+2,w,c
  7104  002824  A0D8               	btfss	status,0,c
  7105  002826  D007               	goto	l758
  7106  002828  5028               	movf	___ftdiv@f2,w,c
  7107  00282A  5E25               	subwf	___ftdiv@f1,f,c
  7108  00282C  5029               	movf	___ftdiv@f2+1,w,c
  7109  00282E  5A26               	subwfb	___ftdiv@f1+1,f,c
  7110  002830  502A               	movf	___ftdiv@f2+2,w,c
  7111  002832  5A27               	subwfb	___ftdiv@f1+2,f,c
  7112  002834  802F               	bsf	___ftdiv@f3,0,c
  7113  002836                     l758:
  7114  002836  90D8               	bcf	status,0,c
  7115  002838  3625               	rlcf	___ftdiv@f1,f,c
  7116  00283A  3626               	rlcf	___ftdiv@f1+1,f,c
  7117  00283C  3627               	rlcf	___ftdiv@f1+2,f,c
  7118  00283E  2E2E               	decfsz	___ftdiv@cntr,f,c
  7119  002840  D7E7               	goto	l4811
  7120  002842  C02F  F019         	movff	___ftdiv@f3,___ftpack@arg
  7121  002846  C030  F01A         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7122  00284A  C031  F01B         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7123  00284E  C032  F01C         	movff	___ftdiv@exp,___ftpack@exp
  7124  002852  C033  F01D         	movff	___ftdiv@sign,___ftpack@sign
  7125  002856  ECFE  F014         	call	___ftpack	;wreg free
  7126  00285A  C019  F025         	movff	?___ftpack,?___ftdiv
  7127  00285E  C01A  F026         	movff	?___ftpack+1,?___ftdiv+1
  7128  002862  C01B  F027         	movff	?___ftpack+2,?___ftdiv+2
  7129  002866  0012               	return	
  7130  002868                     __end_of___ftdiv:
  7131                           	opt stack 0
  7132                           tblptru	equ	0xFF8
  7133                           tblptrh	equ	0xFF7
  7134                           tblptrl	equ	0xFF6
  7135                           tablat	equ	0xFF5
  7136                           prodh	equ	0xFF4
  7137                           prodl	equ	0xFF3
  7138                           intcon	equ	0xFF2
  7139                           intcon2	equ	0xFF1
  7140                           intcon3	equ	0xFF0
  7141                           postinc0	equ	0xFEE
  7142                           wreg	equ	0xFE8
  7143                           postdec1	equ	0xFE5
  7144                           fsr1l	equ	0xFE1
  7145                           indf2	equ	0xFDF
  7146                           postinc2	equ	0xFDE
  7147                           postdec2	equ	0xFDD
  7148                           fsr2h	equ	0xFDA
  7149                           fsr2l	equ	0xFD9
  7150                           status	equ	0xFD8
  7151                           
  7152 ;; *************** function ___awtoft *****************
  7153 ;; Defined at:
  7154 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;  c               2   32[COMRAM] int 
  7157 ;; Auto vars:     Size  Location     Type
  7158 ;;  sign            1   35[COMRAM] unsigned char 
  7159 ;; Return value:  Size  Location     Type
  7160 ;;                  3   32[COMRAM] float 
  7161 ;; Registers used:
  7162 ;;		wreg, status,2, status,0, cstack
  7163 ;; Tracked objects:
  7164 ;;		On entry : 0/0
  7165 ;;		On exit  : 0/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7168 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7172 ;;Total ram usage:        4 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    3
  7175 ;; This function calls:
  7176 ;;		___ftpack
  7177 ;; This function is called by:
  7178 ;;		_dec_to_hex
  7179 ;;		_init_operation
  7180 ;;		_exp
  7181 ;;		_log
  7182 ;;		_hex_to_dec
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           	psect	text22
  7187  0031E6                     __ptext22:
  7188                           	opt stack 0
  7189  0031E6                     ___awtoft:
  7190                           	opt stack 22
  7191                           
  7192                           ;incstack = 0
  7193  0031E6  0E00               	movlw	0
  7194  0031E8  6E24               	movwf	___awtoft@sign,c
  7195  0031EA  AE22               	btfss	___awtoft@c+1,7,c
  7196  0031EC  D006               	goto	l4841
  7197  0031EE  6C21               	negf	___awtoft@c,c
  7198  0031F0  1E22               	comf	___awtoft@c+1,f,c
  7199  0031F2  B0D8               	btfsc	status,0,c
  7200  0031F4  2A22               	incf	___awtoft@c+1,f,c
  7201  0031F6  0E01               	movlw	1
  7202  0031F8  6E24               	movwf	___awtoft@sign,c
  7203  0031FA                     l4841:
  7204  0031FA  C021  F019         	movff	___awtoft@c,___ftpack@arg
  7205  0031FE  C022  F01A         	movff	___awtoft@c+1,___ftpack@arg+1
  7206  003202  6A1B               	clrf	___ftpack@arg+2,c
  7207  003204  0E8E               	movlw	142
  7208  003206  6E1C               	movwf	___ftpack@exp,c
  7209  003208  C024  F01D         	movff	___awtoft@sign,___ftpack@sign
  7210  00320C  ECFE  F014         	call	___ftpack	;wreg free
  7211  003210  C019  F021         	movff	?___ftpack,?___awtoft
  7212  003214  C01A  F022         	movff	?___ftpack+1,?___awtoft+1
  7213  003218  C01B  F023         	movff	?___ftpack+2,?___awtoft+2
  7214  00321C  0012               	return	
  7215  00321E                     __end_of___awtoft:
  7216                           	opt stack 0
  7217                           tblptru	equ	0xFF8
  7218                           tblptrh	equ	0xFF7
  7219                           tblptrl	equ	0xFF6
  7220                           tablat	equ	0xFF5
  7221                           prodh	equ	0xFF4
  7222                           prodl	equ	0xFF3
  7223                           intcon	equ	0xFF2
  7224                           intcon2	equ	0xFF1
  7225                           intcon3	equ	0xFF0
  7226                           postinc0	equ	0xFEE
  7227                           wreg	equ	0xFE8
  7228                           postdec1	equ	0xFE5
  7229                           fsr1l	equ	0xFE1
  7230                           indf2	equ	0xFDF
  7231                           postinc2	equ	0xFDE
  7232                           postdec2	equ	0xFDD
  7233                           fsr2h	equ	0xFDA
  7234                           fsr2l	equ	0xFD9
  7235                           status	equ	0xFD8
  7236                           
  7237 ;; *************** function ___lltoft *****************
  7238 ;; Defined at:
  7239 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;  c               4   32[COMRAM] unsigned long 
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;  exp             1   40[COMRAM] unsigned char 
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  3   32[COMRAM] float 
  7246 ;; Registers used:
  7247 ;;		wreg, status,2, status,0, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7253 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7254 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7256 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7257 ;;Total ram usage:        9 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:    3
  7260 ;; This function calls:
  7261 ;;		___ftpack
  7262 ;; This function is called by:
  7263 ;;		_pow
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267                           	psect	text23
  7268  002F44                     __ptext23:
  7269                           	opt stack 0
  7270  002F44                     ___lltoft:
  7271                           	opt stack 23
  7272                           
  7273                           ;incstack = 0
  7274  002F44  0E8E               	movlw	142
  7275  002F46  6E29               	movwf	___lltoft@exp,c
  7276  002F48  D006               	goto	l4879
  7277  002F4A                     l4877:
  7278  002F4A  90D8               	bcf	status,0,c
  7279  002F4C  3224               	rrcf	___lltoft@c+3,f,c
  7280  002F4E  3223               	rrcf	___lltoft@c+2,f,c
  7281  002F50  3222               	rrcf	___lltoft@c+1,f,c
  7282  002F52  3221               	rrcf	___lltoft@c,f,c
  7283  002F54  2A29               	incf	___lltoft@exp,f,c
  7284  002F56                     l4879:
  7285  002F56  0E00               	movlw	0
  7286  002F58  1421               	andwf	___lltoft@c,w,c
  7287  002F5A  6E25               	movwf	??___lltoft& (0+255),c
  7288  002F5C  0E00               	movlw	0
  7289  002F5E  1422               	andwf	___lltoft@c+1,w,c
  7290  002F60  6E26               	movwf	(??___lltoft+1)& (0+255),c
  7291  002F62  0E00               	movlw	0
  7292  002F64  1423               	andwf	___lltoft@c+2,w,c
  7293  002F66  6E27               	movwf	(??___lltoft+2)& (0+255),c
  7294  002F68  0EFF               	movlw	255
  7295  002F6A  1424               	andwf	___lltoft@c+3,w,c
  7296  002F6C  6E28               	movwf	(??___lltoft+3)& (0+255),c
  7297  002F6E  5025               	movf	??___lltoft,w,c
  7298  002F70  1026               	iorwf	??___lltoft+1,w,c
  7299  002F72  1027               	iorwf	??___lltoft+2,w,c
  7300  002F74  1028               	iorwf	??___lltoft+3,w,c
  7301  002F76  A4D8               	btfss	status,2,c
  7302  002F78  D7E8               	goto	l4877
  7303  002F7A  C021  F019         	movff	___lltoft@c,___ftpack@arg
  7304  002F7E  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  7305  002F82  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  7306  002F86  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  7307  002F8A  0E00               	movlw	0
  7308  002F8C  6E1D               	movwf	___ftpack@sign,c
  7309  002F8E  ECFE  F014         	call	___ftpack	;wreg free
  7310  002F92  C019  F021         	movff	?___ftpack,?___lltoft
  7311  002F96  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  7312  002F9A  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  7313  002F9E  0012               	return	
  7314  002FA0                     __end_of___lltoft:
  7315                           	opt stack 0
  7316                           tblptru	equ	0xFF8
  7317                           tblptrh	equ	0xFF7
  7318                           tblptrl	equ	0xFF6
  7319                           tablat	equ	0xFF5
  7320                           prodh	equ	0xFF4
  7321                           prodl	equ	0xFF3
  7322                           intcon	equ	0xFF2
  7323                           intcon2	equ	0xFF1
  7324                           intcon3	equ	0xFF0
  7325                           postinc0	equ	0xFEE
  7326                           wreg	equ	0xFE8
  7327                           postdec1	equ	0xFE5
  7328                           fsr1l	equ	0xFE1
  7329                           indf2	equ	0xFDF
  7330                           postinc2	equ	0xFDE
  7331                           postdec2	equ	0xFDD
  7332                           fsr2h	equ	0xFDA
  7333                           fsr2l	equ	0xFD9
  7334                           status	equ	0xFD8
  7335                           
  7336 ;; *************** function ___ftpack *****************
  7337 ;; Defined at:
  7338 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;  arg             3   24[COMRAM] unsigned um
  7341 ;;  exp             1   27[COMRAM] unsigned char 
  7342 ;;  sign            1   28[COMRAM] unsigned char 
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;		None
  7345 ;; Return value:  Size  Location     Type
  7346 ;;                  3   24[COMRAM] float 
  7347 ;; Registers used:
  7348 ;;		wreg, status,2, status,0
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7354 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7358 ;;Total ram usage:        8 bytes
  7359 ;; Hardware stack levels used:    1
  7360 ;; Hardware stack levels required when called:    2
  7361 ;; This function calls:
  7362 ;;		Nothing
  7363 ;; This function is called by:
  7364 ;;		___altoft
  7365 ;;		___awtoft
  7366 ;;		___ftadd
  7367 ;;		___ftdiv
  7368 ;;		___ftmul
  7369 ;;		___lltoft
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           	psect	text24
  7374  0029FC                     __ptext24:
  7375                           	opt stack 0
  7376  0029FC                     ___ftpack:
  7377                           	opt stack 21
  7378                           
  7379                           ;incstack = 0
  7380  0029FC  501C               	movf	___ftpack@exp,w,c
  7381  0029FE  B4D8               	btfsc	status,2,c
  7382  002A00  D005               	goto	l4523
  7383  002A02  5019               	movf	___ftpack@arg,w,c
  7384  002A04  101A               	iorwf	___ftpack@arg+1,w,c
  7385  002A06  101B               	iorwf	___ftpack@arg+2,w,c
  7386  002A08  A4D8               	btfss	status,2,c
  7387  002A0A  D00C               	goto	l4529
  7388  002A0C                     l4523:
  7389  002A0C  0E00               	movlw	0
  7390  002A0E  6E19               	movwf	?___ftpack,c
  7391  002A10  0E00               	movlw	0
  7392  002A12  6E1A               	movwf	?___ftpack+1,c
  7393  002A14  0E00               	movlw	0
  7394  002A16  6E1B               	movwf	?___ftpack+2,c
  7395  002A18  0012               	return	
  7396  002A1A                     l4527:
  7397  002A1A  2A1C               	incf	___ftpack@exp,f,c
  7398  002A1C  90D8               	bcf	status,0,c
  7399  002A1E  321B               	rrcf	___ftpack@arg+2,f,c
  7400  002A20  321A               	rrcf	___ftpack@arg+1,f,c
  7401  002A22  3219               	rrcf	___ftpack@arg,f,c
  7402  002A24                     l4529:
  7403  002A24  0E00               	movlw	0
  7404  002A26  1419               	andwf	___ftpack@arg,w,c
  7405  002A28  6E1E               	movwf	??___ftpack& (0+255),c
  7406  002A2A  0E00               	movlw	0
  7407  002A2C  141A               	andwf	___ftpack@arg+1,w,c
  7408  002A2E  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  7409  002A30  0EFE               	movlw	254
  7410  002A32  141B               	andwf	___ftpack@arg+2,w,c
  7411  002A34  6E20               	movwf	(??___ftpack+2)& (0+255),c
  7412  002A36  501E               	movf	??___ftpack,w,c
  7413  002A38  101F               	iorwf	??___ftpack+1,w,c
  7414  002A3A  1020               	iorwf	??___ftpack+2,w,c
  7415  002A3C  B4D8               	btfsc	status,2,c
  7416  002A3E  D00C               	goto	l4535
  7417  002A40  D7EC               	goto	l4527
  7418  002A42                     l4531:
  7419  002A42  2A1C               	incf	___ftpack@exp,f,c
  7420  002A44  0E01               	movlw	1
  7421  002A46  2619               	addwf	___ftpack@arg,f,c
  7422  002A48  0E00               	movlw	0
  7423  002A4A  221A               	addwfc	___ftpack@arg+1,f,c
  7424  002A4C  0E00               	movlw	0
  7425  002A4E  221B               	addwfc	___ftpack@arg+2,f,c
  7426  002A50  90D8               	bcf	status,0,c
  7427  002A52  321B               	rrcf	___ftpack@arg+2,f,c
  7428  002A54  321A               	rrcf	___ftpack@arg+1,f,c
  7429  002A56  3219               	rrcf	___ftpack@arg,f,c
  7430  002A58                     l4535:
  7431  002A58  0E00               	movlw	0
  7432  002A5A  1419               	andwf	___ftpack@arg,w,c
  7433  002A5C  6E1E               	movwf	??___ftpack& (0+255),c
  7434  002A5E  0E00               	movlw	0
  7435  002A60  141A               	andwf	___ftpack@arg+1,w,c
  7436  002A62  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  7437  002A64  0EFF               	movlw	255
  7438  002A66  141B               	andwf	___ftpack@arg+2,w,c
  7439  002A68  6E20               	movwf	(??___ftpack+2)& (0+255),c
  7440  002A6A  501E               	movf	??___ftpack,w,c
  7441  002A6C  101F               	iorwf	??___ftpack+1,w,c
  7442  002A6E  1020               	iorwf	??___ftpack+2,w,c
  7443  002A70  B4D8               	btfsc	status,2,c
  7444  002A72  D006               	goto	l4539
  7445  002A74  D7E6               	goto	l4531
  7446  002A76                     l4537:
  7447  002A76  061C               	decf	___ftpack@exp,f,c
  7448  002A78  90D8               	bcf	status,0,c
  7449  002A7A  3619               	rlcf	___ftpack@arg,f,c
  7450  002A7C  361A               	rlcf	___ftpack@arg+1,f,c
  7451  002A7E  361B               	rlcf	___ftpack@arg+2,f,c
  7452  002A80                     l4539:
  7453  002A80  BE1A               	btfsc	___ftpack@arg+1,7,c
  7454  002A82  D003               	goto	l700
  7455  002A84  0E02               	movlw	2
  7456  002A86  601C               	cpfslt	___ftpack@exp,c
  7457  002A88  D7F6               	goto	l4537
  7458  002A8A                     l700:
  7459  002A8A  A01C               	btfss	___ftpack@exp,0,c
  7460  002A8C  9E1A               	bcf	___ftpack@arg+1,7,c
  7461  002A8E  90D8               	bcf	status,0,c
  7462  002A90  321C               	rrcf	___ftpack@exp,f,c
  7463  002A92  501C               	movf	___ftpack@exp,w,c
  7464  002A94  121B               	iorwf	___ftpack@arg+2,f,c
  7465  002A96  501D               	movf	___ftpack@sign,w,c
  7466  002A98  A4D8               	btfss	status,2,c
  7467  002A9A  8E1B               	bsf	___ftpack@arg+2,7,c
  7468  002A9C  C019  F019         	movff	___ftpack@arg,?___ftpack
  7469  002AA0  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  7470  002AA4  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  7471  002AA8  0012               	return	
  7472  002AAA                     __end_of___ftpack:
  7473                           	opt stack 0
  7474                           tblptru	equ	0xFF8
  7475                           tblptrh	equ	0xFF7
  7476                           tblptrl	equ	0xFF6
  7477                           tablat	equ	0xFF5
  7478                           prodh	equ	0xFF4
  7479                           prodl	equ	0xFF3
  7480                           intcon	equ	0xFF2
  7481                           intcon2	equ	0xFF1
  7482                           intcon3	equ	0xFF0
  7483                           postinc0	equ	0xFEE
  7484                           wreg	equ	0xFE8
  7485                           postdec1	equ	0xFE5
  7486                           fsr1l	equ	0xFE1
  7487                           indf2	equ	0xFDF
  7488                           postinc2	equ	0xFDE
  7489                           postdec2	equ	0xFDD
  7490                           fsr2h	equ	0xFDA
  7491                           fsr2l	equ	0xFD9
  7492                           status	equ	0xFD8
  7493                           
  7494 ;; *************** function ___awdiv *****************
  7495 ;; Defined at:
  7496 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7497 ;; Parameters:    Size  Location     Type
  7498 ;;  dividend        2   24[COMRAM] int 
  7499 ;;  divisor         2   26[COMRAM] int 
  7500 ;; Auto vars:     Size  Location     Type
  7501 ;;  quotient        2   30[COMRAM] int 
  7502 ;;  sign            1   29[COMRAM] unsigned char 
  7503 ;;  counter         1   28[COMRAM] unsigned char 
  7504 ;; Return value:  Size  Location     Type
  7505 ;;                  2   24[COMRAM] int 
  7506 ;; Registers used:
  7507 ;;		wreg, status,2, status,0
  7508 ;; Tracked objects:
  7509 ;;		On entry : 0/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7513 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7514 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7516 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;Total ram usage:        8 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:    2
  7520 ;; This function calls:
  7521 ;;		Nothing
  7522 ;; This function is called by:
  7523 ;;		_dec_to_hex
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           	psect	text25
  7528  002C52                     __ptext25:
  7529                           	opt stack 0
  7530  002C52                     ___awdiv:
  7531                           	opt stack 25
  7532                           
  7533                           ;incstack = 0
  7534  002C52  0E00               	movlw	0
  7535  002C54  6E1E               	movwf	___awdiv@sign,c
  7536  002C56  AE1C               	btfss	___awdiv@divisor+1,7,c
  7537  002C58  D006               	goto	l3425
  7538  002C5A  6C1B               	negf	___awdiv@divisor,c
  7539  002C5C  1E1C               	comf	___awdiv@divisor+1,f,c
  7540  002C5E  B0D8               	btfsc	status,0,c
  7541  002C60  2A1C               	incf	___awdiv@divisor+1,f,c
  7542  002C62  0E01               	movlw	1
  7543  002C64  6E1E               	movwf	___awdiv@sign,c
  7544  002C66                     l3425:
  7545  002C66  AE1A               	btfss	___awdiv@dividend+1,7,c
  7546  002C68  D006               	goto	l3431
  7547  002C6A  6C19               	negf	___awdiv@dividend,c
  7548  002C6C  1E1A               	comf	___awdiv@dividend+1,f,c
  7549  002C6E  B0D8               	btfsc	status,0,c
  7550  002C70  2A1A               	incf	___awdiv@dividend+1,f,c
  7551  002C72  0E01               	movlw	1
  7552  002C74  1A1E               	xorwf	___awdiv@sign,f,c
  7553  002C76                     l3431:
  7554  002C76  0E00               	movlw	0
  7555  002C78  6E20               	movwf	___awdiv@quotient+1,c
  7556  002C7A  0E00               	movlw	0
  7557  002C7C  6E1F               	movwf	___awdiv@quotient,c
  7558  002C7E  501B               	movf	___awdiv@divisor,w,c
  7559  002C80  101C               	iorwf	___awdiv@divisor+1,w,c
  7560  002C82  B4D8               	btfsc	status,2,c
  7561  002C84  D01C               	goto	l3453
  7562  002C86  0E01               	movlw	1
  7563  002C88  6E1D               	movwf	___awdiv@counter,c
  7564  002C8A  D004               	goto	l3439
  7565  002C8C                     l3437:
  7566  002C8C  90D8               	bcf	status,0,c
  7567  002C8E  361B               	rlcf	___awdiv@divisor,f,c
  7568  002C90  361C               	rlcf	___awdiv@divisor+1,f,c
  7569  002C92  2A1D               	incf	___awdiv@counter,f,c
  7570  002C94                     l3439:
  7571  002C94  AE1C               	btfss	___awdiv@divisor+1,7,c
  7572  002C96  D7FA               	goto	l3437
  7573  002C98                     l3441:
  7574  002C98  90D8               	bcf	status,0,c
  7575  002C9A  361F               	rlcf	___awdiv@quotient,f,c
  7576  002C9C  3620               	rlcf	___awdiv@quotient+1,f,c
  7577  002C9E  501B               	movf	___awdiv@divisor,w,c
  7578  002CA0  5C19               	subwf	___awdiv@dividend,w,c
  7579  002CA2  501C               	movf	___awdiv@divisor+1,w,c
  7580  002CA4  581A               	subwfb	___awdiv@dividend+1,w,c
  7581  002CA6  A0D8               	btfss	status,0,c
  7582  002CA8  D005               	goto	l3449
  7583  002CAA  501B               	movf	___awdiv@divisor,w,c
  7584  002CAC  5E19               	subwf	___awdiv@dividend,f,c
  7585  002CAE  501C               	movf	___awdiv@divisor+1,w,c
  7586  002CB0  5A1A               	subwfb	___awdiv@dividend+1,f,c
  7587  002CB2  801F               	bsf	___awdiv@quotient,0,c
  7588  002CB4                     l3449:
  7589  002CB4  90D8               	bcf	status,0,c
  7590  002CB6  321C               	rrcf	___awdiv@divisor+1,f,c
  7591  002CB8  321B               	rrcf	___awdiv@divisor,f,c
  7592  002CBA  2E1D               	decfsz	___awdiv@counter,f,c
  7593  002CBC  D7ED               	goto	l3441
  7594  002CBE                     l3453:
  7595  002CBE  501E               	movf	___awdiv@sign,w,c
  7596  002CC0  B4D8               	btfsc	status,2,c
  7597  002CC2  D004               	goto	l3457
  7598  002CC4  6C1F               	negf	___awdiv@quotient,c
  7599  002CC6  1E20               	comf	___awdiv@quotient+1,f,c
  7600  002CC8  B0D8               	btfsc	status,0,c
  7601  002CCA  2A20               	incf	___awdiv@quotient+1,f,c
  7602  002CCC                     l3457:
  7603  002CCC  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  7604  002CD0  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  7605  002CD4  0012               	return	
  7606  002CD6                     __end_of___awdiv:
  7607                           	opt stack 0
  7608                           tblptru	equ	0xFF8
  7609                           tblptrh	equ	0xFF7
  7610                           tblptrl	equ	0xFF6
  7611                           tablat	equ	0xFF5
  7612                           prodh	equ	0xFF4
  7613                           prodl	equ	0xFF3
  7614                           intcon	equ	0xFF2
  7615                           intcon2	equ	0xFF1
  7616                           intcon3	equ	0xFF0
  7617                           postinc0	equ	0xFEE
  7618                           wreg	equ	0xFE8
  7619                           postdec1	equ	0xFE5
  7620                           fsr1l	equ	0xFE1
  7621                           indf2	equ	0xFDF
  7622                           postinc2	equ	0xFDE
  7623                           postdec2	equ	0xFDD
  7624                           fsr2h	equ	0xFDA
  7625                           fsr2l	equ	0xFD9
  7626                           status	equ	0xFD8
  7627                           
  7628 ;; *************** function _stepper_state *****************
  7629 ;; Defined at:
  7630 ;;		line 591 in file "main.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;  step_state      2   29[COMRAM] PTR unsigned char 
  7633 ;;		 -> main@step_state(2), 
  7634 ;; Auto vars:     Size  Location     Type
  7635 ;;  next_state      2   33[COMRAM] int 
  7636 ;; Return value:  Size  Location     Type
  7637 ;;                  1    wreg      void 
  7638 ;; Registers used:
  7639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7640 ;; Tracked objects:
  7641 ;;		On entry : 0/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7645 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7646 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7647 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7648 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7649 ;;Total ram usage:        6 bytes
  7650 ;; Hardware stack levels used:    1
  7651 ;; Hardware stack levels required when called:    3
  7652 ;; This function calls:
  7653 ;;		_stepper
  7654 ;;		_stepper_rev
  7655 ;; This function is called by:
  7656 ;;		_init_operation
  7657 ;;		_operation_end
  7658 ;; This function uses a non-reentrant model
  7659 ;;
  7660                           
  7661                           	psect	text26
  7662  00162C                     __ptext26:
  7663                           	opt stack 0
  7664  00162C                     _stepper_state:
  7665                           	opt stack 26
  7666                           
  7667                           ;main.c: 592: int next_state = step_state[1];
  7668                           
  7669                           ;incstack = 0
  7670  00162C  EE20 F001          	lfsr	2,1
  7671  001630  501E               	movf	stepper_state@step_state,w,c
  7672  001632  26D9               	addwf	fsr2l,f,c
  7673  001634  501F               	movf	stepper_state@step_state+1,w,c
  7674  001636  22DA               	addwfc	fsr2h,f,c
  7675  001638  50DF               	movf	indf2,w,c
  7676  00163A  6E20               	movwf	??_stepper_state& (0+255),c
  7677  00163C  5020               	movf	??_stepper_state,w,c
  7678  00163E  6E22               	movwf	stepper_state@next_state,c
  7679  001640  6A23               	clrf	stepper_state@next_state+1,c
  7680                           
  7681                           ;main.c: 593: switch(next_state){
  7682  001642  D0C7               	goto	l3897
  7683  001644                     l3839:
  7684                           
  7685                           ;main.c: 595: if (step_state[0] == 2) stepper_rev(85);
  7686  001644  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7687  001648  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7688  00164C  0E02               	movlw	2
  7689  00164E  18DE               	xorwf	postinc2,w,c
  7690  001650  A4D8               	btfss	status,2,c
  7691  001652  D007               	goto	l3843
  7692  001654  0E00               	movlw	0
  7693  001656  6E1A               	movwf	stepper_rev@r+1,c
  7694  001658  0E55               	movlw	85
  7695  00165A  6E19               	movwf	stepper_rev@r,c
  7696  00165C  EC6B  F016         	call	_stepper_rev	;wreg free
  7697  001660  D01C               	goto	l3851
  7698  001662                     l3843:
  7699                           
  7700                           ;main.c: 596: else if (step_state[0] == 3) stepper_rev(170);
  7701  001662  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7702  001666  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7703  00166A  0E03               	movlw	3
  7704  00166C  18DE               	xorwf	postinc2,w,c
  7705  00166E  A4D8               	btfss	status,2,c
  7706  001670  D007               	goto	l3847
  7707  001672  0E00               	movlw	0
  7708  001674  6E1A               	movwf	stepper_rev@r+1,c
  7709  001676  0EAA               	movlw	170
  7710  001678  6E19               	movwf	stepper_rev@r,c
  7711  00167A  EC6B  F016         	call	_stepper_rev	;wreg free
  7712  00167E  D00D               	goto	l3851
  7713  001680                     l3847:
  7714                           
  7715                           ;main.c: 597: else if (step_state[0] == 4) stepper_rev(255);
  7716  001680  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7717  001684  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7718  001688  0E04               	movlw	4
  7719  00168A  18DE               	xorwf	postinc2,w,c
  7720  00168C  A4D8               	btfss	status,2,c
  7721  00168E  D005               	goto	l3851
  7722  001690  0E00               	movlw	0
  7723  001692  6E1A               	movwf	stepper_rev@r+1,c
  7724  001694  6819               	setf	stepper_rev@r,c
  7725  001696  EC6B  F016         	call	_stepper_rev	;wreg free
  7726  00169A                     l3851:
  7727                           
  7728                           ;main.c: 598: step_state[0] = 1;
  7729  00169A  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7730  00169E  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7731  0016A2  0E01               	movlw	1
  7732  0016A4  6EDF               	movwf	indf2,c
  7733                           
  7734                           ;main.c: 599: break;
  7735  0016A6  0012               	return	
  7736  0016A8                     l3853:
  7737                           
  7738                           ;main.c: 601: if (step_state[0] == 3) stepper_rev(85);
  7739  0016A8  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7740  0016AC  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7741  0016B0  0E03               	movlw	3
  7742  0016B2  18DE               	xorwf	postinc2,w,c
  7743  0016B4  A4D8               	btfss	status,2,c
  7744  0016B6  D007               	goto	l3857
  7745  0016B8  0E00               	movlw	0
  7746  0016BA  6E1A               	movwf	stepper_rev@r+1,c
  7747  0016BC  0E55               	movlw	85
  7748  0016BE  6E19               	movwf	stepper_rev@r,c
  7749  0016C0  EC6B  F016         	call	_stepper_rev	;wreg free
  7750  0016C4  D01C               	goto	l3865
  7751  0016C6                     l3857:
  7752                           
  7753                           ;main.c: 602: else if (step_state[0] == 4) stepper_rev(170);
  7754  0016C6  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7755  0016CA  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7756  0016CE  0E04               	movlw	4
  7757  0016D0  18DE               	xorwf	postinc2,w,c
  7758  0016D2  A4D8               	btfss	status,2,c
  7759  0016D4  D007               	goto	l3861
  7760  0016D6  0E00               	movlw	0
  7761  0016D8  6E1A               	movwf	stepper_rev@r+1,c
  7762  0016DA  0EAA               	movlw	170
  7763  0016DC  6E19               	movwf	stepper_rev@r,c
  7764  0016DE  EC6B  F016         	call	_stepper_rev	;wreg free
  7765  0016E2  D00D               	goto	l3865
  7766  0016E4                     l3861:
  7767                           
  7768                           ;main.c: 603: else if (step_state[0] == 1) stepper(85);
  7769  0016E4  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7770  0016E8  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7771  0016EC  04DE               	decf	postinc2,w,c
  7772  0016EE  A4D8               	btfss	status,2,c
  7773  0016F0  D006               	goto	l3865
  7774  0016F2  0E00               	movlw	0
  7775  0016F4  6E1A               	movwf	stepper@r+1,c
  7776  0016F6  0E55               	movlw	85
  7777  0016F8  6E19               	movwf	stepper@r,c
  7778  0016FA  ECAD  F016         	call	_stepper	;wreg free
  7779  0016FE                     l3865:
  7780                           
  7781                           ;main.c: 604: step_state[0] = 2;
  7782  0016FE  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7783  001702  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7784  001706  0E02               	movlw	2
  7785  001708  6EDF               	movwf	indf2,c
  7786                           
  7787                           ;main.c: 605: break;
  7788  00170A  0012               	return	
  7789  00170C                     l3867:
  7790                           
  7791                           ;main.c: 607: if (step_state[0] == 4) stepper_rev(85);
  7792  00170C  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7793  001710  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7794  001714  0E04               	movlw	4
  7795  001716  18DE               	xorwf	postinc2,w,c
  7796  001718  A4D8               	btfss	status,2,c
  7797  00171A  D007               	goto	l3871
  7798  00171C  0E00               	movlw	0
  7799  00171E  6E1A               	movwf	stepper_rev@r+1,c
  7800  001720  0E55               	movlw	85
  7801  001722  6E19               	movwf	stepper_rev@r,c
  7802  001724  EC6B  F016         	call	_stepper_rev	;wreg free
  7803  001728  D01C               	goto	l3879
  7804  00172A                     l3871:
  7805                           
  7806                           ;main.c: 608: else if (step_state[0] == 1) stepper(170);
  7807  00172A  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7808  00172E  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7809  001732  04DE               	decf	postinc2,w,c
  7810  001734  A4D8               	btfss	status,2,c
  7811  001736  D007               	goto	l3875
  7812  001738  0E00               	movlw	0
  7813  00173A  6E1A               	movwf	stepper@r+1,c
  7814  00173C  0EAA               	movlw	170
  7815  00173E  6E19               	movwf	stepper@r,c
  7816  001740  ECAD  F016         	call	_stepper	;wreg free
  7817  001744  D00E               	goto	l3879
  7818  001746                     l3875:
  7819                           
  7820                           ;main.c: 609: else if (step_state[0] == 2) stepper(85);
  7821  001746  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7822  00174A  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7823  00174E  0E02               	movlw	2
  7824  001750  18DE               	xorwf	postinc2,w,c
  7825  001752  A4D8               	btfss	status,2,c
  7826  001754  D006               	goto	l3879
  7827  001756  0E00               	movlw	0
  7828  001758  6E1A               	movwf	stepper@r+1,c
  7829  00175A  0E55               	movlw	85
  7830  00175C  6E19               	movwf	stepper@r,c
  7831  00175E  ECAD  F016         	call	_stepper	;wreg free
  7832  001762                     l3879:
  7833                           
  7834                           ;main.c: 610: step_state[0] = 3;
  7835  001762  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7836  001766  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7837  00176A  0E03               	movlw	3
  7838  00176C  6EDF               	movwf	indf2,c
  7839                           
  7840                           ;main.c: 611: break;
  7841  00176E  0012               	return	
  7842  001770                     l3881:
  7843                           
  7844                           ;main.c: 613: if (step_state[0] == 1) stepper(255);
  7845  001770  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7846  001774  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7847  001778  04DE               	decf	postinc2,w,c
  7848  00177A  A4D8               	btfss	status,2,c
  7849  00177C  D006               	goto	l3885
  7850  00177E  0E00               	movlw	0
  7851  001780  6E1A               	movwf	stepper@r+1,c
  7852  001782  6819               	setf	stepper@r,c
  7853  001784  ECAD  F016         	call	_stepper	;wreg free
  7854  001788  D01D               	goto	l3893
  7855  00178A                     l3885:
  7856                           
  7857                           ;main.c: 614: else if (step_state[0] == 2) stepper(170);
  7858  00178A  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7859  00178E  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7860  001792  0E02               	movlw	2
  7861  001794  18DE               	xorwf	postinc2,w,c
  7862  001796  A4D8               	btfss	status,2,c
  7863  001798  D007               	goto	l3889
  7864  00179A  0E00               	movlw	0
  7865  00179C  6E1A               	movwf	stepper@r+1,c
  7866  00179E  0EAA               	movlw	170
  7867  0017A0  6E19               	movwf	stepper@r,c
  7868  0017A2  ECAD  F016         	call	_stepper	;wreg free
  7869  0017A6  D00E               	goto	l3893
  7870  0017A8                     l3889:
  7871                           
  7872                           ;main.c: 615: else if (step_state[0] == 3) stepper(85);
  7873  0017A8  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7874  0017AC  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7875  0017B0  0E03               	movlw	3
  7876  0017B2  18DE               	xorwf	postinc2,w,c
  7877  0017B4  A4D8               	btfss	status,2,c
  7878  0017B6  D006               	goto	l3893
  7879  0017B8  0E00               	movlw	0
  7880  0017BA  6E1A               	movwf	stepper@r+1,c
  7881  0017BC  0E55               	movlw	85
  7882  0017BE  6E19               	movwf	stepper@r,c
  7883  0017C0  ECAD  F016         	call	_stepper	;wreg free
  7884  0017C4                     l3893:
  7885                           
  7886                           ;main.c: 616: step_state[0] = 4;
  7887  0017C4  C01E  FFD9         	movff	stepper_state@step_state,fsr2l
  7888  0017C8  C01F  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7889  0017CC  0E04               	movlw	4
  7890  0017CE  6EDF               	movwf	indf2,c
  7891                           
  7892                           ;main.c: 618: }
  7893                           
  7894                           ;main.c: 617: break;
  7895  0017D0  0012               	return	
  7896  0017D2                     l3897:
  7897  0017D2  C022  F020         	movff	stepper_state@next_state,??_stepper_state
  7898  0017D6  C023  F021         	movff	stepper_state@next_state+1,??_stepper_state+1
  7899                           
  7900                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7901                           ; Switch size 1, requested type "space"
  7902                           ; Number of cases is 1, Range of values is 0 to 0
  7903                           ; switch strategies available:
  7904                           ; Name         Instructions Cycles
  7905                           ; simple_byte            4     3 (average)
  7906                           ;	Chosen strategy is simple_byte
  7907  0017DA  5021               	movf	??_stepper_state+1,w,c
  7908  0017DC  0A00               	xorlw	0	; case 0
  7909  0017DE  A4D8               	btfss	status,2,c
  7910  0017E0  0012               	return	
  7911                           
  7912                           ; Switch size 1, requested type "space"
  7913                           ; Number of cases is 4, Range of values is 1 to 4
  7914                           ; switch strategies available:
  7915                           ; Name         Instructions Cycles
  7916                           ; simple_byte           13     7 (average)
  7917                           ;	Chosen strategy is simple_byte
  7918  0017E2  5020               	movf	??_stepper_state,w,c
  7919  0017E4  0A01               	xorlw	1	; case 1
  7920  0017E6  B4D8               	btfsc	status,2,c
  7921  0017E8  D72D               	goto	l3839
  7922  0017EA  0A03               	xorlw	3	; case 2
  7923  0017EC  B4D8               	btfsc	status,2,c
  7924  0017EE  D75C               	goto	l3853
  7925  0017F0  0A01               	xorlw	1	; case 3
  7926  0017F2  B4D8               	btfsc	status,2,c
  7927  0017F4  D78B               	goto	l3867
  7928  0017F6  0A07               	xorlw	7	; case 4
  7929  0017F8  A4D8               	btfss	status,2,c
  7930  0017FA  0012               	return	
  7931  0017FC  D7B9               	goto	l3881
  7932  0017FE                     __end_of_stepper_state:
  7933                           	opt stack 0
  7934                           tblptru	equ	0xFF8
  7935                           tblptrh	equ	0xFF7
  7936                           tblptrl	equ	0xFF6
  7937                           tablat	equ	0xFF5
  7938                           prodh	equ	0xFF4
  7939                           prodl	equ	0xFF3
  7940                           intcon	equ	0xFF2
  7941                           intcon2	equ	0xFF1
  7942                           intcon3	equ	0xFF0
  7943                           postinc0	equ	0xFEE
  7944                           wreg	equ	0xFE8
  7945                           postdec1	equ	0xFE5
  7946                           fsr1l	equ	0xFE1
  7947                           indf2	equ	0xFDF
  7948                           postinc2	equ	0xFDE
  7949                           postdec2	equ	0xFDD
  7950                           fsr2h	equ	0xFDA
  7951                           fsr2l	equ	0xFD9
  7952                           status	equ	0xFD8
  7953                           
  7954 ;; *************** function _stepper_rev *****************
  7955 ;; Defined at:
  7956 ;;		line 565 in file "main.c"
  7957 ;; Parameters:    Size  Location     Type
  7958 ;;  r               2   24[COMRAM] int 
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;  i               2   27[COMRAM] int 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  1    wreg      void 
  7963 ;; Registers used:
  7964 ;;		wreg, status,2, status,0
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7970 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7972 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;Total ram usage:        5 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; Hardware stack levels required when called:    2
  7977 ;; This function calls:
  7978 ;;		Nothing
  7979 ;; This function is called by:
  7980 ;;		_stepper_state
  7981 ;; This function uses a non-reentrant model
  7982 ;;
  7983                           
  7984                           	psect	text27
  7985  002CD6                     __ptext27:
  7986                           	opt stack 0
  7987  002CD6                     _stepper_rev:
  7988                           	opt stack 26
  7989                           
  7990                           ;main.c: 567: for (int i = 0; i < r; i++){
  7991                           
  7992                           ;incstack = 0
  7993  002CD6  0E00               	movlw	0
  7994  002CD8  6E1D               	movwf	stepper_rev@i+1,c
  7995  002CDA  0E00               	movlw	0
  7996  002CDC  6E1C               	movwf	stepper_rev@i,c
  7997  002CDE  D032               	goto	l258
  7998  002CE0                     l259:
  7999                           
  8000                           ;main.c: 568: PORTCbits.RC0 = 0;
  8001  002CE0  9082               	bcf	3970,0,c	;volatile
  8002                           
  8003                           ;main.c: 569: PORTCbits.RC1 = 0;
  8004  002CE2  9282               	bcf	3970,1,c	;volatile
  8005                           
  8006                           ;main.c: 570: PORTCbits.RC2 = 1;
  8007  002CE4  8482               	bsf	3970,2,c	;volatile
  8008                           
  8009                           ;main.c: 571: PORTCbits.RC5 = 1;
  8010  002CE6  8A82               	bsf	3970,5,c	;volatile
  8011                           
  8012                           ;main.c: 572: _delay((unsigned long)((5)*(10000000/4000.0)));
  8013  002CE8  0E11               	movlw	17
  8014  002CEA  6E1B               	movwf	??_stepper_rev& (0+255),c
  8015  002CEC  0E3A               	movlw	58
  8016  002CEE                     u5687:
  8017  002CEE  2EE8               	decfsz	wreg,f,c
  8018  002CF0  D7FE               	bra	u5687
  8019  002CF2  2E1B               	decfsz	??_stepper_rev& (0+255),f,c
  8020  002CF4  D7FC               	bra	u5687
  8021  002CF6  D000               	nop2	
  8022                           
  8023                           ;main.c: 573: PORTCbits.RC0 = 0;
  8024  002CF8  9082               	bcf	3970,0,c	;volatile
  8025                           
  8026                           ;main.c: 574: PORTCbits.RC1 = 1;
  8027  002CFA  8282               	bsf	3970,1,c	;volatile
  8028                           
  8029                           ;main.c: 575: PORTCbits.RC2 = 1;
  8030  002CFC  8482               	bsf	3970,2,c	;volatile
  8031                           
  8032                           ;main.c: 576: PORTCbits.RC5 = 0;
  8033  002CFE  9A82               	bcf	3970,5,c	;volatile
  8034                           
  8035                           ;main.c: 577: _delay((unsigned long)((5)*(10000000/4000.0)));
  8036  002D00  0E11               	movlw	17
  8037  002D02  6E1B               	movwf	??_stepper_rev& (0+255),c
  8038  002D04  0E3A               	movlw	58
  8039  002D06                     u5697:
  8040  002D06  2EE8               	decfsz	wreg,f,c
  8041  002D08  D7FE               	bra	u5697
  8042  002D0A  2E1B               	decfsz	??_stepper_rev& (0+255),f,c
  8043  002D0C  D7FC               	bra	u5697
  8044  002D0E  D000               	nop2	
  8045                           
  8046                           ;main.c: 578: PORTCbits.RC0 = 1;
  8047  002D10  8082               	bsf	3970,0,c	;volatile
  8048                           
  8049                           ;main.c: 579: PORTCbits.RC1 = 1;
  8050  002D12  8282               	bsf	3970,1,c	;volatile
  8051                           
  8052                           ;main.c: 580: PORTCbits.RC2 = 1;
  8053  002D14  8482               	bsf	3970,2,c	;volatile
  8054                           
  8055                           ;main.c: 581: PORTCbits.RC5 = 0;
  8056  002D16  9A82               	bcf	3970,5,c	;volatile
  8057                           
  8058                           ;main.c: 582: _delay((unsigned long)((5)*(10000000/4000.0)));
  8059  002D18  0E11               	movlw	17
  8060  002D1A  6E1B               	movwf	??_stepper_rev& (0+255),c
  8061  002D1C  0E3A               	movlw	58
  8062  002D1E                     u5707:
  8063  002D1E  2EE8               	decfsz	wreg,f,c
  8064  002D20  D7FE               	bra	u5707
  8065  002D22  2E1B               	decfsz	??_stepper_rev& (0+255),f,c
  8066  002D24  D7FC               	bra	u5707
  8067  002D26  D000               	nop2	
  8068                           
  8069                           ;main.c: 583: PORTCbits.RC0 = 1;
  8070  002D28  8082               	bsf	3970,0,c	;volatile
  8071                           
  8072                           ;main.c: 584: PORTCbits.RC1 = 0;
  8073  002D2A  9282               	bcf	3970,1,c	;volatile
  8074                           
  8075                           ;main.c: 585: PORTCbits.RC2 = 0;
  8076  002D2C  9482               	bcf	3970,2,c	;volatile
  8077                           
  8078                           ;main.c: 586: PORTCbits.RC5 = 1;
  8079  002D2E  8A82               	bsf	3970,5,c	;volatile
  8080                           
  8081                           ;main.c: 587: _delay((unsigned long)((5)*(10000000/4000.0)));
  8082  002D30  0E11               	movlw	17
  8083  002D32  6E1B               	movwf	??_stepper_rev& (0+255),c
  8084  002D34  0E3A               	movlw	58
  8085  002D36                     u5717:
  8086  002D36  2EE8               	decfsz	wreg,f,c
  8087  002D38  D7FE               	bra	u5717
  8088  002D3A  2E1B               	decfsz	??_stepper_rev& (0+255),f,c
  8089  002D3C  D7FC               	bra	u5717
  8090  002D3E  D000               	nop2	
  8091  002D40  4A1C               	infsnz	stepper_rev@i,f,c
  8092  002D42  2A1D               	incf	stepper_rev@i+1,f,c
  8093  002D44                     l258:
  8094  002D44  5019               	movf	stepper_rev@r,w,c
  8095  002D46  5C1C               	subwf	stepper_rev@i,w,c
  8096  002D48  501D               	movf	stepper_rev@i+1,w,c
  8097  002D4A  0A80               	xorlw	128
  8098  002D4C  6E1B               	movwf	??_stepper_rev& (0+255),c
  8099  002D4E  501A               	movf	stepper_rev@r+1,w,c
  8100  002D50  0A80               	xorlw	128
  8101  002D52  581B               	subwfb	??_stepper_rev& (0+255),w,c
  8102  002D54  B0D8               	btfsc	status,0,c
  8103  002D56  0012               	return	
  8104  002D58  D7C3               	goto	l259
  8105  002D5A                     __end_of_stepper_rev:
  8106                           	opt stack 0
  8107                           tblptru	equ	0xFF8
  8108                           tblptrh	equ	0xFF7
  8109                           tblptrl	equ	0xFF6
  8110                           tablat	equ	0xFF5
  8111                           prodh	equ	0xFF4
  8112                           prodl	equ	0xFF3
  8113                           intcon	equ	0xFF2
  8114                           intcon2	equ	0xFF1
  8115                           intcon3	equ	0xFF0
  8116                           postinc0	equ	0xFEE
  8117                           wreg	equ	0xFE8
  8118                           postdec1	equ	0xFE5
  8119                           fsr1l	equ	0xFE1
  8120                           indf2	equ	0xFDF
  8121                           postinc2	equ	0xFDE
  8122                           postdec2	equ	0xFDD
  8123                           fsr2h	equ	0xFDA
  8124                           fsr2l	equ	0xFD9
  8125                           status	equ	0xFD8
  8126                           
  8127 ;; *************** function _stepper *****************
  8128 ;; Defined at:
  8129 ;;		line 539 in file "main.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;  r               2   24[COMRAM] int 
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;  i               2   27[COMRAM] int 
  8134 ;; Return value:  Size  Location     Type
  8135 ;;                  1    wreg      void 
  8136 ;; Registers used:
  8137 ;;		wreg, status,2, status,0
  8138 ;; Tracked objects:
  8139 ;;		On entry : 0/0
  8140 ;;		On exit  : 0/0
  8141 ;;		Unchanged: 0/0
  8142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8143 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8145 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8146 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8147 ;;Total ram usage:        5 bytes
  8148 ;; Hardware stack levels used:    1
  8149 ;; Hardware stack levels required when called:    2
  8150 ;; This function calls:
  8151 ;;		Nothing
  8152 ;; This function is called by:
  8153 ;;		_stepper_state
  8154 ;; This function uses a non-reentrant model
  8155 ;;
  8156                           
  8157                           	psect	text28
  8158  002D5A                     __ptext28:
  8159                           	opt stack 0
  8160  002D5A                     _stepper:
  8161                           	opt stack 26
  8162                           
  8163                           ;main.c: 541: for (int i = 0; i < r; i++){
  8164                           
  8165                           ;incstack = 0
  8166  002D5A  0E00               	movlw	0
  8167  002D5C  6E1D               	movwf	stepper@i+1,c
  8168  002D5E  0E00               	movlw	0
  8169  002D60  6E1C               	movwf	stepper@i,c
  8170  002D62  D032               	goto	l252
  8171  002D64                     l253:
  8172                           
  8173                           ;main.c: 542: PORTCbits.RC0 = 1;
  8174  002D64  8082               	bsf	3970,0,c	;volatile
  8175                           
  8176                           ;main.c: 543: PORTCbits.RC1 = 1;
  8177  002D66  8282               	bsf	3970,1,c	;volatile
  8178                           
  8179                           ;main.c: 544: PORTCbits.RC2 = 0;
  8180  002D68  9482               	bcf	3970,2,c	;volatile
  8181                           
  8182                           ;main.c: 545: PORTCbits.RC5 = 0;
  8183  002D6A  9A82               	bcf	3970,5,c	;volatile
  8184                           
  8185                           ;main.c: 546: _delay((unsigned long)((5)*(10000000/4000.0)));
  8186  002D6C  0E11               	movlw	17
  8187  002D6E  6E1B               	movwf	??_stepper& (0+255),c
  8188  002D70  0E3A               	movlw	58
  8189  002D72                     u5727:
  8190  002D72  2EE8               	decfsz	wreg,f,c
  8191  002D74  D7FE               	bra	u5727
  8192  002D76  2E1B               	decfsz	??_stepper& (0+255),f,c
  8193  002D78  D7FC               	bra	u5727
  8194  002D7A  D000               	nop2	
  8195                           
  8196                           ;main.c: 547: PORTCbits.RC0 = 0;
  8197  002D7C  9082               	bcf	3970,0,c	;volatile
  8198                           
  8199                           ;main.c: 548: PORTCbits.RC1 = 1;
  8200  002D7E  8282               	bsf	3970,1,c	;volatile
  8201                           
  8202                           ;main.c: 549: PORTCbits.RC2 = 1;
  8203  002D80  8482               	bsf	3970,2,c	;volatile
  8204                           
  8205                           ;main.c: 550: PORTCbits.RC5 = 0;
  8206  002D82  9A82               	bcf	3970,5,c	;volatile
  8207                           
  8208                           ;main.c: 551: _delay((unsigned long)((5)*(10000000/4000.0)));
  8209  002D84  0E11               	movlw	17
  8210  002D86  6E1B               	movwf	??_stepper& (0+255),c
  8211  002D88  0E3A               	movlw	58
  8212  002D8A                     u5737:
  8213  002D8A  2EE8               	decfsz	wreg,f,c
  8214  002D8C  D7FE               	bra	u5737
  8215  002D8E  2E1B               	decfsz	??_stepper& (0+255),f,c
  8216  002D90  D7FC               	bra	u5737
  8217  002D92  D000               	nop2	
  8218                           
  8219                           ;main.c: 552: PORTCbits.RC0 = 0;
  8220  002D94  9082               	bcf	3970,0,c	;volatile
  8221                           
  8222                           ;main.c: 553: PORTCbits.RC1 = 0;
  8223  002D96  9282               	bcf	3970,1,c	;volatile
  8224                           
  8225                           ;main.c: 554: PORTCbits.RC2 = 1;
  8226  002D98  8482               	bsf	3970,2,c	;volatile
  8227                           
  8228                           ;main.c: 555: PORTCbits.RC5 = 1;
  8229  002D9A  8A82               	bsf	3970,5,c	;volatile
  8230                           
  8231                           ;main.c: 556: _delay((unsigned long)((5)*(10000000/4000.0)));
  8232  002D9C  0E11               	movlw	17
  8233  002D9E  6E1B               	movwf	??_stepper& (0+255),c
  8234  002DA0  0E3A               	movlw	58
  8235  002DA2                     u5747:
  8236  002DA2  2EE8               	decfsz	wreg,f,c
  8237  002DA4  D7FE               	bra	u5747
  8238  002DA6  2E1B               	decfsz	??_stepper& (0+255),f,c
  8239  002DA8  D7FC               	bra	u5747
  8240  002DAA  D000               	nop2	
  8241                           
  8242                           ;main.c: 557: PORTCbits.RC0 = 1;
  8243  002DAC  8082               	bsf	3970,0,c	;volatile
  8244                           
  8245                           ;main.c: 558: PORTCbits.RC1 = 0;
  8246  002DAE  9282               	bcf	3970,1,c	;volatile
  8247                           
  8248                           ;main.c: 559: PORTCbits.RC2 = 0;
  8249  002DB0  9482               	bcf	3970,2,c	;volatile
  8250                           
  8251                           ;main.c: 560: PORTCbits.RC5 = 1;
  8252  002DB2  8A82               	bsf	3970,5,c	;volatile
  8253                           
  8254                           ;main.c: 561: _delay((unsigned long)((5)*(10000000/4000.0)));
  8255  002DB4  0E11               	movlw	17
  8256  002DB6  6E1B               	movwf	??_stepper& (0+255),c
  8257  002DB8  0E3A               	movlw	58
  8258  002DBA                     u5757:
  8259  002DBA  2EE8               	decfsz	wreg,f,c
  8260  002DBC  D7FE               	bra	u5757
  8261  002DBE  2E1B               	decfsz	??_stepper& (0+255),f,c
  8262  002DC0  D7FC               	bra	u5757
  8263  002DC2  D000               	nop2	
  8264  002DC4  4A1C               	infsnz	stepper@i,f,c
  8265  002DC6  2A1D               	incf	stepper@i+1,f,c
  8266  002DC8                     l252:
  8267  002DC8  5019               	movf	stepper@r,w,c
  8268  002DCA  5C1C               	subwf	stepper@i,w,c
  8269  002DCC  501D               	movf	stepper@i+1,w,c
  8270  002DCE  0A80               	xorlw	128
  8271  002DD0  6E1B               	movwf	??_stepper& (0+255),c
  8272  002DD2  501A               	movf	stepper@r+1,w,c
  8273  002DD4  0A80               	xorlw	128
  8274  002DD6  581B               	subwfb	??_stepper& (0+255),w,c
  8275  002DD8  B0D8               	btfsc	status,0,c
  8276  002DDA  0012               	return	
  8277  002DDC  D7C3               	goto	l253
  8278  002DDE                     __end_of_stepper:
  8279                           	opt stack 0
  8280                           tblptru	equ	0xFF8
  8281                           tblptrh	equ	0xFF7
  8282                           tblptrl	equ	0xFF6
  8283                           tablat	equ	0xFF5
  8284                           prodh	equ	0xFF4
  8285                           prodl	equ	0xFF3
  8286                           intcon	equ	0xFF2
  8287                           intcon2	equ	0xFF1
  8288                           intcon3	equ	0xFF0
  8289                           postinc0	equ	0xFEE
  8290                           wreg	equ	0xFE8
  8291                           postdec1	equ	0xFE5
  8292                           fsr1l	equ	0xFE1
  8293                           indf2	equ	0xFDF
  8294                           postinc2	equ	0xFDE
  8295                           postdec2	equ	0xFDD
  8296                           fsr2h	equ	0xFDA
  8297                           fsr2l	equ	0xFD9
  8298                           status	equ	0xFD8
  8299                           
  8300 ;; *************** function _read_colorsensor2 *****************
  8301 ;; Defined at:
  8302 ;;		line 659 in file "main.c"
  8303 ;; Parameters:    Size  Location     Type
  8304 ;;  red             2   27[COMRAM] PTR unsigned char 
  8305 ;;		 -> init_operation@red(2), 
  8306 ;;  green           2   29[COMRAM] PTR unsigned char 
  8307 ;;		 -> init_operation@green(2), 
  8308 ;;  blue            2   31[COMRAM] PTR unsigned char 
  8309 ;;		 -> init_operation@blue(2), 
  8310 ;;  clear           2   33[COMRAM] PTR unsigned char 
  8311 ;;		 -> init_operation@clear(2), 
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;		None
  8314 ;; Return value:  Size  Location     Type
  8315 ;;                  1    wreg      void 
  8316 ;; Registers used:
  8317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8323 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8327 ;;Total ram usage:        8 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    4
  8330 ;; This function calls:
  8331 ;;		_I2C_Master_Read
  8332 ;;		_I2C_Master_Start
  8333 ;;		_I2C_Master_Stop
  8334 ;;		_I2C_Master_Write
  8335 ;; This function is called by:
  8336 ;;		_init_operation
  8337 ;; This function uses a non-reentrant model
  8338 ;;
  8339                           
  8340                           	psect	text29
  8341  002162                     __ptext29:
  8342                           	opt stack 0
  8343  002162                     _read_colorsensor2:
  8344                           	opt stack 25
  8345                           
  8346                           ;main.c: 661: I2C_Master_Start();
  8347                           
  8348                           ;incstack = 0
  8349  002162  ECB8  F019         	call	_I2C_Master_Start	;wreg free
  8350                           
  8351                           ;main.c: 662: I2C_Master_Write(0b11100000);
  8352  002166  0E00               	movlw	0
  8353  002168  6E1B               	movwf	I2C_Master_Write@d+1,c
  8354  00216A  0EE0               	movlw	224
  8355  00216C  6E1A               	movwf	I2C_Master_Write@d,c
  8356  00216E  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8357                           
  8358                           ;main.c: 663: I2C_Master_Write(0b10000000);
  8359  002172  0E00               	movlw	0
  8360  002174  6E1B               	movwf	I2C_Master_Write@d+1,c
  8361  002176  0E80               	movlw	128
  8362  002178  6E1A               	movwf	I2C_Master_Write@d,c
  8363  00217A  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8364                           
  8365                           ;main.c: 664: I2C_Master_Write(0b00000100);
  8366  00217E  0E00               	movlw	0
  8367  002180  6E1B               	movwf	I2C_Master_Write@d+1,c
  8368  002182  0E04               	movlw	4
  8369  002184  6E1A               	movwf	I2C_Master_Write@d,c
  8370  002186  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8371                           
  8372                           ;main.c: 665: I2C_Master_Stop();
  8373  00218A  ECB4  F019         	call	_I2C_Master_Stop	;wreg free
  8374                           
  8375                           ;main.c: 668: I2C_Master_Start();
  8376  00218E  ECB8  F019         	call	_I2C_Master_Start	;wreg free
  8377                           
  8378                           ;main.c: 669: I2C_Master_Write(0b01010010);
  8379  002192  0E00               	movlw	0
  8380  002194  6E1B               	movwf	I2C_Master_Write@d+1,c
  8381  002196  0E52               	movlw	82
  8382  002198  6E1A               	movwf	I2C_Master_Write@d,c
  8383  00219A  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8384                           
  8385                           ;main.c: 670: I2C_Master_Write(0b10000000);
  8386  00219E  0E00               	movlw	0
  8387  0021A0  6E1B               	movwf	I2C_Master_Write@d+1,c
  8388  0021A2  0E80               	movlw	128
  8389  0021A4  6E1A               	movwf	I2C_Master_Write@d,c
  8390  0021A6  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8391                           
  8392                           ;main.c: 671: I2C_Master_Write(0b00000011);
  8393  0021AA  0E00               	movlw	0
  8394  0021AC  6E1B               	movwf	I2C_Master_Write@d+1,c
  8395  0021AE  0E03               	movlw	3
  8396  0021B0  6E1A               	movwf	I2C_Master_Write@d,c
  8397  0021B2  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8398                           
  8399                           ;main.c: 672: I2C_Master_Stop();
  8400  0021B6  ECB4  F019         	call	_I2C_Master_Stop	;wreg free
  8401                           
  8402                           ;main.c: 675: I2C_Master_Start();
  8403  0021BA  ECB8  F019         	call	_I2C_Master_Start	;wreg free
  8404                           
  8405                           ;main.c: 676: I2C_Master_Write(0b01010010);
  8406  0021BE  0E00               	movlw	0
  8407  0021C0  6E1B               	movwf	I2C_Master_Write@d+1,c
  8408  0021C2  0E52               	movlw	82
  8409  0021C4  6E1A               	movwf	I2C_Master_Write@d,c
  8410  0021C6  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8411                           
  8412                           ;main.c: 677: I2C_Master_Write(0b10110100);
  8413  0021CA  0E00               	movlw	0
  8414  0021CC  6E1B               	movwf	I2C_Master_Write@d+1,c
  8415  0021CE  0EB4               	movlw	180
  8416  0021D0  6E1A               	movwf	I2C_Master_Write@d,c
  8417  0021D2  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8418                           
  8419                           ;main.c: 678: I2C_Master_Start();
  8420  0021D6  ECB8  F019         	call	_I2C_Master_Start	;wreg free
  8421                           
  8422                           ;main.c: 679: I2C_Master_Write(0b01010011);
  8423  0021DA  0E00               	movlw	0
  8424  0021DC  6E1B               	movwf	I2C_Master_Write@d+1,c
  8425  0021DE  0E53               	movlw	83
  8426  0021E0  6E1A               	movwf	I2C_Master_Write@d,c
  8427  0021E2  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8428                           
  8429                           ;main.c: 681: clear[1] = I2C_Master_Read(1);
  8430  0021E6  EE20 F001          	lfsr	2,1
  8431  0021EA  5022               	movf	read_colorsensor2@clear,w,c
  8432  0021EC  26D9               	addwf	fsr2l,f,c
  8433  0021EE  5023               	movf	read_colorsensor2@clear+1,w,c
  8434  0021F0  22DA               	addwfc	fsr2h,f,c
  8435  0021F2  0E01               	movlw	1
  8436  0021F4  EC22  F019         	call	_I2C_Master_Read
  8437  0021F8  6EDF               	movwf	indf2,c
  8438                           
  8439                           ;main.c: 682: clear[0] = I2C_Master_Read(1);
  8440  0021FA  0E01               	movlw	1
  8441  0021FC  EC22  F019         	call	_I2C_Master_Read
  8442  002200  C022  FFD9         	movff	read_colorsensor2@clear,fsr2l
  8443  002204  C023  FFDA         	movff	read_colorsensor2@clear+1,fsr2h
  8444  002208  6EDF               	movwf	indf2,c
  8445                           
  8446                           ;main.c: 684: red[1] = I2C_Master_Read(1);
  8447  00220A  EE20 F001          	lfsr	2,1
  8448  00220E  501C               	movf	read_colorsensor2@red,w,c
  8449  002210  26D9               	addwf	fsr2l,f,c
  8450  002212  501D               	movf	read_colorsensor2@red+1,w,c
  8451  002214  22DA               	addwfc	fsr2h,f,c
  8452  002216  0E01               	movlw	1
  8453  002218  EC22  F019         	call	_I2C_Master_Read
  8454  00221C  6EDF               	movwf	indf2,c
  8455                           
  8456                           ;main.c: 685: red[0] = I2C_Master_Read(1);
  8457  00221E  0E01               	movlw	1
  8458  002220  EC22  F019         	call	_I2C_Master_Read
  8459  002224  C01C  FFD9         	movff	read_colorsensor2@red,fsr2l
  8460  002228  C01D  FFDA         	movff	read_colorsensor2@red+1,fsr2h
  8461  00222C  6EDF               	movwf	indf2,c
  8462                           
  8463                           ;main.c: 687: green[1] = I2C_Master_Read(1);
  8464  00222E  EE20 F001          	lfsr	2,1
  8465  002232  501E               	movf	read_colorsensor2@green,w,c
  8466  002234  26D9               	addwf	fsr2l,f,c
  8467  002236  501F               	movf	read_colorsensor2@green+1,w,c
  8468  002238  22DA               	addwfc	fsr2h,f,c
  8469  00223A  0E01               	movlw	1
  8470  00223C  EC22  F019         	call	_I2C_Master_Read
  8471  002240  6EDF               	movwf	indf2,c
  8472                           
  8473                           ;main.c: 688: green[0] = I2C_Master_Read(1);
  8474  002242  0E01               	movlw	1
  8475  002244  EC22  F019         	call	_I2C_Master_Read
  8476  002248  C01E  FFD9         	movff	read_colorsensor2@green,fsr2l
  8477  00224C  C01F  FFDA         	movff	read_colorsensor2@green+1,fsr2h
  8478  002250  6EDF               	movwf	indf2,c
  8479                           
  8480                           ;main.c: 690: blue[1] = I2C_Master_Read(1);
  8481  002252  EE20 F001          	lfsr	2,1
  8482  002256  5020               	movf	read_colorsensor2@blue,w,c
  8483  002258  26D9               	addwf	fsr2l,f,c
  8484  00225A  5021               	movf	read_colorsensor2@blue+1,w,c
  8485  00225C  22DA               	addwfc	fsr2h,f,c
  8486  00225E  0E01               	movlw	1
  8487  002260  EC22  F019         	call	_I2C_Master_Read
  8488  002264  6EDF               	movwf	indf2,c
  8489                           
  8490                           ;main.c: 691: blue[0] = I2C_Master_Read(0);
  8491  002266  0E00               	movlw	0
  8492  002268  EC22  F019         	call	_I2C_Master_Read
  8493  00226C  C020  FFD9         	movff	read_colorsensor2@blue,fsr2l
  8494  002270  C021  FFDA         	movff	read_colorsensor2@blue+1,fsr2h
  8495  002274  6EDF               	movwf	indf2,c
  8496                           
  8497                           ;main.c: 693: I2C_Master_Stop();
  8498  002276  ECB4  F019         	call	_I2C_Master_Stop	;wreg free
  8499  00227A  0012               	return		;funcret
  8500  00227C                     __end_of_read_colorsensor2:
  8501                           	opt stack 0
  8502                           tblptru	equ	0xFF8
  8503                           tblptrh	equ	0xFF7
  8504                           tblptrl	equ	0xFF6
  8505                           tablat	equ	0xFF5
  8506                           prodh	equ	0xFF4
  8507                           prodl	equ	0xFF3
  8508                           intcon	equ	0xFF2
  8509                           intcon2	equ	0xFF1
  8510                           intcon3	equ	0xFF0
  8511                           postinc0	equ	0xFEE
  8512                           wreg	equ	0xFE8
  8513                           postdec1	equ	0xFE5
  8514                           fsr1l	equ	0xFE1
  8515                           indf2	equ	0xFDF
  8516                           postinc2	equ	0xFDE
  8517                           postdec2	equ	0xFDD
  8518                           fsr2h	equ	0xFDA
  8519                           fsr2l	equ	0xFD9
  8520                           status	equ	0xFD8
  8521                           
  8522 ;; *************** function _read_colorsensor1 *****************
  8523 ;; Defined at:
  8524 ;;		line 621 in file "main.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;  red             2   27[COMRAM] PTR unsigned char 
  8527 ;;		 -> init_operation@red(2), 
  8528 ;;  green           2   29[COMRAM] PTR unsigned char 
  8529 ;;		 -> init_operation@green(2), 
  8530 ;;  blue            2   31[COMRAM] PTR unsigned char 
  8531 ;;		 -> init_operation@blue(2), 
  8532 ;;  clear           2   33[COMRAM] PTR unsigned char 
  8533 ;;		 -> init_operation@clear(2), 
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;		None
  8536 ;; Return value:  Size  Location     Type
  8537 ;;                  1    wreg      void 
  8538 ;; Registers used:
  8539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8540 ;; Tracked objects:
  8541 ;;		On entry : 0/0
  8542 ;;		On exit  : 0/0
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8545 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8548 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8549 ;;Total ram usage:        8 bytes
  8550 ;; Hardware stack levels used:    1
  8551 ;; Hardware stack levels required when called:    4
  8552 ;; This function calls:
  8553 ;;		_I2C_Master_Read
  8554 ;;		_I2C_Master_Start
  8555 ;;		_I2C_Master_Stop
  8556 ;;		_I2C_Master_Write
  8557 ;; This function is called by:
  8558 ;;		_init_operation
  8559 ;; This function uses a non-reentrant model
  8560 ;;
  8561                           
  8562                           	psect	text30
  8563  00227C                     __ptext30:
  8564                           	opt stack 0
  8565  00227C                     _read_colorsensor1:
  8566                           	opt stack 25
  8567                           
  8568                           ;main.c: 623: I2C_Master_Start();
  8569                           
  8570                           ;incstack = 0
  8571  00227C  ECB8  F019         	call	_I2C_Master_Start	;wreg free
  8572                           
  8573                           ;main.c: 624: I2C_Master_Write(0b11100000);
  8574  002280  0E00               	movlw	0
  8575  002282  6E1B               	movwf	I2C_Master_Write@d+1,c
  8576  002284  0EE0               	movlw	224
  8577  002286  6E1A               	movwf	I2C_Master_Write@d,c
  8578  002288  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8579                           
  8580                           ;main.c: 625: I2C_Master_Write(0b10000000);
  8581  00228C  0E00               	movlw	0
  8582  00228E  6E1B               	movwf	I2C_Master_Write@d+1,c
  8583  002290  0E80               	movlw	128
  8584  002292  6E1A               	movwf	I2C_Master_Write@d,c
  8585  002294  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8586                           
  8587                           ;main.c: 626: I2C_Master_Write(0b10000000);
  8588  002298  0E00               	movlw	0
  8589  00229A  6E1B               	movwf	I2C_Master_Write@d+1,c
  8590  00229C  0E80               	movlw	128
  8591  00229E  6E1A               	movwf	I2C_Master_Write@d,c
  8592  0022A0  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8593                           
  8594                           ;main.c: 627: I2C_Master_Stop();
  8595  0022A4  ECB4  F019         	call	_I2C_Master_Stop	;wreg free
  8596                           
  8597                           ;main.c: 630: I2C_Master_Start();
  8598  0022A8  ECB8  F019         	call	_I2C_Master_Start	;wreg free
  8599                           
  8600                           ;main.c: 631: I2C_Master_Write(0b01010010);
  8601  0022AC  0E00               	movlw	0
  8602  0022AE  6E1B               	movwf	I2C_Master_Write@d+1,c
  8603  0022B0  0E52               	movlw	82
  8604  0022B2  6E1A               	movwf	I2C_Master_Write@d,c
  8605  0022B4  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8606                           
  8607                           ;main.c: 632: I2C_Master_Write(0b10000000);
  8608  0022B8  0E00               	movlw	0
  8609  0022BA  6E1B               	movwf	I2C_Master_Write@d+1,c
  8610  0022BC  0E80               	movlw	128
  8611  0022BE  6E1A               	movwf	I2C_Master_Write@d,c
  8612  0022C0  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8613                           
  8614                           ;main.c: 633: I2C_Master_Write(0b00000011);
  8615  0022C4  0E00               	movlw	0
  8616  0022C6  6E1B               	movwf	I2C_Master_Write@d+1,c
  8617  0022C8  0E03               	movlw	3
  8618  0022CA  6E1A               	movwf	I2C_Master_Write@d,c
  8619  0022CC  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8620                           
  8621                           ;main.c: 634: I2C_Master_Stop();
  8622  0022D0  ECB4  F019         	call	_I2C_Master_Stop	;wreg free
  8623                           
  8624                           ;main.c: 637: I2C_Master_Start();
  8625  0022D4  ECB8  F019         	call	_I2C_Master_Start	;wreg free
  8626                           
  8627                           ;main.c: 638: I2C_Master_Write(0b01010010);
  8628  0022D8  0E00               	movlw	0
  8629  0022DA  6E1B               	movwf	I2C_Master_Write@d+1,c
  8630  0022DC  0E52               	movlw	82
  8631  0022DE  6E1A               	movwf	I2C_Master_Write@d,c
  8632  0022E0  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8633                           
  8634                           ;main.c: 639: I2C_Master_Write(0b10110100);
  8635  0022E4  0E00               	movlw	0
  8636  0022E6  6E1B               	movwf	I2C_Master_Write@d+1,c
  8637  0022E8  0EB4               	movlw	180
  8638  0022EA  6E1A               	movwf	I2C_Master_Write@d,c
  8639  0022EC  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8640                           
  8641                           ;main.c: 640: I2C_Master_Start();
  8642  0022F0  ECB8  F019         	call	_I2C_Master_Start	;wreg free
  8643                           
  8644                           ;main.c: 641: I2C_Master_Write(0b01010011);
  8645  0022F4  0E00               	movlw	0
  8646  0022F6  6E1B               	movwf	I2C_Master_Write@d+1,c
  8647  0022F8  0E53               	movlw	83
  8648  0022FA  6E1A               	movwf	I2C_Master_Write@d,c
  8649  0022FC  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  8650                           
  8651                           ;main.c: 643: clear[1] = I2C_Master_Read(1);
  8652  002300  EE20 F001          	lfsr	2,1
  8653  002304  5022               	movf	read_colorsensor1@clear,w,c
  8654  002306  26D9               	addwf	fsr2l,f,c
  8655  002308  5023               	movf	read_colorsensor1@clear+1,w,c
  8656  00230A  22DA               	addwfc	fsr2h,f,c
  8657  00230C  0E01               	movlw	1
  8658  00230E  EC22  F019         	call	_I2C_Master_Read
  8659  002312  6EDF               	movwf	indf2,c
  8660                           
  8661                           ;main.c: 644: clear[0] = I2C_Master_Read(1);
  8662  002314  0E01               	movlw	1
  8663  002316  EC22  F019         	call	_I2C_Master_Read
  8664  00231A  C022  FFD9         	movff	read_colorsensor1@clear,fsr2l
  8665  00231E  C023  FFDA         	movff	read_colorsensor1@clear+1,fsr2h
  8666  002322  6EDF               	movwf	indf2,c
  8667                           
  8668                           ;main.c: 646: red[1] = I2C_Master_Read(1);
  8669  002324  EE20 F001          	lfsr	2,1
  8670  002328  501C               	movf	read_colorsensor1@red,w,c
  8671  00232A  26D9               	addwf	fsr2l,f,c
  8672  00232C  501D               	movf	read_colorsensor1@red+1,w,c
  8673  00232E  22DA               	addwfc	fsr2h,f,c
  8674  002330  0E01               	movlw	1
  8675  002332  EC22  F019         	call	_I2C_Master_Read
  8676  002336  6EDF               	movwf	indf2,c
  8677                           
  8678                           ;main.c: 647: red[0] = I2C_Master_Read(1);
  8679  002338  0E01               	movlw	1
  8680  00233A  EC22  F019         	call	_I2C_Master_Read
  8681  00233E  C01C  FFD9         	movff	read_colorsensor1@red,fsr2l
  8682  002342  C01D  FFDA         	movff	read_colorsensor1@red+1,fsr2h
  8683  002346  6EDF               	movwf	indf2,c
  8684                           
  8685                           ;main.c: 649: green[1] = I2C_Master_Read(1);
  8686  002348  EE20 F001          	lfsr	2,1
  8687  00234C  501E               	movf	read_colorsensor1@green,w,c
  8688  00234E  26D9               	addwf	fsr2l,f,c
  8689  002350  501F               	movf	read_colorsensor1@green+1,w,c
  8690  002352  22DA               	addwfc	fsr2h,f,c
  8691  002354  0E01               	movlw	1
  8692  002356  EC22  F019         	call	_I2C_Master_Read
  8693  00235A  6EDF               	movwf	indf2,c
  8694                           
  8695                           ;main.c: 650: green[0] = I2C_Master_Read(1);
  8696  00235C  0E01               	movlw	1
  8697  00235E  EC22  F019         	call	_I2C_Master_Read
  8698  002362  C01E  FFD9         	movff	read_colorsensor1@green,fsr2l
  8699  002366  C01F  FFDA         	movff	read_colorsensor1@green+1,fsr2h
  8700  00236A  6EDF               	movwf	indf2,c
  8701                           
  8702                           ;main.c: 652: blue[1] = I2C_Master_Read(1);
  8703  00236C  EE20 F001          	lfsr	2,1
  8704  002370  5020               	movf	read_colorsensor1@blue,w,c
  8705  002372  26D9               	addwf	fsr2l,f,c
  8706  002374  5021               	movf	read_colorsensor1@blue+1,w,c
  8707  002376  22DA               	addwfc	fsr2h,f,c
  8708  002378  0E01               	movlw	1
  8709  00237A  EC22  F019         	call	_I2C_Master_Read
  8710  00237E  6EDF               	movwf	indf2,c
  8711                           
  8712                           ;main.c: 653: blue[0] = I2C_Master_Read(0);
  8713  002380  0E00               	movlw	0
  8714  002382  EC22  F019         	call	_I2C_Master_Read
  8715  002386  C020  FFD9         	movff	read_colorsensor1@blue,fsr2l
  8716  00238A  C021  FFDA         	movff	read_colorsensor1@blue+1,fsr2h
  8717  00238E  6EDF               	movwf	indf2,c
  8718                           
  8719                           ;main.c: 655: I2C_Master_Stop();
  8720  002390  ECB4  F019         	call	_I2C_Master_Stop	;wreg free
  8721  002394  0012               	return		;funcret
  8722  002396                     __end_of_read_colorsensor1:
  8723                           	opt stack 0
  8724                           tblptru	equ	0xFF8
  8725                           tblptrh	equ	0xFF7
  8726                           tblptrl	equ	0xFF6
  8727                           tablat	equ	0xFF5
  8728                           prodh	equ	0xFF4
  8729                           prodl	equ	0xFF3
  8730                           intcon	equ	0xFF2
  8731                           intcon2	equ	0xFF1
  8732                           intcon3	equ	0xFF0
  8733                           postinc0	equ	0xFEE
  8734                           wreg	equ	0xFE8
  8735                           postdec1	equ	0xFE5
  8736                           fsr1l	equ	0xFE1
  8737                           indf2	equ	0xFDF
  8738                           postinc2	equ	0xFDE
  8739                           postdec2	equ	0xFDD
  8740                           fsr2h	equ	0xFDA
  8741                           fsr2l	equ	0xFD9
  8742                           status	equ	0xFD8
  8743                           
  8744 ;; *************** function _initLCD *****************
  8745 ;; Defined at:
  8746 ;;		line 14 in file "lcd.c"
  8747 ;; Parameters:    Size  Location     Type
  8748 ;;		None
  8749 ;; Auto vars:     Size  Location     Type
  8750 ;;		None
  8751 ;; Return value:  Size  Location     Type
  8752 ;;                  1    wreg      void 
  8753 ;; Registers used:
  8754 ;;		wreg, status,2, status,0, cstack
  8755 ;; Tracked objects:
  8756 ;;		On entry : 0/0
  8757 ;;		On exit  : 0/0
  8758 ;;		Unchanged: 0/0
  8759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8763 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;Total ram usage:        1 bytes
  8765 ;; Hardware stack levels used:    1
  8766 ;; Hardware stack levels required when called:    4
  8767 ;; This function calls:
  8768 ;;		_lcdInst
  8769 ;; This function is called by:
  8770 ;;		_main
  8771 ;;		_init_operation
  8772 ;; This function uses a non-reentrant model
  8773 ;;
  8774                           
  8775                           	psect	text31
  8776  0030E4                     __ptext31:
  8777                           	opt stack 0
  8778  0030E4                     _initLCD:
  8779                           	opt stack 25
  8780                           
  8781                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  8782                           
  8783                           ;incstack = 0
  8784  0030E4  0E31               	movlw	49
  8785  0030E6  6E1C               	movwf	??_initLCD& (0+255),c
  8786  0030E8  0EB2               	movlw	178
  8787  0030EA                     u5767:
  8788  0030EA  2EE8               	decfsz	wreg,f,c
  8789  0030EC  D7FE               	bra	u5767
  8790  0030EE  2E1C               	decfsz	??_initLCD& (0+255),f,c
  8791  0030F0  D7FC               	bra	u5767
  8792  0030F2  D000               	nop2	
  8793                           
  8794                           ;lcd.c: 16: lcdInst(0b00110011);
  8795  0030F4  0E33               	movlw	51
  8796  0030F6  ECA9  F019         	call	_lcdInst
  8797                           
  8798                           ;lcd.c: 17: lcdInst(0b00110010);
  8799  0030FA  0E32               	movlw	50
  8800  0030FC  ECA9  F019         	call	_lcdInst
  8801                           
  8802                           ;lcd.c: 18: lcdInst(0b00101000);
  8803  003100  0E28               	movlw	40
  8804  003102  ECA9  F019         	call	_lcdInst
  8805                           
  8806                           ;lcd.c: 19: lcdInst(0b00001111);
  8807  003106  0E0F               	movlw	15
  8808  003108  ECA9  F019         	call	_lcdInst
  8809                           
  8810                           ;lcd.c: 20: lcdInst(0b00000110);
  8811  00310C  0E06               	movlw	6
  8812  00310E  ECA9  F019         	call	_lcdInst
  8813                           
  8814                           ;lcd.c: 21: lcdInst(0b00000001);
  8815  003112  0E01               	movlw	1
  8816  003114  ECA9  F019         	call	_lcdInst
  8817                           
  8818                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  8819  003118  0E31               	movlw	49
  8820  00311A  6E1C               	movwf	??_initLCD& (0+255),c
  8821  00311C  0EB2               	movlw	178
  8822  00311E                     u5777:
  8823  00311E  2EE8               	decfsz	wreg,f,c
  8824  003120  D7FE               	bra	u5777
  8825  003122  2E1C               	decfsz	??_initLCD& (0+255),f,c
  8826  003124  D7FC               	bra	u5777
  8827  003126  D000               	nop2	
  8828  003128  0012               	return		;funcret
  8829  00312A                     __end_of_initLCD:
  8830                           	opt stack 0
  8831                           tblptru	equ	0xFF8
  8832                           tblptrh	equ	0xFF7
  8833                           tblptrl	equ	0xFF6
  8834                           tablat	equ	0xFF5
  8835                           prodh	equ	0xFF4
  8836                           prodl	equ	0xFF3
  8837                           intcon	equ	0xFF2
  8838                           intcon2	equ	0xFF1
  8839                           intcon3	equ	0xFF0
  8840                           postinc0	equ	0xFEE
  8841                           wreg	equ	0xFE8
  8842                           postdec1	equ	0xFE5
  8843                           fsr1l	equ	0xFE1
  8844                           indf2	equ	0xFDF
  8845                           postinc2	equ	0xFDE
  8846                           postdec2	equ	0xFDD
  8847                           fsr2h	equ	0xFDA
  8848                           fsr2l	equ	0xFD9
  8849                           status	equ	0xFD8
  8850                           
  8851 ;; *************** function _eeprom_writebyte *****************
  8852 ;; Defined at:
  8853 ;;		line 713 in file "main.c"
  8854 ;; Parameters:    Size  Location     Type
  8855 ;;  address         2   26[COMRAM] unsigned int 
  8856 ;;  data            1   28[COMRAM] unsigned char 
  8857 ;; Auto vars:     Size  Location     Type
  8858 ;;		None
  8859 ;; Return value:  Size  Location     Type
  8860 ;;                  1    wreg      void 
  8861 ;; Registers used:
  8862 ;;		wreg, status,2
  8863 ;; Tracked objects:
  8864 ;;		On entry : 0/0
  8865 ;;		On exit  : 0/0
  8866 ;;		Unchanged: 0/0
  8867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8868 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8871 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8872 ;;Total ram usage:        3 bytes
  8873 ;; Hardware stack levels used:    1
  8874 ;; Hardware stack levels required when called:    2
  8875 ;; This function calls:
  8876 ;;		Nothing
  8877 ;; This function is called by:
  8878 ;;		_main
  8879 ;; This function uses a non-reentrant model
  8880 ;;
  8881                           
  8882                           	psect	text32
  8883  00321E                     __ptext32:
  8884                           	opt stack 0
  8885  00321E                     _eeprom_writebyte:
  8886                           	opt stack 28
  8887                           
  8888                           ;main.c: 715: EEADRH = (uint8_t)(address >> 8);
  8889                           
  8890                           ;incstack = 0
  8891  00321E  501C               	movf	eeprom_writebyte@address+1,w,c
  8892  003220  6EAA               	movwf	4010,c	;volatile
  8893                           
  8894                           ;main.c: 716: EEADR = (uint8_t)address;
  8895  003222  C01B  FFA9         	movff	eeprom_writebyte@address,4009	;volatile
  8896                           
  8897                           ;main.c: 718: EEDATA = data;
  8898  003226  C01D  FFA8         	movff	eeprom_writebyte@data,4008	;volatile
  8899                           
  8900                           ;main.c: 719: EECON1bits.EEPGD = 0;
  8901  00322A  9EA6               	bcf	4006,7,c	;volatile
  8902                           
  8903                           ;main.c: 720: EECON1bits.CFGS = 0;
  8904  00322C  9CA6               	bcf	4006,6,c	;volatile
  8905                           
  8906                           ;main.c: 721: EECON1bits.WREN = 1;
  8907  00322E  84A6               	bsf	4006,2,c	;volatile
  8908                           
  8909                           ;main.c: 725: EECON2 = 0x55;
  8910  003230  0E55               	movlw	85
  8911  003232  6EA7               	movwf	4007,c	;volatile
  8912                           
  8913                           ;main.c: 726: EECON2 = 0xAA;
  8914  003234  0EAA               	movlw	170
  8915  003236  6EA7               	movwf	4007,c	;volatile
  8916                           
  8917                           ;main.c: 727: EECON1bits.WR = 1;
  8918  003238  82A6               	bsf	4006,1,c	;volatile
  8919  00323A                     l305:
  8920  00323A  A8A1               	btfss	4001,4,c	;volatile
  8921  00323C  D7FE               	goto	l305
  8922                           
  8923                           ;main.c: 733: }
  8924                           ;main.c: 735: PIR2bits.EEIF = 0;
  8925  00323E  98A1               	bcf	4001,4,c	;volatile
  8926                           
  8927                           ;main.c: 736: EECON1bits.WREN = 0;
  8928  003240  94A6               	bcf	4006,2,c	;volatile
  8929  003242  0012               	return		;funcret
  8930  003244                     __end_of_eeprom_writebyte:
  8931                           	opt stack 0
  8932                           tblptru	equ	0xFF8
  8933                           tblptrh	equ	0xFF7
  8934                           tblptrl	equ	0xFF6
  8935                           tablat	equ	0xFF5
  8936                           prodh	equ	0xFF4
  8937                           prodl	equ	0xFF3
  8938                           intcon	equ	0xFF2
  8939                           intcon2	equ	0xFF1
  8940                           intcon3	equ	0xFF0
  8941                           postinc0	equ	0xFEE
  8942                           wreg	equ	0xFE8
  8943                           postdec1	equ	0xFE5
  8944                           fsr1l	equ	0xFE1
  8945                           indf2	equ	0xFDF
  8946                           postinc2	equ	0xFDE
  8947                           postdec2	equ	0xFDD
  8948                           fsr2h	equ	0xFDA
  8949                           fsr2l	equ	0xFD9
  8950                           status	equ	0xFD8
  8951                           
  8952 ;; *************** function _eeprom_readbyte *****************
  8953 ;; Defined at:
  8954 ;;		line 696 in file "main.c"
  8955 ;; Parameters:    Size  Location     Type
  8956 ;;  address         2   24[COMRAM] unsigned int 
  8957 ;; Auto vars:     Size  Location     Type
  8958 ;;		None
  8959 ;; Return value:  Size  Location     Type
  8960 ;;                  1    wreg      unsigned char 
  8961 ;; Registers used:
  8962 ;;		wreg, status,2
  8963 ;; Tracked objects:
  8964 ;;		On entry : 0/0
  8965 ;;		On exit  : 0/0
  8966 ;;		Unchanged: 0/0
  8967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8968 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8971 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8972 ;;Total ram usage:        2 bytes
  8973 ;; Hardware stack levels used:    1
  8974 ;; Hardware stack levels required when called:    2
  8975 ;; This function calls:
  8976 ;;		Nothing
  8977 ;; This function is called by:
  8978 ;;		_main
  8979 ;; This function uses a non-reentrant model
  8980 ;;
  8981                           
  8982                           	psect	text33
  8983  0032F8                     __ptext33:
  8984                           	opt stack 0
  8985  0032F8                     _eeprom_readbyte:
  8986                           	opt stack 28
  8987                           
  8988                           ;main.c: 699: EEADRH = (uint8_t)(address >> 8);
  8989                           
  8990                           ;incstack = 0
  8991  0032F8  501A               	movf	eeprom_readbyte@address+1,w,c
  8992  0032FA  6EAA               	movwf	4010,c	;volatile
  8993                           
  8994                           ;main.c: 700: EEADR = (uint8_t)address;
  8995  0032FC  C019  FFA9         	movff	eeprom_readbyte@address,4009	;volatile
  8996                           
  8997                           ;main.c: 702: EECON1bits.EEPGD = 0;
  8998  003300  9EA6               	bcf	4006,7,c	;volatile
  8999                           
  9000                           ;main.c: 703: EECON1bits.CFGS = 0;
  9001  003302  9CA6               	bcf	4006,6,c	;volatile
  9002                           
  9003                           ;main.c: 704: EECON1bits.RD = 1;
  9004  003304  80A6               	bsf	4006,0,c	;volatile
  9005  003306                     l299:
  9006  003306  B0A6               	btfsc	4006,0,c	;volatile
  9007  003308  D7FE               	goto	l299
  9008                           
  9009                           ;main.c: 710: return EEDATA;
  9010  00330A  50A8               	movf	4008,w,c	;volatile
  9011  00330C  0012               	return	
  9012  00330E                     __end_of_eeprom_readbyte:
  9013                           	opt stack 0
  9014                           tblptru	equ	0xFF8
  9015                           tblptrh	equ	0xFF7
  9016                           tblptrl	equ	0xFF6
  9017                           tablat	equ	0xFF5
  9018                           prodh	equ	0xFF4
  9019                           prodl	equ	0xFF3
  9020                           intcon	equ	0xFF2
  9021                           intcon2	equ	0xFF1
  9022                           intcon3	equ	0xFF0
  9023                           postinc0	equ	0xFEE
  9024                           wreg	equ	0xFE8
  9025                           postdec1	equ	0xFE5
  9026                           fsr1l	equ	0xFE1
  9027                           indf2	equ	0xFDF
  9028                           postinc2	equ	0xFDE
  9029                           postdec2	equ	0xFDD
  9030                           fsr2h	equ	0xFDA
  9031                           fsr2l	equ	0xFD9
  9032                           status	equ	0xFD8
  9033                           
  9034 ;; *************** function _date_time *****************
  9035 ;; Defined at:
  9036 ;;		line 498 in file "main.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;  time            2  106[BANK0 ] PTR unsigned char 
  9039 ;;		 -> main@time(7), 
  9040 ;; Auto vars:     Size  Location     Type
  9041 ;;  i               1  111[BANK0 ] unsigned char 
  9042 ;; Return value:  Size  Location     Type
  9043 ;;                  1    wreg      void 
  9044 ;; Registers used:
  9045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9046 ;; Tracked objects:
  9047 ;;		On entry : 0/0
  9048 ;;		On exit  : 0/0
  9049 ;;		Unchanged: 0/0
  9050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9051 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9052 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9053 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9054 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;Total ram usage:        6 bytes
  9056 ;; Hardware stack levels used:    1
  9057 ;; Hardware stack levels required when called:    5
  9058 ;; This function calls:
  9059 ;;		_I2C_Master_Read
  9060 ;;		_I2C_Master_Start
  9061 ;;		_I2C_Master_Stop
  9062 ;;		_I2C_Master_Write
  9063 ;;		_lcdInst
  9064 ;;		_printf
  9065 ;; This function is called by:
  9066 ;;		_main
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           	psect	text34
  9071  001EEE                     __ptext34:
  9072                           	opt stack 0
  9073  001EEE                     _date_time:
  9074                           	opt stack 25
  9075                           
  9076                           ;main.c: 500: I2C_Master_Start();
  9077                           
  9078                           ;incstack = 0
  9079  001EEE  ECB8  F019         	call	_I2C_Master_Start	;wreg free
  9080                           
  9081                           ;main.c: 501: I2C_Master_Write(0b11010000);
  9082  001EF2  0E00               	movlw	0
  9083  001EF4  6E1B               	movwf	I2C_Master_Write@d+1,c
  9084  001EF6  0ED0               	movlw	208
  9085  001EF8  6E1A               	movwf	I2C_Master_Write@d,c
  9086  001EFA  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  9087                           
  9088                           ;main.c: 502: I2C_Master_Write(0x00);
  9089  001EFE  0E00               	movlw	0
  9090  001F00  6E1B               	movwf	I2C_Master_Write@d+1,c
  9091  001F02  0E00               	movlw	0
  9092  001F04  6E1A               	movwf	I2C_Master_Write@d,c
  9093  001F06  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  9094                           
  9095                           ;main.c: 503: I2C_Master_Stop();
  9096  001F0A  ECB4  F019         	call	_I2C_Master_Stop	;wreg free
  9097                           
  9098                           ;main.c: 506: I2C_Master_Start();
  9099  001F0E  ECB8  F019         	call	_I2C_Master_Start	;wreg free
  9100                           
  9101                           ;main.c: 507: I2C_Master_Write(0b11010001);
  9102  001F12  0E00               	movlw	0
  9103  001F14  6E1B               	movwf	I2C_Master_Write@d+1,c
  9104  001F16  0ED1               	movlw	209
  9105  001F18  6E1A               	movwf	I2C_Master_Write@d,c
  9106  001F1A  ECAF  F019         	call	_I2C_Master_Write	;wreg free
  9107                           
  9108                           ;main.c: 508: for(unsigned char i=0;i<0x06;i++){
  9109  001F1E  0E00               	movlw	0
  9110  001F20  0100               	movlb	0	; () banked
  9111  001F22  6FEF               	movwf	date_time@i& (0+255),b
  9112  001F24                     l5527:
  9113                           
  9114                           ; BSR set to: 0
  9115  001F24  0E05               	movlw	5
  9116  001F26  0100               	movlb	0	; () banked
  9117  001F28  65EF               	cpfsgt	date_time@i& (0+255),b
  9118  001F2A  D001               	goto	l5531
  9119  001F2C  D012               	goto	l5537
  9120  001F2E                     l5531:
  9121                           
  9122                           ; BSR set to: 0
  9123                           ;main.c: 509: time[i] = I2C_Master_Read(1);
  9124  001F2E  0100               	movlb	0	; () banked
  9125  001F30  51EF               	movf	date_time@i& (0+255),w,b
  9126  001F32  0D01               	mullw	1
  9127  001F34  50F3               	movf	prodl,w,c
  9128  001F36  0100               	movlb	0	; () banked
  9129  001F38  25EA               	addwf	date_time@time& (0+255),w,b
  9130  001F3A  6ED9               	movwf	fsr2l,c
  9131  001F3C  50F4               	movf	prodh,w,c
  9132  001F3E  0100               	movlb	0	; () banked
  9133  001F40  21EB               	addwfc	(date_time@time+1)& (0+255),w,b
  9134  001F42  6EDA               	movwf	fsr2h,c
  9135  001F44  0E01               	movlw	1
  9136  001F46  EC22  F019         	call	_I2C_Master_Read
  9137  001F4A  6EDF               	movwf	indf2,c
  9138  001F4C  0100               	movlb	0	; () banked
  9139  001F4E  2BEF               	incf	date_time@i& (0+255),f,b
  9140  001F50  D7E9               	goto	l5527
  9141  001F52                     l5537:
  9142                           
  9143                           ; BSR set to: 0
  9144                           ;main.c: 510: }
  9145                           ;main.c: 511: time[6] = I2C_Master_Read(0);
  9146  001F52  0100               	movlb	0	; () banked
  9147  001F54  EE20 F006          	lfsr	2,6
  9148  001F58  51EA               	movf	date_time@time& (0+255),w,b
  9149  001F5A  26D9               	addwf	fsr2l,f,c
  9150  001F5C  51EB               	movf	(date_time@time+1)& (0+255),w,b
  9151  001F5E  22DA               	addwfc	fsr2h,f,c
  9152  001F60  0E00               	movlw	0
  9153  001F62  EC22  F019         	call	_I2C_Master_Read
  9154  001F66  6EDF               	movwf	indf2,c
  9155                           
  9156                           ;main.c: 512: I2C_Master_Stop();
  9157  001F68  ECB4  F019         	call	_I2C_Master_Stop	;wreg free
  9158                           
  9159                           ;main.c: 515: lcdInst(0b10000000);;
  9160  001F6C  0E80               	movlw	128
  9161  001F6E  ECA9  F019         	call	_lcdInst
  9162                           
  9163                           ;main.c: 516: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  9164  001F72  0EBB               	movlw	low STR_24
  9165  001F74  0100               	movlb	0	; () banked
  9166  001F76  6FCE               	movwf	printf@f& (0+255),b
  9167  001F78  0EFE               	movlw	high STR_24
  9168  001F7A  0100               	movlb	0	; () banked
  9169  001F7C  6FCF               	movwf	(printf@f+1)& (0+255),b
  9170  001F7E  0100               	movlb	0	; () banked
  9171  001F80  EE20 F005          	lfsr	2,5
  9172  001F84  51EA               	movf	date_time@time& (0+255),w,b
  9173  001F86  26D9               	addwf	fsr2l,f,c
  9174  001F88  51EB               	movf	(date_time@time+1)& (0+255),w,b
  9175  001F8A  22DA               	addwfc	fsr2h,f,c
  9176  001F8C  50DF               	movf	indf2,w,c
  9177  001F8E  0100               	movlb	0	; () banked
  9178  001F90  6FEC               	movwf	??_date_time& (0+255),b
  9179  001F92  0100               	movlb	0	; () banked
  9180  001F94  51EC               	movf	??_date_time& (0+255),w,b
  9181  001F96  0100               	movlb	0	; () banked
  9182  001F98  6FD0               	movwf	(?_printf+2)& (0+255),b
  9183  001F9A  6BD1               	clrf	(?_printf+3)& (0+255),b
  9184  001F9C  0100               	movlb	0	; () banked
  9185  001F9E  EE20 F004          	lfsr	2,4
  9186  001FA2  51EA               	movf	date_time@time& (0+255),w,b
  9187  001FA4  26D9               	addwf	fsr2l,f,c
  9188  001FA6  51EB               	movf	(date_time@time+1)& (0+255),w,b
  9189  001FA8  22DA               	addwfc	fsr2h,f,c
  9190  001FAA  50DF               	movf	indf2,w,c
  9191  001FAC  0100               	movlb	0	; () banked
  9192  001FAE  6FED               	movwf	(??_date_time+1)& (0+255),b
  9193  001FB0  0100               	movlb	0	; () banked
  9194  001FB2  51ED               	movf	(??_date_time+1)& (0+255),w,b
  9195  001FB4  0100               	movlb	0	; () banked
  9196  001FB6  6FD2               	movwf	(?_printf+4)& (0+255),b
  9197  001FB8  6BD3               	clrf	(?_printf+5)& (0+255),b
  9198  001FBA  0100               	movlb	0	; () banked
  9199  001FBC  EE20 F006          	lfsr	2,6
  9200  001FC0  51EA               	movf	date_time@time& (0+255),w,b
  9201  001FC2  26D9               	addwf	fsr2l,f,c
  9202  001FC4  51EB               	movf	(date_time@time+1)& (0+255),w,b
  9203  001FC6  22DA               	addwfc	fsr2h,f,c
  9204  001FC8  50DF               	movf	indf2,w,c
  9205  001FCA  0100               	movlb	0	; () banked
  9206  001FCC  6FEE               	movwf	(??_date_time+2)& (0+255),b
  9207  001FCE  0100               	movlb	0	; () banked
  9208  001FD0  51EE               	movf	(??_date_time+2)& (0+255),w,b
  9209  001FD2  0100               	movlb	0	; () banked
  9210  001FD4  6FD4               	movwf	(?_printf+6)& (0+255),b
  9211  001FD6  6BD5               	clrf	(?_printf+7)& (0+255),b
  9212  001FD8  EC15  F007         	call	_printf	;wreg free
  9213                           
  9214                           ;main.c: 517: lcdInst(0b11000000);;
  9215  001FDC  0EC0               	movlw	192
  9216  001FDE  ECA9  F019         	call	_lcdInst
  9217                           
  9218                           ;main.c: 518: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  9219  001FE2  0ED2               	movlw	low STR_25
  9220  001FE4  0100               	movlb	0	; () banked
  9221  001FE6  6FCE               	movwf	printf@f& (0+255),b
  9222  001FE8  0EFE               	movlw	high STR_25
  9223  001FEA  0100               	movlb	0	; () banked
  9224  001FEC  6FCF               	movwf	(printf@f+1)& (0+255),b
  9225  001FEE  0100               	movlb	0	; () banked
  9226  001FF0  EE20 F002          	lfsr	2,2
  9227  001FF4  51EA               	movf	date_time@time& (0+255),w,b
  9228  001FF6  26D9               	addwf	fsr2l,f,c
  9229  001FF8  51EB               	movf	(date_time@time+1)& (0+255),w,b
  9230  001FFA  22DA               	addwfc	fsr2h,f,c
  9231  001FFC  50DF               	movf	indf2,w,c
  9232  001FFE  0100               	movlb	0	; () banked
  9233  002000  6FEC               	movwf	??_date_time& (0+255),b
  9234  002002  0100               	movlb	0	; () banked
  9235  002004  51EC               	movf	??_date_time& (0+255),w,b
  9236  002006  0100               	movlb	0	; () banked
  9237  002008  6FD0               	movwf	(?_printf+2)& (0+255),b
  9238  00200A  6BD1               	clrf	(?_printf+3)& (0+255),b
  9239  00200C  0100               	movlb	0	; () banked
  9240  00200E  EE20 F001          	lfsr	2,1
  9241  002012  51EA               	movf	date_time@time& (0+255),w,b
  9242  002014  26D9               	addwf	fsr2l,f,c
  9243  002016  51EB               	movf	(date_time@time+1)& (0+255),w,b
  9244  002018  22DA               	addwfc	fsr2h,f,c
  9245  00201A  50DF               	movf	indf2,w,c
  9246  00201C  0100               	movlb	0	; () banked
  9247  00201E  6FED               	movwf	(??_date_time+1)& (0+255),b
  9248  002020  0100               	movlb	0	; () banked
  9249  002022  51ED               	movf	(??_date_time+1)& (0+255),w,b
  9250  002024  0100               	movlb	0	; () banked
  9251  002026  6FD2               	movwf	(?_printf+4)& (0+255),b
  9252  002028  6BD3               	clrf	(?_printf+5)& (0+255),b
  9253  00202A  C0EA  FFD9         	movff	date_time@time,fsr2l
  9254  00202E  C0EB  FFDA         	movff	date_time@time+1,fsr2h
  9255  002032  50DF               	movf	indf2,w,c
  9256  002034  0100               	movlb	0	; () banked
  9257  002036  6FEE               	movwf	(??_date_time+2)& (0+255),b
  9258  002038  0100               	movlb	0	; () banked
  9259  00203A  51EE               	movf	(??_date_time+2)& (0+255),w,b
  9260  00203C  0100               	movlb	0	; () banked
  9261  00203E  6FD4               	movwf	(?_printf+6)& (0+255),b
  9262  002040  6BD5               	clrf	(?_printf+7)& (0+255),b
  9263  002042  EC15  F007         	call	_printf	;wreg free
  9264  002046  0012               	return	
  9265  002048                     __end_of_date_time:
  9266                           	opt stack 0
  9267                           tblptru	equ	0xFF8
  9268                           tblptrh	equ	0xFF7
  9269                           tblptrl	equ	0xFF6
  9270                           tablat	equ	0xFF5
  9271                           prodh	equ	0xFF4
  9272                           prodl	equ	0xFF3
  9273                           intcon	equ	0xFF2
  9274                           intcon2	equ	0xFF1
  9275                           intcon3	equ	0xFF0
  9276                           postinc0	equ	0xFEE
  9277                           wreg	equ	0xFE8
  9278                           postdec1	equ	0xFE5
  9279                           fsr1l	equ	0xFE1
  9280                           indf2	equ	0xFDF
  9281                           postinc2	equ	0xFDE
  9282                           postdec2	equ	0xFDD
  9283                           fsr2h	equ	0xFDA
  9284                           fsr2l	equ	0xFD9
  9285                           status	equ	0xFD8
  9286                           
  9287 ;; *************** function _I2C_Master_Write *****************
  9288 ;; Defined at:
  9289 ;;		line 47 in file "I2C.c"
  9290 ;; Parameters:    Size  Location     Type
  9291 ;;  d               2   25[COMRAM] unsigned int 
  9292 ;; Auto vars:     Size  Location     Type
  9293 ;;		None
  9294 ;; Return value:  Size  Location     Type
  9295 ;;                  1    wreg      void 
  9296 ;; Registers used:
  9297 ;;		wreg, status,2, status,0, cstack
  9298 ;; Tracked objects:
  9299 ;;		On entry : 0/0
  9300 ;;		On exit  : 0/0
  9301 ;;		Unchanged: 0/0
  9302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9303 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9306 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9307 ;;Total ram usage:        2 bytes
  9308 ;; Hardware stack levels used:    1
  9309 ;; Hardware stack levels required when called:    3
  9310 ;; This function calls:
  9311 ;;		_I2C_Master_Wait
  9312 ;; This function is called by:
  9313 ;;		_update_time
  9314 ;;		_date_time
  9315 ;;		_read_colorsensor1
  9316 ;;		_read_colorsensor2
  9317 ;;		_set_time
  9318 ;; This function uses a non-reentrant model
  9319 ;;
  9320                           
  9321                           	psect	text35
  9322  00335E                     __ptext35:
  9323                           	opt stack 0
  9324  00335E                     _I2C_Master_Write:
  9325                           	opt stack 26
  9326                           
  9327                           ;I2C.c: 49: I2C_Master_Wait();
  9328                           
  9329                           ;incstack = 0
  9330  00335E  EC92  F019         	call	_I2C_Master_Wait	;wreg free
  9331                           
  9332                           ;I2C.c: 50: SSPBUF = d;
  9333  003362  C01A  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9334  003366  0012               	return		;funcret
  9335  003368                     __end_of_I2C_Master_Write:
  9336                           	opt stack 0
  9337                           tblptru	equ	0xFF8
  9338                           tblptrh	equ	0xFF7
  9339                           tblptrl	equ	0xFF6
  9340                           tablat	equ	0xFF5
  9341                           prodh	equ	0xFF4
  9342                           prodl	equ	0xFF3
  9343                           intcon	equ	0xFF2
  9344                           intcon2	equ	0xFF1
  9345                           intcon3	equ	0xFF0
  9346                           postinc0	equ	0xFEE
  9347                           wreg	equ	0xFE8
  9348                           postdec1	equ	0xFE5
  9349                           fsr1l	equ	0xFE1
  9350                           indf2	equ	0xFDF
  9351                           postinc2	equ	0xFDE
  9352                           postdec2	equ	0xFDD
  9353                           fsr2h	equ	0xFDA
  9354                           fsr2l	equ	0xFD9
  9355                           status	equ	0xFD8
  9356                           
  9357 ;; *************** function _I2C_Master_Stop *****************
  9358 ;; Defined at:
  9359 ;;		line 41 in file "I2C.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;		None
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;		None
  9364 ;; Return value:  Size  Location     Type
  9365 ;;                  2   68[None  ] int 
  9366 ;; Registers used:
  9367 ;;		wreg, status,2, status,0, cstack
  9368 ;; Tracked objects:
  9369 ;;		On entry : 0/0
  9370 ;;		On exit  : 0/0
  9371 ;;		Unchanged: 0/0
  9372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9377 ;;Total ram usage:        0 bytes
  9378 ;; Hardware stack levels used:    1
  9379 ;; Hardware stack levels required when called:    3
  9380 ;; This function calls:
  9381 ;;		_I2C_Master_Wait
  9382 ;; This function is called by:
  9383 ;;		_update_time
  9384 ;;		_date_time
  9385 ;;		_read_colorsensor1
  9386 ;;		_read_colorsensor2
  9387 ;;		_set_time
  9388 ;; This function uses a non-reentrant model
  9389 ;;
  9390                           
  9391                           	psect	text36
  9392  003368                     __ptext36:
  9393                           	opt stack 0
  9394  003368                     _I2C_Master_Stop:
  9395                           	opt stack 26
  9396                           
  9397                           ;I2C.c: 43: I2C_Master_Wait();
  9398                           
  9399                           ;incstack = 0
  9400  003368  EC92  F019         	call	_I2C_Master_Wait	;wreg free
  9401                           
  9402                           ;I2C.c: 44: PEN = 1;
  9403  00336C  84C5               	bsf	4037,2,c	;volatile
  9404  00336E  0012               	return		;funcret
  9405  003370                     __end_of_I2C_Master_Stop:
  9406                           	opt stack 0
  9407                           tblptru	equ	0xFF8
  9408                           tblptrh	equ	0xFF7
  9409                           tblptrl	equ	0xFF6
  9410                           tablat	equ	0xFF5
  9411                           prodh	equ	0xFF4
  9412                           prodl	equ	0xFF3
  9413                           intcon	equ	0xFF2
  9414                           intcon2	equ	0xFF1
  9415                           intcon3	equ	0xFF0
  9416                           postinc0	equ	0xFEE
  9417                           wreg	equ	0xFE8
  9418                           postdec1	equ	0xFE5
  9419                           fsr1l	equ	0xFE1
  9420                           indf2	equ	0xFDF
  9421                           postinc2	equ	0xFDE
  9422                           postdec2	equ	0xFDD
  9423                           fsr2h	equ	0xFDA
  9424                           fsr2l	equ	0xFD9
  9425                           status	equ	0xFD8
  9426                           
  9427 ;; *************** function _I2C_Master_Start *****************
  9428 ;; Defined at:
  9429 ;;		line 29 in file "I2C.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;		None
  9432 ;; Auto vars:     Size  Location     Type
  9433 ;;		None
  9434 ;; Return value:  Size  Location     Type
  9435 ;;                  2   64[None  ] int 
  9436 ;; Registers used:
  9437 ;;		wreg, status,2, status,0, cstack
  9438 ;; Tracked objects:
  9439 ;;		On entry : 0/0
  9440 ;;		On exit  : 0/0
  9441 ;;		Unchanged: 0/0
  9442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9447 ;;Total ram usage:        0 bytes
  9448 ;; Hardware stack levels used:    1
  9449 ;; Hardware stack levels required when called:    3
  9450 ;; This function calls:
  9451 ;;		_I2C_Master_Wait
  9452 ;; This function is called by:
  9453 ;;		_update_time
  9454 ;;		_date_time
  9455 ;;		_read_colorsensor1
  9456 ;;		_read_colorsensor2
  9457 ;;		_set_time
  9458 ;; This function uses a non-reentrant model
  9459 ;;
  9460                           
  9461                           	psect	text37
  9462  003370                     __ptext37:
  9463                           	opt stack 0
  9464  003370                     _I2C_Master_Start:
  9465                           	opt stack 26
  9466                           
  9467                           ;I2C.c: 31: I2C_Master_Wait();
  9468                           
  9469                           ;incstack = 0
  9470  003370  EC92  F019         	call	_I2C_Master_Wait	;wreg free
  9471                           
  9472                           ;I2C.c: 32: SEN = 1;
  9473  003374  80C5               	bsf	4037,0,c	;volatile
  9474  003376  0012               	return		;funcret
  9475  003378                     __end_of_I2C_Master_Start:
  9476                           	opt stack 0
  9477                           tblptru	equ	0xFF8
  9478                           tblptrh	equ	0xFF7
  9479                           tblptrl	equ	0xFF6
  9480                           tablat	equ	0xFF5
  9481                           prodh	equ	0xFF4
  9482                           prodl	equ	0xFF3
  9483                           intcon	equ	0xFF2
  9484                           intcon2	equ	0xFF1
  9485                           intcon3	equ	0xFF0
  9486                           postinc0	equ	0xFEE
  9487                           wreg	equ	0xFE8
  9488                           postdec1	equ	0xFE5
  9489                           fsr1l	equ	0xFE1
  9490                           indf2	equ	0xFDF
  9491                           postinc2	equ	0xFDE
  9492                           postdec2	equ	0xFDD
  9493                           fsr2h	equ	0xFDA
  9494                           fsr2l	equ	0xFD9
  9495                           status	equ	0xFD8
  9496                           
  9497 ;; *************** function _I2C_Master_Read *****************
  9498 ;; Defined at:
  9499 ;;		line 53 in file "I2C.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;  a               1    wreg     unsigned char 
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;  a               1   25[COMRAM] unsigned char 
  9504 ;;  temp            1   26[COMRAM] unsigned char 
  9505 ;; Return value:  Size  Location     Type
  9506 ;;                  1    wreg      unsigned char 
  9507 ;; Registers used:
  9508 ;;		wreg, status,2, status,0, cstack
  9509 ;; Tracked objects:
  9510 ;;		On entry : 0/0
  9511 ;;		On exit  : 0/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9515 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;Total ram usage:        2 bytes
  9519 ;; Hardware stack levels used:    1
  9520 ;; Hardware stack levels required when called:    3
  9521 ;; This function calls:
  9522 ;;		_I2C_Master_Wait
  9523 ;; This function is called by:
  9524 ;;		_update_time
  9525 ;;		_date_time
  9526 ;;		_read_colorsensor1
  9527 ;;		_read_colorsensor2
  9528 ;; This function uses a non-reentrant model
  9529 ;;
  9530                           
  9531                           	psect	text38
  9532  003244                     __ptext38:
  9533                           	opt stack 0
  9534  003244                     _I2C_Master_Read:
  9535                           	opt stack 26
  9536                           
  9537                           ;incstack = 0
  9538                           ;I2C_Master_Read@a stored from wreg
  9539  003244  6E1A               	movwf	I2C_Master_Read@a,c
  9540                           
  9541                           ;I2C.c: 55: unsigned char temp;
  9542                           ;I2C.c: 56: I2C_Master_Wait();
  9543  003246  EC92  F019         	call	_I2C_Master_Wait	;wreg free
  9544                           
  9545                           ;I2C.c: 57: RCEN = 1;
  9546  00324A  86C5               	bsf	4037,3,c	;volatile
  9547                           
  9548                           ;I2C.c: 58: I2C_Master_Wait();
  9549  00324C  EC92  F019         	call	_I2C_Master_Wait	;wreg free
  9550                           
  9551                           ;I2C.c: 59: temp = SSPBUF;
  9552  003250  CFC9 F01B          	movff	4041,I2C_Master_Read@temp	;volatile
  9553                           
  9554                           ;I2C.c: 60: I2C_Master_Wait();
  9555  003254  EC92  F019         	call	_I2C_Master_Wait	;wreg free
  9556                           
  9557                           ;I2C.c: 61: ACKDT = (a)?0:1;
  9558  003258  501A               	movf	I2C_Master_Read@a,w,c
  9559  00325A  A4D8               	btfss	status,2,c
  9560  00325C  D002               	goto	u4820
  9561  00325E  8AC5               	bsf	4037,5,c	;volatile
  9562  003260  D001               	goto	l5037
  9563  003262                     u4820:
  9564  003262  9AC5               	bcf	4037,5,c	;volatile
  9565  003264                     l5037:
  9566                           
  9567                           ;I2C.c: 62: ACKEN = 1;
  9568  003264  88C5               	bsf	4037,4,c	;volatile
  9569                           
  9570                           ;I2C.c: 63: return temp;
  9571  003266  501B               	movf	I2C_Master_Read@temp,w,c
  9572  003268  0012               	return	
  9573  00326A                     __end_of_I2C_Master_Read:
  9574                           	opt stack 0
  9575                           tblptru	equ	0xFF8
  9576                           tblptrh	equ	0xFF7
  9577                           tblptrl	equ	0xFF6
  9578                           tablat	equ	0xFF5
  9579                           prodh	equ	0xFF4
  9580                           prodl	equ	0xFF3
  9581                           intcon	equ	0xFF2
  9582                           intcon2	equ	0xFF1
  9583                           intcon3	equ	0xFF0
  9584                           postinc0	equ	0xFEE
  9585                           wreg	equ	0xFE8
  9586                           postdec1	equ	0xFE5
  9587                           fsr1l	equ	0xFE1
  9588                           indf2	equ	0xFDF
  9589                           postinc2	equ	0xFDE
  9590                           postdec2	equ	0xFDD
  9591                           fsr2h	equ	0xFDA
  9592                           fsr2l	equ	0xFD9
  9593                           status	equ	0xFD8
  9594                           
  9595 ;; *************** function _I2C_Master_Wait *****************
  9596 ;; Defined at:
  9597 ;;		line 24 in file "I2C.c"
  9598 ;; Parameters:    Size  Location     Type
  9599 ;;		None
  9600 ;; Auto vars:     Size  Location     Type
  9601 ;;		None
  9602 ;; Return value:  Size  Location     Type
  9603 ;;                  1    wreg      void 
  9604 ;; Registers used:
  9605 ;;		wreg, status,2, status,0
  9606 ;; Tracked objects:
  9607 ;;		On entry : 0/0
  9608 ;;		On exit  : 0/0
  9609 ;;		Unchanged: 0/0
  9610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9614 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9615 ;;Total ram usage:        1 bytes
  9616 ;; Hardware stack levels used:    1
  9617 ;; Hardware stack levels required when called:    2
  9618 ;; This function calls:
  9619 ;;		Nothing
  9620 ;; This function is called by:
  9621 ;;		_I2C_Master_Start
  9622 ;;		_I2C_Master_Stop
  9623 ;;		_I2C_Master_Write
  9624 ;;		_I2C_Master_Read
  9625 ;;		_I2C_Master_RepeatedStart
  9626 ;; This function uses a non-reentrant model
  9627 ;;
  9628                           
  9629                           	psect	text39
  9630  003324                     __ptext39:
  9631                           	opt stack 0
  9632  003324                     _I2C_Master_Wait:
  9633                           	opt stack 26
  9634  003324                     l379:
  9635  003324  B4C7               	btfsc	4039,2,c	;volatile
  9636  003326  D7FE               	goto	l379
  9637  003328  CFC5 F019          	movff	4037,??_I2C_Master_Wait	;volatile
  9638  00332C  0E1F               	movlw	31
  9639  00332E  1619               	andwf	??_I2C_Master_Wait,f,c
  9640  003330  B4D8               	btfsc	status,2,c
  9641  003332  0012               	return	
  9642  003334  D7F7               	goto	l379
  9643  003336                     __end_of_I2C_Master_Wait:
  9644                           	opt stack 0
  9645                           tblptru	equ	0xFF8
  9646                           tblptrh	equ	0xFF7
  9647                           tblptrl	equ	0xFF6
  9648                           tablat	equ	0xFF5
  9649                           prodh	equ	0xFF4
  9650                           prodl	equ	0xFF3
  9651                           intcon	equ	0xFF2
  9652                           intcon2	equ	0xFF1
  9653                           intcon3	equ	0xFF0
  9654                           postinc0	equ	0xFEE
  9655                           wreg	equ	0xFE8
  9656                           postdec1	equ	0xFE5
  9657                           fsr1l	equ	0xFE1
  9658                           indf2	equ	0xFDF
  9659                           postinc2	equ	0xFDE
  9660                           postdec2	equ	0xFDD
  9661                           fsr2h	equ	0xFDA
  9662                           fsr2l	equ	0xFD9
  9663                           status	equ	0xFD8
  9664                           
  9665 ;; *************** function _bottle_count *****************
  9666 ;; Defined at:
  9667 ;;		line 445 in file "main.c"
  9668 ;; Parameters:    Size  Location     Type
  9669 ;;  bot_count       2  106[BANK0 ] PTR unsigned char 
  9670 ;;		 -> main@bot_count(4), 
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;		None
  9673 ;; Return value:  Size  Location     Type
  9674 ;;                  1    wreg      void 
  9675 ;; Registers used:
  9676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9682 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9684 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9685 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9686 ;;Total ram usage:        7 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    5
  9689 ;; This function calls:
  9690 ;;		_lcdInst
  9691 ;;		_printf
  9692 ;; This function is called by:
  9693 ;;		_main
  9694 ;; This function uses a non-reentrant model
  9695 ;;
  9696                           
  9697                           	psect	text40
  9698  0011F8                     __ptext40:
  9699                           	opt stack 0
  9700  0011F8                     _bottle_count:
  9701                           	opt stack 25
  9702                           
  9703                           ;main.c: 446: while (bot_type != O){
  9704                           
  9705                           ;incstack = 0
  9706  0011F8  D109               	goto	l5589
  9707  0011FA                     l5553:
  9708                           
  9709                           ;main.c: 449: lcdInst(0b10000000);;
  9710  0011FA  0E80               	movlw	128
  9711  0011FC  ECA9  F019         	call	_lcdInst
  9712                           
  9713                           ;main.c: 450: printf("Total Bottle    ");
  9714  001200  0E77               	movlw	low STR_12
  9715  001202  0100               	movlb	0	; () banked
  9716  001204  6FCE               	movwf	printf@f& (0+255),b
  9717  001206  0EFF               	movlw	high STR_12
  9718  001208  0100               	movlb	0	; () banked
  9719  00120A  6FCF               	movwf	(printf@f+1)& (0+255),b
  9720  00120C  EC15  F007         	call	_printf	;wreg free
  9721                           
  9722                           ;main.c: 451: lcdInst(0b11000000);;
  9723  001210  0EC0               	movlw	192
  9724  001212  ECA9  F019         	call	_lcdInst
  9725                           
  9726                           ;main.c: 452: printf("Count: %u       ", (bot_count[0] + bot_count[1] + bot_count[2] + b
      +                          ot_count[3]));
  9727  001216  0E66               	movlw	low STR_13
  9728  001218  0100               	movlb	0	; () banked
  9729  00121A  6FCE               	movwf	printf@f& (0+255),b
  9730  00121C  0EFF               	movlw	high STR_13
  9731  00121E  0100               	movlb	0	; () banked
  9732  001220  6FCF               	movwf	(printf@f+1)& (0+255),b
  9733  001222  0100               	movlb	0	; () banked
  9734  001224  EE20 F003          	lfsr	2,3
  9735  001228  51EA               	movf	bottle_count@bot_count& (0+255),w,b
  9736  00122A  26D9               	addwf	fsr2l,f,c
  9737  00122C  51EB               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  9738  00122E  22DA               	addwfc	fsr2h,f,c
  9739  001230  50DF               	movf	indf2,w,c
  9740  001232  0100               	movlb	0	; () banked
  9741  001234  6FEC               	movwf	??_bottle_count& (0+255),b
  9742  001236  C0EA  FFD9         	movff	bottle_count@bot_count,fsr2l
  9743  00123A  C0EB  FFDA         	movff	bottle_count@bot_count+1,fsr2h
  9744  00123E  50DF               	movf	indf2,w,c
  9745  001240  0100               	movlb	0	; () banked
  9746  001242  6FED               	movwf	(??_bottle_count+1)& (0+255),b
  9747  001244  6BEE               	clrf	(??_bottle_count+2)& (0+255),b
  9748  001246  0100               	movlb	0	; () banked
  9749  001248  EE20 F001          	lfsr	2,1
  9750  00124C  51EA               	movf	bottle_count@bot_count& (0+255),w,b
  9751  00124E  26D9               	addwf	fsr2l,f,c
  9752  001250  51EB               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  9753  001252  22DA               	addwfc	fsr2h,f,c
  9754  001254  50DF               	movf	indf2,w,c
  9755  001256  0100               	movlb	0	; () banked
  9756  001258  6FEF               	movwf	(??_bottle_count+3)& (0+255),b
  9757  00125A  0100               	movlb	0	; () banked
  9758  00125C  51EF               	movf	(??_bottle_count+3)& (0+255),w,b
  9759  00125E  0100               	movlb	0	; () banked
  9760  001260  27ED               	addwf	(??_bottle_count+1)& (0+255),f,b
  9761  001262  0E00               	movlw	0
  9762  001264  23EE               	addwfc	(??_bottle_count+2)& (0+255),f,b
  9763  001266  0100               	movlb	0	; () banked
  9764  001268  EE20 F002          	lfsr	2,2
  9765  00126C  51EA               	movf	bottle_count@bot_count& (0+255),w,b
  9766  00126E  26D9               	addwf	fsr2l,f,c
  9767  001270  51EB               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  9768  001272  22DA               	addwfc	fsr2h,f,c
  9769  001274  50DF               	movf	indf2,w,c
  9770  001276  0100               	movlb	0	; () banked
  9771  001278  6FF0               	movwf	(??_bottle_count+4)& (0+255),b
  9772  00127A  0100               	movlb	0	; () banked
  9773  00127C  51F0               	movf	(??_bottle_count+4)& (0+255),w,b
  9774  00127E  0100               	movlb	0	; () banked
  9775  001280  27ED               	addwf	(??_bottle_count+1)& (0+255),f,b
  9776  001282  0E00               	movlw	0
  9777  001284  23EE               	addwfc	(??_bottle_count+2)& (0+255),f,b
  9778  001286  0100               	movlb	0	; () banked
  9779  001288  51EC               	movf	??_bottle_count& (0+255),w,b
  9780  00128A  0100               	movlb	0	; () banked
  9781  00128C  25ED               	addwf	(??_bottle_count+1)& (0+255),w,b
  9782  00128E  0100               	movlb	0	; () banked
  9783  001290  6FD0               	movwf	(?_printf+2)& (0+255),b
  9784  001292  0100               	movlb	0	; () banked
  9785  001294  0E00               	movlw	0
  9786  001296  0100               	movlb	0	; () banked
  9787  001298  21EE               	addwfc	(??_bottle_count+2)& (0+255),w,b
  9788  00129A  0100               	movlb	0	; () banked
  9789  00129C  6FD1               	movwf	(?_printf+3)& (0+255),b
  9790  00129E  EC15  F007         	call	_printf	;wreg free
  9791                           
  9792                           ;main.c: 453: break;
  9793  0012A2  D0A6               	goto	l5587
  9794  0012A4                     l5559:
  9795                           
  9796                           ;main.c: 455: lcdInst(0b10000000);;
  9797  0012A4  0E80               	movlw	128
  9798  0012A6  ECA9  F019         	call	_lcdInst
  9799                           
  9800                           ;main.c: 456: printf("YOP With Cap    ");
  9801  0012AA  0E88               	movlw	low STR_14
  9802  0012AC  0100               	movlb	0	; () banked
  9803  0012AE  6FCE               	movwf	printf@f& (0+255),b
  9804  0012B0  0EFF               	movlw	high STR_14
  9805  0012B2  0100               	movlb	0	; () banked
  9806  0012B4  6FCF               	movwf	(printf@f+1)& (0+255),b
  9807  0012B6  EC15  F007         	call	_printf	;wreg free
  9808                           
  9809                           ;main.c: 457: lcdInst(0b11000000);;
  9810  0012BA  0EC0               	movlw	192
  9811  0012BC  ECA9  F019         	call	_lcdInst
  9812                           
  9813                           ;main.c: 458: printf("Count: %u       ", bot_count[0]);
  9814  0012C0  0E66               	movlw	low STR_13
  9815  0012C2  0100               	movlb	0	; () banked
  9816  0012C4  6FCE               	movwf	printf@f& (0+255),b
  9817  0012C6  0EFF               	movlw	high STR_13
  9818  0012C8  0100               	movlb	0	; () banked
  9819  0012CA  6FCF               	movwf	(printf@f+1)& (0+255),b
  9820  0012CC  C0EA  FFD9         	movff	bottle_count@bot_count,fsr2l
  9821  0012D0  C0EB  FFDA         	movff	bottle_count@bot_count+1,fsr2h
  9822  0012D4  50DF               	movf	indf2,w,c
  9823  0012D6  0100               	movlb	0	; () banked
  9824  0012D8  6FEC               	movwf	??_bottle_count& (0+255),b
  9825  0012DA  0100               	movlb	0	; () banked
  9826  0012DC  51EC               	movf	??_bottle_count& (0+255),w,b
  9827  0012DE  0100               	movlb	0	; () banked
  9828  0012E0  6FD0               	movwf	(?_printf+2)& (0+255),b
  9829  0012E2  6BD1               	clrf	(?_printf+3)& (0+255),b
  9830  0012E4  EC15  F007         	call	_printf	;wreg free
  9831                           
  9832                           ;main.c: 459: break;
  9833  0012E8  D083               	goto	l5587
  9834  0012EA                     l5565:
  9835                           
  9836                           ;main.c: 461: lcdInst(0b10000000);;
  9837  0012EA  0E80               	movlw	128
  9838  0012EC  ECA9  F019         	call	_lcdInst
  9839                           
  9840                           ;main.c: 462: printf("YOP With No Cap ");
  9841  0012F0  0ECC               	movlw	low STR_16
  9842  0012F2  0100               	movlb	0	; () banked
  9843  0012F4  6FCE               	movwf	printf@f& (0+255),b
  9844  0012F6  0EFF               	movlw	high STR_16
  9845  0012F8  0100               	movlb	0	; () banked
  9846  0012FA  6FCF               	movwf	(printf@f+1)& (0+255),b
  9847  0012FC  EC15  F007         	call	_printf	;wreg free
  9848                           
  9849                           ;main.c: 463: lcdInst(0b11000000);;
  9850  001300  0EC0               	movlw	192
  9851  001302  ECA9  F019         	call	_lcdInst
  9852                           
  9853                           ;main.c: 464: printf("Count: %u       ", bot_count[1]);
  9854  001306  0E66               	movlw	low STR_13
  9855  001308  0100               	movlb	0	; () banked
  9856  00130A  6FCE               	movwf	printf@f& (0+255),b
  9857  00130C  0EFF               	movlw	high STR_13
  9858  00130E  0100               	movlb	0	; () banked
  9859  001310  6FCF               	movwf	(printf@f+1)& (0+255),b
  9860  001312  0100               	movlb	0	; () banked
  9861  001314  EE20 F001          	lfsr	2,1
  9862  001318  51EA               	movf	bottle_count@bot_count& (0+255),w,b
  9863  00131A  26D9               	addwf	fsr2l,f,c
  9864  00131C  51EB               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  9865  00131E  22DA               	addwfc	fsr2h,f,c
  9866  001320  50DF               	movf	indf2,w,c
  9867  001322  0100               	movlb	0	; () banked
  9868  001324  6FEC               	movwf	??_bottle_count& (0+255),b
  9869  001326  0100               	movlb	0	; () banked
  9870  001328  51EC               	movf	??_bottle_count& (0+255),w,b
  9871  00132A  0100               	movlb	0	; () banked
  9872  00132C  6FD0               	movwf	(?_printf+2)& (0+255),b
  9873  00132E  6BD1               	clrf	(?_printf+3)& (0+255),b
  9874  001330  EC15  F007         	call	_printf	;wreg free
  9875                           
  9876                           ;main.c: 465: break;
  9877  001334  D05D               	goto	l5587
  9878  001336                     l5571:
  9879                           
  9880                           ;main.c: 467: lcdInst(0b10000000);;
  9881  001336  0E80               	movlw	128
  9882  001338  ECA9  F019         	call	_lcdInst
  9883                           
  9884                           ;main.c: 468: printf("ESKA With Cap   ");
  9885  00133C  0E99               	movlw	low STR_18
  9886  00133E  0100               	movlb	0	; () banked
  9887  001340  6FCE               	movwf	printf@f& (0+255),b
  9888  001342  0EFF               	movlw	high STR_18
  9889  001344  0100               	movlb	0	; () banked
  9890  001346  6FCF               	movwf	(printf@f+1)& (0+255),b
  9891  001348  EC15  F007         	call	_printf	;wreg free
  9892                           
  9893                           ;main.c: 469: lcdInst(0b11000000);;
  9894  00134C  0EC0               	movlw	192
  9895  00134E  ECA9  F019         	call	_lcdInst
  9896                           
  9897                           ;main.c: 470: printf("Count: %u       ", bot_count[2]);
  9898  001352  0E66               	movlw	low STR_13
  9899  001354  0100               	movlb	0	; () banked
  9900  001356  6FCE               	movwf	printf@f& (0+255),b
  9901  001358  0EFF               	movlw	high STR_13
  9902  00135A  0100               	movlb	0	; () banked
  9903  00135C  6FCF               	movwf	(printf@f+1)& (0+255),b
  9904  00135E  0100               	movlb	0	; () banked
  9905  001360  EE20 F002          	lfsr	2,2
  9906  001364  51EA               	movf	bottle_count@bot_count& (0+255),w,b
  9907  001366  26D9               	addwf	fsr2l,f,c
  9908  001368  51EB               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  9909  00136A  22DA               	addwfc	fsr2h,f,c
  9910  00136C  50DF               	movf	indf2,w,c
  9911  00136E  0100               	movlb	0	; () banked
  9912  001370  6FEC               	movwf	??_bottle_count& (0+255),b
  9913  001372  0100               	movlb	0	; () banked
  9914  001374  51EC               	movf	??_bottle_count& (0+255),w,b
  9915  001376  0100               	movlb	0	; () banked
  9916  001378  6FD0               	movwf	(?_printf+2)& (0+255),b
  9917  00137A  6BD1               	clrf	(?_printf+3)& (0+255),b
  9918  00137C  EC15  F007         	call	_printf	;wreg free
  9919                           
  9920                           ;main.c: 471: break;
  9921  001380  D037               	goto	l5587
  9922  001382                     l5577:
  9923                           
  9924                           ;main.c: 473: lcdInst(0b10000000);;
  9925  001382  0E80               	movlw	128
  9926  001384  ECA9  F019         	call	_lcdInst
  9927                           
  9928                           ;main.c: 474: printf("ESKA With No Cap");
  9929  001388  0EDD               	movlw	low STR_20
  9930  00138A  0100               	movlb	0	; () banked
  9931  00138C  6FCE               	movwf	printf@f& (0+255),b
  9932  00138E  0EFF               	movlw	high STR_20
  9933  001390  0100               	movlb	0	; () banked
  9934  001392  6FCF               	movwf	(printf@f+1)& (0+255),b
  9935  001394  EC15  F007         	call	_printf	;wreg free
  9936                           
  9937                           ;main.c: 475: lcdInst(0b11000000);;
  9938  001398  0EC0               	movlw	192
  9939  00139A  ECA9  F019         	call	_lcdInst
  9940                           
  9941                           ;main.c: 476: printf("Count: %u       ", bot_count[3]);
  9942  00139E  0E66               	movlw	low STR_13
  9943  0013A0  0100               	movlb	0	; () banked
  9944  0013A2  6FCE               	movwf	printf@f& (0+255),b
  9945  0013A4  0EFF               	movlw	high STR_13
  9946  0013A6  0100               	movlb	0	; () banked
  9947  0013A8  6FCF               	movwf	(printf@f+1)& (0+255),b
  9948  0013AA  0100               	movlb	0	; () banked
  9949  0013AC  EE20 F003          	lfsr	2,3
  9950  0013B0  51EA               	movf	bottle_count@bot_count& (0+255),w,b
  9951  0013B2  26D9               	addwf	fsr2l,f,c
  9952  0013B4  51EB               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  9953  0013B6  22DA               	addwfc	fsr2h,f,c
  9954  0013B8  50DF               	movf	indf2,w,c
  9955  0013BA  0100               	movlb	0	; () banked
  9956  0013BC  6FEC               	movwf	??_bottle_count& (0+255),b
  9957  0013BE  0100               	movlb	0	; () banked
  9958  0013C0  51EC               	movf	??_bottle_count& (0+255),w,b
  9959  0013C2  0100               	movlb	0	; () banked
  9960  0013C4  6FD0               	movwf	(?_printf+2)& (0+255),b
  9961  0013C6  6BD1               	clrf	(?_printf+3)& (0+255),b
  9962  0013C8  EC15  F007         	call	_printf	;wreg free
  9963                           
  9964                           ;main.c: 478: }
  9965                           
  9966                           ;main.c: 477: break;
  9967  0013CC  D011               	goto	l5587
  9968  0013CE                     l5585:
  9969  0013CE  0100               	movlb	0	; () banked
  9970  0013D0  51FB               	movf	_bot_type& (0+255),w,b
  9971                           
  9972                           ; Switch size 1, requested type "space"
  9973                           ; Number of cases is 5, Range of values is 0 to 4
  9974                           ; switch strategies available:
  9975                           ; Name         Instructions Cycles
  9976                           ; simple_byte           16     9 (average)
  9977                           ;	Chosen strategy is simple_byte
  9978  0013D2  0A00               	xorlw	0	; case 0
  9979  0013D4  B4D8               	btfsc	status,2,c
  9980  0013D6  D711               	goto	l5553
  9981  0013D8  0A01               	xorlw	1	; case 1
  9982  0013DA  B4D8               	btfsc	status,2,c
  9983  0013DC  D763               	goto	l5559
  9984  0013DE  0A03               	xorlw	3	; case 2
  9985  0013E0  B4D8               	btfsc	status,2,c
  9986  0013E2  D783               	goto	l5565
  9987  0013E4  0A01               	xorlw	1	; case 3
  9988  0013E6  B4D8               	btfsc	status,2,c
  9989  0013E8  D7A6               	goto	l5571
  9990  0013EA  0A07               	xorlw	7	; case 4
  9991  0013EC  B4D8               	btfsc	status,2,c
  9992  0013EE  D7C9               	goto	l5577
  9993  0013F0                     l5587:
  9994                           
  9995                           ;main.c: 479: _delay((unsigned long)((100)*(10000000/4000.0)));
  9996  0013F0  0E02               	movlw	2
  9997  0013F2  0100               	movlb	0	; () banked
  9998  0013F4  6FED               	movwf	(??_bottle_count+1)& (0+255),b
  9999  0013F6  0E45               	movlw	69
 10000  0013F8  0100               	movlb	0	; () banked
 10001  0013FA  6FEC               	movwf	??_bottle_count& (0+255),b
 10002  0013FC  0EA9               	movlw	169
 10003  0013FE                     u5787:
 10004  0013FE  2EE8               	decfsz	wreg,f,c
 10005  001400  D7FE               	bra	u5787
 10006  001402  2FEC               	decfsz	??_bottle_count& (0+255),f,b
 10007  001404  D7FC               	bra	u5787
 10008  001406  2FED               	decfsz	(??_bottle_count+1)& (0+255),f,b
 10009  001408  D7FA               	bra	u5787
 10010  00140A  D000               	nop2	
 10011  00140C                     l5589:
 10012  00140C  0E05               	movlw	5
 10013  00140E  0100               	movlb	0	; () banked
 10014  001410  19FB               	xorwf	_bot_type& (0+255),w,b
 10015  001412  B4D8               	btfsc	status,2,c
 10016  001414  0012               	return	
 10017  001416  D7DB               	goto	l5585
 10018  001418                     __end_of_bottle_count:
 10019                           	opt stack 0
 10020                           tblptru	equ	0xFF8
 10021                           tblptrh	equ	0xFF7
 10022                           tblptrl	equ	0xFF6
 10023                           tablat	equ	0xFF5
 10024                           prodh	equ	0xFF4
 10025                           prodl	equ	0xFF3
 10026                           intcon	equ	0xFF2
 10027                           intcon2	equ	0xFF1
 10028                           intcon3	equ	0xFF0
 10029                           postinc0	equ	0xFEE
 10030                           wreg	equ	0xFE8
 10031                           postdec1	equ	0xFE5
 10032                           fsr1l	equ	0xFE1
 10033                           indf2	equ	0xFDF
 10034                           postinc2	equ	0xFDE
 10035                           postdec2	equ	0xFDD
 10036                           fsr2h	equ	0xFDA
 10037                           fsr2l	equ	0xFD9
 10038                           status	equ	0xFD8
 10039                           
 10040 ;; *************** function _printf *****************
 10041 ;; Defined at:
 10042 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 10043 ;; Parameters:    Size  Location     Type
 10044 ;;  f               2   78[BANK0 ] PTR const unsigned char 
 10045 ;;		 -> STR_25(23), STR_24(23), STR_23(17), STR_22(17), 
 10046 ;;		 -> STR_21(17), STR_20(17), STR_19(17), STR_18(17), 
 10047 ;;		 -> STR_17(17), STR_16(17), STR_15(17), STR_14(17), 
 10048 ;;		 -> STR_13(17), STR_12(17), STR_11(19), STR_10(17), 
 10049 ;;		 -> STR_9(20), STR_8(20), STR_7(18), STR_6(16), 
 10050 ;;		 -> STR_5(17), STR_4(17), STR_3(17), STR_2(17), 
 10051 ;;		 -> STR_1(27), 
 10052 ;; Auto vars:     Size  Location     Type
 10053 ;;  idx             1   96[BANK0 ] unsigned char 
 10054 ;;  tmpval          4    0        struct .
 10055 ;;  cp              3    0        PTR const unsigned char 
 10056 ;;  width           2  103[BANK0 ] int 
 10057 ;;  val             2  100[BANK0 ] unsigned int 
 10058 ;;  ap              2   97[BANK0 ] PTR void [1]
 10059 ;;		 -> ?_printf(2), 
 10060 ;;  len             2    0        unsigned int 
 10061 ;;  c               1  105[BANK0 ] char 
 10062 ;;  flag            1  102[BANK0 ] unsigned char 
 10063 ;;  prec            1   99[BANK0 ] char 
 10064 ;; Return value:  Size  Location     Type
 10065 ;;                  2   78[BANK0 ] int 
 10066 ;; Registers used:
 10067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10068 ;; Tracked objects:
 10069 ;;		On entry : 0/0
 10070 ;;		On exit  : 0/0
 10071 ;;		Unchanged: 0/0
 10072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10073 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10074 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10075 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10076 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10077 ;;Total ram usage:       28 bytes
 10078 ;; Hardware stack levels used:    1
 10079 ;; Hardware stack levels required when called:    4
 10080 ;; This function calls:
 10081 ;;		___lwdiv
 10082 ;;		___lwmod
 10083 ;;		___wmul
 10084 ;;		_isdigit
 10085 ;;		_putch
 10086 ;; This function is called by:
 10087 ;;		_main
 10088 ;;		_init_operation
 10089 ;;		_runtime
 10090 ;;		_bottle_count
 10091 ;;		_operation_end
 10092 ;;		_date_time
 10093 ;; This function uses a non-reentrant model
 10094 ;;
 10095                           
 10096                           	psect	text41
 10097  000E2A                     __ptext41:
 10098                           	opt stack 0
 10099  000E2A                     _printf:
 10100                           	opt stack 25
 10101                           
 10102                           ;doprnt.c: 466: va_list ap;
 10103                           ;doprnt.c: 499: signed char c;
 10104                           ;doprnt.c: 501: int width;
 10105                           ;doprnt.c: 506: signed char prec;
 10106                           ;doprnt.c: 508: unsigned char flag;
 10107                           ;doprnt.c: 523: union {
 10108                           ;doprnt.c: 524: unsigned long vd;
 10109                           ;doprnt.c: 525: double integ;
 10110                           ;doprnt.c: 526: } tmpval;
 10111                           ;doprnt.c: 528: unsigned int val;
 10112                           ;doprnt.c: 529: unsigned len;
 10113                           ;doprnt.c: 530: const char * cp;
 10114                           ;doprnt.c: 533: *ap = __va_start();
 10115                           
 10116                           ; BSR set to: 0
 10117                           ;incstack = 0
 10118  000E2A  0ED0               	movlw	low (?_printf+2)
 10119  000E2C  0100               	movlb	0	; () banked
 10120  000E2E  6FE1               	movwf	printf@ap& (0+255),b
 10121  000E30  0E00               	movlw	high (?_printf+2)
 10122  000E32  0100               	movlb	0	; () banked
 10123  000E34  6FE2               	movwf	(printf@ap+1)& (0+255),b
 10124                           
 10125                           ;doprnt.c: 536: while(c = *f++) {
 10126  000E36  D1D1               	goto	l5261
 10127  000E38                     l5131:
 10128                           
 10129                           ; BSR set to: 0
 10130                           ;doprnt.c: 538: if(c != '%')
 10131  000E38  0E25               	movlw	37
 10132  000E3A  0100               	movlb	0	; () banked
 10133  000E3C  19E9               	xorwf	printf@c& (0+255),w,b
 10134  000E3E  B4D8               	btfsc	status,2,c
 10135  000E40  D005               	goto	l5135
 10136                           
 10137                           ; BSR set to: 0
 10138                           ;doprnt.c: 540: {
 10139                           ;doprnt.c: 541: (putch(c) );
 10140  000E42  0100               	movlb	0	; () banked
 10141  000E44  51E9               	movf	printf@c& (0+255),w,b
 10142  000E46  ECA3  F019         	call	_putch
 10143                           
 10144                           ;doprnt.c: 542: continue;
 10145  000E4A  D1C7               	goto	l5261
 10146  000E4C                     l5135:
 10147                           
 10148                           ;doprnt.c: 543: }
 10149                           ;doprnt.c: 546: width = 0;
 10150  000E4C  0E00               	movlw	0
 10151  000E4E  0100               	movlb	0	; () banked
 10152  000E50  6FE8               	movwf	(printf@width+1)& (0+255),b
 10153  000E52  0E00               	movlw	0
 10154  000E54  6FE7               	movwf	printf@width& (0+255),b
 10155                           
 10156                           ;doprnt.c: 548: flag = 0;
 10157  000E56  0E00               	movlw	0
 10158  000E58  0100               	movlb	0	; () banked
 10159  000E5A  6FE6               	movwf	printf@flag& (0+255),b
 10160                           
 10161                           ; BSR set to: 0
 10162                           ;doprnt.c: 551: switch(*f) {
 10163                           
 10164                           ;doprnt.c: 550: for(;;) {
 10165  000E5C  D005               	goto	l5141
 10166  000E5E                     l5137:
 10167                           
 10168                           ;doprnt.c: 580: flag |= 0x04;
 10169  000E5E  0100               	movlb	0	; () banked
 10170  000E60  85E6               	bsf	printf@flag& (0+255),2,b
 10171                           
 10172                           ;doprnt.c: 581: f++;
 10173  000E62  0100               	movlb	0	; () banked
 10174  000E64  4BCE               	infsnz	printf@f& (0+255),f,b
 10175  000E66  2BCF               	incf	(printf@f+1)& (0+255),f,b
 10176  000E68                     l5141:
 10177  000E68  C0CE  FFF6         	movff	printf@f,tblptrl
 10178  000E6C  C0CF  FFF7         	movff	printf@f+1,tblptrh
 10179  000E70                     	if	0	;tblptru may be non-zero
 10180  000E70                     	endif
 10181  000E70                     	if	0	;tblptru may be non-zero
 10182  000E70                     	endif
 10183  000E70  0008               	tblrd		*
 10184  000E72  50F5               	movf	tablat,w,c
 10185                           
 10186                           ; Switch size 1, requested type "space"
 10187                           ; Number of cases is 1, Range of values is 48 to 48
 10188                           ; switch strategies available:
 10189                           ; Name         Instructions Cycles
 10190                           ; simple_byte            4     3 (average)
 10191                           ;	Chosen strategy is simple_byte
 10192  000E74  0A30               	xorlw	48	; case 48
 10193  000E76  B4D8               	btfsc	status,2,c
 10194  000E78  D7F2               	goto	l5137
 10195                           
 10196                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10197                           
 10198                           ;doprnt.c: 586: }
 10199                           
 10200                           ;doprnt.c: 585: break;
 10201  000E7A  C0CE  FFF6         	movff	printf@f,tblptrl
 10202  000E7E  C0CF  FFF7         	movff	printf@f+1,tblptrh
 10203  000E82                     	if	0	;tblptru may be non-zero
 10204  000E82                     	endif
 10205  000E82                     	if	0	;tblptru may be non-zero
 10206  000E82                     	endif
 10207  000E82  0008               	tblrd		*
 10208  000E84  50F5               	movf	tablat,w,c
 10209  000E86  EC6D  F019         	call	_isdigit
 10210  000E8A  A0D8               	btfss	status,0,c
 10211  000E8C  D047               	goto	l5161
 10212                           
 10213                           ;doprnt.c: 598: width = 0;
 10214  000E8E  0E00               	movlw	0
 10215  000E90  0100               	movlb	0	; () banked
 10216  000E92  6FE8               	movwf	(printf@width+1)& (0+255),b
 10217  000E94  0E00               	movlw	0
 10218  000E96  6FE7               	movwf	printf@width& (0+255),b
 10219  000E98                     l5147:
 10220                           
 10221                           ;doprnt.c: 600: width *= 10;
 10222  000E98  C0E7  F019         	movff	printf@width,___wmul@multiplier
 10223  000E9C  C0E8  F01A         	movff	printf@width+1,___wmul@multiplier+1
 10224  000EA0  0E00               	movlw	0
 10225  000EA2  6E1C               	movwf	___wmul@multiplicand+1,c
 10226  000EA4  0E0A               	movlw	10
 10227  000EA6  6E1B               	movwf	___wmul@multiplicand,c
 10228  000EA8  EC35  F019         	call	___wmul	;wreg free
 10229  000EAC  C019  F0E7         	movff	?___wmul,printf@width
 10230  000EB0  C01A  F0E8         	movff	?___wmul+1,printf@width+1
 10231                           
 10232                           ;doprnt.c: 601: width += *f++ - '0';
 10233  000EB4  0ED0               	movlw	208
 10234  000EB6  0100               	movlb	0	; () banked
 10235  000EB8  6FDC               	movwf	??_printf& (0+255),b
 10236  000EBA  0EFF               	movlw	255
 10237  000EBC  0100               	movlb	0	; () banked
 10238  000EBE  6FDD               	movwf	(??_printf+1)& (0+255),b
 10239  000EC0  C0CE  FFF6         	movff	printf@f,tblptrl
 10240  000EC4  C0CF  FFF7         	movff	printf@f+1,tblptrh
 10241  000EC8                     	if	0	;tblptru may be non-zero
 10242  000EC8                     	endif
 10243  000EC8                     	if	0	;tblptru may be non-zero
 10244  000EC8                     	endif
 10245  000EC8  0008               	tblrd		*
 10246  000ECA  50F5               	movf	tablat,w,c
 10247  000ECC  0100               	movlb	0	; () banked
 10248  000ECE  6FDE               	movwf	(??_printf+2)& (0+255),b
 10249  000ED0  6BDF               	clrf	(??_printf+3)& (0+255),b
 10250  000ED2  0100               	movlb	0	; () banked
 10251  000ED4  51DC               	movf	??_printf& (0+255),w,b
 10252  000ED6  0100               	movlb	0	; () banked
 10253  000ED8  27DE               	addwf	(??_printf+2)& (0+255),f,b
 10254  000EDA  0100               	movlb	0	; () banked
 10255  000EDC  51DD               	movf	(??_printf+1)& (0+255),w,b
 10256  000EDE  0100               	movlb	0	; () banked
 10257  000EE0  23DF               	addwfc	(??_printf+3)& (0+255),f,b
 10258  000EE2  0100               	movlb	0	; () banked
 10259  000EE4  51DE               	movf	(??_printf+2)& (0+255),w,b
 10260  000EE6  0100               	movlb	0	; () banked
 10261  000EE8  27E7               	addwf	printf@width& (0+255),f,b
 10262  000EEA  0100               	movlb	0	; () banked
 10263  000EEC  51DF               	movf	(??_printf+3)& (0+255),w,b
 10264  000EEE  0100               	movlb	0	; () banked
 10265  000EF0  23E8               	addwfc	(printf@width+1)& (0+255),f,b
 10266                           
 10267                           ; BSR set to: 0
 10268  000EF2  0100               	movlb	0	; () banked
 10269  000EF4  4BCE               	infsnz	printf@f& (0+255),f,b
 10270  000EF6  2BCF               	incf	(printf@f+1)& (0+255),f,b
 10271                           
 10272                           ; BSR set to: 0
 10273                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10274  000EF8  C0CE  FFF6         	movff	printf@f,tblptrl
 10275  000EFC  C0CF  FFF7         	movff	printf@f+1,tblptrh
 10276  000F00                     	if	0	;tblptru may be non-zero
 10277  000F00                     	endif
 10278  000F00                     	if	0	;tblptru may be non-zero
 10279  000F00                     	endif
 10280  000F00  0008               	tblrd		*
 10281  000F02  50F5               	movf	tablat,w,c
 10282  000F04  EC6D  F019         	call	_isdigit
 10283  000F08  A0D8               	btfss	status,0,c
 10284  000F0A  D008               	goto	l5161
 10285  000F0C  D7C5               	goto	l5147
 10286  000F0E                     l5155:
 10287                           
 10288                           ;doprnt.c: 721: flag |= 0x80;
 10289  000F0E  0100               	movlb	0	; () banked
 10290  000F10  8FE6               	bsf	printf@flag& (0+255),7,b
 10291                           
 10292                           ;doprnt.c: 723: break;
 10293  000F12  D020               	goto	l5163
 10294  000F14                     l5157:
 10295                           
 10296                           ; BSR set to: 0
 10297                           ;doprnt.c: 818: flag |= 0xC0;
 10298  000F14  0EC0               	movlw	192
 10299  000F16  0100               	movlb	0	; () banked
 10300  000F18  13E6               	iorwf	printf@flag& (0+255),f,b
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;doprnt.c: 822: }
 10304                           
 10305                           ;doprnt.c: 819: break;
 10306  000F1A  D01C               	goto	l5163
 10307  000F1C                     l5161:
 10308  000F1C  C0CE  FFF6         	movff	printf@f,tblptrl
 10309  000F20  C0CF  FFF7         	movff	printf@f+1,tblptrh
 10310  000F24  0100               	movlb	0	; () banked
 10311  000F26  4BCE               	infsnz	printf@f& (0+255),f,b
 10312  000F28  2BCF               	incf	(printf@f+1)& (0+255),f,b
 10313  000F2A                     	if	0	;tblptru may be non-zero
 10314  000F2A                     	endif
 10315  000F2A                     	if	0	;tblptru may be non-zero
 10316  000F2A                     	endif
 10317  000F2A  0008               	tblrd		*
 10318  000F2C  CFF5 F0E9          	movff	tablat,printf@c
 10319  000F30  0100               	movlb	0	; () banked
 10320  000F32  51E9               	movf	printf@c& (0+255),w,b
 10321                           
 10322                           ; Switch size 1, requested type "space"
 10323                           ; Number of cases is 5, Range of values is 0 to 120
 10324                           ; switch strategies available:
 10325                           ; Name         Instructions Cycles
 10326                           ; simple_byte           16     9 (average)
 10327                           ;	Chosen strategy is simple_byte
 10328  000F34  0A00               	xorlw	0	; case 0
 10329  000F36  B4D8               	btfsc	status,2,c
 10330  000F38  0012               	return	
 10331  000F3A  0A64               	xorlw	100	; case 100
 10332  000F3C  B4D8               	btfsc	status,2,c
 10333  000F3E  D00A               	goto	l5163
 10334  000F40  0A0D               	xorlw	13	; case 105
 10335  000F42  B4D8               	btfsc	status,2,c
 10336  000F44  D007               	goto	l5163
 10337  000F46  0A1C               	xorlw	28	; case 117
 10338  000F48  B4D8               	btfsc	status,2,c
 10339  000F4A  D7E4               	goto	l5157
 10340  000F4C  0A0D               	xorlw	13	; case 120
 10341  000F4E  B4D8               	btfsc	status,2,c
 10342  000F50  D7DE               	goto	l5155
 10343  000F52  D143               	goto	l5261
 10344  000F54                     l5163:
 10345                           
 10346                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 10347  000F54  C0E6  F0DC         	movff	printf@flag,??_printf
 10348  000F58  0EC0               	movlw	192
 10349  000F5A  0100               	movlb	0	; () banked
 10350  000F5C  17DC               	andwf	??_printf& (0+255),f,b
 10351  000F5E  A4D8               	btfss	status,2,c
 10352  000F60  D019               	goto	l5175
 10353                           
 10354                           ; BSR set to: 0
 10355                           ;doprnt.c: 1253: {
 10356                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10357  000F62  C0E1  FFD9         	movff	printf@ap,fsr2l
 10358  000F66  C0E2  FFDA         	movff	printf@ap+1,fsr2h
 10359  000F6A  CFDE F0E4          	movff	postinc2,printf@val
 10360  000F6E  CFDD F0E5          	movff	postdec2,printf@val+1
 10361                           
 10362                           ; BSR set to: 0
 10363  000F72  0E02               	movlw	2
 10364  000F74  0100               	movlb	0	; () banked
 10365  000F76  27E1               	addwf	printf@ap& (0+255),f,b
 10366  000F78  0E00               	movlw	0
 10367  000F7A  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
 10368                           
 10369                           ; BSR set to: 0
 10370                           ;doprnt.c: 1261: if((int)val < 0) {
 10371  000F7C  0100               	movlb	0	; () banked
 10372  000F7E  AFE5               	btfss	(printf@val+1)& (0+255),7,b
 10373  000F80  D053               	goto	l5209
 10374                           
 10375                           ; BSR set to: 0
 10376                           ;doprnt.c: 1262: flag |= 0x03;
 10377  000F82  0E03               	movlw	3
 10378  000F84  0100               	movlb	0	; () banked
 10379  000F86  13E6               	iorwf	printf@flag& (0+255),f,b
 10380                           
 10381                           ; BSR set to: 0
 10382                           ;doprnt.c: 1263: val = -val;
 10383  000F88  0100               	movlb	0	; () banked
 10384  000F8A  6DE4               	negf	printf@val& (0+255),b
 10385  000F8C  1FE5               	comf	(printf@val+1)& (0+255),f,b
 10386  000F8E  B0D8               	btfsc	status,0,c
 10387  000F90  2BE5               	incf	(printf@val+1)& (0+255),f,b
 10388                           
 10389                           ; BSR set to: 0
 10390                           ;doprnt.c: 1264: }
 10391                           ;doprnt.c: 1266: }
 10392  000F92  D04A               	goto	l5209
 10393  000F94                     l5175:
 10394                           
 10395                           ; BSR set to: 0
 10396                           ;doprnt.c: 1268: else
 10397                           ;doprnt.c: 1273: {
 10398                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10399  000F94  C0E1  FFD9         	movff	printf@ap,fsr2l
 10400  000F98  C0E2  FFDA         	movff	printf@ap+1,fsr2h
 10401  000F9C  CFDE F0E4          	movff	postinc2,printf@val
 10402  000FA0  CFDD F0E5          	movff	postdec2,printf@val+1
 10403                           
 10404                           ; BSR set to: 0
 10405  000FA4  0E02               	movlw	2
 10406  000FA6  0100               	movlb	0	; () banked
 10407  000FA8  27E1               	addwf	printf@ap& (0+255),f,b
 10408  000FAA  0E00               	movlw	0
 10409  000FAC  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
 10410                           
 10411                           ; BSR set to: 0
 10412                           ;doprnt.c: 1287: }
 10413                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 10414  000FAE  D03C               	goto	l5209
 10415  000FB0                     l5179:
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;doprnt.c: 1302: case 0xC0:
 10419                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10420  000FB0  0E01               	movlw	1
 10421  000FB2  0100               	movlb	0	; () banked
 10422  000FB4  6FE9               	movwf	printf@c& (0+255),b
 10423  000FB6                     l5181:
 10424                           
 10425                           ; BSR set to: 0
 10426  000FB6  0E05               	movlw	5
 10427  000FB8  0100               	movlb	0	; () banked
 10428  000FBA  19E9               	xorwf	printf@c& (0+255),w,b
 10429  000FBC  B4D8               	btfsc	status,2,c
 10430  000FBE  D040               	goto	l5211
 10431                           
 10432                           ; BSR set to: 0
 10433                           ;doprnt.c: 1306: if(val < dpowers[c])
 10434                           
 10435                           ; BSR set to: 0
 10436                           
 10437                           ; BSR set to: 0
 10438  000FC0  0100               	movlb	0	; () banked
 10439  000FC2  51E9               	movf	printf@c& (0+255),w,b
 10440  000FC4  0D02               	mullw	2
 10441  000FC6  0E4E               	movlw	low _dpowers
 10442  000FC8  24F3               	addwf	prodl,w,c
 10443  000FCA  6EF6               	movwf	tblptrl,c
 10444  000FCC  0EFE               	movlw	high _dpowers
 10445  000FCE  20F4               	addwfc	prodh,w,c
 10446  000FD0  6EF7               	movwf	tblptrh,c
 10447  000FD2                     	if	0	;There are less than 3 active tblptr bytes
 10448  000FD2                     	endif
 10449  000FD2  0009               	tblrd		*+
 10450  000FD4  50F5               	movf	tablat,w,c
 10451  000FD6  0100               	movlb	0	; () banked
 10452  000FD8  5DE4               	subwf	printf@val& (0+255),w,b
 10453  000FDA  0009               	tblrd		*+
 10454  000FDC  50F5               	movf	tablat,w,c
 10455  000FDE  0100               	movlb	0	; () banked
 10456  000FE0  59E5               	subwfb	(printf@val+1)& (0+255),w,b
 10457  000FE2  A0D8               	btfss	status,0,c
 10458  000FE4  D02D               	goto	l5211
 10459                           
 10460                           ; BSR set to: 0
 10461                           
 10462                           ; BSR set to: 0
 10463                           
 10464                           ; BSR set to: 0
 10465                           ;doprnt.c: 1307: break;
 10466  000FE6  0100               	movlb	0	; () banked
 10467  000FE8  2BE9               	incf	printf@c& (0+255),f,b
 10468  000FEA  D7E5               	goto	l5181
 10469  000FEC                     l5193:
 10470                           
 10471                           ; BSR set to: 0
 10472                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10473  000FEC  0E01               	movlw	1
 10474  000FEE  0100               	movlb	0	; () banked
 10475  000FF0  6FE9               	movwf	printf@c& (0+255),b
 10476  000FF2                     l5195:
 10477                           
 10478                           ; BSR set to: 0
 10479  000FF2  0E04               	movlw	4
 10480  000FF4  0100               	movlb	0	; () banked
 10481  000FF6  19E9               	xorwf	printf@c& (0+255),w,b
 10482  000FF8  B4D8               	btfsc	status,2,c
 10483  000FFA  D022               	goto	l5211
 10484                           
 10485                           ; BSR set to: 0
 10486                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10487                           
 10488                           ; BSR set to: 0
 10489                           
 10490                           ; BSR set to: 0
 10491  000FFC  0100               	movlb	0	; () banked
 10492  000FFE  51E9               	movf	printf@c& (0+255),w,b
 10493  001000  0D02               	mullw	2
 10494  001002  0E58               	movlw	low _hexpowers
 10495  001004  24F3               	addwf	prodl,w,c
 10496  001006  6EF6               	movwf	tblptrl,c
 10497  001008  0EFE               	movlw	high _hexpowers
 10498  00100A  20F4               	addwfc	prodh,w,c
 10499  00100C  6EF7               	movwf	tblptrh,c
 10500  00100E                     	if	0	;There are less than 3 active tblptr bytes
 10501  00100E                     	endif
 10502  00100E  0009               	tblrd		*+
 10503  001010  50F5               	movf	tablat,w,c
 10504  001012  0100               	movlb	0	; () banked
 10505  001014  5DE4               	subwf	printf@val& (0+255),w,b
 10506  001016  0009               	tblrd		*+
 10507  001018  50F5               	movf	tablat,w,c
 10508  00101A  0100               	movlb	0	; () banked
 10509  00101C  59E5               	subwfb	(printf@val+1)& (0+255),w,b
 10510  00101E  A0D8               	btfss	status,0,c
 10511  001020  D00F               	goto	l5211
 10512                           
 10513                           ; BSR set to: 0
 10514                           
 10515                           ; BSR set to: 0
 10516                           
 10517                           ; BSR set to: 0
 10518                           ;doprnt.c: 1318: break;
 10519  001022  0100               	movlb	0	; () banked
 10520  001024  2BE9               	incf	printf@c& (0+255),f,b
 10521  001026  D7E5               	goto	l5195
 10522  001028                     l5209:
 10523                           
 10524                           ; BSR set to: 0
 10525  001028  0100               	movlb	0	; () banked
 10526  00102A  51E6               	movf	printf@flag& (0+255),w,b
 10527  00102C  0BC0               	andlw	192
 10528                           
 10529                           ; Switch size 1, requested type "space"
 10530                           ; Number of cases is 3, Range of values is 0 to 192
 10531                           ; switch strategies available:
 10532                           ; Name         Instructions Cycles
 10533                           ; simple_byte           10     6 (average)
 10534                           ;	Chosen strategy is simple_byte
 10535  00102E  0A00               	xorlw	0	; case 0
 10536  001030  B4D8               	btfsc	status,2,c
 10537  001032  D7BE               	goto	l5179
 10538  001034  0A80               	xorlw	128	; case 128
 10539  001036  B4D8               	btfsc	status,2,c
 10540  001038  D7D9               	goto	l5193
 10541  00103A  0A40               	xorlw	64	; case 192
 10542  00103C  B4D8               	btfsc	status,2,c
 10543  00103E  D7B8               	goto	l5179
 10544  001040                     l5211:
 10545                           
 10546                           ; BSR set to: 0
 10547                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10548  001040  0100               	movlb	0	; () banked
 10549  001042  51E7               	movf	printf@width& (0+255),w,b
 10550  001044  0100               	movlb	0	; () banked
 10551  001046  11E8               	iorwf	(printf@width+1)& (0+255),w,b
 10552  001048  B4D8               	btfsc	status,2,c
 10553  00104A  D00B               	goto	l5217
 10554                           
 10555                           ; BSR set to: 0
 10556  00104C  C0E6  F0DC         	movff	printf@flag,??_printf
 10557  001050  0E03               	movlw	3
 10558  001052  0100               	movlb	0	; () banked
 10559  001054  17DC               	andwf	??_printf& (0+255),f,b
 10560  001056  B4D8               	btfsc	status,2,c
 10561  001058  D004               	goto	l5217
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;doprnt.c: 1346: width--;
 10565  00105A  0100               	movlb	0	; () banked
 10566  00105C  07E7               	decf	printf@width& (0+255),f,b
 10567  00105E  A0D8               	btfss	status,0,c
 10568  001060  07E8               	decf	(printf@width+1)& (0+255),f,b
 10569  001062                     l5217:
 10570                           
 10571                           ; BSR set to: 0
 10572                           ;doprnt.c: 1381: if(width > c)
 10573  001062  0E80               	movlw	128
 10574  001064  0100               	movlb	0	; () banked
 10575  001066  BFE9               	btfsc	printf@c& (0+255),7,b
 10576  001068  0E7F               	movlw	127
 10577  00106A  0100               	movlb	0	; () banked
 10578  00106C  6FDC               	movwf	??_printf& (0+255),b
 10579  00106E  0100               	movlb	0	; () banked
 10580  001070  51E7               	movf	printf@width& (0+255),w,b
 10581  001072  0100               	movlb	0	; () banked
 10582  001074  5DE9               	subwf	printf@c& (0+255),w,b
 10583  001076  0100               	movlb	0	; () banked
 10584  001078  51E8               	movf	(printf@width+1)& (0+255),w,b
 10585  00107A  0A80               	xorlw	128
 10586  00107C  0100               	movlb	0	; () banked
 10587  00107E  59DC               	subwfb	??_printf& (0+255),w,b
 10588  001080  B0D8               	btfsc	status,0,c
 10589  001082  D00B               	goto	l5221
 10590                           
 10591                           ; BSR set to: 0
 10592                           ;doprnt.c: 1382: width -= c;
 10593  001084  0100               	movlb	0	; () banked
 10594  001086  51E9               	movf	printf@c& (0+255),w,b
 10595  001088  0100               	movlb	0	; () banked
 10596  00108A  5FE7               	subwf	printf@width& (0+255),f,b
 10597  00108C  0E00               	movlw	0
 10598  00108E  0100               	movlb	0	; () banked
 10599  001090  BFE9               	btfsc	printf@c& (0+255),7,b
 10600  001092  0EFF               	movlw	255
 10601  001094  0100               	movlb	0	; () banked
 10602  001096  5BE8               	subwfb	(printf@width+1)& (0+255),f,b
 10603  001098  D005               	goto	l5223
 10604  00109A                     l5221:
 10605                           
 10606                           ; BSR set to: 0
 10607                           ;doprnt.c: 1383: else
 10608                           ;doprnt.c: 1384: width = 0;
 10609  00109A  0E00               	movlw	0
 10610  00109C  0100               	movlb	0	; () banked
 10611  00109E  6FE8               	movwf	(printf@width+1)& (0+255),b
 10612  0010A0  0E00               	movlw	0
 10613  0010A2  6FE7               	movwf	printf@width& (0+255),b
 10614  0010A4                     l5223:
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;doprnt.c: 1387: if(flag & 0x04) {
 10618  0010A4  0100               	movlb	0	; () banked
 10619  0010A6  A5E6               	btfss	printf@flag& (0+255),2,b
 10620  0010A8  D018               	goto	l5235
 10621                           
 10622                           ; BSR set to: 0
 10623                           ;doprnt.c: 1392: if(flag & 0x03)
 10624  0010AA  C0E6  F0DC         	movff	printf@flag,??_printf
 10625  0010AE  0E03               	movlw	3
 10626  0010B0  0100               	movlb	0	; () banked
 10627  0010B2  17DC               	andwf	??_printf& (0+255),f,b
 10628  0010B4  B4D8               	btfsc	status,2,c
 10629  0010B6  D003               	goto	l5229
 10630                           
 10631                           ; BSR set to: 0
 10632                           ;doprnt.c: 1393: (putch('-') );
 10633  0010B8  0E2D               	movlw	45
 10634  0010BA  ECA3  F019         	call	_putch
 10635  0010BE                     l5229:
 10636                           
 10637                           ;doprnt.c: 1415: if(width)
 10638  0010BE  0100               	movlb	0	; () banked
 10639  0010C0  51E7               	movf	printf@width& (0+255),w,b
 10640  0010C2  0100               	movlb	0	; () banked
 10641  0010C4  11E8               	iorwf	(printf@width+1)& (0+255),w,b
 10642  0010C6  B4D8               	btfsc	status,2,c
 10643  0010C8  D025               	goto	l5245
 10644                           
 10645                           ; BSR set to: 0
 10646                           ;doprnt.c: 1417: (putch('0') );
 10647                           
 10648                           ; BSR set to: 0
 10649                           
 10650                           ;doprnt.c: 1416: do
 10651  0010CA  0E30               	movlw	48
 10652  0010CC  ECA3  F019         	call	_putch
 10653                           
 10654                           ;doprnt.c: 1418: while(--width);
 10655  0010D0  0100               	movlb	0	; () banked
 10656  0010D2  07E7               	decf	printf@width& (0+255),f,b
 10657  0010D4  A0D8               	btfss	status,0,c
 10658  0010D6  07E8               	decf	(printf@width+1)& (0+255),f,b
 10659  0010D8  D7F2               	goto	l5229
 10660  0010DA                     l5235:
 10661                           
 10662                           ; BSR set to: 0
 10663                           ;doprnt.c: 1422: {
 10664                           ;doprnt.c: 1424: if(width
 10665                           ;doprnt.c: 1428: )
 10666  0010DA  0100               	movlb	0	; () banked
 10667  0010DC  51E7               	movf	printf@width& (0+255),w,b
 10668  0010DE  0100               	movlb	0	; () banked
 10669  0010E0  11E8               	iorwf	(printf@width+1)& (0+255),w,b
 10670  0010E2  B4D8               	btfsc	status,2,c
 10671  0010E4  D00D               	goto	l5241
 10672  0010E6                     l5237:
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;doprnt.c: 1430: (putch(' ') );
 10676  0010E6  0E20               	movlw	32
 10677  0010E8  ECA3  F019         	call	_putch
 10678                           
 10679                           ;doprnt.c: 1431: while(--width);
 10680  0010EC  0100               	movlb	0	; () banked
 10681  0010EE  07E7               	decf	printf@width& (0+255),f,b
 10682  0010F0  A0D8               	btfss	status,0,c
 10683  0010F2  07E8               	decf	(printf@width+1)& (0+255),f,b
 10684  0010F4  0100               	movlb	0	; () banked
 10685  0010F6  51E7               	movf	printf@width& (0+255),w,b
 10686  0010F8  0100               	movlb	0	; () banked
 10687  0010FA  11E8               	iorwf	(printf@width+1)& (0+255),w,b
 10688  0010FC  A4D8               	btfss	status,2,c
 10689  0010FE  D7F3               	goto	l5237
 10690  001100                     l5241:
 10691                           
 10692                           ; BSR set to: 0
 10693                           ;doprnt.c: 1438: if(flag & 0x03)
 10694  001100  C0E6  F0DC         	movff	printf@flag,??_printf
 10695  001104  0E03               	movlw	3
 10696  001106  0100               	movlb	0	; () banked
 10697  001108  17DC               	andwf	??_printf& (0+255),f,b
 10698  00110A  B4D8               	btfsc	status,2,c
 10699  00110C  D003               	goto	l5245
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;doprnt.c: 1439: (putch('-') );
 10703  00110E  0E2D               	movlw	45
 10704  001110  ECA3  F019         	call	_putch
 10705  001114                     l5245:
 10706                           
 10707                           ;doprnt.c: 1469: }
 10708                           ;doprnt.c: 1472: prec = c;
 10709  001114  C0E9  F0E3         	movff	printf@c,printf@prec
 10710                           
 10711                           ;doprnt.c: 1474: while(prec--) {
 10712  001118  D05A               	goto	l5259
 10713  00111A                     l5247:
 10714                           
 10715                           ;doprnt.c: 1486: case 0xC0:
 10716                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10717  00111A  0100               	movlb	0	; () banked
 10718  00111C  51E3               	movf	printf@prec& (0+255),w,b
 10719  00111E  0D02               	mullw	2
 10720  001120  0E4E               	movlw	low _dpowers
 10721  001122  24F3               	addwf	prodl,w,c
 10722  001124  6EF6               	movwf	tblptrl,c
 10723  001126  0EFE               	movlw	high _dpowers
 10724  001128  20F4               	addwfc	prodh,w,c
 10725  00112A  6EF7               	movwf	tblptrh,c
 10726  00112C                     	if	0	;There are less than 3 active tblptr bytes
 10727  00112C                     	endif
 10728  00112C  0009               	tblrd		*+
 10729  00112E  CFF5 F01B          	movff	tablat,___lwdiv@divisor
 10730  001132  000A               	tblrd		*-
 10731  001134  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
 10732  001138  C0E4  F019         	movff	printf@val,___lwdiv@dividend
 10733  00113C  C0E5  F01A         	movff	printf@val+1,___lwdiv@dividend+1
 10734  001140  ECFD  F017         	call	___lwdiv	;wreg free
 10735  001144  C019  F020         	movff	?___lwdiv,___lwmod@dividend
 10736  001148  C01A  F021         	movff	?___lwdiv+1,___lwmod@dividend+1
 10737  00114C  0E00               	movlw	0
 10738  00114E  6E23               	movwf	___lwmod@divisor+1,c
 10739  001150  0E0A               	movlw	10
 10740  001152  6E22               	movwf	___lwmod@divisor,c
 10741  001154  EC95  F018         	call	___lwmod	;wreg free
 10742  001158  5020               	movf	?___lwmod,w,c
 10743  00115A  0F30               	addlw	48
 10744  00115C  0100               	movlb	0	; () banked
 10745  00115E  6FE9               	movwf	printf@c& (0+255),b
 10746                           
 10747                           ;doprnt.c: 1491: break;
 10748  001160  D032               	goto	l5257
 10749  001162                     l5249:
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;doprnt.c: 1499: {
 10753                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10754  001162  C0E4  F019         	movff	printf@val,___lwdiv@dividend
 10755  001166  C0E5  F01A         	movff	printf@val+1,___lwdiv@dividend+1
 10756  00116A  0100               	movlb	0	; () banked
 10757  00116C  51E3               	movf	printf@prec& (0+255),w,b
 10758  00116E  0D02               	mullw	2
 10759  001170  0E58               	movlw	low _hexpowers
 10760  001172  24F3               	addwf	prodl,w,c
 10761  001174  6EF6               	movwf	tblptrl,c
 10762  001176  0EFE               	movlw	high _hexpowers
 10763  001178  20F4               	addwfc	prodh,w,c
 10764  00117A  6EF7               	movwf	tblptrh,c
 10765  00117C                     	if	0	;There are less than 3 active tblptr bytes
 10766  00117C                     	endif
 10767  00117C  0009               	tblrd		*+
 10768  00117E  CFF5 F01B          	movff	tablat,___lwdiv@divisor
 10769  001182  000A               	tblrd		*-
 10770  001184  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
 10771  001188  ECFD  F017         	call	___lwdiv	;wreg free
 10772  00118C  5019               	movf	?___lwdiv,w,c
 10773  00118E  0B0F               	andlw	15
 10774  001190  0100               	movlb	0	; () banked
 10775  001192  6FE0               	movwf	printf@idx& (0+255),b
 10776                           
 10777                           ; BSR set to: 0
 10778                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10779  001194  0100               	movlb	0	; () banked
 10780  001196  51E0               	movf	printf@idx& (0+255),w,b
 10781  001198  0D01               	mullw	1
 10782  00119A  0E22               	movlw	low STR_26
 10783  00119C  24F3               	addwf	prodl,w,c
 10784  00119E  6EF6               	movwf	tblptrl,c
 10785  0011A0  0EFF               	movlw	high STR_26
 10786  0011A2  20F4               	addwfc	prodh,w,c
 10787  0011A4  6EF7               	movwf	tblptrh,c
 10788  0011A6                     	if	0	;There are less than 3 active tblptr bytes
 10789  0011A6                     	endif
 10790  0011A6  0008               	tblrd		*
 10791  0011A8  CFF5 F0E9          	movff	tablat,printf@c
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;doprnt.c: 1523: }
 10795                           
 10796                           ;doprnt.c: 1508: }
 10797                           ;doprnt.c: 1510: break;
 10798  0011AC  D00C               	goto	l5257
 10799  0011AE                     l5255:
 10800  0011AE  0100               	movlb	0	; () banked
 10801  0011B0  51E6               	movf	printf@flag& (0+255),w,b
 10802  0011B2  0BC0               	andlw	192
 10803                           
 10804                           ; Switch size 1, requested type "space"
 10805                           ; Number of cases is 3, Range of values is 0 to 192
 10806                           ; switch strategies available:
 10807                           ; Name         Instructions Cycles
 10808                           ; simple_byte           10     6 (average)
 10809                           ;	Chosen strategy is simple_byte
 10810  0011B4  0A00               	xorlw	0	; case 0
 10811  0011B6  B4D8               	btfsc	status,2,c
 10812  0011B8  D7B0               	goto	l5247
 10813  0011BA  0A80               	xorlw	128	; case 128
 10814  0011BC  B4D8               	btfsc	status,2,c
 10815  0011BE  D7D1               	goto	l5249
 10816  0011C0  0A40               	xorlw	64	; case 192
 10817  0011C2  B4D8               	btfsc	status,2,c
 10818  0011C4  D7AA               	goto	l5247
 10819  0011C6                     l5257:
 10820                           
 10821                           ; BSR set to: 0
 10822                           ;doprnt.c: 1524: (putch(c) );
 10823  0011C6  0100               	movlb	0	; () banked
 10824  0011C8  51E9               	movf	printf@c& (0+255),w,b
 10825  0011CA  ECA3  F019         	call	_putch
 10826  0011CE                     l5259:
 10827  0011CE  0100               	movlb	0	; () banked
 10828  0011D0  07E3               	decf	printf@prec& (0+255),f,b
 10829  0011D2  0100               	movlb	0	; () banked
 10830  0011D4  29E3               	incf	printf@prec& (0+255),w,b
 10831  0011D6  A4D8               	btfss	status,2,c
 10832  0011D8  D7EA               	goto	l5255
 10833  0011DA                     l5261:
 10834  0011DA  C0CE  FFF6         	movff	printf@f,tblptrl
 10835  0011DE  C0CF  FFF7         	movff	printf@f+1,tblptrh
 10836  0011E2  0100               	movlb	0	; () banked
 10837  0011E4  4BCE               	infsnz	printf@f& (0+255),f,b
 10838  0011E6  2BCF               	incf	(printf@f+1)& (0+255),f,b
 10839  0011E8                     	if	0	;tblptru may be non-zero
 10840  0011E8                     	endif
 10841  0011E8                     	if	0	;tblptru may be non-zero
 10842  0011E8                     	endif
 10843  0011E8  0008               	tblrd		*
 10844  0011EA  CFF5 F0E9          	movff	tablat,printf@c
 10845  0011EE  0100               	movlb	0	; () banked
 10846  0011F0  51E9               	movf	printf@c& (0+255),w,b
 10847  0011F2  B4D8               	btfsc	status,2,c
 10848  0011F4  0012               	return	
 10849  0011F6  D620               	goto	l5131
 10850  0011F8                     __end_of_printf:
 10851                           	opt stack 0
 10852                           tblptru	equ	0xFF8
 10853                           tblptrh	equ	0xFF7
 10854                           tblptrl	equ	0xFF6
 10855                           tablat	equ	0xFF5
 10856                           prodh	equ	0xFF4
 10857                           prodl	equ	0xFF3
 10858                           intcon	equ	0xFF2
 10859                           intcon2	equ	0xFF1
 10860                           intcon3	equ	0xFF0
 10861                           postinc0	equ	0xFEE
 10862                           wreg	equ	0xFE8
 10863                           postdec1	equ	0xFE5
 10864                           fsr1l	equ	0xFE1
 10865                           indf2	equ	0xFDF
 10866                           postinc2	equ	0xFDE
 10867                           postdec2	equ	0xFDD
 10868                           fsr2h	equ	0xFDA
 10869                           fsr2l	equ	0xFD9
 10870                           status	equ	0xFD8
 10871                           
 10872 ;; *************** function _putch *****************
 10873 ;; Defined at:
 10874 ;;		line 30 in file "lcd.c"
 10875 ;; Parameters:    Size  Location     Type
 10876 ;;  data            1    wreg     unsigned char 
 10877 ;; Auto vars:     Size  Location     Type
 10878 ;;  data            1   26[COMRAM] unsigned char 
 10879 ;; Return value:  Size  Location     Type
 10880 ;;                  1    wreg      void 
 10881 ;; Registers used:
 10882 ;;		wreg, status,2, status,0, cstack
 10883 ;; Tracked objects:
 10884 ;;		On entry : 0/0
 10885 ;;		On exit  : 0/0
 10886 ;;		Unchanged: 0/0
 10887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10891 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10892 ;;Total ram usage:        1 bytes
 10893 ;; Hardware stack levels used:    1
 10894 ;; Hardware stack levels required when called:    3
 10895 ;; This function calls:
 10896 ;;		_lcdNibble
 10897 ;; This function is called by:
 10898 ;;		_printf
 10899 ;; This function uses a non-reentrant model
 10900 ;;
 10901                           
 10902                           	psect	text42
 10903  003346                     __ptext42:
 10904                           	opt stack 0
 10905  003346                     _putch:
 10906                           	opt stack 25
 10907                           
 10908                           ;incstack = 0
 10909                           ;putch@data stored from wreg
 10910  003346  6E1B               	movwf	putch@data,c
 10911                           
 10912                           ;lcd.c: 31: LATDbits.LATD2 = 1;
 10913  003348  848C               	bsf	3980,2,c	;volatile
 10914                           
 10915                           ;lcd.c: 32: lcdNibble(data);
 10916  00334A  501B               	movf	putch@data,w,c
 10917  00334C  EC26  F018         	call	_lcdNibble
 10918  003350  0012               	return		;funcret
 10919  003352                     __end_of_putch:
 10920                           	opt stack 0
 10921                           tblptru	equ	0xFF8
 10922                           tblptrh	equ	0xFF7
 10923                           tblptrl	equ	0xFF6
 10924                           tablat	equ	0xFF5
 10925                           prodh	equ	0xFF4
 10926                           prodl	equ	0xFF3
 10927                           intcon	equ	0xFF2
 10928                           intcon2	equ	0xFF1
 10929                           intcon3	equ	0xFF0
 10930                           postinc0	equ	0xFEE
 10931                           wreg	equ	0xFE8
 10932                           postdec1	equ	0xFE5
 10933                           fsr1l	equ	0xFE1
 10934                           indf2	equ	0xFDF
 10935                           postinc2	equ	0xFDE
 10936                           postdec2	equ	0xFDD
 10937                           fsr2h	equ	0xFDA
 10938                           fsr2l	equ	0xFD9
 10939                           status	equ	0xFD8
 10940                           
 10941 ;; *************** function _isdigit *****************
 10942 ;; Defined at:
 10943 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 10944 ;; Parameters:    Size  Location     Type
 10945 ;;  c               1    wreg     unsigned char 
 10946 ;; Auto vars:     Size  Location     Type
 10947 ;;  c               1   26[COMRAM] unsigned char 
 10948 ;; Return value:  Size  Location     Type
 10949 ;;		None               void
 10950 ;; Registers used:
 10951 ;;		wreg, status,2, status,0
 10952 ;; Tracked objects:
 10953 ;;		On entry : 0/0
 10954 ;;		On exit  : 0/0
 10955 ;;		Unchanged: 0/0
 10956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10958 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10959 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10960 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10961 ;;Total ram usage:        3 bytes
 10962 ;; Hardware stack levels used:    1
 10963 ;; Hardware stack levels required when called:    2
 10964 ;; This function calls:
 10965 ;;		Nothing
 10966 ;; This function is called by:
 10967 ;;		_printf
 10968 ;; This function uses a non-reentrant model
 10969 ;;
 10970                           
 10971                           	psect	text43
 10972  0032DA                     __ptext43:
 10973                           	opt stack 0
 10974  0032DA                     _isdigit:
 10975                           	opt stack 26
 10976                           
 10977                           ;incstack = 0
 10978                           ;isdigit@c stored from wreg
 10979  0032DA  6E1B               	movwf	isdigit@c,c
 10980  0032DC  0E00               	movlw	0
 10981  0032DE  6E1A               	movwf	_isdigit$1053,c
 10982  0032E0  0E3A               	movlw	58
 10983  0032E2  601B               	cpfslt	isdigit@c,c
 10984  0032E4  D005               	goto	l5073
 10985  0032E6  0E2F               	movlw	47
 10986  0032E8  641B               	cpfsgt	isdigit@c,c
 10987  0032EA  D002               	goto	l5073
 10988  0032EC  0E01               	movlw	1
 10989  0032EE  6E1A               	movwf	_isdigit$1053,c
 10990  0032F0                     l5073:
 10991  0032F0  C01A  F019         	movff	_isdigit$1053,??_isdigit
 10992  0032F4  3019               	rrcf	??_isdigit,w,c
 10993  0032F6  0012               	return	
 10994  0032F8                     __end_of_isdigit:
 10995                           	opt stack 0
 10996                           tblptru	equ	0xFF8
 10997                           tblptrh	equ	0xFF7
 10998                           tblptrl	equ	0xFF6
 10999                           tablat	equ	0xFF5
 11000                           prodh	equ	0xFF4
 11001                           prodl	equ	0xFF3
 11002                           intcon	equ	0xFF2
 11003                           intcon2	equ	0xFF1
 11004                           intcon3	equ	0xFF0
 11005                           postinc0	equ	0xFEE
 11006                           wreg	equ	0xFE8
 11007                           postdec1	equ	0xFE5
 11008                           fsr1l	equ	0xFE1
 11009                           indf2	equ	0xFDF
 11010                           postinc2	equ	0xFDE
 11011                           postdec2	equ	0xFDD
 11012                           fsr2h	equ	0xFDA
 11013                           fsr2l	equ	0xFD9
 11014                           status	equ	0xFD8
 11015                           
 11016 ;; *************** function ___wmul *****************
 11017 ;; Defined at:
 11018 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11019 ;; Parameters:    Size  Location     Type
 11020 ;;  multiplier      2   24[COMRAM] unsigned int 
 11021 ;;  multiplicand    2   26[COMRAM] unsigned int 
 11022 ;; Auto vars:     Size  Location     Type
 11023 ;;  product         2   28[COMRAM] unsigned int 
 11024 ;; Return value:  Size  Location     Type
 11025 ;;                  2   24[COMRAM] unsigned int 
 11026 ;; Registers used:
 11027 ;;		wreg, status,2, status,0, prodl, prodh
 11028 ;; Tracked objects:
 11029 ;;		On entry : 0/0
 11030 ;;		On exit  : 0/0
 11031 ;;		Unchanged: 0/0
 11032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11033 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11034 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11036 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11037 ;;Total ram usage:        6 bytes
 11038 ;; Hardware stack levels used:    1
 11039 ;; Hardware stack levels required when called:    2
 11040 ;; This function calls:
 11041 ;;		Nothing
 11042 ;; This function is called by:
 11043 ;;		_time_difference
 11044 ;;		_printf
 11045 ;;		_eval_poly
 11046 ;;		_servo_rotate
 11047 ;; This function uses a non-reentrant model
 11048 ;;
 11049                           
 11050                           	psect	text44
 11051  00326A                     __ptext44:
 11052                           	opt stack 0
 11053  00326A                     ___wmul:
 11054                           	opt stack 22
 11055                           
 11056                           ;incstack = 0
 11057  00326A  5019               	movf	___wmul@multiplier,w,c
 11058  00326C  021B               	mulwf	___wmul@multiplicand,c
 11059  00326E  CFF3 F01D          	movff	prodl,___wmul@product
 11060  003272  CFF4 F01E          	movff	prodh,___wmul@product+1
 11061  003276  5019               	movf	___wmul@multiplier,w,c
 11062  003278  021C               	mulwf	___wmul@multiplicand+1,c
 11063  00327A  50F3               	movf	prodl,w,c
 11064  00327C  261E               	addwf	___wmul@product+1,f,c
 11065  00327E  501A               	movf	___wmul@multiplier+1,w,c
 11066  003280  021B               	mulwf	___wmul@multiplicand,c
 11067  003282  50F3               	movf	prodl,w,c
 11068  003284  261E               	addwf	___wmul@product+1,f,c
 11069  003286  C01D  F019         	movff	___wmul@product,?___wmul
 11070  00328A  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
 11071  00328E  0012               	return	
 11072  003290                     __end_of___wmul:
 11073                           	opt stack 0
 11074                           tblptru	equ	0xFF8
 11075                           tblptrh	equ	0xFF7
 11076                           tblptrl	equ	0xFF6
 11077                           tablat	equ	0xFF5
 11078                           prodh	equ	0xFF4
 11079                           prodl	equ	0xFF3
 11080                           intcon	equ	0xFF2
 11081                           intcon2	equ	0xFF1
 11082                           intcon3	equ	0xFF0
 11083                           postinc0	equ	0xFEE
 11084                           wreg	equ	0xFE8
 11085                           postdec1	equ	0xFE5
 11086                           fsr1l	equ	0xFE1
 11087                           indf2	equ	0xFDF
 11088                           postinc2	equ	0xFDE
 11089                           postdec2	equ	0xFDD
 11090                           fsr2h	equ	0xFDA
 11091                           fsr2l	equ	0xFD9
 11092                           status	equ	0xFD8
 11093                           
 11094 ;; *************** function ___lwmod *****************
 11095 ;; Defined at:
 11096 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;  dividend        2   31[COMRAM] unsigned int 
 11099 ;;  divisor         2   33[COMRAM] unsigned int 
 11100 ;; Auto vars:     Size  Location     Type
 11101 ;;  counter         1   35[COMRAM] unsigned char 
 11102 ;; Return value:  Size  Location     Type
 11103 ;;                  2   31[COMRAM] unsigned int 
 11104 ;; Registers used:
 11105 ;;		wreg, status,2, status,0
 11106 ;; Tracked objects:
 11107 ;;		On entry : 0/0
 11108 ;;		On exit  : 0/0
 11109 ;;		Unchanged: 0/0
 11110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11111 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11112 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11114 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11115 ;;Total ram usage:        5 bytes
 11116 ;; Hardware stack levels used:    1
 11117 ;; Hardware stack levels required when called:    2
 11118 ;; This function calls:
 11119 ;;		Nothing
 11120 ;; This function is called by:
 11121 ;;		_printf
 11122 ;; This function uses a non-reentrant model
 11123 ;;
 11124                           
 11125                           	psect	text45
 11126  00312A                     __ptext45:
 11127                           	opt stack 0
 11128  00312A                     ___lwmod:
 11129                           	opt stack 26
 11130                           
 11131                           ;incstack = 0
 11132  00312A  5022               	movf	___lwmod@divisor,w,c
 11133  00312C  1023               	iorwf	___lwmod@divisor+1,w,c
 11134  00312E  B4D8               	btfsc	status,2,c
 11135  003130  D018               	goto	l893
 11136  003132  0E01               	movlw	1
 11137  003134  6E24               	movwf	___lwmod@counter,c
 11138  003136  D004               	goto	l5105
 11139  003138                     l5103:
 11140  003138  90D8               	bcf	status,0,c
 11141  00313A  3622               	rlcf	___lwmod@divisor,f,c
 11142  00313C  3623               	rlcf	___lwmod@divisor+1,f,c
 11143  00313E  2A24               	incf	___lwmod@counter,f,c
 11144  003140                     l5105:
 11145  003140  AE23               	btfss	___lwmod@divisor+1,7,c
 11146  003142  D7FA               	goto	l5103
 11147  003144                     l5107:
 11148  003144  5022               	movf	___lwmod@divisor,w,c
 11149  003146  5C20               	subwf	___lwmod@dividend,w,c
 11150  003148  5023               	movf	___lwmod@divisor+1,w,c
 11151  00314A  5821               	subwfb	___lwmod@dividend+1,w,c
 11152  00314C  A0D8               	btfss	status,0,c
 11153  00314E  D004               	goto	l5111
 11154  003150  5022               	movf	___lwmod@divisor,w,c
 11155  003152  5E20               	subwf	___lwmod@dividend,f,c
 11156  003154  5023               	movf	___lwmod@divisor+1,w,c
 11157  003156  5A21               	subwfb	___lwmod@dividend+1,f,c
 11158  003158                     l5111:
 11159  003158  90D8               	bcf	status,0,c
 11160  00315A  3223               	rrcf	___lwmod@divisor+1,f,c
 11161  00315C  3222               	rrcf	___lwmod@divisor,f,c
 11162  00315E  2E24               	decfsz	___lwmod@counter,f,c
 11163  003160  D7F1               	goto	l5107
 11164  003162                     l893:
 11165  003162  C020  F020         	movff	___lwmod@dividend,?___lwmod
 11166  003166  C021  F021         	movff	___lwmod@dividend+1,?___lwmod+1
 11167  00316A  0012               	return		;funcret
 11168  00316C                     __end_of___lwmod:
 11169                           	opt stack 0
 11170                           tblptru	equ	0xFF8
 11171                           tblptrh	equ	0xFF7
 11172                           tblptrl	equ	0xFF6
 11173                           tablat	equ	0xFF5
 11174                           prodh	equ	0xFF4
 11175                           prodl	equ	0xFF3
 11176                           intcon	equ	0xFF2
 11177                           intcon2	equ	0xFF1
 11178                           intcon3	equ	0xFF0
 11179                           postinc0	equ	0xFEE
 11180                           wreg	equ	0xFE8
 11181                           postdec1	equ	0xFE5
 11182                           fsr1l	equ	0xFE1
 11183                           indf2	equ	0xFDF
 11184                           postinc2	equ	0xFDE
 11185                           postdec2	equ	0xFDD
 11186                           fsr2h	equ	0xFDA
 11187                           fsr2l	equ	0xFD9
 11188                           status	equ	0xFD8
 11189                           
 11190 ;; *************** function ___lwdiv *****************
 11191 ;; Defined at:
 11192 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 11193 ;; Parameters:    Size  Location     Type
 11194 ;;  dividend        2   24[COMRAM] unsigned int 
 11195 ;;  divisor         2   26[COMRAM] unsigned int 
 11196 ;; Auto vars:     Size  Location     Type
 11197 ;;  quotient        2   29[COMRAM] unsigned int 
 11198 ;;  counter         1   28[COMRAM] unsigned char 
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  2   24[COMRAM] unsigned int 
 11201 ;; Registers used:
 11202 ;;		wreg, status,2, status,0
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/0
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11208 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11209 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11211 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11212 ;;Total ram usage:        7 bytes
 11213 ;; Hardware stack levels used:    1
 11214 ;; Hardware stack levels required when called:    2
 11215 ;; This function calls:
 11216 ;;		Nothing
 11217 ;; This function is called by:
 11218 ;;		_printf
 11219 ;; This function uses a non-reentrant model
 11220 ;;
 11221                           
 11222                           	psect	text46
 11223  002FFA                     __ptext46:
 11224                           	opt stack 0
 11225  002FFA                     ___lwdiv:
 11226                           	opt stack 26
 11227                           
 11228                           ;incstack = 0
 11229  002FFA  0E00               	movlw	0
 11230  002FFC  6E1F               	movwf	___lwdiv@quotient+1,c
 11231  002FFE  0E00               	movlw	0
 11232  003000  6E1E               	movwf	___lwdiv@quotient,c
 11233  003002  501B               	movf	___lwdiv@divisor,w,c
 11234  003004  101C               	iorwf	___lwdiv@divisor+1,w,c
 11235  003006  B4D8               	btfsc	status,2,c
 11236  003008  D01C               	goto	l883
 11237  00300A  0E01               	movlw	1
 11238  00300C  6E1D               	movwf	___lwdiv@counter,c
 11239  00300E  D004               	goto	l5085
 11240  003010                     l5083:
 11241  003010  90D8               	bcf	status,0,c
 11242  003012  361B               	rlcf	___lwdiv@divisor,f,c
 11243  003014  361C               	rlcf	___lwdiv@divisor+1,f,c
 11244  003016  2A1D               	incf	___lwdiv@counter,f,c
 11245  003018                     l5085:
 11246  003018  AE1C               	btfss	___lwdiv@divisor+1,7,c
 11247  00301A  D7FA               	goto	l5083
 11248  00301C                     l5087:
 11249  00301C  90D8               	bcf	status,0,c
 11250  00301E  361E               	rlcf	___lwdiv@quotient,f,c
 11251  003020  361F               	rlcf	___lwdiv@quotient+1,f,c
 11252  003022  501B               	movf	___lwdiv@divisor,w,c
 11253  003024  5C19               	subwf	___lwdiv@dividend,w,c
 11254  003026  501C               	movf	___lwdiv@divisor+1,w,c
 11255  003028  581A               	subwfb	___lwdiv@dividend+1,w,c
 11256  00302A  A0D8               	btfss	status,0,c
 11257  00302C  D005               	goto	l5095
 11258  00302E  501B               	movf	___lwdiv@divisor,w,c
 11259  003030  5E19               	subwf	___lwdiv@dividend,f,c
 11260  003032  501C               	movf	___lwdiv@divisor+1,w,c
 11261  003034  5A1A               	subwfb	___lwdiv@dividend+1,f,c
 11262  003036  801E               	bsf	___lwdiv@quotient,0,c
 11263  003038                     l5095:
 11264  003038  90D8               	bcf	status,0,c
 11265  00303A  321C               	rrcf	___lwdiv@divisor+1,f,c
 11266  00303C  321B               	rrcf	___lwdiv@divisor,f,c
 11267  00303E  2E1D               	decfsz	___lwdiv@counter,f,c
 11268  003040  D7ED               	goto	l5087
 11269  003042                     l883:
 11270  003042  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
 11271  003046  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11272  00304A  0012               	return		;funcret
 11273  00304C                     __end_of___lwdiv:
 11274                           	opt stack 0
 11275                           tblptru	equ	0xFF8
 11276                           tblptrh	equ	0xFF7
 11277                           tblptrl	equ	0xFF6
 11278                           tablat	equ	0xFF5
 11279                           prodh	equ	0xFF4
 11280                           prodl	equ	0xFF3
 11281                           intcon	equ	0xFF2
 11282                           intcon2	equ	0xFF1
 11283                           intcon3	equ	0xFF0
 11284                           postinc0	equ	0xFEE
 11285                           wreg	equ	0xFE8
 11286                           postdec1	equ	0xFE5
 11287                           fsr1l	equ	0xFE1
 11288                           indf2	equ	0xFDF
 11289                           postinc2	equ	0xFDE
 11290                           postdec2	equ	0xFDD
 11291                           fsr2h	equ	0xFDA
 11292                           fsr2l	equ	0xFD9
 11293                           status	equ	0xFD8
 11294                           
 11295 ;; *************** function _lcdInst *****************
 11296 ;; Defined at:
 11297 ;;		line 25 in file "lcd.c"
 11298 ;; Parameters:    Size  Location     Type
 11299 ;;  data            1    wreg     unsigned char 
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;  data            1   26[COMRAM] unsigned char 
 11302 ;; Return value:  Size  Location     Type
 11303 ;;                  1    wreg      void 
 11304 ;; Registers used:
 11305 ;;		wreg, status,2, status,0, cstack
 11306 ;; Tracked objects:
 11307 ;;		On entry : 0/0
 11308 ;;		On exit  : 0/0
 11309 ;;		Unchanged: 0/0
 11310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11314 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11315 ;;Total ram usage:        1 bytes
 11316 ;; Hardware stack levels used:    1
 11317 ;; Hardware stack levels required when called:    3
 11318 ;; This function calls:
 11319 ;;		_lcdNibble
 11320 ;; This function is called by:
 11321 ;;		_main
 11322 ;;		_init_operation
 11323 ;;		_runtime
 11324 ;;		_bottle_count
 11325 ;;		_operation_end
 11326 ;;		_date_time
 11327 ;;		_initLCD
 11328 ;; This function uses a non-reentrant model
 11329 ;;
 11330                           
 11331                           	psect	text47
 11332  003352                     __ptext47:
 11333                           	opt stack 0
 11334  003352                     _lcdInst:
 11335                           	opt stack 26
 11336                           
 11337                           ;incstack = 0
 11338                           ;lcdInst@data stored from wreg
 11339  003352  6E1B               	movwf	lcdInst@data,c
 11340                           
 11341                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 11342  003354  948C               	bcf	3980,2,c	;volatile
 11343                           
 11344                           ;lcd.c: 27: lcdNibble(data);
 11345  003356  501B               	movf	lcdInst@data,w,c
 11346  003358  EC26  F018         	call	_lcdNibble
 11347  00335C  0012               	return		;funcret
 11348  00335E                     __end_of_lcdInst:
 11349                           	opt stack 0
 11350                           tblptru	equ	0xFF8
 11351                           tblptrh	equ	0xFF7
 11352                           tblptrl	equ	0xFF6
 11353                           tablat	equ	0xFF5
 11354                           prodh	equ	0xFF4
 11355                           prodl	equ	0xFF3
 11356                           intcon	equ	0xFF2
 11357                           intcon2	equ	0xFF1
 11358                           intcon3	equ	0xFF0
 11359                           postinc0	equ	0xFEE
 11360                           wreg	equ	0xFE8
 11361                           postdec1	equ	0xFE5
 11362                           fsr1l	equ	0xFE1
 11363                           indf2	equ	0xFDF
 11364                           postinc2	equ	0xFDE
 11365                           postdec2	equ	0xFDD
 11366                           fsr2h	equ	0xFDA
 11367                           fsr2l	equ	0xFD9
 11368                           status	equ	0xFD8
 11369                           
 11370 ;; *************** function _lcdNibble *****************
 11371 ;; Defined at:
 11372 ;;		line 35 in file "lcd.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;  data            1    wreg     unsigned char 
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;  data            1   25[COMRAM] unsigned char 
 11377 ;;  temp            1   24[COMRAM] unsigned char 
 11378 ;; Return value:  Size  Location     Type
 11379 ;;                  1    wreg      void 
 11380 ;; Registers used:
 11381 ;;		wreg, status,2, status,0
 11382 ;; Tracked objects:
 11383 ;;		On entry : 0/0
 11384 ;;		On exit  : 0/0
 11385 ;;		Unchanged: 0/0
 11386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11390 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11391 ;;Total ram usage:        2 bytes
 11392 ;; Hardware stack levels used:    1
 11393 ;; Hardware stack levels required when called:    2
 11394 ;; This function calls:
 11395 ;;		Nothing
 11396 ;; This function is called by:
 11397 ;;		_lcdInst
 11398 ;;		_putch
 11399 ;; This function uses a non-reentrant model
 11400 ;;
 11401                           
 11402                           	psect	text48
 11403  00304C                     __ptext48:
 11404                           	opt stack 0
 11405  00304C                     _lcdNibble:
 11406                           	opt stack 25
 11407                           
 11408                           ;incstack = 0
 11409                           ;lcdNibble@data stored from wreg
 11410  00304C  6E1A               	movwf	lcdNibble@data,c
 11411                           
 11412                           ;lcd.c: 37: char temp = data & 0xF0;
 11413  00304E  501A               	movf	lcdNibble@data,w,c
 11414  003050  0BF0               	andlw	240
 11415  003052  6E19               	movwf	lcdNibble@temp,c
 11416                           
 11417                           ;lcd.c: 38: LATD = LATD & 0x0F;
 11418  003054  508C               	movf	3980,w,c	;volatile
 11419  003056  0B0F               	andlw	15
 11420  003058  6E8C               	movwf	3980,c	;volatile
 11421                           
 11422                           ;lcd.c: 39: LATD = temp | LATD;
 11423  00305A  5019               	movf	lcdNibble@temp,w,c
 11424  00305C  108C               	iorwf	3980,w,c	;volatile
 11425  00305E  6E8C               	movwf	3980,c	;volatile
 11426                           
 11427                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 11428  003060  968C               	bcf	3980,3,c	;volatile
 11429                           
 11430                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
 11431  003062  0E19               	movlw	25
 11432  003064                     u5797:
 11433  003064  2EE8               	decfsz	wreg,f,c
 11434  003066  D7FE               	bra	u5797
 11435                           
 11436                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 11437  003068  868C               	bsf	3980,3,c	;volatile
 11438                           
 11439                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
 11440  00306A  0E19               	movlw	25
 11441  00306C                     u5807:
 11442  00306C  2EE8               	decfsz	wreg,f,c
 11443  00306E  D7FE               	bra	u5807
 11444                           
 11445                           ;lcd.c: 46: data = data << 4;
 11446  003070  381A               	swapf	lcdNibble@data,w,c
 11447  003072  0BF0               	andlw	240
 11448  003074  6E1A               	movwf	lcdNibble@data,c
 11449                           
 11450                           ;lcd.c: 48: temp = data & 0xF0;
 11451  003076  501A               	movf	lcdNibble@data,w,c
 11452  003078  0BF0               	andlw	240
 11453  00307A  6E19               	movwf	lcdNibble@temp,c
 11454                           
 11455                           ;lcd.c: 49: LATD = LATD & 0x0F;
 11456  00307C  508C               	movf	3980,w,c	;volatile
 11457  00307E  0B0F               	andlw	15
 11458  003080  6E8C               	movwf	3980,c	;volatile
 11459                           
 11460                           ;lcd.c: 50: LATD = temp | LATD;
 11461  003082  5019               	movf	lcdNibble@temp,w,c
 11462  003084  108C               	iorwf	3980,w,c	;volatile
 11463  003086  6E8C               	movwf	3980,c	;volatile
 11464                           
 11465                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 11466  003088  968C               	bcf	3980,3,c	;volatile
 11467                           
 11468                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
 11469  00308A  0E19               	movlw	25
 11470  00308C                     u5817:
 11471  00308C  2EE8               	decfsz	wreg,f,c
 11472  00308E  D7FE               	bra	u5817
 11473                           
 11474                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 11475  003090  868C               	bsf	3980,3,c	;volatile
 11476                           
 11477                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
 11478  003092  0E19               	movlw	25
 11479  003094                     u5827:
 11480  003094  2EE8               	decfsz	wreg,f,c
 11481  003096  D7FE               	bra	u5827
 11482  003098  0012               	return		;funcret
 11483  00309A                     __end_of_lcdNibble:
 11484                           	opt stack 0
 11485                           tblptru	equ	0xFF8
 11486                           tblptrh	equ	0xFF7
 11487                           tblptrl	equ	0xFF6
 11488                           tablat	equ	0xFF5
 11489                           prodh	equ	0xFF4
 11490                           prodl	equ	0xFF3
 11491                           intcon	equ	0xFF2
 11492                           intcon2	equ	0xFF1
 11493                           intcon3	equ	0xFF0
 11494                           postinc0	equ	0xFEE
 11495                           wreg	equ	0xFE8
 11496                           postdec1	equ	0xFE5
 11497                           fsr1l	equ	0xFE1
 11498                           indf2	equ	0xFDF
 11499                           postinc2	equ	0xFDE
 11500                           postdec2	equ	0xFDD
 11501                           fsr2h	equ	0xFDA
 11502                           fsr2l	equ	0xFD9
 11503                           status	equ	0xFD8
 11504                           
 11505 ;; *************** function _I2C_Master_Init *****************
 11506 ;; Defined at:
 11507 ;;		line 13 in file "I2C.c"
 11508 ;; Parameters:    Size  Location     Type
 11509 ;;  c               4   37[COMRAM] const unsigned long 
 11510 ;; Auto vars:     Size  Location     Type
 11511 ;;		None
 11512 ;; Return value:  Size  Location     Type
 11513 ;;                  1    wreg      void 
 11514 ;; Registers used:
 11515 ;;		wreg, status,2, status,0, cstack
 11516 ;; Tracked objects:
 11517 ;;		On entry : 0/0
 11518 ;;		On exit  : 0/0
 11519 ;;		Unchanged: 0/0
 11520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11521 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11523 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11524 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11525 ;;Total ram usage:        8 bytes
 11526 ;; Hardware stack levels used:    1
 11527 ;; Hardware stack levels required when called:    3
 11528 ;; This function calls:
 11529 ;;		___lldiv
 11530 ;; This function is called by:
 11531 ;;		_main
 11532 ;; This function uses a non-reentrant model
 11533 ;;
 11534                           
 11535                           	psect	text49
 11536  002FA0                     __ptext49:
 11537                           	opt stack 0
 11538  002FA0                     _I2C_Master_Init:
 11539                           	opt stack 27
 11540                           
 11541                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 11542                           
 11543                           ;incstack = 0
 11544  002FA0  0E00               	movlw	0
 11545  002FA2  6EC7               	movwf	4039,c	;volatile
 11546                           
 11547                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 11548  002FA4  0E28               	movlw	40
 11549  002FA6  6EC6               	movwf	4038,c	;volatile
 11550                           
 11551                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 11552  002FA8  0E00               	movlw	0
 11553  002FAA  6EC5               	movwf	4037,c	;volatile
 11554                           
 11555                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
 11556  002FAC  0E80               	movlw	128
 11557  002FAE  6E19               	movwf	___lldiv@dividend,c
 11558  002FB0  0E96               	movlw	150
 11559  002FB2  6E1A               	movwf	___lldiv@dividend+1,c
 11560  002FB4  0E98               	movlw	152
 11561  002FB6  6E1B               	movwf	___lldiv@dividend+2,c
 11562  002FB8  0E00               	movlw	0
 11563  002FBA  6E1C               	movwf	___lldiv@dividend+3,c
 11564  002FBC  C026  F02A         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 11565  002FC0  C027  F02B         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 11566  002FC4  C028  F02C         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 11567  002FC8  C029  F02D         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 11568  002FCC  0E02               	movlw	2
 11569  002FCE                     u3525:
 11570  002FCE  90D8               	bcf	status,0,c
 11571  002FD0  362A               	rlcf	??_I2C_Master_Init,f,c
 11572  002FD2  362B               	rlcf	??_I2C_Master_Init+1,f,c
 11573  002FD4  362C               	rlcf	??_I2C_Master_Init+2,f,c
 11574  002FD6  362D               	rlcf	??_I2C_Master_Init+3,f,c
 11575  002FD8  2EE8               	decfsz	wreg,f,c
 11576  002FDA  D7F9               	goto	u3525
 11577  002FDC  C02A  F01D         	movff	??_I2C_Master_Init,___lldiv@divisor
 11578  002FE0  C02B  F01E         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 11579  002FE4  C02C  F01F         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 11580  002FE8  C02D  F020         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 11581  002FEC  ECEF  F016         	call	___lldiv	;wreg free
 11582  002FF0  0419               	decf	?___lldiv,w,c
 11583  002FF2  6EC8               	movwf	4040,c	;volatile
 11584                           
 11585                           ;I2C.c: 20: TRISC3 = 1;
 11586  002FF4  8694               	bsf	3988,3,c	;volatile
 11587                           
 11588                           ;I2C.c: 21: TRISC4 = 1;
 11589  002FF6  8894               	bsf	3988,4,c	;volatile
 11590  002FF8  0012               	return		;funcret
 11591  002FFA                     __end_of_I2C_Master_Init:
 11592                           	opt stack 0
 11593                           tblptru	equ	0xFF8
 11594                           tblptrh	equ	0xFF7
 11595                           tblptrl	equ	0xFF6
 11596                           tablat	equ	0xFF5
 11597                           prodh	equ	0xFF4
 11598                           prodl	equ	0xFF3
 11599                           intcon	equ	0xFF2
 11600                           intcon2	equ	0xFF1
 11601                           intcon3	equ	0xFF0
 11602                           postinc0	equ	0xFEE
 11603                           wreg	equ	0xFE8
 11604                           postdec1	equ	0xFE5
 11605                           fsr1l	equ	0xFE1
 11606                           indf2	equ	0xFDF
 11607                           postinc2	equ	0xFDE
 11608                           postdec2	equ	0xFDD
 11609                           fsr2h	equ	0xFDA
 11610                           fsr2l	equ	0xFD9
 11611                           status	equ	0xFD8
 11612                           
 11613 ;; *************** function ___lldiv *****************
 11614 ;; Defined at:
 11615 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 11616 ;; Parameters:    Size  Location     Type
 11617 ;;  dividend        4   24[COMRAM] unsigned long 
 11618 ;;  divisor         4   28[COMRAM] unsigned long 
 11619 ;; Auto vars:     Size  Location     Type
 11620 ;;  quotient        4   32[COMRAM] unsigned long 
 11621 ;;  counter         1   36[COMRAM] unsigned char 
 11622 ;; Return value:  Size  Location     Type
 11623 ;;                  4   24[COMRAM] unsigned long 
 11624 ;; Registers used:
 11625 ;;		wreg, status,2, status,0
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11631 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11632 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11634 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11635 ;;Total ram usage:       13 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; Hardware stack levels required when called:    2
 11638 ;; This function calls:
 11639 ;;		Nothing
 11640 ;; This function is called by:
 11641 ;;		_I2C_Master_Init
 11642 ;; This function uses a non-reentrant model
 11643 ;;
 11644                           
 11645                           	psect	text50
 11646  002DDE                     __ptext50:
 11647                           	opt stack 0
 11648  002DDE                     ___lldiv:
 11649                           	opt stack 27
 11650                           
 11651                           ;incstack = 0
 11652  002DDE  0E00               	movlw	0
 11653  002DE0  6E21               	movwf	___lldiv@quotient,c
 11654  002DE2  0E00               	movlw	0
 11655  002DE4  6E22               	movwf	___lldiv@quotient+1,c
 11656  002DE6  0E00               	movlw	0
 11657  002DE8  6E23               	movwf	___lldiv@quotient+2,c
 11658  002DEA  0E00               	movlw	0
 11659  002DEC  6E24               	movwf	___lldiv@quotient+3,c
 11660  002DEE  501D               	movf	___lldiv@divisor,w,c
 11661  002DF0  101E               	iorwf	___lldiv@divisor+1,w,c
 11662  002DF2  101F               	iorwf	___lldiv@divisor+2,w,c
 11663  002DF4  1020               	iorwf	___lldiv@divisor+3,w,c
 11664  002DF6  B4D8               	btfsc	status,2,c
 11665  002DF8  D02A               	goto	l830
 11666  002DFA  0E01               	movlw	1
 11667  002DFC  6E25               	movwf	___lldiv@counter,c
 11668  002DFE  D006               	goto	l3911
 11669  002E00                     l3909:
 11670  002E00  90D8               	bcf	status,0,c
 11671  002E02  361D               	rlcf	___lldiv@divisor,f,c
 11672  002E04  361E               	rlcf	___lldiv@divisor+1,f,c
 11673  002E06  361F               	rlcf	___lldiv@divisor+2,f,c
 11674  002E08  3620               	rlcf	___lldiv@divisor+3,f,c
 11675  002E0A  2A25               	incf	___lldiv@counter,f,c
 11676  002E0C                     l3911:
 11677  002E0C  AE20               	btfss	___lldiv@divisor+3,7,c
 11678  002E0E  D7F8               	goto	l3909
 11679  002E10                     l3913:
 11680  002E10  90D8               	bcf	status,0,c
 11681  002E12  3621               	rlcf	___lldiv@quotient,f,c
 11682  002E14  3622               	rlcf	___lldiv@quotient+1,f,c
 11683  002E16  3623               	rlcf	___lldiv@quotient+2,f,c
 11684  002E18  3624               	rlcf	___lldiv@quotient+3,f,c
 11685  002E1A  501D               	movf	___lldiv@divisor,w,c
 11686  002E1C  5C19               	subwf	___lldiv@dividend,w,c
 11687  002E1E  501E               	movf	___lldiv@divisor+1,w,c
 11688  002E20  581A               	subwfb	___lldiv@dividend+1,w,c
 11689  002E22  501F               	movf	___lldiv@divisor+2,w,c
 11690  002E24  581B               	subwfb	___lldiv@dividend+2,w,c
 11691  002E26  5020               	movf	___lldiv@divisor+3,w,c
 11692  002E28  581C               	subwfb	___lldiv@dividend+3,w,c
 11693  002E2A  A0D8               	btfss	status,0,c
 11694  002E2C  D009               	goto	l3921
 11695  002E2E  501D               	movf	___lldiv@divisor,w,c
 11696  002E30  5E19               	subwf	___lldiv@dividend,f,c
 11697  002E32  501E               	movf	___lldiv@divisor+1,w,c
 11698  002E34  5A1A               	subwfb	___lldiv@dividend+1,f,c
 11699  002E36  501F               	movf	___lldiv@divisor+2,w,c
 11700  002E38  5A1B               	subwfb	___lldiv@dividend+2,f,c
 11701  002E3A  5020               	movf	___lldiv@divisor+3,w,c
 11702  002E3C  5A1C               	subwfb	___lldiv@dividend+3,f,c
 11703  002E3E  8021               	bsf	___lldiv@quotient,0,c
 11704  002E40                     l3921:
 11705  002E40  90D8               	bcf	status,0,c
 11706  002E42  3220               	rrcf	___lldiv@divisor+3,f,c
 11707  002E44  321F               	rrcf	___lldiv@divisor+2,f,c
 11708  002E46  321E               	rrcf	___lldiv@divisor+1,f,c
 11709  002E48  321D               	rrcf	___lldiv@divisor,f,c
 11710  002E4A  2E25               	decfsz	___lldiv@counter,f,c
 11711  002E4C  D7E1               	goto	l3913
 11712  002E4E                     l830:
 11713  002E4E  C021  F019         	movff	___lldiv@quotient,?___lldiv
 11714  002E52  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
 11715  002E56  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
 11716  002E5A  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
 11717  002E5E  0012               	return		;funcret
 11718  002E60                     __end_of___lldiv:
 11719                           	opt stack 0
 11720                           tblptru	equ	0xFF8
 11721                           tblptrh	equ	0xFF7
 11722                           tblptrl	equ	0xFF6
 11723                           tablat	equ	0xFF5
 11724                           prodh	equ	0xFF4
 11725                           prodl	equ	0xFF3
 11726                           intcon	equ	0xFF2
 11727                           intcon2	equ	0xFF1
 11728                           intcon3	equ	0xFF0
 11729                           postinc0	equ	0xFEE
 11730                           wreg	equ	0xFE8
 11731                           postdec1	equ	0xFE5
 11732                           fsr1l	equ	0xFE1
 11733                           indf2	equ	0xFDF
 11734                           postinc2	equ	0xFDE
 11735                           postdec2	equ	0xFDD
 11736                           fsr2h	equ	0xFDA
 11737                           fsr2l	equ	0xFD9
 11738                           status	equ	0xFD8
 11739                           
 11740 ;; *************** function _keypressed *****************
 11741 ;; Defined at:
 11742 ;;		line 191 in file "main.c"
 11743 ;; Parameters:    Size  Location     Type
 11744 ;;  mem             3    5[COMRAM] PTR unsigned char 
 11745 ;; Auto vars:     Size  Location     Type
 11746 ;;		None
 11747 ;; Return value:  Size  Location     Type
 11748 ;;                  1    wreg      void 
 11749 ;; Registers used:
 11750 ;;		wreg, status,2, status,0, cstack
 11751 ;; Tracked objects:
 11752 ;;		On entry : 0/0
 11753 ;;		On exit  : 0/0
 11754 ;;		Unchanged: 0/0
 11755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11756 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11758 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11759 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;Total ram usage:       19 bytes
 11761 ;; Hardware stack levels used:    1
 11762 ;; Hardware stack levels required when called:    1
 11763 ;; This function calls:
 11764 ;;		i2_eeprom_readbyte
 11765 ;;		i2_eeprom_writebyte
 11766 ;; This function is called by:
 11767 ;;		Interrupt level 2
 11768 ;; This function uses a non-reentrant model
 11769 ;;
 11770                           
 11771                           	psect	intcode
 11772  000008                     __pintcode:
 11773                           	opt stack 0
 11774  000008                     _keypressed:
 11775                           	opt stack 21
 11776                           
 11777                           ;incstack = 0
 11778  000008  8267               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11779  00000A  EDFF  F00B         	call	int_func,f	;refresh shadow registers
 11780                           tblptru	equ	0xFF8
 11781                           tblptrh	equ	0xFF7
 11782                           tblptrl	equ	0xFF6
 11783                           tablat	equ	0xFF5
 11784                           prodh	equ	0xFF4
 11785                           prodl	equ	0xFF3
 11786                           intcon	equ	0xFF2
 11787                           intcon2	equ	0xFF1
 11788                           intcon3	equ	0xFF0
 11789                           postinc0	equ	0xFEE
 11790                           wreg	equ	0xFE8
 11791                           postdec1	equ	0xFE5
 11792                           fsr1l	equ	0xFE1
 11793                           indf2	equ	0xFDF
 11794                           postinc2	equ	0xFDE
 11795                           postdec2	equ	0xFDD
 11796                           fsr2h	equ	0xFDA
 11797                           fsr2l	equ	0xFD9
 11798                           status	equ	0xFD8
 11799                           
 11800                           	psect	intcode_body
 11801  0017FE                     __pintcode_body:
 11802                           	opt stack 21
 11803  0017FE                     int_func:
 11804                           	opt stack 21
 11805  0017FE  0006               	pop		; remove dummy address from shadow register refresh
 11806  001800  CFFA F00B          	movff	pclath,??_keypressed+2
 11807  001804  CFFB F00C          	movff	pclatu,??_keypressed+3
 11808  001808  CFE9 F00D          	movff	fsr0l,??_keypressed+4
 11809  00180C  CFEA F00E          	movff	fsr0h,??_keypressed+5
 11810  001810  CFE1 F00F          	movff	fsr1l,??_keypressed+6
 11811  001814  CFE2 F010          	movff	fsr1h,??_keypressed+7
 11812  001818  CFD9 F011          	movff	fsr2l,??_keypressed+8
 11813  00181C  CFDA F012          	movff	fsr2h,??_keypressed+9
 11814  001820  CFF3 F013          	movff	prodl,??_keypressed+10
 11815  001824  CFF4 F014          	movff	prodh,??_keypressed+11
 11816  001828  CFF6 F015          	movff	tblptrl,??_keypressed+12
 11817  00182C  CFF7 F016          	movff	tblptrh,??_keypressed+13
 11818  001830  CFF8 F017          	movff	tblptru,??_keypressed+14
 11819  001834  CFF5 F018          	movff	tablat,??_keypressed+15
 11820                           
 11821                           ;main.c: 192: if(INT1IF){
 11822  001838  B0F0               	btfsc	intcon3,0,c	;volatile
 11823  00183A  D07D               	goto	i2l4391
 11824  00183C  D0AA               	goto	i2l130
 11825  00183E                     i2l4359:
 11826                           
 11827                           ;main.c: 195: curr_state = OPERATION_END;
 11828  00183E  0E02               	movlw	2
 11829  001840  D003               	goto	L5
 11830  001842                     i2l4361:
 11831                           
 11832                           ;main.c: 199: curr_state = OPERATION;
 11833  001842  0E01               	movlw	1
 11834  001844  D001               	goto	L5
 11835  001846                     i2l4363:
 11836                           
 11837                           ;main.c: 203: curr_state = RUNTIME;
 11838  001846  0E05               	movlw	5
 11839  001848                     L5:
 11840  001848  0101               	movlb	1	; () banked
 11841  00184A  6F55               	movwf	_curr_state& (0+255),b
 11842                           
 11843                           ;main.c: 204: bot_type = O;
 11844  00184C  0E05               	movlw	5
 11845  00184E  D00F               	goto	L11
 11846  001850                     i2l4365:
 11847                           
 11848                           ;main.c: 207: curr_state = BOTTLECOUNT;
 11849  001850  0E04               	movlw	4
 11850  001852  0101               	movlb	1	; () banked
 11851  001854  6F55               	movwf	_curr_state& (0+255),b
 11852                           
 11853                           ;main.c: 208: bot_type = TOTAL;
 11854  001856  0E00               	movlw	0
 11855  001858  D00A               	goto	L11
 11856  00185A                     i2l4367:
 11857                           
 11858                           ;main.c: 211: bot_type = A;
 11859  00185A  0E01               	movlw	1
 11860  00185C  D008               	goto	L11
 11861  00185E                     i2l4369:
 11862                           
 11863                           ;main.c: 214: bot_type = B;
 11864  00185E  0E02               	movlw	2
 11865  001860  D006               	goto	L11
 11866  001862                     i2l4371:
 11867                           
 11868                           ;main.c: 217: bot_type = C;
 11869  001862  0E03               	movlw	3
 11870  001864  D004               	goto	L11
 11871  001866                     i2l4373:
 11872                           
 11873                           ;main.c: 220: bot_type = D;
 11874  001866  0E04               	movlw	4
 11875  001868  D002               	goto	L11
 11876  00186A                     i2l4375:
 11877                           
 11878                           ;main.c: 223: curr_state = DATETIME;
 11879  00186A  0E03               	movlw	3
 11880  00186C  D7ED               	goto	L5
 11881  00186E                     L11:
 11882  00186E  0100               	movlb	0	; () banked
 11883  001870  6FFB               	movwf	_bot_type& (0+255),b
 11884                           
 11885                           ;main.c: 225: break;
 11886  001872  D08F               	goto	i2l130
 11887  001874                     i2l4377:
 11888                           
 11889                           ;main.c: 227: curr_state = SAVE;
 11890  001874  0E06               	movlw	6
 11891  001876  D7E8               	goto	L5
 11892  001878                     i2l4379:
 11893                           
 11894                           ;main.c: 231: if (eeprom_readbyte(20) > 0){
 11895  001878  0E00               	movlw	0
 11896  00187A  6E02               	movwf	i2eeprom_readbyte@address+1,c
 11897  00187C  0E14               	movlw	20
 11898  00187E  6E01               	movwf	i2eeprom_readbyte@address,c
 11899  001880  EC87  F019         	call	i2_eeprom_readbyte	;wreg free
 11900  001884  0900               	iorlw	0
 11901  001886  B4D8               	btfsc	status,2,c
 11902  001888  D052               	goto	i2l4383
 11903                           
 11904                           ;main.c: 232: eeprom_writebyte((eeprom_readbyte(20) + 1), 0);
 11905  00188A  0E00               	movlw	0
 11906  00188C  6E02               	movwf	i2eeprom_readbyte@address+1,c
 11907  00188E  0E14               	movlw	20
 11908  001890  6E01               	movwf	i2eeprom_readbyte@address,c
 11909  001892  EC87  F019         	call	i2_eeprom_readbyte	;wreg free
 11910  001896  6E09               	movwf	??_keypressed& (0+255),c
 11911  001898  0E01               	movlw	1
 11912  00189A  2409               	addwf	??_keypressed,w,c
 11913  00189C  6E03               	movwf	i2eeprom_writebyte@address,c
 11914  00189E  6A04               	clrf	i2eeprom_writebyte@address+1,c
 11915  0018A0  0E00               	movlw	0
 11916  0018A2  2204               	addwfc	i2eeprom_writebyte@address+1,f,c
 11917  0018A4  0E00               	movlw	0
 11918  0018A6  6E05               	movwf	i2eeprom_writebyte@data,c
 11919  0018A8  EC48  F019         	call	i2_eeprom_writebyte	;wreg free
 11920                           
 11921                           ;main.c: 233: eeprom_writebyte((eeprom_readbyte(20) + 2), 0);
 11922  0018AC  0E00               	movlw	0
 11923  0018AE  6E02               	movwf	i2eeprom_readbyte@address+1,c
 11924  0018B0  0E14               	movlw	20
 11925  0018B2  6E01               	movwf	i2eeprom_readbyte@address,c
 11926  0018B4  EC87  F019         	call	i2_eeprom_readbyte	;wreg free
 11927  0018B8  6E09               	movwf	??_keypressed& (0+255),c
 11928  0018BA  0E02               	movlw	2
 11929  0018BC  2409               	addwf	??_keypressed,w,c
 11930  0018BE  6E03               	movwf	i2eeprom_writebyte@address,c
 11931  0018C0  6A04               	clrf	i2eeprom_writebyte@address+1,c
 11932  0018C2  0E00               	movlw	0
 11933  0018C4  2204               	addwfc	i2eeprom_writebyte@address+1,f,c
 11934  0018C6  0E00               	movlw	0
 11935  0018C8  6E05               	movwf	i2eeprom_writebyte@data,c
 11936  0018CA  EC48  F019         	call	i2_eeprom_writebyte	;wreg free
 11937                           
 11938                           ;main.c: 234: eeprom_writebyte((eeprom_readbyte(20) + 19), 0);
 11939  0018CE  0E00               	movlw	0
 11940  0018D0  6E02               	movwf	i2eeprom_readbyte@address+1,c
 11941  0018D2  0E14               	movlw	20
 11942  0018D4  6E01               	movwf	i2eeprom_readbyte@address,c
 11943  0018D6  EC87  F019         	call	i2_eeprom_readbyte	;wreg free
 11944  0018DA  6E09               	movwf	??_keypressed& (0+255),c
 11945  0018DC  0E13               	movlw	19
 11946  0018DE  2409               	addwf	??_keypressed,w,c
 11947  0018E0  6E03               	movwf	i2eeprom_writebyte@address,c
 11948  0018E2  6A04               	clrf	i2eeprom_writebyte@address+1,c
 11949  0018E4  0E00               	movlw	0
 11950  0018E6  2204               	addwfc	i2eeprom_writebyte@address+1,f,c
 11951  0018E8  0E00               	movlw	0
 11952  0018EA  6E05               	movwf	i2eeprom_writebyte@data,c
 11953  0018EC  EC48  F019         	call	i2_eeprom_writebyte	;wreg free
 11954                           
 11955                           ;main.c: 235: eeprom_writebyte((eeprom_readbyte(20) + 20), 0);
 11956  0018F0  0E00               	movlw	0
 11957  0018F2  6E02               	movwf	i2eeprom_readbyte@address+1,c
 11958  0018F4  0E14               	movlw	20
 11959  0018F6  6E01               	movwf	i2eeprom_readbyte@address,c
 11960  0018F8  EC87  F019         	call	i2_eeprom_readbyte	;wreg free
 11961  0018FC  6E09               	movwf	??_keypressed& (0+255),c
 11962  0018FE  0E14               	movlw	20
 11963  001900  2409               	addwf	??_keypressed,w,c
 11964  001902  6E03               	movwf	i2eeprom_writebyte@address,c
 11965  001904  6A04               	clrf	i2eeprom_writebyte@address+1,c
 11966  001906  0E00               	movlw	0
 11967  001908  2204               	addwfc	i2eeprom_writebyte@address+1,f,c
 11968  00190A  0E00               	movlw	0
 11969  00190C  6E05               	movwf	i2eeprom_writebyte@data,c
 11970  00190E  EC48  F019         	call	i2_eeprom_writebyte	;wreg free
 11971                           
 11972                           ;main.c: 236: eeprom_writebyte(20, (eeprom_readbyte(20) - 4));
 11973  001912  0E00               	movlw	0
 11974  001914  6E04               	movwf	i2eeprom_writebyte@address+1,c
 11975  001916  0E14               	movlw	20
 11976  001918  6E03               	movwf	i2eeprom_writebyte@address,c
 11977  00191A  0E00               	movlw	0
 11978  00191C  6E02               	movwf	i2eeprom_readbyte@address+1,c
 11979  00191E  0E14               	movlw	20
 11980  001920  6E01               	movwf	i2eeprom_readbyte@address,c
 11981  001922  EC87  F019         	call	i2_eeprom_readbyte	;wreg free
 11982  001926  0FFC               	addlw	252
 11983  001928  6E05               	movwf	i2eeprom_writebyte@data,c
 11984  00192A  EC48  F019         	call	i2_eeprom_writebyte	;wreg free
 11985  00192E                     i2l4383:
 11986                           
 11987                           ;main.c: 237: }
 11988                           ;main.c: 238: curr_state = DELETE;
 11989  00192E  0E07               	movlw	7
 11990  001930  D78B               	goto	L5
 11991  001932                     i2l4387:
 11992                           
 11993                           ;main.c: 242: curr_state = MEMORY;
 11994  001932  0E08               	movlw	8
 11995  001934  D789               	goto	L5
 11996  001936                     i2l4391:
 11997  001936  3881               	swapf	3969,w,c	;volatile
 11998  001938  0B0F               	andlw	15
 11999  00193A  0B0F               	andlw	15
 12000  00193C  6E09               	movwf	??_keypressed& (0+255),c
 12001  00193E  6A0A               	clrf	(??_keypressed+1)& (0+255),c
 12002                           
 12003                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12004                           ; Switch size 1, requested type "space"
 12005                           ; Number of cases is 1, Range of values is 0 to 0
 12006                           ; switch strategies available:
 12007                           ; Name         Instructions Cycles
 12008                           ; simple_byte            4     3 (average)
 12009                           ;	Chosen strategy is simple_byte
 12010  001940  500A               	movf	??_keypressed+1,w,c
 12011  001942  0A00               	xorlw	0	; case 0
 12012  001944  A4D8               	btfss	status,2,c
 12013  001946  D025               	goto	i2l130
 12014                           
 12015                           ; Switch size 1, requested type "space"
 12016                           ; Number of cases is 12, Range of values is 0 to 15
 12017                           ; switch strategies available:
 12018                           ; Name         Instructions Cycles
 12019                           ; simple_byte           37    19 (average)
 12020                           ;	Chosen strategy is simple_byte
 12021  001948  5009               	movf	??_keypressed,w,c
 12022  00194A  0A00               	xorlw	0	; case 0
 12023  00194C  B4D8               	btfsc	status,2,c
 12024  00194E  D779               	goto	i2l4361
 12025  001950  0A01               	xorlw	1	; case 1
 12026  001952  B4D8               	btfsc	status,2,c
 12027  001954  D778               	goto	i2l4363
 12028  001956  0A03               	xorlw	3	; case 2
 12029  001958  B4D8               	btfsc	status,2,c
 12030  00195A  D77A               	goto	i2l4365
 12031  00195C  0A01               	xorlw	1	; case 3
 12032  00195E  B4D8               	btfsc	status,2,c
 12033  001960  D77C               	goto	i2l4367
 12034  001962  0A07               	xorlw	7	; case 4
 12035  001964  B4D8               	btfsc	status,2,c
 12036  001966  D781               	goto	i2l4375
 12037  001968  0A01               	xorlw	1	; case 5
 12038  00196A  B4D8               	btfsc	status,2,c
 12039  00196C  D783               	goto	i2l4377
 12040  00196E  0A03               	xorlw	3	; case 6
 12041  001970  B4D8               	btfsc	status,2,c
 12042  001972  D782               	goto	i2l4379
 12043  001974  0A01               	xorlw	1	; case 7
 12044  001976  B4D8               	btfsc	status,2,c
 12045  001978  D772               	goto	i2l4369
 12046  00197A  0A0F               	xorlw	15	; case 8
 12047  00197C  B4D8               	btfsc	status,2,c
 12048  00197E  D7D9               	goto	i2l4387
 12049  001980  0A03               	xorlw	3	; case 11
 12050  001982  B4D8               	btfsc	status,2,c
 12051  001984  D76E               	goto	i2l4371
 12052  001986  0A07               	xorlw	7	; case 12
 12053  001988  B4D8               	btfsc	status,2,c
 12054  00198A  D759               	goto	i2l4359
 12055  00198C  0A03               	xorlw	3	; case 15
 12056  00198E  B4D8               	btfsc	status,2,c
 12057  001990  D76A               	goto	i2l4373
 12058  001992                     i2l130:
 12059                           
 12060                           ;main.c: 248: }
 12061                           ;main.c: 249: INT1IF = 0;
 12062  001992  90F0               	bcf	intcon3,0,c	;volatile
 12063                           
 12064                           ;main.c: 250: return;
 12065  001994  C018  FFF5         	movff	??_keypressed+15,tablat
 12066  001998  C017  FFF8         	movff	??_keypressed+14,tblptru
 12067  00199C  C016  FFF7         	movff	??_keypressed+13,tblptrh
 12068  0019A0  C015  FFF6         	movff	??_keypressed+12,tblptrl
 12069  0019A4  C014  FFF4         	movff	??_keypressed+11,prodh
 12070  0019A8  C013  FFF3         	movff	??_keypressed+10,prodl
 12071  0019AC  C012  FFDA         	movff	??_keypressed+9,fsr2h
 12072  0019B0  C011  FFD9         	movff	??_keypressed+8,fsr2l
 12073  0019B4  C010  FFE2         	movff	??_keypressed+7,fsr1h
 12074  0019B8  C00F  FFE1         	movff	??_keypressed+6,fsr1l
 12075  0019BC  C00E  FFEA         	movff	??_keypressed+5,fsr0h
 12076  0019C0  C00D  FFE9         	movff	??_keypressed+4,fsr0l
 12077  0019C4  C00C  FFFB         	movff	??_keypressed+3,pclatu
 12078  0019C8  C00B  FFFA         	movff	??_keypressed+2,pclath
 12079  0019CC  9267               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12080  0019CE  0011               	retfie		f
 12081  0019D0                     __end_of_keypressed:
 12082                           	opt stack 0
 12083                           pclatu	equ	0xFFB
 12084                           pclath	equ	0xFFA
 12085                           tblptru	equ	0xFF8
 12086                           tblptrh	equ	0xFF7
 12087                           tblptrl	equ	0xFF6
 12088                           tablat	equ	0xFF5
 12089                           prodh	equ	0xFF4
 12090                           prodl	equ	0xFF3
 12091                           intcon	equ	0xFF2
 12092                           intcon2	equ	0xFF1
 12093                           intcon3	equ	0xFF0
 12094                           postinc0	equ	0xFEE
 12095                           fsr0h	equ	0xFEA
 12096                           fsr0l	equ	0xFE9
 12097                           wreg	equ	0xFE8
 12098                           postdec1	equ	0xFE5
 12099                           fsr1h	equ	0xFE2
 12100                           fsr1l	equ	0xFE1
 12101                           indf2	equ	0xFDF
 12102                           postinc2	equ	0xFDE
 12103                           postdec2	equ	0xFDD
 12104                           fsr2h	equ	0xFDA
 12105                           fsr2l	equ	0xFD9
 12106                           status	equ	0xFD8
 12107                           
 12108 ;; *************** function i2_eeprom_writebyte *****************
 12109 ;; Defined at:
 12110 ;;		line 713 in file "main.c"
 12111 ;; Parameters:    Size  Location     Type
 12112 ;;  address         2    2[COMRAM] unsigned int 
 12113 ;;  data            1    4[COMRAM] unsigned char 
 12114 ;; Auto vars:     Size  Location     Type
 12115 ;;		None
 12116 ;; Return value:  Size  Location     Type
 12117 ;;                  1    wreg      void 
 12118 ;; Registers used:
 12119 ;;		wreg, status,2
 12120 ;; Tracked objects:
 12121 ;;		On entry : 0/0
 12122 ;;		On exit  : 0/0
 12123 ;;		Unchanged: 0/0
 12124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12125 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12128 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12129 ;;Total ram usage:        3 bytes
 12130 ;; Hardware stack levels used:    1
 12131 ;; This function calls:
 12132 ;;		Nothing
 12133 ;; This function is called by:
 12134 ;;		_keypressed
 12135 ;; This function uses a non-reentrant model
 12136 ;;
 12137                           
 12138                           	psect	text52
 12139  003290                     __ptext52:
 12140                           	opt stack 0
 12141  003290                     i2_eeprom_writebyte:
 12142                           	opt stack 21
 12143                           
 12144                           ;main.c: 715: EEADRH = (uint8_t)(address >> 8);
 12145                           
 12146                           ;incstack = 0
 12147  003290  5004               	movf	i2eeprom_writebyte@address+1,w,c
 12148  003292  6EAA               	movwf	4010,c	;volatile
 12149                           
 12150                           ;main.c: 716: EEADR = (uint8_t)address;
 12151  003294  C003  FFA9         	movff	i2eeprom_writebyte@address,4009	;volatile
 12152                           
 12153                           ;main.c: 718: EEDATA = data;
 12154  003298  C005  FFA8         	movff	i2eeprom_writebyte@data,4008	;volatile
 12155                           
 12156                           ;main.c: 719: EECON1bits.EEPGD = 0;
 12157  00329C  9EA6               	bcf	4006,7,c	;volatile
 12158                           
 12159                           ;main.c: 720: EECON1bits.CFGS = 0;
 12160  00329E  9CA6               	bcf	4006,6,c	;volatile
 12161                           
 12162                           ;main.c: 721: EECON1bits.WREN = 1;
 12163  0032A0  84A6               	bsf	4006,2,c	;volatile
 12164                           
 12165                           ;main.c: 725: EECON2 = 0x55;
 12166  0032A2  0E55               	movlw	85
 12167  0032A4  6EA7               	movwf	4007,c	;volatile
 12168                           
 12169                           ;main.c: 726: EECON2 = 0xAA;
 12170  0032A6  0EAA               	movlw	170
 12171  0032A8  6EA7               	movwf	4007,c	;volatile
 12172                           
 12173                           ;main.c: 727: EECON1bits.WR = 1;
 12174  0032AA  82A6               	bsf	4006,1,c	;volatile
 12175  0032AC                     i2l305:
 12176  0032AC  A8A1               	btfss	4001,4,c	;volatile
 12177  0032AE  D7FE               	goto	i2l305
 12178                           
 12179                           ;main.c: 733: }
 12180                           ;main.c: 735: PIR2bits.EEIF = 0;
 12181  0032B0  98A1               	bcf	4001,4,c	;volatile
 12182                           
 12183                           ;main.c: 736: EECON1bits.WREN = 0;
 12184  0032B2  94A6               	bcf	4006,2,c	;volatile
 12185  0032B4  0012               	return		;funcret
 12186  0032B6                     __end_ofi2_eeprom_writebyte:
 12187                           	opt stack 0
 12188                           pclatu	equ	0xFFB
 12189                           pclath	equ	0xFFA
 12190                           tblptru	equ	0xFF8
 12191                           tblptrh	equ	0xFF7
 12192                           tblptrl	equ	0xFF6
 12193                           tablat	equ	0xFF5
 12194                           prodh	equ	0xFF4
 12195                           prodl	equ	0xFF3
 12196                           intcon	equ	0xFF2
 12197                           intcon2	equ	0xFF1
 12198                           intcon3	equ	0xFF0
 12199                           postinc0	equ	0xFEE
 12200                           fsr0h	equ	0xFEA
 12201                           fsr0l	equ	0xFE9
 12202                           wreg	equ	0xFE8
 12203                           postdec1	equ	0xFE5
 12204                           fsr1h	equ	0xFE2
 12205                           fsr1l	equ	0xFE1
 12206                           indf2	equ	0xFDF
 12207                           postinc2	equ	0xFDE
 12208                           postdec2	equ	0xFDD
 12209                           fsr2h	equ	0xFDA
 12210                           fsr2l	equ	0xFD9
 12211                           status	equ	0xFD8
 12212                           
 12213 ;; *************** function i2_eeprom_readbyte *****************
 12214 ;; Defined at:
 12215 ;;		line 696 in file "main.c"
 12216 ;; Parameters:    Size  Location     Type
 12217 ;;  address         2    0[COMRAM] unsigned int 
 12218 ;; Auto vars:     Size  Location     Type
 12219 ;;		None
 12220 ;; Return value:  Size  Location     Type
 12221 ;;                  1    wreg      unsigned char 
 12222 ;; Registers used:
 12223 ;;		wreg, status,2
 12224 ;; Tracked objects:
 12225 ;;		On entry : 0/0
 12226 ;;		On exit  : 0/0
 12227 ;;		Unchanged: 0/0
 12228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12229 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12232 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12233 ;;Total ram usage:        2 bytes
 12234 ;; Hardware stack levels used:    1
 12235 ;; This function calls:
 12236 ;;		Nothing
 12237 ;; This function is called by:
 12238 ;;		_keypressed
 12239 ;; This function uses a non-reentrant model
 12240 ;;
 12241                           
 12242                           	psect	text53
 12243  00330E                     __ptext53:
 12244                           	opt stack 0
 12245  00330E                     i2_eeprom_readbyte:
 12246                           	opt stack 21
 12247                           
 12248                           ;main.c: 699: EEADRH = (uint8_t)(address >> 8);
 12249                           
 12250                           ;incstack = 0
 12251  00330E  5002               	movf	i2eeprom_readbyte@address+1,w,c
 12252  003310  6EAA               	movwf	4010,c	;volatile
 12253                           
 12254                           ;main.c: 700: EEADR = (uint8_t)address;
 12255  003312  C001  FFA9         	movff	i2eeprom_readbyte@address,4009	;volatile
 12256                           
 12257                           ;main.c: 702: EECON1bits.EEPGD = 0;
 12258  003316  9EA6               	bcf	4006,7,c	;volatile
 12259                           
 12260                           ;main.c: 703: EECON1bits.CFGS = 0;
 12261  003318  9CA6               	bcf	4006,6,c	;volatile
 12262                           
 12263                           ;main.c: 704: EECON1bits.RD = 1;
 12264  00331A  80A6               	bsf	4006,0,c	;volatile
 12265  00331C                     i2l299:
 12266  00331C  B0A6               	btfsc	4006,0,c	;volatile
 12267  00331E  D7FE               	goto	i2l299
 12268                           
 12269                           ;main.c: 710: return EEDATA;
 12270  003320  50A8               	movf	4008,w,c	;volatile
 12271  003322  0012               	return	
 12272  003324                     __end_ofi2_eeprom_readbyte:
 12273                           	opt stack 0
 12274                           pclatu	equ	0xFFB
 12275                           pclath	equ	0xFFA
 12276                           tblptru	equ	0xFF8
 12277                           tblptrh	equ	0xFF7
 12278                           tblptrl	equ	0xFF6
 12279                           tablat	equ	0xFF5
 12280                           prodh	equ	0xFF4
 12281                           prodl	equ	0xFF3
 12282                           intcon	equ	0xFF2
 12283                           intcon2	equ	0xFF1
 12284                           intcon3	equ	0xFF0
 12285                           postinc0	equ	0xFEE
 12286                           fsr0h	equ	0xFEA
 12287                           fsr0l	equ	0xFE9
 12288                           wreg	equ	0xFE8
 12289                           postdec1	equ	0xFE5
 12290                           fsr1h	equ	0xFE2
 12291                           fsr1l	equ	0xFE1
 12292                           indf2	equ	0xFDF
 12293                           postinc2	equ	0xFDE
 12294                           postdec2	equ	0xFDD
 12295                           fsr2h	equ	0xFDA
 12296                           fsr2l	equ	0xFD9
 12297                           status	equ	0xFD8
 12298                           pclatu	equ	0xFFB
 12299                           pclath	equ	0xFFA
 12300                           tblptru	equ	0xFF8
 12301                           tblptrh	equ	0xFF7
 12302                           tblptrl	equ	0xFF6
 12303                           tablat	equ	0xFF5
 12304                           prodh	equ	0xFF4
 12305                           prodl	equ	0xFF3
 12306                           intcon	equ	0xFF2
 12307                           intcon2	equ	0xFF1
 12308                           intcon3	equ	0xFF0
 12309                           postinc0	equ	0xFEE
 12310                           fsr0h	equ	0xFEA
 12311                           fsr0l	equ	0xFE9
 12312                           wreg	equ	0xFE8
 12313                           postdec1	equ	0xFE5
 12314                           fsr1h	equ	0xFE2
 12315                           fsr1l	equ	0xFE1
 12316                           indf2	equ	0xFDF
 12317                           postinc2	equ	0xFDE
 12318                           postdec2	equ	0xFDD
 12319                           fsr2h	equ	0xFDA
 12320                           fsr2l	equ	0xFD9
 12321                           status	equ	0xFD8
 12322                           
 12323                           	psect	rparam
 12324  0000                     pclatu	equ	0xFFB
 12325                           pclath	equ	0xFFA
 12326                           tblptru	equ	0xFF8
 12327                           tblptrh	equ	0xFF7
 12328                           tblptrl	equ	0xFF6
 12329                           tablat	equ	0xFF5
 12330                           prodh	equ	0xFF4
 12331                           prodl	equ	0xFF3
 12332                           intcon	equ	0xFF2
 12333                           intcon2	equ	0xFF1
 12334                           intcon3	equ	0xFF0
 12335                           postinc0	equ	0xFEE
 12336                           fsr0h	equ	0xFEA
 12337                           fsr0l	equ	0xFE9
 12338                           wreg	equ	0xFE8
 12339                           postdec1	equ	0xFE5
 12340                           fsr1h	equ	0xFE2
 12341                           fsr1l	equ	0xFE1
 12342                           indf2	equ	0xFDF
 12343                           postinc2	equ	0xFDE
 12344                           postdec2	equ	0xFDD
 12345                           fsr2h	equ	0xFDA
 12346                           fsr2l	equ	0xFD9
 12347                           status	equ	0xFD8
 12348                           
 12349                           	psect	temp
 12350  000067                     btemp:
 12351                           	opt stack 0
 12352  000067                     	ds	1
 12353  0000                     int$flags	set	btemp
 12354                           pclatu	equ	0xFFB
 12355                           pclath	equ	0xFFA
 12356                           tblptru	equ	0xFF8
 12357                           tblptrh	equ	0xFF7
 12358                           tblptrl	equ	0xFF6
 12359                           tablat	equ	0xFF5
 12360                           prodh	equ	0xFF4
 12361                           prodl	equ	0xFF3
 12362                           intcon	equ	0xFF2
 12363                           intcon2	equ	0xFF1
 12364                           intcon3	equ	0xFF0
 12365                           postinc0	equ	0xFEE
 12366                           fsr0h	equ	0xFEA
 12367                           fsr0l	equ	0xFE9
 12368                           wreg	equ	0xFE8
 12369                           postdec1	equ	0xFE5
 12370                           fsr1h	equ	0xFE2
 12371                           fsr1l	equ	0xFE1
 12372                           indf2	equ	0xFDF
 12373                           postinc2	equ	0xFDE
 12374                           postdec2	equ	0xFDD
 12375                           fsr2h	equ	0xFDA
 12376                           fsr2l	equ	0xFD9
 12377                           status	equ	0xFD8


Data Sizes:
    Strings     350
    Constant    99
    Data        16
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     84     102
    BANK0           128    123     124
    BANK1           256     85      86
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_25(CODE[23]), STR_24(CODE[23]), STR_23(CODE[17]), STR_22(CODE[17]), 
		 -> STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[17]), 
		 -> STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), STR_14(CODE[17]), 
		 -> STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[19]), STR_10(CODE[17]), 
		 -> STR_9(CODE[20]), STR_8(CODE[20]), STR_7(CODE[18]), STR_6(CODE[16]), 
		 -> STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), 
		 -> STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    read_colorsensor2@blue	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@blue(BANK1[2]), 

    read_colorsensor2@green	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@green(BANK1[2]), 

    read_colorsensor2@red	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@red(BANK1[2]), 

    read_colorsensor2@clear	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@clear(BANK1[2]), 

    read_colorsensor1@blue	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@blue(BANK1[2]), 

    read_colorsensor1@green	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@green(BANK1[2]), 

    read_colorsensor1@red	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@red(BANK1[2]), 

    read_colorsensor1@clear	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@clear(BANK1[2]), 

    stepper_state@step_state	PTR unsigned char  size(2) Largest target is 2
		 -> main@step_state(BANK1[2]), 

    date_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK1[7]), 

    operation_end@step_state	PTR unsigned char  size(2) Largest target is 2
		 -> main@step_state(BANK1[2]), 

    bottle_count@bot_count	PTR unsigned char  size(2) Largest target is 4
		 -> main@bot_count(BANK1[4]), 

    runtime@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK1[7]), 

    runtime@end_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK1[7]), 

    init_operation@bot_count	PTR unsigned char  size(2) Largest target is 4
		 -> main@bot_count(BANK1[4]), 

    init_operation@step_state	PTR unsigned char  size(2) Largest target is 2
		 -> main@step_state(BANK1[2]), 

    init_operation@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK1[7]), 

    init_operation@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK1[7]), 

    time_difference@time2	PTR unsigned char  size(2) Largest target is 7
		 -> init_operation@detection_time(BANK1[7]), main@start_time(BANK1[7]), 

    time_difference@time1	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK1[7]), main@time(BANK1[7]), 

    update_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> init_operation@detection_time(BANK1[7]), main@end_time(BANK1[7]), main@time(BANK1[7]), main@start_time(BANK1[7]), 


Critical Paths under _main in COMRAM

    _update_time->_I2C_Master_Read
    _update_time->_I2C_Master_Write
    _log->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___ftge->___ftdiv
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _stepper_state->_stepper
    _stepper_state->_stepper_rev
    _read_colorsensor2->_I2C_Master_Read
    _read_colorsensor2->_I2C_Master_Write
    _read_colorsensor1->_I2C_Master_Read
    _read_colorsensor1->_I2C_Master_Write
    _initLCD->_lcdInst
    _eeprom_writebyte->_eeprom_readbyte
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_eeprom_writebyte
    i2_eeprom_writebyte->i2_eeprom_readbyte

Critical Paths under _main in BANK0

    _main->_init_operation
    _runtime->_printf
    _operation_end->_printf
    _init_operation->_printf
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altoft
    _date_time->_printf
    _bottle_count->_printf
    _printf->_time_difference

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_init_operation

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0  287671
                                            116 BANK0      7     7      0
                                             54 BANK1     31    31      0
                    _I2C_Master_Init
                       _bottle_count
                          _date_time
                    _eeprom_readbyte
                   _eeprom_writebyte
                            _initLCD
                     _init_operation
                            _lcdInst
                      _operation_end
                             _printf
                            _runtime
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _runtime                                              4     0      4  108273
                                            106 BANK0      4     0      4
                            _lcdInst
                             _printf
                    _time_difference
 ---------------------------------------------------------------------------------
 (1) _operation_end                                        4     2      2    7675
                                            106 BANK0      4     2      2
                            _lcdInst
                             _printf
                      _stepper_state
 ---------------------------------------------------------------------------------
 (1) _init_operation                                      64    56      8  143530
                                            106 BANK0     10     2      8
                                              0 BANK1     54    54      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                            _initLCD
                            _lcdInst
                             _printf
                  _read_colorsensor1
                  _read_colorsensor2
                      _stepper_state
                    _time_difference
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _update_time                                          3     1      2    3029
                                             27 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _time_difference                                     24    20      4  102098
                                             54 BANK0     24    20      4
                             ___wmul
                         _dec_to_hex
 ---------------------------------------------------------------------------------
 (3) _dec_to_hex                                          16    14      2  100142
                                             38 BANK0     16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   83830
                                             21 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   27287
                                             75 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   45615
                                             12 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     376
                                             75 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3   11589
                                              4 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     630
                                             24 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     833
                                             63 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6    1430
                                             51 COMRAM     9     3      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    2942
                                             78 COMRAM     6     2      4
                                              0 BANK0      4     4      0
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7   12021
                                             63 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    4840
                                             36 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    5673
                                             63 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    5309
                                             51 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     237
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    3888
                                             36 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    4103
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2763
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2584
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                             24 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _stepper_state                                        6     4      2    1577
                                             29 COMRAM     6     4      2
                            _stepper
                        _stepper_rev
 ---------------------------------------------------------------------------------
 (3) _stepper_rev                                          5     3      2     430
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _stepper                                              5     3      2     430
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor2                                    8     0      8    3039
                                             27 COMRAM     8     0      8
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor1                                    8     0      8    3039
                                             27 COMRAM     8     0      8
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                             27 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _eeprom_writebyte                                     3     0      3    1726
                                             26 COMRAM     3     0      3
                    _eeprom_readbyte (ARG)
 ---------------------------------------------------------------------------------
 (1) _eeprom_readbyte                                      2     0      2    1040
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _date_time                                            6     4      2    8558
                                            106 BANK0      6     4      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2110
                                             25 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                             25 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         7     5      2    6284
                                            106 BANK0      7     5      2
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              37    23     14    5764
                                             78 BANK0     28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                    _eeprom_readbyte (ARG)
                            _isdigit
                              _putch
                    _time_difference (ARG)
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                             26 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1156
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             31 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                             26 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             37 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _keypressed                                          19    16      3     526
                                              5 COMRAM    19    16      3
                  i2_eeprom_readbyte
                 i2_eeprom_writebyte
 ---------------------------------------------------------------------------------
 (10) i2_eeprom_writebyte                                  3     0      3     326
                                              2 COMRAM     3     0      3
                  i2_eeprom_readbyte (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_eeprom_readbyte                                   2     0      2     200
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eeprom_readbyte (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eeprom_readbyte (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _eeprom_readbyte
   _eeprom_writebyte
     _eeprom_readbyte (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _init_operation
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eeprom_readbyte (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _read_colorsensor1
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _read_colorsensor2
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _stepper_state
       _stepper
       _stepper_rev
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
     _update_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _lcdInst
     _lcdNibble
   _operation_end
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eeprom_readbyte (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _stepper_state
       _stepper
       _stepper_rev
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _eeprom_readbyte (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
     _time_difference (ARG)
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _runtime
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eeprom_readbyte (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _update_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _keypressed (ROOT)
   i2_eeprom_readbyte
   i2_eeprom_writebyte
     i2_eeprom_readbyte (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     55      56       7       33.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7B      7C       5       96.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     54      66       1       81.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      34        0.0%
DATA                 0      0     138       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 19:38:20 2017

                 _update_time 2ED2                  ___altoft@exp 0053                 ___altoft@sign 0054  
                ___awdiv@sign 001E           ___wmul@multiplicand 001B                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000                  ___ftadd@exp1 003F  
                ___ftadd@exp2 003E                  ___ftadd@sign 003D                           l305 323A  
                         l252 2DC8                           l253 2D64                           l258 2D44  
                         l259 2CE0                           l700 2A8A                           l188 00AA  
                         l379 3324                           l299 3306                           l723 1BE4  
                         l830 2E4E                           l727 1C0E                           l920 1EE0  
                         l738 1CBE                           l747 1CDA                           l915 1D8A  
                         l780 32CC                           l758 2836                           l883 3042  
                         l893 3162                  __CFG_CPB$OFF 000000                           _PEN 007E2A  
                __CFG_CPD$OFF 000000                           _SEN 007E28              ??_init_operation 00F2  
                         _exp 1418                           _log 2048                           _pow 1D4C  
                         wreg 000FE8                   _stepper_rev 2CD6                  __CFG_LVP$OFF 000000  
                ___ftdiv@cntr 002E                  ___ftdiv@sign 0033                  __CFG_WDT$OFF 000000  
                        l1078 14EA                          l1079 161E                          l1089 2774  
                        l5111 3158                          l5103 3138                          l3431 2C76  
                        l5105 3140                          l3441 2C98                          l3425 2C66  
                        l3273 29C4                          l3257 2996                          l3249 2952  
                        l5107 3144                          l5211 1040                          l5131 0E38  
                        l5221 109A                          l5141 0E68                          l5037 3264  
                        l3437 2C8C                          l3453 2CBE                          l3269 29B8  
                        l5223 10A4                          l5135 0E4C                          l3439 2C94  
                        l5047 23B4                          l5073 32F0                          l5241 1100  
                        l5217 1062                          l5209 1028                          l5161 0F1C  
                        l5137 0E5E                          l3457 2CCC                          l3449 2CB4  
                        l5083 3010                          l5235 10DA                          l5155 0F0E  
                        l5163 0F54                          l5147 0E98                          l4531 2A42  
                        l4523 2A0C                          l5059 2492                          l5085 3018  
                        l5237 10E6                          l5245 1114                          l5229 10BE  
                        l5181 0FB6                          l5157 0F14                          l5261 11DA  
                        l4613 1C6E                          l5413 0406                          l3911 2E0C  
                        l5095 3038                          l5087 301C                          l5247 111A  
                        l5255 11AE                          l5175 0F94                          l4535 2A58  
                        l4527 2A1A                          l4615 1C78                          l4607 1C4C  
                        l4703 2B9A                          l5271 2F0E                          l3921 2E40  
                        l3913 2E10                          l5249 1162                          l5257 11C6  
                        l5193 0FEC                          l4537 2A76                          l4529 2A24  
                        l4633 1CF6                          l4625 1CAC                          l4617 1C82  
                        l5521 09AA                          l5513 0950                          l5441 0618  
                        l5259 11CE                          l5195 0FF2                          l5179 0FB0  
                        l5531 1F2E                          l3851 169A                          l3843 1662  
                        l4539 2A80                          l4811 2810                          l4643 1D26  
                        l4627 1CB6                          l4619 1C8A                          l4571 2BF8  
                        l5267 2F06                          l5515 0952                          l5371 00B2  
                        l3909 2E00                          l3861 16E4                          l3853 16A8  
                        l4653 25C4                          l4709 2BC6                          l4741 254A  
                        l5277 2F2A                          l5445 06A4                          l5517 096E  
                        l5365 007E                          l5527 1F24                          l3871 172A  
                        l3847 1680                          l3839 1644                          l4591 1C1C  
                        l4751 2574                          l4719 24D4                          l5463 07A2  
                        l5553 11FA                          l5537 1F52                          l3881 1770  
                        l3865 16FE                          l3857 16C6                          l4841 31FA  
                        l4585 1BF2                          l4673 261E                          l4569 2BEC  
                        l4737 253A                          l4913 143C                          l5481 086E  
                        l5633 0A9A                          l5625 0A72                          l5571 1336  
                        l3875 1746                          l3867 170C                          l4683 2646  
                        l4659 25EC                          l4755 258A                          l4747 2562  
                        l5459 06FA                          l5643 0AFC                          l5635 0AAC  
                        ?_exp 008C                          l5565 12EA                          l3893 17C4  
                        l3885 178A                          l4829 3182                          l4677 262E  
                        l4749 256E                          l4925 14B4                          l5477 07FE  
                        l5645 0B0E                          ?_log 004C                          l5559 12A4  
                        l3879 1762                          l4791 27D2                          l4687 2656  
                        l4871 28A8                          l4767 2AD2                          l4863 26FA  
                        l4855 26C8                          l4919 1478                          l5495 08CA  
                        l5647 0B20                          l5577 1382                          l5585 13CE  
                        l3889 17A8                          l3897 17D2                          l4785 27AA  
                        l4873 2924                          l4961 1D9E                          l5497 08E0  
                        l5665 0C64                          l5649 0B3E                          l5587 13F0  
                        l4699 2B6A                          l4859 26DC                          l4947 15F4  
                        l4891 2062                          l5499 08F6                          l5675 0D30  
                        l5659 0C36                          l5691 0DD8                          l5589 140C  
                        l4877 2F4A                          l5685 0D6E                          l5677 0D50  
                        l5693 0E0C                          l4879 2F56                          l4975 1E32  
                        l4967 1DC2                          l4897 2082                          l4979 1E58  
                        ?_pow 0095                          STR_1 FEA0                          STR_2 FF44  
                        STR_3 FF33                          STR_4 FF55                          STR_5 FF33  
                        STR_6 FFEE                          STR_7 FF10                          STR_8 FEE9  
                        STR_9 FEE9                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          _LATD 000F8C                          _LATE 000F8D  
                        u4111 1BB0                          u4121 1BC4                          u2700 2972  
                        u4321 25AC                          u4411 24B8                          u4500 2AFA  
                        u2708 2974                          u3525 2FCE                          u4341 25D4  
                        u4430 24F2                          u4511 2792                          u4600 26EC  
                        u4531 27BA                          u4435 24EA                          u4508 2AFC  
                        u4700 14C0                          u5190 00AA                          u4820 3262  
                        _RCEN 007E2B                          u5607 0E1A                          u5617 2EC2  
                        u4690 14BE                          u5707 2D1E                          u5627 0414  
                        u4780 1E16                          u5717 2D36                          u5637 06DC  
                        u5807 306C                          u5727 2D72                          u5647 07E0  
                        u5817 308C                          u5737 2D8A                          u5657 08AC  
                        u5827 3094                          u5747 2DA2                          u5667 0934  
                        u5757 2DBA                          u5677 0960                          u5767 30EA  
                        u5687 2CEE                          u5777 311E                          u5697 2D06  
                        u5787 13FE                          u5797 3064                          _RSEN 007E29  
   __size_of_eeprom_writebyte 0026                          _main 09B2                  ___ftpack@arg 0019  
                        _keys FE3D                  ___ftpack@exp 001C                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 0067        __size_of_stepper_state 01D2                          exp@x 008C  
                        log@x 004C                   main@pressed 014D                          pow@x 0095  
                        pow@y 0098                          prodh 000FF4                          prodl 000FF3  
                        start 000E                 __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000  
                ___ftmul@cntr 0032                  ___param_bank 000000                  ___ftmul@sign 0033  
               ?_bottle_count 00EA        read_colorsensor1@clear 0022                  ___fttol@exp1 004E  
      read_colorsensor2@clear 0022                         ??_exp 0055                         ??_log 004F  
                ___fttol@lval 004A        read_colorsensor1@green 001E                         ??_pow 0055  
      read_colorsensor2@green 001E              ?_I2C_Master_Init 0026              ?_I2C_Master_Read 0001  
            ?_I2C_Master_Wait 0001                  main@end_time 013D              ?_I2C_Master_Stop 0001  
                       ?_main 0001                         _ACKEN 007E2C                         _ACKDT 007E2D  
             __end_of___awdiv 2CD6                         _EEADR 000FA9               __end_of___ftadd 1D4C  
                       STR_10 FFBB                         STR_11 FEFD                         STR_20 FFDD  
                       STR_12 FF77                         STR_21 FF66                         STR_13 FF66  
                       STR_22 FFAA                         STR_14 FF88                         STR_23 FF33  
                       STR_15 FF66                         STR_16 FFCC                         STR_24 FEBB  
                       STR_17 FF66                         STR_25 FED2                         STR_18 FF99  
                       STR_26 FF22                         STR_19 FF66               __end_of___ftdiv 2868  
             __end_of___ftneg 32DA               __end_of___lldiv 2E60               __end_of___ftmul 2690  
             ___awdiv@divisor 001B               __end_of___ftsub 31AC               __end_of___fttol 259C  
             __end_of___lwdiv 304C               __end_of___lwmod 316C                         i2l130 1992  
                       i2l305 32AC                         i2l299 331C               ___awdiv@counter 001D  
                       _PORTB 000F81                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                  ___lltoft@exp 0029  
             __end_of_lcdInst 335E                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                       _nRBPU 007F8F                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initLCD 312A                __CFG_EBTRB$OFF 000000  
               ___awtoft@sign 0024               __end_of_dpowers FE58                         _floor 2690  
                       _ldexp 293A                         _frexp 2AAA                         _errno 0065  
             __end_of_isdigit 32F8                 ___ftpack@sign 001D                         _putch 3346  
                       pclath 000FFA                         tablat 000FF5                         pow@yi 00A2  
                       status 000FD8               __end_of_stepper 2DDE               __end_of_runtime 30E4  
              __CFG_PBADEN$ON 000000                   exp@exponent 0092                   ldexp@newexp 004F  
             __initialization 31AC                   log@exponent 004F      init_operation@start_time 00EA  
              ??_bottle_count 00EC                  __end_of_main 0E2A      init_operation@step_state 00F0  
                __end_of_keys FE4E                  update_time@i 001E                        ??_main 00F4  
      i2eeprom_writebyte@data 0005                 ___fttol@sign1 0049               runtime@end_time 00EC  
               _stepper_state 162C                 __activetblptr 000002             time_difference@d1 00C8  
           time_difference@d2 00CA             time_difference@d3 00CC             time_difference@s1 00C4  
           time_difference@s2 00C6             ?_I2C_Master_Start 0001             ?_I2C_Master_Write 001A  
               main@bot_count 014E            ??_I2C_Master_Start 001A                        _ADCON0 000FC2  
                      _ADCON1 000FC1            ??_I2C_Master_Write 001C                        ?_floor 0084  
                      ?_ldexp 004C                        ?_frexp 0019              __end_of___altoft 2C52  
                      _EEADRH 000FAA                        _EEDATA 000FA8                        _EECON2 000FA7  
            ___awdiv@dividend 0019              __end_of___awtoft 321E                        ?_putch 0001  
            __end_of___ftpack 2AAA              __end_of___lltoft 2FA0                        _INT1IE 007F83  
                      _INT1IF 007F80                        i2l4361 1842                        i2l4371 1862  
                      i2l4363 1846                        i2l4373 1866                        i2l4365 1850  
                      i2l4383 192E                        i2l4375 186A                        i2l4367 185A  
                      i2l4359 183E                        i2l4391 1936                        i2l4377 1874  
                      i2l4369 185E                 keypressed@mem 0006                        i2l4387 1932  
                      i2l4379 1878  init_operation@detection_time 0102                        _SSPADD 000FC8  
                      _TRISC3 007CA3                        _TRISC4 007CA4                        _SSPBUF 000FC9  
             update_time@time 001C                __CFG_XINST$OFF 000000      __size_of_eeprom_readbyte 0016  
                      ___ftge 2B3A                        ___wmul 326A                     ??___awdiv 001D  
                   ??___ftadd 003A                __CFG_STVREN$ON 000000                     ??___ftdiv 002B  
                   ??___ftneg 001C                     ??___lldiv 0021                     ??___ftmul 002B  
                   ??___ftsub 0046                     ??___fttol 0044                     ??___lwdiv 001D  
                   ??___lwmod 0024       stepper_state@next_state 0022                 dec_to_hex@num 00A6  
            ___awdiv@quotient 001F                ?_stepper_state 001E                     ??_lcdInst 001B  
                      _printf 0E2A                        floor@i 0087                        floor@x 0084  
       ___ftmul@f3_as_product 002F                     ??_initLCD 001C                  __pdataCOMRAM 0055  
                   ??_isdigit 0019               _time_difference 19D0                  __mediumconst FE3C  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_stepper 001B                     ??_runtime 0055              __end_ofexp@coeff FE85  
            __end_oflog@coeff FEA0              _eeprom_writebyte 321E                    __accesstop 0080  
     __end_of__initialization 31D8                    ___altoft@c 004F                    ___ftadd@f1 0034  
                  ___ftadd@f2 0037                    ___ftge@ff1 0034                    ___ftge@ff2 0037  
       __end_of_operation_end 2ED2                  eval_poly@res 0049                 ___rparam_used 000001  
                  ___ftdiv@f1 0025                    ___ftdiv@f2 0028                    ___ftdiv@f3 002F  
                  ___ftneg@f1 0019          time_difference@time1 00B6          time_difference@time2 00B8  
                  ___awtoft@c 0021                    ___ftmul@f1 0025                    ___ftmul@f2 0028  
                  ___ftsub@f1 0040                    ___ftsub@f2 0043             i2_eeprom_readbyte 330E  
                  ___fttol@f1 0040          __end_of_happynewyear FE67                __pcstackCOMRAM 0001  
                ?_update_time 001C       stepper_state@step_state 001E                    ___lltoft@c 0021  
          ?i2_eeprom_readbyte 0001                 __end_of_floor 2782                 __end_of_ldexp 29FC  
               __end_of_frexp 2B3A                 __end_of_putch 3352            __size_of_date_time 015A  
                stepper_rev@i 001C                  stepper_rev@r 0019            __size_of_lcdNibble 004E  
         ??i2_eeprom_readbyte 0003         bottle_count@bot_count 00EA                  ?_stepper_rev 0019  
                     ??_floor 0055                       ??_ldexp 0051                       ??_frexp 001E  
  __end_ofi2_eeprom_writebyte 32B6          __end_of_bottle_count 1418                    _dec_to_hex 2396  
                     ??_putch 001B                    __pbssBANK0 00FB                    __pbssBANK1 0155  
          time_difference@hr1 00BC            time_difference@hr2 00BE            __size_of_eval_poly 00D2  
   __end_ofi2_eeprom_readbyte 3324                       ?___ftge 0034                       ?___wmul 0019  
             ??_stepper_state 0020                     ?___altoft 004F              init_operation@b1 011E  
            init_operation@b2 0124              init_operation@c1 010E              init_operation@c2 0110  
            init_operation@g1 010C              init_operation@g2 0116       __end_of_time_difference 1BA0  
            init_operation@r1 011C              init_operation@r2 0122             ??_eeprom_readbyte 001B  
                   ?___awtoft 0021                     ?___ftpack 0019                       ?_printf 00CE  
                   ?___lltoft 0021      i2eeprom_readbyte@address 0001                       _SSPCON1 000FC6  
                     _SSPCON2 000FC5                       _SSPSTAT 000FC7             __end_of_date_time 2048  
           _read_colorsensor1 227C             _read_colorsensor2 2162            init_operation@blue 0132  
          init_operation@time 00EC             __end_of_lcdNibble 309A            ?_read_colorsensor1 001C  
          ?_read_colorsensor2 001C                       __Hparam 0000                       __Lparam 0000  
             __size_of___ftge 0090                       ___awdiv 2C52                       ___ftadd 1BA0  
                     ___ftdiv 2782                       ___ftneg 32B6                       ___lldiv 2DDE  
             __size_of___wmul 0026                       ___ftmul 259C                       ___ftsub 316C  
                     ___fttol 24A8                       ___lwdiv 2FFA                       ___lwmod 312A  
         ??_read_colorsensor1 0024           ??_read_colorsensor2 0024                    _curr_state 0155  
                  ??___altoft 0080                       __pcinit 31AC                    ??___awtoft 0024  
                  ??___ftpack 001E             __end_of_eval_poly 293A                       __ramtop 1000  
                     _lcdInst 3352                    ??___lltoft 0025                       __ptext0 09B2  
                     __ptext1 309A                       __ptext2 2E60                       __ptext3 0012  
                     __ptext4 2ED2                       __ptext5 19D0                       __ptext6 2396  
                     __ptext7 1D4C                       __ptext8 2048                       __ptext9 1418  
             __size_of_printf 03CE                dec_to_hex@temp 00AE                       _initLCD 30E4  
           __end_of_hexpowers FE60                       _dpowers FE4E                  __size_of_exp 0214  
                __size_of_log 011A                       _isdigit 32DA                  __size_of_pow 01A2  
                  _keypressed 0008      __size_of_I2C_Master_Init 005A      __size_of_I2C_Master_Read 0026  
    __size_of_I2C_Master_Wait 0012                    date_time@i 00EF      __size_of_I2C_Master_Stop 0008  
                     _stepper 2D5A                       main@mem 0154                       _runtime 309A  
                 ?_dec_to_hex 00A6                __pintcode_body 17FE          end_of_initialization 31D8  
                     exp@sign 0094     __end_of_read_colorsensor1 2396     __end_of_read_colorsensor2 227C  
     eeprom_writebyte@address 001B       __size_of_init_operation 09A0       operation_end@step_state 00EA  
               __Lmediumconst FE3C                       int_func 17FE    __size_ofi2_eeprom_readbyte 0016  
   __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A               ___lldiv@divisor 001D  
                     pow@sign 00A1               ___lldiv@counter 0025                       printf@c 00E9  
                     printf@f 00CE              I2C_Master_Init@c 0026              I2C_Master_Read@a 001A  
                     postdec1 000FE5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                 date_time@time 00EA          __size_of_update_time 0072  
              main@start_time 0136                main@step_state 0152              ?_time_difference 00B6  
    __end_of_eeprom_writebyte 3244                     _PORTBbits 000F81                     _PORTCbits 000F82  
                   _PORTEbits 000F84         __size_of_bottle_count 0220       init_operation@bot_count 00EE  
                _happynewyear FE60          __size_of_stepper_rev 0084                   ___ftdiv@exp 0032  
                 printf@width 00E7                   ___ftmul@exp 002E          init_operation@b1_615 0128  
        init_operation@b2_619 012C          init_operation@c1_616 0112         read_colorsensor1@blue 0020  
        init_operation@c2_620 0114         read_colorsensor2@blue 0020          init_operation@g1_614 0118  
        init_operation@g2_618 011A                  _bottle_count 11F8                __end_of___ftge 2BCA  
        init_operation@r1_613 0126          init_operation@r2_617 012A                __end_of___wmul 3290  
         __size_of_dec_to_hex 0112                 __pidataCOMRAM 3336          eeprom_writebyte@data 001D  
                  floor@expon 008A                __end_of_printf 11F8           start_initialization 31AC  
                  eval_poly@d 0043                    eval_poly@n 0045                    eval_poly@x 0040  
                 ?_keypressed 0006                    ldexp@value 004C                   __end_of_exp 162C  
                 __end_of_log 2162                   __end_of_pow 1EEE    __size_of_read_colorsensor1 011A  
  __size_of_read_colorsensor2 011A                    frexp@value 0019             ??_I2C_Master_Init 002A  
           ??_I2C_Master_Read 001A             ??_I2C_Master_Wait 0019             ??_I2C_Master_Stop 001A  
             _eeprom_readbyte 32F8            i2_eeprom_writebyte 3290                      ??___ftge 003A  
                    ??___wmul 001D              __CFG_LPT1OSC$OFF 000000           ?i2_eeprom_writebyte 0003  
                    ??_printf 00DC             __size_of___altoft 0088             __size_of___awtoft 0038  
           __size_of___ftpack 00AE             __size_of___lltoft 005C                   __pbssCOMRAM 0065  
      __size_of_operation_end 0072           time_difference@min1 00C0           time_difference@min2 00C2  
               __pcstackBANK0 0080                 __pcstackBANK1 0100                  _isdigit$1053 001A  
        ??i2_eeprom_writebyte 0006                _init_operation 0012              _I2C_Master_Start 3370  
            _I2C_Master_Write 335E                     _date_time 1EEE              ___lwdiv@dividend 0019  
           __CFG_CCP2MX$PORTC 000000           __size_of_keypressed 19C8                     __pintcode 0008  
               __pmediumconst FE3C                     _lcdNibble 304C                      ?___awdiv 0019  
                    ?___ftadd 0034               init_operation@i 0120                      ?___ftdiv 0025  
                    ?___ftneg 0019                      ?___lldiv 0019                      ?___ftmul 0025  
                    ?___ftsub 0040                      ?___fttol 0040                      ?___lwdiv 0019  
                    ?___lwmod 0020         __end_of_stepper_state 17FE                      ?_lcdInst 0001  
            dec_to_hex@hexnum 00B2                      ?_initLCD 0001                      ?_isdigit 0001  
                   _eval_poly 2868             init_operation@red 012E                     _hexpowers FE58  
            ___lwdiv@quotient 001E                      ?_stepper 0019        __end_of_init_operation 09B2  
              __size_of_floor 00F2                __size_of_ldexp 00C2                __size_of_frexp 0090  
                ??_dec_to_hex 0055                      ?_runtime 00EA       __end_of_eeprom_readbyte 330E  
              __size_of_putch 000C                ___wmul@product 001D                      _LATDbits 000F8C  
         _init_operation$1504 0109                 _operation_end 2E60                    ?_date_time 00EA  
                    _PIR2bits 000FA1              __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001  
          __end_of_dec_to_hex 24A8             ?_eeprom_writebyte 001B             ___wmul@multiplier 0019  
               lcdNibble@data 001A                    printf@flag 00E6                 lcdNibble@temp 0019  
                  printf@prec 00E3            ??_eeprom_writebyte 001E                    ?_eval_poly 0040  
        read_colorsensor1@red 001C          read_colorsensor2@red 001C             runtime@start_time 00EA  
         I2C_Master_Read@temp 001B               ?_init_operation 00EA                     copy_data0 31C0  
          dec_to_hex@quotient 00B4           init_operation@clear 0134           init_operation@green 0130  
   init_operation@luminosity1 0100                     frexp@eptr 001C                    _EECON1bits 000FA6  
              ?_operation_end 00EA               hex_to_dec@F3232 0055                      __Hrparam 0000  
                    __Lrparam 0000                 ??_update_time 001E            __CFG_BOREN$SBORDIS 000000  
                 dec_to_hex@i 00B0              __size_of___awdiv 0084              __size_of___ftadd 01AC  
            __size_of___ftdiv 00E6     i2eeprom_writebyte@address 0003              __size_of___ftneg 0024  
            __size_of___lldiv 0082                      ___altoft 2BCA              __size_of___ftmul 00F4  
            __size_of___ftsub 0040              __size_of___fttol 00F4              __size_of___lwdiv 0052  
            __size_of___lwmod 0042                      ___awtoft 31E6                      ___ftpack 29FC  
                    ___lltoft 2F44              __size_of_lcdInst 000C                      _exp$1507 008F  
             _I2C_Master_Init 2FA0               _I2C_Master_Read 3244              __size_of_initLCD 0046  
             _I2C_Master_Wait 3324               _I2C_Master_Stop 3368                  ??_keypressed 0009  
            __size_of_isdigit 001E               ___lwdiv@divisor 001B      __size_of_time_difference 01D0  
               ??_stepper_rev 001B               ___lwdiv@counter 001D                      __ptext10 293A  
                    __ptext11 2690                      __ptext20 32B6                      __ptext12 2AAA  
                    __ptext21 2782                      __ptext13 24A8                      __ptext30 227C  
                    __ptext22 31E6                      __ptext14 2B3A                      __ptext31 30E4  
                    __ptext23 2F44                      __ptext15 2BCA                      __ptext40 11F8  
                    __ptext32 321E                      __ptext24 29FC                      __ptext16 2868  
                    __ptext41 0E2A                      __ptext33 32F8                      __ptext25 2C52  
                    __ptext17 259C                      __ptext50 2DDE                      __ptext42 3346  
                    __ptext34 1EEE                      __ptext26 162C                      __ptext18 316C  
                    __ptext43 32DA                      __ptext35 335E                      __ptext27 2CD6  
                    __ptext19 1BA0                      __ptext52 3290                      __ptext44 326A  
                    __ptext36 3368                      __ptext28 2D5A                      __ptext53 330E  
                    __ptext45 312A                      __ptext37 3370                      __ptext29 2162  
                    __ptext46 2FFA                      __ptext38 3244                      __ptext47 3352  
                    __ptext39 3324                      __ptext48 304C                      __ptext49 2FA0  
                    _pow$1505 009B                      _pow$1506 009E                      _bot_type 00FB  
            __size_of_stepper 0084              ?_eeprom_readbyte 0019              __size_of_runtime 004A  
               __size_of_main 0478               _dec_to_hex$1500 00A8               _dec_to_hex$1501 00AB  
                 ??_date_time 00EC                   ??_lcdNibble 0019            __end_of_keypressed 19D0  
                    int$flags 0067                     printf@idx 00E0                     printf@val 00E4  
                    main@temp 014B                      main@time 0144           __end_of_update_time 2F44  
                    exp@coeff FE67                      log@coeff FE85                     putch@data 001B  
    __end_of_I2C_Master_Start 3378      __end_of_I2C_Master_Write 3368                    _INTCONbits 000FF2  
                 ??_eval_poly 0047                      isdigit@c 001B                      intlevel2 0000  
             ??_operation_end 00EC              ___lwmod@dividend 0020              ___lldiv@dividend 0019  
         __end_of_stepper_rev 2D5A                      printf@ap 00E1       __end_of_I2C_Master_Init 2FFA  
     __end_of_I2C_Master_Read 326A       __end_of_I2C_Master_Wait 3336       __end_of_I2C_Master_Stop 3370  
                 lcdInst@data 001B                      stepper@i 001C                      stepper@r 0019  
            ___lldiv@quotient 0021             I2C_Master_Write@d 001A               ___lwmod@divisor 0022  
             ___lwmod@counter 0024        eeprom_readbyte@address 0019   __size_ofi2_eeprom_writebyte 0026  
           ??_time_difference 00BA  
