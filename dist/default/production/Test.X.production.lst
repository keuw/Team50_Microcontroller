

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 14 16:44:58 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           ; Version 1.40
    71                           ; Generated 01/12/2016 GMT
    72                           ; 
    73                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F4620 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     
   105                           	psect	idataBANK1
   106  002BAE                     __pidataBANK1:
   107                           	opt stack 0
   108                           
   109                           ;initializer for hex_to_dec@F3226
   110  002BAE  00                 	db	0
   111  002BAF  01                 	db	1
   112  002BB0  02                 	db	2
   113  002BB1  03                 	db	3
   114  002BB2  04                 	db	4
   115  002BB3  05                 	db	5
   116  002BB4  06                 	db	6
   117  002BB5  07                 	db	7
   118  002BB6  08                 	db	8
   119  002BB7  09                 	db	9
   120  002BB8  0A                 	db	10
   121  002BB9  0B                 	db	11
   122  002BBA  0C                 	db	12
   123  002BBB  0D                 	db	13
   124  002BBC  0E                 	db	14
   125  002BBD  0F                 	db	15
   126                           
   127                           	psect	mediumconst
   128  00FE84                     __pmediumconst:
   129                           	opt stack 0
   130  00FE84  00                 	db	0
   131  00FE85                     _keys:
   132                           	opt stack 0
   133  00FE85  31                 	db	49
   134  00FE86  32                 	db	50
   135  00FE87  33                 	db	51
   136  00FE88  41                 	db	65
   137  00FE89  34                 	db	52
   138  00FE8A  35                 	db	53
   139  00FE8B  36                 	db	54
   140  00FE8C  42                 	db	66
   141  00FE8D  37                 	db	55
   142  00FE8E  38                 	db	56
   143  00FE8F  39                 	db	57
   144  00FE90  43                 	db	67
   145  00FE91  2A                 	db	42
   146  00FE92  30                 	db	48
   147  00FE93  23                 	db	35
   148  00FE94  44                 	db	68
   149  00FE95  00                 	db	0
   150  00FE96                     __end_of_keys:
   151                           	opt stack 0
   152  00FE96                     _dpowers:
   153                           	opt stack 0
   154  00FE96  0001               	dw	1
   155  00FE98  000A               	dw	10
   156  00FE9A  0064               	dw	100
   157  00FE9C  03E8               	dw	1000
   158  00FE9E  2710               	dw	10000
   159  00FEA0                     __end_of_dpowers:
   160                           	opt stack 0
   161  00FEA0                     _hexpowers:
   162                           	opt stack 0
   163  00FEA0  0001               	dw	1
   164  00FEA2  0010               	dw	16
   165  00FEA4  0100               	dw	256
   166  00FEA6  1000               	dw	4096
   167  00FEA8                     __end_of_hexpowers:
   168                           	opt stack 0
   169  00FEA8                     _happynewyear:
   170                           	opt stack 0
   171  00FEA8  45                 	db	69
   172  00FEA9  59                 	db	89
   173  00FEAA  23                 	db	35
   174  00FEAB  07                 	db	7
   175  00FEAC  31                 	db	49
   176  00FEAD  12                 	db	18
   177  00FEAE  16                 	db	22
   178  00FEAF                     __end_of_happynewyear:
   179                           	opt stack 0
   180  00FEAF                     exp@coeff:
   181                           	opt stack 0
   182  00FEAF  00                 	db	0
   183  00FEB0  80                 	db	128
   184  00FEB1  3F                 	db	63
   185  00FEB2  72                 	db	114
   186  00FEB3  31                 	db	49
   187  00FEB4  3F                 	db	63
   188  00FEB5  FE                 	db	254
   189  00FEB6  75                 	db	117
   190  00FEB7  3E                 	db	62
   191  00FEB8  58                 	db	88
   192  00FEB9  63                 	db	99
   193  00FEBA  3D                 	db	61
   194  00FEBB  95                 	db	149
   195  00FEBC  1D                 	db	29
   196  00FEBD  3C                 	db	60
   197  00FEBE  C5                 	db	197
   198  00FEBF  AE                 	db	174
   199  00FEC0  3A                 	db	58
   200  00FEC1  79                 	db	121
   201  00FEC2  21                 	db	33
   202  00FEC3  39                 	db	57
   203  00FEC4  94                 	db	148
   204  00FEC5  80                 	db	128
   205  00FEC6  37                 	db	55
   206  00FEC7  93                 	db	147
   207  00FEC8  A7                 	db	167
   208  00FEC9  35                 	db	53
   209  00FECA  56                 	db	86
   210  00FECB  15                 	db	21
   211  00FECC  34                 	db	52
   212  00FECD                     __end_ofexp@coeff:
   213                           	opt stack 0
   214  00FECD                     log@coeff:
   215                           	opt stack 0
   216  00FECD  00                 	db	0
   217  00FECE  00                 	db	0
   218  00FECF  00                 	db	0
   219  00FED0  00                 	db	0
   220  00FED1  80                 	db	128
   221  00FED2  3F                 	db	63
   222  00FED3  F0                 	db	240
   223  00FED4  FF                 	db	255
   224  00FED5  BE                 	db	190
   225  00FED6  E2                 	db	226
   226  00FED7  A9                 	db	169
   227  00FED8  3E                 	db	62
   228  00FED9  83                 	db	131
   229  00FEDA  76                 	db	118
   230  00FEDB  BE                 	db	190
   231  00FEDC  AE                 	db	174
   232  00FEDD  2B                 	db	43
   233  00FEDE  3E                 	db	62
   234  00FEDF  3C                 	db	60
   235  00FEE0  C3                 	db	195
   236  00FEE1  BD                 	db	189
   237  00FEE2  D2                 	db	210
   238  00FEE3  13                 	db	19
   239  00FEE4  3D                 	db	61
   240  00FEE5  78                 	db	120
   241  00FEE6  D3                 	db	211
   242  00FEE7  BB                 	db	187
   243  00FEE8                     __end_oflog@coeff:
   244                           	opt stack 0
   245  0000                     _ADCON0	set	4034
   246  0000                     _ADCON1	set	4033
   247  0000                     _EEADR	set	4009
   248  0000                     _EEADRH	set	4010
   249  0000                     _EECON1bits	set	4006
   250  0000                     _EECON2	set	4007
   251  0000                     _EEDATA	set	4008
   252  0000                     _INTCONbits	set	4082
   253  0000                     _LATA	set	3977
   254  0000                     _LATB	set	3978
   255  0000                     _LATC	set	3979
   256  0000                     _LATD	set	3980
   257  0000                     _LATDbits	set	3980
   258  0000                     _LATE	set	3981
   259  0000                     _PIR2bits	set	4001
   260  0000                     _PORTB	set	3969
   261  0000                     _PORTCbits	set	3970
   262  0000                     _PORTEbits	set	3972
   263  0000                     _SSPADD	set	4040
   264  0000                     _SSPBUF	set	4041
   265  0000                     _SSPCON1	set	4038
   266  0000                     _SSPCON2	set	4037
   267  0000                     _SSPSTAT	set	4039
   268  0000                     _TRISA	set	3986
   269  0000                     _TRISB	set	3987
   270  0000                     _TRISC	set	3988
   271  0000                     _TRISD	set	3989
   272  0000                     _TRISE	set	3990
   273  0000                     _ACKDT	set	32301
   274  0000                     _ACKEN	set	32300
   275  0000                     _INT1IE	set	32643
   276  0000                     _INT1IF	set	32640
   277  0000                     _PEN	set	32298
   278  0000                     _RCEN	set	32299
   279  0000                     _RSEN	set	32297
   280  0000                     _SEN	set	32296
   281  0000                     _TRISC3	set	31907
   282  0000                     _TRISC4	set	31908
   283  0000                     _nRBPU	set	32655
   284  00FEE8                     STR_1:
   285  00FEE8  50                 	db	80	;'P'
   286  00FEE9  72                 	db	114	;'r'
   287  00FEEA  65                 	db	101	;'e'
   288  00FEEB  73                 	db	115	;'s'
   289  00FEEC  73                 	db	115	;'s'
   290  00FEED  20                 	db	32
   291  00FEEE  31                 	db	49	;'1'
   292  00FEEF  20                 	db	32
   293  00FEF0  74                 	db	116	;'t'
   294  00FEF1  6F                 	db	111	;'o'
   295  00FEF2  20                 	db	32
   296  00FEF3  62                 	db	98	;'b'
   297  00FEF4  65                 	db	101	;'e'
   298  00FEF5  67                 	db	103	;'g'
   299  00FEF6  69                 	db	105	;'i'
   300  00FEF7  6E                 	db	110	;'n'
   301  00FEF8  20                 	db	32
   302  00FEF9  6F                 	db	111	;'o'
   303  00FEFA  70                 	db	112	;'p'
   304  00FEFB  65                 	db	101	;'e'
   305  00FEFC  72                 	db	114	;'r'
   306  00FEFD  61                 	db	97	;'a'
   307  00FEFE  74                 	db	116	;'t'
   308  00FEFF  69                 	db	105	;'i'
   309  00FF00  6F                 	db	111	;'o'
   310  00FF01  6E                 	db	110	;'n'
   311  00FF02  00                 	db	0
   312  00FF03                     STR_18:
   313  00FF03  44                 	db	68	;'D'
   314  00FF04  61                 	db	97	;'a'
   315  00FF05  74                 	db	116	;'t'
   316  00FF06  65                 	db	101	;'e'
   317  00FF07  3A                 	db	58	;':'
   318  00FF08  20                 	db	32
   319  00FF09  25                 	db	37
   320  00FF0A  30                 	db	48	;'0'
   321  00FF0B  32                 	db	50	;'2'
   322  00FF0C  78                 	db	120	;'x'
   323  00FF0D  2F                 	db	47
   324  00FF0E  25                 	db	37
   325  00FF0F  30                 	db	48	;'0'
   326  00FF10  32                 	db	50	;'2'
   327  00FF11  78                 	db	120	;'x'
   328  00FF12  2F                 	db	47
   329  00FF13  25                 	db	37
   330  00FF14  30                 	db	48	;'0'
   331  00FF15  32                 	db	50	;'2'
   332  00FF16  78                 	db	120	;'x'
   333  00FF17  20                 	db	32
   334  00FF18  20                 	db	32
   335  00FF19  00                 	db	0
   336  00FF1A                     STR_19:
   337  00FF1A  54                 	db	84	;'T'
   338  00FF1B  69                 	db	105	;'i'
   339  00FF1C  6D                 	db	109	;'m'
   340  00FF1D  65                 	db	101	;'e'
   341  00FF1E  3A                 	db	58	;':'
   342  00FF1F  20                 	db	32
   343  00FF20  25                 	db	37
   344  00FF21  30                 	db	48	;'0'
   345  00FF22  32                 	db	50	;'2'
   346  00FF23  78                 	db	120	;'x'
   347  00FF24  3A                 	db	58	;':'
   348  00FF25  25                 	db	37
   349  00FF26  30                 	db	48	;'0'
   350  00FF27  32                 	db	50	;'2'
   351  00FF28  78                 	db	120	;'x'
   352  00FF29  3A                 	db	58	;':'
   353  00FF2A  25                 	db	37
   354  00FF2B  30                 	db	48	;'0'
   355  00FF2C  32                 	db	50	;'2'
   356  00FF2D  78                 	db	120	;'x'
   357  00FF2E  20                 	db	32
   358  00FF2F  20                 	db	32
   359  00FF30  00                 	db	0
   360  00FF31                     STR_5:
   361  00FF31  54                 	db	84	;'T'
   362  00FF32  69                 	db	105	;'i'
   363  00FF33  6D                 	db	109	;'m'
   364  00FF34  65                 	db	101	;'e'
   365  00FF35  3A                 	db	58	;':'
   366  00FF36  20                 	db	32
   367  00FF37  25                 	db	37
   368  00FF38  69                 	db	105	;'i'
   369  00FF39  73                 	db	115	;'s'
   370  00FF3A  20                 	db	32
   371  00FF3B  20                 	db	32
   372  00FF3C  20                 	db	32
   373  00FF3D  20                 	db	32
   374  00FF3E  20                 	db	32
   375  00FF3F  20                 	db	32
   376  00FF40  20                 	db	32
   377  00FF41  20                 	db	32
   378  00FF42  20                 	db	32
   379  00FF43  00                 	db	0
   380  00FF44                     STR_20:
   381  00FF44  30                 	db	48	;'0'
   382  00FF45  31                 	db	49	;'1'
   383  00FF46  32                 	db	50	;'2'
   384  00FF47  33                 	db	51	;'3'
   385  00FF48  34                 	db	52	;'4'
   386  00FF49  35                 	db	53	;'5'
   387  00FF4A  36                 	db	54	;'6'
   388  00FF4B  37                 	db	55	;'7'
   389  00FF4C  38                 	db	56	;'8'
   390  00FF4D  39                 	db	57	;'9'
   391  00FF4E  61                 	db	97	;'a'
   392  00FF4F  62                 	db	98	;'b'
   393  00FF50  63                 	db	99	;'c'
   394  00FF51  64                 	db	100	;'d'
   395  00FF52  65                 	db	101	;'e'
   396  00FF53  66                 	db	102	;'f'
   397  00FF54  00                 	db	0
   398  00FF55                     STR_17:
   399  00FF55  20                 	db	32
   400  00FF56  20                 	db	32
   401  00FF57  20                 	db	32
   402  00FF58  20                 	db	32
   403  00FF59  20                 	db	32
   404  00FF5A  20                 	db	32
   405  00FF5B  20                 	db	32
   406  00FF5C  20                 	db	32
   407  00FF5D  20                 	db	32
   408  00FF5E  20                 	db	32
   409  00FF5F  20                 	db	32
   410  00FF60  20                 	db	32
   411  00FF61  20                 	db	32
   412  00FF62  20                 	db	32
   413  00FF63  20                 	db	32
   414  00FF64  20                 	db	32
   415  00FF65  00                 	db	0
   416  00FF66                     STR_2:
   417  00FF66  25                 	db	37
   418  00FF67  75                 	db	117	;'u'
   419  00FF68  7C                 	db	124
   420  00FF69  25                 	db	37
   421  00FF6A  75                 	db	117	;'u'
   422  00FF6B  7C                 	db	124
   423  00FF6C  25                 	db	37
   424  00FF6D  75                 	db	117	;'u'
   425  00FF6E  20                 	db	32
   426  00FF6F  20                 	db	32
   427  00FF70  20                 	db	32
   428  00FF71  20                 	db	32
   429  00FF72  20                 	db	32
   430  00FF73  20                 	db	32
   431  00FF74  20                 	db	32
   432  00FF75  20                 	db	32
   433  00FF76  00                 	db	0
   434  00FF77                     STR_7:
   435  00FF77  43                 	db	67	;'C'
   436  00FF78  6F                 	db	111	;'o'
   437  00FF79  75                 	db	117	;'u'
   438  00FF7A  6E                 	db	110	;'n'
   439  00FF7B  74                 	db	116	;'t'
   440  00FF7C  3A                 	db	58	;':'
   441  00FF7D  20                 	db	32
   442  00FF7E  25                 	db	37
   443  00FF7F  69                 	db	105	;'i'
   444  00FF80  20                 	db	32
   445  00FF81  20                 	db	32
   446  00FF82  20                 	db	32
   447  00FF83  20                 	db	32
   448  00FF84  20                 	db	32
   449  00FF85  20                 	db	32
   450  00FF86  20                 	db	32
   451  00FF87  00                 	db	0
   452  00FF88                     STR_6:
   453  00FF88  54                 	db	84	;'T'
   454  00FF89  6F                 	db	111	;'o'
   455  00FF8A  74                 	db	116	;'t'
   456  00FF8B  61                 	db	97	;'a'
   457  00FF8C  6C                 	db	108	;'l'
   458  00FF8D  20                 	db	32
   459  00FF8E  42                 	db	66	;'B'
   460  00FF8F  6F                 	db	111	;'o'
   461  00FF90  74                 	db	116	;'t'
   462  00FF91  74                 	db	116	;'t'
   463  00FF92  6C                 	db	108	;'l'
   464  00FF93  65                 	db	101	;'e'
   465  00FF94  20                 	db	32
   466  00FF95  20                 	db	32
   467  00FF96  20                 	db	32
   468  00FF97  20                 	db	32
   469  00FF98  00                 	db	0
   470  00FF99                     STR_8:
   471  00FF99  59                 	db	89	;'Y'
   472  00FF9A  4F                 	db	79	;'O'
   473  00FF9B  50                 	db	80	;'P'
   474  00FF9C  20                 	db	32
   475  00FF9D  57                 	db	87	;'W'
   476  00FF9E  69                 	db	105	;'i'
   477  00FF9F  74                 	db	116	;'t'
   478  00FFA0  68                 	db	104	;'h'
   479  00FFA1  20                 	db	32
   480  00FFA2  43                 	db	67	;'C'
   481  00FFA3  61                 	db	97	;'a'
   482  00FFA4  70                 	db	112	;'p'
   483  00FFA5  20                 	db	32
   484  00FFA6  20                 	db	32
   485  00FFA7  20                 	db	32
   486  00FFA8  20                 	db	32
   487  00FFA9  00                 	db	0
   488  00FFAA                     STR_12:
   489  00FFAA  45                 	db	69	;'E'
   490  00FFAB  53                 	db	83	;'S'
   491  00FFAC  4B                 	db	75	;'K'
   492  00FFAD  41                 	db	65	;'A'
   493  00FFAE  20                 	db	32
   494  00FFAF  57                 	db	87	;'W'
   495  00FFB0  69                 	db	105	;'i'
   496  00FFB1  74                 	db	116	;'t'
   497  00FFB2  68                 	db	104	;'h'
   498  00FFB3  20                 	db	32
   499  00FFB4  43                 	db	67	;'C'
   500  00FFB5  61                 	db	97	;'a'
   501  00FFB6  70                 	db	112	;'p'
   502  00FFB7  20                 	db	32
   503  00FFB8  20                 	db	32
   504  00FFB9  20                 	db	32
   505  00FFBA  00                 	db	0
   506  00FFBB                     STR_16:
   507  00FFBB  4F                 	db	79	;'O'
   508  00FFBC  70                 	db	112	;'p'
   509  00FFBD  65                 	db	101	;'e'
   510  00FFBE  72                 	db	114	;'r'
   511  00FFBF  61                 	db	97	;'a'
   512  00FFC0  74                 	db	116	;'t'
   513  00FFC1  69                 	db	105	;'i'
   514  00FFC2  6F                 	db	111	;'o'
   515  00FFC3  6E                 	db	110	;'n'
   516  00FFC4  20                 	db	32
   517  00FFC5  44                 	db	68	;'D'
   518  00FFC6  6F                 	db	111	;'o'
   519  00FFC7  6E                 	db	110	;'n'
   520  00FFC8  65                 	db	101	;'e'
   521  00FFC9  21                 	db	33
   522  00FFCA  20                 	db	32
   523  00FFCB  00                 	db	0
   524  00FFCC                     STR_4:
   525  00FFCC  54                 	db	84	;'T'
   526  00FFCD  6F                 	db	111	;'o'
   527  00FFCE  74                 	db	116	;'t'
   528  00FFCF  61                 	db	97	;'a'
   529  00FFD0  6C                 	db	108	;'l'
   530  00FFD1  20                 	db	32
   531  00FFD2  4F                 	db	79	;'O'
   532  00FFD3  70                 	db	112	;'p'
   533  00FFD4  65                 	db	101	;'e'
   534  00FFD5  72                 	db	114	;'r'
   535  00FFD6  61                 	db	97	;'a'
   536  00FFD7  74                 	db	116	;'t'
   537  00FFD8  69                 	db	105	;'i'
   538  00FFD9  6F                 	db	111	;'o'
   539  00FFDA  6E                 	db	110	;'n'
   540  00FFDB  20                 	db	32
   541  00FFDC  00                 	db	0
   542  00FFDD                     STR_10:
   543  00FFDD  59                 	db	89	;'Y'
   544  00FFDE  4F                 	db	79	;'O'
   545  00FFDF  50                 	db	80	;'P'
   546  00FFE0  20                 	db	32
   547  00FFE1  57                 	db	87	;'W'
   548  00FFE2  69                 	db	105	;'i'
   549  00FFE3  74                 	db	116	;'t'
   550  00FFE4  68                 	db	104	;'h'
   551  00FFE5  20                 	db	32
   552  00FFE6  4E                 	db	78	;'N'
   553  00FFE7  6F                 	db	111	;'o'
   554  00FFE8  20                 	db	32
   555  00FFE9  43                 	db	67	;'C'
   556  00FFEA  61                 	db	97	;'a'
   557  00FFEB  70                 	db	112	;'p'
   558  00FFEC  20                 	db	32
   559  00FFED  00                 	db	0
   560  00FFEE                     STR_14:
   561  00FFEE  45                 	db	69	;'E'
   562  00FFEF  53                 	db	83	;'S'
   563  00FFF0  4B                 	db	75	;'K'
   564  00FFF1  41                 	db	65	;'A'
   565  00FFF2  20                 	db	32
   566  00FFF3  57                 	db	87	;'W'
   567  00FFF4  69                 	db	105	;'i'
   568  00FFF5  74                 	db	116	;'t'
   569  00FFF6  68                 	db	104	;'h'
   570  00FFF7  20                 	db	32
   571  00FFF8  4E                 	db	78	;'N'
   572  00FFF9  6F                 	db	111	;'o'
   573  00FFFA  20                 	db	32
   574  00FFFB  43                 	db	67	;'C'
   575  00FFFC  61                 	db	97	;'a'
   576  00FFFD  70                 	db	112	;'p'
   577  00FFFE  00                 	db	0
   578  0000                     
   579                           ; #config settings
   580  00FFFF  00                 	db	0	; dummy byte at the end
   581  0000                     
   582                           	psect	cinit
   583  002A9C                     __pcinit:
   584                           	opt stack 0
   585  002A9C                     start_initialization:
   586                           	opt stack 0
   587  002A9C                     __initialization:
   588                           	opt stack 0
   589                           
   590                           ; Initialize objects allocated to BANK1 (16 bytes)
   591                           ; load TBLPTR registers with __pidataBANK1
   592  002A9C  0EAE               	movlw	low __pidataBANK1
   593  002A9E  6EF6               	movwf	tblptrl,c
   594  002AA0  0E2B               	movlw	high __pidataBANK1
   595  002AA2  6EF7               	movwf	tblptrh,c
   596  002AA4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   597  002AA6  6EF8               	movwf	tblptru,c
   598  002AA8  EE01  F01B         	lfsr	0,__pdataBANK1
   599  002AAC  EE10 F010          	lfsr	1,16
   600  002AB0                     copy_data0:
   601  002AB0  0009               	tblrd		*+
   602  002AB2  CFF5 FFEE          	movff	tablat,postinc0
   603  002AB6  50E5               	movf	postdec1,w,c
   604  002AB8  50E1               	movf	fsr1l,w,c
   605  002ABA  E1FA               	bnz	copy_data0
   606                           
   607                           ; Clear objects allocated to BANK1 (1 bytes)
   608  002ABC  0101               	movlb	1
   609  002ABE  6B2B               	clrf	__pbssBANK1& (0+255),b
   610                           
   611                           ; Clear objects allocated to BANK0 (1 bytes)
   612  002AC0  0100               	movlb	0
   613  002AC2  6BF7               	clrf	__pbssBANK0& (0+255),b
   614                           
   615                           ; Clear objects allocated to COMRAM (2 bytes)
   616  002AC4  6A6E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   617  002AC6  6A6D               	clrf	__pbssCOMRAM& (0+255),c
   618  002AC8                     end_of_initialization:
   619                           	opt stack 0
   620  002AC8                     __end_of__initialization:
   621                           	opt stack 0
   622  002AC8  906F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   623  002ACA  926F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   624  002ACC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   625  002ACE  6EF8               	movwf	tblptru,c
   626  002AD0  0100               	movlb	0
   627  002AD2  EFE2  F00A         	goto	_main	;jump to C main() function
   628                           tblptru	equ	0xFF8
   629                           tblptrh	equ	0xFF7
   630                           tblptrl	equ	0xFF6
   631                           tablat	equ	0xFF5
   632                           postinc0	equ	0xFEE
   633                           postdec1	equ	0xFE5
   634                           fsr1l	equ	0xFE1
   635                           
   636                           	psect	bssCOMRAM
   637  00006D                     __pbssCOMRAM:
   638                           	opt stack 0
   639  00006D                     _errno:
   640                           	opt stack 0
   641  00006D                     	ds	2
   642                           tblptru	equ	0xFF8
   643                           tblptrh	equ	0xFF7
   644                           tblptrl	equ	0xFF6
   645                           tablat	equ	0xFF5
   646                           postinc0	equ	0xFEE
   647                           postdec1	equ	0xFE5
   648                           fsr1l	equ	0xFE1
   649                           
   650                           	psect	bssBANK0
   651  0000F7                     __pbssBANK0:
   652                           	opt stack 0
   653  0000F7                     _bot_type:
   654                           	opt stack 0
   655  0000F7                     	ds	1
   656                           tblptru	equ	0xFF8
   657                           tblptrh	equ	0xFF7
   658                           tblptrl	equ	0xFF6
   659                           tablat	equ	0xFF5
   660                           postinc0	equ	0xFEE
   661                           postdec1	equ	0xFE5
   662                           fsr1l	equ	0xFE1
   663                           
   664                           	psect	bssBANK1
   665  00012B                     __pbssBANK1:
   666                           	opt stack 0
   667  00012B                     _curr_state:
   668                           	opt stack 0
   669  00012B                     	ds	1
   670                           tblptru	equ	0xFF8
   671                           tblptrh	equ	0xFF7
   672                           tblptrl	equ	0xFF6
   673                           tablat	equ	0xFF5
   674                           postinc0	equ	0xFEE
   675                           postdec1	equ	0xFE5
   676                           fsr1l	equ	0xFE1
   677                           
   678                           	psect	dataBANK1
   679  00011B                     __pdataBANK1:
   680                           	opt stack 0
   681  00011B                     hex_to_dec@F3226:
   682                           	opt stack 0
   683  00011B                     	ds	16
   684                           tblptru	equ	0xFF8
   685                           tblptrh	equ	0xFF7
   686                           tblptrl	equ	0xFF6
   687                           tablat	equ	0xFF5
   688                           postinc0	equ	0xFEE
   689                           postdec1	equ	0xFE5
   690                           fsr1l	equ	0xFE1
   691                           
   692                           	psect	cstackBANK1
   693  000100                     __pcstackBANK1:
   694                           	opt stack 0
   695  000100                     main@start_time:
   696                           	opt stack 0
   697                           
   698                           ; 7 bytes @ 0x0
   699  000100                     	ds	7
   700  000107                     main@end_time:
   701                           	opt stack 0
   702                           
   703                           ; 7 bytes @ 0x7
   704  000107                     	ds	7
   705  00010E                     main@time:
   706                           	opt stack 0
   707                           
   708                           ; 7 bytes @ 0xE
   709  00010E                     	ds	7
   710  000115                     main@bot_count:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x15
   714  000115                     	ds	4
   715  000119                     main@step_state:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x19
   719  000119                     	ds	2
   720                           tblptru	equ	0xFF8
   721                           tblptrh	equ	0xFF7
   722                           tblptrl	equ	0xFF6
   723                           tablat	equ	0xFF5
   724                           postinc0	equ	0xFEE
   725                           postdec1	equ	0xFE5
   726                           fsr1l	equ	0xFE1
   727                           
   728                           	psect	cstackBANK0
   729  000080                     __pcstackBANK0:
   730                           	opt stack 0
   731  000080                     _pow$1405:
   732                           	opt stack 0
   733                           
   734                           ; 3 bytes @ 0x0
   735  000080                     	ds	3
   736  000083                     _pow$1406:
   737                           	opt stack 0
   738                           
   739                           ; 3 bytes @ 0x3
   740  000083                     	ds	3
   741  000086                     pow@sign:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x6
   745  000086                     	ds	1
   746  000087                     pow@yi:
   747                           	opt stack 0
   748                           
   749                           ; 4 bytes @ 0x7
   750  000087                     	ds	4
   751  00008B                     _dec_to_hex$1400:
   752                           	opt stack 0
   753                           
   754                           ; 3 bytes @ 0xB
   755  00008B                     	ds	3
   756  00008E                     _dec_to_hex$1401:
   757                           	opt stack 0
   758                           
   759                           ; 3 bytes @ 0xE
   760  00008E                     	ds	3
   761  000091                     dec_to_hex@temp:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x11
   765  000091                     	ds	2
   766  000093                     dec_to_hex@i:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0x13
   770  000093                     	ds	2
   771  000095                     dec_to_hex@hexnum:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0x15
   775  000095                     	ds	2
   776  000097                     dec_to_hex@quotient:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x17
   780  000097                     	ds	2
   781  000099                     ?_time_difference:
   782                           	opt stack 0
   783  000099                     time_difference@time1:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x19
   787  000099                     	ds	2
   788  00009B                     time_difference@time2:
   789                           	opt stack 0
   790                           
   791                           ; 2 bytes @ 0x1B
   792  00009B                     	ds	2
   793  00009D                     time_difference@hr1:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0x1D
   797  00009D                     	ds	2
   798  00009F                     time_difference@hr2:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x1F
   802  00009F                     	ds	2
   803  0000A1                     time_difference@min1:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x21
   807  0000A1                     	ds	2
   808  0000A3                     time_difference@min2:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x23
   812  0000A3                     	ds	2
   813  0000A5                     time_difference@s1:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x25
   817  0000A5                     	ds	2
   818  0000A7                     time_difference@s2:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x27
   822  0000A7                     	ds	2
   823  0000A9                     time_difference@d1:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x29
   827  0000A9                     	ds	2
   828  0000AB                     time_difference@d2:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x2B
   832  0000AB                     	ds	2
   833  0000AD                     time_difference@d3:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0x2D
   837  0000AD                     	ds	2
   838  0000AF                     ?_printf:
   839                           	opt stack 0
   840  0000AF                     printf@f:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x2F
   844  0000AF                     	ds	8
   845  0000B7                     ??_printf:
   846                           
   847                           ; 1 bytes @ 0x37
   848  0000B7                     	ds	4
   849  0000BB                     printf@idx:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x3B
   853  0000BB                     	ds	1
   854  0000BC                     printf@ap:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x3C
   858  0000BC                     	ds	2
   859  0000BE                     printf@prec:
   860                           	opt stack 0
   861                           
   862                           ; 1 bytes @ 0x3E
   863  0000BE                     	ds	1
   864  0000BF                     printf@val:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0x3F
   868  0000BF                     	ds	2
   869  0000C1                     printf@flag:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x41
   873  0000C1                     	ds	1
   874  0000C2                     printf@width:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x42
   878  0000C2                     	ds	2
   879  0000C4                     printf@c:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x44
   883  0000C4                     	ds	1
   884  0000C5                     init_operation@start_time:
   885                           	opt stack 0
   886  0000C5                     runtime@start_time:
   887                           	opt stack 0
   888  0000C5                     bottle_count@bot_count:
   889                           	opt stack 0
   890  0000C5                     operation_end@step_state:
   891                           	opt stack 0
   892  0000C5                     date_time@time:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x45
   896  0000C5                     	ds	2
   897  0000C7                     ??_operation_end:
   898  0000C7                     ??_date_time:
   899  0000C7                     ??_bottle_count:
   900  0000C7                     init_operation@time:
   901                           	opt stack 0
   902  0000C7                     runtime@end_time:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x47
   906  0000C7                     	ds	2
   907  0000C9                     init_operation@bot_count:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x49
   911  0000C9                     	ds	2
   912  0000CB                     init_operation@step_state:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x4B
   916  0000CB                     	ds	2
   917  0000CD                     ??_init_operation:
   918                           
   919                           ; 1 bytes @ 0x4D
   920  0000CD                     	ds	2
   921  0000CF                     init_operation@c1:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x4F
   925  0000CF                     	ds	2
   926  0000D1                     init_operation@c2:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x51
   930  0000D1                     	ds	2
   931  0000D3                     init_operation@luminosity1:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0x53
   935  0000D3                     	ds	2
   936  0000D5                     init_operation@detection_time:
   937                           	opt stack 0
   938                           
   939                           ; 7 bytes @ 0x55
   940  0000D5                     	ds	7
   941  0000DC                     _init_operation$1404:
   942                           	opt stack 0
   943                           
   944                           ; 3 bytes @ 0x5C
   945  0000DC                     	ds	3
   946  0000DF                     init_operation@i:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x5F
   950  0000DF                     	ds	2
   951  0000E1                     init_operation@red:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x61
   955  0000E1                     	ds	2
   956  0000E3                     init_operation@green:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x63
   960  0000E3                     	ds	2
   961  0000E5                     init_operation@blue:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x65
   965  0000E5                     	ds	2
   966  0000E7                     init_operation@clear:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x67
   970  0000E7                     	ds	2
   971  0000E9                     init_operation@g1:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x69
   975  0000E9                     	ds	2
   976  0000EB                     init_operation@g2:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x6B
   980  0000EB                     	ds	2
   981  0000ED                     init_operation@r1:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x6D
   985  0000ED                     	ds	2
   986  0000EF                     init_operation@b1:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x6F
   990  0000EF                     	ds	2
   991  0000F1                     init_operation@r2:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x71
   995  0000F1                     	ds	2
   996  0000F3                     init_operation@b2:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x73
  1000  0000F3                     	ds	2
  1001  0000F5                     ??_main:
  1002                           
  1003                           ; 1 bytes @ 0x75
  1004  0000F5                     	ds	2
  1005                           tblptru	equ	0xFF8
  1006                           tblptrh	equ	0xFF7
  1007                           tblptrl	equ	0xFF6
  1008                           tablat	equ	0xFF5
  1009                           postinc0	equ	0xFEE
  1010                           postdec1	equ	0xFE5
  1011                           fsr1l	equ	0xFE1
  1012                           
  1013                           	psect	cstackCOMRAM
  1014  000001                     __pcstackCOMRAM:
  1015                           	opt stack 0
  1016  000001                     ??_keypressed:
  1017  000001                     
  1018                           ; 2 bytes @ 0x0
  1019  000001                     	ds	16
  1020  000011                     ??_isdigit:
  1021  000011                     ??_I2C_Master_Wait:
  1022  000011                     ?___wmul:
  1023                           	opt stack 0
  1024  000011                     ?___awdiv:
  1025                           	opt stack 0
  1026  000011                     ?___lwdiv:
  1027                           	opt stack 0
  1028  000011                     ?___ftpack:
  1029                           	opt stack 0
  1030  000011                     ?_frexp:
  1031                           	opt stack 0
  1032  000011                     ?___ftneg:
  1033                           	opt stack 0
  1034  000011                     ?___lldiv:
  1035                           	opt stack 0
  1036  000011                     lcdNibble@temp:
  1037                           	opt stack 0
  1038  000011                     stepper@r:
  1039                           	opt stack 0
  1040  000011                     stepper_rev@r:
  1041                           	opt stack 0
  1042  000011                     ___wmul@multiplier:
  1043                           	opt stack 0
  1044  000011                     ___awdiv@dividend:
  1045                           	opt stack 0
  1046  000011                     ___lwdiv@dividend:
  1047                           	opt stack 0
  1048  000011                     ___ftpack@arg:
  1049                           	opt stack 0
  1050  000011                     ___ftneg@f1:
  1051                           	opt stack 0
  1052  000011                     frexp@value:
  1053                           	opt stack 0
  1054  000011                     ___lldiv@dividend:
  1055                           	opt stack 0
  1056                           
  1057                           ; 4 bytes @ 0x10
  1058  000011                     	ds	1
  1059  000012                     lcdNibble@data:
  1060                           	opt stack 0
  1061  000012                     I2C_Master_Read@a:
  1062                           	opt stack 0
  1063  000012                     _isdigit$947:
  1064                           	opt stack 0
  1065  000012                     I2C_Master_Write@d:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x11
  1069  000012                     	ds	1
  1070  000013                     ??_stepper:
  1071  000013                     ??_stepper_rev:
  1072  000013                     lcdInst@data:
  1073                           	opt stack 0
  1074  000013                     putch@data:
  1075                           	opt stack 0
  1076  000013                     I2C_Master_Read@temp:
  1077                           	opt stack 0
  1078  000013                     isdigit@c:
  1079                           	opt stack 0
  1080  000013                     ___wmul@multiplicand:
  1081                           	opt stack 0
  1082  000013                     ___awdiv@divisor:
  1083                           	opt stack 0
  1084  000013                     ___lwdiv@divisor:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x12
  1088  000013                     	ds	1
  1089  000014                     ??_initLCD:
  1090  000014                     ___ftpack@exp:
  1091                           	opt stack 0
  1092  000014                     update_time@time:
  1093                           	opt stack 0
  1094  000014                     stepper@i:
  1095                           	opt stack 0
  1096  000014                     stepper_rev@i:
  1097                           	opt stack 0
  1098  000014                     read_colorsensor1@red:
  1099                           	opt stack 0
  1100  000014                     read_colorsensor2@red:
  1101                           	opt stack 0
  1102  000014                     frexp@eptr:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x13
  1106  000014                     	ds	1
  1107  000015                     ___awdiv@counter:
  1108                           	opt stack 0
  1109  000015                     ___ftpack@sign:
  1110                           	opt stack 0
  1111  000015                     ___wmul@product:
  1112                           	opt stack 0
  1113  000015                     ___lwdiv@quotient:
  1114                           	opt stack 0
  1115  000015                     ___lldiv@divisor:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0x14
  1119  000015                     	ds	1
  1120  000016                     ??___ftpack:
  1121  000016                     ??_frexp:
  1122  000016                     update_time@i:
  1123                           	opt stack 0
  1124  000016                     ___awdiv@sign:
  1125                           	opt stack 0
  1126  000016                     stepper_state@step_state:
  1127                           	opt stack 0
  1128  000016                     read_colorsensor1@green:
  1129                           	opt stack 0
  1130  000016                     read_colorsensor2@green:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x15
  1134  000016                     	ds	1
  1135  000017                     ___lwdiv@counter:
  1136                           	opt stack 0
  1137  000017                     ___awdiv@quotient:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x16
  1141  000017                     	ds	1
  1142  000018                     ??_stepper_state:
  1143  000018                     ?___lwmod:
  1144                           	opt stack 0
  1145  000018                     read_colorsensor1@blue:
  1146                           	opt stack 0
  1147  000018                     read_colorsensor2@blue:
  1148                           	opt stack 0
  1149  000018                     ___lwmod@dividend:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x17
  1153  000018                     	ds	1
  1154  000019                     ?___ftdiv:
  1155                           	opt stack 0
  1156  000019                     ?___awtoft:
  1157                           	opt stack 0
  1158  000019                     ?___lltoft:
  1159                           	opt stack 0
  1160  000019                     ___awtoft@c:
  1161                           	opt stack 0
  1162  000019                     ___ftdiv@f1:
  1163                           	opt stack 0
  1164  000019                     ___lldiv@quotient:
  1165                           	opt stack 0
  1166  000019                     ___lltoft@c:
  1167                           	opt stack 0
  1168                           
  1169                           ; 4 bytes @ 0x18
  1170  000019                     	ds	1
  1171  00001A                     stepper_state@next_state:
  1172                           	opt stack 0
  1173  00001A                     read_colorsensor1@clear:
  1174                           	opt stack 0
  1175  00001A                     read_colorsensor2@clear:
  1176                           	opt stack 0
  1177  00001A                     ___lwmod@divisor:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x19
  1181  00001A                     	ds	2
  1182  00001C                     ___awtoft@sign:
  1183                           	opt stack 0
  1184  00001C                     ___lwmod@counter:
  1185                           	opt stack 0
  1186  00001C                     ___ftdiv@f2:
  1187                           	opt stack 0
  1188                           
  1189                           ; 3 bytes @ 0x1B
  1190  00001C                     	ds	1
  1191  00001D                     ??___lltoft:
  1192  00001D                     ?___ftmul:
  1193                           	opt stack 0
  1194  00001D                     ___lldiv@counter:
  1195                           	opt stack 0
  1196  00001D                     ___ftge@ff1:
  1197                           	opt stack 0
  1198  00001D                     ___ftmul@f1:
  1199                           	opt stack 0
  1200                           
  1201                           ; 3 bytes @ 0x1C
  1202  00001D                     	ds	1
  1203  00001E                     I2C_Master_Init@c:
  1204                           	opt stack 0
  1205                           
  1206                           ; 4 bytes @ 0x1D
  1207  00001E                     	ds	1
  1208  00001F                     ??___ftdiv:
  1209                           
  1210                           ; 1 bytes @ 0x1E
  1211  00001F                     	ds	1
  1212  000020                     ___ftge@ff2:
  1213                           	opt stack 0
  1214  000020                     ___ftmul@f2:
  1215                           	opt stack 0
  1216                           
  1217                           ; 3 bytes @ 0x1F
  1218  000020                     	ds	1
  1219  000021                     ___lltoft@exp:
  1220                           	opt stack 0
  1221                           
  1222                           ; 1 bytes @ 0x20
  1223  000021                     	ds	1
  1224  000022                     ??_I2C_Master_Init:
  1225  000022                     ___ftdiv@cntr:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x21
  1229  000022                     	ds	1
  1230  000023                     ??___ftmul:
  1231  000023                     ??___ftge:
  1232  000023                     ___ftdiv@f3:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x22
  1236  000023                     	ds	3
  1237  000026                     ___ftdiv@exp:
  1238                           	opt stack 0
  1239  000026                     ___ftmul@exp:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x25
  1243  000026                     	ds	1
  1244  000027                     ___ftdiv@sign:
  1245                           	opt stack 0
  1246  000027                     ___ftmul@f3_as_product:
  1247                           	opt stack 0
  1248                           
  1249                           ; 3 bytes @ 0x26
  1250  000027                     	ds	3
  1251  00002A                     ___ftmul@cntr:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x29
  1255  00002A                     	ds	1
  1256  00002B                     ___ftmul@sign:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0x2A
  1260  00002B                     	ds	1
  1261  00002C                     ?___ftadd:
  1262                           	opt stack 0
  1263  00002C                     ___ftadd@f1:
  1264                           	opt stack 0
  1265                           
  1266                           ; 3 bytes @ 0x2B
  1267  00002C                     	ds	3
  1268  00002F                     ___ftadd@f2:
  1269                           	opt stack 0
  1270                           
  1271                           ; 3 bytes @ 0x2E
  1272  00002F                     	ds	3
  1273  000032                     ??___ftadd:
  1274                           
  1275                           ; 1 bytes @ 0x31
  1276  000032                     	ds	3
  1277  000035                     ___ftadd@sign:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0x34
  1281  000035                     	ds	1
  1282  000036                     ___ftadd@exp2:
  1283                           	opt stack 0
  1284                           
  1285                           ; 1 bytes @ 0x35
  1286  000036                     	ds	1
  1287  000037                     ___ftadd@exp1:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0x36
  1291  000037                     	ds	1
  1292  000038                     ?___ftsub:
  1293                           	opt stack 0
  1294  000038                     ?_eval_poly:
  1295                           	opt stack 0
  1296  000038                     ?___fttol:
  1297                           	opt stack 0
  1298  000038                     ___ftsub@f1:
  1299                           	opt stack 0
  1300  000038                     ___fttol@f1:
  1301                           	opt stack 0
  1302  000038                     eval_poly@x:
  1303                           	opt stack 0
  1304                           
  1305                           ; 3 bytes @ 0x37
  1306  000038                     	ds	3
  1307  00003B                     eval_poly@d:
  1308                           	opt stack 0
  1309  00003B                     ___ftsub@f2:
  1310                           	opt stack 0
  1311                           
  1312                           ; 3 bytes @ 0x3A
  1313  00003B                     	ds	1
  1314  00003C                     ??___fttol:
  1315                           
  1316                           ; 1 bytes @ 0x3B
  1317  00003C                     	ds	1
  1318  00003D                     eval_poly@n:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x3C
  1322  00003D                     	ds	1
  1323  00003E                     
  1324                           ; 1 bytes @ 0x3D
  1325  00003E                     	ds	1
  1326  00003F                     ??_eval_poly:
  1327                           
  1328                           ; 1 bytes @ 0x3E
  1329  00003F                     	ds	2
  1330  000041                     ___fttol@sign1:
  1331                           	opt stack 0
  1332  000041                     eval_poly@res:
  1333                           	opt stack 0
  1334                           
  1335                           ; 3 bytes @ 0x40
  1336  000041                     	ds	1
  1337  000042                     ___fttol@lval:
  1338                           	opt stack 0
  1339                           
  1340                           ; 4 bytes @ 0x41
  1341  000042                     	ds	2
  1342  000044                     ?_log:
  1343                           	opt stack 0
  1344  000044                     ?_ldexp:
  1345                           	opt stack 0
  1346  000044                     ldexp@value:
  1347                           	opt stack 0
  1348  000044                     log@x:
  1349                           	opt stack 0
  1350                           
  1351                           ; 3 bytes @ 0x43
  1352  000044                     	ds	2
  1353  000046                     ___fttol@exp1:
  1354                           	opt stack 0
  1355                           
  1356                           ; 1 bytes @ 0x45
  1357  000046                     	ds	1
  1358  000047                     ?___altoft:
  1359                           	opt stack 0
  1360  000047                     ldexp@newexp:
  1361                           	opt stack 0
  1362  000047                     log@exponent:
  1363                           	opt stack 0
  1364  000047                     ___altoft@c:
  1365                           	opt stack 0
  1366                           
  1367                           ; 4 bytes @ 0x46
  1368  000047                     	ds	2
  1369  000049                     ??_ldexp:
  1370                           
  1371                           ; 1 bytes @ 0x48
  1372  000049                     	ds	2
  1373  00004B                     ??___altoft:
  1374                           
  1375                           ; 1 bytes @ 0x4A
  1376  00004B                     	ds	4
  1377  00004F                     ___altoft@exp:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x4E
  1381  00004F                     	ds	1
  1382  000050                     ___altoft@sign:
  1383                           	opt stack 0
  1384                           
  1385                           ; 1 bytes @ 0x4F
  1386  000050                     	ds	1
  1387  000051                     ?_floor:
  1388                           	opt stack 0
  1389  000051                     floor@x:
  1390                           	opt stack 0
  1391                           
  1392                           ; 3 bytes @ 0x50
  1393  000051                     	ds	3
  1394  000054                     floor@i:
  1395                           	opt stack 0
  1396                           
  1397                           ; 3 bytes @ 0x53
  1398  000054                     	ds	3
  1399  000057                     floor@expon:
  1400                           	opt stack 0
  1401                           
  1402                           ; 2 bytes @ 0x56
  1403  000057                     	ds	2
  1404  000059                     ?_exp:
  1405                           	opt stack 0
  1406  000059                     exp@x:
  1407                           	opt stack 0
  1408                           
  1409                           ; 3 bytes @ 0x58
  1410  000059                     	ds	3
  1411  00005C                     _exp$1407:
  1412                           	opt stack 0
  1413                           
  1414                           ; 3 bytes @ 0x5B
  1415  00005C                     	ds	3
  1416  00005F                     exp@exponent:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x5E
  1420  00005F                     	ds	2
  1421  000061                     exp@sign:
  1422                           	opt stack 0
  1423                           
  1424                           ; 1 bytes @ 0x60
  1425  000061                     	ds	1
  1426  000062                     ?_pow:
  1427                           	opt stack 0
  1428  000062                     pow@x:
  1429                           	opt stack 0
  1430                           
  1431                           ; 3 bytes @ 0x61
  1432  000062                     	ds	3
  1433  000065                     pow@y:
  1434                           	opt stack 0
  1435                           
  1436                           ; 3 bytes @ 0x64
  1437  000065                     	ds	3
  1438  000068                     ?_dec_to_hex:
  1439                           	opt stack 0
  1440  000068                     dec_to_hex@num:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x67
  1444  000068                     	ds	2
  1445  00006A                     ??_time_difference:
  1446                           
  1447                           ; 1 bytes @ 0x69
  1448  00006A                     	ds	2
  1449  00006C                     date_time@i:
  1450                           	opt stack 0
  1451                           
  1452                           ; 1 bytes @ 0x6B
  1453  00006C                     	ds	1
  1454                           tblptru	equ	0xFF8
  1455                           tblptrh	equ	0xFF7
  1456                           tblptrl	equ	0xFF6
  1457                           tablat	equ	0xFF5
  1458                           postinc0	equ	0xFEE
  1459                           postdec1	equ	0xFE5
  1460                           fsr1l	equ	0xFE1
  1461                           
  1462 ;;
  1463 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1464 ;;
  1465 ;; *************** function _main *****************
  1466 ;; Defined at:
  1467 ;;		line 70 in file "main.c"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;		None
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;  time            7   14[BANK1 ] unsigned char [7]
  1472 ;;  end_time        7    7[BANK1 ] unsigned char [7]
  1473 ;;  start_time      7    0[BANK1 ] unsigned char [7]
  1474 ;;  bot_count       4   21[BANK1 ] unsigned char [4]
  1475 ;;  step_state      2   25[BANK1 ] unsigned char [2]
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  1    wreg      void 
  1478 ;; Registers used:
  1479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Locals:         0       0      27       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;      Totals:         0       2      27       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;Total ram usage:       29 bytes
  1490 ;; Hardware stack levels required when called:    9
  1491 ;; This function calls:
  1492 ;;		_I2C_Master_Init
  1493 ;;		_bottle_count
  1494 ;;		_date_time
  1495 ;;		_initLCD
  1496 ;;		_init_operation
  1497 ;;		_lcdInst
  1498 ;;		_operation_end
  1499 ;;		_printf
  1500 ;;		_runtime
  1501 ;;		_update_time
  1502 ;; This function is called by:
  1503 ;;		Startup code after reset
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text0
  1508  0015C4                     __ptext0:
  1509                           	opt stack 0
  1510  0015C4                     _main:
  1511                           	opt stack 22
  1512                           
  1513                           ;main.c: 74: TRISA = 0xFF;
  1514                           
  1515                           ;incstack = 0
  1516  0015C4  6892               	setf	3986,c	;volatile
  1517                           
  1518                           ;main.c: 75: TRISB = 0xFF;
  1519  0015C6  6893               	setf	3987,c	;volatile
  1520                           
  1521                           ;main.c: 76: TRISC = 0x18;
  1522  0015C8  0E18               	movlw	24
  1523  0015CA  6E94               	movwf	3988,c	;volatile
  1524                           
  1525                           ;main.c: 77: TRISD = 0x00;
  1526  0015CC  0E00               	movlw	0
  1527  0015CE  6E95               	movwf	3989,c	;volatile
  1528                           
  1529                           ;main.c: 78: TRISE = 0x00;
  1530  0015D0  0E00               	movlw	0
  1531  0015D2  6E96               	movwf	3990,c	;volatile
  1532                           
  1533                           ;main.c: 80: LATA = 0x00;
  1534  0015D4  0E00               	movlw	0
  1535  0015D6  6E89               	movwf	3977,c	;volatile
  1536                           
  1537                           ;main.c: 81: LATB = 0x00;
  1538  0015D8  0E00               	movlw	0
  1539  0015DA  6E8A               	movwf	3978,c	;volatile
  1540                           
  1541                           ;main.c: 82: LATC = 0x00;
  1542  0015DC  0E00               	movlw	0
  1543  0015DE  6E8B               	movwf	3979,c	;volatile
  1544                           
  1545                           ;main.c: 83: LATD = 0x00;
  1546  0015E0  0E00               	movlw	0
  1547  0015E2  6E8C               	movwf	3980,c	;volatile
  1548                           
  1549                           ;main.c: 84: LATE = 0x00;
  1550  0015E4  0E00               	movlw	0
  1551  0015E6  6E8D               	movwf	3981,c	;volatile
  1552                           
  1553                           ;main.c: 86: ADCON0 = 0x00;
  1554  0015E8  0E00               	movlw	0
  1555  0015EA  6EC2               	movwf	4034,c	;volatile
  1556                           
  1557                           ;main.c: 87: ADCON1 = 0xFF;
  1558  0015EC  68C1               	setf	4033,c	;volatile
  1559                           
  1560                           ;main.c: 89: INT1IE = 1;
  1561  0015EE  86F0               	bsf	intcon3,3,c	;volatile
  1562                           
  1563                           ;main.c: 90: (INTCONbits.GIE = 1);
  1564  0015F0  8EF2               	bsf	intcon,7,c	;volatile
  1565                           
  1566                           ;main.c: 92: nRBPU = 0;
  1567  0015F2  9EF1               	bcf	intcon2,7,c	;volatile
  1568                           
  1569                           ;main.c: 96: lcdInst(0b00000001);;
  1570  0015F4  0E01               	movlw	1
  1571  0015F6  ECE5  F015         	call	_lcdInst
  1572                           
  1573                           ;main.c: 97: initLCD();
  1574  0015FA  ECEA  F014         	call	_initLCD	;wreg free
  1575                           
  1576                           ;main.c: 98: unsigned char time[7];
  1577                           ;main.c: 99: unsigned char start_time[7];
  1578                           ;main.c: 100: unsigned char end_time[7];
  1579                           ;main.c: 101: unsigned char bot_count[4];
  1580                           ;main.c: 102: unsigned char step_state[2];
  1581                           ;main.c: 105: I2C_Master_Init(10000);
  1582  0015FE  0E10               	movlw	16
  1583  001600  6E1E               	movwf	I2C_Master_Init@c,c
  1584  001602  0E27               	movlw	39
  1585  001604  6E1F               	movwf	I2C_Master_Init@c+1,c
  1586  001606  0E00               	movlw	0
  1587  001608  6E20               	movwf	I2C_Master_Init@c+2,c
  1588  00160A  0E00               	movlw	0
  1589  00160C  6E21               	movwf	I2C_Master_Init@c+3,c
  1590  00160E  EC48  F014         	call	_I2C_Master_Init	;wreg free
  1591                           
  1592                           ;main.c: 108: lcdInst(0b00000001);;
  1593  001612  0E01               	movlw	1
  1594  001614  ECE5  F015         	call	_lcdInst
  1595                           
  1596                           ;main.c: 109: initLCD();
  1597  001618  ECEA  F014         	call	_initLCD	;wreg free
  1598                           
  1599                           ;main.c: 110: lcdInst(0b10000000);;
  1600  00161C  0E80               	movlw	128
  1601  00161E  ECE5  F015         	call	_lcdInst
  1602                           
  1603                           ;main.c: 112: printf("Press 1 to begin operation");
  1604  001622  0EE8               	movlw	low STR_1
  1605  001624  0100               	movlb	0	; () banked
  1606  001626  6FAF               	movwf	printf@f& (0+255),b
  1607  001628  0EFE               	movlw	high STR_1
  1608  00162A  0100               	movlb	0	; () banked
  1609  00162C  6FB0               	movwf	(printf@f+1)& (0+255),b
  1610  00162E  ECC6  F003         	call	_printf	;wreg free
  1611                           
  1612                           ;main.c: 113: curr_state = STANDBY;
  1613  001632  0E00               	movlw	0
  1614  001634  0101               	movlb	1	; () banked
  1615  001636  6F2B               	movwf	_curr_state& (0+255),b
  1616                           
  1617                           ; BSR set to: 1
  1618                           ;main.c: 114: bot_type = O;
  1619  001638  0E05               	movlw	5
  1620  00163A  0100               	movlb	0	; () banked
  1621  00163C  6FF7               	movwf	_bot_type& (0+255),b
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;main.c: 116: switch(curr_state){
  1625                           
  1626                           ;main.c: 115: while (1){
  1627  00163E  D04B               	goto	l4418
  1628  001640                     l4404:
  1629                           
  1630                           ;main.c: 118: operation_end(step_state);
  1631  001640  0E19               	movlw	low main@step_state
  1632  001642  0100               	movlb	0	; () banked
  1633  001644  6FC5               	movwf	operation_end@step_state& (0+255),b
  1634  001646  0E01               	movlw	high main@step_state
  1635  001648  0100               	movlb	0	; () banked
  1636  00164A  6FC6               	movwf	(operation_end@step_state+1)& (0+255),b
  1637  00164C  ECE2  F013         	call	_operation_end	;wreg free
  1638                           
  1639                           ;main.c: 119: break;
  1640  001650  D053               	goto	l4420
  1641  001652                     l4406:
  1642                           
  1643                           ;main.c: 121: init_operation(start_time, time, bot_count, step_state);
  1644  001652  0E00               	movlw	low main@start_time
  1645  001654  0100               	movlb	0	; () banked
  1646  001656  6FC5               	movwf	init_operation@start_time& (0+255),b
  1647  001658  0E01               	movlw	high main@start_time
  1648  00165A  0100               	movlb	0	; () banked
  1649  00165C  6FC6               	movwf	(init_operation@start_time+1)& (0+255),b
  1650  00165E  0E0E               	movlw	low main@time
  1651  001660  0100               	movlb	0	; () banked
  1652  001662  6FC7               	movwf	init_operation@time& (0+255),b
  1653  001664  0E01               	movlw	high main@time
  1654  001666  0100               	movlb	0	; () banked
  1655  001668  6FC8               	movwf	(init_operation@time+1)& (0+255),b
  1656  00166A  0E15               	movlw	low main@bot_count
  1657  00166C  0100               	movlb	0	; () banked
  1658  00166E  6FC9               	movwf	init_operation@bot_count& (0+255),b
  1659  001670  0E01               	movlw	high main@bot_count
  1660  001672  0100               	movlb	0	; () banked
  1661  001674  6FCA               	movwf	(init_operation@bot_count+1)& (0+255),b
  1662  001676  0E19               	movlw	low main@step_state
  1663  001678  0100               	movlb	0	; () banked
  1664  00167A  6FCB               	movwf	init_operation@step_state& (0+255),b
  1665  00167C  0E01               	movlw	high main@step_state
  1666  00167E  0100               	movlb	0	; () banked
  1667  001680  6FCC               	movwf	(init_operation@step_state+1)& (0+255),b
  1668  001682  EC09  F000         	call	_init_operation	;wreg free
  1669                           
  1670                           ;main.c: 122: update_time(end_time);
  1671  001686  0E07               	movlw	low main@end_time
  1672  001688  6E14               	movwf	update_time@time,c
  1673  00168A  0E01               	movlw	high main@end_time
  1674  00168C  6E15               	movwf	update_time@time+1,c
  1675  00168E  ECA9  F013         	call	_update_time	;wreg free
  1676                           
  1677                           ;main.c: 123: break;
  1678  001692  D032               	goto	l4420
  1679  001694                     l4410:
  1680                           
  1681                           ;main.c: 125: date_time(time);
  1682  001694  0E0E               	movlw	low main@time
  1683  001696  0100               	movlb	0	; () banked
  1684  001698  6FC5               	movwf	date_time@time& (0+255),b
  1685  00169A  0E01               	movlw	high main@time
  1686  00169C  0100               	movlb	0	; () banked
  1687  00169E  6FC6               	movwf	(date_time@time+1)& (0+255),b
  1688  0016A0  EC8B  F00B         	call	_date_time	;wreg free
  1689                           
  1690                           ;main.c: 126: break;
  1691  0016A4  D029               	goto	l4420
  1692  0016A6                     l4412:
  1693                           
  1694                           ;main.c: 128: bottle_count(bot_count);
  1695  0016A6  0E15               	movlw	low main@bot_count
  1696  0016A8  0100               	movlb	0	; () banked
  1697  0016AA  6FC5               	movwf	bottle_count@bot_count& (0+255),b
  1698  0016AC  0E01               	movlw	high main@bot_count
  1699  0016AE  0100               	movlb	0	; () banked
  1700  0016B0  6FC6               	movwf	(bottle_count@bot_count+1)& (0+255),b
  1701  0016B2  ECAD  F005         	call	_bottle_count	;wreg free
  1702                           
  1703                           ;main.c: 129: break;
  1704  0016B6  D020               	goto	l4420
  1705  0016B8                     l4414:
  1706                           
  1707                           ;main.c: 131: runtime(start_time, end_time);
  1708  0016B8  0E00               	movlw	low main@start_time
  1709  0016BA  0100               	movlb	0	; () banked
  1710  0016BC  6FC5               	movwf	runtime@start_time& (0+255),b
  1711  0016BE  0E01               	movlw	high main@start_time
  1712  0016C0  0100               	movlb	0	; () banked
  1713  0016C2  6FC6               	movwf	(runtime@start_time+1)& (0+255),b
  1714  0016C4  0E07               	movlw	low main@end_time
  1715  0016C6  0100               	movlb	0	; () banked
  1716  0016C8  6FC7               	movwf	runtime@end_time& (0+255),b
  1717  0016CA  0E01               	movlw	high main@end_time
  1718  0016CC  0100               	movlb	0	; () banked
  1719  0016CE  6FC8               	movwf	(runtime@end_time+1)& (0+255),b
  1720  0016D0  ECC5  F014         	call	_runtime	;wreg free
  1721                           
  1722                           ;main.c: 133: }
  1723                           
  1724                           ;main.c: 132: break;
  1725  0016D4  D011               	goto	l4420
  1726  0016D6                     l4418:
  1727  0016D6  0101               	movlb	1	; () banked
  1728  0016D8  512B               	movf	_curr_state& (0+255),w,b
  1729                           
  1730                           ; Switch size 1, requested type "space"
  1731                           ; Number of cases is 5, Range of values is 1 to 5
  1732                           ; switch strategies available:
  1733                           ; Name         Instructions Cycles
  1734                           ; simple_byte           16     9 (average)
  1735                           ;	Chosen strategy is simple_byte
  1736  0016DA  0A01               	xorlw	1	; case 1
  1737  0016DC  B4D8               	btfsc	status,2,c
  1738  0016DE  D7B9               	goto	l4406
  1739  0016E0  0A03               	xorlw	3	; case 2
  1740  0016E2  B4D8               	btfsc	status,2,c
  1741  0016E4  D7AD               	goto	l4404
  1742  0016E6  0A01               	xorlw	1	; case 3
  1743  0016E8  B4D8               	btfsc	status,2,c
  1744  0016EA  D7D4               	goto	l4410
  1745  0016EC  0A07               	xorlw	7	; case 4
  1746  0016EE  B4D8               	btfsc	status,2,c
  1747  0016F0  D7DA               	goto	l4412
  1748  0016F2  0A01               	xorlw	1	; case 5
  1749  0016F4  B4D8               	btfsc	status,2,c
  1750  0016F6  D7E0               	goto	l4414
  1751  0016F8                     l4420:
  1752                           
  1753                           ;main.c: 134: _delay((unsigned long)((100)*(10000000/4000.0)));
  1754  0016F8  0E02               	movlw	2
  1755  0016FA  0100               	movlb	0	; () banked
  1756  0016FC  6FF6               	movwf	(??_main+1)& (0+255),b
  1757  0016FE  0E45               	movlw	69
  1758  001700  0100               	movlb	0	; () banked
  1759  001702  6FF5               	movwf	??_main& (0+255),b
  1760  001704  0EA9               	movlw	169
  1761  001706                     u3837:
  1762  001706  2EE8               	decfsz	wreg,f,c
  1763  001708  D7FE               	bra	u3837
  1764  00170A  2FF5               	decfsz	??_main& (0+255),f,b
  1765  00170C  D7FC               	bra	u3837
  1766  00170E  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  1767  001710  D7FA               	bra	u3837
  1768  001712  D000               	nop2	
  1769  001714  D7E0               	goto	l4418
  1770  001716                     __end_of_main:
  1771                           	opt stack 0
  1772                           tblptru	equ	0xFF8
  1773                           tblptrh	equ	0xFF7
  1774                           tblptrl	equ	0xFF6
  1775                           tablat	equ	0xFF5
  1776                           intcon	equ	0xFF2
  1777                           intcon2	equ	0xFF1
  1778                           intcon3	equ	0xFF0
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           postdec1	equ	0xFE5
  1782                           fsr1l	equ	0xFE1
  1783                           status	equ	0xFD8
  1784                           
  1785 ;; *************** function _runtime *****************
  1786 ;; Defined at:
  1787 ;;		line 352 in file "main.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;  start_time      2   69[BANK0 ] PTR unsigned char 
  1790 ;;		 -> main@start_time(7), 
  1791 ;;  end_time        2   71[BANK0 ] PTR unsigned char 
  1792 ;;		 -> main@end_time(7), 
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;		None
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  1    wreg      void 
  1797 ;; Registers used:
  1798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1804 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;Total ram usage:        4 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    8
  1811 ;; This function calls:
  1812 ;;		_lcdInst
  1813 ;;		_printf
  1814 ;;		_time_difference
  1815 ;; This function is called by:
  1816 ;;		_main
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text1
  1821  00298A                     __ptext1:
  1822                           	opt stack 0
  1823  00298A                     _runtime:
  1824                           	opt stack 22
  1825                           
  1826                           ;main.c: 353: lcdInst(0b10000000);;
  1827                           
  1828                           ;incstack = 0
  1829  00298A  0E80               	movlw	128
  1830  00298C  ECE5  F015         	call	_lcdInst
  1831                           
  1832                           ;main.c: 354: printf("Total Operation ");
  1833  002990  0ECC               	movlw	low STR_4
  1834  002992  0100               	movlb	0	; () banked
  1835  002994  6FAF               	movwf	printf@f& (0+255),b
  1836  002996  0EFF               	movlw	high STR_4
  1837  002998  0100               	movlb	0	; () banked
  1838  00299A  6FB0               	movwf	(printf@f+1)& (0+255),b
  1839  00299C  ECC6  F003         	call	_printf	;wreg free
  1840                           
  1841                           ;main.c: 355: lcdInst(0b11000000);;
  1842  0029A0  0EC0               	movlw	192
  1843  0029A2  ECE5  F015         	call	_lcdInst
  1844                           
  1845                           ;main.c: 356: printf("Time: %is         ", time_difference(end_time, start_time));
  1846  0029A6  0E31               	movlw	low STR_5
  1847  0029A8  0100               	movlb	0	; () banked
  1848  0029AA  6FAF               	movwf	printf@f& (0+255),b
  1849  0029AC  0EFF               	movlw	high STR_5
  1850  0029AE  0100               	movlb	0	; () banked
  1851  0029B0  6FB0               	movwf	(printf@f+1)& (0+255),b
  1852  0029B2  C0C7  F099         	movff	runtime@end_time,time_difference@time1
  1853  0029B6  C0C8  F09A         	movff	runtime@end_time+1,time_difference@time1+1
  1854  0029BA  C0C5  F09B         	movff	runtime@start_time,time_difference@time2
  1855  0029BE  C0C6  F09C         	movff	runtime@start_time+1,time_difference@time2+1
  1856  0029C2  EC61  F009         	call	_time_difference	;wreg free
  1857  0029C6  C099  F0B1         	movff	?_time_difference,?_printf+2
  1858  0029CA  C09A  F0B2         	movff	?_time_difference+1,?_printf+3
  1859  0029CE  ECC6  F003         	call	_printf	;wreg free
  1860  0029D2  0012               	return		;funcret
  1861  0029D4                     __end_of_runtime:
  1862                           	opt stack 0
  1863                           tblptru	equ	0xFF8
  1864                           tblptrh	equ	0xFF7
  1865                           tblptrl	equ	0xFF6
  1866                           tablat	equ	0xFF5
  1867                           intcon	equ	0xFF2
  1868                           intcon2	equ	0xFF1
  1869                           intcon3	equ	0xFF0
  1870                           postinc0	equ	0xFEE
  1871                           wreg	equ	0xFE8
  1872                           postdec1	equ	0xFE5
  1873                           fsr1l	equ	0xFE1
  1874                           status	equ	0xFD8
  1875                           
  1876 ;; *************** function _operation_end *****************
  1877 ;; Defined at:
  1878 ;;		line 398 in file "main.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  step_state      2   69[BANK0 ] PTR unsigned char 
  1881 ;;		 -> main@step_state(2), 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;		None
  1884 ;; Return value:  Size  Location     Type
  1885 ;;                  1    wreg      void 
  1886 ;; Registers used:
  1887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1888 ;; Tracked objects:
  1889 ;;		On entry : 0/0
  1890 ;;		On exit  : 0/0
  1891 ;;		Unchanged: 0/0
  1892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1893 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1895 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1896 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1897 ;;Total ram usage:        4 bytes
  1898 ;; Hardware stack levels used:    1
  1899 ;; Hardware stack levels required when called:    4
  1900 ;; This function calls:
  1901 ;;		_lcdInst
  1902 ;;		_printf
  1903 ;;		_stepper_state
  1904 ;; This function is called by:
  1905 ;;		_main
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           	psect	text2
  1910  0027C4                     __ptext2:
  1911                           	opt stack 0
  1912  0027C4                     _operation_end:
  1913                           	opt stack 26
  1914                           
  1915                           ;main.c: 399: PORTEbits.RE1 = 0;
  1916                           
  1917                           ;incstack = 0
  1918  0027C4  9284               	bcf	3972,1,c	;volatile
  1919                           
  1920                           ;main.c: 400: lcdInst(0b10000000);;
  1921  0027C6  0E80               	movlw	128
  1922  0027C8  ECE5  F015         	call	_lcdInst
  1923                           
  1924                           ;main.c: 401: printf("Operation Done! ");
  1925  0027CC  0EBB               	movlw	low STR_16
  1926  0027CE  0100               	movlb	0	; () banked
  1927  0027D0  6FAF               	movwf	printf@f& (0+255),b
  1928  0027D2  0EFF               	movlw	high STR_16
  1929  0027D4  0100               	movlb	0	; () banked
  1930  0027D6  6FB0               	movwf	(printf@f+1)& (0+255),b
  1931  0027D8  ECC6  F003         	call	_printf	;wreg free
  1932                           
  1933                           ;main.c: 402: lcdInst(0b11000000);;
  1934  0027DC  0EC0               	movlw	192
  1935  0027DE  ECE5  F015         	call	_lcdInst
  1936                           
  1937                           ;main.c: 403: printf("                ");
  1938  0027E2  0E55               	movlw	low STR_17
  1939  0027E4  0100               	movlb	0	; () banked
  1940  0027E6  6FAF               	movwf	printf@f& (0+255),b
  1941  0027E8  0EFF               	movlw	high STR_17
  1942  0027EA  0100               	movlb	0	; () banked
  1943  0027EC  6FB0               	movwf	(printf@f+1)& (0+255),b
  1944  0027EE  ECC6  F003         	call	_printf	;wreg free
  1945                           
  1946                           ;main.c: 404: curr_state = RUNTIME;
  1947  0027F2  0E05               	movlw	5
  1948  0027F4  0101               	movlb	1	; () banked
  1949  0027F6  6F2B               	movwf	_curr_state& (0+255),b
  1950                           
  1951                           ; BSR set to: 1
  1952                           ;main.c: 405: step_state[1] = 1;
  1953  0027F8  0100               	movlb	0	; () banked
  1954  0027FA  EE20 F001          	lfsr	2,1
  1955  0027FE  51C5               	movf	operation_end@step_state& (0+255),w,b
  1956  002800  26D9               	addwf	fsr2l,f,c
  1957  002802  51C6               	movf	(operation_end@step_state+1)& (0+255),w,b
  1958  002804  22DA               	addwfc	fsr2h,f,c
  1959  002806  0E01               	movlw	1
  1960  002808  6EDF               	movwf	indf2,c
  1961                           
  1962                           ; BSR set to: 0
  1963                           ;main.c: 406: stepper_state(step_state);
  1964  00280A  C0C5  F016         	movff	operation_end@step_state,stepper_state@step_state
  1965  00280E  C0C6  F017         	movff	operation_end@step_state+1,stepper_state@step_state+1
  1966  002812  ECA0  F007         	call	_stepper_state	;wreg free
  1967                           
  1968                           ;main.c: 407: _delay((unsigned long)((500)*(10000000/4000.0)));
  1969  002816  0E07               	movlw	7
  1970  002818  0100               	movlb	0	; () banked
  1971  00281A  6FC8               	movwf	(??_operation_end+1)& (0+255),b
  1972  00281C  0E58               	movlw	88
  1973  00281E  0100               	movlb	0	; () banked
  1974  002820  6FC7               	movwf	??_operation_end& (0+255),b
  1975  002822  0E59               	movlw	89
  1976  002824                     u3847:
  1977  002824  2EE8               	decfsz	wreg,f,c
  1978  002826  D7FE               	bra	u3847
  1979  002828  2FC7               	decfsz	??_operation_end& (0+255),f,b
  1980  00282A  D7FC               	bra	u3847
  1981  00282C  2FC8               	decfsz	(??_operation_end+1)& (0+255),f,b
  1982  00282E  D7FA               	bra	u3847
  1983  002830  D000               	nop2	
  1984  002832  0012               	return	
  1985  002834                     __end_of_operation_end:
  1986                           	opt stack 0
  1987                           tblptru	equ	0xFF8
  1988                           tblptrh	equ	0xFF7
  1989                           tblptrl	equ	0xFF6
  1990                           tablat	equ	0xFF5
  1991                           intcon	equ	0xFF2
  1992                           intcon2	equ	0xFF1
  1993                           intcon3	equ	0xFF0
  1994                           postinc0	equ	0xFEE
  1995                           wreg	equ	0xFE8
  1996                           postdec1	equ	0xFE5
  1997                           fsr1l	equ	0xFE1
  1998                           indf2	equ	0xFDF
  1999                           fsr2h	equ	0xFDA
  2000                           fsr2l	equ	0xFD9
  2001                           status	equ	0xFD8
  2002                           
  2003 ;; *************** function _init_operation *****************
  2004 ;; Defined at:
  2005 ;;		line 259 in file "main.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  start_time      2   69[BANK0 ] PTR unsigned char 
  2008 ;;		 -> main@start_time(7), 
  2009 ;;  time            2   71[BANK0 ] PTR unsigned char 
  2010 ;;		 -> main@time(7), 
  2011 ;;  bot_count       2   73[BANK0 ] PTR unsigned char 
  2012 ;;		 -> main@bot_count(4), 
  2013 ;;  step_state      2   75[BANK0 ] PTR unsigned char 
  2014 ;;		 -> main@step_state(2), 
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;  b2              2  115[BANK0 ] int 
  2017 ;;  r2              2  113[BANK0 ] int 
  2018 ;;  b1              2  111[BANK0 ] int 
  2019 ;;  r1              2  109[BANK0 ] int 
  2020 ;;  g2              2  107[BANK0 ] int 
  2021 ;;  g1              2  105[BANK0 ] int 
  2022 ;;  luminosity1     2   83[BANK0 ] int 
  2023 ;;  c2              2   81[BANK0 ] int 
  2024 ;;  c1              2   79[BANK0 ] int 
  2025 ;;  i               2   95[BANK0 ] int 
  2026 ;;  detection_ti    7   85[BANK0 ] unsigned char [7]
  2027 ;;  clear           2  103[BANK0 ] unsigned char [2]
  2028 ;;  blue            2  101[BANK0 ] unsigned char [2]
  2029 ;;  green           2   99[BANK0 ] unsigned char [2]
  2030 ;;  red             2   97[BANK0 ] unsigned char [2]
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2040 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Locals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Totals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;Total ram usage:       48 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    8
  2047 ;; This function calls:
  2048 ;;		___awdiv
  2049 ;;		___awtoft
  2050 ;;		___ftadd
  2051 ;;		___ftge
  2052 ;;		___ftmul
  2053 ;;		___fttol
  2054 ;;		_initLCD
  2055 ;;		_lcdInst
  2056 ;;		_printf
  2057 ;;		_read_colorsensor1
  2058 ;;		_read_colorsensor2
  2059 ;;		_stepper_state
  2060 ;;		_time_difference
  2061 ;;		_update_time
  2062 ;; This function is called by:
  2063 ;;		_main
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text3
  2068  000012                     __ptext3:
  2069                           	opt stack 0
  2070  000012                     _init_operation:
  2071                           	opt stack 22
  2072                           
  2073                           ;main.c: 260: update_time(start_time);
  2074                           
  2075                           ;incstack = 0
  2076  000012  C0C5  F014         	movff	init_operation@start_time,update_time@time
  2077  000016  C0C6  F015         	movff	init_operation@start_time+1,update_time@time+1
  2078  00001A  ECA9  F013         	call	_update_time	;wreg free
  2079                           
  2080                           ;main.c: 261: update_time(time);
  2081  00001E  C0C7  F014         	movff	init_operation@time,update_time@time
  2082  000022  C0C8  F015         	movff	init_operation@time+1,update_time@time+1
  2083  000026  ECA9  F013         	call	_update_time	;wreg free
  2084                           
  2085                           ;main.c: 262: lcdInst(0b00000001);;
  2086  00002A  0E01               	movlw	1
  2087  00002C  ECE5  F015         	call	_lcdInst
  2088                           
  2089                           ;main.c: 263: initLCD();
  2090  000030  ECEA  F014         	call	_initLCD	;wreg free
  2091                           
  2092                           ;main.c: 264: step_state[0] = 1;
  2093  000034  C0CB  FFD9         	movff	init_operation@step_state,fsr2l
  2094  000038  C0CC  FFDA         	movff	init_operation@step_state+1,fsr2h
  2095  00003C  0E01               	movlw	1
  2096  00003E  6EDF               	movwf	indf2,c
  2097                           
  2098                           ;main.c: 265: step_state[1] = 1;
  2099  000040  0100               	movlb	0	; () banked
  2100  000042  EE20 F001          	lfsr	2,1
  2101  000046  51CB               	movf	init_operation@step_state& (0+255),w,b
  2102  000048  26D9               	addwf	fsr2l,f,c
  2103  00004A  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  2104  00004C  22DA               	addwfc	fsr2h,f,c
  2105  00004E  0E01               	movlw	1
  2106  000050  6EDF               	movwf	indf2,c
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;main.c: 267: unsigned char detection_time[7];
  2110                           ;main.c: 268: update_time(detection_time);
  2111  000052  0ED5               	movlw	low init_operation@detection_time
  2112  000054  6E14               	movwf	update_time@time,c
  2113  000056  0E00               	movlw	high init_operation@detection_time
  2114  000058  6E15               	movwf	update_time@time+1,c
  2115  00005A  ECA9  F013         	call	_update_time	;wreg free
  2116                           
  2117                           ;main.c: 269: for (int i = 0; i<4; i++){
  2118  00005E  0E00               	movlw	0
  2119  000060  0100               	movlb	0	; () banked
  2120  000062  6FE0               	movwf	(init_operation@i+1)& (0+255),b
  2121  000064  0E00               	movlw	0
  2122  000066  6FDF               	movwf	init_operation@i& (0+255),b
  2123                           
  2124                           ; BSR set to: 0
  2125  000068  0100               	movlb	0	; () banked
  2126  00006A  BFE0               	btfsc	(init_operation@i+1)& (0+255),7,b
  2127  00006C  D008               	goto	l4244
  2128  00006E  0100               	movlb	0	; () banked
  2129  000070  51E0               	movf	(init_operation@i+1)& (0+255),w,b
  2130  000072  E11B               	bnz	l166
  2131  000074  0E04               	movlw	4
  2132  000076  0100               	movlb	0	; () banked
  2133  000078  5DDF               	subwf	init_operation@i& (0+255),w,b
  2134  00007A  B0D8               	btfsc	status,0,c
  2135  00007C  D016               	goto	l166
  2136  00007E                     l4244:
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;main.c: 270: bot_count[i] = 0;
  2140  00007E  0100               	movlb	0	; () banked
  2141  000080  51DF               	movf	init_operation@i& (0+255),w,b
  2142  000082  0100               	movlb	0	; () banked
  2143  000084  25C9               	addwf	init_operation@bot_count& (0+255),w,b
  2144  000086  6ED9               	movwf	fsr2l,c
  2145  000088  0100               	movlb	0	; () banked
  2146  00008A  51E0               	movf	(init_operation@i+1)& (0+255),w,b
  2147  00008C  0100               	movlb	0	; () banked
  2148  00008E  21CA               	addwfc	(init_operation@bot_count+1)& (0+255),w,b
  2149  000090  6EDA               	movwf	fsr2h,c
  2150  000092  0E00               	movlw	0
  2151  000094  6EDF               	movwf	indf2,c
  2152                           
  2153                           ; BSR set to: 0
  2154  000096  0100               	movlb	0	; () banked
  2155  000098  4BDF               	infsnz	init_operation@i& (0+255),f,b
  2156  00009A  2BE0               	incf	(init_operation@i+1)& (0+255),f,b
  2157                           
  2158                           ; BSR set to: 0
  2159  00009C  0100               	movlb	0	; () banked
  2160  00009E  BFE0               	btfsc	(init_operation@i+1)& (0+255),7,b
  2161  0000A0  D7EE               	goto	l4244
  2162  0000A2  0100               	movlb	0	; () banked
  2163  0000A4  51E0               	movf	(init_operation@i+1)& (0+255),w,b
  2164  0000A6  E101               	bnz	u3700
  2165  0000A8  D7E5               	goto	L1
  2166  0000AA                     u3700:
  2167  0000AA                     l166:
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;main.c: 271: }
  2171                           ;main.c: 273: unsigned char red[2];
  2172                           ;main.c: 274: unsigned char green[2];
  2173                           ;main.c: 275: unsigned char blue[2];
  2174                           ;main.c: 276: unsigned char clear[2];
  2175                           ;main.c: 278: PORTEbits.RE1 = 1;
  2176  0000AA  8284               	bsf	3972,1,c	;volatile
  2177                           
  2178                           ;main.c: 279: PORTEbits.RE0 = 1;
  2179  0000AC  8084               	bsf	3972,0,c	;volatile
  2180                           
  2181                           ;main.c: 281: while((curr_state != OPERATION_END) && (time_difference(time, detection_ti
      +                          me) <20)){
  2182  0000AE  D34E               	goto	l4362
  2183  0000B0                     l4250:
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;main.c: 282: update_time(time);
  2187  0000B0  C0C7  F014         	movff	init_operation@time,update_time@time
  2188  0000B4  C0C8  F015         	movff	init_operation@time+1,update_time@time+1
  2189  0000B8  ECA9  F013         	call	_update_time	;wreg free
  2190                           
  2191                           ;main.c: 290: read_colorsensor1(red, green, blue, clear);
  2192  0000BC  0EE1               	movlw	low init_operation@red
  2193  0000BE  6E14               	movwf	read_colorsensor1@red,c
  2194  0000C0  0E00               	movlw	high init_operation@red
  2195  0000C2  6E15               	movwf	read_colorsensor1@red+1,c
  2196  0000C4  0EE3               	movlw	low init_operation@green
  2197  0000C6  6E16               	movwf	read_colorsensor1@green,c
  2198  0000C8  0E00               	movlw	high init_operation@green
  2199  0000CA  6E17               	movwf	read_colorsensor1@green+1,c
  2200  0000CC  0EE5               	movlw	low init_operation@blue
  2201  0000CE  6E18               	movwf	read_colorsensor1@blue,c
  2202  0000D0  0E00               	movlw	high init_operation@blue
  2203  0000D2  6E19               	movwf	read_colorsensor1@blue+1,c
  2204  0000D4  0EE7               	movlw	low init_operation@clear
  2205  0000D6  6E1A               	movwf	read_colorsensor1@clear,c
  2206  0000D8  0E00               	movlw	high init_operation@clear
  2207  0000DA  6E1B               	movwf	read_colorsensor1@clear+1,c
  2208  0000DC  EC4E  F00D         	call	_read_colorsensor1	;wreg free
  2209                           
  2210                           ;main.c: 291: int r1 = (red[0]<<8) | red[1];
  2211  0000E0  0100               	movlb	0	; () banked
  2212  0000E2  51E2               	movf	(init_operation@red+1)& (0+255),w,b
  2213  0000E4  C0E1  F0CD         	movff	init_operation@red,??_init_operation
  2214  0000E8  0100               	movlb	0	; () banked
  2215  0000EA  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2216  0000EC  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2217  0000F0  0100               	movlb	0	; () banked
  2218  0000F2  6BCD               	clrf	??_init_operation& (0+255),b
  2219  0000F4  0100               	movlb	0	; () banked
  2220  0000F6  11CD               	iorwf	??_init_operation& (0+255),w,b
  2221  0000F8  0100               	movlb	0	; () banked
  2222  0000FA  6FED               	movwf	init_operation@r1& (0+255),b
  2223  0000FC  0100               	movlb	0	; () banked
  2224  0000FE  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2225  000100  0100               	movlb	0	; () banked
  2226  000102  6FEE               	movwf	(init_operation@r1+1)& (0+255),b
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;main.c: 292: int g1 = (green[0]<<8) | green[1];
  2230  000104  0100               	movlb	0	; () banked
  2231  000106  51E4               	movf	(init_operation@green+1)& (0+255),w,b
  2232  000108  C0E3  F0CD         	movff	init_operation@green,??_init_operation
  2233  00010C  0100               	movlb	0	; () banked
  2234  00010E  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2235  000110  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2236  000114  0100               	movlb	0	; () banked
  2237  000116  6BCD               	clrf	??_init_operation& (0+255),b
  2238  000118  0100               	movlb	0	; () banked
  2239  00011A  11CD               	iorwf	??_init_operation& (0+255),w,b
  2240  00011C  0100               	movlb	0	; () banked
  2241  00011E  6FE9               	movwf	init_operation@g1& (0+255),b
  2242  000120  0100               	movlb	0	; () banked
  2243  000122  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2244  000124  0100               	movlb	0	; () banked
  2245  000126  6FEA               	movwf	(init_operation@g1+1)& (0+255),b
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;main.c: 293: int b1 = (blue[0]<<8) | blue[1];
  2249  000128  0100               	movlb	0	; () banked
  2250  00012A  51E6               	movf	(init_operation@blue+1)& (0+255),w,b
  2251  00012C  C0E5  F0CD         	movff	init_operation@blue,??_init_operation
  2252  000130  0100               	movlb	0	; () banked
  2253  000132  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2254  000134  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2255  000138  0100               	movlb	0	; () banked
  2256  00013A  6BCD               	clrf	??_init_operation& (0+255),b
  2257  00013C  0100               	movlb	0	; () banked
  2258  00013E  11CD               	iorwf	??_init_operation& (0+255),w,b
  2259  000140  0100               	movlb	0	; () banked
  2260  000142  6FEF               	movwf	init_operation@b1& (0+255),b
  2261  000144  0100               	movlb	0	; () banked
  2262  000146  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2263  000148  0100               	movlb	0	; () banked
  2264  00014A  6FF0               	movwf	(init_operation@b1+1)& (0+255),b
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;main.c: 294: int c1 = (clear[0]<<8) | clear[1];
  2268  00014C  0100               	movlb	0	; () banked
  2269  00014E  51E8               	movf	(init_operation@clear+1)& (0+255),w,b
  2270  000150  C0E7  F0CD         	movff	init_operation@clear,??_init_operation
  2271  000154  0100               	movlb	0	; () banked
  2272  000156  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2273  000158  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2274  00015C  0100               	movlb	0	; () banked
  2275  00015E  6BCD               	clrf	??_init_operation& (0+255),b
  2276  000160  0100               	movlb	0	; () banked
  2277  000162  11CD               	iorwf	??_init_operation& (0+255),w,b
  2278  000164  0100               	movlb	0	; () banked
  2279  000166  6FCF               	movwf	init_operation@c1& (0+255),b
  2280  000168  0100               	movlb	0	; () banked
  2281  00016A  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2282  00016C  0100               	movlb	0	; () banked
  2283  00016E  6FD0               	movwf	(init_operation@c1+1)& (0+255),b
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;main.c: 295: read_colorsensor2(red, green, blue, clear);
  2287  000170  0EE1               	movlw	low init_operation@red
  2288  000172  6E14               	movwf	read_colorsensor2@red,c
  2289  000174  0E00               	movlw	high init_operation@red
  2290  000176  6E15               	movwf	read_colorsensor2@red+1,c
  2291  000178  0EE3               	movlw	low init_operation@green
  2292  00017A  6E16               	movwf	read_colorsensor2@green,c
  2293  00017C  0E00               	movlw	high init_operation@green
  2294  00017E  6E17               	movwf	read_colorsensor2@green+1,c
  2295  000180  0EE5               	movlw	low init_operation@blue
  2296  000182  6E18               	movwf	read_colorsensor2@blue,c
  2297  000184  0E00               	movlw	high init_operation@blue
  2298  000186  6E19               	movwf	read_colorsensor2@blue+1,c
  2299  000188  0EE7               	movlw	low init_operation@clear
  2300  00018A  6E1A               	movwf	read_colorsensor2@clear,c
  2301  00018C  0E00               	movlw	high init_operation@clear
  2302  00018E  6E1B               	movwf	read_colorsensor2@clear+1,c
  2303  000190  ECC1  F00C         	call	_read_colorsensor2	;wreg free
  2304                           
  2305                           ;main.c: 296: int r2 = (red[0]<<8) | red[1];
  2306  000194  0100               	movlb	0	; () banked
  2307  000196  51E2               	movf	(init_operation@red+1)& (0+255),w,b
  2308  000198  C0E1  F0CD         	movff	init_operation@red,??_init_operation
  2309  00019C  0100               	movlb	0	; () banked
  2310  00019E  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2311  0001A0  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2312  0001A4  0100               	movlb	0	; () banked
  2313  0001A6  6BCD               	clrf	??_init_operation& (0+255),b
  2314  0001A8  0100               	movlb	0	; () banked
  2315  0001AA  11CD               	iorwf	??_init_operation& (0+255),w,b
  2316  0001AC  0100               	movlb	0	; () banked
  2317  0001AE  6FF1               	movwf	init_operation@r2& (0+255),b
  2318  0001B0  0100               	movlb	0	; () banked
  2319  0001B2  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2320  0001B4  0100               	movlb	0	; () banked
  2321  0001B6  6FF2               	movwf	(init_operation@r2+1)& (0+255),b
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;main.c: 297: int g2 = (green[0]<<8) | green[1];
  2325  0001B8  0100               	movlb	0	; () banked
  2326  0001BA  51E4               	movf	(init_operation@green+1)& (0+255),w,b
  2327  0001BC  C0E3  F0CD         	movff	init_operation@green,??_init_operation
  2328  0001C0  0100               	movlb	0	; () banked
  2329  0001C2  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2330  0001C4  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2331  0001C8  0100               	movlb	0	; () banked
  2332  0001CA  6BCD               	clrf	??_init_operation& (0+255),b
  2333  0001CC  0100               	movlb	0	; () banked
  2334  0001CE  11CD               	iorwf	??_init_operation& (0+255),w,b
  2335  0001D0  0100               	movlb	0	; () banked
  2336  0001D2  6FEB               	movwf	init_operation@g2& (0+255),b
  2337  0001D4  0100               	movlb	0	; () banked
  2338  0001D6  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2339  0001D8  0100               	movlb	0	; () banked
  2340  0001DA  6FEC               	movwf	(init_operation@g2+1)& (0+255),b
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;main.c: 298: int b2 = (blue[0]<<8) | blue[1];
  2344  0001DC  0100               	movlb	0	; () banked
  2345  0001DE  51E6               	movf	(init_operation@blue+1)& (0+255),w,b
  2346  0001E0  C0E5  F0CD         	movff	init_operation@blue,??_init_operation
  2347  0001E4  0100               	movlb	0	; () banked
  2348  0001E6  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2349  0001E8  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2350  0001EC  0100               	movlb	0	; () banked
  2351  0001EE  6BCD               	clrf	??_init_operation& (0+255),b
  2352  0001F0  0100               	movlb	0	; () banked
  2353  0001F2  11CD               	iorwf	??_init_operation& (0+255),w,b
  2354  0001F4  0100               	movlb	0	; () banked
  2355  0001F6  6FF3               	movwf	init_operation@b2& (0+255),b
  2356  0001F8  0100               	movlb	0	; () banked
  2357  0001FA  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2358  0001FC  0100               	movlb	0	; () banked
  2359  0001FE  6FF4               	movwf	(init_operation@b2+1)& (0+255),b
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;main.c: 299: int c2 = (clear[0]<<8) | clear[1];
  2363  000200  0100               	movlb	0	; () banked
  2364  000202  51E8               	movf	(init_operation@clear+1)& (0+255),w,b
  2365  000204  C0E7  F0CD         	movff	init_operation@clear,??_init_operation
  2366  000208  0100               	movlb	0	; () banked
  2367  00020A  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2368  00020C  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2369  000210  0100               	movlb	0	; () banked
  2370  000212  6BCD               	clrf	??_init_operation& (0+255),b
  2371  000214  0100               	movlb	0	; () banked
  2372  000216  11CD               	iorwf	??_init_operation& (0+255),w,b
  2373  000218  0100               	movlb	0	; () banked
  2374  00021A  6FD1               	movwf	init_operation@c2& (0+255),b
  2375  00021C  0100               	movlb	0	; () banked
  2376  00021E  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2377  000220  0100               	movlb	0	; () banked
  2378  000222  6FD2               	movwf	(init_operation@c2+1)& (0+255),b
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;main.c: 301: int luminosity1 = (-0.32466*r2) + (1.57837*g2) + (-0.73191*b2);
  2382  000224  0E08               	movlw	8
  2383  000226  6E20               	movwf	___ftmul@f2,c
  2384  000228  0ECA               	movlw	202
  2385  00022A  6E21               	movwf	___ftmul@f2+1,c
  2386  00022C  0E3F               	movlw	63
  2387  00022E  6E22               	movwf	___ftmul@f2+2,c
  2388  000230  C0EB  F019         	movff	init_operation@g2,___awtoft@c
  2389  000234  C0EC  F01A         	movff	init_operation@g2+1,___awtoft@c+1
  2390  000238  EC6B  F015         	call	___awtoft	;wreg free
  2391  00023C  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2392  000240  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2393  000244  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2394  000248  EC59  F00F         	call	___ftmul	;wreg free
  2395  00024C  C01D  F02F         	movff	?___ftmul,___ftadd@f2
  2396  000250  C01E  F030         	movff	?___ftmul+1,___ftadd@f2+1
  2397  000254  C01F  F031         	movff	?___ftmul+2,___ftadd@f2+2
  2398  000258  0E3A               	movlw	58
  2399  00025A  6E20               	movwf	___ftmul@f2,c
  2400  00025C  0EA6               	movlw	166
  2401  00025E  6E21               	movwf	___ftmul@f2+1,c
  2402  000260  0EBE               	movlw	190
  2403  000262  6E22               	movwf	___ftmul@f2+2,c
  2404  000264  C0F1  F019         	movff	init_operation@r2,___awtoft@c
  2405  000268  C0F2  F01A         	movff	init_operation@r2+1,___awtoft@c+1
  2406  00026C  EC6B  F015         	call	___awtoft	;wreg free
  2407  000270  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2408  000274  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2409  000278  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2410  00027C  EC59  F00F         	call	___ftmul	;wreg free
  2411  000280  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  2412  000284  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  2413  000288  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  2414  00028C  EC8B  F008         	call	___ftadd	;wreg free
  2415  000290  C02C  F0DC         	movff	?___ftadd,_init_operation$1404
  2416  000294  C02D  F0DD         	movff	?___ftadd+1,_init_operation$1404+1
  2417  000298  C02E  F0DE         	movff	?___ftadd+2,_init_operation$1404+2
  2418                           
  2419                           ;main.c: 301: int luminosity1 = (-0.32466*r2) + (1.57837*g2) + (-0.73191*b2);
  2420  00029C  0E5E               	movlw	94
  2421  00029E  6E20               	movwf	___ftmul@f2,c
  2422  0002A0  0E3B               	movlw	59
  2423  0002A2  6E21               	movwf	___ftmul@f2+1,c
  2424  0002A4  0EBF               	movlw	191
  2425  0002A6  6E22               	movwf	___ftmul@f2+2,c
  2426  0002A8  C0F3  F019         	movff	init_operation@b2,___awtoft@c
  2427  0002AC  C0F4  F01A         	movff	init_operation@b2+1,___awtoft@c+1
  2428  0002B0  EC6B  F015         	call	___awtoft	;wreg free
  2429  0002B4  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2430  0002B8  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2431  0002BC  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2432  0002C0  EC59  F00F         	call	___ftmul	;wreg free
  2433  0002C4  C01D  F02F         	movff	?___ftmul,___ftadd@f2
  2434  0002C8  C01E  F030         	movff	?___ftmul+1,___ftadd@f2+1
  2435  0002CC  C01F  F031         	movff	?___ftmul+2,___ftadd@f2+2
  2436  0002D0  C0DC  F02C         	movff	_init_operation$1404,___ftadd@f1
  2437  0002D4  C0DD  F02D         	movff	_init_operation$1404+1,___ftadd@f1+1
  2438  0002D8  C0DE  F02E         	movff	_init_operation$1404+2,___ftadd@f1+2
  2439  0002DC  EC8B  F008         	call	___ftadd	;wreg free
  2440  0002E0  C02C  F038         	movff	?___ftadd,___fttol@f1
  2441  0002E4  C02D  F039         	movff	?___ftadd+1,___fttol@f1+1
  2442  0002E8  C02E  F03A         	movff	?___ftadd+2,___fttol@f1+2
  2443  0002EC  ECDF  F00E         	call	___fttol	;wreg free
  2444  0002F0  C038  F0D3         	movff	?___fttol,init_operation@luminosity1
  2445  0002F4  C039  F0D4         	movff	?___fttol+1,init_operation@luminosity1+1
  2446                           
  2447                           ;main.c: 303: lcdInst(0b10000000);;
  2448  0002F8  0E80               	movlw	128
  2449  0002FA  ECE5  F015         	call	_lcdInst
  2450                           
  2451                           ;main.c: 304: printf("%u|%u|%u        ", r1, g1, b1);
  2452  0002FE  0E66               	movlw	low STR_2
  2453  000300  0100               	movlb	0	; () banked
  2454  000302  6FAF               	movwf	printf@f& (0+255),b
  2455  000304  0EFF               	movlw	high STR_2
  2456  000306  0100               	movlb	0	; () banked
  2457  000308  6FB0               	movwf	(printf@f+1)& (0+255),b
  2458  00030A  C0ED  F0B1         	movff	init_operation@r1,?_printf+2
  2459  00030E  C0EE  F0B2         	movff	init_operation@r1+1,?_printf+3
  2460  000312  C0E9  F0B3         	movff	init_operation@g1,?_printf+4
  2461  000316  C0EA  F0B4         	movff	init_operation@g1+1,?_printf+5
  2462  00031A  C0EF  F0B5         	movff	init_operation@b1,?_printf+6
  2463  00031E  C0F0  F0B6         	movff	init_operation@b1+1,?_printf+7
  2464  000322  ECC6  F003         	call	_printf	;wreg free
  2465                           
  2466                           ;main.c: 305: lcdInst(0b11000000);;
  2467  000326  0EC0               	movlw	192
  2468  000328  ECE5  F015         	call	_lcdInst
  2469                           
  2470                           ;main.c: 306: printf("%u|%u|%u        ", r2, g2, b2);
  2471  00032C  0E66               	movlw	low STR_2
  2472  00032E  0100               	movlb	0	; () banked
  2473  000330  6FAF               	movwf	printf@f& (0+255),b
  2474  000332  0EFF               	movlw	high STR_2
  2475  000334  0100               	movlb	0	; () banked
  2476  000336  6FB0               	movwf	(printf@f+1)& (0+255),b
  2477  000338  C0F1  F0B1         	movff	init_operation@r2,?_printf+2
  2478  00033C  C0F2  F0B2         	movff	init_operation@r2+1,?_printf+3
  2479  000340  C0EB  F0B3         	movff	init_operation@g2,?_printf+4
  2480  000344  C0EC  F0B4         	movff	init_operation@g2+1,?_printf+5
  2481  000348  C0F3  F0B5         	movff	init_operation@b2,?_printf+6
  2482  00034C  C0F4  F0B6         	movff	init_operation@b2+1,?_printf+7
  2483  000350  ECC6  F003         	call	_printf	;wreg free
  2484                           
  2485                           ;main.c: 308: if ((r1/b1 > 1.6 && (r2+g2+b2) > 6500) || (r2/b2 > 1.6 && (r1+g1+b1) > 700
      +                          0)){
  2486  000354  0ECD               	movlw	205
  2487  000356  6E1D               	movwf	___ftge@ff1,c
  2488  000358  0ECC               	movlw	204
  2489  00035A  6E1E               	movwf	___ftge@ff1+1,c
  2490  00035C  0E3F               	movlw	63
  2491  00035E  6E1F               	movwf	___ftge@ff1+2,c
  2492  000360  C0EF  F013         	movff	init_operation@b1,___awdiv@divisor
  2493  000364  C0F0  F014         	movff	init_operation@b1+1,___awdiv@divisor+1
  2494  000368  C0ED  F011         	movff	init_operation@r1,___awdiv@dividend
  2495  00036C  C0EE  F012         	movff	init_operation@r1+1,___awdiv@dividend+1
  2496  000370  EC66  F012         	call	___awdiv	;wreg free
  2497  000374  C011  F019         	movff	?___awdiv,___awtoft@c
  2498  000378  C012  F01A         	movff	?___awdiv+1,___awtoft@c+1
  2499  00037C  EC6B  F015         	call	___awtoft	;wreg free
  2500  000380  C019  F020         	movff	?___awtoft,___ftge@ff2
  2501  000384  C01A  F021         	movff	?___awtoft+1,___ftge@ff2+1
  2502  000388  C01B  F022         	movff	?___awtoft+2,___ftge@ff2+2
  2503  00038C  EC1E  F012         	call	___ftge	;wreg free
  2504  000390  B0D8               	btfsc	status,0,c
  2505  000392  D01F               	goto	l4288
  2506  000394  0100               	movlb	0	; () banked
  2507  000396  51EB               	movf	init_operation@g2& (0+255),w,b
  2508  000398  0100               	movlb	0	; () banked
  2509  00039A  25F1               	addwf	init_operation@r2& (0+255),w,b
  2510  00039C  0100               	movlb	0	; () banked
  2511  00039E  6FCD               	movwf	??_init_operation& (0+255),b
  2512  0003A0  0100               	movlb	0	; () banked
  2513  0003A2  51EC               	movf	(init_operation@g2+1)& (0+255),w,b
  2514  0003A4  0100               	movlb	0	; () banked
  2515  0003A6  21F2               	addwfc	(init_operation@r2+1)& (0+255),w,b
  2516  0003A8  0100               	movlb	0	; () banked
  2517  0003AA  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2518  0003AC  0100               	movlb	0	; () banked
  2519  0003AE  51F3               	movf	init_operation@b2& (0+255),w,b
  2520  0003B0  0100               	movlb	0	; () banked
  2521  0003B2  27CD               	addwf	??_init_operation& (0+255),f,b
  2522  0003B4  0100               	movlb	0	; () banked
  2523  0003B6  51F4               	movf	(init_operation@b2+1)& (0+255),w,b
  2524  0003B8  0100               	movlb	0	; () banked
  2525  0003BA  23CE               	addwfc	(??_init_operation+1)& (0+255),f,b
  2526  0003BC  0100               	movlb	0	; () banked
  2527  0003BE  BFCE               	btfsc	(??_init_operation+1)& (0+255),7,b
  2528  0003C0  D008               	goto	l4288
  2529  0003C2  0E65               	movlw	101
  2530  0003C4  0100               	movlb	0	; () banked
  2531  0003C6  5DCD               	subwf	??_init_operation& (0+255),w,b
  2532  0003C8  0E19               	movlw	25
  2533  0003CA  0100               	movlb	0	; () banked
  2534  0003CC  59CE               	subwfb	(??_init_operation+1)& (0+255),w,b
  2535  0003CE  B0D8               	btfsc	status,0,c
  2536  0003D0  D03F               	goto	l4292
  2537  0003D2                     l4288:
  2538  0003D2  0ECD               	movlw	205
  2539  0003D4  6E1D               	movwf	___ftge@ff1,c
  2540  0003D6  0ECC               	movlw	204
  2541  0003D8  6E1E               	movwf	___ftge@ff1+1,c
  2542  0003DA  0E3F               	movlw	63
  2543  0003DC  6E1F               	movwf	___ftge@ff1+2,c
  2544  0003DE  C0F3  F013         	movff	init_operation@b2,___awdiv@divisor
  2545  0003E2  C0F4  F014         	movff	init_operation@b2+1,___awdiv@divisor+1
  2546  0003E6  C0F1  F011         	movff	init_operation@r2,___awdiv@dividend
  2547  0003EA  C0F2  F012         	movff	init_operation@r2+1,___awdiv@dividend+1
  2548  0003EE  EC66  F012         	call	___awdiv	;wreg free
  2549  0003F2  C011  F019         	movff	?___awdiv,___awtoft@c
  2550  0003F6  C012  F01A         	movff	?___awdiv+1,___awtoft@c+1
  2551  0003FA  EC6B  F015         	call	___awtoft	;wreg free
  2552  0003FE  C019  F020         	movff	?___awtoft,___ftge@ff2
  2553  000402  C01A  F021         	movff	?___awtoft+1,___ftge@ff2+1
  2554  000406  C01B  F022         	movff	?___awtoft+2,___ftge@ff2+2
  2555  00040A  EC1E  F012         	call	___ftge	;wreg free
  2556  00040E  B0D8               	btfsc	status,0,c
  2557  000410  D04A               	goto	l4306
  2558  000412  0100               	movlb	0	; () banked
  2559  000414  51E9               	movf	init_operation@g1& (0+255),w,b
  2560  000416  0100               	movlb	0	; () banked
  2561  000418  25ED               	addwf	init_operation@r1& (0+255),w,b
  2562  00041A  0100               	movlb	0	; () banked
  2563  00041C  6FCD               	movwf	??_init_operation& (0+255),b
  2564  00041E  0100               	movlb	0	; () banked
  2565  000420  51EA               	movf	(init_operation@g1+1)& (0+255),w,b
  2566  000422  0100               	movlb	0	; () banked
  2567  000424  21EE               	addwfc	(init_operation@r1+1)& (0+255),w,b
  2568  000426  0100               	movlb	0	; () banked
  2569  000428  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2570  00042A  0100               	movlb	0	; () banked
  2571  00042C  51EF               	movf	init_operation@b1& (0+255),w,b
  2572  00042E  0100               	movlb	0	; () banked
  2573  000430  27CD               	addwf	??_init_operation& (0+255),f,b
  2574  000432  0100               	movlb	0	; () banked
  2575  000434  51F0               	movf	(init_operation@b1+1)& (0+255),w,b
  2576  000436  0100               	movlb	0	; () banked
  2577  000438  23CE               	addwfc	(??_init_operation+1)& (0+255),f,b
  2578  00043A  0100               	movlb	0	; () banked
  2579  00043C  BFCE               	btfsc	(??_init_operation+1)& (0+255),7,b
  2580  00043E  D033               	goto	l4306
  2581  000440  0E59               	movlw	89
  2582  000442  0100               	movlb	0	; () banked
  2583  000444  5DCD               	subwf	??_init_operation& (0+255),w,b
  2584  000446  0E1B               	movlw	27
  2585  000448  0100               	movlb	0	; () banked
  2586  00044A  59CE               	subwfb	(??_init_operation+1)& (0+255),w,b
  2587  00044C  A0D8               	btfss	status,0,c
  2588  00044E  D02B               	goto	l4306
  2589  000450                     l4292:
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;main.c: 309: step_state[1] = 1;
  2593  000450  0100               	movlb	0	; () banked
  2594  000452  EE20 F001          	lfsr	2,1
  2595  000456  51CB               	movf	init_operation@step_state& (0+255),w,b
  2596  000458  26D9               	addwf	fsr2l,f,c
  2597  00045A  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  2598  00045C  22DA               	addwfc	fsr2h,f,c
  2599  00045E  0E01               	movlw	1
  2600  000460  6EDF               	movwf	indf2,c
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;main.c: 310: stepper_state(step_state);
  2604  000462  C0CB  F016         	movff	init_operation@step_state,stepper_state@step_state
  2605  000466  C0CC  F017         	movff	init_operation@step_state+1,stepper_state@step_state+1
  2606  00046A  ECA0  F007         	call	_stepper_state	;wreg free
  2607                           
  2608                           ;main.c: 311: PORTEbits.RE0 = 0;
  2609  00046E  9084               	bcf	3972,0,c	;volatile
  2610                           
  2611                           ;main.c: 312: bot_count[0] ++;
  2612  000470  C0C9  FFD9         	movff	init_operation@bot_count,fsr2l
  2613  000474  C0CA  FFDA         	movff	init_operation@bot_count+1,fsr2h
  2614  000478  2ADF               	incf	indf2,f,c
  2615                           
  2616                           ;main.c: 313: _delay((unsigned long)((250)*(10000000/4000.0)));
  2617  00047A  0E04               	movlw	4
  2618  00047C  0100               	movlb	0	; () banked
  2619  00047E  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2620  000480  0E2C               	movlw	44
  2621  000482  0100               	movlb	0	; () banked
  2622  000484  6FCD               	movwf	??_init_operation& (0+255),b
  2623  000486  0EAB               	movlw	171
  2624  000488                     u3857:
  2625  000488  2EE8               	decfsz	wreg,f,c
  2626  00048A  D7FE               	bra	u3857
  2627  00048C  2FCD               	decfsz	??_init_operation& (0+255),f,b
  2628  00048E  D7FC               	bra	u3857
  2629  000490  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  2630  000492  D7FA               	bra	u3857
  2631  000494  D000               	nop2	
  2632                           
  2633                           ;main.c: 314: PORTEbits.RE0 = 1;
  2634  000496  8084               	bsf	3972,0,c	;volatile
  2635                           
  2636                           ;main.c: 315: update_time(detection_time);
  2637  000498  0ED5               	movlw	low init_operation@detection_time
  2638  00049A  6E14               	movwf	update_time@time,c
  2639  00049C  0E00               	movlw	high init_operation@detection_time
  2640  00049E  6E15               	movwf	update_time@time+1,c
  2641  0004A0  ECA9  F013         	call	_update_time	;wreg free
  2642                           
  2643                           ;main.c: 316: }
  2644  0004A4  D145               	goto	l4360
  2645  0004A6                     l4306:
  2646                           
  2647                           ;main.c: 317: else if ((r1+g1+b1) > 7000 || (r2+g2+b2) > 6500){
  2648  0004A6  0100               	movlb	0	; () banked
  2649  0004A8  51E9               	movf	init_operation@g1& (0+255),w,b
  2650  0004AA  0100               	movlb	0	; () banked
  2651  0004AC  25ED               	addwf	init_operation@r1& (0+255),w,b
  2652  0004AE  0100               	movlb	0	; () banked
  2653  0004B0  6FCD               	movwf	??_init_operation& (0+255),b
  2654  0004B2  0100               	movlb	0	; () banked
  2655  0004B4  51EA               	movf	(init_operation@g1+1)& (0+255),w,b
  2656  0004B6  0100               	movlb	0	; () banked
  2657  0004B8  21EE               	addwfc	(init_operation@r1+1)& (0+255),w,b
  2658  0004BA  0100               	movlb	0	; () banked
  2659  0004BC  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2660  0004BE  0100               	movlb	0	; () banked
  2661  0004C0  51EF               	movf	init_operation@b1& (0+255),w,b
  2662  0004C2  0100               	movlb	0	; () banked
  2663  0004C4  27CD               	addwf	??_init_operation& (0+255),f,b
  2664  0004C6  0100               	movlb	0	; () banked
  2665  0004C8  51F0               	movf	(init_operation@b1+1)& (0+255),w,b
  2666  0004CA  0100               	movlb	0	; () banked
  2667  0004CC  23CE               	addwfc	(??_init_operation+1)& (0+255),f,b
  2668  0004CE  0100               	movlb	0	; () banked
  2669  0004D0  BFCE               	btfsc	(??_init_operation+1)& (0+255),7,b
  2670  0004D2  D008               	goto	l4308
  2671  0004D4  0E59               	movlw	89
  2672  0004D6  0100               	movlb	0	; () banked
  2673  0004D8  5DCD               	subwf	??_init_operation& (0+255),w,b
  2674  0004DA  0E1B               	movlw	27
  2675  0004DC  0100               	movlb	0	; () banked
  2676  0004DE  59CE               	subwfb	(??_init_operation+1)& (0+255),w,b
  2677  0004E0  B0D8               	btfsc	status,0,c
  2678  0004E2  D01F               	goto	l4310
  2679  0004E4                     l4308:
  2680                           
  2681                           ; BSR set to: 0
  2682  0004E4  0100               	movlb	0	; () banked
  2683  0004E6  51EB               	movf	init_operation@g2& (0+255),w,b
  2684  0004E8  0100               	movlb	0	; () banked
  2685  0004EA  25F1               	addwf	init_operation@r2& (0+255),w,b
  2686  0004EC  0100               	movlb	0	; () banked
  2687  0004EE  6FCD               	movwf	??_init_operation& (0+255),b
  2688  0004F0  0100               	movlb	0	; () banked
  2689  0004F2  51EC               	movf	(init_operation@g2+1)& (0+255),w,b
  2690  0004F4  0100               	movlb	0	; () banked
  2691  0004F6  21F2               	addwfc	(init_operation@r2+1)& (0+255),w,b
  2692  0004F8  0100               	movlb	0	; () banked
  2693  0004FA  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2694  0004FC  0100               	movlb	0	; () banked
  2695  0004FE  51F3               	movf	init_operation@b2& (0+255),w,b
  2696  000500  0100               	movlb	0	; () banked
  2697  000502  27CD               	addwf	??_init_operation& (0+255),f,b
  2698  000504  0100               	movlb	0	; () banked
  2699  000506  51F4               	movf	(init_operation@b2+1)& (0+255),w,b
  2700  000508  0100               	movlb	0	; () banked
  2701  00050A  23CE               	addwfc	(??_init_operation+1)& (0+255),f,b
  2702  00050C  0100               	movlb	0	; () banked
  2703  00050E  BFCE               	btfsc	(??_init_operation+1)& (0+255),7,b
  2704  000510  D036               	goto	l4324
  2705  000512  0E65               	movlw	101
  2706  000514  0100               	movlb	0	; () banked
  2707  000516  5DCD               	subwf	??_init_operation& (0+255),w,b
  2708  000518  0E19               	movlw	25
  2709  00051A  0100               	movlb	0	; () banked
  2710  00051C  59CE               	subwfb	(??_init_operation+1)& (0+255),w,b
  2711  00051E  A0D8               	btfss	status,0,c
  2712  000520  D02E               	goto	l4324
  2713  000522                     l4310:
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;main.c: 318: step_state[1] = 2;
  2717  000522  0100               	movlb	0	; () banked
  2718  000524  EE20 F001          	lfsr	2,1
  2719  000528  51CB               	movf	init_operation@step_state& (0+255),w,b
  2720  00052A  26D9               	addwf	fsr2l,f,c
  2721  00052C  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  2722  00052E  22DA               	addwfc	fsr2h,f,c
  2723  000530  0E02               	movlw	2
  2724  000532  6EDF               	movwf	indf2,c
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;main.c: 319: stepper_state(step_state);
  2728  000534  C0CB  F016         	movff	init_operation@step_state,stepper_state@step_state
  2729  000538  C0CC  F017         	movff	init_operation@step_state+1,stepper_state@step_state+1
  2730  00053C  ECA0  F007         	call	_stepper_state	;wreg free
  2731                           
  2732                           ;main.c: 320: PORTEbits.RE0 = 0;
  2733  000540  9084               	bcf	3972,0,c	;volatile
  2734                           
  2735                           ;main.c: 321: bot_count[1] ++;
  2736  000542  0100               	movlb	0	; () banked
  2737  000544  EE20 F001          	lfsr	2,1
  2738  000548  51C9               	movf	init_operation@bot_count& (0+255),w,b
  2739  00054A  26D9               	addwf	fsr2l,f,c
  2740  00054C  51CA               	movf	(init_operation@bot_count+1)& (0+255),w,b
  2741  00054E  22DA               	addwfc	fsr2h,f,c
  2742  000550  2ADF               	incf	indf2,f,c
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;main.c: 322: _delay((unsigned long)((250)*(10000000/4000.0)));
  2746  000552  0E04               	movlw	4
  2747  000554  0100               	movlb	0	; () banked
  2748  000556  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2749  000558  0E2C               	movlw	44
  2750  00055A  0100               	movlb	0	; () banked
  2751  00055C  6FCD               	movwf	??_init_operation& (0+255),b
  2752  00055E  0EAB               	movlw	171
  2753  000560                     u3867:
  2754  000560  2EE8               	decfsz	wreg,f,c
  2755  000562  D7FE               	bra	u3867
  2756  000564  2FCD               	decfsz	??_init_operation& (0+255),f,b
  2757  000566  D7FC               	bra	u3867
  2758  000568  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  2759  00056A  D7FA               	bra	u3867
  2760  00056C  D000               	nop2	
  2761                           
  2762                           ;main.c: 323: PORTEbits.RE0 = 1;
  2763  00056E  8084               	bsf	3972,0,c	;volatile
  2764                           
  2765                           ;main.c: 324: update_time(detection_time);
  2766  000570  0ED5               	movlw	low init_operation@detection_time
  2767  000572  6E14               	movwf	update_time@time,c
  2768  000574  0E00               	movlw	high init_operation@detection_time
  2769  000576  6E15               	movwf	update_time@time+1,c
  2770  000578  ECA9  F013         	call	_update_time	;wreg free
  2771                           
  2772                           ;main.c: 325: }
  2773  00057C  D0D9               	goto	l4360
  2774  00057E                     l4324:
  2775                           
  2776                           ;main.c: 327: else if (b1/r1 > 1.25 || b2/r2 > 1.25){
  2777  00057E  0E00               	movlw	0
  2778  000580  6E1D               	movwf	___ftge@ff1,c
  2779  000582  0EA0               	movlw	160
  2780  000584  6E1E               	movwf	___ftge@ff1+1,c
  2781  000586  0E3F               	movlw	63
  2782  000588  6E1F               	movwf	___ftge@ff1+2,c
  2783  00058A  C0ED  F013         	movff	init_operation@r1,___awdiv@divisor
  2784  00058E  C0EE  F014         	movff	init_operation@r1+1,___awdiv@divisor+1
  2785  000592  C0EF  F011         	movff	init_operation@b1,___awdiv@dividend
  2786  000596  C0F0  F012         	movff	init_operation@b1+1,___awdiv@dividend+1
  2787  00059A  EC66  F012         	call	___awdiv	;wreg free
  2788  00059E  C011  F019         	movff	?___awdiv,___awtoft@c
  2789  0005A2  C012  F01A         	movff	?___awdiv+1,___awtoft@c+1
  2790  0005A6  EC6B  F015         	call	___awtoft	;wreg free
  2791  0005AA  C019  F020         	movff	?___awtoft,___ftge@ff2
  2792  0005AE  C01A  F021         	movff	?___awtoft+1,___ftge@ff2+1
  2793  0005B2  C01B  F022         	movff	?___awtoft+2,___ftge@ff2+2
  2794  0005B6  EC1E  F012         	call	___ftge	;wreg free
  2795  0005BA  A0D8               	btfss	status,0,c
  2796  0005BC  D020               	goto	l4328
  2797  0005BE  0E00               	movlw	0
  2798  0005C0  6E1D               	movwf	___ftge@ff1,c
  2799  0005C2  0EA0               	movlw	160
  2800  0005C4  6E1E               	movwf	___ftge@ff1+1,c
  2801  0005C6  0E3F               	movlw	63
  2802  0005C8  6E1F               	movwf	___ftge@ff1+2,c
  2803  0005CA  C0F1  F013         	movff	init_operation@r2,___awdiv@divisor
  2804  0005CE  C0F2  F014         	movff	init_operation@r2+1,___awdiv@divisor+1
  2805  0005D2  C0F3  F011         	movff	init_operation@b2,___awdiv@dividend
  2806  0005D6  C0F4  F012         	movff	init_operation@b2+1,___awdiv@dividend+1
  2807  0005DA  EC66  F012         	call	___awdiv	;wreg free
  2808  0005DE  C011  F019         	movff	?___awdiv,___awtoft@c
  2809  0005E2  C012  F01A         	movff	?___awdiv+1,___awtoft@c+1
  2810  0005E6  EC6B  F015         	call	___awtoft	;wreg free
  2811  0005EA  C019  F020         	movff	?___awtoft,___ftge@ff2
  2812  0005EE  C01A  F021         	movff	?___awtoft+1,___ftge@ff2+1
  2813  0005F2  C01B  F022         	movff	?___awtoft+2,___ftge@ff2+2
  2814  0005F6  EC1E  F012         	call	___ftge	;wreg free
  2815  0005FA  B0D8               	btfsc	status,0,c
  2816  0005FC  D02E               	goto	l4342
  2817  0005FE                     l4328:
  2818                           
  2819                           ;main.c: 328: step_state[1] = 3;
  2820  0005FE  0100               	movlb	0	; () banked
  2821  000600  EE20 F001          	lfsr	2,1
  2822  000604  51CB               	movf	init_operation@step_state& (0+255),w,b
  2823  000606  26D9               	addwf	fsr2l,f,c
  2824  000608  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  2825  00060A  22DA               	addwfc	fsr2h,f,c
  2826  00060C  0E03               	movlw	3
  2827  00060E  6EDF               	movwf	indf2,c
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;main.c: 329: stepper_state(step_state);
  2831  000610  C0CB  F016         	movff	init_operation@step_state,stepper_state@step_state
  2832  000614  C0CC  F017         	movff	init_operation@step_state+1,stepper_state@step_state+1
  2833  000618  ECA0  F007         	call	_stepper_state	;wreg free
  2834                           
  2835                           ;main.c: 330: PORTEbits.RE0 = 0;
  2836  00061C  9084               	bcf	3972,0,c	;volatile
  2837                           
  2838                           ;main.c: 331: bot_count[2] ++;
  2839  00061E  0100               	movlb	0	; () banked
  2840  000620  EE20 F002          	lfsr	2,2
  2841  000624  51C9               	movf	init_operation@bot_count& (0+255),w,b
  2842  000626  26D9               	addwf	fsr2l,f,c
  2843  000628  51CA               	movf	(init_operation@bot_count+1)& (0+255),w,b
  2844  00062A  22DA               	addwfc	fsr2h,f,c
  2845  00062C  2ADF               	incf	indf2,f,c
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;main.c: 332: _delay((unsigned long)((500)*(10000000/4000.0)));
  2849  00062E  0E07               	movlw	7
  2850  000630  0100               	movlb	0	; () banked
  2851  000632  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2852  000634  0E58               	movlw	88
  2853  000636  0100               	movlb	0	; () banked
  2854  000638  6FCD               	movwf	??_init_operation& (0+255),b
  2855  00063A  0E59               	movlw	89
  2856  00063C                     u3877:
  2857  00063C  2EE8               	decfsz	wreg,f,c
  2858  00063E  D7FE               	bra	u3877
  2859  000640  2FCD               	decfsz	??_init_operation& (0+255),f,b
  2860  000642  D7FC               	bra	u3877
  2861  000644  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  2862  000646  D7FA               	bra	u3877
  2863  000648  D000               	nop2	
  2864                           
  2865                           ;main.c: 333: PORTEbits.RE0 = 1;
  2866  00064A  8084               	bsf	3972,0,c	;volatile
  2867                           
  2868                           ;main.c: 334: update_time(detection_time);
  2869  00064C  0ED5               	movlw	low init_operation@detection_time
  2870  00064E  6E14               	movwf	update_time@time,c
  2871  000650  0E00               	movlw	high init_operation@detection_time
  2872  000652  6E15               	movwf	update_time@time+1,c
  2873  000654  ECA9  F013         	call	_update_time	;wreg free
  2874                           
  2875                           ;main.c: 335: }
  2876  000658  D06B               	goto	l4360
  2877  00065A                     l4342:
  2878                           
  2879                           ;main.c: 337: else if ((r1+g1+b1) > 3600 || (r2+g2+b2) > 3600){
  2880  00065A  0100               	movlb	0	; () banked
  2881  00065C  51E9               	movf	init_operation@g1& (0+255),w,b
  2882  00065E  0100               	movlb	0	; () banked
  2883  000660  25ED               	addwf	init_operation@r1& (0+255),w,b
  2884  000662  0100               	movlb	0	; () banked
  2885  000664  6FCD               	movwf	??_init_operation& (0+255),b
  2886  000666  0100               	movlb	0	; () banked
  2887  000668  51EA               	movf	(init_operation@g1+1)& (0+255),w,b
  2888  00066A  0100               	movlb	0	; () banked
  2889  00066C  21EE               	addwfc	(init_operation@r1+1)& (0+255),w,b
  2890  00066E  0100               	movlb	0	; () banked
  2891  000670  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2892  000672  0100               	movlb	0	; () banked
  2893  000674  51EF               	movf	init_operation@b1& (0+255),w,b
  2894  000676  0100               	movlb	0	; () banked
  2895  000678  27CD               	addwf	??_init_operation& (0+255),f,b
  2896  00067A  0100               	movlb	0	; () banked
  2897  00067C  51F0               	movf	(init_operation@b1+1)& (0+255),w,b
  2898  00067E  0100               	movlb	0	; () banked
  2899  000680  23CE               	addwfc	(??_init_operation+1)& (0+255),f,b
  2900  000682  0100               	movlb	0	; () banked
  2901  000684  BFCE               	btfsc	(??_init_operation+1)& (0+255),7,b
  2902  000686  D008               	goto	l4344
  2903  000688  0E11               	movlw	17
  2904  00068A  0100               	movlb	0	; () banked
  2905  00068C  5DCD               	subwf	??_init_operation& (0+255),w,b
  2906  00068E  0E0E               	movlw	14
  2907  000690  0100               	movlb	0	; () banked
  2908  000692  59CE               	subwfb	(??_init_operation+1)& (0+255),w,b
  2909  000694  B0D8               	btfsc	status,0,c
  2910  000696  D01F               	goto	l4346
  2911  000698                     l4344:
  2912                           
  2913                           ; BSR set to: 0
  2914  000698  0100               	movlb	0	; () banked
  2915  00069A  51EB               	movf	init_operation@g2& (0+255),w,b
  2916  00069C  0100               	movlb	0	; () banked
  2917  00069E  25F1               	addwf	init_operation@r2& (0+255),w,b
  2918  0006A0  0100               	movlb	0	; () banked
  2919  0006A2  6FCD               	movwf	??_init_operation& (0+255),b
  2920  0006A4  0100               	movlb	0	; () banked
  2921  0006A6  51EC               	movf	(init_operation@g2+1)& (0+255),w,b
  2922  0006A8  0100               	movlb	0	; () banked
  2923  0006AA  21F2               	addwfc	(init_operation@r2+1)& (0+255),w,b
  2924  0006AC  0100               	movlb	0	; () banked
  2925  0006AE  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2926  0006B0  0100               	movlb	0	; () banked
  2927  0006B2  51F3               	movf	init_operation@b2& (0+255),w,b
  2928  0006B4  0100               	movlb	0	; () banked
  2929  0006B6  27CD               	addwf	??_init_operation& (0+255),f,b
  2930  0006B8  0100               	movlb	0	; () banked
  2931  0006BA  51F4               	movf	(init_operation@b2+1)& (0+255),w,b
  2932  0006BC  0100               	movlb	0	; () banked
  2933  0006BE  23CE               	addwfc	(??_init_operation+1)& (0+255),f,b
  2934  0006C0  0100               	movlb	0	; () banked
  2935  0006C2  BFCE               	btfsc	(??_init_operation+1)& (0+255),7,b
  2936  0006C4  D035               	goto	l4360
  2937  0006C6  0E11               	movlw	17
  2938  0006C8  0100               	movlb	0	; () banked
  2939  0006CA  5DCD               	subwf	??_init_operation& (0+255),w,b
  2940  0006CC  0E0E               	movlw	14
  2941  0006CE  0100               	movlb	0	; () banked
  2942  0006D0  59CE               	subwfb	(??_init_operation+1)& (0+255),w,b
  2943  0006D2  A0D8               	btfss	status,0,c
  2944  0006D4  D02D               	goto	l4360
  2945  0006D6                     l4346:
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;main.c: 338: step_state[1] = 4;
  2949  0006D6  0100               	movlb	0	; () banked
  2950  0006D8  EE20 F001          	lfsr	2,1
  2951  0006DC  51CB               	movf	init_operation@step_state& (0+255),w,b
  2952  0006DE  26D9               	addwf	fsr2l,f,c
  2953  0006E0  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  2954  0006E2  22DA               	addwfc	fsr2h,f,c
  2955  0006E4  0E04               	movlw	4
  2956  0006E6  6EDF               	movwf	indf2,c
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;main.c: 339: stepper_state(step_state);
  2960  0006E8  C0CB  F016         	movff	init_operation@step_state,stepper_state@step_state
  2961  0006EC  C0CC  F017         	movff	init_operation@step_state+1,stepper_state@step_state+1
  2962  0006F0  ECA0  F007         	call	_stepper_state	;wreg free
  2963                           
  2964                           ;main.c: 340: PORTEbits.RE0 = 0;
  2965  0006F4  9084               	bcf	3972,0,c	;volatile
  2966                           
  2967                           ;main.c: 341: bot_count[3] ++;
  2968  0006F6  0100               	movlb	0	; () banked
  2969  0006F8  EE20 F003          	lfsr	2,3
  2970  0006FC  51C9               	movf	init_operation@bot_count& (0+255),w,b
  2971  0006FE  26D9               	addwf	fsr2l,f,c
  2972  000700  51CA               	movf	(init_operation@bot_count+1)& (0+255),w,b
  2973  000702  22DA               	addwfc	fsr2h,f,c
  2974  000704  2ADF               	incf	indf2,f,c
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;main.c: 342: _delay((unsigned long)((500)*(10000000/4000.0)));
  2978  000706  0E07               	movlw	7
  2979  000708  0100               	movlb	0	; () banked
  2980  00070A  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2981  00070C  0E58               	movlw	88
  2982  00070E  0100               	movlb	0	; () banked
  2983  000710  6FCD               	movwf	??_init_operation& (0+255),b
  2984  000712  0E59               	movlw	89
  2985  000714                     u3887:
  2986  000714  2EE8               	decfsz	wreg,f,c
  2987  000716  D7FE               	bra	u3887
  2988  000718  2FCD               	decfsz	??_init_operation& (0+255),f,b
  2989  00071A  D7FC               	bra	u3887
  2990  00071C  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  2991  00071E  D7FA               	bra	u3887
  2992  000720  D000               	nop2	
  2993                           
  2994                           ;main.c: 343: PORTEbits.RE0 = 1;
  2995  000722  8084               	bsf	3972,0,c	;volatile
  2996                           
  2997                           ;main.c: 344: update_time(detection_time);
  2998  000724  0ED5               	movlw	low init_operation@detection_time
  2999  000726  6E14               	movwf	update_time@time,c
  3000  000728  0E00               	movlw	high init_operation@detection_time
  3001  00072A  6E15               	movwf	update_time@time+1,c
  3002  00072C  ECA9  F013         	call	_update_time	;wreg free
  3003  000730                     l4360:
  3004                           
  3005                           ;main.c: 345: }
  3006                           ;main.c: 347: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3007  000730  0E0D               	movlw	13
  3008  000732  0100               	movlb	0	; () banked
  3009  000734  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  3010  000736  0EAF               	movlw	175
  3011  000738  0100               	movlb	0	; () banked
  3012  00073A  6FCD               	movwf	??_init_operation& (0+255),b
  3013  00073C  0EB6               	movlw	182
  3014  00073E                     u3897:
  3015  00073E  2EE8               	decfsz	wreg,f,c
  3016  000740  D7FE               	bra	u3897
  3017  000742  2FCD               	decfsz	??_init_operation& (0+255),f,b
  3018  000744  D7FC               	bra	u3897
  3019  000746  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  3020  000748  D7FA               	bra	u3897
  3021  00074A  F000               	nop	
  3022  00074C                     l4362:
  3023  00074C  0E02               	movlw	2
  3024  00074E  0101               	movlb	1	; () banked
  3025  000750  192B               	xorwf	_curr_state& (0+255),w,b
  3026  000752  B4D8               	btfsc	status,2,c
  3027  000754  D017               	goto	l4366
  3028                           
  3029                           ; BSR set to: 1
  3030  000756  C0C7  F099         	movff	init_operation@time,time_difference@time1
  3031  00075A  C0C8  F09A         	movff	init_operation@time+1,time_difference@time1+1
  3032  00075E  0ED5               	movlw	low init_operation@detection_time
  3033  000760  0100               	movlb	0	; () banked
  3034  000762  6F9B               	movwf	time_difference@time2& (0+255),b
  3035  000764  0E00               	movlw	high init_operation@detection_time
  3036  000766  0100               	movlb	0	; () banked
  3037  000768  6F9C               	movwf	(time_difference@time2+1)& (0+255),b
  3038  00076A  EC61  F009         	call	_time_difference	;wreg free
  3039  00076E  0100               	movlb	0	; () banked
  3040  000770  BF9A               	btfsc	(?_time_difference+1)& (0+255),7,b
  3041  000772  D49E               	goto	l4250
  3042  000774  0100               	movlb	0	; () banked
  3043  000776  519A               	movf	(?_time_difference+1)& (0+255),w,b
  3044  000778  E105               	bnz	l4366
  3045  00077A  0E14               	movlw	20
  3046  00077C  0100               	movlb	0	; () banked
  3047  00077E  5D99               	subwf	?_time_difference& (0+255),w,b
  3048  000780  A0D8               	btfss	status,0,c
  3049  000782  D496               	goto	l4250
  3050  000784                     l4366:
  3051                           
  3052                           ;main.c: 348: }
  3053                           ;main.c: 349: curr_state = OPERATION_END;
  3054  000784  0E02               	movlw	2
  3055  000786  0101               	movlb	1	; () banked
  3056  000788  6F2B               	movwf	_curr_state& (0+255),b
  3057                           
  3058                           ; BSR set to: 1
  3059  00078A  0012               	return		;funcret
  3060  00078C                     __end_of_init_operation:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           intcon	equ	0xFF2
  3067                           intcon2	equ	0xFF1
  3068                           intcon3	equ	0xFF0
  3069                           postinc0	equ	0xFEE
  3070                           wreg	equ	0xFE8
  3071                           postdec1	equ	0xFE5
  3072                           fsr1l	equ	0xFE1
  3073                           indf2	equ	0xFDF
  3074                           fsr2h	equ	0xFDA
  3075                           fsr2l	equ	0xFD9
  3076                           status	equ	0xFD8
  3077                           
  3078 ;; *************** function _update_time *****************
  3079 ;; Defined at:
  3080 ;;		line 192 in file "main.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  time            2   19[COMRAM] PTR unsigned char 
  3083 ;;		 -> init_operation@detection_time(7), main@end_time(7), main@time(7), main@start_time(7), 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  i               1   21[COMRAM] unsigned char 
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      void 
  3088 ;; Registers used:
  3089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3095 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3096 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3098 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3099 ;;Total ram usage:        3 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    3
  3102 ;; This function calls:
  3103 ;;		_I2C_Master_Read
  3104 ;;		_I2C_Master_Start
  3105 ;;		_I2C_Master_Stop
  3106 ;;		_I2C_Master_Write
  3107 ;; This function is called by:
  3108 ;;		_main
  3109 ;;		_init_operation
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text4
  3114  002752                     __ptext4:
  3115                           	opt stack 0
  3116  002752                     _update_time:
  3117                           	opt stack 27
  3118                           
  3119                           ;main.c: 193: I2C_Master_Start();
  3120                           
  3121                           ; BSR set to: 1
  3122                           ;incstack = 0
  3123  002752  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  3124                           
  3125                           ;main.c: 194: I2C_Master_Write(0b11010000);
  3126  002756  0E00               	movlw	0
  3127  002758  6E13               	movwf	I2C_Master_Write@d+1,c
  3128  00275A  0ED0               	movlw	208
  3129  00275C  6E12               	movwf	I2C_Master_Write@d,c
  3130  00275E  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  3131                           
  3132                           ;main.c: 195: I2C_Master_Write(0x00);
  3133  002762  0E00               	movlw	0
  3134  002764  6E13               	movwf	I2C_Master_Write@d+1,c
  3135  002766  0E00               	movlw	0
  3136  002768  6E12               	movwf	I2C_Master_Write@d,c
  3137  00276A  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  3138                           
  3139                           ;main.c: 196: I2C_Master_Stop();
  3140  00276E  ECF0  F015         	call	_I2C_Master_Stop	;wreg free
  3141                           
  3142                           ;main.c: 199: I2C_Master_Start();
  3143  002772  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  3144                           
  3145                           ;main.c: 200: I2C_Master_Write(0b11010001);
  3146  002776  0E00               	movlw	0
  3147  002778  6E13               	movwf	I2C_Master_Write@d+1,c
  3148  00277A  0ED1               	movlw	209
  3149  00277C  6E12               	movwf	I2C_Master_Write@d,c
  3150  00277E  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  3151                           
  3152                           ;main.c: 201: for(unsigned char i=0;i<0x06;i++){
  3153  002782  0E00               	movlw	0
  3154  002784  6E16               	movwf	update_time@i,c
  3155  002786                     l3626:
  3156  002786  0E05               	movlw	5
  3157  002788  6416               	cpfsgt	update_time@i,c
  3158  00278A  D001               	goto	l3630
  3159  00278C  D00E               	goto	l3636
  3160  00278E                     l3630:
  3161                           
  3162                           ;main.c: 202: time[i] = I2C_Master_Read(1);
  3163  00278E  5016               	movf	update_time@i,w,c
  3164  002790  0D01               	mullw	1
  3165  002792  50F3               	movf	prodl,w,c
  3166  002794  2414               	addwf	update_time@time,w,c
  3167  002796  6ED9               	movwf	fsr2l,c
  3168  002798  50F4               	movf	prodh,w,c
  3169  00279A  2015               	addwfc	update_time@time+1,w,c
  3170  00279C  6EDA               	movwf	fsr2h,c
  3171  00279E  0E01               	movlw	1
  3172  0027A0  EC87  F015         	call	_I2C_Master_Read
  3173  0027A4  6EDF               	movwf	indf2,c
  3174  0027A6  2A16               	incf	update_time@i,f,c
  3175  0027A8  D7EE               	goto	l3626
  3176  0027AA                     l3636:
  3177                           
  3178                           ;main.c: 203: }
  3179                           ;main.c: 204: time[6] = I2C_Master_Read(0);
  3180  0027AA  EE20 F006          	lfsr	2,6
  3181  0027AE  5014               	movf	update_time@time,w,c
  3182  0027B0  26D9               	addwf	fsr2l,f,c
  3183  0027B2  5015               	movf	update_time@time+1,w,c
  3184  0027B4  22DA               	addwfc	fsr2h,f,c
  3185  0027B6  0E00               	movlw	0
  3186  0027B8  EC87  F015         	call	_I2C_Master_Read
  3187  0027BC  6EDF               	movwf	indf2,c
  3188                           
  3189                           ;main.c: 205: I2C_Master_Stop();
  3190  0027BE  ECF0  F015         	call	_I2C_Master_Stop	;wreg free
  3191  0027C2  0012               	return		;funcret
  3192  0027C4                     __end_of_update_time:
  3193                           	opt stack 0
  3194                           tblptru	equ	0xFF8
  3195                           tblptrh	equ	0xFF7
  3196                           tblptrl	equ	0xFF6
  3197                           tablat	equ	0xFF5
  3198                           prodh	equ	0xFF4
  3199                           prodl	equ	0xFF3
  3200                           intcon	equ	0xFF2
  3201                           intcon2	equ	0xFF1
  3202                           intcon3	equ	0xFF0
  3203                           postinc0	equ	0xFEE
  3204                           wreg	equ	0xFE8
  3205                           postdec1	equ	0xFE5
  3206                           fsr1l	equ	0xFE1
  3207                           indf2	equ	0xFDF
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _time_difference *****************
  3213 ;; Defined at:
  3214 ;;		line 247 in file "main.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  time1           2   25[BANK0 ] PTR unsigned char 
  3217 ;;		 -> main@end_time(7), main@time(7), 
  3218 ;;  time2           2   27[BANK0 ] PTR unsigned char 
  3219 ;;		 -> init_operation@detection_time(7), main@start_time(7), 
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;  d3              2   45[BANK0 ] int 
  3222 ;;  d2              2   43[BANK0 ] int 
  3223 ;;  d1              2   41[BANK0 ] int 
  3224 ;;  s2              2   39[BANK0 ] int 
  3225 ;;  s1              2   37[BANK0 ] int 
  3226 ;;  min2            2   35[BANK0 ] int 
  3227 ;;  min1            2   33[BANK0 ] int 
  3228 ;;  hr2             2   31[BANK0 ] int 
  3229 ;;  hr1             2   29[BANK0 ] int 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  2   25[BANK0 ] int 
  3232 ;; Registers used:
  3233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3239 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Totals:         2      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;Total ram usage:       24 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    7
  3246 ;; This function calls:
  3247 ;;		___wmul
  3248 ;;		_dec_to_hex
  3249 ;; This function is called by:
  3250 ;;		_init_operation
  3251 ;;		_runtime
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text5
  3256  0012C2                     __ptext5:
  3257                           	opt stack 0
  3258  0012C2                     _time_difference:
  3259                           	opt stack 22
  3260                           
  3261                           ;main.c: 248: int hr1, hr2, min1, min2, s1, s2;
  3262                           ;main.c: 249: int d1, d2, d3;
  3263                           ;main.c: 250: hr1 = time1[2]; hr2 = time2[2]; min1 = time1[1]; min2 = time2[1];
  3264                           
  3265                           ;incstack = 0
  3266  0012C2  0100               	movlb	0	; () banked
  3267  0012C4  EE20 F002          	lfsr	2,2
  3268  0012C8  5199               	movf	time_difference@time1& (0+255),w,b
  3269  0012CA  26D9               	addwf	fsr2l,f,c
  3270  0012CC  519A               	movf	(time_difference@time1+1)& (0+255),w,b
  3271  0012CE  22DA               	addwfc	fsr2h,f,c
  3272  0012D0  50DF               	movf	indf2,w,c
  3273  0012D2  6E6A               	movwf	??_time_difference& (0+255),c
  3274  0012D4  506A               	movf	??_time_difference,w,c
  3275  0012D6  0100               	movlb	0	; () banked
  3276  0012D8  6F9D               	movwf	time_difference@hr1& (0+255),b
  3277  0012DA  6B9E               	clrf	(time_difference@hr1+1)& (0+255),b
  3278  0012DC  0100               	movlb	0	; () banked
  3279  0012DE  EE20 F002          	lfsr	2,2
  3280  0012E2  519B               	movf	time_difference@time2& (0+255),w,b
  3281  0012E4  26D9               	addwf	fsr2l,f,c
  3282  0012E6  519C               	movf	(time_difference@time2+1)& (0+255),w,b
  3283  0012E8  22DA               	addwfc	fsr2h,f,c
  3284  0012EA  50DF               	movf	indf2,w,c
  3285  0012EC  6E6A               	movwf	??_time_difference& (0+255),c
  3286  0012EE  506A               	movf	??_time_difference,w,c
  3287  0012F0  0100               	movlb	0	; () banked
  3288  0012F2  6F9F               	movwf	time_difference@hr2& (0+255),b
  3289  0012F4  6BA0               	clrf	(time_difference@hr2+1)& (0+255),b
  3290  0012F6  0100               	movlb	0	; () banked
  3291  0012F8  EE20 F001          	lfsr	2,1
  3292  0012FC  5199               	movf	time_difference@time1& (0+255),w,b
  3293  0012FE  26D9               	addwf	fsr2l,f,c
  3294  001300  519A               	movf	(time_difference@time1+1)& (0+255),w,b
  3295  001302  22DA               	addwfc	fsr2h,f,c
  3296  001304  50DF               	movf	indf2,w,c
  3297  001306  6E6A               	movwf	??_time_difference& (0+255),c
  3298  001308  506A               	movf	??_time_difference,w,c
  3299  00130A  0100               	movlb	0	; () banked
  3300  00130C  6FA1               	movwf	time_difference@min1& (0+255),b
  3301  00130E  6BA2               	clrf	(time_difference@min1+1)& (0+255),b
  3302  001310  0100               	movlb	0	; () banked
  3303  001312  EE20 F001          	lfsr	2,1
  3304  001316  519B               	movf	time_difference@time2& (0+255),w,b
  3305  001318  26D9               	addwf	fsr2l,f,c
  3306  00131A  519C               	movf	(time_difference@time2+1)& (0+255),w,b
  3307  00131C  22DA               	addwfc	fsr2h,f,c
  3308  00131E  50DF               	movf	indf2,w,c
  3309  001320  6E6A               	movwf	??_time_difference& (0+255),c
  3310  001322  506A               	movf	??_time_difference,w,c
  3311  001324  0100               	movlb	0	; () banked
  3312  001326  6FA3               	movwf	time_difference@min2& (0+255),b
  3313  001328  6BA4               	clrf	(time_difference@min2+1)& (0+255),b
  3314                           
  3315                           ;main.c: 251: s1 = time1[0]; s2 = time2[0];
  3316  00132A  C099  FFD9         	movff	time_difference@time1,fsr2l
  3317  00132E  C09A  FFDA         	movff	time_difference@time1+1,fsr2h
  3318  001332  50DF               	movf	indf2,w,c
  3319  001334  6E6A               	movwf	??_time_difference& (0+255),c
  3320  001336  506A               	movf	??_time_difference,w,c
  3321  001338  0100               	movlb	0	; () banked
  3322  00133A  6FA5               	movwf	time_difference@s1& (0+255),b
  3323  00133C  6BA6               	clrf	(time_difference@s1+1)& (0+255),b
  3324  00133E  C09B  FFD9         	movff	time_difference@time2,fsr2l
  3325  001342  C09C  FFDA         	movff	time_difference@time2+1,fsr2h
  3326  001346  50DF               	movf	indf2,w,c
  3327  001348  6E6A               	movwf	??_time_difference& (0+255),c
  3328  00134A  506A               	movf	??_time_difference,w,c
  3329  00134C  0100               	movlb	0	; () banked
  3330  00134E  6FA7               	movwf	time_difference@s2& (0+255),b
  3331  001350  6BA8               	clrf	(time_difference@s2+1)& (0+255),b
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;main.c: 253: d1 = dec_to_hex(hr1) - dec_to_hex(hr2);
  3335  001352  C09D  F068         	movff	time_difference@hr1,dec_to_hex@num
  3336  001356  C09E  F069         	movff	time_difference@hr1+1,dec_to_hex@num+1
  3337  00135A  ECDB  F00D         	call	_dec_to_hex	;wreg free
  3338  00135E  C068  F06A         	movff	?_dec_to_hex,??_time_difference
  3339  001362  C069  F06B         	movff	?_dec_to_hex+1,??_time_difference+1
  3340  001366  C09F  F068         	movff	time_difference@hr2,dec_to_hex@num
  3341  00136A  C0A0  F069         	movff	time_difference@hr2+1,dec_to_hex@num+1
  3342  00136E  ECDB  F00D         	call	_dec_to_hex	;wreg free
  3343  001372  1E68               	comf	?_dec_to_hex,f,c
  3344  001374  1E69               	comf	?_dec_to_hex+1,f,c
  3345  001376  4A68               	infsnz	?_dec_to_hex,f,c
  3346  001378  2A69               	incf	?_dec_to_hex+1,f,c
  3347  00137A  5068               	movf	?_dec_to_hex,w,c
  3348  00137C  246A               	addwf	??_time_difference,w,c
  3349  00137E  0100               	movlb	0	; () banked
  3350  001380  6FA9               	movwf	time_difference@d1& (0+255),b
  3351  001382  5069               	movf	?_dec_to_hex+1,w,c
  3352  001384  206B               	addwfc	??_time_difference+1,w,c
  3353  001386  0100               	movlb	0	; () banked
  3354  001388  6FAA               	movwf	(time_difference@d1+1)& (0+255),b
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;main.c: 254: d2 = dec_to_hex(min1) - dec_to_hex(min2);
  3358  00138A  C0A1  F068         	movff	time_difference@min1,dec_to_hex@num
  3359  00138E  C0A2  F069         	movff	time_difference@min1+1,dec_to_hex@num+1
  3360  001392  ECDB  F00D         	call	_dec_to_hex	;wreg free
  3361  001396  C068  F06A         	movff	?_dec_to_hex,??_time_difference
  3362  00139A  C069  F06B         	movff	?_dec_to_hex+1,??_time_difference+1
  3363  00139E  C0A3  F068         	movff	time_difference@min2,dec_to_hex@num
  3364  0013A2  C0A4  F069         	movff	time_difference@min2+1,dec_to_hex@num+1
  3365  0013A6  ECDB  F00D         	call	_dec_to_hex	;wreg free
  3366  0013AA  1E68               	comf	?_dec_to_hex,f,c
  3367  0013AC  1E69               	comf	?_dec_to_hex+1,f,c
  3368  0013AE  4A68               	infsnz	?_dec_to_hex,f,c
  3369  0013B0  2A69               	incf	?_dec_to_hex+1,f,c
  3370  0013B2  5068               	movf	?_dec_to_hex,w,c
  3371  0013B4  246A               	addwf	??_time_difference,w,c
  3372  0013B6  0100               	movlb	0	; () banked
  3373  0013B8  6FAB               	movwf	time_difference@d2& (0+255),b
  3374  0013BA  5069               	movf	?_dec_to_hex+1,w,c
  3375  0013BC  206B               	addwfc	??_time_difference+1,w,c
  3376  0013BE  0100               	movlb	0	; () banked
  3377  0013C0  6FAC               	movwf	(time_difference@d2+1)& (0+255),b
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;main.c: 255: d3 = dec_to_hex(s1) - dec_to_hex(s2);
  3381  0013C2  C0A5  F068         	movff	time_difference@s1,dec_to_hex@num
  3382  0013C6  C0A6  F069         	movff	time_difference@s1+1,dec_to_hex@num+1
  3383  0013CA  ECDB  F00D         	call	_dec_to_hex	;wreg free
  3384  0013CE  C068  F06A         	movff	?_dec_to_hex,??_time_difference
  3385  0013D2  C069  F06B         	movff	?_dec_to_hex+1,??_time_difference+1
  3386  0013D6  C0A7  F068         	movff	time_difference@s2,dec_to_hex@num
  3387  0013DA  C0A8  F069         	movff	time_difference@s2+1,dec_to_hex@num+1
  3388  0013DE  ECDB  F00D         	call	_dec_to_hex	;wreg free
  3389  0013E2  1E68               	comf	?_dec_to_hex,f,c
  3390  0013E4  1E69               	comf	?_dec_to_hex+1,f,c
  3391  0013E6  4A68               	infsnz	?_dec_to_hex,f,c
  3392  0013E8  2A69               	incf	?_dec_to_hex+1,f,c
  3393  0013EA  5068               	movf	?_dec_to_hex,w,c
  3394  0013EC  246A               	addwf	??_time_difference,w,c
  3395  0013EE  0100               	movlb	0	; () banked
  3396  0013F0  6FAD               	movwf	time_difference@d3& (0+255),b
  3397  0013F2  5069               	movf	?_dec_to_hex+1,w,c
  3398  0013F4  206B               	addwfc	??_time_difference+1,w,c
  3399  0013F6  0100               	movlb	0	; () banked
  3400  0013F8  6FAE               	movwf	(time_difference@d3+1)& (0+255),b
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;main.c: 256: return 3600*d1 + 60*d2 + d3;
  3404  0013FA  C0A9  F011         	movff	time_difference@d1,___wmul@multiplier
  3405  0013FE  C0AA  F012         	movff	time_difference@d1+1,___wmul@multiplier+1
  3406  001402  0E0E               	movlw	14
  3407  001404  6E14               	movwf	___wmul@multiplicand+1,c
  3408  001406  0E10               	movlw	16
  3409  001408  6E13               	movwf	___wmul@multiplicand,c
  3410  00140A  EC9A  F015         	call	___wmul	;wreg free
  3411  00140E  C011  F06A         	movff	?___wmul,??_time_difference
  3412  001412  C012  F06B         	movff	?___wmul+1,??_time_difference+1
  3413  001416  C0AB  F011         	movff	time_difference@d2,___wmul@multiplier
  3414  00141A  C0AC  F012         	movff	time_difference@d2+1,___wmul@multiplier+1
  3415  00141E  0E00               	movlw	0
  3416  001420  6E14               	movwf	___wmul@multiplicand+1,c
  3417  001422  0E3C               	movlw	60
  3418  001424  6E13               	movwf	___wmul@multiplicand,c
  3419  001426  EC9A  F015         	call	___wmul	;wreg free
  3420  00142A  5011               	movf	?___wmul,w,c
  3421  00142C  266A               	addwf	??_time_difference,f,c
  3422  00142E  5012               	movf	?___wmul+1,w,c
  3423  001430  226B               	addwfc	??_time_difference+1,f,c
  3424  001432  0100               	movlb	0	; () banked
  3425  001434  51AD               	movf	time_difference@d3& (0+255),w,b
  3426  001436  246A               	addwf	??_time_difference,w,c
  3427  001438  0100               	movlb	0	; () banked
  3428  00143A  6F99               	movwf	?_time_difference& (0+255),b
  3429  00143C  0100               	movlb	0	; () banked
  3430  00143E  51AE               	movf	(time_difference@d3+1)& (0+255),w,b
  3431  001440  206B               	addwfc	??_time_difference+1,w,c
  3432  001442  0100               	movlb	0	; () banked
  3433  001444  6F9A               	movwf	(?_time_difference+1)& (0+255),b
  3434  001446  0012               	return	
  3435  001448                     __end_of_time_difference:
  3436                           	opt stack 0
  3437                           tblptru	equ	0xFF8
  3438                           tblptrh	equ	0xFF7
  3439                           tblptrl	equ	0xFF6
  3440                           tablat	equ	0xFF5
  3441                           prodh	equ	0xFF4
  3442                           prodl	equ	0xFF3
  3443                           intcon	equ	0xFF2
  3444                           intcon2	equ	0xFF1
  3445                           intcon3	equ	0xFF0
  3446                           postinc0	equ	0xFEE
  3447                           wreg	equ	0xFE8
  3448                           postdec1	equ	0xFE5
  3449                           fsr1l	equ	0xFE1
  3450                           indf2	equ	0xFDF
  3451                           fsr2h	equ	0xFDA
  3452                           fsr2l	equ	0xFD9
  3453                           status	equ	0xFD8
  3454                           
  3455 ;; *************** function _dec_to_hex *****************
  3456 ;; Defined at:
  3457 ;;		line 214 in file "main.c"
  3458 ;; Parameters:    Size  Location     Type
  3459 ;;  num             2  103[COMRAM] int 
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;  quotient        2   23[BANK0 ] int 
  3462 ;;  hexnum          2   21[BANK0 ] int 
  3463 ;;  i               2   19[BANK0 ] int 
  3464 ;;  temp            2   17[BANK0 ] int 
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  2  103[COMRAM] int 
  3467 ;; Registers used:
  3468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3474 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3475 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3477 ;;      Totals:         2      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;Total ram usage:       16 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    6
  3481 ;; This function calls:
  3482 ;;		___awdiv
  3483 ;;		___awtoft
  3484 ;;		___ftadd
  3485 ;;		___ftmul
  3486 ;;		___fttol
  3487 ;;		_pow
  3488 ;; This function is called by:
  3489 ;;		_time_difference
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           	psect	text6
  3494  001BB6                     __ptext6:
  3495                           	opt stack 0
  3496  001BB6                     _dec_to_hex:
  3497                           	opt stack 22
  3498                           
  3499                           ;main.c: 215: int i = 0, quotient = num, temp, hexnum = 0;
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;incstack = 0
  3503  001BB6  0E00               	movlw	0
  3504  001BB8  0100               	movlb	0	; () banked
  3505  001BBA  6F94               	movwf	(dec_to_hex@i+1)& (0+255),b
  3506  001BBC  0E00               	movlw	0
  3507  001BBE  6F93               	movwf	dec_to_hex@i& (0+255),b
  3508                           
  3509                           ; BSR set to: 0
  3510  001BC0  C068  F097         	movff	dec_to_hex@num,dec_to_hex@quotient
  3511  001BC4  C069  F098         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  3512  001BC8  0E00               	movlw	0
  3513  001BCA  0100               	movlb	0	; () banked
  3514  001BCC  6F96               	movwf	(dec_to_hex@hexnum+1)& (0+255),b
  3515  001BCE  0E00               	movlw	0
  3516  001BD0  6F95               	movwf	dec_to_hex@hexnum& (0+255),b
  3517                           
  3518                           ;main.c: 217: while (quotient != 0) {
  3519  001BD2  D06C               	goto	l3358
  3520  001BD4                     l3346:
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;main.c: 218: temp = quotient % 16;
  3524  001BD4  0E0F               	movlw	15
  3525  001BD6  0100               	movlb	0	; () banked
  3526  001BD8  1597               	andwf	dec_to_hex@quotient& (0+255),w,b
  3527  001BDA  0100               	movlb	0	; () banked
  3528  001BDC  6F91               	movwf	dec_to_hex@temp& (0+255),b
  3529  001BDE  0100               	movlb	0	; () banked
  3530  001BE0  6B92               	clrf	(dec_to_hex@temp+1)& (0+255),b
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;main.c: 220: hexnum += temp*pow(10,i);
  3534  001BE2  C093  F019         	movff	dec_to_hex@i,___awtoft@c
  3535  001BE6  C094  F01A         	movff	dec_to_hex@i+1,___awtoft@c+1
  3536  001BEA  EC6B  F015         	call	___awtoft	;wreg free
  3537  001BEE  C019  F08B         	movff	?___awtoft,_dec_to_hex$1400
  3538  001BF2  C01A  F08C         	movff	?___awtoft+1,_dec_to_hex$1400+1
  3539  001BF6  C01B  F08D         	movff	?___awtoft+2,_dec_to_hex$1400+2
  3540                           
  3541                           ;main.c: 220: hexnum += temp*pow(10,i);
  3542  001BFA  C08B  F065         	movff	_dec_to_hex$1400,pow@y
  3543  001BFE  C08C  F066         	movff	_dec_to_hex$1400+1,pow@y+1
  3544  001C02  C08D  F067         	movff	_dec_to_hex$1400+2,pow@y+2
  3545  001C06  0E00               	movlw	0
  3546  001C08  6E62               	movwf	pow@x,c
  3547  001C0A  0E20               	movlw	32
  3548  001C0C  6E63               	movwf	pow@x+1,c
  3549  001C0E  0E41               	movlw	65
  3550  001C10  6E64               	movwf	pow@x+2,c
  3551  001C12  EC24  F00A         	call	_pow	;wreg free
  3552  001C16  C062  F08E         	movff	?_pow,_dec_to_hex$1401
  3553  001C1A  C063  F08F         	movff	?_pow+1,_dec_to_hex$1401+1
  3554  001C1E  C064  F090         	movff	?_pow+2,_dec_to_hex$1401+2
  3555                           
  3556                           ;main.c: 220: hexnum += temp*pow(10,i);
  3557  001C22  C08E  F020         	movff	_dec_to_hex$1401,___ftmul@f2
  3558  001C26  C08F  F021         	movff	_dec_to_hex$1401+1,___ftmul@f2+1
  3559  001C2A  C090  F022         	movff	_dec_to_hex$1401+2,___ftmul@f2+2
  3560  001C2E  C091  F019         	movff	dec_to_hex@temp,___awtoft@c
  3561  001C32  C092  F01A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  3562  001C36  EC6B  F015         	call	___awtoft	;wreg free
  3563  001C3A  C019  F01D         	movff	?___awtoft,___ftmul@f1
  3564  001C3E  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  3565  001C42  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  3566  001C46  EC59  F00F         	call	___ftmul	;wreg free
  3567  001C4A  C01D  F02F         	movff	?___ftmul,___ftadd@f2
  3568  001C4E  C01E  F030         	movff	?___ftmul+1,___ftadd@f2+1
  3569  001C52  C01F  F031         	movff	?___ftmul+2,___ftadd@f2+2
  3570  001C56  C095  F019         	movff	dec_to_hex@hexnum,___awtoft@c
  3571  001C5A  C096  F01A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  3572  001C5E  EC6B  F015         	call	___awtoft	;wreg free
  3573  001C62  C019  F02C         	movff	?___awtoft,___ftadd@f1
  3574  001C66  C01A  F02D         	movff	?___awtoft+1,___ftadd@f1+1
  3575  001C6A  C01B  F02E         	movff	?___awtoft+2,___ftadd@f1+2
  3576  001C6E  EC8B  F008         	call	___ftadd	;wreg free
  3577  001C72  C02C  F038         	movff	?___ftadd,___fttol@f1
  3578  001C76  C02D  F039         	movff	?___ftadd+1,___fttol@f1+1
  3579  001C7A  C02E  F03A         	movff	?___ftadd+2,___fttol@f1+2
  3580  001C7E  ECDF  F00E         	call	___fttol	;wreg free
  3581  001C82  C038  F095         	movff	?___fttol,dec_to_hex@hexnum
  3582  001C86  C039  F096         	movff	?___fttol+1,dec_to_hex@hexnum+1
  3583                           
  3584                           ;main.c: 222: quotient = quotient / 16;
  3585  001C8A  C097  F011         	movff	dec_to_hex@quotient,___awdiv@dividend
  3586  001C8E  C098  F012         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  3587  001C92  0E00               	movlw	0
  3588  001C94  6E14               	movwf	___awdiv@divisor+1,c
  3589  001C96  0E10               	movlw	16
  3590  001C98  6E13               	movwf	___awdiv@divisor,c
  3591  001C9A  EC66  F012         	call	___awdiv	;wreg free
  3592  001C9E  C011  F097         	movff	?___awdiv,dec_to_hex@quotient
  3593  001CA2  C012  F098         	movff	?___awdiv+1,dec_to_hex@quotient+1
  3594                           
  3595                           ;main.c: 223: i += 1;
  3596  001CA6  0100               	movlb	0	; () banked
  3597  001CA8  4B93               	infsnz	dec_to_hex@i& (0+255),f,b
  3598  001CAA  2B94               	incf	(dec_to_hex@i+1)& (0+255),f,b
  3599  001CAC                     l3358:
  3600                           
  3601                           ; BSR set to: 0
  3602  001CAC  0100               	movlb	0	; () banked
  3603  001CAE  5197               	movf	dec_to_hex@quotient& (0+255),w,b
  3604  001CB0  0100               	movlb	0	; () banked
  3605  001CB2  1198               	iorwf	(dec_to_hex@quotient+1)& (0+255),w,b
  3606  001CB4  A4D8               	btfss	status,2,c
  3607  001CB6  D78E               	goto	l3346
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;main.c: 224: }
  3611                           ;main.c: 225: return hexnum;
  3612  001CB8  C095  F068         	movff	dec_to_hex@hexnum,?_dec_to_hex
  3613  001CBC  C096  F069         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  3614                           
  3615                           ; BSR set to: 0
  3616  001CC0  0012               	return		;funcret
  3617  001CC2                     __end_of_dec_to_hex:
  3618                           	opt stack 0
  3619                           tblptru	equ	0xFF8
  3620                           tblptrh	equ	0xFF7
  3621                           tblptrl	equ	0xFF6
  3622                           tablat	equ	0xFF5
  3623                           prodh	equ	0xFF4
  3624                           prodl	equ	0xFF3
  3625                           intcon	equ	0xFF2
  3626                           intcon2	equ	0xFF1
  3627                           intcon3	equ	0xFF0
  3628                           postinc0	equ	0xFEE
  3629                           wreg	equ	0xFE8
  3630                           postdec1	equ	0xFE5
  3631                           fsr1l	equ	0xFE1
  3632                           indf2	equ	0xFDF
  3633                           fsr2h	equ	0xFDA
  3634                           fsr2l	equ	0xFD9
  3635                           status	equ	0xFD8
  3636                           
  3637 ;; *************** function _pow *****************
  3638 ;; Defined at:
  3639 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  3640 ;; Parameters:    Size  Location     Type
  3641 ;;  x               3   97[COMRAM] int 
  3642 ;;  y               3  100[COMRAM] int 
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;  yi              4    7[BANK0 ] unsigned long 
  3645 ;;  sign            1    6[BANK0 ] unsigned char 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  3   97[COMRAM] unsigned char 
  3648 ;; Registers used:
  3649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3655 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;Total ram usage:       17 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    5
  3662 ;; This function calls:
  3663 ;;		___ftge
  3664 ;;		___ftmul
  3665 ;;		___ftneg
  3666 ;;		___fttol
  3667 ;;		___lltoft
  3668 ;;		_exp
  3669 ;;		_log
  3670 ;; This function is called by:
  3671 ;;		_dec_to_hex
  3672 ;;		_hex_to_dec
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text7
  3677  001448                     __ptext7:
  3678                           	opt stack 0
  3679  001448                     _pow:
  3680                           	opt stack 22
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;incstack = 0
  3684  001448  0E00               	movlw	0
  3685  00144A  0100               	movlb	0	; () banked
  3686  00144C  6F86               	movwf	pow@sign& (0+255),b
  3687                           
  3688                           ; BSR set to: 0
  3689  00144E  5062               	movf	pow@x,w,c
  3690  001450  1063               	iorwf	pow@x+1,w,c
  3691  001452  1064               	iorwf	pow@x+2,w,c
  3692  001454  A4D8               	btfss	status,2,c
  3693  001456  D01B               	goto	l3216
  3694                           
  3695                           ; BSR set to: 0
  3696  001458  0E00               	movlw	0
  3697  00145A  6E1D               	movwf	___ftge@ff1,c
  3698  00145C  0E00               	movlw	0
  3699  00145E  6E1E               	movwf	___ftge@ff1+1,c
  3700  001460  0E00               	movlw	0
  3701  001462  6E1F               	movwf	___ftge@ff1+2,c
  3702  001464  C065  F020         	movff	pow@y,___ftge@ff2
  3703  001468  C066  F021         	movff	pow@y+1,___ftge@ff2+1
  3704  00146C  C067  F022         	movff	pow@y+2,___ftge@ff2+2
  3705  001470  EC1E  F012         	call	___ftge	;wreg free
  3706  001474  A0D8               	btfss	status,0,c
  3707  001476  D004               	goto	l890
  3708  001478  0E00               	movlw	0
  3709  00147A  6E6E               	movwf	_errno+1,c
  3710  00147C  0E21               	movlw	33
  3711  00147E  6E6D               	movwf	_errno,c
  3712  001480                     l890:
  3713  001480  0E00               	movlw	0
  3714  001482  6E62               	movwf	?_pow,c
  3715  001484  0E00               	movlw	0
  3716  001486  6E63               	movwf	?_pow+1,c
  3717  001488  0E00               	movlw	0
  3718  00148A  6E64               	movwf	?_pow+2,c
  3719  00148C  0012               	return	
  3720  00148E                     l3216:
  3721  00148E  5065               	movf	pow@y,w,c
  3722  001490  1066               	iorwf	pow@y+1,w,c
  3723  001492  1067               	iorwf	pow@y+2,w,c
  3724  001494  A4D8               	btfss	status,2,c
  3725  001496  D007               	goto	l3222
  3726  001498  0E00               	movlw	0
  3727  00149A  6E62               	movwf	?_pow,c
  3728  00149C  0E80               	movlw	128
  3729  00149E  6E63               	movwf	?_pow+1,c
  3730  0014A0  0E3F               	movlw	63
  3731  0014A2  6E64               	movwf	?_pow+2,c
  3732  0014A4  0012               	return	
  3733  0014A6                     l3222:
  3734  0014A6  AE64               	btfss	pow@x+2,7,c
  3735  0014A8  D042               	goto	l3234
  3736  0014AA  C065  F038         	movff	pow@y,___fttol@f1
  3737  0014AE  C066  F039         	movff	pow@y+1,___fttol@f1+1
  3738  0014B2  C067  F03A         	movff	pow@y+2,___fttol@f1+2
  3739  0014B6  ECDF  F00E         	call	___fttol	;wreg free
  3740  0014BA  C038  F087         	movff	?___fttol,pow@yi
  3741  0014BE  C039  F088         	movff	?___fttol+1,pow@yi+1
  3742  0014C2  C03A  F089         	movff	?___fttol+2,pow@yi+2
  3743  0014C6  C03B  F08A         	movff	?___fttol+3,pow@yi+3
  3744  0014CA  C087  F019         	movff	pow@yi,___lltoft@c
  3745  0014CE  C088  F01A         	movff	pow@yi+1,___lltoft@c+1
  3746  0014D2  C089  F01B         	movff	pow@yi+2,___lltoft@c+2
  3747  0014D6  C08A  F01C         	movff	pow@yi+3,___lltoft@c+3
  3748  0014DA  EC1A  F014         	call	___lltoft	;wreg free
  3749  0014DE  5065               	movf	pow@y,w,c
  3750  0014E0  1819               	xorwf	?___lltoft,w,c
  3751  0014E2  E107               	bnz	u2740
  3752  0014E4  5066               	movf	pow@y+1,w,c
  3753  0014E6  181A               	xorwf	?___lltoft+1,w,c
  3754  0014E8  E104               	bnz	u2740
  3755  0014EA  5067               	movf	pow@y+2,w,c
  3756  0014EC  181B               	xorwf	?___lltoft+2,w,c
  3757  0014EE  B4D8               	btfsc	status,2,c
  3758  0014F0  D00B               	goto	l3230
  3759  0014F2                     u2740:
  3760  0014F2  0E00               	movlw	0
  3761  0014F4  6E6E               	movwf	_errno+1,c
  3762  0014F6  0E21               	movlw	33
  3763  0014F8  6E6D               	movwf	_errno,c
  3764  0014FA  0E00               	movlw	0
  3765  0014FC  6E62               	movwf	?_pow,c
  3766  0014FE  0E00               	movlw	0
  3767  001500  6E63               	movwf	?_pow+1,c
  3768  001502  0E00               	movlw	0
  3769  001504  6E64               	movwf	?_pow+2,c
  3770  001506  0012               	return	
  3771  001508                     l3230:
  3772  001508  0100               	movlb	0	; () banked
  3773  00150A  5187               	movf	pow@yi& (0+255),w,b
  3774  00150C  0B01               	andlw	1
  3775  00150E  0100               	movlb	0	; () banked
  3776  001510  6F86               	movwf	pow@sign& (0+255),b
  3777                           
  3778                           ; BSR set to: 0
  3779  001512  C062  F011         	movff	pow@x,___ftneg@f1
  3780  001516  C063  F012         	movff	pow@x+1,___ftneg@f1+1
  3781  00151A  C064  F013         	movff	pow@x+2,___ftneg@f1+2
  3782  00151E  ECAD  F015         	call	___ftneg	;wreg free
  3783  001522  C011  F062         	movff	?___ftneg,pow@x
  3784  001526  C012  F063         	movff	?___ftneg+1,pow@x+1
  3785  00152A  C013  F064         	movff	?___ftneg+2,pow@x+2
  3786  00152E                     l3234:
  3787  00152E  C062  F044         	movff	pow@x,log@x
  3788  001532  C063  F045         	movff	pow@x+1,log@x+1
  3789  001536  C064  F046         	movff	pow@x+2,log@x+2
  3790  00153A  EC34  F00C         	call	_log	;wreg free
  3791  00153E  C044  F080         	movff	?_log,_pow$1405
  3792  001542  C045  F081         	movff	?_log+1,_pow$1405+1
  3793  001546  C046  F082         	movff	?_log+2,_pow$1405+2
  3794  00154A  C080  F01D         	movff	_pow$1405,___ftmul@f1
  3795  00154E  C081  F01E         	movff	_pow$1405+1,___ftmul@f1+1
  3796  001552  C082  F01F         	movff	_pow$1405+2,___ftmul@f1+2
  3797  001556  C065  F020         	movff	pow@y,___ftmul@f2
  3798  00155A  C066  F021         	movff	pow@y+1,___ftmul@f2+1
  3799  00155E  C067  F022         	movff	pow@y+2,___ftmul@f2+2
  3800  001562  EC59  F00F         	call	___ftmul	;wreg free
  3801  001566  C01D  F083         	movff	?___ftmul,_pow$1406
  3802  00156A  C01E  F084         	movff	?___ftmul+1,_pow$1406+1
  3803  00156E  C01F  F085         	movff	?___ftmul+2,_pow$1406+2
  3804  001572  C083  F059         	movff	_pow$1406,exp@x
  3805  001576  C084  F05A         	movff	_pow$1406+1,exp@x+1
  3806  00157A  C085  F05B         	movff	_pow$1406+2,exp@x+2
  3807  00157E  ECAE  F006         	call	_exp	;wreg free
  3808  001582  C059  F062         	movff	?_exp,pow@x
  3809  001586  C05A  F063         	movff	?_exp+1,pow@x+1
  3810  00158A  C05B  F064         	movff	?_exp+2,pow@x+2
  3811  00158E  0100               	movlb	0	; () banked
  3812  001590  5186               	movf	pow@sign& (0+255),w,b
  3813  001592  0100               	movlb	0	; () banked
  3814  001594  B4D8               	btfsc	status,2,c
  3815  001596  D00F               	goto	l895
  3816                           
  3817                           ; BSR set to: 0
  3818  001598  C062  F011         	movff	pow@x,___ftneg@f1
  3819  00159C  C063  F012         	movff	pow@x+1,___ftneg@f1+1
  3820  0015A0  C064  F013         	movff	pow@x+2,___ftneg@f1+2
  3821  0015A4  ECAD  F015         	call	___ftneg	;wreg free
  3822  0015A8  C011  F062         	movff	?___ftneg,?_pow
  3823  0015AC  C012  F063         	movff	?___ftneg+1,?_pow+1
  3824  0015B0  C013  F064         	movff	?___ftneg+2,?_pow+2
  3825  0015B4  0012               	return	
  3826  0015B6                     l895:
  3827                           
  3828                           ; BSR set to: 0
  3829  0015B6  C062  F062         	movff	pow@x,?_pow
  3830  0015BA  C063  F063         	movff	pow@x+1,?_pow+1
  3831  0015BE  C064  F064         	movff	pow@x+2,?_pow+2
  3832  0015C2  0012               	return		;funcret
  3833  0015C4                     __end_of_pow:
  3834                           	opt stack 0
  3835                           tblptru	equ	0xFF8
  3836                           tblptrh	equ	0xFF7
  3837                           tblptrl	equ	0xFF6
  3838                           tablat	equ	0xFF5
  3839                           prodh	equ	0xFF4
  3840                           prodl	equ	0xFF3
  3841                           intcon	equ	0xFF2
  3842                           intcon2	equ	0xFF1
  3843                           intcon3	equ	0xFF0
  3844                           postinc0	equ	0xFEE
  3845                           wreg	equ	0xFE8
  3846                           postdec1	equ	0xFE5
  3847                           fsr1l	equ	0xFE1
  3848                           indf2	equ	0xFDF
  3849                           fsr2h	equ	0xFDA
  3850                           fsr2l	equ	0xFD9
  3851                           status	equ	0xFD8
  3852                           
  3853 ;; *************** function _log *****************
  3854 ;; Defined at:
  3855 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  3856 ;; Parameters:    Size  Location     Type
  3857 ;;  x               3   67[COMRAM] unsigned char 
  3858 ;; Auto vars:     Size  Location     Type
  3859 ;;  exponent        2   70[COMRAM] int 
  3860 ;; Return value:  Size  Location     Type
  3861 ;;                  3   67[COMRAM] int 
  3862 ;; Registers used:
  3863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3869 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;Total ram usage:        5 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; Hardware stack levels required when called:    4
  3876 ;; This function calls:
  3877 ;;		___awtoft
  3878 ;;		___ftadd
  3879 ;;		___ftmul
  3880 ;;		_eval_poly
  3881 ;;		_frexp
  3882 ;; This function is called by:
  3883 ;;		_pow
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           	psect	text8
  3888  001868                     __ptext8:
  3889                           	opt stack 0
  3890  001868                     _log:
  3891                           	opt stack 22
  3892                           
  3893                           ;incstack = 0
  3894  001868  AE46               	btfss	log@x+2,7,c
  3895  00186A  D00B               	goto	l3146
  3896  00186C  0E00               	movlw	0
  3897  00186E  6E6E               	movwf	_errno+1,c
  3898  001870  0E21               	movlw	33
  3899  001872  6E6D               	movwf	_errno,c
  3900  001874  0E00               	movlw	0
  3901  001876  6E44               	movwf	?_log,c
  3902  001878  0E00               	movlw	0
  3903  00187A  6E45               	movwf	?_log+1,c
  3904  00187C  0E00               	movlw	0
  3905  00187E  6E46               	movwf	?_log+2,c
  3906  001880  0012               	return	
  3907  001882                     l3146:
  3908  001882  5044               	movf	log@x,w,c
  3909  001884  1045               	iorwf	log@x+1,w,c
  3910  001886  1046               	iorwf	log@x+2,w,c
  3911  001888  A4D8               	btfss	status,2,c
  3912  00188A  D00B               	goto	l3152
  3913  00188C  0E00               	movlw	0
  3914  00188E  6E6E               	movwf	_errno+1,c
  3915  001890  0E22               	movlw	34
  3916  001892  6E6D               	movwf	_errno,c
  3917  001894  0E00               	movlw	0
  3918  001896  6E44               	movwf	?_log,c
  3919  001898  0E00               	movlw	0
  3920  00189A  6E45               	movwf	?_log+1,c
  3921  00189C  0E00               	movlw	0
  3922  00189E  6E46               	movwf	?_log+2,c
  3923  0018A0  0012               	return	
  3924  0018A2                     l3152:
  3925  0018A2  0E00               	movlw	0
  3926  0018A4  6E20               	movwf	___ftmul@f2,c
  3927  0018A6  0E00               	movlw	0
  3928  0018A8  6E21               	movwf	___ftmul@f2+1,c
  3929  0018AA  0E40               	movlw	64
  3930  0018AC  6E22               	movwf	___ftmul@f2+2,c
  3931  0018AE  0E47               	movlw	low log@exponent
  3932  0018B0  6E14               	movwf	frexp@eptr,c
  3933  0018B2  0E00               	movlw	high log@exponent
  3934  0018B4  6E15               	movwf	frexp@eptr+1,c
  3935  0018B6  C044  F011         	movff	log@x,frexp@value
  3936  0018BA  C045  F012         	movff	log@x+1,frexp@value+1
  3937  0018BE  C046  F013         	movff	log@x+2,frexp@value+2
  3938  0018C2  ECD6  F011         	call	_frexp	;wreg free
  3939  0018C6  C011  F01D         	movff	?_frexp,___ftmul@f1
  3940  0018CA  C012  F01E         	movff	?_frexp+1,___ftmul@f1+1
  3941  0018CE  C013  F01F         	movff	?_frexp+2,___ftmul@f1+2
  3942  0018D2  EC59  F00F         	call	___ftmul	;wreg free
  3943  0018D6  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  3944  0018DA  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  3945  0018DE  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  3946  0018E2  0E00               	movlw	0
  3947  0018E4  6E2F               	movwf	___ftadd@f2,c
  3948  0018E6  0E80               	movlw	128
  3949  0018E8  6E30               	movwf	___ftadd@f2+1,c
  3950  0018EA  0EBF               	movlw	191
  3951  0018EC  6E31               	movwf	___ftadd@f2+2,c
  3952  0018EE  EC8B  F008         	call	___ftadd	;wreg free
  3953  0018F2  C02C  F044         	movff	?___ftadd,log@x
  3954  0018F6  C02D  F045         	movff	?___ftadd+1,log@x+1
  3955  0018FA  C02E  F046         	movff	?___ftadd+2,log@x+2
  3956  0018FE  0647               	decf	log@exponent,f,c
  3957  001900  A0D8               	btfss	status,0,c
  3958  001902  0648               	decf	log@exponent+1,f,c
  3959  001904  C044  F038         	movff	log@x,eval_poly@x
  3960  001908  C045  F039         	movff	log@x+1,eval_poly@x+1
  3961  00190C  C046  F03A         	movff	log@x+2,eval_poly@x+2
  3962  001910  0ECD               	movlw	low log@coeff
  3963  001912  6E3B               	movwf	eval_poly@d,c
  3964  001914  0EFE               	movlw	high log@coeff
  3965  001916  6E3C               	movwf	eval_poly@d+1,c
  3966  001918  0E00               	movlw	0
  3967  00191A  6E3E               	movwf	eval_poly@n+1,c
  3968  00191C  0E08               	movlw	8
  3969  00191E  6E3D               	movwf	eval_poly@n,c
  3970  001920  ECB5  F010         	call	_eval_poly	;wreg free
  3971  001924  C038  F044         	movff	?_eval_poly,log@x
  3972  001928  C039  F045         	movff	?_eval_poly+1,log@x+1
  3973  00192C  C03A  F046         	movff	?_eval_poly+2,log@x+2
  3974  001930  0E72               	movlw	114
  3975  001932  6E20               	movwf	___ftmul@f2,c
  3976  001934  0E31               	movlw	49
  3977  001936  6E21               	movwf	___ftmul@f2+1,c
  3978  001938  0E3F               	movlw	63
  3979  00193A  6E22               	movwf	___ftmul@f2+2,c
  3980  00193C  C047  F019         	movff	log@exponent,___awtoft@c
  3981  001940  C048  F01A         	movff	log@exponent+1,___awtoft@c+1
  3982  001944  EC6B  F015         	call	___awtoft	;wreg free
  3983  001948  C019  F01D         	movff	?___awtoft,___ftmul@f1
  3984  00194C  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  3985  001950  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  3986  001954  EC59  F00F         	call	___ftmul	;wreg free
  3987  001958  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  3988  00195C  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  3989  001960  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  3990  001964  C044  F02F         	movff	log@x,___ftadd@f2
  3991  001968  C045  F030         	movff	log@x+1,___ftadd@f2+1
  3992  00196C  C046  F031         	movff	log@x+2,___ftadd@f2+2
  3993  001970  EC8B  F008         	call	___ftadd	;wreg free
  3994  001974  C02C  F044         	movff	?___ftadd,?_log
  3995  001978  C02D  F045         	movff	?___ftadd+1,?_log+1
  3996  00197C  C02E  F046         	movff	?___ftadd+2,?_log+2
  3997  001980  0012               	return	
  3998  001982                     __end_of_log:
  3999                           	opt stack 0
  4000                           tblptru	equ	0xFF8
  4001                           tblptrh	equ	0xFF7
  4002                           tblptrl	equ	0xFF6
  4003                           tablat	equ	0xFF5
  4004                           prodh	equ	0xFF4
  4005                           prodl	equ	0xFF3
  4006                           intcon	equ	0xFF2
  4007                           intcon2	equ	0xFF1
  4008                           intcon3	equ	0xFF0
  4009                           postinc0	equ	0xFEE
  4010                           wreg	equ	0xFE8
  4011                           postdec1	equ	0xFE5
  4012                           fsr1l	equ	0xFE1
  4013                           indf2	equ	0xFDF
  4014                           fsr2h	equ	0xFDA
  4015                           fsr2l	equ	0xFD9
  4016                           status	equ	0xFD8
  4017                           
  4018 ;; *************** function _exp *****************
  4019 ;; Defined at:
  4020 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  x               3   88[COMRAM] int 
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;  exponent        2   94[COMRAM] int 
  4025 ;;  sign            1   96[COMRAM] unsigned char 
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  3   88[COMRAM] unsigned char 
  4028 ;; Registers used:
  4029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4035 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;Total ram usage:        9 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    4
  4042 ;; This function calls:
  4043 ;;		___awtoft
  4044 ;;		___ftdiv
  4045 ;;		___ftge
  4046 ;;		___ftmul
  4047 ;;		___ftneg
  4048 ;;		___ftsub
  4049 ;;		___fttol
  4050 ;;		_eval_poly
  4051 ;;		_floor
  4052 ;;		_ldexp
  4053 ;; This function is called by:
  4054 ;;		_pow
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           	psect	text9
  4059  000D5C                     __ptext9:
  4060                           	opt stack 0
  4061  000D5C                     _exp:
  4062                           	opt stack 22
  4063                           
  4064                           ;incstack = 0
  4065  000D5C  5059               	movf	exp@x,w,c
  4066  000D5E  105A               	iorwf	exp@x+1,w,c
  4067  000D60  105B               	iorwf	exp@x+2,w,c
  4068  000D62  A4D8               	btfss	status,2,c
  4069  000D64  D007               	goto	l3168
  4070  000D66  0E00               	movlw	0
  4071  000D68  6E59               	movwf	?_exp,c
  4072  000D6A  0E80               	movlw	128
  4073  000D6C  6E5A               	movwf	?_exp+1,c
  4074  000D6E  0E3F               	movlw	63
  4075  000D70  6E5B               	movwf	?_exp+2,c
  4076  000D72  0012               	return	
  4077  000D74                     l3168:
  4078  000D74  0E72               	movlw	114
  4079  000D76  6E1D               	movwf	___ftge@ff1,c
  4080  000D78  0E31               	movlw	49
  4081  000D7A  6E1E               	movwf	___ftge@ff1+1,c
  4082  000D7C  0E44               	movlw	68
  4083  000D7E  6E1F               	movwf	___ftge@ff1+2,c
  4084  000D80  C059  F020         	movff	exp@x,___ftge@ff2
  4085  000D84  C05A  F021         	movff	exp@x+1,___ftge@ff2+1
  4086  000D88  C05B  F022         	movff	exp@x+2,___ftge@ff2+2
  4087  000D8C  EC1E  F012         	call	___ftge	;wreg free
  4088  000D90  B0D8               	btfsc	status,0,c
  4089  000D92  D00B               	goto	l3174
  4090  000D94  0E00               	movlw	0
  4091  000D96  6E6E               	movwf	_errno+1,c
  4092  000D98  0E22               	movlw	34
  4093  000D9A  6E6D               	movwf	_errno,c
  4094  000D9C  0EFF               	movlw	255
  4095  000D9E  6E59               	movwf	?_exp,c
  4096  000DA0  0E7F               	movlw	127
  4097  000DA2  6E5A               	movwf	?_exp+1,c
  4098  000DA4  0E7F               	movlw	127
  4099  000DA6  6E5B               	movwf	?_exp+2,c
  4100  000DA8  0012               	return	
  4101  000DAA                     l3174:
  4102  000DAA  C059  F01D         	movff	exp@x,___ftge@ff1
  4103  000DAE  C05A  F01E         	movff	exp@x+1,___ftge@ff1+1
  4104  000DB2  C05B  F01F         	movff	exp@x+2,___ftge@ff1+2
  4105  000DB6  0E49               	movlw	73
  4106  000DB8  6E20               	movwf	___ftge@ff2,c
  4107  000DBA  0E3A               	movlw	58
  4108  000DBC  6E21               	movwf	___ftge@ff2+1,c
  4109  000DBE  0EC4               	movlw	196
  4110  000DC0  6E22               	movwf	___ftge@ff2+2,c
  4111  000DC2  EC1E  F012         	call	___ftge	;wreg free
  4112  000DC6  B0D8               	btfsc	status,0,c
  4113  000DC8  D00B               	goto	l3180
  4114  000DCA  0E00               	movlw	0
  4115  000DCC  6E6E               	movwf	_errno+1,c
  4116  000DCE  0E22               	movlw	34
  4117  000DD0  6E6D               	movwf	_errno,c
  4118  000DD2  0E00               	movlw	0
  4119  000DD4  6E59               	movwf	?_exp,c
  4120  000DD6  0E00               	movlw	0
  4121  000DD8  6E5A               	movwf	?_exp+1,c
  4122  000DDA  0E00               	movlw	0
  4123  000DDC  6E5B               	movwf	?_exp+2,c
  4124  000DDE  0012               	return	
  4125  000DE0                     l3180:
  4126  000DE0  AE5B               	btfss	exp@x+2,7,c
  4127  000DE2  D002               	goto	u2650
  4128  000DE4  0E01               	movlw	1
  4129  000DE6  D001               	goto	u2660
  4130  000DE8                     u2650:
  4131  000DE8  0E00               	movlw	0
  4132  000DEA                     u2660:
  4133  000DEA  6E61               	movwf	exp@sign,c
  4134  000DEC  5061               	movf	exp@sign,w,c
  4135  000DEE  B4D8               	btfsc	status,2,c
  4136  000DF0  D00E               	goto	l1053
  4137  000DF2  C059  F011         	movff	exp@x,___ftneg@f1
  4138  000DF6  C05A  F012         	movff	exp@x+1,___ftneg@f1+1
  4139  000DFA  C05B  F013         	movff	exp@x+2,___ftneg@f1+2
  4140  000DFE  ECAD  F015         	call	___ftneg	;wreg free
  4141  000E02  C011  F059         	movff	?___ftneg,exp@x
  4142  000E06  C012  F05A         	movff	?___ftneg+1,exp@x+1
  4143  000E0A  C013  F05B         	movff	?___ftneg+2,exp@x+2
  4144  000E0E                     l1053:
  4145  000E0E  C059  F01D         	movff	exp@x,___ftmul@f1
  4146  000E12  C05A  F01E         	movff	exp@x+1,___ftmul@f1+1
  4147  000E16  C05B  F01F         	movff	exp@x+2,___ftmul@f1+2
  4148  000E1A  0EAA               	movlw	170
  4149  000E1C  6E20               	movwf	___ftmul@f2,c
  4150  000E1E  0EB8               	movlw	184
  4151  000E20  6E21               	movwf	___ftmul@f2+1,c
  4152  000E22  0E3F               	movlw	63
  4153  000E24  6E22               	movwf	___ftmul@f2+2,c
  4154  000E26  EC59  F00F         	call	___ftmul	;wreg free
  4155  000E2A  C01D  F059         	movff	?___ftmul,exp@x
  4156  000E2E  C01E  F05A         	movff	?___ftmul+1,exp@x+1
  4157  000E32  C01F  F05B         	movff	?___ftmul+2,exp@x+2
  4158  000E36  C059  F051         	movff	exp@x,floor@x
  4159  000E3A  C05A  F052         	movff	exp@x+1,floor@x+1
  4160  000E3E  C05B  F053         	movff	exp@x+2,floor@x+2
  4161  000E42  EC46  F010         	call	_floor	;wreg free
  4162  000E46  C051  F05C         	movff	?_floor,_exp$1407
  4163  000E4A  C052  F05D         	movff	?_floor+1,_exp$1407+1
  4164  000E4E  C053  F05E         	movff	?_floor+2,_exp$1407+2
  4165  000E52  C05C  F038         	movff	_exp$1407,___fttol@f1
  4166  000E56  C05D  F039         	movff	_exp$1407+1,___fttol@f1+1
  4167  000E5A  C05E  F03A         	movff	_exp$1407+2,___fttol@f1+2
  4168  000E5E  ECDF  F00E         	call	___fttol	;wreg free
  4169  000E62  C038  F05F         	movff	?___fttol,exp@exponent
  4170  000E66  C039  F060         	movff	?___fttol+1,exp@exponent+1
  4171  000E6A  C059  F038         	movff	exp@x,___ftsub@f1
  4172  000E6E  C05A  F039         	movff	exp@x+1,___ftsub@f1+1
  4173  000E72  C05B  F03A         	movff	exp@x+2,___ftsub@f1+2
  4174  000E76  C05F  F019         	movff	exp@exponent,___awtoft@c
  4175  000E7A  C060  F01A         	movff	exp@exponent+1,___awtoft@c+1
  4176  000E7E  EC6B  F015         	call	___awtoft	;wreg free
  4177  000E82  C019  F03B         	movff	?___awtoft,___ftsub@f2
  4178  000E86  C01A  F03C         	movff	?___awtoft+1,___ftsub@f2+1
  4179  000E8A  C01B  F03D         	movff	?___awtoft+2,___ftsub@f2+2
  4180  000E8E  EC2E  F015         	call	___ftsub	;wreg free
  4181  000E92  C038  F059         	movff	?___ftsub,exp@x
  4182  000E96  C039  F05A         	movff	?___ftsub+1,exp@x+1
  4183  000E9A  C03A  F05B         	movff	?___ftsub+2,exp@x+2
  4184  000E9E  C059  F038         	movff	exp@x,eval_poly@x
  4185  000EA2  C05A  F039         	movff	exp@x+1,eval_poly@x+1
  4186  000EA6  C05B  F03A         	movff	exp@x+2,eval_poly@x+2
  4187  000EAA  0EAF               	movlw	low exp@coeff
  4188  000EAC  6E3B               	movwf	eval_poly@d,c
  4189  000EAE  0EFE               	movlw	high exp@coeff
  4190  000EB0  6E3C               	movwf	eval_poly@d+1,c
  4191  000EB2  0E00               	movlw	0
  4192  000EB4  6E3E               	movwf	eval_poly@n+1,c
  4193  000EB6  0E09               	movlw	9
  4194  000EB8  6E3D               	movwf	eval_poly@n,c
  4195  000EBA  ECB5  F010         	call	_eval_poly	;wreg free
  4196  000EBE  C038  F044         	movff	?_eval_poly,ldexp@value
  4197  000EC2  C039  F045         	movff	?_eval_poly+1,ldexp@value+1
  4198  000EC6  C03A  F046         	movff	?_eval_poly+2,ldexp@value+2
  4199  000ECA  C05F  F047         	movff	exp@exponent,ldexp@newexp
  4200  000ECE  C060  F048         	movff	exp@exponent+1,ldexp@newexp+1
  4201  000ED2  EC1E  F011         	call	_ldexp	;wreg free
  4202  000ED6  C044  F059         	movff	?_ldexp,exp@x
  4203  000EDA  C045  F05A         	movff	?_ldexp+1,exp@x+1
  4204  000EDE  C046  F05B         	movff	?_ldexp+2,exp@x+2
  4205  000EE2  5061               	movf	exp@sign,w,c
  4206  000EE4  B4D8               	btfsc	status,2,c
  4207  000EE6  D025               	goto	l1054
  4208  000EE8  2859               	incf	exp@x,w,c
  4209  000EEA  E10E               	bnz	l3202
  4210  000EEC  0E7F               	movlw	127
  4211  000EEE  185A               	xorwf	exp@x+1,w,c
  4212  000EF0  E10B               	bnz	l3202
  4213  000EF2  0E7F               	movlw	127
  4214  000EF4  185B               	xorwf	exp@x+2,w,c
  4215  000EF6  A4D8               	btfss	status,2,c
  4216  000EF8  D007               	goto	l3202
  4217  000EFA  0E00               	movlw	0
  4218  000EFC  6E59               	movwf	?_exp,c
  4219  000EFE  0E00               	movlw	0
  4220  000F00  6E5A               	movwf	?_exp+1,c
  4221  000F02  0E00               	movlw	0
  4222  000F04  6E5B               	movwf	?_exp+2,c
  4223  000F06  0012               	return	
  4224  000F08                     l3202:
  4225  000F08  0E00               	movlw	0
  4226  000F0A  6E19               	movwf	___ftdiv@f1,c
  4227  000F0C  0E80               	movlw	128
  4228  000F0E  6E1A               	movwf	___ftdiv@f1+1,c
  4229  000F10  0E3F               	movlw	63
  4230  000F12  6E1B               	movwf	___ftdiv@f1+2,c
  4231  000F14  C059  F01C         	movff	exp@x,___ftdiv@f2
  4232  000F18  C05A  F01D         	movff	exp@x+1,___ftdiv@f2+1
  4233  000F1C  C05B  F01E         	movff	exp@x+2,___ftdiv@f2+2
  4234  000F20  ECD3  F00F         	call	___ftdiv	;wreg free
  4235  000F24  C019  F059         	movff	?___ftdiv,?_exp
  4236  000F28  C01A  F05A         	movff	?___ftdiv+1,?_exp+1
  4237  000F2C  C01B  F05B         	movff	?___ftdiv+2,?_exp+2
  4238  000F30  0012               	return	
  4239  000F32                     l1054:
  4240  000F32  C059  F059         	movff	exp@x,?_exp
  4241  000F36  C05A  F05A         	movff	exp@x+1,?_exp+1
  4242  000F3A  C05B  F05B         	movff	exp@x+2,?_exp+2
  4243  000F3E  0012               	return		;funcret
  4244  000F40                     __end_of_exp:
  4245                           	opt stack 0
  4246                           tblptru	equ	0xFF8
  4247                           tblptrh	equ	0xFF7
  4248                           tblptrl	equ	0xFF6
  4249                           tablat	equ	0xFF5
  4250                           prodh	equ	0xFF4
  4251                           prodl	equ	0xFF3
  4252                           intcon	equ	0xFF2
  4253                           intcon2	equ	0xFF1
  4254                           intcon3	equ	0xFF0
  4255                           postinc0	equ	0xFEE
  4256                           wreg	equ	0xFE8
  4257                           postdec1	equ	0xFE5
  4258                           fsr1l	equ	0xFE1
  4259                           indf2	equ	0xFDF
  4260                           fsr2h	equ	0xFDA
  4261                           fsr2l	equ	0xFD9
  4262                           status	equ	0xFD8
  4263                           
  4264 ;; *************** function _ldexp *****************
  4265 ;; Defined at:
  4266 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;  value           3   67[COMRAM] unsigned char 
  4269 ;;  newexp          2   70[COMRAM] int 
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;		None
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  3   67[COMRAM] int 
  4274 ;; Registers used:
  4275 ;;		wreg, status,2, status,0
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4281 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4283 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4284 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4285 ;;Total ram usage:        7 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    1
  4288 ;; This function calls:
  4289 ;;		Nothing
  4290 ;; This function is called by:
  4291 ;;		_exp
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           	psect	text10
  4296  00223C                     __ptext10:
  4297                           	opt stack 0
  4298  00223C                     _ldexp:
  4299                           	opt stack 24
  4300                           
  4301                           ;incstack = 0
  4302  00223C  5044               	movf	ldexp@value,w,c
  4303  00223E  1045               	iorwf	ldexp@value+1,w,c
  4304  002240  1046               	iorwf	ldexp@value+2,w,c
  4305  002242  A4D8               	btfss	status,2,c
  4306  002244  D007               	goto	l3100
  4307  002246  0E00               	movlw	0
  4308  002248  6E44               	movwf	?_ldexp,c
  4309  00224A  0E00               	movlw	0
  4310  00224C  6E45               	movwf	?_ldexp+1,c
  4311  00224E  0E00               	movlw	0
  4312  002250  6E46               	movwf	?_ldexp+2,c
  4313  002252  0012               	return	
  4314  002254                     l3100:
  4315  002254  5046               	movf	ldexp@value+2,w,c
  4316  002256  0B7F               	andlw	127
  4317  002258  6E49               	movwf	??_ldexp& (0+255),c
  4318  00225A  6A4A               	clrf	(??_ldexp+1)& (0+255),c
  4319  00225C  90D8               	bcf	status,0,c
  4320  00225E  3649               	rlcf	??_ldexp,f,c
  4321  002260  364A               	rlcf	??_ldexp+1,f,c
  4322  002262  5049               	movf	??_ldexp,w,c
  4323  002264  2647               	addwf	ldexp@newexp,f,c
  4324  002266  504A               	movf	??_ldexp+1,w,c
  4325  002268  2248               	addwfc	ldexp@newexp+1,f,c
  4326  00226A  AE45               	btfss	ldexp@value+1,7,c
  4327  00226C  D003               	goto	u2550
  4328  00226E  6A49               	clrf	??_ldexp& (0+255),c
  4329  002270  2A49               	incf	??_ldexp& (0+255),f,c
  4330  002272  D001               	goto	u2558
  4331  002274                     u2550:
  4332  002274  6A49               	clrf	??_ldexp& (0+255),c
  4333  002276                     u2558:
  4334  002276  5049               	movf	??_ldexp,w,c
  4335  002278  2647               	addwf	ldexp@newexp,f,c
  4336  00227A  0E00               	movlw	0
  4337  00227C  2248               	addwfc	ldexp@newexp+1,f,c
  4338  00227E  AE48               	btfss	ldexp@newexp+1,7,c
  4339  002280  D00B               	goto	l3108
  4340  002282  0E00               	movlw	0
  4341  002284  6E6E               	movwf	_errno+1,c
  4342  002286  0E22               	movlw	34
  4343  002288  6E6D               	movwf	_errno,c
  4344  00228A  0E00               	movlw	0
  4345  00228C  6E44               	movwf	?_ldexp,c
  4346  00228E  0E00               	movlw	0
  4347  002290  6E45               	movwf	?_ldexp+1,c
  4348  002292  0E00               	movlw	0
  4349  002294                     L2:
  4350  002294  6E46               	movwf	?_ldexp+2,c
  4351  002296  0012               	return	
  4352  002298                     l3108:
  4353  002298  BE48               	btfsc	ldexp@newexp+1,7,c
  4354  00229A  D015               	goto	l3124
  4355  00229C  0448               	decf	ldexp@newexp+1,w,c
  4356  00229E  A0D8               	btfss	status,0,c
  4357  0022A0  D012               	goto	l3124
  4358  0022A2  0E00               	movlw	0
  4359  0022A4  6E6E               	movwf	_errno+1,c
  4360  0022A6  0E22               	movlw	34
  4361  0022A8  6E6D               	movwf	_errno,c
  4362  0022AA  AE46               	btfss	ldexp@value+2,7,c
  4363  0022AC  D006               	goto	l3120
  4364  0022AE  0EFF               	movlw	255
  4365  0022B0  6E44               	movwf	?_ldexp,c
  4366  0022B2  0E7F               	movlw	127
  4367  0022B4  6E45               	movwf	?_ldexp+1,c
  4368  0022B6  0EFF               	movlw	255
  4369  0022B8  D7ED               	goto	L2
  4370  0022BA                     l3120:
  4371  0022BA  0EFF               	movlw	255
  4372  0022BC  6E44               	movwf	?_ldexp,c
  4373  0022BE  0E7F               	movlw	127
  4374  0022C0  6E45               	movwf	?_ldexp+1,c
  4375  0022C2  0E7F               	movlw	127
  4376  0022C4  D7E7               	goto	L2
  4377  0022C6                     l3124:
  4378  0022C6  3448               	rlcf	ldexp@newexp+1,w,c
  4379  0022C8  3048               	rrcf	ldexp@newexp+1,w,c
  4380  0022CA  6E4A               	movwf	(??_ldexp+1)& (0+255),c
  4381  0022CC  3047               	rrcf	ldexp@newexp,w,c
  4382  0022CE  6E49               	movwf	??_ldexp& (0+255),c
  4383  0022D0  5046               	movf	ldexp@value+2,w,c
  4384  0022D2  1849               	xorwf	??_ldexp,w,c
  4385  0022D4  0B80               	andlw	-128
  4386  0022D6  1849               	xorwf	??_ldexp,w,c
  4387  0022D8  6E46               	movwf	ldexp@value+2,c
  4388  0022DA  C047  F049         	movff	ldexp@newexp,??_ldexp
  4389  0022DE  0E01               	movlw	1
  4390  0022E0  1649               	andwf	??_ldexp,f,c
  4391  0022E2  3249               	rrcf	??_ldexp,f,c
  4392  0022E4  3249               	rrcf	??_ldexp,f,c
  4393  0022E6  5045               	movf	ldexp@value+1,w,c
  4394  0022E8  1849               	xorwf	??_ldexp,w,c
  4395  0022EA  0B7F               	andlw	-129
  4396  0022EC  1849               	xorwf	??_ldexp,w,c
  4397  0022EE  6E45               	movwf	ldexp@value+1,c
  4398  0022F0  C044  F044         	movff	ldexp@value,?_ldexp
  4399  0022F4  C045  F045         	movff	ldexp@value+1,?_ldexp+1
  4400  0022F8  C046  F046         	movff	ldexp@value+2,?_ldexp+2
  4401  0022FC  0012               	return	
  4402  0022FE                     __end_of_ldexp:
  4403                           	opt stack 0
  4404                           tblptru	equ	0xFF8
  4405                           tblptrh	equ	0xFF7
  4406                           tblptrl	equ	0xFF6
  4407                           tablat	equ	0xFF5
  4408                           prodh	equ	0xFF4
  4409                           prodl	equ	0xFF3
  4410                           intcon	equ	0xFF2
  4411                           intcon2	equ	0xFF1
  4412                           intcon3	equ	0xFF0
  4413                           postinc0	equ	0xFEE
  4414                           wreg	equ	0xFE8
  4415                           postdec1	equ	0xFE5
  4416                           fsr1l	equ	0xFE1
  4417                           indf2	equ	0xFDF
  4418                           fsr2h	equ	0xFDA
  4419                           fsr2l	equ	0xFD9
  4420                           status	equ	0xFD8
  4421                           
  4422 ;; *************** function _floor *****************
  4423 ;; Defined at:
  4424 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;  x               3   80[COMRAM] int 
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  i               3   83[COMRAM] int 
  4429 ;;  expon           2   86[COMRAM] int 
  4430 ;; Return value:  Size  Location     Type
  4431 ;;                  3   80[COMRAM] int 
  4432 ;; Registers used:
  4433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4439 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4443 ;;Total ram usage:        8 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    3
  4446 ;; This function calls:
  4447 ;;		___altoft
  4448 ;;		___ftadd
  4449 ;;		___ftge
  4450 ;;		___fttol
  4451 ;;		_frexp
  4452 ;; This function is called by:
  4453 ;;		_exp
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           	psect	text11
  4458  00208C                     __ptext11:
  4459                           	opt stack 0
  4460  00208C                     _floor:
  4461                           	opt stack 22
  4462                           
  4463                           ;incstack = 0
  4464  00208C  C051  F011         	movff	floor@x,frexp@value
  4465  002090  C052  F012         	movff	floor@x+1,frexp@value+1
  4466  002094  C053  F013         	movff	floor@x+2,frexp@value+2
  4467  002098  0E57               	movlw	low floor@expon
  4468  00209A  6E14               	movwf	frexp@eptr,c
  4469  00209C  0E00               	movlw	high floor@expon
  4470  00209E  6E15               	movwf	frexp@eptr+1,c
  4471  0020A0  ECD6  F011         	call	_frexp	;wreg free
  4472  0020A4  AE58               	btfss	floor@expon+1,7,c
  4473  0020A6  D010               	goto	l3078
  4474  0020A8  AE53               	btfss	floor@x+2,7,c
  4475  0020AA  D007               	goto	l3074
  4476  0020AC  0E00               	movlw	0
  4477  0020AE  6E51               	movwf	?_floor,c
  4478  0020B0  0E80               	movlw	128
  4479  0020B2  6E52               	movwf	?_floor+1,c
  4480  0020B4  0EBF               	movlw	191
  4481  0020B6  6E53               	movwf	?_floor+2,c
  4482  0020B8  0012               	return	
  4483  0020BA                     l3074:
  4484  0020BA  0E00               	movlw	0
  4485  0020BC  6E51               	movwf	?_floor,c
  4486  0020BE  0E00               	movlw	0
  4487  0020C0  6E52               	movwf	?_floor+1,c
  4488  0020C2  0E00               	movlw	0
  4489  0020C4  6E53               	movwf	?_floor+2,c
  4490  0020C6  0012               	return	
  4491  0020C8                     l3078:
  4492  0020C8  5058               	movf	floor@expon+1,w,c
  4493  0020CA  E104               	bnz	u2510
  4494  0020CC  0E15               	movlw	21
  4495  0020CE  5C57               	subwf	floor@expon,w,c
  4496  0020D0  A0D8               	btfss	status,0,c
  4497  0020D2  D007               	goto	l3082
  4498  0020D4                     u2510:
  4499  0020D4  C051  F051         	movff	floor@x,?_floor
  4500  0020D8  C052  F052         	movff	floor@x+1,?_floor+1
  4501  0020DC  C053  F053         	movff	floor@x+2,?_floor+2
  4502  0020E0  0012               	return	
  4503  0020E2                     l3082:
  4504  0020E2  C051  F038         	movff	floor@x,___fttol@f1
  4505  0020E6  C052  F039         	movff	floor@x+1,___fttol@f1+1
  4506  0020EA  C053  F03A         	movff	floor@x+2,___fttol@f1+2
  4507  0020EE  ECDF  F00E         	call	___fttol	;wreg free
  4508  0020F2  C038  F047         	movff	?___fttol,___altoft@c
  4509  0020F6  C039  F048         	movff	?___fttol+1,___altoft@c+1
  4510  0020FA  C03A  F049         	movff	?___fttol+2,___altoft@c+2
  4511  0020FE  C03B  F04A         	movff	?___fttol+3,___altoft@c+3
  4512  002102  EC6D  F013         	call	___altoft	;wreg free
  4513  002106  C047  F054         	movff	?___altoft,floor@i
  4514  00210A  C048  F055         	movff	?___altoft+1,floor@i+1
  4515  00210E  C049  F056         	movff	?___altoft+2,floor@i+2
  4516  002112  C051  F01D         	movff	floor@x,___ftge@ff1
  4517  002116  C052  F01E         	movff	floor@x+1,___ftge@ff1+1
  4518  00211A  C053  F01F         	movff	floor@x+2,___ftge@ff1+2
  4519  00211E  C054  F020         	movff	floor@i,___ftge@ff2
  4520  002122  C055  F021         	movff	floor@i+1,___ftge@ff2+1
  4521  002126  C056  F022         	movff	floor@i+2,___ftge@ff2+2
  4522  00212A  EC1E  F012         	call	___ftge	;wreg free
  4523  00212E  B0D8               	btfsc	status,0,c
  4524  002130  D015               	goto	l1064
  4525  002132  C054  F02C         	movff	floor@i,___ftadd@f1
  4526  002136  C055  F02D         	movff	floor@i+1,___ftadd@f1+1
  4527  00213A  C056  F02E         	movff	floor@i+2,___ftadd@f1+2
  4528  00213E  0E00               	movlw	0
  4529  002140  6E2F               	movwf	___ftadd@f2,c
  4530  002142  0E80               	movlw	128
  4531  002144  6E30               	movwf	___ftadd@f2+1,c
  4532  002146  0EBF               	movlw	191
  4533  002148  6E31               	movwf	___ftadd@f2+2,c
  4534  00214A  EC8B  F008         	call	___ftadd	;wreg free
  4535  00214E  C02C  F051         	movff	?___ftadd,?_floor
  4536  002152  C02D  F052         	movff	?___ftadd+1,?_floor+1
  4537  002156  C02E  F053         	movff	?___ftadd+2,?_floor+2
  4538  00215A  0012               	return	
  4539  00215C                     l1064:
  4540  00215C  C054  F051         	movff	floor@i,?_floor
  4541  002160  C055  F052         	movff	floor@i+1,?_floor+1
  4542  002164  C056  F053         	movff	floor@i+2,?_floor+2
  4543  002168  0012               	return		;funcret
  4544  00216A                     __end_of_floor:
  4545                           	opt stack 0
  4546                           tblptru	equ	0xFF8
  4547                           tblptrh	equ	0xFF7
  4548                           tblptrl	equ	0xFF6
  4549                           tablat	equ	0xFF5
  4550                           prodh	equ	0xFF4
  4551                           prodl	equ	0xFF3
  4552                           intcon	equ	0xFF2
  4553                           intcon2	equ	0xFF1
  4554                           intcon3	equ	0xFF0
  4555                           postinc0	equ	0xFEE
  4556                           wreg	equ	0xFE8
  4557                           postdec1	equ	0xFE5
  4558                           fsr1l	equ	0xFE1
  4559                           indf2	equ	0xFDF
  4560                           fsr2h	equ	0xFDA
  4561                           fsr2l	equ	0xFD9
  4562                           status	equ	0xFD8
  4563                           
  4564 ;; *************** function _frexp *****************
  4565 ;; Defined at:
  4566 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;  value           3   16[COMRAM] int 
  4569 ;;  eptr            2   19[COMRAM] PTR int 
  4570 ;;		 -> log@exponent(2), floor@expon(2), 
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;		None
  4573 ;; Return value:  Size  Location     Type
  4574 ;;                  3   16[COMRAM] PTR int 
  4575 ;; Registers used:
  4576 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4577 ;; Tracked objects:
  4578 ;;		On entry : 0/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4582 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4585 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;Total ram usage:        7 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; Hardware stack levels required when called:    1
  4589 ;; This function calls:
  4590 ;;		Nothing
  4591 ;; This function is called by:
  4592 ;;		_floor
  4593 ;;		_log
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           	psect	text12
  4598  0023AC                     __ptext12:
  4599                           	opt stack 0
  4600  0023AC                     _frexp:
  4601                           	opt stack 24
  4602                           
  4603                           ;incstack = 0
  4604  0023AC  5011               	movf	frexp@value,w,c
  4605  0023AE  1012               	iorwf	frexp@value+1,w,c
  4606  0023B0  1013               	iorwf	frexp@value+2,w,c
  4607  0023B2  A4D8               	btfss	status,2,c
  4608  0023B4  D00F               	goto	l2982
  4609  0023B6  C014  FFD9         	movff	frexp@eptr,fsr2l
  4610  0023BA  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4611  0023BE  0E00               	movlw	0
  4612  0023C0  6EDE               	movwf	postinc2,c
  4613  0023C2  0E00               	movlw	0
  4614  0023C4  6EDD               	movwf	postdec2,c
  4615  0023C6  0E00               	movlw	0
  4616  0023C8  6E11               	movwf	?_frexp,c
  4617  0023CA  0E00               	movlw	0
  4618  0023CC  6E12               	movwf	?_frexp+1,c
  4619  0023CE  0E00               	movlw	0
  4620  0023D0  6E13               	movwf	?_frexp+2,c
  4621  0023D2  0012               	return	
  4622  0023D4                     l2982:
  4623  0023D4  5013               	movf	frexp@value+2,w,c
  4624  0023D6  0B7F               	andlw	127
  4625  0023D8  6E16               	movwf	??_frexp& (0+255),c
  4626  0023DA  6A17               	clrf	(??_frexp+1)& (0+255),c
  4627  0023DC  90D8               	bcf	status,0,c
  4628  0023DE  3616               	rlcf	??_frexp,f,c
  4629  0023E0  3617               	rlcf	??_frexp+1,f,c
  4630  0023E2  C014  FFD9         	movff	frexp@eptr,fsr2l
  4631  0023E6  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4632  0023EA  C016  FFDE         	movff	??_frexp,postinc2
  4633  0023EE  C017  FFDD         	movff	??_frexp+1,postdec2
  4634  0023F2  AE12               	btfss	frexp@value+1,7,c
  4635  0023F4  D003               	goto	u2400
  4636  0023F6  6A16               	clrf	??_frexp& (0+255),c
  4637  0023F8  2A16               	incf	??_frexp& (0+255),f,c
  4638  0023FA  D001               	goto	u2408
  4639  0023FC                     u2400:
  4640  0023FC  6A16               	clrf	??_frexp& (0+255),c
  4641  0023FE                     u2408:
  4642  0023FE  5016               	movf	??_frexp,w,c
  4643  002400  C014  FFD9         	movff	frexp@eptr,fsr2l
  4644  002404  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4645  002408  12DE               	iorwf	postinc2,f,c
  4646  00240A  0E00               	movlw	0
  4647  00240C  12DD               	iorwf	postdec2,f,c
  4648  00240E  C014  FFD9         	movff	frexp@eptr,fsr2l
  4649  002412  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4650  002416  0E82               	movlw	130
  4651  002418  26DE               	addwf	postinc2,f,c
  4652  00241A  0EFF               	movlw	255
  4653  00241C  22DD               	addwfc	postdec2,f,c
  4654  00241E  8013               	bsf	frexp@value+2,0,c
  4655  002420  8213               	bsf	frexp@value+2,1,c
  4656  002422  8413               	bsf	frexp@value+2,2,c
  4657  002424  8613               	bsf	frexp@value+2,3,c
  4658  002426  8813               	bsf	frexp@value+2,4,c
  4659  002428  8A13               	bsf	frexp@value+2,5,c
  4660  00242A  9C13               	bcf	frexp@value+2,6,c
  4661  00242C  9E12               	bcf	frexp@value+1,7,c
  4662  00242E  C011  F011         	movff	frexp@value,?_frexp
  4663  002432  C012  F012         	movff	frexp@value+1,?_frexp+1
  4664  002436  C013  F013         	movff	frexp@value+2,?_frexp+2
  4665  00243A  0012               	return	
  4666  00243C                     __end_of_frexp:
  4667                           	opt stack 0
  4668                           tblptru	equ	0xFF8
  4669                           tblptrh	equ	0xFF7
  4670                           tblptrl	equ	0xFF6
  4671                           tablat	equ	0xFF5
  4672                           prodh	equ	0xFF4
  4673                           prodl	equ	0xFF3
  4674                           intcon	equ	0xFF2
  4675                           intcon2	equ	0xFF1
  4676                           intcon3	equ	0xFF0
  4677                           postinc0	equ	0xFEE
  4678                           wreg	equ	0xFE8
  4679                           postdec1	equ	0xFE5
  4680                           fsr1l	equ	0xFE1
  4681                           indf2	equ	0xFDF
  4682                           postinc2	equ	0xFDE
  4683                           postdec2	equ	0xFDD
  4684                           fsr2h	equ	0xFDA
  4685                           fsr2l	equ	0xFD9
  4686                           status	equ	0xFD8
  4687                           
  4688 ;; *************** function ___fttol *****************
  4689 ;; Defined at:
  4690 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;  f1              3   55[COMRAM] float 
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;  lval            4   65[COMRAM] unsigned long 
  4695 ;;  exp1            1   69[COMRAM] unsigned char 
  4696 ;;  sign1           1   64[COMRAM] unsigned char 
  4697 ;; Return value:  Size  Location     Type
  4698 ;;                  4   55[COMRAM] long 
  4699 ;; Registers used:
  4700 ;;		wreg, status,2, status,0
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4706 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;Total ram usage:       15 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; Hardware stack levels required when called:    1
  4713 ;; This function calls:
  4714 ;;		Nothing
  4715 ;; This function is called by:
  4716 ;;		_dec_to_hex
  4717 ;;		_init_operation
  4718 ;;		_pow
  4719 ;;		_exp
  4720 ;;		_floor
  4721 ;;		_hex_to_dec
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           	psect	text13
  4726  001DBE                     __ptext13:
  4727                           	opt stack 0
  4728  001DBE                     ___fttol:
  4729                           	opt stack 23
  4730                           
  4731                           ;incstack = 0
  4732  001DBE  C03A  F03C         	movff	___fttol@f1+2,??___fttol
  4733  001DC2  6A3D               	clrf	(??___fttol+1)& (0+255),c
  4734  001DC4  6A3E               	clrf	(??___fttol+2)& (0+255),c
  4735  001DC6  3439               	rlcf	___fttol@f1+1,w,c
  4736  001DC8  363C               	rlcf	??___fttol& (0+255),f,c
  4737  001DCA  E301               	bnc	u2311
  4738  001DCC  803D               	bsf	(??___fttol+1)& (0+255),0,c
  4739  001DCE                     u2311:
  4740  001DCE  503C               	movf	??___fttol,w,c
  4741  001DD0  6E46               	movwf	___fttol@exp1,c
  4742  001DD2  5046               	movf	___fttol@exp1,w,c
  4743  001DD4  A4D8               	btfss	status,2,c
  4744  001DD6  D009               	goto	l2934
  4745  001DD8  0E00               	movlw	0
  4746  001DDA  6E38               	movwf	?___fttol,c
  4747  001DDC  0E00               	movlw	0
  4748  001DDE  6E39               	movwf	?___fttol+1,c
  4749  001DE0  0E00               	movlw	0
  4750  001DE2  6E3A               	movwf	?___fttol+2,c
  4751  001DE4  0E00               	movlw	0
  4752  001DE6  6E3B               	movwf	?___fttol+3,c
  4753  001DE8  0012               	return	
  4754  001DEA                     l2934:
  4755  001DEA  0E17               	movlw	23
  4756  001DEC  6E3C               	movwf	??___fttol& (0+255),c
  4757  001DEE  C038  F03D         	movff	___fttol@f1,??___fttol+1
  4758  001DF2  C039  F03E         	movff	___fttol@f1+1,??___fttol+2
  4759  001DF6  C03A  F03F         	movff	___fttol@f1+2,??___fttol+3
  4760  001DFA  283C               	incf	??___fttol,w,c
  4761  001DFC  6E40               	movwf	(??___fttol+4)& (0+255),c
  4762  001DFE  D004               	goto	u2330
  4763  001E00                     u2335:
  4764  001E00  90D8               	bcf	status,0,c
  4765  001E02  323F               	rrcf	??___fttol+3,f,c
  4766  001E04  323E               	rrcf	??___fttol+2,f,c
  4767  001E06  323D               	rrcf	??___fttol+1,f,c
  4768  001E08                     u2330:
  4769  001E08  2E40               	decfsz	(??___fttol+4)& (0+255),f,c
  4770  001E0A  D7FA               	goto	u2335
  4771  001E0C  503D               	movf	??___fttol+1,w,c
  4772  001E0E  6E41               	movwf	___fttol@sign1,c
  4773  001E10  8E39               	bsf	___fttol@f1+1,7,c
  4774  001E12  0EFF               	movlw	255
  4775  001E14  1638               	andwf	___fttol@f1,f,c
  4776  001E16  0EFF               	movlw	255
  4777  001E18  1639               	andwf	___fttol@f1+1,f,c
  4778  001E1A  0E00               	movlw	0
  4779  001E1C  163A               	andwf	___fttol@f1+2,f,c
  4780  001E1E  5038               	movf	___fttol@f1,w,c
  4781  001E20  6E42               	movwf	___fttol@lval,c
  4782  001E22  5039               	movf	___fttol@f1+1,w,c
  4783  001E24  6E43               	movwf	___fttol@lval+1,c
  4784  001E26  503A               	movf	___fttol@f1+2,w,c
  4785  001E28  6E44               	movwf	___fttol@lval+2,c
  4786  001E2A  6A45               	clrf	___fttol@lval+3,c
  4787  001E2C  0E8E               	movlw	142
  4788  001E2E  5E46               	subwf	___fttol@exp1,f,c
  4789  001E30  AE46               	btfss	___fttol@exp1,7,c
  4790  001E32  D016               	goto	l2956
  4791  001E34  5046               	movf	___fttol@exp1,w,c
  4792  001E36  0A80               	xorlw	128
  4793  001E38  0F8F               	addlw	143
  4794  001E3A  B0D8               	btfsc	status,0,c
  4795  001E3C  D009               	goto	l2952
  4796  001E3E  0E00               	movlw	0
  4797  001E40  6E38               	movwf	?___fttol,c
  4798  001E42  0E00               	movlw	0
  4799  001E44  6E39               	movwf	?___fttol+1,c
  4800  001E46  0E00               	movlw	0
  4801  001E48  6E3A               	movwf	?___fttol+2,c
  4802  001E4A  0E00               	movlw	0
  4803  001E4C  6E3B               	movwf	?___fttol+3,c
  4804  001E4E  0012               	return	
  4805  001E50                     l2952:
  4806  001E50  90D8               	bcf	status,0,c
  4807  001E52  3245               	rrcf	___fttol@lval+3,f,c
  4808  001E54  3244               	rrcf	___fttol@lval+2,f,c
  4809  001E56  3243               	rrcf	___fttol@lval+1,f,c
  4810  001E58  3242               	rrcf	___fttol@lval,f,c
  4811  001E5A  3E46               	incfsz	___fttol@exp1,f,c
  4812  001E5C  D7F9               	goto	l2952
  4813  001E5E  D015               	goto	l2966
  4814  001E60                     l2956:
  4815  001E60  0E17               	movlw	23
  4816  001E62  6446               	cpfsgt	___fttol@exp1,c
  4817  001E64  D00F               	goto	l2964
  4818  001E66  0E00               	movlw	0
  4819  001E68  6E38               	movwf	?___fttol,c
  4820  001E6A  0E00               	movlw	0
  4821  001E6C  6E39               	movwf	?___fttol+1,c
  4822  001E6E  0E00               	movlw	0
  4823  001E70  6E3A               	movwf	?___fttol+2,c
  4824  001E72  0E00               	movlw	0
  4825  001E74  6E3B               	movwf	?___fttol+3,c
  4826  001E76  0012               	return	
  4827  001E78                     l2962:
  4828  001E78  90D8               	bcf	status,0,c
  4829  001E7A  3642               	rlcf	___fttol@lval,f,c
  4830  001E7C  3643               	rlcf	___fttol@lval+1,f,c
  4831  001E7E  3644               	rlcf	___fttol@lval+2,f,c
  4832  001E80  3645               	rlcf	___fttol@lval+3,f,c
  4833  001E82  0646               	decf	___fttol@exp1,f,c
  4834  001E84                     l2964:
  4835  001E84  5046               	movf	___fttol@exp1,w,c
  4836  001E86  A4D8               	btfss	status,2,c
  4837  001E88  D7F7               	goto	l2962
  4838  001E8A                     l2966:
  4839  001E8A  5041               	movf	___fttol@sign1,w,c
  4840  001E8C  B4D8               	btfsc	status,2,c
  4841  001E8E  D008               	goto	l2970
  4842  001E90  1E45               	comf	___fttol@lval+3,f,c
  4843  001E92  1E44               	comf	___fttol@lval+2,f,c
  4844  001E94  1E43               	comf	___fttol@lval+1,f,c
  4845  001E96  6C42               	negf	___fttol@lval,c
  4846  001E98  0E00               	movlw	0
  4847  001E9A  2243               	addwfc	___fttol@lval+1,f,c
  4848  001E9C  2244               	addwfc	___fttol@lval+2,f,c
  4849  001E9E  2245               	addwfc	___fttol@lval+3,f,c
  4850  001EA0                     l2970:
  4851  001EA0  C042  F038         	movff	___fttol@lval,?___fttol
  4852  001EA4  C043  F039         	movff	___fttol@lval+1,?___fttol+1
  4853  001EA8  C044  F03A         	movff	___fttol@lval+2,?___fttol+2
  4854  001EAC  C045  F03B         	movff	___fttol@lval+3,?___fttol+3
  4855  001EB0  0012               	return	
  4856  001EB2                     __end_of___fttol:
  4857                           	opt stack 0
  4858                           tblptru	equ	0xFF8
  4859                           tblptrh	equ	0xFF7
  4860                           tblptrl	equ	0xFF6
  4861                           tablat	equ	0xFF5
  4862                           prodh	equ	0xFF4
  4863                           prodl	equ	0xFF3
  4864                           intcon	equ	0xFF2
  4865                           intcon2	equ	0xFF1
  4866                           intcon3	equ	0xFF0
  4867                           postinc0	equ	0xFEE
  4868                           wreg	equ	0xFE8
  4869                           postdec1	equ	0xFE5
  4870                           fsr1l	equ	0xFE1
  4871                           indf2	equ	0xFDF
  4872                           postinc2	equ	0xFDE
  4873                           postdec2	equ	0xFDD
  4874                           fsr2h	equ	0xFDA
  4875                           fsr2l	equ	0xFD9
  4876                           status	equ	0xFD8
  4877                           
  4878 ;; *************** function ___ftge *****************
  4879 ;; Defined at:
  4880 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  ff1             3   28[COMRAM] float 
  4883 ;;  ff2             3   31[COMRAM] float 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;		None
  4886 ;; Return value:  Size  Location     Type
  4887 ;;		None               void
  4888 ;; Registers used:
  4889 ;;		wreg, status,2, status,0
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4895 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;Total ram usage:        9 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    1
  4902 ;; This function calls:
  4903 ;;		Nothing
  4904 ;; This function is called by:
  4905 ;;		_init_operation
  4906 ;;		_pow
  4907 ;;		_exp
  4908 ;;		_floor
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text14
  4913  00243C                     __ptext14:
  4914                           	opt stack 0
  4915  00243C                     ___ftge:
  4916                           	opt stack 23
  4917                           
  4918                           ;incstack = 0
  4919  00243C  AE1F               	btfss	___ftge@ff1+2,7,c
  4920  00243E  D016               	goto	l2914
  4921  002440  C01D  F023         	movff	___ftge@ff1,??___ftge
  4922  002444  C01E  F024         	movff	___ftge@ff1+1,??___ftge+1
  4923  002448  C01F  F025         	movff	___ftge@ff1+2,??___ftge+2
  4924  00244C  1E23               	comf	??___ftge,f,c
  4925  00244E  1E24               	comf	??___ftge+1,f,c
  4926  002450  1E25               	comf	??___ftge+2,f,c
  4927  002452  2A23               	incf	??___ftge,f,c
  4928  002454  0E00               	movlw	0
  4929  002456  2224               	addwfc	??___ftge+1,f,c
  4930  002458  2225               	addwfc	??___ftge+2,f,c
  4931  00245A  0E00               	movlw	0
  4932  00245C  2423               	addwf	??___ftge,w,c
  4933  00245E  6E1D               	movwf	___ftge@ff1,c
  4934  002460  0E00               	movlw	0
  4935  002462  2024               	addwfc	??___ftge+1,w,c
  4936  002464  6E1E               	movwf	___ftge@ff1+1,c
  4937  002466  0E80               	movlw	128
  4938  002468  2025               	addwfc	??___ftge+2,w,c
  4939  00246A  6E1F               	movwf	___ftge@ff1+2,c
  4940  00246C                     l2914:
  4941  00246C  AE22               	btfss	___ftge@ff2+2,7,c
  4942  00246E  D016               	goto	l2918
  4943  002470  C020  F023         	movff	___ftge@ff2,??___ftge
  4944  002474  C021  F024         	movff	___ftge@ff2+1,??___ftge+1
  4945  002478  C022  F025         	movff	___ftge@ff2+2,??___ftge+2
  4946  00247C  1E23               	comf	??___ftge,f,c
  4947  00247E  1E24               	comf	??___ftge+1,f,c
  4948  002480  1E25               	comf	??___ftge+2,f,c
  4949  002482  2A23               	incf	??___ftge,f,c
  4950  002484  0E00               	movlw	0
  4951  002486  2224               	addwfc	??___ftge+1,f,c
  4952  002488  2225               	addwfc	??___ftge+2,f,c
  4953  00248A  0E00               	movlw	0
  4954  00248C  2423               	addwf	??___ftge,w,c
  4955  00248E  6E20               	movwf	___ftge@ff2,c
  4956  002490  0E00               	movlw	0
  4957  002492  2024               	addwfc	??___ftge+1,w,c
  4958  002494  6E21               	movwf	___ftge@ff2+1,c
  4959  002496  0E80               	movlw	128
  4960  002498  2025               	addwfc	??___ftge+2,w,c
  4961  00249A  6E22               	movwf	___ftge@ff2+2,c
  4962  00249C                     l2918:
  4963  00249C  0E00               	movlw	0
  4964  00249E  1A1D               	xorwf	___ftge@ff1,f,c
  4965  0024A0  0E00               	movlw	0
  4966  0024A2  1A1E               	xorwf	___ftge@ff1+1,f,c
  4967  0024A4  0E80               	movlw	128
  4968  0024A6  1A1F               	xorwf	___ftge@ff1+2,f,c
  4969  0024A8  0E00               	movlw	0
  4970  0024AA  1A20               	xorwf	___ftge@ff2,f,c
  4971  0024AC  0E00               	movlw	0
  4972  0024AE  1A21               	xorwf	___ftge@ff2+1,f,c
  4973  0024B0  0E80               	movlw	128
  4974  0024B2  1A22               	xorwf	___ftge@ff2+2,f,c
  4975  0024B4  5020               	movf	___ftge@ff2,w,c
  4976  0024B6  5C1D               	subwf	___ftge@ff1,w,c
  4977  0024B8  5021               	movf	___ftge@ff2+1,w,c
  4978  0024BA  581E               	subwfb	___ftge@ff1+1,w,c
  4979  0024BC  5022               	movf	___ftge@ff2+2,w,c
  4980  0024BE  581F               	subwfb	___ftge@ff1+2,w,c
  4981  0024C0  B0D8               	btfsc	status,0,c
  4982  0024C2  D002               	goto	l2924
  4983  0024C4  90D8               	bcf	status,0,c
  4984  0024C6  0012               	return	
  4985  0024C8                     l2924:
  4986  0024C8  80D8               	bsf	status,0,c
  4987  0024CA  0012               	return	
  4988  0024CC                     __end_of___ftge:
  4989                           	opt stack 0
  4990                           tblptru	equ	0xFF8
  4991                           tblptrh	equ	0xFF7
  4992                           tblptrl	equ	0xFF6
  4993                           tablat	equ	0xFF5
  4994                           prodh	equ	0xFF4
  4995                           prodl	equ	0xFF3
  4996                           intcon	equ	0xFF2
  4997                           intcon2	equ	0xFF1
  4998                           intcon3	equ	0xFF0
  4999                           postinc0	equ	0xFEE
  5000                           wreg	equ	0xFE8
  5001                           postdec1	equ	0xFE5
  5002                           fsr1l	equ	0xFE1
  5003                           indf2	equ	0xFDF
  5004                           postinc2	equ	0xFDE
  5005                           postdec2	equ	0xFDD
  5006                           fsr2h	equ	0xFDA
  5007                           fsr2l	equ	0xFD9
  5008                           status	equ	0xFD8
  5009                           
  5010 ;; *************** function ___altoft *****************
  5011 ;; Defined at:
  5012 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;  c               4   70[COMRAM] long 
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;  sign            1   79[COMRAM] unsigned char 
  5017 ;;  exp             1   78[COMRAM] unsigned char 
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  3   70[COMRAM] float 
  5020 ;; Registers used:
  5021 ;;		wreg, status,2, status,0, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5027 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5029 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5030 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5031 ;;Total ram usage:       10 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    2
  5034 ;; This function calls:
  5035 ;;		___ftpack
  5036 ;; This function is called by:
  5037 ;;		_floor
  5038 ;;		_hex_to_dec
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           	psect	text15
  5043  0026DA                     __ptext15:
  5044                           	opt stack 0
  5045  0026DA                     ___altoft:
  5046                           	opt stack 22
  5047                           
  5048                           ;incstack = 0
  5049  0026DA  0E00               	movlw	0
  5050  0026DC  6E50               	movwf	___altoft@sign,c
  5051  0026DE  0E8E               	movlw	142
  5052  0026E0  6E4F               	movwf	___altoft@exp,c
  5053  0026E2  AE4A               	btfss	___altoft@c+3,7,c
  5054  0026E4  D011               	goto	l2786
  5055  0026E6  1E4A               	comf	___altoft@c+3,f,c
  5056  0026E8  1E49               	comf	___altoft@c+2,f,c
  5057  0026EA  1E48               	comf	___altoft@c+1,f,c
  5058  0026EC  6C47               	negf	___altoft@c,c
  5059  0026EE  0E00               	movlw	0
  5060  0026F0  2248               	addwfc	___altoft@c+1,f,c
  5061  0026F2  2249               	addwfc	___altoft@c+2,f,c
  5062  0026F4  224A               	addwfc	___altoft@c+3,f,c
  5063  0026F6  0E01               	movlw	1
  5064  0026F8  6E50               	movwf	___altoft@sign,c
  5065  0026FA  D006               	goto	l2786
  5066  0026FC                     l2784:
  5067  0026FC  90D8               	bcf	status,0,c
  5068  0026FE  324A               	rrcf	___altoft@c+3,f,c
  5069  002700  3249               	rrcf	___altoft@c+2,f,c
  5070  002702  3248               	rrcf	___altoft@c+1,f,c
  5071  002704  3247               	rrcf	___altoft@c,f,c
  5072  002706  2A4F               	incf	___altoft@exp,f,c
  5073  002708                     l2786:
  5074  002708  0E00               	movlw	0
  5075  00270A  1447               	andwf	___altoft@c,w,c
  5076  00270C  6E4B               	movwf	??___altoft& (0+255),c
  5077  00270E  0E00               	movlw	0
  5078  002710  1448               	andwf	___altoft@c+1,w,c
  5079  002712  6E4C               	movwf	(??___altoft+1)& (0+255),c
  5080  002714  0E00               	movlw	0
  5081  002716  1449               	andwf	___altoft@c+2,w,c
  5082  002718  6E4D               	movwf	(??___altoft+2)& (0+255),c
  5083  00271A  0EFF               	movlw	255
  5084  00271C  144A               	andwf	___altoft@c+3,w,c
  5085  00271E  6E4E               	movwf	(??___altoft+3)& (0+255),c
  5086  002720  504B               	movf	??___altoft,w,c
  5087  002722  104C               	iorwf	??___altoft+1,w,c
  5088  002724  104D               	iorwf	??___altoft+2,w,c
  5089  002726  104E               	iorwf	??___altoft+3,w,c
  5090  002728  A4D8               	btfss	status,2,c
  5091  00272A  D7E8               	goto	l2784
  5092  00272C  C047  F011         	movff	___altoft@c,___ftpack@arg
  5093  002730  C048  F012         	movff	___altoft@c+1,___ftpack@arg+1
  5094  002734  C049  F013         	movff	___altoft@c+2,___ftpack@arg+2
  5095  002738  C04F  F014         	movff	___altoft@exp,___ftpack@exp
  5096  00273C  C050  F015         	movff	___altoft@sign,___ftpack@sign
  5097  002740  EC7F  F011         	call	___ftpack	;wreg free
  5098  002744  C011  F047         	movff	?___ftpack,?___altoft
  5099  002748  C012  F048         	movff	?___ftpack+1,?___altoft+1
  5100  00274C  C013  F049         	movff	?___ftpack+2,?___altoft+2
  5101  002750  0012               	return	
  5102  002752                     __end_of___altoft:
  5103                           	opt stack 0
  5104                           tblptru	equ	0xFF8
  5105                           tblptrh	equ	0xFF7
  5106                           tblptrl	equ	0xFF6
  5107                           tablat	equ	0xFF5
  5108                           prodh	equ	0xFF4
  5109                           prodl	equ	0xFF3
  5110                           intcon	equ	0xFF2
  5111                           intcon2	equ	0xFF1
  5112                           intcon3	equ	0xFF0
  5113                           postinc0	equ	0xFEE
  5114                           wreg	equ	0xFE8
  5115                           postdec1	equ	0xFE5
  5116                           fsr1l	equ	0xFE1
  5117                           indf2	equ	0xFDF
  5118                           postinc2	equ	0xFDE
  5119                           postdec2	equ	0xFDD
  5120                           fsr2h	equ	0xFDA
  5121                           fsr2l	equ	0xFD9
  5122                           status	equ	0xFD8
  5123                           
  5124 ;; *************** function _eval_poly *****************
  5125 ;; Defined at:
  5126 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;  x               3   55[COMRAM] float 
  5129 ;;  d               2   58[COMRAM] PTR const 
  5130 ;;		 -> log@coeff(27), exp@coeff(30), 
  5131 ;;  n               2   60[COMRAM] int 
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;  res             3   64[COMRAM] int 
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  3   55[COMRAM] int 
  5136 ;; Registers used:
  5137 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5143 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5144 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5145 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5146 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5147 ;;Total ram usage:       12 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    3
  5150 ;; This function calls:
  5151 ;;		___ftadd
  5152 ;;		___ftmul
  5153 ;;		___wmul
  5154 ;; This function is called by:
  5155 ;;		_exp
  5156 ;;		_log
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text16
  5161  00216A                     __ptext16:
  5162                           	opt stack 0
  5163  00216A                     _eval_poly:
  5164                           	opt stack 22
  5165                           
  5166                           ;incstack = 0
  5167  00216A  C03D  F011         	movff	eval_poly@n,___wmul@multiplier
  5168  00216E  C03E  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  5169  002172  0E00               	movlw	0
  5170  002174  6E14               	movwf	___wmul@multiplicand+1,c
  5171  002176  0E03               	movlw	3
  5172  002178  6E13               	movwf	___wmul@multiplicand,c
  5173  00217A  EC9A  F015         	call	___wmul	;wreg free
  5174  00217E  C03B  F03F         	movff	eval_poly@d,??_eval_poly
  5175  002182  C03C  F040         	movff	eval_poly@d+1,??_eval_poly+1
  5176  002186  5011               	movf	?___wmul,w,c
  5177  002188  263F               	addwf	??_eval_poly,f,c
  5178  00218A  5012               	movf	?___wmul+1,w,c
  5179  00218C  2240               	addwfc	??_eval_poly+1,f,c
  5180  00218E  C03F  FFF6         	movff	??_eval_poly,tblptrl
  5181  002192  C040  FFF7         	movff	??_eval_poly+1,tblptrh
  5182  002196                     	if	0	;tblptru may be non-zero
  5183  002196                     	endif
  5184  002196                     	if	0	;tblptru may be non-zero
  5185  002196                     	endif
  5186  002196  0009               	tblrd		*+
  5187  002198  CFF5 F041          	movff	tablat,eval_poly@res
  5188  00219C  0009               	tblrd		*+
  5189  00219E  CFF5 F042          	movff	tablat,eval_poly@res+1
  5190  0021A2  000A               	tblrd		*-
  5191  0021A4  CFF5 F043          	movff	tablat,eval_poly@res+2
  5192  0021A8  D03E               	goto	l3092
  5193  0021AA                     l3090:
  5194  0021AA  C041  F020         	movff	eval_poly@res,___ftmul@f2
  5195  0021AE  C042  F021         	movff	eval_poly@res+1,___ftmul@f2+1
  5196  0021B2  C043  F022         	movff	eval_poly@res+2,___ftmul@f2+2
  5197  0021B6  C038  F01D         	movff	eval_poly@x,___ftmul@f1
  5198  0021BA  C039  F01E         	movff	eval_poly@x+1,___ftmul@f1+1
  5199  0021BE  C03A  F01F         	movff	eval_poly@x+2,___ftmul@f1+2
  5200  0021C2  EC59  F00F         	call	___ftmul	;wreg free
  5201  0021C6  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  5202  0021CA  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  5203  0021CE  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  5204  0021D2  0E00               	movlw	0
  5205  0021D4  6E14               	movwf	___wmul@multiplicand+1,c
  5206  0021D6  0E03               	movlw	3
  5207  0021D8  6E13               	movwf	___wmul@multiplicand,c
  5208  0021DA  063D               	decf	eval_poly@n,f,c
  5209  0021DC  A0D8               	btfss	status,0,c
  5210  0021DE  063E               	decf	eval_poly@n+1,f,c
  5211  0021E0  C03D  F011         	movff	eval_poly@n,___wmul@multiplier
  5212  0021E4  C03E  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  5213  0021E8  EC9A  F015         	call	___wmul	;wreg free
  5214  0021EC  C03B  F03F         	movff	eval_poly@d,??_eval_poly
  5215  0021F0  C03C  F040         	movff	eval_poly@d+1,??_eval_poly+1
  5216  0021F4  5011               	movf	?___wmul,w,c
  5217  0021F6  263F               	addwf	??_eval_poly,f,c
  5218  0021F8  5012               	movf	?___wmul+1,w,c
  5219  0021FA  2240               	addwfc	??_eval_poly+1,f,c
  5220  0021FC  C03F  FFF6         	movff	??_eval_poly,tblptrl
  5221  002200  C040  FFF7         	movff	??_eval_poly+1,tblptrh
  5222  002204                     	if	0	;tblptru may be non-zero
  5223  002204                     	endif
  5224  002204                     	if	0	;tblptru may be non-zero
  5225  002204                     	endif
  5226  002204  0009               	tblrd		*+
  5227  002206  CFF5 F02F          	movff	tablat,___ftadd@f2
  5228  00220A  0009               	tblrd		*+
  5229  00220C  CFF5 F030          	movff	tablat,___ftadd@f2+1
  5230  002210  000A               	tblrd		*-
  5231  002212  CFF5 F031          	movff	tablat,___ftadd@f2+2
  5232  002216  EC8B  F008         	call	___ftadd	;wreg free
  5233  00221A  C02C  F041         	movff	?___ftadd,eval_poly@res
  5234  00221E  C02D  F042         	movff	?___ftadd+1,eval_poly@res+1
  5235  002222  C02E  F043         	movff	?___ftadd+2,eval_poly@res+2
  5236  002226                     l3092:
  5237  002226  503D               	movf	eval_poly@n,w,c
  5238  002228  103E               	iorwf	eval_poly@n+1,w,c
  5239  00222A  A4D8               	btfss	status,2,c
  5240  00222C  D7BE               	goto	l3090
  5241  00222E  C041  F038         	movff	eval_poly@res,?_eval_poly
  5242  002232  C042  F039         	movff	eval_poly@res+1,?_eval_poly+1
  5243  002236  C043  F03A         	movff	eval_poly@res+2,?_eval_poly+2
  5244  00223A  0012               	return		;funcret
  5245  00223C                     __end_of_eval_poly:
  5246                           	opt stack 0
  5247                           tblptru	equ	0xFF8
  5248                           tblptrh	equ	0xFF7
  5249                           tblptrl	equ	0xFF6
  5250                           tablat	equ	0xFF5
  5251                           prodh	equ	0xFF4
  5252                           prodl	equ	0xFF3
  5253                           intcon	equ	0xFF2
  5254                           intcon2	equ	0xFF1
  5255                           intcon3	equ	0xFF0
  5256                           postinc0	equ	0xFEE
  5257                           wreg	equ	0xFE8
  5258                           postdec1	equ	0xFE5
  5259                           fsr1l	equ	0xFE1
  5260                           indf2	equ	0xFDF
  5261                           postinc2	equ	0xFDE
  5262                           postdec2	equ	0xFDD
  5263                           fsr2h	equ	0xFDA
  5264                           fsr2l	equ	0xFD9
  5265                           status	equ	0xFD8
  5266                           
  5267 ;; *************** function ___ftmul *****************
  5268 ;; Defined at:
  5269 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;  f1              3   28[COMRAM] float 
  5272 ;;  f2              3   31[COMRAM] float 
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  5275 ;;  sign            1   42[COMRAM] unsigned char 
  5276 ;;  cntr            1   41[COMRAM] unsigned char 
  5277 ;;  exp             1   37[COMRAM] unsigned char 
  5278 ;; Return value:  Size  Location     Type
  5279 ;;                  3   28[COMRAM] float 
  5280 ;; Registers used:
  5281 ;;		wreg, status,2, status,0, cstack
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5287 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5288 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5289 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;Total ram usage:       15 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; Hardware stack levels required when called:    2
  5294 ;; This function calls:
  5295 ;;		___ftpack
  5296 ;; This function is called by:
  5297 ;;		_dec_to_hex
  5298 ;;		_init_operation
  5299 ;;		_pow
  5300 ;;		_exp
  5301 ;;		_log
  5302 ;;		_eval_poly
  5303 ;;		_hex_to_dec
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           	psect	text17
  5308  001EB2                     __ptext17:
  5309                           	opt stack 0
  5310  001EB2                     ___ftmul:
  5311                           	opt stack 22
  5312                           
  5313                           ;incstack = 0
  5314  001EB2  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  5315  001EB6  6A24               	clrf	(??___ftmul+1)& (0+255),c
  5316  001EB8  6A25               	clrf	(??___ftmul+2)& (0+255),c
  5317  001EBA  341E               	rlcf	___ftmul@f1+1,w,c
  5318  001EBC  3623               	rlcf	??___ftmul& (0+255),f,c
  5319  001EBE  E301               	bnc	u2221
  5320  001EC0  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  5321  001EC2                     u2221:
  5322  001EC2  5023               	movf	??___ftmul,w,c
  5323  001EC4  6E26               	movwf	___ftmul@exp,c
  5324  001EC6  5026               	movf	___ftmul@exp,w,c
  5325  001EC8  A4D8               	btfss	status,2,c
  5326  001ECA  D007               	goto	l2868
  5327  001ECC  0E00               	movlw	0
  5328  001ECE  6E1D               	movwf	?___ftmul,c
  5329  001ED0  0E00               	movlw	0
  5330  001ED2  6E1E               	movwf	?___ftmul+1,c
  5331  001ED4  0E00               	movlw	0
  5332  001ED6  6E1F               	movwf	?___ftmul+2,c
  5333  001ED8  0012               	return	
  5334  001EDA                     l2868:
  5335  001EDA  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  5336  001EDE  6A24               	clrf	(??___ftmul+1)& (0+255),c
  5337  001EE0  6A25               	clrf	(??___ftmul+2)& (0+255),c
  5338  001EE2  3421               	rlcf	___ftmul@f2+1,w,c
  5339  001EE4  3623               	rlcf	??___ftmul& (0+255),f,c
  5340  001EE6  E301               	bnc	u2241
  5341  001EE8  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  5342  001EEA                     u2241:
  5343  001EEA  5023               	movf	??___ftmul,w,c
  5344  001EEC  6E2B               	movwf	___ftmul@sign,c
  5345  001EEE  502B               	movf	___ftmul@sign,w,c
  5346  001EF0  A4D8               	btfss	status,2,c
  5347  001EF2  D007               	goto	l2874
  5348  001EF4  0E00               	movlw	0
  5349  001EF6  6E1D               	movwf	?___ftmul,c
  5350  001EF8  0E00               	movlw	0
  5351  001EFA  6E1E               	movwf	?___ftmul+1,c
  5352  001EFC  0E00               	movlw	0
  5353  001EFE  6E1F               	movwf	?___ftmul+2,c
  5354  001F00  0012               	return	
  5355  001F02                     l2874:
  5356  001F02  502B               	movf	___ftmul@sign,w,c
  5357  001F04  0F7B               	addlw	123
  5358  001F06  2626               	addwf	___ftmul@exp,f,c
  5359  001F08  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  5360  001F0C  5022               	movf	___ftmul@f2+2,w,c
  5361  001F0E  1A2B               	xorwf	___ftmul@sign,f,c
  5362  001F10  0E80               	movlw	128
  5363  001F12  162B               	andwf	___ftmul@sign,f,c
  5364  001F14  8E1E               	bsf	___ftmul@f1+1,7,c
  5365  001F16  8E21               	bsf	___ftmul@f2+1,7,c
  5366  001F18  0EFF               	movlw	255
  5367  001F1A  1620               	andwf	___ftmul@f2,f,c
  5368  001F1C  0EFF               	movlw	255
  5369  001F1E  1621               	andwf	___ftmul@f2+1,f,c
  5370  001F20  0E00               	movlw	0
  5371  001F22  1622               	andwf	___ftmul@f2+2,f,c
  5372  001F24  0E00               	movlw	0
  5373  001F26  6E27               	movwf	___ftmul@f3_as_product,c
  5374  001F28  0E00               	movlw	0
  5375  001F2A  6E28               	movwf	___ftmul@f3_as_product+1,c
  5376  001F2C  0E00               	movlw	0
  5377  001F2E  6E29               	movwf	___ftmul@f3_as_product+2,c
  5378  001F30  0E07               	movlw	7
  5379  001F32  6E2A               	movwf	___ftmul@cntr,c
  5380  001F34                     l2888:
  5381  001F34  A01D               	btfss	___ftmul@f1,0,c
  5382  001F36  D006               	goto	l2892
  5383  001F38  5020               	movf	___ftmul@f2,w,c
  5384  001F3A  2627               	addwf	___ftmul@f3_as_product,f,c
  5385  001F3C  5021               	movf	___ftmul@f2+1,w,c
  5386  001F3E  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  5387  001F40  5022               	movf	___ftmul@f2+2,w,c
  5388  001F42  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  5389  001F44                     l2892:
  5390  001F44  90D8               	bcf	status,0,c
  5391  001F46  321F               	rrcf	___ftmul@f1+2,f,c
  5392  001F48  321E               	rrcf	___ftmul@f1+1,f,c
  5393  001F4A  321D               	rrcf	___ftmul@f1,f,c
  5394  001F4C  90D8               	bcf	status,0,c
  5395  001F4E  3620               	rlcf	___ftmul@f2,f,c
  5396  001F50  3621               	rlcf	___ftmul@f2+1,f,c
  5397  001F52  3622               	rlcf	___ftmul@f2+2,f,c
  5398  001F54  2E2A               	decfsz	___ftmul@cntr,f,c
  5399  001F56  D7EE               	goto	l2888
  5400  001F58  0E09               	movlw	9
  5401  001F5A  6E2A               	movwf	___ftmul@cntr,c
  5402  001F5C                     l2898:
  5403  001F5C  A01D               	btfss	___ftmul@f1,0,c
  5404  001F5E  D006               	goto	l2902
  5405  001F60  5020               	movf	___ftmul@f2,w,c
  5406  001F62  2627               	addwf	___ftmul@f3_as_product,f,c
  5407  001F64  5021               	movf	___ftmul@f2+1,w,c
  5408  001F66  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  5409  001F68  5022               	movf	___ftmul@f2+2,w,c
  5410  001F6A  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  5411  001F6C                     l2902:
  5412  001F6C  90D8               	bcf	status,0,c
  5413  001F6E  321F               	rrcf	___ftmul@f1+2,f,c
  5414  001F70  321E               	rrcf	___ftmul@f1+1,f,c
  5415  001F72  321D               	rrcf	___ftmul@f1,f,c
  5416  001F74  90D8               	bcf	status,0,c
  5417  001F76  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  5418  001F78  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  5419  001F7A  3227               	rrcf	___ftmul@f3_as_product,f,c
  5420  001F7C  2E2A               	decfsz	___ftmul@cntr,f,c
  5421  001F7E  D7EE               	goto	l2898
  5422  001F80  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  5423  001F84  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5424  001F88  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5425  001F8C  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  5426  001F90  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  5427  001F94  EC7F  F011         	call	___ftpack	;wreg free
  5428  001F98  C011  F01D         	movff	?___ftpack,?___ftmul
  5429  001F9C  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  5430  001FA0  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  5431  001FA4  0012               	return	
  5432  001FA6                     __end_of___ftmul:
  5433                           	opt stack 0
  5434                           tblptru	equ	0xFF8
  5435                           tblptrh	equ	0xFF7
  5436                           tblptrl	equ	0xFF6
  5437                           tablat	equ	0xFF5
  5438                           prodh	equ	0xFF4
  5439                           prodl	equ	0xFF3
  5440                           intcon	equ	0xFF2
  5441                           intcon2	equ	0xFF1
  5442                           intcon3	equ	0xFF0
  5443                           postinc0	equ	0xFEE
  5444                           wreg	equ	0xFE8
  5445                           postdec1	equ	0xFE5
  5446                           fsr1l	equ	0xFE1
  5447                           indf2	equ	0xFDF
  5448                           postinc2	equ	0xFDE
  5449                           postdec2	equ	0xFDD
  5450                           fsr2h	equ	0xFDA
  5451                           fsr2l	equ	0xFD9
  5452                           status	equ	0xFD8
  5453                           
  5454 ;; *************** function ___ftsub *****************
  5455 ;; Defined at:
  5456 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;  f1              3   55[COMRAM] float 
  5459 ;;  f2              3   58[COMRAM] float 
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;		None
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  3   55[COMRAM] float 
  5464 ;; Registers used:
  5465 ;;		wreg, status,2, status,0, cstack
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5471 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5474 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;Total ram usage:        6 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:    3
  5478 ;; This function calls:
  5479 ;;		___ftadd
  5480 ;; This function is called by:
  5481 ;;		_exp
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           	psect	text18
  5486  002A5C                     __ptext18:
  5487                           	opt stack 0
  5488  002A5C                     ___ftsub:
  5489                           	opt stack 22
  5490                           
  5491                           ;incstack = 0
  5492  002A5C  503B               	movf	___ftsub@f2,w,c
  5493  002A5E  103C               	iorwf	___ftsub@f2+1,w,c
  5494  002A60  103D               	iorwf	___ftsub@f2+2,w,c
  5495  002A62  B4D8               	btfsc	status,2,c
  5496  002A64  D006               	goto	l3044
  5497  002A66  0E00               	movlw	0
  5498  002A68  1A3B               	xorwf	___ftsub@f2,f,c
  5499  002A6A  0E00               	movlw	0
  5500  002A6C  1A3C               	xorwf	___ftsub@f2+1,f,c
  5501  002A6E  0E80               	movlw	128
  5502  002A70  1A3D               	xorwf	___ftsub@f2+2,f,c
  5503  002A72                     l3044:
  5504  002A72  C038  F02C         	movff	___ftsub@f1,___ftadd@f1
  5505  002A76  C039  F02D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5506  002A7A  C03A  F02E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5507  002A7E  C03B  F02F         	movff	___ftsub@f2,___ftadd@f2
  5508  002A82  C03C  F030         	movff	___ftsub@f2+1,___ftadd@f2+1
  5509  002A86  C03D  F031         	movff	___ftsub@f2+2,___ftadd@f2+2
  5510  002A8A  EC8B  F008         	call	___ftadd	;wreg free
  5511  002A8E  C02C  F038         	movff	?___ftadd,?___ftsub
  5512  002A92  C02D  F039         	movff	?___ftadd+1,?___ftsub+1
  5513  002A96  C02E  F03A         	movff	?___ftadd+2,?___ftsub+2
  5514  002A9A  0012               	return	
  5515  002A9C                     __end_of___ftsub:
  5516                           	opt stack 0
  5517                           tblptru	equ	0xFF8
  5518                           tblptrh	equ	0xFF7
  5519                           tblptrl	equ	0xFF6
  5520                           tablat	equ	0xFF5
  5521                           prodh	equ	0xFF4
  5522                           prodl	equ	0xFF3
  5523                           intcon	equ	0xFF2
  5524                           intcon2	equ	0xFF1
  5525                           intcon3	equ	0xFF0
  5526                           postinc0	equ	0xFEE
  5527                           wreg	equ	0xFE8
  5528                           postdec1	equ	0xFE5
  5529                           fsr1l	equ	0xFE1
  5530                           indf2	equ	0xFDF
  5531                           postinc2	equ	0xFDE
  5532                           postdec2	equ	0xFDD
  5533                           fsr2h	equ	0xFDA
  5534                           fsr2l	equ	0xFD9
  5535                           status	equ	0xFD8
  5536                           
  5537 ;; *************** function ___ftadd *****************
  5538 ;; Defined at:
  5539 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;  f1              3   43[COMRAM] float 
  5542 ;;  f2              3   46[COMRAM] float 
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;  exp1            1   54[COMRAM] unsigned char 
  5545 ;;  exp2            1   53[COMRAM] unsigned char 
  5546 ;;  sign            1   52[COMRAM] unsigned char 
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  3   43[COMRAM] float 
  5549 ;; Registers used:
  5550 ;;		wreg, status,2, status,0, cstack
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5556 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;Total ram usage:       12 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; Hardware stack levels required when called:    2
  5563 ;; This function calls:
  5564 ;;		___ftpack
  5565 ;; This function is called by:
  5566 ;;		_dec_to_hex
  5567 ;;		_init_operation
  5568 ;;		___ftsub
  5569 ;;		_floor
  5570 ;;		_log
  5571 ;;		_eval_poly
  5572 ;;		_hex_to_dec
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           	psect	text19
  5577  001116                     __ptext19:
  5578                           	opt stack 0
  5579  001116                     ___ftadd:
  5580                           	opt stack 22
  5581                           
  5582                           ;incstack = 0
  5583  001116  C02E  F032         	movff	___ftadd@f1+2,??___ftadd
  5584  00111A  6A33               	clrf	(??___ftadd+1)& (0+255),c
  5585  00111C  6A34               	clrf	(??___ftadd+2)& (0+255),c
  5586  00111E  342D               	rlcf	___ftadd@f1+1,w,c
  5587  001120  3632               	rlcf	??___ftadd& (0+255),f,c
  5588  001122  E301               	bnc	u2011
  5589  001124  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  5590  001126                     u2011:
  5591  001126  5032               	movf	??___ftadd,w,c
  5592  001128  6E37               	movwf	___ftadd@exp1,c
  5593  00112A  C031  F032         	movff	___ftadd@f2+2,??___ftadd
  5594  00112E  6A33               	clrf	(??___ftadd+1)& (0+255),c
  5595  001130  6A34               	clrf	(??___ftadd+2)& (0+255),c
  5596  001132  3430               	rlcf	___ftadd@f2+1,w,c
  5597  001134  3632               	rlcf	??___ftadd& (0+255),f,c
  5598  001136  E301               	bnc	u2021
  5599  001138  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  5600  00113A                     u2021:
  5601  00113A  5032               	movf	??___ftadd,w,c
  5602  00113C  6E36               	movwf	___ftadd@exp2,c
  5603  00113E  5037               	movf	___ftadd@exp1,w,c
  5604  001140  B4D8               	btfsc	status,2,c
  5605  001142  D00B               	goto	l698
  5606  001144  5036               	movf	___ftadd@exp2,w,c
  5607  001146  5C37               	subwf	___ftadd@exp1,w,c
  5608  001148  B0D8               	btfsc	status,0,c
  5609  00114A  D00E               	goto	l2800
  5610  00114C  5037               	movf	___ftadd@exp1,w,c
  5611  00114E  0800               	sublw	0
  5612  001150  2436               	addwf	___ftadd@exp2,w,c
  5613  001152  6E32               	movwf	??___ftadd& (0+255),c
  5614  001154  0E18               	movlw	24
  5615  001156  6432               	cpfsgt	??___ftadd,c
  5616  001158  D007               	goto	l2800
  5617  00115A                     l698:
  5618  00115A  C02F  F02C         	movff	___ftadd@f2,?___ftadd
  5619  00115E  C030  F02D         	movff	___ftadd@f2+1,?___ftadd+1
  5620  001162  C031  F02E         	movff	___ftadd@f2+2,?___ftadd+2
  5621  001166  0012               	return	
  5622  001168                     l2800:
  5623  001168  5036               	movf	___ftadd@exp2,w,c
  5624  00116A  B4D8               	btfsc	status,2,c
  5625  00116C  D00B               	goto	l702
  5626  00116E  5037               	movf	___ftadd@exp1,w,c
  5627  001170  5C36               	subwf	___ftadd@exp2,w,c
  5628  001172  B0D8               	btfsc	status,0,c
  5629  001174  D00E               	goto	l2806
  5630  001176  5036               	movf	___ftadd@exp2,w,c
  5631  001178  0800               	sublw	0
  5632  00117A  2437               	addwf	___ftadd@exp1,w,c
  5633  00117C  6E32               	movwf	??___ftadd& (0+255),c
  5634  00117E  0E18               	movlw	24
  5635  001180  6432               	cpfsgt	??___ftadd,c
  5636  001182  D007               	goto	l2806
  5637  001184                     l702:
  5638  001184  C02C  F02C         	movff	___ftadd@f1,?___ftadd
  5639  001188  C02D  F02D         	movff	___ftadd@f1+1,?___ftadd+1
  5640  00118C  C02E  F02E         	movff	___ftadd@f1+2,?___ftadd+2
  5641  001190  0012               	return	
  5642  001192                     l2806:
  5643  001192  0E06               	movlw	6
  5644  001194  6E35               	movwf	___ftadd@sign,c
  5645  001196  BE2E               	btfsc	___ftadd@f1+2,7,c
  5646  001198  8E35               	bsf	___ftadd@sign,7,c
  5647  00119A  BE31               	btfsc	___ftadd@f2+2,7,c
  5648  00119C  8C35               	bsf	___ftadd@sign,6,c
  5649  00119E  8E2D               	bsf	___ftadd@f1+1,7,c
  5650  0011A0  0EFF               	movlw	255
  5651  0011A2  162C               	andwf	___ftadd@f1,f,c
  5652  0011A4  0EFF               	movlw	255
  5653  0011A6  162D               	andwf	___ftadd@f1+1,f,c
  5654  0011A8  0E00               	movlw	0
  5655  0011AA  162E               	andwf	___ftadd@f1+2,f,c
  5656  0011AC  8E30               	bsf	___ftadd@f2+1,7,c
  5657  0011AE  0EFF               	movlw	255
  5658  0011B0  162F               	andwf	___ftadd@f2,f,c
  5659  0011B2  0EFF               	movlw	255
  5660  0011B4  1630               	andwf	___ftadd@f2+1,f,c
  5661  0011B6  0E00               	movlw	0
  5662  0011B8  1631               	andwf	___ftadd@f2+2,f,c
  5663  0011BA  5036               	movf	___ftadd@exp2,w,c
  5664  0011BC  5C37               	subwf	___ftadd@exp1,w,c
  5665  0011BE  B0D8               	btfsc	status,0,c
  5666  0011C0  D01B               	goto	l2832
  5667  0011C2                     l2822:
  5668  0011C2  90D8               	bcf	status,0,c
  5669  0011C4  362F               	rlcf	___ftadd@f2,f,c
  5670  0011C6  3630               	rlcf	___ftadd@f2+1,f,c
  5671  0011C8  3631               	rlcf	___ftadd@f2+2,f,c
  5672  0011CA  0636               	decf	___ftadd@exp2,f,c
  5673  0011CC  5037               	movf	___ftadd@exp1,w,c
  5674  0011CE  1836               	xorwf	___ftadd@exp2,w,c
  5675  0011D0  B4D8               	btfsc	status,2,c
  5676  0011D2  D00D               	goto	l2830
  5677  0011D4  0635               	decf	___ftadd@sign,f,c
  5678  0011D6  C035  F032         	movff	___ftadd@sign,??___ftadd
  5679  0011DA  0E07               	movlw	7
  5680  0011DC  1632               	andwf	??___ftadd,f,c
  5681  0011DE  B4D8               	btfsc	status,2,c
  5682  0011E0  D006               	goto	l2830
  5683  0011E2  D7EF               	goto	l2822
  5684  0011E4                     l2828:
  5685  0011E4  90D8               	bcf	status,0,c
  5686  0011E6  322E               	rrcf	___ftadd@f1+2,f,c
  5687  0011E8  322D               	rrcf	___ftadd@f1+1,f,c
  5688  0011EA  322C               	rrcf	___ftadd@f1,f,c
  5689  0011EC  2A37               	incf	___ftadd@exp1,f,c
  5690  0011EE                     l2830:
  5691  0011EE  5036               	movf	___ftadd@exp2,w,c
  5692  0011F0  1837               	xorwf	___ftadd@exp1,w,c
  5693  0011F2  B4D8               	btfsc	status,2,c
  5694  0011F4  D01F               	goto	l713
  5695  0011F6  D7F6               	goto	l2828
  5696  0011F8                     l2832:
  5697  0011F8  5037               	movf	___ftadd@exp1,w,c
  5698  0011FA  5C36               	subwf	___ftadd@exp2,w,c
  5699  0011FC  B0D8               	btfsc	status,0,c
  5700  0011FE  D01A               	goto	l713
  5701  001200                     l2834:
  5702  001200  90D8               	bcf	status,0,c
  5703  001202  362C               	rlcf	___ftadd@f1,f,c
  5704  001204  362D               	rlcf	___ftadd@f1+1,f,c
  5705  001206  362E               	rlcf	___ftadd@f1+2,f,c
  5706  001208  0637               	decf	___ftadd@exp1,f,c
  5707  00120A  5037               	movf	___ftadd@exp1,w,c
  5708  00120C  1836               	xorwf	___ftadd@exp2,w,c
  5709  00120E  B4D8               	btfsc	status,2,c
  5710  001210  D00D               	goto	l2842
  5711  001212  0635               	decf	___ftadd@sign,f,c
  5712  001214  C035  F032         	movff	___ftadd@sign,??___ftadd
  5713  001218  0E07               	movlw	7
  5714  00121A  1632               	andwf	??___ftadd,f,c
  5715  00121C  B4D8               	btfsc	status,2,c
  5716  00121E  D006               	goto	l2842
  5717  001220  D7EF               	goto	l2834
  5718  001222                     l2840:
  5719  001222  90D8               	bcf	status,0,c
  5720  001224  3231               	rrcf	___ftadd@f2+2,f,c
  5721  001226  3230               	rrcf	___ftadd@f2+1,f,c
  5722  001228  322F               	rrcf	___ftadd@f2,f,c
  5723  00122A  2A36               	incf	___ftadd@exp2,f,c
  5724  00122C                     l2842:
  5725  00122C  5036               	movf	___ftadd@exp2,w,c
  5726  00122E  1837               	xorwf	___ftadd@exp1,w,c
  5727  001230  A4D8               	btfss	status,2,c
  5728  001232  D7F7               	goto	l2840
  5729  001234                     l713:
  5730  001234  AE35               	btfss	___ftadd@sign,7,c
  5731  001236  D00C               	goto	l722
  5732  001238  0EFF               	movlw	255
  5733  00123A  1A2C               	xorwf	___ftadd@f1,f,c
  5734  00123C  0EFF               	movlw	255
  5735  00123E  1A2D               	xorwf	___ftadd@f1+1,f,c
  5736  001240  0EFF               	movlw	255
  5737  001242  1A2E               	xorwf	___ftadd@f1+2,f,c
  5738  001244  0E01               	movlw	1
  5739  001246  262C               	addwf	___ftadd@f1,f,c
  5740  001248  0E00               	movlw	0
  5741  00124A  222D               	addwfc	___ftadd@f1+1,f,c
  5742  00124C  0E00               	movlw	0
  5743  00124E  222E               	addwfc	___ftadd@f1+2,f,c
  5744  001250                     l722:
  5745  001250  AC35               	btfss	___ftadd@sign,6,c
  5746  001252  D00C               	goto	l2848
  5747  001254  0EFF               	movlw	255
  5748  001256  1A2F               	xorwf	___ftadd@f2,f,c
  5749  001258  0EFF               	movlw	255
  5750  00125A  1A30               	xorwf	___ftadd@f2+1,f,c
  5751  00125C  0EFF               	movlw	255
  5752  00125E  1A31               	xorwf	___ftadd@f2+2,f,c
  5753  001260  0E01               	movlw	1
  5754  001262  262F               	addwf	___ftadd@f2,f,c
  5755  001264  0E00               	movlw	0
  5756  001266  2230               	addwfc	___ftadd@f2+1,f,c
  5757  001268  0E00               	movlw	0
  5758  00126A  2231               	addwfc	___ftadd@f2+2,f,c
  5759  00126C                     l2848:
  5760  00126C  0E00               	movlw	0
  5761  00126E  6E35               	movwf	___ftadd@sign,c
  5762  001270  502C               	movf	___ftadd@f1,w,c
  5763  001272  262F               	addwf	___ftadd@f2,f,c
  5764  001274  502D               	movf	___ftadd@f1+1,w,c
  5765  001276  2230               	addwfc	___ftadd@f2+1,f,c
  5766  001278  502E               	movf	___ftadd@f1+2,w,c
  5767  00127A  2231               	addwfc	___ftadd@f2+2,f,c
  5768  00127C  AE31               	btfss	___ftadd@f2+2,7,c
  5769  00127E  D00E               	goto	l2858
  5770  001280  0EFF               	movlw	255
  5771  001282  1A2F               	xorwf	___ftadd@f2,f,c
  5772  001284  0EFF               	movlw	255
  5773  001286  1A30               	xorwf	___ftadd@f2+1,f,c
  5774  001288  0EFF               	movlw	255
  5775  00128A  1A31               	xorwf	___ftadd@f2+2,f,c
  5776  00128C  0E01               	movlw	1
  5777  00128E  262F               	addwf	___ftadd@f2,f,c
  5778  001290  0E00               	movlw	0
  5779  001292  2230               	addwfc	___ftadd@f2+1,f,c
  5780  001294  0E00               	movlw	0
  5781  001296  2231               	addwfc	___ftadd@f2+2,f,c
  5782  001298  0E01               	movlw	1
  5783  00129A  6E35               	movwf	___ftadd@sign,c
  5784  00129C                     l2858:
  5785  00129C  C02F  F011         	movff	___ftadd@f2,___ftpack@arg
  5786  0012A0  C030  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
  5787  0012A4  C031  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
  5788  0012A8  C037  F014         	movff	___ftadd@exp1,___ftpack@exp
  5789  0012AC  C035  F015         	movff	___ftadd@sign,___ftpack@sign
  5790  0012B0  EC7F  F011         	call	___ftpack	;wreg free
  5791  0012B4  C011  F02C         	movff	?___ftpack,?___ftadd
  5792  0012B8  C012  F02D         	movff	?___ftpack+1,?___ftadd+1
  5793  0012BC  C013  F02E         	movff	?___ftpack+2,?___ftadd+2
  5794  0012C0  0012               	return	
  5795  0012C2                     __end_of___ftadd:
  5796                           	opt stack 0
  5797                           tblptru	equ	0xFF8
  5798                           tblptrh	equ	0xFF7
  5799                           tblptrl	equ	0xFF6
  5800                           tablat	equ	0xFF5
  5801                           prodh	equ	0xFF4
  5802                           prodl	equ	0xFF3
  5803                           intcon	equ	0xFF2
  5804                           intcon2	equ	0xFF1
  5805                           intcon3	equ	0xFF0
  5806                           postinc0	equ	0xFEE
  5807                           wreg	equ	0xFE8
  5808                           postdec1	equ	0xFE5
  5809                           fsr1l	equ	0xFE1
  5810                           indf2	equ	0xFDF
  5811                           postinc2	equ	0xFDE
  5812                           postdec2	equ	0xFDD
  5813                           fsr2h	equ	0xFDA
  5814                           fsr2l	equ	0xFD9
  5815                           status	equ	0xFD8
  5816                           
  5817 ;; *************** function ___ftneg *****************
  5818 ;; Defined at:
  5819 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;  f1              3   16[COMRAM] float 
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;		None
  5824 ;; Return value:  Size  Location     Type
  5825 ;;                  3   16[COMRAM] float 
  5826 ;; Registers used:
  5827 ;;		wreg, status,2, status,0
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5833 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;Total ram usage:        3 bytes
  5838 ;; Hardware stack levels used:    1
  5839 ;; Hardware stack levels required when called:    1
  5840 ;; This function calls:
  5841 ;;		Nothing
  5842 ;; This function is called by:
  5843 ;;		_pow
  5844 ;;		_exp
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text20
  5849  002B5A                     __ptext20:
  5850                           	opt stack 0
  5851  002B5A                     ___ftneg:
  5852                           	opt stack 24
  5853                           
  5854                           ;incstack = 0
  5855  002B5A  5011               	movf	___ftneg@f1,w,c
  5856  002B5C  1012               	iorwf	___ftneg@f1+1,w,c
  5857  002B5E  1013               	iorwf	___ftneg@f1+2,w,c
  5858  002B60  B4D8               	btfsc	status,2,c
  5859  002B62  D006               	goto	l755
  5860  002B64  0E00               	movlw	0
  5861  002B66  1A11               	xorwf	___ftneg@f1,f,c
  5862  002B68  0E00               	movlw	0
  5863  002B6A  1A12               	xorwf	___ftneg@f1+1,f,c
  5864  002B6C  0E80               	movlw	128
  5865  002B6E  1A13               	xorwf	___ftneg@f1+2,f,c
  5866  002B70                     l755:
  5867  002B70  C011  F011         	movff	___ftneg@f1,?___ftneg
  5868  002B74  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
  5869  002B78  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
  5870  002B7C  0012               	return		;funcret
  5871  002B7E                     __end_of___ftneg:
  5872                           	opt stack 0
  5873                           tblptru	equ	0xFF8
  5874                           tblptrh	equ	0xFF7
  5875                           tblptrl	equ	0xFF6
  5876                           tablat	equ	0xFF5
  5877                           prodh	equ	0xFF4
  5878                           prodl	equ	0xFF3
  5879                           intcon	equ	0xFF2
  5880                           intcon2	equ	0xFF1
  5881                           intcon3	equ	0xFF0
  5882                           postinc0	equ	0xFEE
  5883                           wreg	equ	0xFE8
  5884                           postdec1	equ	0xFE5
  5885                           fsr1l	equ	0xFE1
  5886                           indf2	equ	0xFDF
  5887                           postinc2	equ	0xFDE
  5888                           postdec2	equ	0xFDD
  5889                           fsr2h	equ	0xFDA
  5890                           fsr2l	equ	0xFD9
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function ___ftdiv *****************
  5894 ;; Defined at:
  5895 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  f1              3   24[COMRAM] float 
  5898 ;;  f2              3   27[COMRAM] float 
  5899 ;; Auto vars:     Size  Location     Type
  5900 ;;  f3              3   34[COMRAM] float 
  5901 ;;  sign            1   38[COMRAM] unsigned char 
  5902 ;;  exp             1   37[COMRAM] unsigned char 
  5903 ;;  cntr            1   33[COMRAM] unsigned char 
  5904 ;; Return value:  Size  Location     Type
  5905 ;;                  3   24[COMRAM] float 
  5906 ;; Registers used:
  5907 ;;		wreg, status,2, status,0, cstack
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5913 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5914 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;Total ram usage:       15 bytes
  5918 ;; Hardware stack levels used:    1
  5919 ;; Hardware stack levels required when called:    2
  5920 ;; This function calls:
  5921 ;;		___ftpack
  5922 ;; This function is called by:
  5923 ;;		_exp
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           	psect	text21
  5928  001FA6                     __ptext21:
  5929                           	opt stack 0
  5930  001FA6                     ___ftdiv:
  5931                           	opt stack 23
  5932                           
  5933                           ;incstack = 0
  5934  001FA6  C01B  F01F         	movff	___ftdiv@f1+2,??___ftdiv
  5935  001FAA  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  5936  001FAC  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  5937  001FAE  341A               	rlcf	___ftdiv@f1+1,w,c
  5938  001FB0  361F               	rlcf	??___ftdiv& (0+255),f,c
  5939  001FB2  E301               	bnc	u2411
  5940  001FB4  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  5941  001FB6                     u2411:
  5942  001FB6  501F               	movf	??___ftdiv,w,c
  5943  001FB8  6E26               	movwf	___ftdiv@exp,c
  5944  001FBA  5026               	movf	___ftdiv@exp,w,c
  5945  001FBC  A4D8               	btfss	status,2,c
  5946  001FBE  D007               	goto	l3000
  5947  001FC0  0E00               	movlw	0
  5948  001FC2  6E19               	movwf	?___ftdiv,c
  5949  001FC4  0E00               	movlw	0
  5950  001FC6  6E1A               	movwf	?___ftdiv+1,c
  5951  001FC8  0E00               	movlw	0
  5952  001FCA  6E1B               	movwf	?___ftdiv+2,c
  5953  001FCC  0012               	return	
  5954  001FCE                     l3000:
  5955  001FCE  C01E  F01F         	movff	___ftdiv@f2+2,??___ftdiv
  5956  001FD2  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  5957  001FD4  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  5958  001FD6  341D               	rlcf	___ftdiv@f2+1,w,c
  5959  001FD8  361F               	rlcf	??___ftdiv& (0+255),f,c
  5960  001FDA  E301               	bnc	u2431
  5961  001FDC  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  5962  001FDE                     u2431:
  5963  001FDE  501F               	movf	??___ftdiv,w,c
  5964  001FE0  6E27               	movwf	___ftdiv@sign,c
  5965  001FE2  5027               	movf	___ftdiv@sign,w,c
  5966  001FE4  A4D8               	btfss	status,2,c
  5967  001FE6  D007               	goto	l3006
  5968  001FE8  0E00               	movlw	0
  5969  001FEA  6E19               	movwf	?___ftdiv,c
  5970  001FEC  0E00               	movlw	0
  5971  001FEE  6E1A               	movwf	?___ftdiv+1,c
  5972  001FF0  0E00               	movlw	0
  5973  001FF2  6E1B               	movwf	?___ftdiv+2,c
  5974  001FF4  0012               	return	
  5975  001FF6                     l3006:
  5976  001FF6  0E00               	movlw	0
  5977  001FF8  6E23               	movwf	___ftdiv@f3,c
  5978  001FFA  0E00               	movlw	0
  5979  001FFC  6E24               	movwf	___ftdiv@f3+1,c
  5980  001FFE  0E00               	movlw	0
  5981  002000  6E25               	movwf	___ftdiv@f3+2,c
  5982  002002  5027               	movf	___ftdiv@sign,w,c
  5983  002004  0F89               	addlw	137
  5984  002006  5E26               	subwf	___ftdiv@exp,f,c
  5985  002008  C01B  F027         	movff	___ftdiv@f1+2,___ftdiv@sign
  5986  00200C  501E               	movf	___ftdiv@f2+2,w,c
  5987  00200E  1A27               	xorwf	___ftdiv@sign,f,c
  5988  002010  0E80               	movlw	128
  5989  002012  1627               	andwf	___ftdiv@sign,f,c
  5990  002014  8E1A               	bsf	___ftdiv@f1+1,7,c
  5991  002016  0EFF               	movlw	255
  5992  002018  1619               	andwf	___ftdiv@f1,f,c
  5993  00201A  0EFF               	movlw	255
  5994  00201C  161A               	andwf	___ftdiv@f1+1,f,c
  5995  00201E  0E00               	movlw	0
  5996  002020  161B               	andwf	___ftdiv@f1+2,f,c
  5997  002022  8E1D               	bsf	___ftdiv@f2+1,7,c
  5998  002024  0EFF               	movlw	255
  5999  002026  161C               	andwf	___ftdiv@f2,f,c
  6000  002028  0EFF               	movlw	255
  6001  00202A  161D               	andwf	___ftdiv@f2+1,f,c
  6002  00202C  0E00               	movlw	0
  6003  00202E  161E               	andwf	___ftdiv@f2+2,f,c
  6004  002030  0E18               	movlw	24
  6005  002032  6E22               	movwf	___ftdiv@cntr,c
  6006  002034                     l3026:
  6007  002034  90D8               	bcf	status,0,c
  6008  002036  3623               	rlcf	___ftdiv@f3,f,c
  6009  002038  3624               	rlcf	___ftdiv@f3+1,f,c
  6010  00203A  3625               	rlcf	___ftdiv@f3+2,f,c
  6011  00203C  501C               	movf	___ftdiv@f2,w,c
  6012  00203E  5C19               	subwf	___ftdiv@f1,w,c
  6013  002040  501D               	movf	___ftdiv@f2+1,w,c
  6014  002042  581A               	subwfb	___ftdiv@f1+1,w,c
  6015  002044  501E               	movf	___ftdiv@f2+2,w,c
  6016  002046  581B               	subwfb	___ftdiv@f1+2,w,c
  6017  002048  A0D8               	btfss	status,0,c
  6018  00204A  D007               	goto	l733
  6019  00204C  501C               	movf	___ftdiv@f2,w,c
  6020  00204E  5E19               	subwf	___ftdiv@f1,f,c
  6021  002050  501D               	movf	___ftdiv@f2+1,w,c
  6022  002052  5A1A               	subwfb	___ftdiv@f1+1,f,c
  6023  002054  501E               	movf	___ftdiv@f2+2,w,c
  6024  002056  5A1B               	subwfb	___ftdiv@f1+2,f,c
  6025  002058  8023               	bsf	___ftdiv@f3,0,c
  6026  00205A                     l733:
  6027  00205A  90D8               	bcf	status,0,c
  6028  00205C  3619               	rlcf	___ftdiv@f1,f,c
  6029  00205E  361A               	rlcf	___ftdiv@f1+1,f,c
  6030  002060  361B               	rlcf	___ftdiv@f1+2,f,c
  6031  002062  2E22               	decfsz	___ftdiv@cntr,f,c
  6032  002064  D7E7               	goto	l3026
  6033  002066  C023  F011         	movff	___ftdiv@f3,___ftpack@arg
  6034  00206A  C024  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6035  00206E  C025  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6036  002072  C026  F014         	movff	___ftdiv@exp,___ftpack@exp
  6037  002076  C027  F015         	movff	___ftdiv@sign,___ftpack@sign
  6038  00207A  EC7F  F011         	call	___ftpack	;wreg free
  6039  00207E  C011  F019         	movff	?___ftpack,?___ftdiv
  6040  002082  C012  F01A         	movff	?___ftpack+1,?___ftdiv+1
  6041  002086  C013  F01B         	movff	?___ftpack+2,?___ftdiv+2
  6042  00208A  0012               	return	
  6043  00208C                     __end_of___ftdiv:
  6044                           	opt stack 0
  6045                           tblptru	equ	0xFF8
  6046                           tblptrh	equ	0xFF7
  6047                           tblptrl	equ	0xFF6
  6048                           tablat	equ	0xFF5
  6049                           prodh	equ	0xFF4
  6050                           prodl	equ	0xFF3
  6051                           intcon	equ	0xFF2
  6052                           intcon2	equ	0xFF1
  6053                           intcon3	equ	0xFF0
  6054                           postinc0	equ	0xFEE
  6055                           wreg	equ	0xFE8
  6056                           postdec1	equ	0xFE5
  6057                           fsr1l	equ	0xFE1
  6058                           indf2	equ	0xFDF
  6059                           postinc2	equ	0xFDE
  6060                           postdec2	equ	0xFDD
  6061                           fsr2h	equ	0xFDA
  6062                           fsr2l	equ	0xFD9
  6063                           status	equ	0xFD8
  6064                           
  6065 ;; *************** function ___awtoft *****************
  6066 ;; Defined at:
  6067 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;  c               2   24[COMRAM] int 
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;  sign            1   27[COMRAM] unsigned char 
  6072 ;; Return value:  Size  Location     Type
  6073 ;;                  3   24[COMRAM] float 
  6074 ;; Registers used:
  6075 ;;		wreg, status,2, status,0, cstack
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6081 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6084 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6085 ;;Total ram usage:        4 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; Hardware stack levels required when called:    2
  6088 ;; This function calls:
  6089 ;;		___ftpack
  6090 ;; This function is called by:
  6091 ;;		_dec_to_hex
  6092 ;;		_init_operation
  6093 ;;		_exp
  6094 ;;		_log
  6095 ;;		_hex_to_dec
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text22
  6100  002AD6                     __ptext22:
  6101                           	opt stack 0
  6102  002AD6                     ___awtoft:
  6103                           	opt stack 23
  6104                           
  6105                           ;incstack = 0
  6106  002AD6  0E00               	movlw	0
  6107  002AD8  6E1C               	movwf	___awtoft@sign,c
  6108  002ADA  AE1A               	btfss	___awtoft@c+1,7,c
  6109  002ADC  D006               	goto	l3056
  6110  002ADE  6C19               	negf	___awtoft@c,c
  6111  002AE0  1E1A               	comf	___awtoft@c+1,f,c
  6112  002AE2  B0D8               	btfsc	status,0,c
  6113  002AE4  2A1A               	incf	___awtoft@c+1,f,c
  6114  002AE6  0E01               	movlw	1
  6115  002AE8  6E1C               	movwf	___awtoft@sign,c
  6116  002AEA                     l3056:
  6117  002AEA  C019  F011         	movff	___awtoft@c,___ftpack@arg
  6118  002AEE  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  6119  002AF2  6A13               	clrf	___ftpack@arg+2,c
  6120  002AF4  0E8E               	movlw	142
  6121  002AF6  6E14               	movwf	___ftpack@exp,c
  6122  002AF8  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  6123  002AFC  EC7F  F011         	call	___ftpack	;wreg free
  6124  002B00  C011  F019         	movff	?___ftpack,?___awtoft
  6125  002B04  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  6126  002B08  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  6127  002B0C  0012               	return	
  6128  002B0E                     __end_of___awtoft:
  6129                           	opt stack 0
  6130                           tblptru	equ	0xFF8
  6131                           tblptrh	equ	0xFF7
  6132                           tblptrl	equ	0xFF6
  6133                           tablat	equ	0xFF5
  6134                           prodh	equ	0xFF4
  6135                           prodl	equ	0xFF3
  6136                           intcon	equ	0xFF2
  6137                           intcon2	equ	0xFF1
  6138                           intcon3	equ	0xFF0
  6139                           postinc0	equ	0xFEE
  6140                           wreg	equ	0xFE8
  6141                           postdec1	equ	0xFE5
  6142                           fsr1l	equ	0xFE1
  6143                           indf2	equ	0xFDF
  6144                           postinc2	equ	0xFDE
  6145                           postdec2	equ	0xFDD
  6146                           fsr2h	equ	0xFDA
  6147                           fsr2l	equ	0xFD9
  6148                           status	equ	0xFD8
  6149                           
  6150 ;; *************** function ___lltoft *****************
  6151 ;; Defined at:
  6152 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;  c               4   24[COMRAM] unsigned long 
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;  exp             1   32[COMRAM] unsigned char 
  6157 ;; Return value:  Size  Location     Type
  6158 ;;                  3   24[COMRAM] float 
  6159 ;; Registers used:
  6160 ;;		wreg, status,2, status,0, cstack
  6161 ;; Tracked objects:
  6162 ;;		On entry : 0/0
  6163 ;;		On exit  : 0/0
  6164 ;;		Unchanged: 0/0
  6165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6166 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6168 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6169 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6170 ;;Total ram usage:        9 bytes
  6171 ;; Hardware stack levels used:    1
  6172 ;; Hardware stack levels required when called:    2
  6173 ;; This function calls:
  6174 ;;		___ftpack
  6175 ;; This function is called by:
  6176 ;;		_pow
  6177 ;; This function uses a non-reentrant model
  6178 ;;
  6179                           
  6180                           	psect	text23
  6181  002834                     __ptext23:
  6182                           	opt stack 0
  6183  002834                     ___lltoft:
  6184                           	opt stack 24
  6185                           
  6186                           ;incstack = 0
  6187  002834  0E8E               	movlw	142
  6188  002836  6E21               	movwf	___lltoft@exp,c
  6189  002838  D006               	goto	l3134
  6190  00283A                     l3132:
  6191  00283A  90D8               	bcf	status,0,c
  6192  00283C  321C               	rrcf	___lltoft@c+3,f,c
  6193  00283E  321B               	rrcf	___lltoft@c+2,f,c
  6194  002840  321A               	rrcf	___lltoft@c+1,f,c
  6195  002842  3219               	rrcf	___lltoft@c,f,c
  6196  002844  2A21               	incf	___lltoft@exp,f,c
  6197  002846                     l3134:
  6198  002846  0E00               	movlw	0
  6199  002848  1419               	andwf	___lltoft@c,w,c
  6200  00284A  6E1D               	movwf	??___lltoft& (0+255),c
  6201  00284C  0E00               	movlw	0
  6202  00284E  141A               	andwf	___lltoft@c+1,w,c
  6203  002850  6E1E               	movwf	(??___lltoft+1)& (0+255),c
  6204  002852  0E00               	movlw	0
  6205  002854  141B               	andwf	___lltoft@c+2,w,c
  6206  002856  6E1F               	movwf	(??___lltoft+2)& (0+255),c
  6207  002858  0EFF               	movlw	255
  6208  00285A  141C               	andwf	___lltoft@c+3,w,c
  6209  00285C  6E20               	movwf	(??___lltoft+3)& (0+255),c
  6210  00285E  501D               	movf	??___lltoft,w,c
  6211  002860  101E               	iorwf	??___lltoft+1,w,c
  6212  002862  101F               	iorwf	??___lltoft+2,w,c
  6213  002864  1020               	iorwf	??___lltoft+3,w,c
  6214  002866  A4D8               	btfss	status,2,c
  6215  002868  D7E8               	goto	l3132
  6216  00286A  C019  F011         	movff	___lltoft@c,___ftpack@arg
  6217  00286E  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
  6218  002872  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
  6219  002876  C021  F014         	movff	___lltoft@exp,___ftpack@exp
  6220  00287A  0E00               	movlw	0
  6221  00287C  6E15               	movwf	___ftpack@sign,c
  6222  00287E  EC7F  F011         	call	___ftpack	;wreg free
  6223  002882  C011  F019         	movff	?___ftpack,?___lltoft
  6224  002886  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
  6225  00288A  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
  6226  00288E  0012               	return	
  6227  002890                     __end_of___lltoft:
  6228                           	opt stack 0
  6229                           tblptru	equ	0xFF8
  6230                           tblptrh	equ	0xFF7
  6231                           tblptrl	equ	0xFF6
  6232                           tablat	equ	0xFF5
  6233                           prodh	equ	0xFF4
  6234                           prodl	equ	0xFF3
  6235                           intcon	equ	0xFF2
  6236                           intcon2	equ	0xFF1
  6237                           intcon3	equ	0xFF0
  6238                           postinc0	equ	0xFEE
  6239                           wreg	equ	0xFE8
  6240                           postdec1	equ	0xFE5
  6241                           fsr1l	equ	0xFE1
  6242                           indf2	equ	0xFDF
  6243                           postinc2	equ	0xFDE
  6244                           postdec2	equ	0xFDD
  6245                           fsr2h	equ	0xFDA
  6246                           fsr2l	equ	0xFD9
  6247                           status	equ	0xFD8
  6248                           
  6249 ;; *************** function ___ftpack *****************
  6250 ;; Defined at:
  6251 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6252 ;; Parameters:    Size  Location     Type
  6253 ;;  arg             3   16[COMRAM] unsigned um
  6254 ;;  exp             1   19[COMRAM] unsigned char 
  6255 ;;  sign            1   20[COMRAM] unsigned char 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;		None
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  3   16[COMRAM] float 
  6260 ;; Registers used:
  6261 ;;		wreg, status,2, status,0
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6267 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6269 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6270 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;Total ram usage:        8 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:    1
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		___altoft
  6278 ;;		___awtoft
  6279 ;;		___ftadd
  6280 ;;		___ftdiv
  6281 ;;		___ftmul
  6282 ;;		___lltoft
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           	psect	text24
  6287  0022FE                     __ptext24:
  6288                           	opt stack 0
  6289  0022FE                     ___ftpack:
  6290                           	opt stack 22
  6291                           
  6292                           ;incstack = 0
  6293  0022FE  5014               	movf	___ftpack@exp,w,c
  6294  002300  B4D8               	btfsc	status,2,c
  6295  002302  D005               	goto	l2738
  6296  002304  5011               	movf	___ftpack@arg,w,c
  6297  002306  1012               	iorwf	___ftpack@arg+1,w,c
  6298  002308  1013               	iorwf	___ftpack@arg+2,w,c
  6299  00230A  A4D8               	btfss	status,2,c
  6300  00230C  D00C               	goto	l2744
  6301  00230E                     l2738:
  6302  00230E  0E00               	movlw	0
  6303  002310  6E11               	movwf	?___ftpack,c
  6304  002312  0E00               	movlw	0
  6305  002314  6E12               	movwf	?___ftpack+1,c
  6306  002316  0E00               	movlw	0
  6307  002318  6E13               	movwf	?___ftpack+2,c
  6308  00231A  0012               	return	
  6309  00231C                     l2742:
  6310  00231C  2A14               	incf	___ftpack@exp,f,c
  6311  00231E  90D8               	bcf	status,0,c
  6312  002320  3213               	rrcf	___ftpack@arg+2,f,c
  6313  002322  3212               	rrcf	___ftpack@arg+1,f,c
  6314  002324  3211               	rrcf	___ftpack@arg,f,c
  6315  002326                     l2744:
  6316  002326  0E00               	movlw	0
  6317  002328  1411               	andwf	___ftpack@arg,w,c
  6318  00232A  6E16               	movwf	??___ftpack& (0+255),c
  6319  00232C  0E00               	movlw	0
  6320  00232E  1412               	andwf	___ftpack@arg+1,w,c
  6321  002330  6E17               	movwf	(??___ftpack+1)& (0+255),c
  6322  002332  0EFE               	movlw	254
  6323  002334  1413               	andwf	___ftpack@arg+2,w,c
  6324  002336  6E18               	movwf	(??___ftpack+2)& (0+255),c
  6325  002338  5016               	movf	??___ftpack,w,c
  6326  00233A  1017               	iorwf	??___ftpack+1,w,c
  6327  00233C  1018               	iorwf	??___ftpack+2,w,c
  6328  00233E  B4D8               	btfsc	status,2,c
  6329  002340  D00C               	goto	l2750
  6330  002342  D7EC               	goto	l2742
  6331  002344                     l2746:
  6332  002344  2A14               	incf	___ftpack@exp,f,c
  6333  002346  0E01               	movlw	1
  6334  002348  2611               	addwf	___ftpack@arg,f,c
  6335  00234A  0E00               	movlw	0
  6336  00234C  2212               	addwfc	___ftpack@arg+1,f,c
  6337  00234E  0E00               	movlw	0
  6338  002350  2213               	addwfc	___ftpack@arg+2,f,c
  6339  002352  90D8               	bcf	status,0,c
  6340  002354  3213               	rrcf	___ftpack@arg+2,f,c
  6341  002356  3212               	rrcf	___ftpack@arg+1,f,c
  6342  002358  3211               	rrcf	___ftpack@arg,f,c
  6343  00235A                     l2750:
  6344  00235A  0E00               	movlw	0
  6345  00235C  1411               	andwf	___ftpack@arg,w,c
  6346  00235E  6E16               	movwf	??___ftpack& (0+255),c
  6347  002360  0E00               	movlw	0
  6348  002362  1412               	andwf	___ftpack@arg+1,w,c
  6349  002364  6E17               	movwf	(??___ftpack+1)& (0+255),c
  6350  002366  0EFF               	movlw	255
  6351  002368  1413               	andwf	___ftpack@arg+2,w,c
  6352  00236A  6E18               	movwf	(??___ftpack+2)& (0+255),c
  6353  00236C  5016               	movf	??___ftpack,w,c
  6354  00236E  1017               	iorwf	??___ftpack+1,w,c
  6355  002370  1018               	iorwf	??___ftpack+2,w,c
  6356  002372  B4D8               	btfsc	status,2,c
  6357  002374  D006               	goto	l2754
  6358  002376  D7E6               	goto	l2746
  6359  002378                     l2752:
  6360  002378  0614               	decf	___ftpack@exp,f,c
  6361  00237A  90D8               	bcf	status,0,c
  6362  00237C  3611               	rlcf	___ftpack@arg,f,c
  6363  00237E  3612               	rlcf	___ftpack@arg+1,f,c
  6364  002380  3613               	rlcf	___ftpack@arg+2,f,c
  6365  002382                     l2754:
  6366  002382  BE12               	btfsc	___ftpack@arg+1,7,c
  6367  002384  D003               	goto	l675
  6368  002386  0E02               	movlw	2
  6369  002388  6014               	cpfslt	___ftpack@exp,c
  6370  00238A  D7F6               	goto	l2752
  6371  00238C                     l675:
  6372  00238C  A014               	btfss	___ftpack@exp,0,c
  6373  00238E  9E12               	bcf	___ftpack@arg+1,7,c
  6374  002390  90D8               	bcf	status,0,c
  6375  002392  3214               	rrcf	___ftpack@exp,f,c
  6376  002394  5014               	movf	___ftpack@exp,w,c
  6377  002396  1213               	iorwf	___ftpack@arg+2,f,c
  6378  002398  5015               	movf	___ftpack@sign,w,c
  6379  00239A  A4D8               	btfss	status,2,c
  6380  00239C  8E13               	bsf	___ftpack@arg+2,7,c
  6381  00239E  C011  F011         	movff	___ftpack@arg,?___ftpack
  6382  0023A2  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  6383  0023A6  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  6384  0023AA  0012               	return	
  6385  0023AC                     __end_of___ftpack:
  6386                           	opt stack 0
  6387                           tblptru	equ	0xFF8
  6388                           tblptrh	equ	0xFF7
  6389                           tblptrl	equ	0xFF6
  6390                           tablat	equ	0xFF5
  6391                           prodh	equ	0xFF4
  6392                           prodl	equ	0xFF3
  6393                           intcon	equ	0xFF2
  6394                           intcon2	equ	0xFF1
  6395                           intcon3	equ	0xFF0
  6396                           postinc0	equ	0xFEE
  6397                           wreg	equ	0xFE8
  6398                           postdec1	equ	0xFE5
  6399                           fsr1l	equ	0xFE1
  6400                           indf2	equ	0xFDF
  6401                           postinc2	equ	0xFDE
  6402                           postdec2	equ	0xFDD
  6403                           fsr2h	equ	0xFDA
  6404                           fsr2l	equ	0xFD9
  6405                           status	equ	0xFD8
  6406                           
  6407 ;; *************** function ___awdiv *****************
  6408 ;; Defined at:
  6409 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;  dividend        2   16[COMRAM] int 
  6412 ;;  divisor         2   18[COMRAM] int 
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;  quotient        2   22[COMRAM] int 
  6415 ;;  sign            1   21[COMRAM] unsigned char 
  6416 ;;  counter         1   20[COMRAM] unsigned char 
  6417 ;; Return value:  Size  Location     Type
  6418 ;;                  2   16[COMRAM] int 
  6419 ;; Registers used:
  6420 ;;		wreg, status,2, status,0
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6426 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;Total ram usage:        8 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    1
  6433 ;; This function calls:
  6434 ;;		Nothing
  6435 ;; This function is called by:
  6436 ;;		_dec_to_hex
  6437 ;;		_init_operation
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           	psect	text25
  6442  0024CC                     __ptext25:
  6443                           	opt stack 0
  6444  0024CC                     ___awdiv:
  6445                           	opt stack 26
  6446                           
  6447                           ;incstack = 0
  6448  0024CC  0E00               	movlw	0
  6449  0024CE  6E16               	movwf	___awdiv@sign,c
  6450  0024D0  AE14               	btfss	___awdiv@divisor+1,7,c
  6451  0024D2  D006               	goto	l3276
  6452  0024D4  6C13               	negf	___awdiv@divisor,c
  6453  0024D6  1E14               	comf	___awdiv@divisor+1,f,c
  6454  0024D8  B0D8               	btfsc	status,0,c
  6455  0024DA  2A14               	incf	___awdiv@divisor+1,f,c
  6456  0024DC  0E01               	movlw	1
  6457  0024DE  6E16               	movwf	___awdiv@sign,c
  6458  0024E0                     l3276:
  6459  0024E0  AE12               	btfss	___awdiv@dividend+1,7,c
  6460  0024E2  D006               	goto	l3282
  6461  0024E4  6C11               	negf	___awdiv@dividend,c
  6462  0024E6  1E12               	comf	___awdiv@dividend+1,f,c
  6463  0024E8  B0D8               	btfsc	status,0,c
  6464  0024EA  2A12               	incf	___awdiv@dividend+1,f,c
  6465  0024EC  0E01               	movlw	1
  6466  0024EE  1A16               	xorwf	___awdiv@sign,f,c
  6467  0024F0                     l3282:
  6468  0024F0  0E00               	movlw	0
  6469  0024F2  6E18               	movwf	___awdiv@quotient+1,c
  6470  0024F4  0E00               	movlw	0
  6471  0024F6  6E17               	movwf	___awdiv@quotient,c
  6472  0024F8  5013               	movf	___awdiv@divisor,w,c
  6473  0024FA  1014               	iorwf	___awdiv@divisor+1,w,c
  6474  0024FC  B4D8               	btfsc	status,2,c
  6475  0024FE  D01C               	goto	l3304
  6476  002500  0E01               	movlw	1
  6477  002502  6E15               	movwf	___awdiv@counter,c
  6478  002504  D004               	goto	l3290
  6479  002506                     l3288:
  6480  002506  90D8               	bcf	status,0,c
  6481  002508  3613               	rlcf	___awdiv@divisor,f,c
  6482  00250A  3614               	rlcf	___awdiv@divisor+1,f,c
  6483  00250C  2A15               	incf	___awdiv@counter,f,c
  6484  00250E                     l3290:
  6485  00250E  AE14               	btfss	___awdiv@divisor+1,7,c
  6486  002510  D7FA               	goto	l3288
  6487  002512                     l3292:
  6488  002512  90D8               	bcf	status,0,c
  6489  002514  3617               	rlcf	___awdiv@quotient,f,c
  6490  002516  3618               	rlcf	___awdiv@quotient+1,f,c
  6491  002518  5013               	movf	___awdiv@divisor,w,c
  6492  00251A  5C11               	subwf	___awdiv@dividend,w,c
  6493  00251C  5014               	movf	___awdiv@divisor+1,w,c
  6494  00251E  5812               	subwfb	___awdiv@dividend+1,w,c
  6495  002520  A0D8               	btfss	status,0,c
  6496  002522  D005               	goto	l3300
  6497  002524  5013               	movf	___awdiv@divisor,w,c
  6498  002526  5E11               	subwf	___awdiv@dividend,f,c
  6499  002528  5014               	movf	___awdiv@divisor+1,w,c
  6500  00252A  5A12               	subwfb	___awdiv@dividend+1,f,c
  6501  00252C  8017               	bsf	___awdiv@quotient,0,c
  6502  00252E                     l3300:
  6503  00252E  90D8               	bcf	status,0,c
  6504  002530  3214               	rrcf	___awdiv@divisor+1,f,c
  6505  002532  3213               	rrcf	___awdiv@divisor,f,c
  6506  002534  2E15               	decfsz	___awdiv@counter,f,c
  6507  002536  D7ED               	goto	l3292
  6508  002538                     l3304:
  6509  002538  5016               	movf	___awdiv@sign,w,c
  6510  00253A  B4D8               	btfsc	status,2,c
  6511  00253C  D004               	goto	l3308
  6512  00253E  6C17               	negf	___awdiv@quotient,c
  6513  002540  1E18               	comf	___awdiv@quotient+1,f,c
  6514  002542  B0D8               	btfsc	status,0,c
  6515  002544  2A18               	incf	___awdiv@quotient+1,f,c
  6516  002546                     l3308:
  6517  002546  C017  F011         	movff	___awdiv@quotient,?___awdiv
  6518  00254A  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  6519  00254E  0012               	return	
  6520  002550                     __end_of___awdiv:
  6521                           	opt stack 0
  6522                           tblptru	equ	0xFF8
  6523                           tblptrh	equ	0xFF7
  6524                           tblptrl	equ	0xFF6
  6525                           tablat	equ	0xFF5
  6526                           prodh	equ	0xFF4
  6527                           prodl	equ	0xFF3
  6528                           intcon	equ	0xFF2
  6529                           intcon2	equ	0xFF1
  6530                           intcon3	equ	0xFF0
  6531                           postinc0	equ	0xFEE
  6532                           wreg	equ	0xFE8
  6533                           postdec1	equ	0xFE5
  6534                           fsr1l	equ	0xFE1
  6535                           indf2	equ	0xFDF
  6536                           postinc2	equ	0xFDE
  6537                           postdec2	equ	0xFDD
  6538                           fsr2h	equ	0xFDA
  6539                           fsr2l	equ	0xFD9
  6540                           status	equ	0xFD8
  6541                           
  6542 ;; *************** function _stepper_state *****************
  6543 ;; Defined at:
  6544 ;;		line 504 in file "main.c"
  6545 ;; Parameters:    Size  Location     Type
  6546 ;;  step_state      2   21[COMRAM] PTR unsigned char 
  6547 ;;		 -> main@step_state(2), 
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;  next_state      2   25[COMRAM] int 
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  1    wreg      void 
  6552 ;; Registers used:
  6553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6559 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6561 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6562 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6563 ;;Total ram usage:        6 bytes
  6564 ;; Hardware stack levels used:    1
  6565 ;; Hardware stack levels required when called:    2
  6566 ;; This function calls:
  6567 ;;		_stepper
  6568 ;;		_stepper_rev
  6569 ;; This function is called by:
  6570 ;;		_init_operation
  6571 ;;		_operation_end
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           	psect	text26
  6576  000F40                     __ptext26:
  6577                           	opt stack 0
  6578  000F40                     _stepper_state:
  6579                           	opt stack 27
  6580                           
  6581                           ;main.c: 505: int next_state = step_state[1];
  6582                           
  6583                           ;incstack = 0
  6584  000F40  EE20 F001          	lfsr	2,1
  6585  000F44  5016               	movf	stepper_state@step_state,w,c
  6586  000F46  26D9               	addwf	fsr2l,f,c
  6587  000F48  5017               	movf	stepper_state@step_state+1,w,c
  6588  000F4A  22DA               	addwfc	fsr2h,f,c
  6589  000F4C  50DF               	movf	indf2,w,c
  6590  000F4E  6E18               	movwf	??_stepper_state& (0+255),c
  6591  000F50  5018               	movf	??_stepper_state,w,c
  6592  000F52  6E1A               	movwf	stepper_state@next_state,c
  6593  000F54  6A1B               	clrf	stepper_state@next_state+1,c
  6594                           
  6595                           ;main.c: 506: switch(next_state){
  6596  000F56  D0C9               	goto	l3748
  6597  000F58                     l3690:
  6598                           
  6599                           ;main.c: 508: if (step_state[0] == 2) stepper_rev(64);
  6600  000F58  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6601  000F5C  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6602  000F60  0E02               	movlw	2
  6603  000F62  18DE               	xorwf	postinc2,w,c
  6604  000F64  A4D8               	btfss	status,2,c
  6605  000F66  D007               	goto	l3694
  6606  000F68  0E00               	movlw	0
  6607  000F6A  6E12               	movwf	stepper_rev@r+1,c
  6608  000F6C  0E40               	movlw	64
  6609  000F6E  6E11               	movwf	stepper_rev@r,c
  6610  000F70  ECA8  F012         	call	_stepper_rev	;wreg free
  6611  000F74  D01D               	goto	l3702
  6612  000F76                     l3694:
  6613                           
  6614                           ;main.c: 509: else if (step_state[0] == 3) stepper_rev(128);
  6615  000F76  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6616  000F7A  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6617  000F7E  0E03               	movlw	3
  6618  000F80  18DE               	xorwf	postinc2,w,c
  6619  000F82  A4D8               	btfss	status,2,c
  6620  000F84  D007               	goto	l3698
  6621  000F86  0E00               	movlw	0
  6622  000F88  6E12               	movwf	stepper_rev@r+1,c
  6623  000F8A  0E80               	movlw	128
  6624  000F8C  6E11               	movwf	stepper_rev@r,c
  6625  000F8E  ECA8  F012         	call	_stepper_rev	;wreg free
  6626  000F92  D00E               	goto	l3702
  6627  000F94                     l3698:
  6628                           
  6629                           ;main.c: 510: else if (step_state[0] == 4) stepper_rev(192);
  6630  000F94  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6631  000F98  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6632  000F9C  0E04               	movlw	4
  6633  000F9E  18DE               	xorwf	postinc2,w,c
  6634  000FA0  A4D8               	btfss	status,2,c
  6635  000FA2  D006               	goto	l3702
  6636  000FA4  0E00               	movlw	0
  6637  000FA6  6E12               	movwf	stepper_rev@r+1,c
  6638  000FA8  0EC0               	movlw	192
  6639  000FAA  6E11               	movwf	stepper_rev@r,c
  6640  000FAC  ECA8  F012         	call	_stepper_rev	;wreg free
  6641  000FB0                     l3702:
  6642                           
  6643                           ;main.c: 511: step_state[0] = 1;
  6644  000FB0  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6645  000FB4  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6646  000FB8  0E01               	movlw	1
  6647  000FBA  6EDF               	movwf	indf2,c
  6648                           
  6649                           ;main.c: 512: break;
  6650  000FBC  0012               	return	
  6651  000FBE                     l3704:
  6652                           
  6653                           ;main.c: 514: if (step_state[0] == 3) stepper_rev(64);
  6654  000FBE  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6655  000FC2  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6656  000FC6  0E03               	movlw	3
  6657  000FC8  18DE               	xorwf	postinc2,w,c
  6658  000FCA  A4D8               	btfss	status,2,c
  6659  000FCC  D007               	goto	l3708
  6660  000FCE  0E00               	movlw	0
  6661  000FD0  6E12               	movwf	stepper_rev@r+1,c
  6662  000FD2  0E40               	movlw	64
  6663  000FD4  6E11               	movwf	stepper_rev@r,c
  6664  000FD6  ECA8  F012         	call	_stepper_rev	;wreg free
  6665  000FDA  D01C               	goto	l3716
  6666  000FDC                     l3708:
  6667                           
  6668                           ;main.c: 515: else if (step_state[0] == 4) stepper_rev(128);
  6669  000FDC  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6670  000FE0  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6671  000FE4  0E04               	movlw	4
  6672  000FE6  18DE               	xorwf	postinc2,w,c
  6673  000FE8  A4D8               	btfss	status,2,c
  6674  000FEA  D007               	goto	l3712
  6675  000FEC  0E00               	movlw	0
  6676  000FEE  6E12               	movwf	stepper_rev@r+1,c
  6677  000FF0  0E80               	movlw	128
  6678  000FF2  6E11               	movwf	stepper_rev@r,c
  6679  000FF4  ECA8  F012         	call	_stepper_rev	;wreg free
  6680  000FF8  D00D               	goto	l3716
  6681  000FFA                     l3712:
  6682                           
  6683                           ;main.c: 516: else if (step_state[0] == 1) stepper(64);
  6684  000FFA  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6685  000FFE  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6686  001002  04DE               	decf	postinc2,w,c
  6687  001004  A4D8               	btfss	status,2,c
  6688  001006  D006               	goto	l3716
  6689  001008  0E00               	movlw	0
  6690  00100A  6E12               	movwf	stepper@r+1,c
  6691  00100C  0E40               	movlw	64
  6692  00100E  6E11               	movwf	stepper@r,c
  6693  001010  ECEA  F012         	call	_stepper	;wreg free
  6694  001014                     l3716:
  6695                           
  6696                           ;main.c: 517: step_state[0] = 2;
  6697  001014  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6698  001018  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6699  00101C  0E02               	movlw	2
  6700  00101E  6EDF               	movwf	indf2,c
  6701                           
  6702                           ;main.c: 518: break;
  6703  001020  0012               	return	
  6704  001022                     l3718:
  6705                           
  6706                           ;main.c: 520: if (step_state[0] == 4) stepper_rev(64);
  6707  001022  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6708  001026  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6709  00102A  0E04               	movlw	4
  6710  00102C  18DE               	xorwf	postinc2,w,c
  6711  00102E  A4D8               	btfss	status,2,c
  6712  001030  D007               	goto	l3722
  6713  001032  0E00               	movlw	0
  6714  001034  6E12               	movwf	stepper_rev@r+1,c
  6715  001036  0E40               	movlw	64
  6716  001038  6E11               	movwf	stepper_rev@r,c
  6717  00103A  ECA8  F012         	call	_stepper_rev	;wreg free
  6718  00103E  D01C               	goto	l3730
  6719  001040                     l3722:
  6720                           
  6721                           ;main.c: 521: else if (step_state[0] == 1) stepper(128);
  6722  001040  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6723  001044  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6724  001048  04DE               	decf	postinc2,w,c
  6725  00104A  A4D8               	btfss	status,2,c
  6726  00104C  D007               	goto	l3726
  6727  00104E  0E00               	movlw	0
  6728  001050  6E12               	movwf	stepper@r+1,c
  6729  001052  0E80               	movlw	128
  6730  001054  6E11               	movwf	stepper@r,c
  6731  001056  ECEA  F012         	call	_stepper	;wreg free
  6732  00105A  D00E               	goto	l3730
  6733  00105C                     l3726:
  6734                           
  6735                           ;main.c: 522: else if (step_state[0] == 2) stepper_rev(64);
  6736  00105C  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6737  001060  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6738  001064  0E02               	movlw	2
  6739  001066  18DE               	xorwf	postinc2,w,c
  6740  001068  A4D8               	btfss	status,2,c
  6741  00106A  D006               	goto	l3730
  6742  00106C  0E00               	movlw	0
  6743  00106E  6E12               	movwf	stepper_rev@r+1,c
  6744  001070  0E40               	movlw	64
  6745  001072  6E11               	movwf	stepper_rev@r,c
  6746  001074  ECA8  F012         	call	_stepper_rev	;wreg free
  6747  001078                     l3730:
  6748                           
  6749                           ;main.c: 523: step_state[0] = 3;
  6750  001078  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6751  00107C  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6752  001080  0E03               	movlw	3
  6753  001082  6EDF               	movwf	indf2,c
  6754                           
  6755                           ;main.c: 524: break;
  6756  001084  0012               	return	
  6757  001086                     l3732:
  6758                           
  6759                           ;main.c: 526: if (step_state[0] == 1) stepper(192);
  6760  001086  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6761  00108A  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6762  00108E  04DE               	decf	postinc2,w,c
  6763  001090  A4D8               	btfss	status,2,c
  6764  001092  D007               	goto	l3736
  6765  001094  0E00               	movlw	0
  6766  001096  6E12               	movwf	stepper@r+1,c
  6767  001098  0EC0               	movlw	192
  6768  00109A  6E11               	movwf	stepper@r,c
  6769  00109C  ECEA  F012         	call	_stepper	;wreg free
  6770  0010A0  D01D               	goto	l3744
  6771  0010A2                     l3736:
  6772                           
  6773                           ;main.c: 527: else if (step_state[0] == 2) stepper(128);
  6774  0010A2  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6775  0010A6  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6776  0010AA  0E02               	movlw	2
  6777  0010AC  18DE               	xorwf	postinc2,w,c
  6778  0010AE  A4D8               	btfss	status,2,c
  6779  0010B0  D007               	goto	l3740
  6780  0010B2  0E00               	movlw	0
  6781  0010B4  6E12               	movwf	stepper@r+1,c
  6782  0010B6  0E80               	movlw	128
  6783  0010B8  6E11               	movwf	stepper@r,c
  6784  0010BA  ECEA  F012         	call	_stepper	;wreg free
  6785  0010BE  D00E               	goto	l3744
  6786  0010C0                     l3740:
  6787                           
  6788                           ;main.c: 528: else if (step_state[0] == 3) stepper_rev(64);
  6789  0010C0  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6790  0010C4  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6791  0010C8  0E03               	movlw	3
  6792  0010CA  18DE               	xorwf	postinc2,w,c
  6793  0010CC  A4D8               	btfss	status,2,c
  6794  0010CE  D006               	goto	l3744
  6795  0010D0  0E00               	movlw	0
  6796  0010D2  6E12               	movwf	stepper_rev@r+1,c
  6797  0010D4  0E40               	movlw	64
  6798  0010D6  6E11               	movwf	stepper_rev@r,c
  6799  0010D8  ECA8  F012         	call	_stepper_rev	;wreg free
  6800  0010DC                     l3744:
  6801                           
  6802                           ;main.c: 529: step_state[0] = 4;
  6803  0010DC  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6804  0010E0  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6805  0010E4  0E04               	movlw	4
  6806  0010E6  6EDF               	movwf	indf2,c
  6807                           
  6808                           ;main.c: 531: }
  6809                           
  6810                           ;main.c: 530: break;
  6811  0010E8  0012               	return	
  6812  0010EA                     l3748:
  6813  0010EA  C01A  F018         	movff	stepper_state@next_state,??_stepper_state
  6814  0010EE  C01B  F019         	movff	stepper_state@next_state+1,??_stepper_state+1
  6815                           
  6816                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6817                           ; Switch size 1, requested type "space"
  6818                           ; Number of cases is 1, Range of values is 0 to 0
  6819                           ; switch strategies available:
  6820                           ; Name         Instructions Cycles
  6821                           ; simple_byte            4     3 (average)
  6822                           ;	Chosen strategy is simple_byte
  6823  0010F2  5019               	movf	??_stepper_state+1,w,c
  6824  0010F4  0A00               	xorlw	0	; case 0
  6825  0010F6  A4D8               	btfss	status,2,c
  6826  0010F8  0012               	return	
  6827                           
  6828                           ; Switch size 1, requested type "space"
  6829                           ; Number of cases is 4, Range of values is 1 to 4
  6830                           ; switch strategies available:
  6831                           ; Name         Instructions Cycles
  6832                           ; simple_byte           13     7 (average)
  6833                           ;	Chosen strategy is simple_byte
  6834  0010FA  5018               	movf	??_stepper_state,w,c
  6835  0010FC  0A01               	xorlw	1	; case 1
  6836  0010FE  B4D8               	btfsc	status,2,c
  6837  001100  D72B               	goto	l3690
  6838  001102  0A03               	xorlw	3	; case 2
  6839  001104  B4D8               	btfsc	status,2,c
  6840  001106  D75B               	goto	l3704
  6841  001108  0A01               	xorlw	1	; case 3
  6842  00110A  B4D8               	btfsc	status,2,c
  6843  00110C  D78A               	goto	l3718
  6844  00110E  0A07               	xorlw	7	; case 4
  6845  001110  A4D8               	btfss	status,2,c
  6846  001112  0012               	return	
  6847  001114  D7B8               	goto	l3732
  6848  001116                     __end_of_stepper_state:
  6849                           	opt stack 0
  6850                           tblptru	equ	0xFF8
  6851                           tblptrh	equ	0xFF7
  6852                           tblptrl	equ	0xFF6
  6853                           tablat	equ	0xFF5
  6854                           prodh	equ	0xFF4
  6855                           prodl	equ	0xFF3
  6856                           intcon	equ	0xFF2
  6857                           intcon2	equ	0xFF1
  6858                           intcon3	equ	0xFF0
  6859                           postinc0	equ	0xFEE
  6860                           wreg	equ	0xFE8
  6861                           postdec1	equ	0xFE5
  6862                           fsr1l	equ	0xFE1
  6863                           indf2	equ	0xFDF
  6864                           postinc2	equ	0xFDE
  6865                           postdec2	equ	0xFDD
  6866                           fsr2h	equ	0xFDA
  6867                           fsr2l	equ	0xFD9
  6868                           status	equ	0xFD8
  6869                           
  6870 ;; *************** function _stepper_rev *****************
  6871 ;; Defined at:
  6872 ;;		line 478 in file "main.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;  r               2   16[COMRAM] int 
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;  i               2   19[COMRAM] int 
  6877 ;; Return value:  Size  Location     Type
  6878 ;;                  1    wreg      void 
  6879 ;; Registers used:
  6880 ;;		wreg, status,2, status,0
  6881 ;; Tracked objects:
  6882 ;;		On entry : 0/0
  6883 ;;		On exit  : 0/0
  6884 ;;		Unchanged: 0/0
  6885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6886 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6889 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6890 ;;Total ram usage:        5 bytes
  6891 ;; Hardware stack levels used:    1
  6892 ;; Hardware stack levels required when called:    1
  6893 ;; This function calls:
  6894 ;;		Nothing
  6895 ;; This function is called by:
  6896 ;;		_stepper_state
  6897 ;; This function uses a non-reentrant model
  6898 ;;
  6899                           
  6900                           	psect	text27
  6901  002550                     __ptext27:
  6902                           	opt stack 0
  6903  002550                     _stepper_rev:
  6904                           	opt stack 27
  6905                           
  6906                           ;main.c: 480: for (int i = 0; i < r; i++){
  6907                           
  6908                           ;incstack = 0
  6909  002550  0E00               	movlw	0
  6910  002552  6E15               	movwf	stepper_rev@i+1,c
  6911  002554  0E00               	movlw	0
  6912  002556  6E14               	movwf	stepper_rev@i,c
  6913  002558  D032               	goto	l233
  6914  00255A                     l234:
  6915                           
  6916                           ;main.c: 481: PORTCbits.RC0 = 0;
  6917  00255A  9082               	bcf	3970,0,c	;volatile
  6918                           
  6919                           ;main.c: 482: PORTCbits.RC1 = 0;
  6920  00255C  9282               	bcf	3970,1,c	;volatile
  6921                           
  6922                           ;main.c: 483: PORTCbits.RC2 = 1;
  6923  00255E  8482               	bsf	3970,2,c	;volatile
  6924                           
  6925                           ;main.c: 484: PORTCbits.RC5 = 1;
  6926  002560  8A82               	bsf	3970,5,c	;volatile
  6927                           
  6928                           ;main.c: 485: _delay((unsigned long)((5)*(10000000/4000.0)));
  6929  002562  0E11               	movlw	17
  6930  002564  6E13               	movwf	??_stepper_rev& (0+255),c
  6931  002566  0E3A               	movlw	58
  6932  002568                     u3907:
  6933  002568  2EE8               	decfsz	wreg,f,c
  6934  00256A  D7FE               	bra	u3907
  6935  00256C  2E13               	decfsz	??_stepper_rev& (0+255),f,c
  6936  00256E  D7FC               	bra	u3907
  6937  002570  D000               	nop2	
  6938                           
  6939                           ;main.c: 486: PORTCbits.RC0 = 0;
  6940  002572  9082               	bcf	3970,0,c	;volatile
  6941                           
  6942                           ;main.c: 487: PORTCbits.RC1 = 1;
  6943  002574  8282               	bsf	3970,1,c	;volatile
  6944                           
  6945                           ;main.c: 488: PORTCbits.RC2 = 1;
  6946  002576  8482               	bsf	3970,2,c	;volatile
  6947                           
  6948                           ;main.c: 489: PORTCbits.RC5 = 0;
  6949  002578  9A82               	bcf	3970,5,c	;volatile
  6950                           
  6951                           ;main.c: 490: _delay((unsigned long)((5)*(10000000/4000.0)));
  6952  00257A  0E11               	movlw	17
  6953  00257C  6E13               	movwf	??_stepper_rev& (0+255),c
  6954  00257E  0E3A               	movlw	58
  6955  002580                     u3917:
  6956  002580  2EE8               	decfsz	wreg,f,c
  6957  002582  D7FE               	bra	u3917
  6958  002584  2E13               	decfsz	??_stepper_rev& (0+255),f,c
  6959  002586  D7FC               	bra	u3917
  6960  002588  D000               	nop2	
  6961                           
  6962                           ;main.c: 491: PORTCbits.RC0 = 1;
  6963  00258A  8082               	bsf	3970,0,c	;volatile
  6964                           
  6965                           ;main.c: 492: PORTCbits.RC1 = 1;
  6966  00258C  8282               	bsf	3970,1,c	;volatile
  6967                           
  6968                           ;main.c: 493: PORTCbits.RC2 = 1;
  6969  00258E  8482               	bsf	3970,2,c	;volatile
  6970                           
  6971                           ;main.c: 494: PORTCbits.RC5 = 0;
  6972  002590  9A82               	bcf	3970,5,c	;volatile
  6973                           
  6974                           ;main.c: 495: _delay((unsigned long)((5)*(10000000/4000.0)));
  6975  002592  0E11               	movlw	17
  6976  002594  6E13               	movwf	??_stepper_rev& (0+255),c
  6977  002596  0E3A               	movlw	58
  6978  002598                     u3927:
  6979  002598  2EE8               	decfsz	wreg,f,c
  6980  00259A  D7FE               	bra	u3927
  6981  00259C  2E13               	decfsz	??_stepper_rev& (0+255),f,c
  6982  00259E  D7FC               	bra	u3927
  6983  0025A0  D000               	nop2	
  6984                           
  6985                           ;main.c: 496: PORTCbits.RC0 = 1;
  6986  0025A2  8082               	bsf	3970,0,c	;volatile
  6987                           
  6988                           ;main.c: 497: PORTCbits.RC1 = 0;
  6989  0025A4  9282               	bcf	3970,1,c	;volatile
  6990                           
  6991                           ;main.c: 498: PORTCbits.RC2 = 0;
  6992  0025A6  9482               	bcf	3970,2,c	;volatile
  6993                           
  6994                           ;main.c: 499: PORTCbits.RC5 = 1;
  6995  0025A8  8A82               	bsf	3970,5,c	;volatile
  6996                           
  6997                           ;main.c: 500: _delay((unsigned long)((5)*(10000000/4000.0)));
  6998  0025AA  0E11               	movlw	17
  6999  0025AC  6E13               	movwf	??_stepper_rev& (0+255),c
  7000  0025AE  0E3A               	movlw	58
  7001  0025B0                     u3937:
  7002  0025B0  2EE8               	decfsz	wreg,f,c
  7003  0025B2  D7FE               	bra	u3937
  7004  0025B4  2E13               	decfsz	??_stepper_rev& (0+255),f,c
  7005  0025B6  D7FC               	bra	u3937
  7006  0025B8  D000               	nop2	
  7007  0025BA  4A14               	infsnz	stepper_rev@i,f,c
  7008  0025BC  2A15               	incf	stepper_rev@i+1,f,c
  7009  0025BE                     l233:
  7010  0025BE  5011               	movf	stepper_rev@r,w,c
  7011  0025C0  5C14               	subwf	stepper_rev@i,w,c
  7012  0025C2  5015               	movf	stepper_rev@i+1,w,c
  7013  0025C4  0A80               	xorlw	128
  7014  0025C6  6E13               	movwf	??_stepper_rev& (0+255),c
  7015  0025C8  5012               	movf	stepper_rev@r+1,w,c
  7016  0025CA  0A80               	xorlw	128
  7017  0025CC  5813               	subwfb	??_stepper_rev& (0+255),w,c
  7018  0025CE  B0D8               	btfsc	status,0,c
  7019  0025D0  0012               	return	
  7020  0025D2  D7C3               	goto	l234
  7021  0025D4                     __end_of_stepper_rev:
  7022                           	opt stack 0
  7023                           tblptru	equ	0xFF8
  7024                           tblptrh	equ	0xFF7
  7025                           tblptrl	equ	0xFF6
  7026                           tablat	equ	0xFF5
  7027                           prodh	equ	0xFF4
  7028                           prodl	equ	0xFF3
  7029                           intcon	equ	0xFF2
  7030                           intcon2	equ	0xFF1
  7031                           intcon3	equ	0xFF0
  7032                           postinc0	equ	0xFEE
  7033                           wreg	equ	0xFE8
  7034                           postdec1	equ	0xFE5
  7035                           fsr1l	equ	0xFE1
  7036                           indf2	equ	0xFDF
  7037                           postinc2	equ	0xFDE
  7038                           postdec2	equ	0xFDD
  7039                           fsr2h	equ	0xFDA
  7040                           fsr2l	equ	0xFD9
  7041                           status	equ	0xFD8
  7042                           
  7043 ;; *************** function _stepper *****************
  7044 ;; Defined at:
  7045 ;;		line 452 in file "main.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;  r               2   16[COMRAM] int 
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;  i               2   19[COMRAM] int 
  7050 ;; Return value:  Size  Location     Type
  7051 ;;                  1    wreg      void 
  7052 ;; Registers used:
  7053 ;;		wreg, status,2, status,0
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7059 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7060 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;Total ram usage:        5 bytes
  7064 ;; Hardware stack levels used:    1
  7065 ;; Hardware stack levels required when called:    1
  7066 ;; This function calls:
  7067 ;;		Nothing
  7068 ;; This function is called by:
  7069 ;;		_stepper_state
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           	psect	text28
  7074  0025D4                     __ptext28:
  7075                           	opt stack 0
  7076  0025D4                     _stepper:
  7077                           	opt stack 27
  7078                           
  7079                           ;main.c: 454: for (int i = 0; i < r; i++){
  7080                           
  7081                           ;incstack = 0
  7082  0025D4  0E00               	movlw	0
  7083  0025D6  6E15               	movwf	stepper@i+1,c
  7084  0025D8  0E00               	movlw	0
  7085  0025DA  6E14               	movwf	stepper@i,c
  7086  0025DC  D032               	goto	l227
  7087  0025DE                     l228:
  7088                           
  7089                           ;main.c: 455: PORTCbits.RC0 = 1;
  7090  0025DE  8082               	bsf	3970,0,c	;volatile
  7091                           
  7092                           ;main.c: 456: PORTCbits.RC1 = 1;
  7093  0025E0  8282               	bsf	3970,1,c	;volatile
  7094                           
  7095                           ;main.c: 457: PORTCbits.RC2 = 0;
  7096  0025E2  9482               	bcf	3970,2,c	;volatile
  7097                           
  7098                           ;main.c: 458: PORTCbits.RC5 = 0;
  7099  0025E4  9A82               	bcf	3970,5,c	;volatile
  7100                           
  7101                           ;main.c: 459: _delay((unsigned long)((5)*(10000000/4000.0)));
  7102  0025E6  0E11               	movlw	17
  7103  0025E8  6E13               	movwf	??_stepper& (0+255),c
  7104  0025EA  0E3A               	movlw	58
  7105  0025EC                     u3947:
  7106  0025EC  2EE8               	decfsz	wreg,f,c
  7107  0025EE  D7FE               	bra	u3947
  7108  0025F0  2E13               	decfsz	??_stepper& (0+255),f,c
  7109  0025F2  D7FC               	bra	u3947
  7110  0025F4  D000               	nop2	
  7111                           
  7112                           ;main.c: 460: PORTCbits.RC0 = 0;
  7113  0025F6  9082               	bcf	3970,0,c	;volatile
  7114                           
  7115                           ;main.c: 461: PORTCbits.RC1 = 1;
  7116  0025F8  8282               	bsf	3970,1,c	;volatile
  7117                           
  7118                           ;main.c: 462: PORTCbits.RC2 = 1;
  7119  0025FA  8482               	bsf	3970,2,c	;volatile
  7120                           
  7121                           ;main.c: 463: PORTCbits.RC5 = 0;
  7122  0025FC  9A82               	bcf	3970,5,c	;volatile
  7123                           
  7124                           ;main.c: 464: _delay((unsigned long)((5)*(10000000/4000.0)));
  7125  0025FE  0E11               	movlw	17
  7126  002600  6E13               	movwf	??_stepper& (0+255),c
  7127  002602  0E3A               	movlw	58
  7128  002604                     u3957:
  7129  002604  2EE8               	decfsz	wreg,f,c
  7130  002606  D7FE               	bra	u3957
  7131  002608  2E13               	decfsz	??_stepper& (0+255),f,c
  7132  00260A  D7FC               	bra	u3957
  7133  00260C  D000               	nop2	
  7134                           
  7135                           ;main.c: 465: PORTCbits.RC0 = 0;
  7136  00260E  9082               	bcf	3970,0,c	;volatile
  7137                           
  7138                           ;main.c: 466: PORTCbits.RC1 = 0;
  7139  002610  9282               	bcf	3970,1,c	;volatile
  7140                           
  7141                           ;main.c: 467: PORTCbits.RC2 = 1;
  7142  002612  8482               	bsf	3970,2,c	;volatile
  7143                           
  7144                           ;main.c: 468: PORTCbits.RC5 = 1;
  7145  002614  8A82               	bsf	3970,5,c	;volatile
  7146                           
  7147                           ;main.c: 469: _delay((unsigned long)((5)*(10000000/4000.0)));
  7148  002616  0E11               	movlw	17
  7149  002618  6E13               	movwf	??_stepper& (0+255),c
  7150  00261A  0E3A               	movlw	58
  7151  00261C                     u3967:
  7152  00261C  2EE8               	decfsz	wreg,f,c
  7153  00261E  D7FE               	bra	u3967
  7154  002620  2E13               	decfsz	??_stepper& (0+255),f,c
  7155  002622  D7FC               	bra	u3967
  7156  002624  D000               	nop2	
  7157                           
  7158                           ;main.c: 470: PORTCbits.RC0 = 1;
  7159  002626  8082               	bsf	3970,0,c	;volatile
  7160                           
  7161                           ;main.c: 471: PORTCbits.RC1 = 0;
  7162  002628  9282               	bcf	3970,1,c	;volatile
  7163                           
  7164                           ;main.c: 472: PORTCbits.RC2 = 0;
  7165  00262A  9482               	bcf	3970,2,c	;volatile
  7166                           
  7167                           ;main.c: 473: PORTCbits.RC5 = 1;
  7168  00262C  8A82               	bsf	3970,5,c	;volatile
  7169                           
  7170                           ;main.c: 474: _delay((unsigned long)((5)*(10000000/4000.0)));
  7171  00262E  0E11               	movlw	17
  7172  002630  6E13               	movwf	??_stepper& (0+255),c
  7173  002632  0E3A               	movlw	58
  7174  002634                     u3977:
  7175  002634  2EE8               	decfsz	wreg,f,c
  7176  002636  D7FE               	bra	u3977
  7177  002638  2E13               	decfsz	??_stepper& (0+255),f,c
  7178  00263A  D7FC               	bra	u3977
  7179  00263C  D000               	nop2	
  7180  00263E  4A14               	infsnz	stepper@i,f,c
  7181  002640  2A15               	incf	stepper@i+1,f,c
  7182  002642                     l227:
  7183  002642  5011               	movf	stepper@r,w,c
  7184  002644  5C14               	subwf	stepper@i,w,c
  7185  002646  5015               	movf	stepper@i+1,w,c
  7186  002648  0A80               	xorlw	128
  7187  00264A  6E13               	movwf	??_stepper& (0+255),c
  7188  00264C  5012               	movf	stepper@r+1,w,c
  7189  00264E  0A80               	xorlw	128
  7190  002650  5813               	subwfb	??_stepper& (0+255),w,c
  7191  002652  B0D8               	btfsc	status,0,c
  7192  002654  0012               	return	
  7193  002656  D7C3               	goto	l228
  7194  002658                     __end_of_stepper:
  7195                           	opt stack 0
  7196                           tblptru	equ	0xFF8
  7197                           tblptrh	equ	0xFF7
  7198                           tblptrl	equ	0xFF6
  7199                           tablat	equ	0xFF5
  7200                           prodh	equ	0xFF4
  7201                           prodl	equ	0xFF3
  7202                           intcon	equ	0xFF2
  7203                           intcon2	equ	0xFF1
  7204                           intcon3	equ	0xFF0
  7205                           postinc0	equ	0xFEE
  7206                           wreg	equ	0xFE8
  7207                           postdec1	equ	0xFE5
  7208                           fsr1l	equ	0xFE1
  7209                           indf2	equ	0xFDF
  7210                           postinc2	equ	0xFDE
  7211                           postdec2	equ	0xFDD
  7212                           fsr2h	equ	0xFDA
  7213                           fsr2l	equ	0xFD9
  7214                           status	equ	0xFD8
  7215                           
  7216 ;; *************** function _read_colorsensor2 *****************
  7217 ;; Defined at:
  7218 ;;		line 572 in file "main.c"
  7219 ;; Parameters:    Size  Location     Type
  7220 ;;  red             2   19[COMRAM] PTR unsigned char 
  7221 ;;		 -> init_operation@red(2), 
  7222 ;;  green           2   21[COMRAM] PTR unsigned char 
  7223 ;;		 -> init_operation@green(2), 
  7224 ;;  blue            2   23[COMRAM] PTR unsigned char 
  7225 ;;		 -> init_operation@blue(2), 
  7226 ;;  clear           2   25[COMRAM] PTR unsigned char 
  7227 ;;		 -> init_operation@clear(2), 
  7228 ;; Auto vars:     Size  Location     Type
  7229 ;;		None
  7230 ;; Return value:  Size  Location     Type
  7231 ;;                  1    wreg      void 
  7232 ;; Registers used:
  7233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7234 ;; Tracked objects:
  7235 ;;		On entry : 0/0
  7236 ;;		On exit  : 0/0
  7237 ;;		Unchanged: 0/0
  7238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7239 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7242 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7243 ;;Total ram usage:        8 bytes
  7244 ;; Hardware stack levels used:    1
  7245 ;; Hardware stack levels required when called:    3
  7246 ;; This function calls:
  7247 ;;		_I2C_Master_Read
  7248 ;;		_I2C_Master_Start
  7249 ;;		_I2C_Master_Stop
  7250 ;;		_I2C_Master_Write
  7251 ;; This function is called by:
  7252 ;;		_init_operation
  7253 ;; This function uses a non-reentrant model
  7254 ;;
  7255                           
  7256                           	psect	text29
  7257  001982                     __ptext29:
  7258                           	opt stack 0
  7259  001982                     _read_colorsensor2:
  7260                           	opt stack 26
  7261                           
  7262                           ;main.c: 574: I2C_Master_Start();
  7263                           
  7264                           ;incstack = 0
  7265  001982  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  7266                           
  7267                           ;main.c: 575: I2C_Master_Write(0b11100000);
  7268  001986  0E00               	movlw	0
  7269  001988  6E13               	movwf	I2C_Master_Write@d+1,c
  7270  00198A  0EE0               	movlw	224
  7271  00198C  6E12               	movwf	I2C_Master_Write@d,c
  7272  00198E  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7273                           
  7274                           ;main.c: 576: I2C_Master_Write(0b10000000);
  7275  001992  0E00               	movlw	0
  7276  001994  6E13               	movwf	I2C_Master_Write@d+1,c
  7277  001996  0E80               	movlw	128
  7278  001998  6E12               	movwf	I2C_Master_Write@d,c
  7279  00199A  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7280                           
  7281                           ;main.c: 577: I2C_Master_Write(0b00000100);
  7282  00199E  0E00               	movlw	0
  7283  0019A0  6E13               	movwf	I2C_Master_Write@d+1,c
  7284  0019A2  0E04               	movlw	4
  7285  0019A4  6E12               	movwf	I2C_Master_Write@d,c
  7286  0019A6  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7287                           
  7288                           ;main.c: 578: I2C_Master_Stop();
  7289  0019AA  ECF0  F015         	call	_I2C_Master_Stop	;wreg free
  7290                           
  7291                           ;main.c: 581: I2C_Master_Start();
  7292  0019AE  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  7293                           
  7294                           ;main.c: 582: I2C_Master_Write(0b01010010);
  7295  0019B2  0E00               	movlw	0
  7296  0019B4  6E13               	movwf	I2C_Master_Write@d+1,c
  7297  0019B6  0E52               	movlw	82
  7298  0019B8  6E12               	movwf	I2C_Master_Write@d,c
  7299  0019BA  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7300                           
  7301                           ;main.c: 583: I2C_Master_Write(0b10000000);
  7302  0019BE  0E00               	movlw	0
  7303  0019C0  6E13               	movwf	I2C_Master_Write@d+1,c
  7304  0019C2  0E80               	movlw	128
  7305  0019C4  6E12               	movwf	I2C_Master_Write@d,c
  7306  0019C6  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7307                           
  7308                           ;main.c: 584: I2C_Master_Write(0b00000011);
  7309  0019CA  0E00               	movlw	0
  7310  0019CC  6E13               	movwf	I2C_Master_Write@d+1,c
  7311  0019CE  0E03               	movlw	3
  7312  0019D0  6E12               	movwf	I2C_Master_Write@d,c
  7313  0019D2  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7314                           
  7315                           ;main.c: 585: I2C_Master_Stop();
  7316  0019D6  ECF0  F015         	call	_I2C_Master_Stop	;wreg free
  7317                           
  7318                           ;main.c: 588: I2C_Master_Start();
  7319  0019DA  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  7320                           
  7321                           ;main.c: 589: I2C_Master_Write(0b01010010);
  7322  0019DE  0E00               	movlw	0
  7323  0019E0  6E13               	movwf	I2C_Master_Write@d+1,c
  7324  0019E2  0E52               	movlw	82
  7325  0019E4  6E12               	movwf	I2C_Master_Write@d,c
  7326  0019E6  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7327                           
  7328                           ;main.c: 590: I2C_Master_Write(0b10110100);
  7329  0019EA  0E00               	movlw	0
  7330  0019EC  6E13               	movwf	I2C_Master_Write@d+1,c
  7331  0019EE  0EB4               	movlw	180
  7332  0019F0  6E12               	movwf	I2C_Master_Write@d,c
  7333  0019F2  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7334                           
  7335                           ;main.c: 591: I2C_Master_Start();
  7336  0019F6  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  7337                           
  7338                           ;main.c: 592: I2C_Master_Write(0b01010011);
  7339  0019FA  0E00               	movlw	0
  7340  0019FC  6E13               	movwf	I2C_Master_Write@d+1,c
  7341  0019FE  0E53               	movlw	83
  7342  001A00  6E12               	movwf	I2C_Master_Write@d,c
  7343  001A02  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7344                           
  7345                           ;main.c: 594: clear[1] = I2C_Master_Read(1);
  7346  001A06  EE20 F001          	lfsr	2,1
  7347  001A0A  501A               	movf	read_colorsensor2@clear,w,c
  7348  001A0C  26D9               	addwf	fsr2l,f,c
  7349  001A0E  501B               	movf	read_colorsensor2@clear+1,w,c
  7350  001A10  22DA               	addwfc	fsr2h,f,c
  7351  001A12  0E01               	movlw	1
  7352  001A14  EC87  F015         	call	_I2C_Master_Read
  7353  001A18  6EDF               	movwf	indf2,c
  7354                           
  7355                           ;main.c: 595: clear[0] = I2C_Master_Read(1);
  7356  001A1A  0E01               	movlw	1
  7357  001A1C  EC87  F015         	call	_I2C_Master_Read
  7358  001A20  C01A  FFD9         	movff	read_colorsensor2@clear,fsr2l
  7359  001A24  C01B  FFDA         	movff	read_colorsensor2@clear+1,fsr2h
  7360  001A28  6EDF               	movwf	indf2,c
  7361                           
  7362                           ;main.c: 597: red[1] = I2C_Master_Read(1);
  7363  001A2A  EE20 F001          	lfsr	2,1
  7364  001A2E  5014               	movf	read_colorsensor2@red,w,c
  7365  001A30  26D9               	addwf	fsr2l,f,c
  7366  001A32  5015               	movf	read_colorsensor2@red+1,w,c
  7367  001A34  22DA               	addwfc	fsr2h,f,c
  7368  001A36  0E01               	movlw	1
  7369  001A38  EC87  F015         	call	_I2C_Master_Read
  7370  001A3C  6EDF               	movwf	indf2,c
  7371                           
  7372                           ;main.c: 598: red[0] = I2C_Master_Read(1);
  7373  001A3E  0E01               	movlw	1
  7374  001A40  EC87  F015         	call	_I2C_Master_Read
  7375  001A44  C014  FFD9         	movff	read_colorsensor2@red,fsr2l
  7376  001A48  C015  FFDA         	movff	read_colorsensor2@red+1,fsr2h
  7377  001A4C  6EDF               	movwf	indf2,c
  7378                           
  7379                           ;main.c: 600: green[1] = I2C_Master_Read(1);
  7380  001A4E  EE20 F001          	lfsr	2,1
  7381  001A52  5016               	movf	read_colorsensor2@green,w,c
  7382  001A54  26D9               	addwf	fsr2l,f,c
  7383  001A56  5017               	movf	read_colorsensor2@green+1,w,c
  7384  001A58  22DA               	addwfc	fsr2h,f,c
  7385  001A5A  0E01               	movlw	1
  7386  001A5C  EC87  F015         	call	_I2C_Master_Read
  7387  001A60  6EDF               	movwf	indf2,c
  7388                           
  7389                           ;main.c: 601: green[0] = I2C_Master_Read(1);
  7390  001A62  0E01               	movlw	1
  7391  001A64  EC87  F015         	call	_I2C_Master_Read
  7392  001A68  C016  FFD9         	movff	read_colorsensor2@green,fsr2l
  7393  001A6C  C017  FFDA         	movff	read_colorsensor2@green+1,fsr2h
  7394  001A70  6EDF               	movwf	indf2,c
  7395                           
  7396                           ;main.c: 603: blue[1] = I2C_Master_Read(1);
  7397  001A72  EE20 F001          	lfsr	2,1
  7398  001A76  5018               	movf	read_colorsensor2@blue,w,c
  7399  001A78  26D9               	addwf	fsr2l,f,c
  7400  001A7A  5019               	movf	read_colorsensor2@blue+1,w,c
  7401  001A7C  22DA               	addwfc	fsr2h,f,c
  7402  001A7E  0E01               	movlw	1
  7403  001A80  EC87  F015         	call	_I2C_Master_Read
  7404  001A84  6EDF               	movwf	indf2,c
  7405                           
  7406                           ;main.c: 604: blue[0] = I2C_Master_Read(0);
  7407  001A86  0E00               	movlw	0
  7408  001A88  EC87  F015         	call	_I2C_Master_Read
  7409  001A8C  C018  FFD9         	movff	read_colorsensor2@blue,fsr2l
  7410  001A90  C019  FFDA         	movff	read_colorsensor2@blue+1,fsr2h
  7411  001A94  6EDF               	movwf	indf2,c
  7412                           
  7413                           ;main.c: 606: I2C_Master_Stop();
  7414  001A96  ECF0  F015         	call	_I2C_Master_Stop	;wreg free
  7415  001A9A  0012               	return		;funcret
  7416  001A9C                     __end_of_read_colorsensor2:
  7417                           	opt stack 0
  7418                           tblptru	equ	0xFF8
  7419                           tblptrh	equ	0xFF7
  7420                           tblptrl	equ	0xFF6
  7421                           tablat	equ	0xFF5
  7422                           prodh	equ	0xFF4
  7423                           prodl	equ	0xFF3
  7424                           intcon	equ	0xFF2
  7425                           intcon2	equ	0xFF1
  7426                           intcon3	equ	0xFF0
  7427                           postinc0	equ	0xFEE
  7428                           wreg	equ	0xFE8
  7429                           postdec1	equ	0xFE5
  7430                           fsr1l	equ	0xFE1
  7431                           indf2	equ	0xFDF
  7432                           postinc2	equ	0xFDE
  7433                           postdec2	equ	0xFDD
  7434                           fsr2h	equ	0xFDA
  7435                           fsr2l	equ	0xFD9
  7436                           status	equ	0xFD8
  7437                           
  7438 ;; *************** function _read_colorsensor1 *****************
  7439 ;; Defined at:
  7440 ;;		line 534 in file "main.c"
  7441 ;; Parameters:    Size  Location     Type
  7442 ;;  red             2   19[COMRAM] PTR unsigned char 
  7443 ;;		 -> init_operation@red(2), 
  7444 ;;  green           2   21[COMRAM] PTR unsigned char 
  7445 ;;		 -> init_operation@green(2), 
  7446 ;;  blue            2   23[COMRAM] PTR unsigned char 
  7447 ;;		 -> init_operation@blue(2), 
  7448 ;;  clear           2   25[COMRAM] PTR unsigned char 
  7449 ;;		 -> init_operation@clear(2), 
  7450 ;; Auto vars:     Size  Location     Type
  7451 ;;		None
  7452 ;; Return value:  Size  Location     Type
  7453 ;;                  1    wreg      void 
  7454 ;; Registers used:
  7455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7456 ;; Tracked objects:
  7457 ;;		On entry : 0/0
  7458 ;;		On exit  : 0/0
  7459 ;;		Unchanged: 0/0
  7460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7461 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7465 ;;Total ram usage:        8 bytes
  7466 ;; Hardware stack levels used:    1
  7467 ;; Hardware stack levels required when called:    3
  7468 ;; This function calls:
  7469 ;;		_I2C_Master_Read
  7470 ;;		_I2C_Master_Start
  7471 ;;		_I2C_Master_Stop
  7472 ;;		_I2C_Master_Write
  7473 ;; This function is called by:
  7474 ;;		_init_operation
  7475 ;; This function uses a non-reentrant model
  7476 ;;
  7477                           
  7478                           	psect	text30
  7479  001A9C                     __ptext30:
  7480                           	opt stack 0
  7481  001A9C                     _read_colorsensor1:
  7482                           	opt stack 26
  7483                           
  7484                           ;main.c: 536: I2C_Master_Start();
  7485                           
  7486                           ;incstack = 0
  7487  001A9C  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  7488                           
  7489                           ;main.c: 537: I2C_Master_Write(0b11100000);
  7490  001AA0  0E00               	movlw	0
  7491  001AA2  6E13               	movwf	I2C_Master_Write@d+1,c
  7492  001AA4  0EE0               	movlw	224
  7493  001AA6  6E12               	movwf	I2C_Master_Write@d,c
  7494  001AA8  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7495                           
  7496                           ;main.c: 538: I2C_Master_Write(0b10000000);
  7497  001AAC  0E00               	movlw	0
  7498  001AAE  6E13               	movwf	I2C_Master_Write@d+1,c
  7499  001AB0  0E80               	movlw	128
  7500  001AB2  6E12               	movwf	I2C_Master_Write@d,c
  7501  001AB4  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7502                           
  7503                           ;main.c: 539: I2C_Master_Write(0b10000000);
  7504  001AB8  0E00               	movlw	0
  7505  001ABA  6E13               	movwf	I2C_Master_Write@d+1,c
  7506  001ABC  0E80               	movlw	128
  7507  001ABE  6E12               	movwf	I2C_Master_Write@d,c
  7508  001AC0  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7509                           
  7510                           ;main.c: 540: I2C_Master_Stop();
  7511  001AC4  ECF0  F015         	call	_I2C_Master_Stop	;wreg free
  7512                           
  7513                           ;main.c: 543: I2C_Master_Start();
  7514  001AC8  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  7515                           
  7516                           ;main.c: 544: I2C_Master_Write(0b01010010);
  7517  001ACC  0E00               	movlw	0
  7518  001ACE  6E13               	movwf	I2C_Master_Write@d+1,c
  7519  001AD0  0E52               	movlw	82
  7520  001AD2  6E12               	movwf	I2C_Master_Write@d,c
  7521  001AD4  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7522                           
  7523                           ;main.c: 545: I2C_Master_Write(0b10000000);
  7524  001AD8  0E00               	movlw	0
  7525  001ADA  6E13               	movwf	I2C_Master_Write@d+1,c
  7526  001ADC  0E80               	movlw	128
  7527  001ADE  6E12               	movwf	I2C_Master_Write@d,c
  7528  001AE0  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7529                           
  7530                           ;main.c: 546: I2C_Master_Write(0b00000011);
  7531  001AE4  0E00               	movlw	0
  7532  001AE6  6E13               	movwf	I2C_Master_Write@d+1,c
  7533  001AE8  0E03               	movlw	3
  7534  001AEA  6E12               	movwf	I2C_Master_Write@d,c
  7535  001AEC  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7536                           
  7537                           ;main.c: 547: I2C_Master_Stop();
  7538  001AF0  ECF0  F015         	call	_I2C_Master_Stop	;wreg free
  7539                           
  7540                           ;main.c: 550: I2C_Master_Start();
  7541  001AF4  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  7542                           
  7543                           ;main.c: 551: I2C_Master_Write(0b01010010);
  7544  001AF8  0E00               	movlw	0
  7545  001AFA  6E13               	movwf	I2C_Master_Write@d+1,c
  7546  001AFC  0E52               	movlw	82
  7547  001AFE  6E12               	movwf	I2C_Master_Write@d,c
  7548  001B00  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7549                           
  7550                           ;main.c: 552: I2C_Master_Write(0b10110100);
  7551  001B04  0E00               	movlw	0
  7552  001B06  6E13               	movwf	I2C_Master_Write@d+1,c
  7553  001B08  0EB4               	movlw	180
  7554  001B0A  6E12               	movwf	I2C_Master_Write@d,c
  7555  001B0C  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7556                           
  7557                           ;main.c: 553: I2C_Master_Start();
  7558  001B10  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  7559                           
  7560                           ;main.c: 554: I2C_Master_Write(0b01010011);
  7561  001B14  0E00               	movlw	0
  7562  001B16  6E13               	movwf	I2C_Master_Write@d+1,c
  7563  001B18  0E53               	movlw	83
  7564  001B1A  6E12               	movwf	I2C_Master_Write@d,c
  7565  001B1C  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7566                           
  7567                           ;main.c: 556: clear[1] = I2C_Master_Read(1);
  7568  001B20  EE20 F001          	lfsr	2,1
  7569  001B24  501A               	movf	read_colorsensor1@clear,w,c
  7570  001B26  26D9               	addwf	fsr2l,f,c
  7571  001B28  501B               	movf	read_colorsensor1@clear+1,w,c
  7572  001B2A  22DA               	addwfc	fsr2h,f,c
  7573  001B2C  0E01               	movlw	1
  7574  001B2E  EC87  F015         	call	_I2C_Master_Read
  7575  001B32  6EDF               	movwf	indf2,c
  7576                           
  7577                           ;main.c: 557: clear[0] = I2C_Master_Read(1);
  7578  001B34  0E01               	movlw	1
  7579  001B36  EC87  F015         	call	_I2C_Master_Read
  7580  001B3A  C01A  FFD9         	movff	read_colorsensor1@clear,fsr2l
  7581  001B3E  C01B  FFDA         	movff	read_colorsensor1@clear+1,fsr2h
  7582  001B42  6EDF               	movwf	indf2,c
  7583                           
  7584                           ;main.c: 559: red[1] = I2C_Master_Read(1);
  7585  001B44  EE20 F001          	lfsr	2,1
  7586  001B48  5014               	movf	read_colorsensor1@red,w,c
  7587  001B4A  26D9               	addwf	fsr2l,f,c
  7588  001B4C  5015               	movf	read_colorsensor1@red+1,w,c
  7589  001B4E  22DA               	addwfc	fsr2h,f,c
  7590  001B50  0E01               	movlw	1
  7591  001B52  EC87  F015         	call	_I2C_Master_Read
  7592  001B56  6EDF               	movwf	indf2,c
  7593                           
  7594                           ;main.c: 560: red[0] = I2C_Master_Read(1);
  7595  001B58  0E01               	movlw	1
  7596  001B5A  EC87  F015         	call	_I2C_Master_Read
  7597  001B5E  C014  FFD9         	movff	read_colorsensor1@red,fsr2l
  7598  001B62  C015  FFDA         	movff	read_colorsensor1@red+1,fsr2h
  7599  001B66  6EDF               	movwf	indf2,c
  7600                           
  7601                           ;main.c: 562: green[1] = I2C_Master_Read(1);
  7602  001B68  EE20 F001          	lfsr	2,1
  7603  001B6C  5016               	movf	read_colorsensor1@green,w,c
  7604  001B6E  26D9               	addwf	fsr2l,f,c
  7605  001B70  5017               	movf	read_colorsensor1@green+1,w,c
  7606  001B72  22DA               	addwfc	fsr2h,f,c
  7607  001B74  0E01               	movlw	1
  7608  001B76  EC87  F015         	call	_I2C_Master_Read
  7609  001B7A  6EDF               	movwf	indf2,c
  7610                           
  7611                           ;main.c: 563: green[0] = I2C_Master_Read(1);
  7612  001B7C  0E01               	movlw	1
  7613  001B7E  EC87  F015         	call	_I2C_Master_Read
  7614  001B82  C016  FFD9         	movff	read_colorsensor1@green,fsr2l
  7615  001B86  C017  FFDA         	movff	read_colorsensor1@green+1,fsr2h
  7616  001B8A  6EDF               	movwf	indf2,c
  7617                           
  7618                           ;main.c: 565: blue[1] = I2C_Master_Read(1);
  7619  001B8C  EE20 F001          	lfsr	2,1
  7620  001B90  5018               	movf	read_colorsensor1@blue,w,c
  7621  001B92  26D9               	addwf	fsr2l,f,c
  7622  001B94  5019               	movf	read_colorsensor1@blue+1,w,c
  7623  001B96  22DA               	addwfc	fsr2h,f,c
  7624  001B98  0E01               	movlw	1
  7625  001B9A  EC87  F015         	call	_I2C_Master_Read
  7626  001B9E  6EDF               	movwf	indf2,c
  7627                           
  7628                           ;main.c: 566: blue[0] = I2C_Master_Read(0);
  7629  001BA0  0E00               	movlw	0
  7630  001BA2  EC87  F015         	call	_I2C_Master_Read
  7631  001BA6  C018  FFD9         	movff	read_colorsensor1@blue,fsr2l
  7632  001BAA  C019  FFDA         	movff	read_colorsensor1@blue+1,fsr2h
  7633  001BAE  6EDF               	movwf	indf2,c
  7634                           
  7635                           ;main.c: 568: I2C_Master_Stop();
  7636  001BB0  ECF0  F015         	call	_I2C_Master_Stop	;wreg free
  7637  001BB4  0012               	return		;funcret
  7638  001BB6                     __end_of_read_colorsensor1:
  7639                           	opt stack 0
  7640                           tblptru	equ	0xFF8
  7641                           tblptrh	equ	0xFF7
  7642                           tblptrl	equ	0xFF6
  7643                           tablat	equ	0xFF5
  7644                           prodh	equ	0xFF4
  7645                           prodl	equ	0xFF3
  7646                           intcon	equ	0xFF2
  7647                           intcon2	equ	0xFF1
  7648                           intcon3	equ	0xFF0
  7649                           postinc0	equ	0xFEE
  7650                           wreg	equ	0xFE8
  7651                           postdec1	equ	0xFE5
  7652                           fsr1l	equ	0xFE1
  7653                           indf2	equ	0xFDF
  7654                           postinc2	equ	0xFDE
  7655                           postdec2	equ	0xFDD
  7656                           fsr2h	equ	0xFDA
  7657                           fsr2l	equ	0xFD9
  7658                           status	equ	0xFD8
  7659                           
  7660 ;; *************** function _initLCD *****************
  7661 ;; Defined at:
  7662 ;;		line 14 in file "lcd.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;		None
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;		None
  7667 ;; Return value:  Size  Location     Type
  7668 ;;                  1    wreg      void 
  7669 ;; Registers used:
  7670 ;;		wreg, status,2, status,0, cstack
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7678 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7679 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7680 ;;Total ram usage:        1 bytes
  7681 ;; Hardware stack levels used:    1
  7682 ;; Hardware stack levels required when called:    3
  7683 ;; This function calls:
  7684 ;;		_lcdInst
  7685 ;; This function is called by:
  7686 ;;		_main
  7687 ;;		_init_operation
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           	psect	text31
  7692  0029D4                     __ptext31:
  7693                           	opt stack 0
  7694  0029D4                     _initLCD:
  7695                           	opt stack 26
  7696                           
  7697                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  7698                           
  7699                           ;incstack = 0
  7700  0029D4  0E31               	movlw	49
  7701  0029D6  6E14               	movwf	??_initLCD& (0+255),c
  7702  0029D8  0EB2               	movlw	178
  7703  0029DA                     u3987:
  7704  0029DA  2EE8               	decfsz	wreg,f,c
  7705  0029DC  D7FE               	bra	u3987
  7706  0029DE  2E14               	decfsz	??_initLCD& (0+255),f,c
  7707  0029E0  D7FC               	bra	u3987
  7708  0029E2  D000               	nop2	
  7709                           
  7710                           ;lcd.c: 16: lcdInst(0b00110011);
  7711  0029E4  0E33               	movlw	51
  7712  0029E6  ECE5  F015         	call	_lcdInst
  7713                           
  7714                           ;lcd.c: 17: lcdInst(0b00110010);
  7715  0029EA  0E32               	movlw	50
  7716  0029EC  ECE5  F015         	call	_lcdInst
  7717                           
  7718                           ;lcd.c: 18: lcdInst(0b00101000);
  7719  0029F0  0E28               	movlw	40
  7720  0029F2  ECE5  F015         	call	_lcdInst
  7721                           
  7722                           ;lcd.c: 19: lcdInst(0b00001111);
  7723  0029F6  0E0F               	movlw	15
  7724  0029F8  ECE5  F015         	call	_lcdInst
  7725                           
  7726                           ;lcd.c: 20: lcdInst(0b00000110);
  7727  0029FC  0E06               	movlw	6
  7728  0029FE  ECE5  F015         	call	_lcdInst
  7729                           
  7730                           ;lcd.c: 21: lcdInst(0b00000001);
  7731  002A02  0E01               	movlw	1
  7732  002A04  ECE5  F015         	call	_lcdInst
  7733                           
  7734                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  7735  002A08  0E31               	movlw	49
  7736  002A0A  6E14               	movwf	??_initLCD& (0+255),c
  7737  002A0C  0EB2               	movlw	178
  7738  002A0E                     u3997:
  7739  002A0E  2EE8               	decfsz	wreg,f,c
  7740  002A10  D7FE               	bra	u3997
  7741  002A12  2E14               	decfsz	??_initLCD& (0+255),f,c
  7742  002A14  D7FC               	bra	u3997
  7743  002A16  D000               	nop2	
  7744  002A18  0012               	return		;funcret
  7745  002A1A                     __end_of_initLCD:
  7746                           	opt stack 0
  7747                           tblptru	equ	0xFF8
  7748                           tblptrh	equ	0xFF7
  7749                           tblptrl	equ	0xFF6
  7750                           tablat	equ	0xFF5
  7751                           prodh	equ	0xFF4
  7752                           prodl	equ	0xFF3
  7753                           intcon	equ	0xFF2
  7754                           intcon2	equ	0xFF1
  7755                           intcon3	equ	0xFF0
  7756                           postinc0	equ	0xFEE
  7757                           wreg	equ	0xFE8
  7758                           postdec1	equ	0xFE5
  7759                           fsr1l	equ	0xFE1
  7760                           indf2	equ	0xFDF
  7761                           postinc2	equ	0xFDE
  7762                           postdec2	equ	0xFDD
  7763                           fsr2h	equ	0xFDA
  7764                           fsr2l	equ	0xFD9
  7765                           status	equ	0xFD8
  7766                           
  7767 ;; *************** function _date_time *****************
  7768 ;; Defined at:
  7769 ;;		line 411 in file "main.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;  time            2   69[BANK0 ] PTR unsigned char 
  7772 ;;		 -> main@time(7), 
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  i               1  107[COMRAM] unsigned char 
  7775 ;; Return value:  Size  Location     Type
  7776 ;;                  1    wreg      void 
  7777 ;; Registers used:
  7778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7779 ;; Tracked objects:
  7780 ;;		On entry : 0/0
  7781 ;;		On exit  : 0/0
  7782 ;;		Unchanged: 0/0
  7783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7784 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7785 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7787 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7788 ;;Total ram usage:        6 bytes
  7789 ;; Hardware stack levels used:    1
  7790 ;; Hardware stack levels required when called:    4
  7791 ;; This function calls:
  7792 ;;		_I2C_Master_Read
  7793 ;;		_I2C_Master_Start
  7794 ;;		_I2C_Master_Stop
  7795 ;;		_I2C_Master_Write
  7796 ;;		_lcdInst
  7797 ;;		_printf
  7798 ;; This function is called by:
  7799 ;;		_main
  7800 ;; This function uses a non-reentrant model
  7801 ;;
  7802                           
  7803                           	psect	text32
  7804  001716                     __ptext32:
  7805                           	opt stack 0
  7806  001716                     _date_time:
  7807                           	opt stack 26
  7808                           
  7809                           ;main.c: 413: I2C_Master_Start();
  7810                           
  7811                           ;incstack = 0
  7812  001716  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  7813                           
  7814                           ;main.c: 414: I2C_Master_Write(0b11010000);
  7815  00171A  0E00               	movlw	0
  7816  00171C  6E13               	movwf	I2C_Master_Write@d+1,c
  7817  00171E  0ED0               	movlw	208
  7818  001720  6E12               	movwf	I2C_Master_Write@d,c
  7819  001722  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7820                           
  7821                           ;main.c: 415: I2C_Master_Write(0x00);
  7822  001726  0E00               	movlw	0
  7823  001728  6E13               	movwf	I2C_Master_Write@d+1,c
  7824  00172A  0E00               	movlw	0
  7825  00172C  6E12               	movwf	I2C_Master_Write@d,c
  7826  00172E  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7827                           
  7828                           ;main.c: 416: I2C_Master_Stop();
  7829  001732  ECF0  F015         	call	_I2C_Master_Stop	;wreg free
  7830                           
  7831                           ;main.c: 419: I2C_Master_Start();
  7832  001736  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  7833                           
  7834                           ;main.c: 420: I2C_Master_Write(0b11010001);
  7835  00173A  0E00               	movlw	0
  7836  00173C  6E13               	movwf	I2C_Master_Write@d+1,c
  7837  00173E  0ED1               	movlw	209
  7838  001740  6E12               	movwf	I2C_Master_Write@d,c
  7839  001742  ECEB  F015         	call	_I2C_Master_Write	;wreg free
  7840                           
  7841                           ;main.c: 421: for(unsigned char i=0;i<0x06;i++){
  7842  001746  0E00               	movlw	0
  7843  001748  6E6C               	movwf	date_time@i,c
  7844  00174A                     l3948:
  7845  00174A  0E05               	movlw	5
  7846  00174C  646C               	cpfsgt	date_time@i,c
  7847  00174E  D001               	goto	l3952
  7848  001750  D010               	goto	l3958
  7849  001752                     l3952:
  7850                           
  7851                           ;main.c: 422: time[i] = I2C_Master_Read(1);
  7852  001752  506C               	movf	date_time@i,w,c
  7853  001754  0D01               	mullw	1
  7854  001756  50F3               	movf	prodl,w,c
  7855  001758  0100               	movlb	0	; () banked
  7856  00175A  25C5               	addwf	date_time@time& (0+255),w,b
  7857  00175C  6ED9               	movwf	fsr2l,c
  7858  00175E  50F4               	movf	prodh,w,c
  7859  001760  0100               	movlb	0	; () banked
  7860  001762  21C6               	addwfc	(date_time@time+1)& (0+255),w,b
  7861  001764  6EDA               	movwf	fsr2h,c
  7862  001766  0E01               	movlw	1
  7863  001768  EC87  F015         	call	_I2C_Master_Read
  7864  00176C  6EDF               	movwf	indf2,c
  7865  00176E  2A6C               	incf	date_time@i,f,c
  7866  001770  D7EC               	goto	l3948
  7867  001772                     l3958:
  7868                           
  7869                           ;main.c: 423: }
  7870                           ;main.c: 424: time[6] = I2C_Master_Read(0);
  7871  001772  0100               	movlb	0	; () banked
  7872  001774  EE20 F006          	lfsr	2,6
  7873  001778  51C5               	movf	date_time@time& (0+255),w,b
  7874  00177A  26D9               	addwf	fsr2l,f,c
  7875  00177C  51C6               	movf	(date_time@time+1)& (0+255),w,b
  7876  00177E  22DA               	addwfc	fsr2h,f,c
  7877  001780  0E00               	movlw	0
  7878  001782  EC87  F015         	call	_I2C_Master_Read
  7879  001786  6EDF               	movwf	indf2,c
  7880                           
  7881                           ;main.c: 425: I2C_Master_Stop();
  7882  001788  ECF0  F015         	call	_I2C_Master_Stop	;wreg free
  7883                           
  7884                           ;main.c: 428: lcdInst(0b10000000);;
  7885  00178C  0E80               	movlw	128
  7886  00178E  ECE5  F015         	call	_lcdInst
  7887                           
  7888                           ;main.c: 429: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  7889  001792  0E03               	movlw	low STR_18
  7890  001794  0100               	movlb	0	; () banked
  7891  001796  6FAF               	movwf	printf@f& (0+255),b
  7892  001798  0EFF               	movlw	high STR_18
  7893  00179A  0100               	movlb	0	; () banked
  7894  00179C  6FB0               	movwf	(printf@f+1)& (0+255),b
  7895  00179E  0100               	movlb	0	; () banked
  7896  0017A0  EE20 F005          	lfsr	2,5
  7897  0017A4  51C5               	movf	date_time@time& (0+255),w,b
  7898  0017A6  26D9               	addwf	fsr2l,f,c
  7899  0017A8  51C6               	movf	(date_time@time+1)& (0+255),w,b
  7900  0017AA  22DA               	addwfc	fsr2h,f,c
  7901  0017AC  50DF               	movf	indf2,w,c
  7902  0017AE  0100               	movlb	0	; () banked
  7903  0017B0  6FC7               	movwf	??_date_time& (0+255),b
  7904  0017B2  0100               	movlb	0	; () banked
  7905  0017B4  51C7               	movf	??_date_time& (0+255),w,b
  7906  0017B6  0100               	movlb	0	; () banked
  7907  0017B8  6FB1               	movwf	(?_printf+2)& (0+255),b
  7908  0017BA  6BB2               	clrf	(?_printf+3)& (0+255),b
  7909  0017BC  0100               	movlb	0	; () banked
  7910  0017BE  EE20 F004          	lfsr	2,4
  7911  0017C2  51C5               	movf	date_time@time& (0+255),w,b
  7912  0017C4  26D9               	addwf	fsr2l,f,c
  7913  0017C6  51C6               	movf	(date_time@time+1)& (0+255),w,b
  7914  0017C8  22DA               	addwfc	fsr2h,f,c
  7915  0017CA  50DF               	movf	indf2,w,c
  7916  0017CC  0100               	movlb	0	; () banked
  7917  0017CE  6FC8               	movwf	(??_date_time+1)& (0+255),b
  7918  0017D0  0100               	movlb	0	; () banked
  7919  0017D2  51C8               	movf	(??_date_time+1)& (0+255),w,b
  7920  0017D4  0100               	movlb	0	; () banked
  7921  0017D6  6FB3               	movwf	(?_printf+4)& (0+255),b
  7922  0017D8  6BB4               	clrf	(?_printf+5)& (0+255),b
  7923  0017DA  0100               	movlb	0	; () banked
  7924  0017DC  EE20 F006          	lfsr	2,6
  7925  0017E0  51C5               	movf	date_time@time& (0+255),w,b
  7926  0017E2  26D9               	addwf	fsr2l,f,c
  7927  0017E4  51C6               	movf	(date_time@time+1)& (0+255),w,b
  7928  0017E6  22DA               	addwfc	fsr2h,f,c
  7929  0017E8  50DF               	movf	indf2,w,c
  7930  0017EA  0100               	movlb	0	; () banked
  7931  0017EC  6FC9               	movwf	(??_date_time+2)& (0+255),b
  7932  0017EE  0100               	movlb	0	; () banked
  7933  0017F0  51C9               	movf	(??_date_time+2)& (0+255),w,b
  7934  0017F2  0100               	movlb	0	; () banked
  7935  0017F4  6FB5               	movwf	(?_printf+6)& (0+255),b
  7936  0017F6  6BB6               	clrf	(?_printf+7)& (0+255),b
  7937  0017F8  ECC6  F003         	call	_printf	;wreg free
  7938                           
  7939                           ;main.c: 430: lcdInst(0b11000000);;
  7940  0017FC  0EC0               	movlw	192
  7941  0017FE  ECE5  F015         	call	_lcdInst
  7942                           
  7943                           ;main.c: 431: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  7944  001802  0E1A               	movlw	low STR_19
  7945  001804  0100               	movlb	0	; () banked
  7946  001806  6FAF               	movwf	printf@f& (0+255),b
  7947  001808  0EFF               	movlw	high STR_19
  7948  00180A  0100               	movlb	0	; () banked
  7949  00180C  6FB0               	movwf	(printf@f+1)& (0+255),b
  7950  00180E  0100               	movlb	0	; () banked
  7951  001810  EE20 F002          	lfsr	2,2
  7952  001814  51C5               	movf	date_time@time& (0+255),w,b
  7953  001816  26D9               	addwf	fsr2l,f,c
  7954  001818  51C6               	movf	(date_time@time+1)& (0+255),w,b
  7955  00181A  22DA               	addwfc	fsr2h,f,c
  7956  00181C  50DF               	movf	indf2,w,c
  7957  00181E  0100               	movlb	0	; () banked
  7958  001820  6FC7               	movwf	??_date_time& (0+255),b
  7959  001822  0100               	movlb	0	; () banked
  7960  001824  51C7               	movf	??_date_time& (0+255),w,b
  7961  001826  0100               	movlb	0	; () banked
  7962  001828  6FB1               	movwf	(?_printf+2)& (0+255),b
  7963  00182A  6BB2               	clrf	(?_printf+3)& (0+255),b
  7964  00182C  0100               	movlb	0	; () banked
  7965  00182E  EE20 F001          	lfsr	2,1
  7966  001832  51C5               	movf	date_time@time& (0+255),w,b
  7967  001834  26D9               	addwf	fsr2l,f,c
  7968  001836  51C6               	movf	(date_time@time+1)& (0+255),w,b
  7969  001838  22DA               	addwfc	fsr2h,f,c
  7970  00183A  50DF               	movf	indf2,w,c
  7971  00183C  0100               	movlb	0	; () banked
  7972  00183E  6FC8               	movwf	(??_date_time+1)& (0+255),b
  7973  001840  0100               	movlb	0	; () banked
  7974  001842  51C8               	movf	(??_date_time+1)& (0+255),w,b
  7975  001844  0100               	movlb	0	; () banked
  7976  001846  6FB3               	movwf	(?_printf+4)& (0+255),b
  7977  001848  6BB4               	clrf	(?_printf+5)& (0+255),b
  7978  00184A  C0C5  FFD9         	movff	date_time@time,fsr2l
  7979  00184E  C0C6  FFDA         	movff	date_time@time+1,fsr2h
  7980  001852  50DF               	movf	indf2,w,c
  7981  001854  0100               	movlb	0	; () banked
  7982  001856  6FC9               	movwf	(??_date_time+2)& (0+255),b
  7983  001858  0100               	movlb	0	; () banked
  7984  00185A  51C9               	movf	(??_date_time+2)& (0+255),w,b
  7985  00185C  0100               	movlb	0	; () banked
  7986  00185E  6FB5               	movwf	(?_printf+6)& (0+255),b
  7987  001860  6BB6               	clrf	(?_printf+7)& (0+255),b
  7988  001862  ECC6  F003         	call	_printf	;wreg free
  7989  001866  0012               	return	
  7990  001868                     __end_of_date_time:
  7991                           	opt stack 0
  7992                           tblptru	equ	0xFF8
  7993                           tblptrh	equ	0xFF7
  7994                           tblptrl	equ	0xFF6
  7995                           tablat	equ	0xFF5
  7996                           prodh	equ	0xFF4
  7997                           prodl	equ	0xFF3
  7998                           intcon	equ	0xFF2
  7999                           intcon2	equ	0xFF1
  8000                           intcon3	equ	0xFF0
  8001                           postinc0	equ	0xFEE
  8002                           wreg	equ	0xFE8
  8003                           postdec1	equ	0xFE5
  8004                           fsr1l	equ	0xFE1
  8005                           indf2	equ	0xFDF
  8006                           postinc2	equ	0xFDE
  8007                           postdec2	equ	0xFDD
  8008                           fsr2h	equ	0xFDA
  8009                           fsr2l	equ	0xFD9
  8010                           status	equ	0xFD8
  8011                           
  8012 ;; *************** function _I2C_Master_Write *****************
  8013 ;; Defined at:
  8014 ;;		line 47 in file "I2C.c"
  8015 ;; Parameters:    Size  Location     Type
  8016 ;;  d               2   17[COMRAM] unsigned int 
  8017 ;; Auto vars:     Size  Location     Type
  8018 ;;		None
  8019 ;; Return value:  Size  Location     Type
  8020 ;;                  1    wreg      void 
  8021 ;; Registers used:
  8022 ;;		wreg, status,2, status,0, cstack
  8023 ;; Tracked objects:
  8024 ;;		On entry : 0/0
  8025 ;;		On exit  : 0/0
  8026 ;;		Unchanged: 0/0
  8027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8028 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8031 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8032 ;;Total ram usage:        2 bytes
  8033 ;; Hardware stack levels used:    1
  8034 ;; Hardware stack levels required when called:    2
  8035 ;; This function calls:
  8036 ;;		_I2C_Master_Wait
  8037 ;; This function is called by:
  8038 ;;		_update_time
  8039 ;;		_date_time
  8040 ;;		_read_colorsensor1
  8041 ;;		_read_colorsensor2
  8042 ;;		_set_time
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           	psect	text33
  8047  002BD6                     __ptext33:
  8048                           	opt stack 0
  8049  002BD6                     _I2C_Master_Write:
  8050                           	opt stack 27
  8051                           
  8052                           ;I2C.c: 49: I2C_Master_Wait();
  8053                           
  8054                           ;incstack = 0
  8055  002BD6  ECCE  F015         	call	_I2C_Master_Wait	;wreg free
  8056                           
  8057                           ;I2C.c: 50: SSPBUF = d;
  8058  002BDA  C012  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8059  002BDE  0012               	return		;funcret
  8060  002BE0                     __end_of_I2C_Master_Write:
  8061                           	opt stack 0
  8062                           tblptru	equ	0xFF8
  8063                           tblptrh	equ	0xFF7
  8064                           tblptrl	equ	0xFF6
  8065                           tablat	equ	0xFF5
  8066                           prodh	equ	0xFF4
  8067                           prodl	equ	0xFF3
  8068                           intcon	equ	0xFF2
  8069                           intcon2	equ	0xFF1
  8070                           intcon3	equ	0xFF0
  8071                           postinc0	equ	0xFEE
  8072                           wreg	equ	0xFE8
  8073                           postdec1	equ	0xFE5
  8074                           fsr1l	equ	0xFE1
  8075                           indf2	equ	0xFDF
  8076                           postinc2	equ	0xFDE
  8077                           postdec2	equ	0xFDD
  8078                           fsr2h	equ	0xFDA
  8079                           fsr2l	equ	0xFD9
  8080                           status	equ	0xFD8
  8081                           
  8082 ;; *************** function _I2C_Master_Stop *****************
  8083 ;; Defined at:
  8084 ;;		line 41 in file "I2C.c"
  8085 ;; Parameters:    Size  Location     Type
  8086 ;;		None
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;		None
  8089 ;; Return value:  Size  Location     Type
  8090 ;;                  2   62[None  ] int 
  8091 ;; Registers used:
  8092 ;;		wreg, status,2, status,0, cstack
  8093 ;; Tracked objects:
  8094 ;;		On entry : 0/0
  8095 ;;		On exit  : 0/0
  8096 ;;		Unchanged: 0/0
  8097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8102 ;;Total ram usage:        0 bytes
  8103 ;; Hardware stack levels used:    1
  8104 ;; Hardware stack levels required when called:    2
  8105 ;; This function calls:
  8106 ;;		_I2C_Master_Wait
  8107 ;; This function is called by:
  8108 ;;		_update_time
  8109 ;;		_date_time
  8110 ;;		_read_colorsensor1
  8111 ;;		_read_colorsensor2
  8112 ;;		_set_time
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           	psect	text34
  8117  002BE0                     __ptext34:
  8118                           	opt stack 0
  8119  002BE0                     _I2C_Master_Stop:
  8120                           	opt stack 27
  8121                           
  8122                           ;I2C.c: 43: I2C_Master_Wait();
  8123                           
  8124                           ;incstack = 0
  8125  002BE0  ECCE  F015         	call	_I2C_Master_Wait	;wreg free
  8126                           
  8127                           ;I2C.c: 44: PEN = 1;
  8128  002BE4  84C5               	bsf	4037,2,c	;volatile
  8129  002BE6  0012               	return		;funcret
  8130  002BE8                     __end_of_I2C_Master_Stop:
  8131                           	opt stack 0
  8132                           tblptru	equ	0xFF8
  8133                           tblptrh	equ	0xFF7
  8134                           tblptrl	equ	0xFF6
  8135                           tablat	equ	0xFF5
  8136                           prodh	equ	0xFF4
  8137                           prodl	equ	0xFF3
  8138                           intcon	equ	0xFF2
  8139                           intcon2	equ	0xFF1
  8140                           intcon3	equ	0xFF0
  8141                           postinc0	equ	0xFEE
  8142                           wreg	equ	0xFE8
  8143                           postdec1	equ	0xFE5
  8144                           fsr1l	equ	0xFE1
  8145                           indf2	equ	0xFDF
  8146                           postinc2	equ	0xFDE
  8147                           postdec2	equ	0xFDD
  8148                           fsr2h	equ	0xFDA
  8149                           fsr2l	equ	0xFD9
  8150                           status	equ	0xFD8
  8151                           
  8152 ;; *************** function _I2C_Master_Start *****************
  8153 ;; Defined at:
  8154 ;;		line 29 in file "I2C.c"
  8155 ;; Parameters:    Size  Location     Type
  8156 ;;		None
  8157 ;; Auto vars:     Size  Location     Type
  8158 ;;		None
  8159 ;; Return value:  Size  Location     Type
  8160 ;;                  2   58[None  ] int 
  8161 ;; Registers used:
  8162 ;;		wreg, status,2, status,0, cstack
  8163 ;; Tracked objects:
  8164 ;;		On entry : 0/0
  8165 ;;		On exit  : 0/0
  8166 ;;		Unchanged: 0/0
  8167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8172 ;;Total ram usage:        0 bytes
  8173 ;; Hardware stack levels used:    1
  8174 ;; Hardware stack levels required when called:    2
  8175 ;; This function calls:
  8176 ;;		_I2C_Master_Wait
  8177 ;; This function is called by:
  8178 ;;		_update_time
  8179 ;;		_date_time
  8180 ;;		_read_colorsensor1
  8181 ;;		_read_colorsensor2
  8182 ;;		_set_time
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           	psect	text35
  8187  002BE8                     __ptext35:
  8188                           	opt stack 0
  8189  002BE8                     _I2C_Master_Start:
  8190                           	opt stack 27
  8191                           
  8192                           ;I2C.c: 31: I2C_Master_Wait();
  8193                           
  8194                           ;incstack = 0
  8195  002BE8  ECCE  F015         	call	_I2C_Master_Wait	;wreg free
  8196                           
  8197                           ;I2C.c: 32: SEN = 1;
  8198  002BEC  80C5               	bsf	4037,0,c	;volatile
  8199  002BEE  0012               	return		;funcret
  8200  002BF0                     __end_of_I2C_Master_Start:
  8201                           	opt stack 0
  8202                           tblptru	equ	0xFF8
  8203                           tblptrh	equ	0xFF7
  8204                           tblptrl	equ	0xFF6
  8205                           tablat	equ	0xFF5
  8206                           prodh	equ	0xFF4
  8207                           prodl	equ	0xFF3
  8208                           intcon	equ	0xFF2
  8209                           intcon2	equ	0xFF1
  8210                           intcon3	equ	0xFF0
  8211                           postinc0	equ	0xFEE
  8212                           wreg	equ	0xFE8
  8213                           postdec1	equ	0xFE5
  8214                           fsr1l	equ	0xFE1
  8215                           indf2	equ	0xFDF
  8216                           postinc2	equ	0xFDE
  8217                           postdec2	equ	0xFDD
  8218                           fsr2h	equ	0xFDA
  8219                           fsr2l	equ	0xFD9
  8220                           status	equ	0xFD8
  8221                           
  8222 ;; *************** function _I2C_Master_Read *****************
  8223 ;; Defined at:
  8224 ;;		line 53 in file "I2C.c"
  8225 ;; Parameters:    Size  Location     Type
  8226 ;;  a               1    wreg     unsigned char 
  8227 ;; Auto vars:     Size  Location     Type
  8228 ;;  a               1   17[COMRAM] unsigned char 
  8229 ;;  temp            1   18[COMRAM] unsigned char 
  8230 ;; Return value:  Size  Location     Type
  8231 ;;                  1    wreg      unsigned char 
  8232 ;; Registers used:
  8233 ;;		wreg, status,2, status,0, cstack
  8234 ;; Tracked objects:
  8235 ;;		On entry : 0/0
  8236 ;;		On exit  : 0/0
  8237 ;;		Unchanged: 0/0
  8238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8242 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;Total ram usage:        2 bytes
  8244 ;; Hardware stack levels used:    1
  8245 ;; Hardware stack levels required when called:    2
  8246 ;; This function calls:
  8247 ;;		_I2C_Master_Wait
  8248 ;; This function is called by:
  8249 ;;		_update_time
  8250 ;;		_date_time
  8251 ;;		_read_colorsensor1
  8252 ;;		_read_colorsensor2
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           	psect	text36
  8257  002B0E                     __ptext36:
  8258                           	opt stack 0
  8259  002B0E                     _I2C_Master_Read:
  8260                           	opt stack 27
  8261                           
  8262                           ;incstack = 0
  8263                           ;I2C_Master_Read@a stored from wreg
  8264  002B0E  6E12               	movwf	I2C_Master_Read@a,c
  8265                           
  8266                           ;I2C.c: 55: unsigned char temp;
  8267                           ;I2C.c: 56: I2C_Master_Wait();
  8268  002B10  ECCE  F015         	call	_I2C_Master_Wait	;wreg free
  8269                           
  8270                           ;I2C.c: 57: RCEN = 1;
  8271  002B14  86C5               	bsf	4037,3,c	;volatile
  8272                           
  8273                           ;I2C.c: 58: I2C_Master_Wait();
  8274  002B16  ECCE  F015         	call	_I2C_Master_Wait	;wreg free
  8275                           
  8276                           ;I2C.c: 59: temp = SSPBUF;
  8277  002B1A  CFC9 F013          	movff	4041,I2C_Master_Read@temp	;volatile
  8278                           
  8279                           ;I2C.c: 60: I2C_Master_Wait();
  8280  002B1E  ECCE  F015         	call	_I2C_Master_Wait	;wreg free
  8281                           
  8282                           ;I2C.c: 61: ACKDT = (a)?0:1;
  8283  002B22  5012               	movf	I2C_Master_Read@a,w,c
  8284  002B24  A4D8               	btfss	status,2,c
  8285  002B26  D002               	goto	u2840
  8286  002B28  8AC5               	bsf	4037,5,c	;volatile
  8287  002B2A  D001               	goto	l3336
  8288  002B2C                     u2840:
  8289  002B2C  9AC5               	bcf	4037,5,c	;volatile
  8290  002B2E                     l3336:
  8291                           
  8292                           ;I2C.c: 62: ACKEN = 1;
  8293  002B2E  88C5               	bsf	4037,4,c	;volatile
  8294                           
  8295                           ;I2C.c: 63: return temp;
  8296  002B30  5013               	movf	I2C_Master_Read@temp,w,c
  8297  002B32  0012               	return	
  8298  002B34                     __end_of_I2C_Master_Read:
  8299                           	opt stack 0
  8300                           tblptru	equ	0xFF8
  8301                           tblptrh	equ	0xFF7
  8302                           tblptrl	equ	0xFF6
  8303                           tablat	equ	0xFF5
  8304                           prodh	equ	0xFF4
  8305                           prodl	equ	0xFF3
  8306                           intcon	equ	0xFF2
  8307                           intcon2	equ	0xFF1
  8308                           intcon3	equ	0xFF0
  8309                           postinc0	equ	0xFEE
  8310                           wreg	equ	0xFE8
  8311                           postdec1	equ	0xFE5
  8312                           fsr1l	equ	0xFE1
  8313                           indf2	equ	0xFDF
  8314                           postinc2	equ	0xFDE
  8315                           postdec2	equ	0xFDD
  8316                           fsr2h	equ	0xFDA
  8317                           fsr2l	equ	0xFD9
  8318                           status	equ	0xFD8
  8319                           
  8320 ;; *************** function _I2C_Master_Wait *****************
  8321 ;; Defined at:
  8322 ;;		line 24 in file "I2C.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;		None
  8325 ;; Auto vars:     Size  Location     Type
  8326 ;;		None
  8327 ;; Return value:  Size  Location     Type
  8328 ;;                  1    wreg      void 
  8329 ;; Registers used:
  8330 ;;		wreg, status,2, status,0
  8331 ;; Tracked objects:
  8332 ;;		On entry : 0/0
  8333 ;;		On exit  : 0/0
  8334 ;;		Unchanged: 0/0
  8335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8338 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8339 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8340 ;;Total ram usage:        1 bytes
  8341 ;; Hardware stack levels used:    1
  8342 ;; Hardware stack levels required when called:    1
  8343 ;; This function calls:
  8344 ;;		Nothing
  8345 ;; This function is called by:
  8346 ;;		_I2C_Master_Start
  8347 ;;		_I2C_Master_Stop
  8348 ;;		_I2C_Master_Write
  8349 ;;		_I2C_Master_Read
  8350 ;;		_I2C_Master_RepeatedStart
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           	psect	text37
  8355  002B9C                     __ptext37:
  8356                           	opt stack 0
  8357  002B9C                     _I2C_Master_Wait:
  8358                           	opt stack 27
  8359  002B9C                     l354:
  8360  002B9C  B4C7               	btfsc	4039,2,c	;volatile
  8361  002B9E  D7FE               	goto	l354
  8362  002BA0  CFC5 F011          	movff	4037,??_I2C_Master_Wait	;volatile
  8363  002BA4  0E1F               	movlw	31
  8364  002BA6  1611               	andwf	??_I2C_Master_Wait,f,c
  8365  002BA8  B4D8               	btfsc	status,2,c
  8366  002BAA  0012               	return	
  8367  002BAC  D7F7               	goto	l354
  8368  002BAE                     __end_of_I2C_Master_Wait:
  8369                           	opt stack 0
  8370                           tblptru	equ	0xFF8
  8371                           tblptrh	equ	0xFF7
  8372                           tblptrl	equ	0xFF6
  8373                           tablat	equ	0xFF5
  8374                           prodh	equ	0xFF4
  8375                           prodl	equ	0xFF3
  8376                           intcon	equ	0xFF2
  8377                           intcon2	equ	0xFF1
  8378                           intcon3	equ	0xFF0
  8379                           postinc0	equ	0xFEE
  8380                           wreg	equ	0xFE8
  8381                           postdec1	equ	0xFE5
  8382                           fsr1l	equ	0xFE1
  8383                           indf2	equ	0xFDF
  8384                           postinc2	equ	0xFDE
  8385                           postdec2	equ	0xFDD
  8386                           fsr2h	equ	0xFDA
  8387                           fsr2l	equ	0xFD9
  8388                           status	equ	0xFD8
  8389                           
  8390 ;; *************** function _bottle_count *****************
  8391 ;; Defined at:
  8392 ;;		line 359 in file "main.c"
  8393 ;; Parameters:    Size  Location     Type
  8394 ;;  bot_count       2   69[BANK0 ] PTR unsigned char 
  8395 ;;		 -> main@bot_count(4), 
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;		None
  8398 ;; Return value:  Size  Location     Type
  8399 ;;                  1    wreg      void 
  8400 ;; Registers used:
  8401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8402 ;; Tracked objects:
  8403 ;;		On entry : 0/0
  8404 ;;		On exit  : 0/0
  8405 ;;		Unchanged: 0/0
  8406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8407 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8409 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8410 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8411 ;;Total ram usage:        7 bytes
  8412 ;; Hardware stack levels used:    1
  8413 ;; Hardware stack levels required when called:    4
  8414 ;; This function calls:
  8415 ;;		_lcdInst
  8416 ;;		_printf
  8417 ;; This function is called by:
  8418 ;;		_main
  8419 ;; This function uses a non-reentrant model
  8420 ;;
  8421                           
  8422                           	psect	text38
  8423  000B5A                     __ptext38:
  8424                           	opt stack 0
  8425  000B5A                     _bottle_count:
  8426                           	opt stack 26
  8427                           
  8428                           ;main.c: 360: while (bot_type != O){
  8429                           
  8430                           ;incstack = 0
  8431  000B5A  D0FA               	goto	l4010
  8432  000B5C                     l3974:
  8433                           
  8434                           ;main.c: 363: lcdInst(0b10000000);;
  8435  000B5C  0E80               	movlw	128
  8436  000B5E  ECE5  F015         	call	_lcdInst
  8437                           
  8438                           ;main.c: 364: printf("Total Bottle    ");
  8439  000B62  0E88               	movlw	low STR_6
  8440  000B64  0100               	movlb	0	; () banked
  8441  000B66  6FAF               	movwf	printf@f& (0+255),b
  8442  000B68  0EFF               	movlw	high STR_6
  8443  000B6A  0100               	movlb	0	; () banked
  8444  000B6C  6FB0               	movwf	(printf@f+1)& (0+255),b
  8445  000B6E  ECC6  F003         	call	_printf	;wreg free
  8446                           
  8447                           ;main.c: 365: lcdInst(0b11000000);;
  8448  000B72  0EC0               	movlw	192
  8449  000B74  ECE5  F015         	call	_lcdInst
  8450                           
  8451                           ;main.c: 366: printf("Count: %i       ", (bot_count[0] + bot_count[1] + bot_count[2] + b
      +                          ot_count[3]));
  8452  000B78  0E77               	movlw	low STR_7
  8453  000B7A  0100               	movlb	0	; () banked
  8454  000B7C  6FAF               	movwf	printf@f& (0+255),b
  8455  000B7E  0EFF               	movlw	high STR_7
  8456  000B80  0100               	movlb	0	; () banked
  8457  000B82  6FB0               	movwf	(printf@f+1)& (0+255),b
  8458  000B84  0100               	movlb	0	; () banked
  8459  000B86  EE20 F003          	lfsr	2,3
  8460  000B8A  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8461  000B8C  26D9               	addwf	fsr2l,f,c
  8462  000B8E  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8463  000B90  22DA               	addwfc	fsr2h,f,c
  8464  000B92  50DF               	movf	indf2,w,c
  8465  000B94  0100               	movlb	0	; () banked
  8466  000B96  6FC7               	movwf	??_bottle_count& (0+255),b
  8467  000B98  C0C5  FFD9         	movff	bottle_count@bot_count,fsr2l
  8468  000B9C  C0C6  FFDA         	movff	bottle_count@bot_count+1,fsr2h
  8469  000BA0  50DF               	movf	indf2,w,c
  8470  000BA2  0100               	movlb	0	; () banked
  8471  000BA4  6FC8               	movwf	(??_bottle_count+1)& (0+255),b
  8472  000BA6  6BC9               	clrf	(??_bottle_count+2)& (0+255),b
  8473  000BA8  0100               	movlb	0	; () banked
  8474  000BAA  EE20 F001          	lfsr	2,1
  8475  000BAE  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8476  000BB0  26D9               	addwf	fsr2l,f,c
  8477  000BB2  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8478  000BB4  22DA               	addwfc	fsr2h,f,c
  8479  000BB6  50DF               	movf	indf2,w,c
  8480  000BB8  0100               	movlb	0	; () banked
  8481  000BBA  6FCA               	movwf	(??_bottle_count+3)& (0+255),b
  8482  000BBC  0100               	movlb	0	; () banked
  8483  000BBE  51CA               	movf	(??_bottle_count+3)& (0+255),w,b
  8484  000BC0  0100               	movlb	0	; () banked
  8485  000BC2  27C8               	addwf	(??_bottle_count+1)& (0+255),f,b
  8486  000BC4  0E00               	movlw	0
  8487  000BC6  23C9               	addwfc	(??_bottle_count+2)& (0+255),f,b
  8488  000BC8  0100               	movlb	0	; () banked
  8489  000BCA  EE20 F002          	lfsr	2,2
  8490  000BCE  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8491  000BD0  26D9               	addwf	fsr2l,f,c
  8492  000BD2  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8493  000BD4  22DA               	addwfc	fsr2h,f,c
  8494  000BD6  50DF               	movf	indf2,w,c
  8495  000BD8  0100               	movlb	0	; () banked
  8496  000BDA  6FCB               	movwf	(??_bottle_count+4)& (0+255),b
  8497  000BDC  0100               	movlb	0	; () banked
  8498  000BDE  51CB               	movf	(??_bottle_count+4)& (0+255),w,b
  8499  000BE0  0100               	movlb	0	; () banked
  8500  000BE2  27C8               	addwf	(??_bottle_count+1)& (0+255),f,b
  8501  000BE4  0E00               	movlw	0
  8502  000BE6  23C9               	addwfc	(??_bottle_count+2)& (0+255),f,b
  8503  000BE8  0100               	movlb	0	; () banked
  8504  000BEA  51C7               	movf	??_bottle_count& (0+255),w,b
  8505  000BEC  0100               	movlb	0	; () banked
  8506  000BEE  25C8               	addwf	(??_bottle_count+1)& (0+255),w,b
  8507  000BF0  0100               	movlb	0	; () banked
  8508  000BF2  6FB1               	movwf	(?_printf+2)& (0+255),b
  8509  000BF4  0100               	movlb	0	; () banked
  8510  000BF6  0E00               	movlw	0
  8511  000BF8  0100               	movlb	0	; () banked
  8512  000BFA  21C9               	addwfc	(??_bottle_count+2)& (0+255),w,b
  8513  000BFC  0100               	movlb	0	; () banked
  8514  000BFE  6FB2               	movwf	(?_printf+3)& (0+255),b
  8515  000C00  ECC6  F003         	call	_printf	;wreg free
  8516                           
  8517                           ;main.c: 367: break;
  8518  000C04  D097               	goto	l4008
  8519  000C06                     l3980:
  8520                           
  8521                           ;main.c: 369: lcdInst(0b10000000);;
  8522  000C06  0E80               	movlw	128
  8523  000C08  ECE5  F015         	call	_lcdInst
  8524                           
  8525                           ;main.c: 370: printf("YOP With Cap    ");
  8526  000C0C  0E99               	movlw	low STR_8
  8527  000C0E  0100               	movlb	0	; () banked
  8528  000C10  6FAF               	movwf	printf@f& (0+255),b
  8529  000C12  0EFF               	movlw	high STR_8
  8530  000C14  0100               	movlb	0	; () banked
  8531  000C16  6FB0               	movwf	(printf@f+1)& (0+255),b
  8532  000C18  ECC6  F003         	call	_printf	;wreg free
  8533                           
  8534                           ;main.c: 371: lcdInst(0b11000000);;
  8535  000C1C  0EC0               	movlw	192
  8536  000C1E  ECE5  F015         	call	_lcdInst
  8537                           
  8538                           ;main.c: 372: printf("Count: %i       ", bot_count[0]);
  8539  000C22  0E77               	movlw	low STR_7
  8540  000C24  0100               	movlb	0	; () banked
  8541  000C26  6FAF               	movwf	printf@f& (0+255),b
  8542  000C28  0EFF               	movlw	high STR_7
  8543  000C2A  0100               	movlb	0	; () banked
  8544  000C2C  6FB0               	movwf	(printf@f+1)& (0+255),b
  8545  000C2E  C0C5  FFD9         	movff	bottle_count@bot_count,fsr2l
  8546  000C32  C0C6  FFDA         	movff	bottle_count@bot_count+1,fsr2h
  8547  000C36  50DF               	movf	indf2,w,c
  8548  000C38  0100               	movlb	0	; () banked
  8549  000C3A  6FC7               	movwf	??_bottle_count& (0+255),b
  8550  000C3C  0100               	movlb	0	; () banked
  8551  000C3E  51C7               	movf	??_bottle_count& (0+255),w,b
  8552  000C40  0100               	movlb	0	; () banked
  8553  000C42  6FB1               	movwf	(?_printf+2)& (0+255),b
  8554  000C44  6BB2               	clrf	(?_printf+3)& (0+255),b
  8555  000C46  ECC6  F003         	call	_printf	;wreg free
  8556                           
  8557                           ;main.c: 373: break;
  8558  000C4A  D074               	goto	l4008
  8559  000C4C                     l3986:
  8560                           
  8561                           ;main.c: 375: lcdInst(0b10000000);;
  8562  000C4C  0E80               	movlw	128
  8563  000C4E  ECE5  F015         	call	_lcdInst
  8564                           
  8565                           ;main.c: 376: printf("YOP With No Cap ");
  8566  000C52  0EDD               	movlw	low STR_10
  8567  000C54  0100               	movlb	0	; () banked
  8568  000C56  6FAF               	movwf	printf@f& (0+255),b
  8569  000C58  0EFF               	movlw	high STR_10
  8570  000C5A  0100               	movlb	0	; () banked
  8571  000C5C  6FB0               	movwf	(printf@f+1)& (0+255),b
  8572  000C5E  ECC6  F003         	call	_printf	;wreg free
  8573                           
  8574                           ;main.c: 377: lcdInst(0b11000000);;
  8575  000C62  0EC0               	movlw	192
  8576  000C64  ECE5  F015         	call	_lcdInst
  8577                           
  8578                           ;main.c: 378: printf("Count: %i       ", bot_count[1]);
  8579  000C68  0E77               	movlw	low STR_7
  8580  000C6A  0100               	movlb	0	; () banked
  8581  000C6C  6FAF               	movwf	printf@f& (0+255),b
  8582  000C6E  0EFF               	movlw	high STR_7
  8583  000C70  0100               	movlb	0	; () banked
  8584  000C72  6FB0               	movwf	(printf@f+1)& (0+255),b
  8585  000C74  0100               	movlb	0	; () banked
  8586  000C76  EE20 F001          	lfsr	2,1
  8587  000C7A  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8588  000C7C  26D9               	addwf	fsr2l,f,c
  8589  000C7E  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8590  000C80  22DA               	addwfc	fsr2h,f,c
  8591  000C82  50DF               	movf	indf2,w,c
  8592  000C84  0100               	movlb	0	; () banked
  8593  000C86  6FC7               	movwf	??_bottle_count& (0+255),b
  8594  000C88  0100               	movlb	0	; () banked
  8595  000C8A  51C7               	movf	??_bottle_count& (0+255),w,b
  8596  000C8C  0100               	movlb	0	; () banked
  8597  000C8E  6FB1               	movwf	(?_printf+2)& (0+255),b
  8598  000C90  6BB2               	clrf	(?_printf+3)& (0+255),b
  8599  000C92  ECC6  F003         	call	_printf	;wreg free
  8600                           
  8601                           ;main.c: 379: break;
  8602  000C96  D04E               	goto	l4008
  8603  000C98                     l3992:
  8604                           
  8605                           ;main.c: 381: lcdInst(0b10000000);;
  8606  000C98  0E80               	movlw	128
  8607  000C9A  ECE5  F015         	call	_lcdInst
  8608                           
  8609                           ;main.c: 382: printf("ESKA With Cap   ");
  8610  000C9E  0EAA               	movlw	low STR_12
  8611  000CA0  0100               	movlb	0	; () banked
  8612  000CA2  6FAF               	movwf	printf@f& (0+255),b
  8613  000CA4  0EFF               	movlw	high STR_12
  8614  000CA6  0100               	movlb	0	; () banked
  8615  000CA8  6FB0               	movwf	(printf@f+1)& (0+255),b
  8616  000CAA  ECC6  F003         	call	_printf	;wreg free
  8617                           
  8618                           ;main.c: 383: lcdInst(0b11000000);;
  8619  000CAE  0EC0               	movlw	192
  8620  000CB0  ECE5  F015         	call	_lcdInst
  8621                           
  8622                           ;main.c: 384: printf("Count: %i       ", bot_count[2]);
  8623  000CB4  0E77               	movlw	low STR_7
  8624  000CB6  0100               	movlb	0	; () banked
  8625  000CB8  6FAF               	movwf	printf@f& (0+255),b
  8626  000CBA  0EFF               	movlw	high STR_7
  8627  000CBC  0100               	movlb	0	; () banked
  8628  000CBE  6FB0               	movwf	(printf@f+1)& (0+255),b
  8629  000CC0  0100               	movlb	0	; () banked
  8630  000CC2  EE20 F002          	lfsr	2,2
  8631  000CC6  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8632  000CC8  26D9               	addwf	fsr2l,f,c
  8633  000CCA  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8634  000CCC  22DA               	addwfc	fsr2h,f,c
  8635  000CCE  50DF               	movf	indf2,w,c
  8636  000CD0  0100               	movlb	0	; () banked
  8637  000CD2  6FC7               	movwf	??_bottle_count& (0+255),b
  8638  000CD4  0100               	movlb	0	; () banked
  8639  000CD6  51C7               	movf	??_bottle_count& (0+255),w,b
  8640  000CD8  0100               	movlb	0	; () banked
  8641  000CDA  6FB1               	movwf	(?_printf+2)& (0+255),b
  8642  000CDC  6BB2               	clrf	(?_printf+3)& (0+255),b
  8643  000CDE  ECC6  F003         	call	_printf	;wreg free
  8644                           
  8645                           ;main.c: 385: break;
  8646  000CE2  D028               	goto	l4008
  8647  000CE4                     l3998:
  8648                           
  8649                           ;main.c: 387: lcdInst(0b10000000);;
  8650  000CE4  0E80               	movlw	128
  8651  000CE6  ECE5  F015         	call	_lcdInst
  8652                           
  8653                           ;main.c: 388: printf("ESKA With No Cap");
  8654  000CEA  0EEE               	movlw	low STR_14
  8655  000CEC  0100               	movlb	0	; () banked
  8656  000CEE  6FAF               	movwf	printf@f& (0+255),b
  8657  000CF0  0EFF               	movlw	high STR_14
  8658  000CF2  0100               	movlb	0	; () banked
  8659  000CF4  6FB0               	movwf	(printf@f+1)& (0+255),b
  8660  000CF6  ECC6  F003         	call	_printf	;wreg free
  8661                           
  8662                           ;main.c: 389: lcdInst(0b11000000);;
  8663  000CFA  0EC0               	movlw	192
  8664  000CFC  ECE5  F015         	call	_lcdInst
  8665                           
  8666                           ;main.c: 390: printf("Count: %i       "), bot_count[3];
  8667  000D00  0E77               	movlw	low STR_7
  8668  000D02  0100               	movlb	0	; () banked
  8669  000D04  6FAF               	movwf	printf@f& (0+255),b
  8670  000D06  0EFF               	movlw	high STR_7
  8671  000D08  0100               	movlb	0	; () banked
  8672  000D0A  6FB0               	movwf	(printf@f+1)& (0+255),b
  8673  000D0C  ECC6  F003         	call	_printf	;wreg free
  8674                           
  8675                           ;main.c: 392: }
  8676                           
  8677                           ;main.c: 391: break;
  8678  000D10  D011               	goto	l4008
  8679  000D12                     l4006:
  8680  000D12  0100               	movlb	0	; () banked
  8681  000D14  51F7               	movf	_bot_type& (0+255),w,b
  8682                           
  8683                           ; Switch size 1, requested type "space"
  8684                           ; Number of cases is 5, Range of values is 0 to 4
  8685                           ; switch strategies available:
  8686                           ; Name         Instructions Cycles
  8687                           ; simple_byte           16     9 (average)
  8688                           ;	Chosen strategy is simple_byte
  8689  000D16  0A00               	xorlw	0	; case 0
  8690  000D18  B4D8               	btfsc	status,2,c
  8691  000D1A  D720               	goto	l3974
  8692  000D1C  0A01               	xorlw	1	; case 1
  8693  000D1E  B4D8               	btfsc	status,2,c
  8694  000D20  D772               	goto	l3980
  8695  000D22  0A03               	xorlw	3	; case 2
  8696  000D24  B4D8               	btfsc	status,2,c
  8697  000D26  D792               	goto	l3986
  8698  000D28  0A01               	xorlw	1	; case 3
  8699  000D2A  B4D8               	btfsc	status,2,c
  8700  000D2C  D7B5               	goto	l3992
  8701  000D2E  0A07               	xorlw	7	; case 4
  8702  000D30  B4D8               	btfsc	status,2,c
  8703  000D32  D7D8               	goto	l3998
  8704  000D34                     l4008:
  8705                           
  8706                           ;main.c: 393: _delay((unsigned long)((100)*(10000000/4000.0)));
  8707  000D34  0E02               	movlw	2
  8708  000D36  0100               	movlb	0	; () banked
  8709  000D38  6FC8               	movwf	(??_bottle_count+1)& (0+255),b
  8710  000D3A  0E45               	movlw	69
  8711  000D3C  0100               	movlb	0	; () banked
  8712  000D3E  6FC7               	movwf	??_bottle_count& (0+255),b
  8713  000D40  0EA9               	movlw	169
  8714  000D42                     u4007:
  8715  000D42  2EE8               	decfsz	wreg,f,c
  8716  000D44  D7FE               	bra	u4007
  8717  000D46  2FC7               	decfsz	??_bottle_count& (0+255),f,b
  8718  000D48  D7FC               	bra	u4007
  8719  000D4A  2FC8               	decfsz	(??_bottle_count+1)& (0+255),f,b
  8720  000D4C  D7FA               	bra	u4007
  8721  000D4E  D000               	nop2	
  8722  000D50                     l4010:
  8723  000D50  0E05               	movlw	5
  8724  000D52  0100               	movlb	0	; () banked
  8725  000D54  19F7               	xorwf	_bot_type& (0+255),w,b
  8726  000D56  B4D8               	btfsc	status,2,c
  8727  000D58  0012               	return	
  8728  000D5A  D7DB               	goto	l4006
  8729  000D5C                     __end_of_bottle_count:
  8730                           	opt stack 0
  8731                           tblptru	equ	0xFF8
  8732                           tblptrh	equ	0xFF7
  8733                           tblptrl	equ	0xFF6
  8734                           tablat	equ	0xFF5
  8735                           prodh	equ	0xFF4
  8736                           prodl	equ	0xFF3
  8737                           intcon	equ	0xFF2
  8738                           intcon2	equ	0xFF1
  8739                           intcon3	equ	0xFF0
  8740                           postinc0	equ	0xFEE
  8741                           wreg	equ	0xFE8
  8742                           postdec1	equ	0xFE5
  8743                           fsr1l	equ	0xFE1
  8744                           indf2	equ	0xFDF
  8745                           postinc2	equ	0xFDE
  8746                           postdec2	equ	0xFDD
  8747                           fsr2h	equ	0xFDA
  8748                           fsr2l	equ	0xFD9
  8749                           status	equ	0xFD8
  8750                           
  8751 ;; *************** function _printf *****************
  8752 ;; Defined at:
  8753 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8754 ;; Parameters:    Size  Location     Type
  8755 ;;  f               2   47[BANK0 ] PTR const unsigned char 
  8756 ;;		 -> STR_19(23), STR_18(23), STR_17(17), STR_16(17), 
  8757 ;;		 -> STR_15(17), STR_14(17), STR_13(17), STR_12(17), 
  8758 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  8759 ;;		 -> STR_7(17), STR_6(17), STR_5(19), STR_4(17), 
  8760 ;;		 -> STR_3(17), STR_2(17), STR_1(27), 
  8761 ;; Auto vars:     Size  Location     Type
  8762 ;;  idx             1   59[BANK0 ] unsigned char 
  8763 ;;  tmpval          4    0        struct .
  8764 ;;  cp              3    0        PTR const unsigned char 
  8765 ;;  width           2   66[BANK0 ] int 
  8766 ;;  val             2   63[BANK0 ] unsigned int 
  8767 ;;  ap              2   60[BANK0 ] PTR void [1]
  8768 ;;		 -> ?_printf(2), 
  8769 ;;  len             2    0        unsigned int 
  8770 ;;  c               1   68[BANK0 ] char 
  8771 ;;  flag            1   65[BANK0 ] unsigned char 
  8772 ;;  prec            1   62[BANK0 ] char 
  8773 ;; Return value:  Size  Location     Type
  8774 ;;                  2   47[BANK0 ] int 
  8775 ;; Registers used:
  8776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8782 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8783 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8784 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8785 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;Total ram usage:       22 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    3
  8789 ;; This function calls:
  8790 ;;		___lwdiv
  8791 ;;		___lwmod
  8792 ;;		___wmul
  8793 ;;		_isdigit
  8794 ;;		_putch
  8795 ;; This function is called by:
  8796 ;;		_main
  8797 ;;		_init_operation
  8798 ;;		_runtime
  8799 ;;		_bottle_count
  8800 ;;		_operation_end
  8801 ;;		_date_time
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           	psect	text39
  8806  00078C                     __ptext39:
  8807                           	opt stack 0
  8808  00078C                     _printf:
  8809                           	opt stack 26
  8810                           
  8811                           ;doprnt.c: 466: va_list ap;
  8812                           ;doprnt.c: 499: signed char c;
  8813                           ;doprnt.c: 501: int width;
  8814                           ;doprnt.c: 506: signed char prec;
  8815                           ;doprnt.c: 508: unsigned char flag;
  8816                           ;doprnt.c: 523: union {
  8817                           ;doprnt.c: 524: unsigned long vd;
  8818                           ;doprnt.c: 525: double integ;
  8819                           ;doprnt.c: 526: } tmpval;
  8820                           ;doprnt.c: 528: unsigned int val;
  8821                           ;doprnt.c: 529: unsigned len;
  8822                           ;doprnt.c: 530: const char * cp;
  8823                           ;doprnt.c: 533: *ap = __va_start();
  8824                           
  8825                           ; BSR set to: 0
  8826                           ;incstack = 0
  8827  00078C  0EB1               	movlw	low (?_printf+2)
  8828  00078E  0100               	movlb	0	; () banked
  8829  000790  6FBC               	movwf	printf@ap& (0+255),b
  8830  000792  0E00               	movlw	high (?_printf+2)
  8831  000794  0100               	movlb	0	; () banked
  8832  000796  6FBD               	movwf	(printf@ap+1)& (0+255),b
  8833                           
  8834                           ;doprnt.c: 536: while(c = *f++) {
  8835  000798  D1D1               	goto	l3620
  8836  00079A                     l3490:
  8837                           
  8838                           ; BSR set to: 0
  8839                           ;doprnt.c: 538: if(c != '%')
  8840  00079A  0E25               	movlw	37
  8841  00079C  0100               	movlb	0	; () banked
  8842  00079E  19C4               	xorwf	printf@c& (0+255),w,b
  8843  0007A0  B4D8               	btfsc	status,2,c
  8844  0007A2  D005               	goto	l3494
  8845                           
  8846                           ; BSR set to: 0
  8847                           ;doprnt.c: 540: {
  8848                           ;doprnt.c: 541: (putch(c) );
  8849  0007A4  0100               	movlb	0	; () banked
  8850  0007A6  51C4               	movf	printf@c& (0+255),w,b
  8851  0007A8  ECDF  F015         	call	_putch
  8852                           
  8853                           ;doprnt.c: 542: continue;
  8854  0007AC  D1C7               	goto	l3620
  8855  0007AE                     l3494:
  8856                           
  8857                           ;doprnt.c: 543: }
  8858                           ;doprnt.c: 546: width = 0;
  8859  0007AE  0E00               	movlw	0
  8860  0007B0  0100               	movlb	0	; () banked
  8861  0007B2  6FC3               	movwf	(printf@width+1)& (0+255),b
  8862  0007B4  0E00               	movlw	0
  8863  0007B6  6FC2               	movwf	printf@width& (0+255),b
  8864                           
  8865                           ;doprnt.c: 548: flag = 0;
  8866  0007B8  0E00               	movlw	0
  8867  0007BA  0100               	movlb	0	; () banked
  8868  0007BC  6FC1               	movwf	printf@flag& (0+255),b
  8869                           
  8870                           ; BSR set to: 0
  8871                           ;doprnt.c: 551: switch(*f) {
  8872                           
  8873                           ;doprnt.c: 550: for(;;) {
  8874  0007BE  D005               	goto	l3500
  8875  0007C0                     l3496:
  8876                           
  8877                           ;doprnt.c: 580: flag |= 0x04;
  8878  0007C0  0100               	movlb	0	; () banked
  8879  0007C2  85C1               	bsf	printf@flag& (0+255),2,b
  8880                           
  8881                           ;doprnt.c: 581: f++;
  8882  0007C4  0100               	movlb	0	; () banked
  8883  0007C6  4BAF               	infsnz	printf@f& (0+255),f,b
  8884  0007C8  2BB0               	incf	(printf@f+1)& (0+255),f,b
  8885  0007CA                     l3500:
  8886  0007CA  C0AF  FFF6         	movff	printf@f,tblptrl
  8887  0007CE  C0B0  FFF7         	movff	printf@f+1,tblptrh
  8888  0007D2                     	if	0	;tblptru may be non-zero
  8889  0007D2                     	endif
  8890  0007D2                     	if	0	;tblptru may be non-zero
  8891  0007D2                     	endif
  8892  0007D2  0008               	tblrd		*
  8893  0007D4  50F5               	movf	tablat,w,c
  8894                           
  8895                           ; Switch size 1, requested type "space"
  8896                           ; Number of cases is 1, Range of values is 48 to 48
  8897                           ; switch strategies available:
  8898                           ; Name         Instructions Cycles
  8899                           ; simple_byte            4     3 (average)
  8900                           ;	Chosen strategy is simple_byte
  8901  0007D6  0A30               	xorlw	48	; case 48
  8902  0007D8  B4D8               	btfsc	status,2,c
  8903  0007DA  D7F2               	goto	l3496
  8904                           
  8905                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8906                           
  8907                           ;doprnt.c: 586: }
  8908                           
  8909                           ;doprnt.c: 585: break;
  8910  0007DC  C0AF  FFF6         	movff	printf@f,tblptrl
  8911  0007E0  C0B0  FFF7         	movff	printf@f+1,tblptrh
  8912  0007E4                     	if	0	;tblptru may be non-zero
  8913  0007E4                     	endif
  8914  0007E4                     	if	0	;tblptru may be non-zero
  8915  0007E4                     	endif
  8916  0007E4  0008               	tblrd		*
  8917  0007E6  50F5               	movf	tablat,w,c
  8918  0007E8  ECBF  F015         	call	_isdigit
  8919  0007EC  A0D8               	btfss	status,0,c
  8920  0007EE  D047               	goto	l3520
  8921                           
  8922                           ;doprnt.c: 598: width = 0;
  8923  0007F0  0E00               	movlw	0
  8924  0007F2  0100               	movlb	0	; () banked
  8925  0007F4  6FC3               	movwf	(printf@width+1)& (0+255),b
  8926  0007F6  0E00               	movlw	0
  8927  0007F8  6FC2               	movwf	printf@width& (0+255),b
  8928  0007FA                     l3506:
  8929                           
  8930                           ;doprnt.c: 600: width *= 10;
  8931  0007FA  C0C2  F011         	movff	printf@width,___wmul@multiplier
  8932  0007FE  C0C3  F012         	movff	printf@width+1,___wmul@multiplier+1
  8933  000802  0E00               	movlw	0
  8934  000804  6E14               	movwf	___wmul@multiplicand+1,c
  8935  000806  0E0A               	movlw	10
  8936  000808  6E13               	movwf	___wmul@multiplicand,c
  8937  00080A  EC9A  F015         	call	___wmul	;wreg free
  8938  00080E  C011  F0C2         	movff	?___wmul,printf@width
  8939  000812  C012  F0C3         	movff	?___wmul+1,printf@width+1
  8940                           
  8941                           ;doprnt.c: 601: width += *f++ - '0';
  8942  000816  0ED0               	movlw	208
  8943  000818  0100               	movlb	0	; () banked
  8944  00081A  6FB7               	movwf	??_printf& (0+255),b
  8945  00081C  0EFF               	movlw	255
  8946  00081E  0100               	movlb	0	; () banked
  8947  000820  6FB8               	movwf	(??_printf+1)& (0+255),b
  8948  000822  C0AF  FFF6         	movff	printf@f,tblptrl
  8949  000826  C0B0  FFF7         	movff	printf@f+1,tblptrh
  8950  00082A                     	if	0	;tblptru may be non-zero
  8951  00082A                     	endif
  8952  00082A                     	if	0	;tblptru may be non-zero
  8953  00082A                     	endif
  8954  00082A  0008               	tblrd		*
  8955  00082C  50F5               	movf	tablat,w,c
  8956  00082E  0100               	movlb	0	; () banked
  8957  000830  6FB9               	movwf	(??_printf+2)& (0+255),b
  8958  000832  6BBA               	clrf	(??_printf+3)& (0+255),b
  8959  000834  0100               	movlb	0	; () banked
  8960  000836  51B7               	movf	??_printf& (0+255),w,b
  8961  000838  0100               	movlb	0	; () banked
  8962  00083A  27B9               	addwf	(??_printf+2)& (0+255),f,b
  8963  00083C  0100               	movlb	0	; () banked
  8964  00083E  51B8               	movf	(??_printf+1)& (0+255),w,b
  8965  000840  0100               	movlb	0	; () banked
  8966  000842  23BA               	addwfc	(??_printf+3)& (0+255),f,b
  8967  000844  0100               	movlb	0	; () banked
  8968  000846  51B9               	movf	(??_printf+2)& (0+255),w,b
  8969  000848  0100               	movlb	0	; () banked
  8970  00084A  27C2               	addwf	printf@width& (0+255),f,b
  8971  00084C  0100               	movlb	0	; () banked
  8972  00084E  51BA               	movf	(??_printf+3)& (0+255),w,b
  8973  000850  0100               	movlb	0	; () banked
  8974  000852  23C3               	addwfc	(printf@width+1)& (0+255),f,b
  8975                           
  8976                           ; BSR set to: 0
  8977  000854  0100               	movlb	0	; () banked
  8978  000856  4BAF               	infsnz	printf@f& (0+255),f,b
  8979  000858  2BB0               	incf	(printf@f+1)& (0+255),f,b
  8980                           
  8981                           ; BSR set to: 0
  8982                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8983  00085A  C0AF  FFF6         	movff	printf@f,tblptrl
  8984  00085E  C0B0  FFF7         	movff	printf@f+1,tblptrh
  8985  000862                     	if	0	;tblptru may be non-zero
  8986  000862                     	endif
  8987  000862                     	if	0	;tblptru may be non-zero
  8988  000862                     	endif
  8989  000862  0008               	tblrd		*
  8990  000864  50F5               	movf	tablat,w,c
  8991  000866  ECBF  F015         	call	_isdigit
  8992  00086A  A0D8               	btfss	status,0,c
  8993  00086C  D008               	goto	l3520
  8994  00086E  D7C5               	goto	l3506
  8995  000870                     l3514:
  8996                           
  8997                           ;doprnt.c: 721: flag |= 0x80;
  8998  000870  0100               	movlb	0	; () banked
  8999  000872  8FC1               	bsf	printf@flag& (0+255),7,b
  9000                           
  9001                           ;doprnt.c: 723: break;
  9002  000874  D020               	goto	l3522
  9003  000876                     l3516:
  9004                           
  9005                           ; BSR set to: 0
  9006                           ;doprnt.c: 818: flag |= 0xC0;
  9007  000876  0EC0               	movlw	192
  9008  000878  0100               	movlb	0	; () banked
  9009  00087A  13C1               	iorwf	printf@flag& (0+255),f,b
  9010                           
  9011                           ; BSR set to: 0
  9012                           ;doprnt.c: 822: }
  9013                           
  9014                           ;doprnt.c: 819: break;
  9015  00087C  D01C               	goto	l3522
  9016  00087E                     l3520:
  9017  00087E  C0AF  FFF6         	movff	printf@f,tblptrl
  9018  000882  C0B0  FFF7         	movff	printf@f+1,tblptrh
  9019  000886  0100               	movlb	0	; () banked
  9020  000888  4BAF               	infsnz	printf@f& (0+255),f,b
  9021  00088A  2BB0               	incf	(printf@f+1)& (0+255),f,b
  9022  00088C                     	if	0	;tblptru may be non-zero
  9023  00088C                     	endif
  9024  00088C                     	if	0	;tblptru may be non-zero
  9025  00088C                     	endif
  9026  00088C  0008               	tblrd		*
  9027  00088E  CFF5 F0C4          	movff	tablat,printf@c
  9028  000892  0100               	movlb	0	; () banked
  9029  000894  51C4               	movf	printf@c& (0+255),w,b
  9030                           
  9031                           ; Switch size 1, requested type "space"
  9032                           ; Number of cases is 5, Range of values is 0 to 120
  9033                           ; switch strategies available:
  9034                           ; Name         Instructions Cycles
  9035                           ; simple_byte           16     9 (average)
  9036                           ;	Chosen strategy is simple_byte
  9037  000896  0A00               	xorlw	0	; case 0
  9038  000898  B4D8               	btfsc	status,2,c
  9039  00089A  0012               	return	
  9040  00089C  0A64               	xorlw	100	; case 100
  9041  00089E  B4D8               	btfsc	status,2,c
  9042  0008A0  D00A               	goto	l3522
  9043  0008A2  0A0D               	xorlw	13	; case 105
  9044  0008A4  B4D8               	btfsc	status,2,c
  9045  0008A6  D007               	goto	l3522
  9046  0008A8  0A1C               	xorlw	28	; case 117
  9047  0008AA  B4D8               	btfsc	status,2,c
  9048  0008AC  D7E4               	goto	l3516
  9049  0008AE  0A0D               	xorlw	13	; case 120
  9050  0008B0  B4D8               	btfsc	status,2,c
  9051  0008B2  D7DE               	goto	l3514
  9052  0008B4  D143               	goto	l3620
  9053  0008B6                     l3522:
  9054                           
  9055                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  9056  0008B6  C0C1  F0B7         	movff	printf@flag,??_printf
  9057  0008BA  0EC0               	movlw	192
  9058  0008BC  0100               	movlb	0	; () banked
  9059  0008BE  17B7               	andwf	??_printf& (0+255),f,b
  9060  0008C0  A4D8               	btfss	status,2,c
  9061  0008C2  D019               	goto	l3534
  9062                           
  9063                           ; BSR set to: 0
  9064                           ;doprnt.c: 1253: {
  9065                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9066  0008C4  C0BC  FFD9         	movff	printf@ap,fsr2l
  9067  0008C8  C0BD  FFDA         	movff	printf@ap+1,fsr2h
  9068  0008CC  CFDE F0BF          	movff	postinc2,printf@val
  9069  0008D0  CFDD F0C0          	movff	postdec2,printf@val+1
  9070                           
  9071                           ; BSR set to: 0
  9072  0008D4  0E02               	movlw	2
  9073  0008D6  0100               	movlb	0	; () banked
  9074  0008D8  27BC               	addwf	printf@ap& (0+255),f,b
  9075  0008DA  0E00               	movlw	0
  9076  0008DC  23BD               	addwfc	(printf@ap+1)& (0+255),f,b
  9077                           
  9078                           ; BSR set to: 0
  9079                           ;doprnt.c: 1261: if((int)val < 0) {
  9080  0008DE  0100               	movlb	0	; () banked
  9081  0008E0  AFC0               	btfss	(printf@val+1)& (0+255),7,b
  9082  0008E2  D053               	goto	l3568
  9083                           
  9084                           ; BSR set to: 0
  9085                           ;doprnt.c: 1262: flag |= 0x03;
  9086  0008E4  0E03               	movlw	3
  9087  0008E6  0100               	movlb	0	; () banked
  9088  0008E8  13C1               	iorwf	printf@flag& (0+255),f,b
  9089                           
  9090                           ; BSR set to: 0
  9091                           ;doprnt.c: 1263: val = -val;
  9092  0008EA  0100               	movlb	0	; () banked
  9093  0008EC  6DBF               	negf	printf@val& (0+255),b
  9094  0008EE  1FC0               	comf	(printf@val+1)& (0+255),f,b
  9095  0008F0  B0D8               	btfsc	status,0,c
  9096  0008F2  2BC0               	incf	(printf@val+1)& (0+255),f,b
  9097                           
  9098                           ; BSR set to: 0
  9099                           ;doprnt.c: 1264: }
  9100                           ;doprnt.c: 1266: }
  9101  0008F4  D04A               	goto	l3568
  9102  0008F6                     l3534:
  9103                           
  9104                           ; BSR set to: 0
  9105                           ;doprnt.c: 1268: else
  9106                           ;doprnt.c: 1273: {
  9107                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9108  0008F6  C0BC  FFD9         	movff	printf@ap,fsr2l
  9109  0008FA  C0BD  FFDA         	movff	printf@ap+1,fsr2h
  9110  0008FE  CFDE F0BF          	movff	postinc2,printf@val
  9111  000902  CFDD F0C0          	movff	postdec2,printf@val+1
  9112                           
  9113                           ; BSR set to: 0
  9114  000906  0E02               	movlw	2
  9115  000908  0100               	movlb	0	; () banked
  9116  00090A  27BC               	addwf	printf@ap& (0+255),f,b
  9117  00090C  0E00               	movlw	0
  9118  00090E  23BD               	addwfc	(printf@ap+1)& (0+255),f,b
  9119                           
  9120                           ; BSR set to: 0
  9121                           ;doprnt.c: 1287: }
  9122                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  9123  000910  D03C               	goto	l3568
  9124  000912                     l3538:
  9125                           
  9126                           ; BSR set to: 0
  9127                           ;doprnt.c: 1302: case 0xC0:
  9128                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9129  000912  0E01               	movlw	1
  9130  000914  0100               	movlb	0	; () banked
  9131  000916  6FC4               	movwf	printf@c& (0+255),b
  9132  000918                     l3540:
  9133                           
  9134                           ; BSR set to: 0
  9135  000918  0E05               	movlw	5
  9136  00091A  0100               	movlb	0	; () banked
  9137  00091C  19C4               	xorwf	printf@c& (0+255),w,b
  9138  00091E  B4D8               	btfsc	status,2,c
  9139  000920  D040               	goto	l3570
  9140                           
  9141                           ; BSR set to: 0
  9142                           ;doprnt.c: 1306: if(val < dpowers[c])
  9143                           
  9144                           ; BSR set to: 0
  9145                           
  9146                           ; BSR set to: 0
  9147  000922  0100               	movlb	0	; () banked
  9148  000924  51C4               	movf	printf@c& (0+255),w,b
  9149  000926  0D02               	mullw	2
  9150  000928  0E96               	movlw	low _dpowers
  9151  00092A  24F3               	addwf	prodl,w,c
  9152  00092C  6EF6               	movwf	tblptrl,c
  9153  00092E  0EFE               	movlw	high _dpowers
  9154  000930  20F4               	addwfc	prodh,w,c
  9155  000932  6EF7               	movwf	tblptrh,c
  9156  000934                     	if	0	;There are less than 3 active tblptr bytes
  9157  000934                     	endif
  9158  000934  0009               	tblrd		*+
  9159  000936  50F5               	movf	tablat,w,c
  9160  000938  0100               	movlb	0	; () banked
  9161  00093A  5DBF               	subwf	printf@val& (0+255),w,b
  9162  00093C  0009               	tblrd		*+
  9163  00093E  50F5               	movf	tablat,w,c
  9164  000940  0100               	movlb	0	; () banked
  9165  000942  59C0               	subwfb	(printf@val+1)& (0+255),w,b
  9166  000944  A0D8               	btfss	status,0,c
  9167  000946  D02D               	goto	l3570
  9168                           
  9169                           ; BSR set to: 0
  9170                           
  9171                           ; BSR set to: 0
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;doprnt.c: 1307: break;
  9175  000948  0100               	movlb	0	; () banked
  9176  00094A  2BC4               	incf	printf@c& (0+255),f,b
  9177  00094C  D7E5               	goto	l3540
  9178  00094E                     l3552:
  9179                           
  9180                           ; BSR set to: 0
  9181                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9182  00094E  0E01               	movlw	1
  9183  000950  0100               	movlb	0	; () banked
  9184  000952  6FC4               	movwf	printf@c& (0+255),b
  9185  000954                     l3554:
  9186                           
  9187                           ; BSR set to: 0
  9188  000954  0E04               	movlw	4
  9189  000956  0100               	movlb	0	; () banked
  9190  000958  19C4               	xorwf	printf@c& (0+255),w,b
  9191  00095A  B4D8               	btfsc	status,2,c
  9192  00095C  D022               	goto	l3570
  9193                           
  9194                           ; BSR set to: 0
  9195                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9196                           
  9197                           ; BSR set to: 0
  9198                           
  9199                           ; BSR set to: 0
  9200  00095E  0100               	movlb	0	; () banked
  9201  000960  51C4               	movf	printf@c& (0+255),w,b
  9202  000962  0D02               	mullw	2
  9203  000964  0EA0               	movlw	low _hexpowers
  9204  000966  24F3               	addwf	prodl,w,c
  9205  000968  6EF6               	movwf	tblptrl,c
  9206  00096A  0EFE               	movlw	high _hexpowers
  9207  00096C  20F4               	addwfc	prodh,w,c
  9208  00096E  6EF7               	movwf	tblptrh,c
  9209  000970                     	if	0	;There are less than 3 active tblptr bytes
  9210  000970                     	endif
  9211  000970  0009               	tblrd		*+
  9212  000972  50F5               	movf	tablat,w,c
  9213  000974  0100               	movlb	0	; () banked
  9214  000976  5DBF               	subwf	printf@val& (0+255),w,b
  9215  000978  0009               	tblrd		*+
  9216  00097A  50F5               	movf	tablat,w,c
  9217  00097C  0100               	movlb	0	; () banked
  9218  00097E  59C0               	subwfb	(printf@val+1)& (0+255),w,b
  9219  000980  A0D8               	btfss	status,0,c
  9220  000982  D00F               	goto	l3570
  9221                           
  9222                           ; BSR set to: 0
  9223                           
  9224                           ; BSR set to: 0
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;doprnt.c: 1318: break;
  9228  000984  0100               	movlb	0	; () banked
  9229  000986  2BC4               	incf	printf@c& (0+255),f,b
  9230  000988  D7E5               	goto	l3554
  9231  00098A                     l3568:
  9232                           
  9233                           ; BSR set to: 0
  9234  00098A  0100               	movlb	0	; () banked
  9235  00098C  51C1               	movf	printf@flag& (0+255),w,b
  9236  00098E  0BC0               	andlw	192
  9237                           
  9238                           ; Switch size 1, requested type "space"
  9239                           ; Number of cases is 3, Range of values is 0 to 192
  9240                           ; switch strategies available:
  9241                           ; Name         Instructions Cycles
  9242                           ; simple_byte           10     6 (average)
  9243                           ;	Chosen strategy is simple_byte
  9244  000990  0A00               	xorlw	0	; case 0
  9245  000992  B4D8               	btfsc	status,2,c
  9246  000994  D7BE               	goto	l3538
  9247  000996  0A80               	xorlw	128	; case 128
  9248  000998  B4D8               	btfsc	status,2,c
  9249  00099A  D7D9               	goto	l3552
  9250  00099C  0A40               	xorlw	64	; case 192
  9251  00099E  B4D8               	btfsc	status,2,c
  9252  0009A0  D7B8               	goto	l3538
  9253  0009A2                     l3570:
  9254                           
  9255                           ; BSR set to: 0
  9256                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9257  0009A2  0100               	movlb	0	; () banked
  9258  0009A4  51C2               	movf	printf@width& (0+255),w,b
  9259  0009A6  0100               	movlb	0	; () banked
  9260  0009A8  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  9261  0009AA  B4D8               	btfsc	status,2,c
  9262  0009AC  D00B               	goto	l3576
  9263                           
  9264                           ; BSR set to: 0
  9265  0009AE  C0C1  F0B7         	movff	printf@flag,??_printf
  9266  0009B2  0E03               	movlw	3
  9267  0009B4  0100               	movlb	0	; () banked
  9268  0009B6  17B7               	andwf	??_printf& (0+255),f,b
  9269  0009B8  B4D8               	btfsc	status,2,c
  9270  0009BA  D004               	goto	l3576
  9271                           
  9272                           ; BSR set to: 0
  9273                           ;doprnt.c: 1346: width--;
  9274  0009BC  0100               	movlb	0	; () banked
  9275  0009BE  07C2               	decf	printf@width& (0+255),f,b
  9276  0009C0  A0D8               	btfss	status,0,c
  9277  0009C2  07C3               	decf	(printf@width+1)& (0+255),f,b
  9278  0009C4                     l3576:
  9279                           
  9280                           ; BSR set to: 0
  9281                           ;doprnt.c: 1381: if(width > c)
  9282  0009C4  0E80               	movlw	128
  9283  0009C6  0100               	movlb	0	; () banked
  9284  0009C8  BFC4               	btfsc	printf@c& (0+255),7,b
  9285  0009CA  0E7F               	movlw	127
  9286  0009CC  0100               	movlb	0	; () banked
  9287  0009CE  6FB7               	movwf	??_printf& (0+255),b
  9288  0009D0  0100               	movlb	0	; () banked
  9289  0009D2  51C2               	movf	printf@width& (0+255),w,b
  9290  0009D4  0100               	movlb	0	; () banked
  9291  0009D6  5DC4               	subwf	printf@c& (0+255),w,b
  9292  0009D8  0100               	movlb	0	; () banked
  9293  0009DA  51C3               	movf	(printf@width+1)& (0+255),w,b
  9294  0009DC  0A80               	xorlw	128
  9295  0009DE  0100               	movlb	0	; () banked
  9296  0009E0  59B7               	subwfb	??_printf& (0+255),w,b
  9297  0009E2  B0D8               	btfsc	status,0,c
  9298  0009E4  D00B               	goto	l3580
  9299                           
  9300                           ; BSR set to: 0
  9301                           ;doprnt.c: 1382: width -= c;
  9302  0009E6  0100               	movlb	0	; () banked
  9303  0009E8  51C4               	movf	printf@c& (0+255),w,b
  9304  0009EA  0100               	movlb	0	; () banked
  9305  0009EC  5FC2               	subwf	printf@width& (0+255),f,b
  9306  0009EE  0E00               	movlw	0
  9307  0009F0  0100               	movlb	0	; () banked
  9308  0009F2  BFC4               	btfsc	printf@c& (0+255),7,b
  9309  0009F4  0EFF               	movlw	255
  9310  0009F6  0100               	movlb	0	; () banked
  9311  0009F8  5BC3               	subwfb	(printf@width+1)& (0+255),f,b
  9312  0009FA  D005               	goto	l3582
  9313  0009FC                     l3580:
  9314                           
  9315                           ; BSR set to: 0
  9316                           ;doprnt.c: 1383: else
  9317                           ;doprnt.c: 1384: width = 0;
  9318  0009FC  0E00               	movlw	0
  9319  0009FE  0100               	movlb	0	; () banked
  9320  000A00  6FC3               	movwf	(printf@width+1)& (0+255),b
  9321  000A02  0E00               	movlw	0
  9322  000A04  6FC2               	movwf	printf@width& (0+255),b
  9323  000A06                     l3582:
  9324                           
  9325                           ; BSR set to: 0
  9326                           ;doprnt.c: 1387: if(flag & 0x04) {
  9327  000A06  0100               	movlb	0	; () banked
  9328  000A08  A5C1               	btfss	printf@flag& (0+255),2,b
  9329  000A0A  D018               	goto	l3594
  9330                           
  9331                           ; BSR set to: 0
  9332                           ;doprnt.c: 1392: if(flag & 0x03)
  9333  000A0C  C0C1  F0B7         	movff	printf@flag,??_printf
  9334  000A10  0E03               	movlw	3
  9335  000A12  0100               	movlb	0	; () banked
  9336  000A14  17B7               	andwf	??_printf& (0+255),f,b
  9337  000A16  B4D8               	btfsc	status,2,c
  9338  000A18  D003               	goto	l3588
  9339                           
  9340                           ; BSR set to: 0
  9341                           ;doprnt.c: 1393: (putch('-') );
  9342  000A1A  0E2D               	movlw	45
  9343  000A1C  ECDF  F015         	call	_putch
  9344  000A20                     l3588:
  9345                           
  9346                           ;doprnt.c: 1415: if(width)
  9347  000A20  0100               	movlb	0	; () banked
  9348  000A22  51C2               	movf	printf@width& (0+255),w,b
  9349  000A24  0100               	movlb	0	; () banked
  9350  000A26  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  9351  000A28  B4D8               	btfsc	status,2,c
  9352  000A2A  D025               	goto	l3604
  9353                           
  9354                           ; BSR set to: 0
  9355                           ;doprnt.c: 1417: (putch('0') );
  9356                           
  9357                           ; BSR set to: 0
  9358                           
  9359                           ;doprnt.c: 1416: do
  9360  000A2C  0E30               	movlw	48
  9361  000A2E  ECDF  F015         	call	_putch
  9362                           
  9363                           ;doprnt.c: 1418: while(--width);
  9364  000A32  0100               	movlb	0	; () banked
  9365  000A34  07C2               	decf	printf@width& (0+255),f,b
  9366  000A36  A0D8               	btfss	status,0,c
  9367  000A38  07C3               	decf	(printf@width+1)& (0+255),f,b
  9368  000A3A  D7F2               	goto	l3588
  9369  000A3C                     l3594:
  9370                           
  9371                           ; BSR set to: 0
  9372                           ;doprnt.c: 1422: {
  9373                           ;doprnt.c: 1424: if(width
  9374                           ;doprnt.c: 1428: )
  9375  000A3C  0100               	movlb	0	; () banked
  9376  000A3E  51C2               	movf	printf@width& (0+255),w,b
  9377  000A40  0100               	movlb	0	; () banked
  9378  000A42  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  9379  000A44  B4D8               	btfsc	status,2,c
  9380  000A46  D00D               	goto	l3600
  9381  000A48                     l3596:
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;doprnt.c: 1430: (putch(' ') );
  9385  000A48  0E20               	movlw	32
  9386  000A4A  ECDF  F015         	call	_putch
  9387                           
  9388                           ;doprnt.c: 1431: while(--width);
  9389  000A4E  0100               	movlb	0	; () banked
  9390  000A50  07C2               	decf	printf@width& (0+255),f,b
  9391  000A52  A0D8               	btfss	status,0,c
  9392  000A54  07C3               	decf	(printf@width+1)& (0+255),f,b
  9393  000A56  0100               	movlb	0	; () banked
  9394  000A58  51C2               	movf	printf@width& (0+255),w,b
  9395  000A5A  0100               	movlb	0	; () banked
  9396  000A5C  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  9397  000A5E  A4D8               	btfss	status,2,c
  9398  000A60  D7F3               	goto	l3596
  9399  000A62                     l3600:
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;doprnt.c: 1438: if(flag & 0x03)
  9403  000A62  C0C1  F0B7         	movff	printf@flag,??_printf
  9404  000A66  0E03               	movlw	3
  9405  000A68  0100               	movlb	0	; () banked
  9406  000A6A  17B7               	andwf	??_printf& (0+255),f,b
  9407  000A6C  B4D8               	btfsc	status,2,c
  9408  000A6E  D003               	goto	l3604
  9409                           
  9410                           ; BSR set to: 0
  9411                           ;doprnt.c: 1439: (putch('-') );
  9412  000A70  0E2D               	movlw	45
  9413  000A72  ECDF  F015         	call	_putch
  9414  000A76                     l3604:
  9415                           
  9416                           ;doprnt.c: 1469: }
  9417                           ;doprnt.c: 1472: prec = c;
  9418  000A76  C0C4  F0BE         	movff	printf@c,printf@prec
  9419                           
  9420                           ;doprnt.c: 1474: while(prec--) {
  9421  000A7A  D05A               	goto	l3618
  9422  000A7C                     l3606:
  9423                           
  9424                           ;doprnt.c: 1486: case 0xC0:
  9425                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9426  000A7C  0100               	movlb	0	; () banked
  9427  000A7E  51BE               	movf	printf@prec& (0+255),w,b
  9428  000A80  0D02               	mullw	2
  9429  000A82  0E96               	movlw	low _dpowers
  9430  000A84  24F3               	addwf	prodl,w,c
  9431  000A86  6EF6               	movwf	tblptrl,c
  9432  000A88  0EFE               	movlw	high _dpowers
  9433  000A8A  20F4               	addwfc	prodh,w,c
  9434  000A8C  6EF7               	movwf	tblptrh,c
  9435  000A8E                     	if	0	;There are less than 3 active tblptr bytes
  9436  000A8E                     	endif
  9437  000A8E  0009               	tblrd		*+
  9438  000A90  CFF5 F013          	movff	tablat,___lwdiv@divisor
  9439  000A94  000A               	tblrd		*-
  9440  000A96  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  9441  000A9A  C0BF  F011         	movff	printf@val,___lwdiv@dividend
  9442  000A9E  C0C0  F012         	movff	printf@val+1,___lwdiv@dividend+1
  9443  000AA2  EC75  F014         	call	___lwdiv	;wreg free
  9444  000AA6  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  9445  000AAA  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  9446  000AAE  0E00               	movlw	0
  9447  000AB0  6E1B               	movwf	___lwmod@divisor+1,c
  9448  000AB2  0E0A               	movlw	10
  9449  000AB4  6E1A               	movwf	___lwmod@divisor,c
  9450  000AB6  EC0D  F015         	call	___lwmod	;wreg free
  9451  000ABA  5018               	movf	?___lwmod,w,c
  9452  000ABC  0F30               	addlw	48
  9453  000ABE  0100               	movlb	0	; () banked
  9454  000AC0  6FC4               	movwf	printf@c& (0+255),b
  9455                           
  9456                           ;doprnt.c: 1491: break;
  9457  000AC2  D032               	goto	l3616
  9458  000AC4                     l3608:
  9459                           
  9460                           ; BSR set to: 0
  9461                           ;doprnt.c: 1499: {
  9462                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9463  000AC4  C0BF  F011         	movff	printf@val,___lwdiv@dividend
  9464  000AC8  C0C0  F012         	movff	printf@val+1,___lwdiv@dividend+1
  9465  000ACC  0100               	movlb	0	; () banked
  9466  000ACE  51BE               	movf	printf@prec& (0+255),w,b
  9467  000AD0  0D02               	mullw	2
  9468  000AD2  0EA0               	movlw	low _hexpowers
  9469  000AD4  24F3               	addwf	prodl,w,c
  9470  000AD6  6EF6               	movwf	tblptrl,c
  9471  000AD8  0EFE               	movlw	high _hexpowers
  9472  000ADA  20F4               	addwfc	prodh,w,c
  9473  000ADC  6EF7               	movwf	tblptrh,c
  9474  000ADE                     	if	0	;There are less than 3 active tblptr bytes
  9475  000ADE                     	endif
  9476  000ADE  0009               	tblrd		*+
  9477  000AE0  CFF5 F013          	movff	tablat,___lwdiv@divisor
  9478  000AE4  000A               	tblrd		*-
  9479  000AE6  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  9480  000AEA  EC75  F014         	call	___lwdiv	;wreg free
  9481  000AEE  5011               	movf	?___lwdiv,w,c
  9482  000AF0  0B0F               	andlw	15
  9483  000AF2  0100               	movlb	0	; () banked
  9484  000AF4  6FBB               	movwf	printf@idx& (0+255),b
  9485                           
  9486                           ; BSR set to: 0
  9487                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  9488  000AF6  0100               	movlb	0	; () banked
  9489  000AF8  51BB               	movf	printf@idx& (0+255),w,b
  9490  000AFA  0D01               	mullw	1
  9491  000AFC  0E44               	movlw	low STR_20
  9492  000AFE  24F3               	addwf	prodl,w,c
  9493  000B00  6EF6               	movwf	tblptrl,c
  9494  000B02  0EFF               	movlw	high STR_20
  9495  000B04  20F4               	addwfc	prodh,w,c
  9496  000B06  6EF7               	movwf	tblptrh,c
  9497  000B08                     	if	0	;There are less than 3 active tblptr bytes
  9498  000B08                     	endif
  9499  000B08  0008               	tblrd		*
  9500  000B0A  CFF5 F0C4          	movff	tablat,printf@c
  9501                           
  9502                           ; BSR set to: 0
  9503                           ;doprnt.c: 1523: }
  9504                           
  9505                           ;doprnt.c: 1508: }
  9506                           ;doprnt.c: 1510: break;
  9507  000B0E  D00C               	goto	l3616
  9508  000B10                     l3614:
  9509  000B10  0100               	movlb	0	; () banked
  9510  000B12  51C1               	movf	printf@flag& (0+255),w,b
  9511  000B14  0BC0               	andlw	192
  9512                           
  9513                           ; Switch size 1, requested type "space"
  9514                           ; Number of cases is 3, Range of values is 0 to 192
  9515                           ; switch strategies available:
  9516                           ; Name         Instructions Cycles
  9517                           ; simple_byte           10     6 (average)
  9518                           ;	Chosen strategy is simple_byte
  9519  000B16  0A00               	xorlw	0	; case 0
  9520  000B18  B4D8               	btfsc	status,2,c
  9521  000B1A  D7B0               	goto	l3606
  9522  000B1C  0A80               	xorlw	128	; case 128
  9523  000B1E  B4D8               	btfsc	status,2,c
  9524  000B20  D7D1               	goto	l3608
  9525  000B22  0A40               	xorlw	64	; case 192
  9526  000B24  B4D8               	btfsc	status,2,c
  9527  000B26  D7AA               	goto	l3606
  9528  000B28                     l3616:
  9529                           
  9530                           ; BSR set to: 0
  9531                           ;doprnt.c: 1524: (putch(c) );
  9532  000B28  0100               	movlb	0	; () banked
  9533  000B2A  51C4               	movf	printf@c& (0+255),w,b
  9534  000B2C  ECDF  F015         	call	_putch
  9535  000B30                     l3618:
  9536  000B30  0100               	movlb	0	; () banked
  9537  000B32  07BE               	decf	printf@prec& (0+255),f,b
  9538  000B34  0100               	movlb	0	; () banked
  9539  000B36  29BE               	incf	printf@prec& (0+255),w,b
  9540  000B38  A4D8               	btfss	status,2,c
  9541  000B3A  D7EA               	goto	l3614
  9542  000B3C                     l3620:
  9543  000B3C  C0AF  FFF6         	movff	printf@f,tblptrl
  9544  000B40  C0B0  FFF7         	movff	printf@f+1,tblptrh
  9545  000B44  0100               	movlb	0	; () banked
  9546  000B46  4BAF               	infsnz	printf@f& (0+255),f,b
  9547  000B48  2BB0               	incf	(printf@f+1)& (0+255),f,b
  9548  000B4A                     	if	0	;tblptru may be non-zero
  9549  000B4A                     	endif
  9550  000B4A                     	if	0	;tblptru may be non-zero
  9551  000B4A                     	endif
  9552  000B4A  0008               	tblrd		*
  9553  000B4C  CFF5 F0C4          	movff	tablat,printf@c
  9554  000B50  0100               	movlb	0	; () banked
  9555  000B52  51C4               	movf	printf@c& (0+255),w,b
  9556  000B54  B4D8               	btfsc	status,2,c
  9557  000B56  0012               	return	
  9558  000B58  D620               	goto	l3490
  9559  000B5A                     __end_of_printf:
  9560                           	opt stack 0
  9561                           tblptru	equ	0xFF8
  9562                           tblptrh	equ	0xFF7
  9563                           tblptrl	equ	0xFF6
  9564                           tablat	equ	0xFF5
  9565                           prodh	equ	0xFF4
  9566                           prodl	equ	0xFF3
  9567                           intcon	equ	0xFF2
  9568                           intcon2	equ	0xFF1
  9569                           intcon3	equ	0xFF0
  9570                           postinc0	equ	0xFEE
  9571                           wreg	equ	0xFE8
  9572                           postdec1	equ	0xFE5
  9573                           fsr1l	equ	0xFE1
  9574                           indf2	equ	0xFDF
  9575                           postinc2	equ	0xFDE
  9576                           postdec2	equ	0xFDD
  9577                           fsr2h	equ	0xFDA
  9578                           fsr2l	equ	0xFD9
  9579                           status	equ	0xFD8
  9580                           
  9581 ;; *************** function _putch *****************
  9582 ;; Defined at:
  9583 ;;		line 30 in file "lcd.c"
  9584 ;; Parameters:    Size  Location     Type
  9585 ;;  data            1    wreg     unsigned char 
  9586 ;; Auto vars:     Size  Location     Type
  9587 ;;  data            1   18[COMRAM] unsigned char 
  9588 ;; Return value:  Size  Location     Type
  9589 ;;                  1    wreg      void 
  9590 ;; Registers used:
  9591 ;;		wreg, status,2, status,0, cstack
  9592 ;; Tracked objects:
  9593 ;;		On entry : 0/0
  9594 ;;		On exit  : 0/0
  9595 ;;		Unchanged: 0/0
  9596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9598 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9600 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9601 ;;Total ram usage:        1 bytes
  9602 ;; Hardware stack levels used:    1
  9603 ;; Hardware stack levels required when called:    2
  9604 ;; This function calls:
  9605 ;;		_lcdNibble
  9606 ;; This function is called by:
  9607 ;;		_printf
  9608 ;; This function uses a non-reentrant model
  9609 ;;
  9610                           
  9611                           	psect	text40
  9612  002BBE                     __ptext40:
  9613                           	opt stack 0
  9614  002BBE                     _putch:
  9615                           	opt stack 26
  9616                           
  9617                           ;incstack = 0
  9618                           ;putch@data stored from wreg
  9619  002BBE  6E13               	movwf	putch@data,c
  9620                           
  9621                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  9622  002BC0  848C               	bsf	3980,2,c	;volatile
  9623                           
  9624                           ;lcd.c: 32: lcdNibble(data);
  9625  002BC2  5013               	movf	putch@data,w,c
  9626  002BC4  EC9E  F014         	call	_lcdNibble
  9627  002BC8  0012               	return		;funcret
  9628  002BCA                     __end_of_putch:
  9629                           	opt stack 0
  9630                           tblptru	equ	0xFF8
  9631                           tblptrh	equ	0xFF7
  9632                           tblptrl	equ	0xFF6
  9633                           tablat	equ	0xFF5
  9634                           prodh	equ	0xFF4
  9635                           prodl	equ	0xFF3
  9636                           intcon	equ	0xFF2
  9637                           intcon2	equ	0xFF1
  9638                           intcon3	equ	0xFF0
  9639                           postinc0	equ	0xFEE
  9640                           wreg	equ	0xFE8
  9641                           postdec1	equ	0xFE5
  9642                           fsr1l	equ	0xFE1
  9643                           indf2	equ	0xFDF
  9644                           postinc2	equ	0xFDE
  9645                           postdec2	equ	0xFDD
  9646                           fsr2h	equ	0xFDA
  9647                           fsr2l	equ	0xFD9
  9648                           status	equ	0xFD8
  9649                           
  9650 ;; *************** function _isdigit *****************
  9651 ;; Defined at:
  9652 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  9653 ;; Parameters:    Size  Location     Type
  9654 ;;  c               1    wreg     unsigned char 
  9655 ;; Auto vars:     Size  Location     Type
  9656 ;;  c               1   18[COMRAM] unsigned char 
  9657 ;; Return value:  Size  Location     Type
  9658 ;;		None               void
  9659 ;; Registers used:
  9660 ;;		wreg, status,2, status,0
  9661 ;; Tracked objects:
  9662 ;;		On entry : 0/0
  9663 ;;		On exit  : 0/0
  9664 ;;		Unchanged: 0/0
  9665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9667 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9668 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9669 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9670 ;;Total ram usage:        3 bytes
  9671 ;; Hardware stack levels used:    1
  9672 ;; Hardware stack levels required when called:    1
  9673 ;; This function calls:
  9674 ;;		Nothing
  9675 ;; This function is called by:
  9676 ;;		_printf
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           	psect	text41
  9681  002B7E                     __ptext41:
  9682                           	opt stack 0
  9683  002B7E                     _isdigit:
  9684                           	opt stack 27
  9685                           
  9686                           ;incstack = 0
  9687                           ;isdigit@c stored from wreg
  9688  002B7E  6E13               	movwf	isdigit@c,c
  9689  002B80  0E00               	movlw	0
  9690  002B82  6E12               	movwf	_isdigit$947,c
  9691  002B84  0E3A               	movlw	58
  9692  002B86  6013               	cpfslt	isdigit@c,c
  9693  002B88  D005               	goto	l3432
  9694  002B8A  0E2F               	movlw	47
  9695  002B8C  6413               	cpfsgt	isdigit@c,c
  9696  002B8E  D002               	goto	l3432
  9697  002B90  0E01               	movlw	1
  9698  002B92  6E12               	movwf	_isdigit$947,c
  9699  002B94                     l3432:
  9700  002B94  C012  F011         	movff	_isdigit$947,??_isdigit
  9701  002B98  3011               	rrcf	??_isdigit,w,c
  9702  002B9A  0012               	return	
  9703  002B9C                     __end_of_isdigit:
  9704                           	opt stack 0
  9705                           tblptru	equ	0xFF8
  9706                           tblptrh	equ	0xFF7
  9707                           tblptrl	equ	0xFF6
  9708                           tablat	equ	0xFF5
  9709                           prodh	equ	0xFF4
  9710                           prodl	equ	0xFF3
  9711                           intcon	equ	0xFF2
  9712                           intcon2	equ	0xFF1
  9713                           intcon3	equ	0xFF0
  9714                           postinc0	equ	0xFEE
  9715                           wreg	equ	0xFE8
  9716                           postdec1	equ	0xFE5
  9717                           fsr1l	equ	0xFE1
  9718                           indf2	equ	0xFDF
  9719                           postinc2	equ	0xFDE
  9720                           postdec2	equ	0xFDD
  9721                           fsr2h	equ	0xFDA
  9722                           fsr2l	equ	0xFD9
  9723                           status	equ	0xFD8
  9724                           
  9725 ;; *************** function ___wmul *****************
  9726 ;; Defined at:
  9727 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;  multiplier      2   16[COMRAM] unsigned int 
  9730 ;;  multiplicand    2   18[COMRAM] unsigned int 
  9731 ;; Auto vars:     Size  Location     Type
  9732 ;;  product         2   20[COMRAM] unsigned int 
  9733 ;; Return value:  Size  Location     Type
  9734 ;;                  2   16[COMRAM] unsigned int 
  9735 ;; Registers used:
  9736 ;;		wreg, status,2, status,0, prodl, prodh
  9737 ;; Tracked objects:
  9738 ;;		On entry : 0/0
  9739 ;;		On exit  : 0/0
  9740 ;;		Unchanged: 0/0
  9741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9742 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9743 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9745 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9746 ;;Total ram usage:        6 bytes
  9747 ;; Hardware stack levels used:    1
  9748 ;; Hardware stack levels required when called:    1
  9749 ;; This function calls:
  9750 ;;		Nothing
  9751 ;; This function is called by:
  9752 ;;		_time_difference
  9753 ;;		_printf
  9754 ;;		_eval_poly
  9755 ;;		_servo_rotate
  9756 ;; This function uses a non-reentrant model
  9757 ;;
  9758                           
  9759                           	psect	text42
  9760  002B34                     __ptext42:
  9761                           	opt stack 0
  9762  002B34                     ___wmul:
  9763                           	opt stack 23
  9764                           
  9765                           ;incstack = 0
  9766  002B34  5011               	movf	___wmul@multiplier,w,c
  9767  002B36  0213               	mulwf	___wmul@multiplicand,c
  9768  002B38  CFF3 F015          	movff	prodl,___wmul@product
  9769  002B3C  CFF4 F016          	movff	prodh,___wmul@product+1
  9770  002B40  5011               	movf	___wmul@multiplier,w,c
  9771  002B42  0214               	mulwf	___wmul@multiplicand+1,c
  9772  002B44  50F3               	movf	prodl,w,c
  9773  002B46  2616               	addwf	___wmul@product+1,f,c
  9774  002B48  5012               	movf	___wmul@multiplier+1,w,c
  9775  002B4A  0213               	mulwf	___wmul@multiplicand,c
  9776  002B4C  50F3               	movf	prodl,w,c
  9777  002B4E  2616               	addwf	___wmul@product+1,f,c
  9778  002B50  C015  F011         	movff	___wmul@product,?___wmul
  9779  002B54  C016  F012         	movff	___wmul@product+1,?___wmul+1
  9780  002B58  0012               	return	
  9781  002B5A                     __end_of___wmul:
  9782                           	opt stack 0
  9783                           tblptru	equ	0xFF8
  9784                           tblptrh	equ	0xFF7
  9785                           tblptrl	equ	0xFF6
  9786                           tablat	equ	0xFF5
  9787                           prodh	equ	0xFF4
  9788                           prodl	equ	0xFF3
  9789                           intcon	equ	0xFF2
  9790                           intcon2	equ	0xFF1
  9791                           intcon3	equ	0xFF0
  9792                           postinc0	equ	0xFEE
  9793                           wreg	equ	0xFE8
  9794                           postdec1	equ	0xFE5
  9795                           fsr1l	equ	0xFE1
  9796                           indf2	equ	0xFDF
  9797                           postinc2	equ	0xFDE
  9798                           postdec2	equ	0xFDD
  9799                           fsr2h	equ	0xFDA
  9800                           fsr2l	equ	0xFD9
  9801                           status	equ	0xFD8
  9802                           
  9803 ;; *************** function ___lwmod *****************
  9804 ;; Defined at:
  9805 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;  dividend        2   23[COMRAM] unsigned int 
  9808 ;;  divisor         2   25[COMRAM] unsigned int 
  9809 ;; Auto vars:     Size  Location     Type
  9810 ;;  counter         1   27[COMRAM] unsigned char 
  9811 ;; Return value:  Size  Location     Type
  9812 ;;                  2   23[COMRAM] unsigned int 
  9813 ;; Registers used:
  9814 ;;		wreg, status,2, status,0
  9815 ;; Tracked objects:
  9816 ;;		On entry : 0/0
  9817 ;;		On exit  : 0/0
  9818 ;;		Unchanged: 0/0
  9819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9820 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9824 ;;Total ram usage:        5 bytes
  9825 ;; Hardware stack levels used:    1
  9826 ;; Hardware stack levels required when called:    1
  9827 ;; This function calls:
  9828 ;;		Nothing
  9829 ;; This function is called by:
  9830 ;;		_printf
  9831 ;; This function uses a non-reentrant model
  9832 ;;
  9833                           
  9834                           	psect	text43
  9835  002A1A                     __ptext43:
  9836                           	opt stack 0
  9837  002A1A                     ___lwmod:
  9838                           	opt stack 27
  9839                           
  9840                           ;incstack = 0
  9841  002A1A  501A               	movf	___lwmod@divisor,w,c
  9842  002A1C  101B               	iorwf	___lwmod@divisor+1,w,c
  9843  002A1E  B4D8               	btfsc	status,2,c
  9844  002A20  D018               	goto	l868
  9845  002A22  0E01               	movlw	1
  9846  002A24  6E1C               	movwf	___lwmod@counter,c
  9847  002A26  D004               	goto	l3464
  9848  002A28                     l3462:
  9849  002A28  90D8               	bcf	status,0,c
  9850  002A2A  361A               	rlcf	___lwmod@divisor,f,c
  9851  002A2C  361B               	rlcf	___lwmod@divisor+1,f,c
  9852  002A2E  2A1C               	incf	___lwmod@counter,f,c
  9853  002A30                     l3464:
  9854  002A30  AE1B               	btfss	___lwmod@divisor+1,7,c
  9855  002A32  D7FA               	goto	l3462
  9856  002A34                     l3466:
  9857  002A34  501A               	movf	___lwmod@divisor,w,c
  9858  002A36  5C18               	subwf	___lwmod@dividend,w,c
  9859  002A38  501B               	movf	___lwmod@divisor+1,w,c
  9860  002A3A  5819               	subwfb	___lwmod@dividend+1,w,c
  9861  002A3C  A0D8               	btfss	status,0,c
  9862  002A3E  D004               	goto	l3470
  9863  002A40  501A               	movf	___lwmod@divisor,w,c
  9864  002A42  5E18               	subwf	___lwmod@dividend,f,c
  9865  002A44  501B               	movf	___lwmod@divisor+1,w,c
  9866  002A46  5A19               	subwfb	___lwmod@dividend+1,f,c
  9867  002A48                     l3470:
  9868  002A48  90D8               	bcf	status,0,c
  9869  002A4A  321B               	rrcf	___lwmod@divisor+1,f,c
  9870  002A4C  321A               	rrcf	___lwmod@divisor,f,c
  9871  002A4E  2E1C               	decfsz	___lwmod@counter,f,c
  9872  002A50  D7F1               	goto	l3466
  9873  002A52                     l868:
  9874  002A52  C018  F018         	movff	___lwmod@dividend,?___lwmod
  9875  002A56  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  9876  002A5A  0012               	return		;funcret
  9877  002A5C                     __end_of___lwmod:
  9878                           	opt stack 0
  9879                           tblptru	equ	0xFF8
  9880                           tblptrh	equ	0xFF7
  9881                           tblptrl	equ	0xFF6
  9882                           tablat	equ	0xFF5
  9883                           prodh	equ	0xFF4
  9884                           prodl	equ	0xFF3
  9885                           intcon	equ	0xFF2
  9886                           intcon2	equ	0xFF1
  9887                           intcon3	equ	0xFF0
  9888                           postinc0	equ	0xFEE
  9889                           wreg	equ	0xFE8
  9890                           postdec1	equ	0xFE5
  9891                           fsr1l	equ	0xFE1
  9892                           indf2	equ	0xFDF
  9893                           postinc2	equ	0xFDE
  9894                           postdec2	equ	0xFDD
  9895                           fsr2h	equ	0xFDA
  9896                           fsr2l	equ	0xFD9
  9897                           status	equ	0xFD8
  9898                           
  9899 ;; *************** function ___lwdiv *****************
  9900 ;; Defined at:
  9901 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9902 ;; Parameters:    Size  Location     Type
  9903 ;;  dividend        2   16[COMRAM] unsigned int 
  9904 ;;  divisor         2   18[COMRAM] unsigned int 
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;  quotient        2   20[COMRAM] unsigned int 
  9907 ;;  counter         1   22[COMRAM] unsigned char 
  9908 ;; Return value:  Size  Location     Type
  9909 ;;                  2   16[COMRAM] unsigned int 
  9910 ;; Registers used:
  9911 ;;		wreg, status,2, status,0
  9912 ;; Tracked objects:
  9913 ;;		On entry : 0/0
  9914 ;;		On exit  : 0/0
  9915 ;;		Unchanged: 0/0
  9916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9917 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9918 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9920 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9921 ;;Total ram usage:        7 bytes
  9922 ;; Hardware stack levels used:    1
  9923 ;; Hardware stack levels required when called:    1
  9924 ;; This function calls:
  9925 ;;		Nothing
  9926 ;; This function is called by:
  9927 ;;		_printf
  9928 ;; This function uses a non-reentrant model
  9929 ;;
  9930                           
  9931                           	psect	text44
  9932  0028EA                     __ptext44:
  9933                           	opt stack 0
  9934  0028EA                     ___lwdiv:
  9935                           	opt stack 27
  9936                           
  9937                           ;incstack = 0
  9938  0028EA  0E00               	movlw	0
  9939  0028EC  6E16               	movwf	___lwdiv@quotient+1,c
  9940  0028EE  0E00               	movlw	0
  9941  0028F0  6E15               	movwf	___lwdiv@quotient,c
  9942  0028F2  5013               	movf	___lwdiv@divisor,w,c
  9943  0028F4  1014               	iorwf	___lwdiv@divisor+1,w,c
  9944  0028F6  B4D8               	btfsc	status,2,c
  9945  0028F8  D01C               	goto	l858
  9946  0028FA  0E01               	movlw	1
  9947  0028FC  6E17               	movwf	___lwdiv@counter,c
  9948  0028FE  D004               	goto	l3444
  9949  002900                     l3442:
  9950  002900  90D8               	bcf	status,0,c
  9951  002902  3613               	rlcf	___lwdiv@divisor,f,c
  9952  002904  3614               	rlcf	___lwdiv@divisor+1,f,c
  9953  002906  2A17               	incf	___lwdiv@counter,f,c
  9954  002908                     l3444:
  9955  002908  AE14               	btfss	___lwdiv@divisor+1,7,c
  9956  00290A  D7FA               	goto	l3442
  9957  00290C                     l3446:
  9958  00290C  90D8               	bcf	status,0,c
  9959  00290E  3615               	rlcf	___lwdiv@quotient,f,c
  9960  002910  3616               	rlcf	___lwdiv@quotient+1,f,c
  9961  002912  5013               	movf	___lwdiv@divisor,w,c
  9962  002914  5C11               	subwf	___lwdiv@dividend,w,c
  9963  002916  5014               	movf	___lwdiv@divisor+1,w,c
  9964  002918  5812               	subwfb	___lwdiv@dividend+1,w,c
  9965  00291A  A0D8               	btfss	status,0,c
  9966  00291C  D005               	goto	l3454
  9967  00291E  5013               	movf	___lwdiv@divisor,w,c
  9968  002920  5E11               	subwf	___lwdiv@dividend,f,c
  9969  002922  5014               	movf	___lwdiv@divisor+1,w,c
  9970  002924  5A12               	subwfb	___lwdiv@dividend+1,f,c
  9971  002926  8015               	bsf	___lwdiv@quotient,0,c
  9972  002928                     l3454:
  9973  002928  90D8               	bcf	status,0,c
  9974  00292A  3214               	rrcf	___lwdiv@divisor+1,f,c
  9975  00292C  3213               	rrcf	___lwdiv@divisor,f,c
  9976  00292E  2E17               	decfsz	___lwdiv@counter,f,c
  9977  002930  D7ED               	goto	l3446
  9978  002932                     l858:
  9979  002932  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
  9980  002936  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9981  00293A  0012               	return		;funcret
  9982  00293C                     __end_of___lwdiv:
  9983                           	opt stack 0
  9984                           tblptru	equ	0xFF8
  9985                           tblptrh	equ	0xFF7
  9986                           tblptrl	equ	0xFF6
  9987                           tablat	equ	0xFF5
  9988                           prodh	equ	0xFF4
  9989                           prodl	equ	0xFF3
  9990                           intcon	equ	0xFF2
  9991                           intcon2	equ	0xFF1
  9992                           intcon3	equ	0xFF0
  9993                           postinc0	equ	0xFEE
  9994                           wreg	equ	0xFE8
  9995                           postdec1	equ	0xFE5
  9996                           fsr1l	equ	0xFE1
  9997                           indf2	equ	0xFDF
  9998                           postinc2	equ	0xFDE
  9999                           postdec2	equ	0xFDD
 10000                           fsr2h	equ	0xFDA
 10001                           fsr2l	equ	0xFD9
 10002                           status	equ	0xFD8
 10003                           
 10004 ;; *************** function _lcdInst *****************
 10005 ;; Defined at:
 10006 ;;		line 25 in file "lcd.c"
 10007 ;; Parameters:    Size  Location     Type
 10008 ;;  data            1    wreg     unsigned char 
 10009 ;; Auto vars:     Size  Location     Type
 10010 ;;  data            1   18[COMRAM] unsigned char 
 10011 ;; Return value:  Size  Location     Type
 10012 ;;                  1    wreg      void 
 10013 ;; Registers used:
 10014 ;;		wreg, status,2, status,0, cstack
 10015 ;; Tracked objects:
 10016 ;;		On entry : 0/0
 10017 ;;		On exit  : 0/0
 10018 ;;		Unchanged: 0/0
 10019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10023 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10024 ;;Total ram usage:        1 bytes
 10025 ;; Hardware stack levels used:    1
 10026 ;; Hardware stack levels required when called:    2
 10027 ;; This function calls:
 10028 ;;		_lcdNibble
 10029 ;; This function is called by:
 10030 ;;		_main
 10031 ;;		_init_operation
 10032 ;;		_runtime
 10033 ;;		_bottle_count
 10034 ;;		_operation_end
 10035 ;;		_date_time
 10036 ;;		_initLCD
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           	psect	text45
 10041  002BCA                     __ptext45:
 10042                           	opt stack 0
 10043  002BCA                     _lcdInst:
 10044                           	opt stack 27
 10045                           
 10046                           ;incstack = 0
 10047                           ;lcdInst@data stored from wreg
 10048  002BCA  6E13               	movwf	lcdInst@data,c
 10049                           
 10050                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 10051  002BCC  948C               	bcf	3980,2,c	;volatile
 10052                           
 10053                           ;lcd.c: 27: lcdNibble(data);
 10054  002BCE  5013               	movf	lcdInst@data,w,c
 10055  002BD0  EC9E  F014         	call	_lcdNibble
 10056  002BD4  0012               	return		;funcret
 10057  002BD6                     __end_of_lcdInst:
 10058                           	opt stack 0
 10059                           tblptru	equ	0xFF8
 10060                           tblptrh	equ	0xFF7
 10061                           tblptrl	equ	0xFF6
 10062                           tablat	equ	0xFF5
 10063                           prodh	equ	0xFF4
 10064                           prodl	equ	0xFF3
 10065                           intcon	equ	0xFF2
 10066                           intcon2	equ	0xFF1
 10067                           intcon3	equ	0xFF0
 10068                           postinc0	equ	0xFEE
 10069                           wreg	equ	0xFE8
 10070                           postdec1	equ	0xFE5
 10071                           fsr1l	equ	0xFE1
 10072                           indf2	equ	0xFDF
 10073                           postinc2	equ	0xFDE
 10074                           postdec2	equ	0xFDD
 10075                           fsr2h	equ	0xFDA
 10076                           fsr2l	equ	0xFD9
 10077                           status	equ	0xFD8
 10078                           
 10079 ;; *************** function _lcdNibble *****************
 10080 ;; Defined at:
 10081 ;;		line 35 in file "lcd.c"
 10082 ;; Parameters:    Size  Location     Type
 10083 ;;  data            1    wreg     unsigned char 
 10084 ;; Auto vars:     Size  Location     Type
 10085 ;;  data            1   17[COMRAM] unsigned char 
 10086 ;;  temp            1   16[COMRAM] unsigned char 
 10087 ;; Return value:  Size  Location     Type
 10088 ;;                  1    wreg      void 
 10089 ;; Registers used:
 10090 ;;		wreg, status,2, status,0
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10097 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10099 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10100 ;;Total ram usage:        2 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; Hardware stack levels required when called:    1
 10103 ;; This function calls:
 10104 ;;		Nothing
 10105 ;; This function is called by:
 10106 ;;		_lcdInst
 10107 ;;		_putch
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111                           	psect	text46
 10112  00293C                     __ptext46:
 10113                           	opt stack 0
 10114  00293C                     _lcdNibble:
 10115                           	opt stack 26
 10116                           
 10117                           ;incstack = 0
 10118                           ;lcdNibble@data stored from wreg
 10119  00293C  6E12               	movwf	lcdNibble@data,c
 10120                           
 10121                           ;lcd.c: 37: char temp = data & 0xF0;
 10122  00293E  5012               	movf	lcdNibble@data,w,c
 10123  002940  0BF0               	andlw	240
 10124  002942  6E11               	movwf	lcdNibble@temp,c
 10125                           
 10126                           ;lcd.c: 38: LATD = LATD & 0x0F;
 10127  002944  508C               	movf	3980,w,c	;volatile
 10128  002946  0B0F               	andlw	15
 10129  002948  6E8C               	movwf	3980,c	;volatile
 10130                           
 10131                           ;lcd.c: 39: LATD = temp | LATD;
 10132  00294A  5011               	movf	lcdNibble@temp,w,c
 10133  00294C  108C               	iorwf	3980,w,c	;volatile
 10134  00294E  6E8C               	movwf	3980,c	;volatile
 10135                           
 10136                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 10137  002950  968C               	bcf	3980,3,c	;volatile
 10138                           
 10139                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10140  002952  0E19               	movlw	25
 10141  002954                     u4017:
 10142  002954  2EE8               	decfsz	wreg,f,c
 10143  002956  D7FE               	bra	u4017
 10144                           
 10145                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 10146  002958  868C               	bsf	3980,3,c	;volatile
 10147                           
 10148                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10149  00295A  0E19               	movlw	25
 10150  00295C                     u4027:
 10151  00295C  2EE8               	decfsz	wreg,f,c
 10152  00295E  D7FE               	bra	u4027
 10153                           
 10154                           ;lcd.c: 46: data = data << 4;
 10155  002960  3812               	swapf	lcdNibble@data,w,c
 10156  002962  0BF0               	andlw	240
 10157  002964  6E12               	movwf	lcdNibble@data,c
 10158                           
 10159                           ;lcd.c: 48: temp = data & 0xF0;
 10160  002966  5012               	movf	lcdNibble@data,w,c
 10161  002968  0BF0               	andlw	240
 10162  00296A  6E11               	movwf	lcdNibble@temp,c
 10163                           
 10164                           ;lcd.c: 49: LATD = LATD & 0x0F;
 10165  00296C  508C               	movf	3980,w,c	;volatile
 10166  00296E  0B0F               	andlw	15
 10167  002970  6E8C               	movwf	3980,c	;volatile
 10168                           
 10169                           ;lcd.c: 50: LATD = temp | LATD;
 10170  002972  5011               	movf	lcdNibble@temp,w,c
 10171  002974  108C               	iorwf	3980,w,c	;volatile
 10172  002976  6E8C               	movwf	3980,c	;volatile
 10173                           
 10174                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 10175  002978  968C               	bcf	3980,3,c	;volatile
 10176                           
 10177                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10178  00297A  0E19               	movlw	25
 10179  00297C                     u4037:
 10180  00297C  2EE8               	decfsz	wreg,f,c
 10181  00297E  D7FE               	bra	u4037
 10182                           
 10183                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 10184  002980  868C               	bsf	3980,3,c	;volatile
 10185                           
 10186                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10187  002982  0E19               	movlw	25
 10188  002984                     u4047:
 10189  002984  2EE8               	decfsz	wreg,f,c
 10190  002986  D7FE               	bra	u4047
 10191  002988  0012               	return		;funcret
 10192  00298A                     __end_of_lcdNibble:
 10193                           	opt stack 0
 10194                           tblptru	equ	0xFF8
 10195                           tblptrh	equ	0xFF7
 10196                           tblptrl	equ	0xFF6
 10197                           tablat	equ	0xFF5
 10198                           prodh	equ	0xFF4
 10199                           prodl	equ	0xFF3
 10200                           intcon	equ	0xFF2
 10201                           intcon2	equ	0xFF1
 10202                           intcon3	equ	0xFF0
 10203                           postinc0	equ	0xFEE
 10204                           wreg	equ	0xFE8
 10205                           postdec1	equ	0xFE5
 10206                           fsr1l	equ	0xFE1
 10207                           indf2	equ	0xFDF
 10208                           postinc2	equ	0xFDE
 10209                           postdec2	equ	0xFDD
 10210                           fsr2h	equ	0xFDA
 10211                           fsr2l	equ	0xFD9
 10212                           status	equ	0xFD8
 10213                           
 10214 ;; *************** function _I2C_Master_Init *****************
 10215 ;; Defined at:
 10216 ;;		line 13 in file "I2C.c"
 10217 ;; Parameters:    Size  Location     Type
 10218 ;;  c               4   29[COMRAM] const unsigned long 
 10219 ;; Auto vars:     Size  Location     Type
 10220 ;;		None
 10221 ;; Return value:  Size  Location     Type
 10222 ;;                  1    wreg      void 
 10223 ;; Registers used:
 10224 ;;		wreg, status,2, status,0, cstack
 10225 ;; Tracked objects:
 10226 ;;		On entry : 0/0
 10227 ;;		On exit  : 0/0
 10228 ;;		Unchanged: 0/0
 10229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10230 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10233 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10234 ;;Total ram usage:        8 bytes
 10235 ;; Hardware stack levels used:    1
 10236 ;; Hardware stack levels required when called:    2
 10237 ;; This function calls:
 10238 ;;		___lldiv
 10239 ;; This function is called by:
 10240 ;;		_main
 10241 ;; This function uses a non-reentrant model
 10242 ;;
 10243                           
 10244                           	psect	text47
 10245  002890                     __ptext47:
 10246                           	opt stack 0
 10247  002890                     _I2C_Master_Init:
 10248                           	opt stack 28
 10249                           
 10250                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 10251                           
 10252                           ;incstack = 0
 10253  002890  0E00               	movlw	0
 10254  002892  6EC7               	movwf	4039,c	;volatile
 10255                           
 10256                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 10257  002894  0E28               	movlw	40
 10258  002896  6EC6               	movwf	4038,c	;volatile
 10259                           
 10260                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 10261  002898  0E00               	movlw	0
 10262  00289A  6EC5               	movwf	4037,c	;volatile
 10263                           
 10264                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
 10265  00289C  0E80               	movlw	128
 10266  00289E  6E11               	movwf	___lldiv@dividend,c
 10267  0028A0  0E96               	movlw	150
 10268  0028A2  6E12               	movwf	___lldiv@dividend+1,c
 10269  0028A4  0E98               	movlw	152
 10270  0028A6  6E13               	movwf	___lldiv@dividend+2,c
 10271  0028A8  0E00               	movlw	0
 10272  0028AA  6E14               	movwf	___lldiv@dividend+3,c
 10273  0028AC  C01E  F022         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10274  0028B0  C01F  F023         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10275  0028B4  C020  F024         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10276  0028B8  C021  F025         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10277  0028BC  0E02               	movlw	2
 10278  0028BE                     u3375:
 10279  0028BE  90D8               	bcf	status,0,c
 10280  0028C0  3622               	rlcf	??_I2C_Master_Init,f,c
 10281  0028C2  3623               	rlcf	??_I2C_Master_Init+1,f,c
 10282  0028C4  3624               	rlcf	??_I2C_Master_Init+2,f,c
 10283  0028C6  3625               	rlcf	??_I2C_Master_Init+3,f,c
 10284  0028C8  2EE8               	decfsz	wreg,f,c
 10285  0028CA  D7F9               	goto	u3375
 10286  0028CC  C022  F015         	movff	??_I2C_Master_Init,___lldiv@divisor
 10287  0028D0  C023  F016         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10288  0028D4  C024  F017         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10289  0028D8  C025  F018         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10290  0028DC  EC2C  F013         	call	___lldiv	;wreg free
 10291  0028E0  0411               	decf	?___lldiv,w,c
 10292  0028E2  6EC8               	movwf	4040,c	;volatile
 10293                           
 10294                           ;I2C.c: 20: TRISC3 = 1;
 10295  0028E4  8694               	bsf	3988,3,c	;volatile
 10296                           
 10297                           ;I2C.c: 21: TRISC4 = 1;
 10298  0028E6  8894               	bsf	3988,4,c	;volatile
 10299  0028E8  0012               	return		;funcret
 10300  0028EA                     __end_of_I2C_Master_Init:
 10301                           	opt stack 0
 10302                           tblptru	equ	0xFF8
 10303                           tblptrh	equ	0xFF7
 10304                           tblptrl	equ	0xFF6
 10305                           tablat	equ	0xFF5
 10306                           prodh	equ	0xFF4
 10307                           prodl	equ	0xFF3
 10308                           intcon	equ	0xFF2
 10309                           intcon2	equ	0xFF1
 10310                           intcon3	equ	0xFF0
 10311                           postinc0	equ	0xFEE
 10312                           wreg	equ	0xFE8
 10313                           postdec1	equ	0xFE5
 10314                           fsr1l	equ	0xFE1
 10315                           indf2	equ	0xFDF
 10316                           postinc2	equ	0xFDE
 10317                           postdec2	equ	0xFDD
 10318                           fsr2h	equ	0xFDA
 10319                           fsr2l	equ	0xFD9
 10320                           status	equ	0xFD8
 10321                           
 10322 ;; *************** function ___lldiv *****************
 10323 ;; Defined at:
 10324 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 10325 ;; Parameters:    Size  Location     Type
 10326 ;;  dividend        4   16[COMRAM] unsigned long 
 10327 ;;  divisor         4   20[COMRAM] unsigned long 
 10328 ;; Auto vars:     Size  Location     Type
 10329 ;;  quotient        4   24[COMRAM] unsigned long 
 10330 ;;  counter         1   28[COMRAM] unsigned char 
 10331 ;; Return value:  Size  Location     Type
 10332 ;;                  4   16[COMRAM] unsigned long 
 10333 ;; Registers used:
 10334 ;;		wreg, status,2, status,0
 10335 ;; Tracked objects:
 10336 ;;		On entry : 0/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10340 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10341 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10343 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10344 ;;Total ram usage:       13 bytes
 10345 ;; Hardware stack levels used:    1
 10346 ;; Hardware stack levels required when called:    1
 10347 ;; This function calls:
 10348 ;;		Nothing
 10349 ;; This function is called by:
 10350 ;;		_I2C_Master_Init
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           	psect	text48
 10355  002658                     __ptext48:
 10356                           	opt stack 0
 10357  002658                     ___lldiv:
 10358                           	opt stack 28
 10359                           
 10360                           ;incstack = 0
 10361  002658  0E00               	movlw	0
 10362  00265A  6E19               	movwf	___lldiv@quotient,c
 10363  00265C  0E00               	movlw	0
 10364  00265E  6E1A               	movwf	___lldiv@quotient+1,c
 10365  002660  0E00               	movlw	0
 10366  002662  6E1B               	movwf	___lldiv@quotient+2,c
 10367  002664  0E00               	movlw	0
 10368  002666  6E1C               	movwf	___lldiv@quotient+3,c
 10369  002668  5015               	movf	___lldiv@divisor,w,c
 10370  00266A  1016               	iorwf	___lldiv@divisor+1,w,c
 10371  00266C  1017               	iorwf	___lldiv@divisor+2,w,c
 10372  00266E  1018               	iorwf	___lldiv@divisor+3,w,c
 10373  002670  B4D8               	btfsc	status,2,c
 10374  002672  D02A               	goto	l805
 10375  002674  0E01               	movlw	1
 10376  002676  6E1D               	movwf	___lldiv@counter,c
 10377  002678  D006               	goto	l3762
 10378  00267A                     l3760:
 10379  00267A  90D8               	bcf	status,0,c
 10380  00267C  3615               	rlcf	___lldiv@divisor,f,c
 10381  00267E  3616               	rlcf	___lldiv@divisor+1,f,c
 10382  002680  3617               	rlcf	___lldiv@divisor+2,f,c
 10383  002682  3618               	rlcf	___lldiv@divisor+3,f,c
 10384  002684  2A1D               	incf	___lldiv@counter,f,c
 10385  002686                     l3762:
 10386  002686  AE18               	btfss	___lldiv@divisor+3,7,c
 10387  002688  D7F8               	goto	l3760
 10388  00268A                     l3764:
 10389  00268A  90D8               	bcf	status,0,c
 10390  00268C  3619               	rlcf	___lldiv@quotient,f,c
 10391  00268E  361A               	rlcf	___lldiv@quotient+1,f,c
 10392  002690  361B               	rlcf	___lldiv@quotient+2,f,c
 10393  002692  361C               	rlcf	___lldiv@quotient+3,f,c
 10394  002694  5015               	movf	___lldiv@divisor,w,c
 10395  002696  5C11               	subwf	___lldiv@dividend,w,c
 10396  002698  5016               	movf	___lldiv@divisor+1,w,c
 10397  00269A  5812               	subwfb	___lldiv@dividend+1,w,c
 10398  00269C  5017               	movf	___lldiv@divisor+2,w,c
 10399  00269E  5813               	subwfb	___lldiv@dividend+2,w,c
 10400  0026A0  5018               	movf	___lldiv@divisor+3,w,c
 10401  0026A2  5814               	subwfb	___lldiv@dividend+3,w,c
 10402  0026A4  A0D8               	btfss	status,0,c
 10403  0026A6  D009               	goto	l3772
 10404  0026A8  5015               	movf	___lldiv@divisor,w,c
 10405  0026AA  5E11               	subwf	___lldiv@dividend,f,c
 10406  0026AC  5016               	movf	___lldiv@divisor+1,w,c
 10407  0026AE  5A12               	subwfb	___lldiv@dividend+1,f,c
 10408  0026B0  5017               	movf	___lldiv@divisor+2,w,c
 10409  0026B2  5A13               	subwfb	___lldiv@dividend+2,f,c
 10410  0026B4  5018               	movf	___lldiv@divisor+3,w,c
 10411  0026B6  5A14               	subwfb	___lldiv@dividend+3,f,c
 10412  0026B8  8019               	bsf	___lldiv@quotient,0,c
 10413  0026BA                     l3772:
 10414  0026BA  90D8               	bcf	status,0,c
 10415  0026BC  3218               	rrcf	___lldiv@divisor+3,f,c
 10416  0026BE  3217               	rrcf	___lldiv@divisor+2,f,c
 10417  0026C0  3216               	rrcf	___lldiv@divisor+1,f,c
 10418  0026C2  3215               	rrcf	___lldiv@divisor,f,c
 10419  0026C4  2E1D               	decfsz	___lldiv@counter,f,c
 10420  0026C6  D7E1               	goto	l3764
 10421  0026C8                     l805:
 10422  0026C8  C019  F011         	movff	___lldiv@quotient,?___lldiv
 10423  0026CC  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
 10424  0026D0  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
 10425  0026D4  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
 10426  0026D8  0012               	return		;funcret
 10427  0026DA                     __end_of___lldiv:
 10428                           	opt stack 0
 10429                           tblptru	equ	0xFF8
 10430                           tblptrh	equ	0xFF7
 10431                           tblptrl	equ	0xFF6
 10432                           tablat	equ	0xFF5
 10433                           prodh	equ	0xFF4
 10434                           prodl	equ	0xFF3
 10435                           intcon	equ	0xFF2
 10436                           intcon2	equ	0xFF1
 10437                           intcon3	equ	0xFF0
 10438                           postinc0	equ	0xFEE
 10439                           wreg	equ	0xFE8
 10440                           postdec1	equ	0xFE5
 10441                           fsr1l	equ	0xFE1
 10442                           indf2	equ	0xFDF
 10443                           postinc2	equ	0xFDE
 10444                           postdec2	equ	0xFDD
 10445                           fsr2h	equ	0xFDA
 10446                           fsr2l	equ	0xFD9
 10447                           status	equ	0xFD8
 10448                           
 10449 ;; *************** function _keypressed *****************
 10450 ;; Defined at:
 10451 ;;		line 139 in file "main.c"
 10452 ;; Parameters:    Size  Location     Type
 10453 ;;		None
 10454 ;; Auto vars:     Size  Location     Type
 10455 ;;		None
 10456 ;; Return value:  Size  Location     Type
 10457 ;;                  1    wreg      void 
 10458 ;; Registers used:
 10459 ;;		wreg, status,2, status,0
 10460 ;; Tracked objects:
 10461 ;;		On entry : 0/0
 10462 ;;		On exit  : 0/0
 10463 ;;		Unchanged: 0/0
 10464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10467 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10468 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10469 ;;Total ram usage:       16 bytes
 10470 ;; Hardware stack levels used:    1
 10471 ;; This function calls:
 10472 ;;		Nothing
 10473 ;; This function is called by:
 10474 ;;		Interrupt level 2
 10475 ;; This function uses a non-reentrant model
 10476 ;;
 10477                           
 10478                           	psect	intcode
 10479  000008                     __pintcode:
 10480                           	opt stack 0
 10481  000008                     _keypressed:
 10482                           	opt stack 22
 10483                           
 10484                           ;incstack = 0
 10485  000008  826F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10486  00000A  ED61  F00E         	call	int_func,f	;refresh shadow registers
 10487                           tblptru	equ	0xFF8
 10488                           tblptrh	equ	0xFF7
 10489                           tblptrl	equ	0xFF6
 10490                           tablat	equ	0xFF5
 10491                           prodh	equ	0xFF4
 10492                           prodl	equ	0xFF3
 10493                           intcon	equ	0xFF2
 10494                           intcon2	equ	0xFF1
 10495                           intcon3	equ	0xFF0
 10496                           postinc0	equ	0xFEE
 10497                           wreg	equ	0xFE8
 10498                           postdec1	equ	0xFE5
 10499                           fsr1l	equ	0xFE1
 10500                           indf2	equ	0xFDF
 10501                           postinc2	equ	0xFDE
 10502                           postdec2	equ	0xFDD
 10503                           fsr2h	equ	0xFDA
 10504                           fsr2l	equ	0xFD9
 10505                           status	equ	0xFD8
 10506                           
 10507                           	psect	intcode_body
 10508  001CC2                     __pintcode_body:
 10509                           	opt stack 22
 10510  001CC2                     int_func:
 10511                           	opt stack 22
 10512  001CC2  0006               	pop		; remove dummy address from shadow register refresh
 10513  001CC4  CFFA F003          	movff	pclath,??_keypressed+2
 10514  001CC8  CFFB F004          	movff	pclatu,??_keypressed+3
 10515  001CCC  CFE9 F005          	movff	fsr0l,??_keypressed+4
 10516  001CD0  CFEA F006          	movff	fsr0h,??_keypressed+5
 10517  001CD4  CFE1 F007          	movff	fsr1l,??_keypressed+6
 10518  001CD8  CFE2 F008          	movff	fsr1h,??_keypressed+7
 10519  001CDC  CFD9 F009          	movff	fsr2l,??_keypressed+8
 10520  001CE0  CFDA F00A          	movff	fsr2h,??_keypressed+9
 10521  001CE4  CFF3 F00B          	movff	prodl,??_keypressed+10
 10522  001CE8  CFF4 F00C          	movff	prodh,??_keypressed+11
 10523  001CEC  CFF6 F00D          	movff	tblptrl,??_keypressed+12
 10524  001CF0  CFF7 F00E          	movff	tblptrh,??_keypressed+13
 10525  001CF4  CFF8 F00F          	movff	tblptru,??_keypressed+14
 10526  001CF8  CFF5 F010          	movff	tablat,??_keypressed+15
 10527                           
 10528                           ;main.c: 140: if(INT1IF){
 10529  001CFC  B0F0               	btfsc	intcon3,0,c	;volatile
 10530  001CFE  D01B               	goto	i2l4090
 10531  001D00  D03F               	goto	i2l112
 10532  001D02                     i2l4070:
 10533                           
 10534                           ;main.c: 143: curr_state = OPERATION_END;
 10535  001D02  0E02               	movlw	2
 10536  001D04  D012               	goto	L11
 10537  001D06                     i2l4072:
 10538                           
 10539                           ;main.c: 147: curr_state = OPERATION;
 10540  001D06  0E01               	movlw	1
 10541  001D08  D010               	goto	L11
 10542  001D0A                     i2l4074:
 10543                           
 10544                           ;main.c: 151: curr_state = RUNTIME;
 10545  001D0A  0E05               	movlw	5
 10546  001D0C  D00E               	goto	L11
 10547  001D0E                     i2l4076:
 10548                           
 10549                           ;main.c: 155: curr_state = BOTTLECOUNT;
 10550  001D0E  0E04               	movlw	4
 10551  001D10  0101               	movlb	1	; () banked
 10552  001D12  6F2B               	movwf	_curr_state& (0+255),b
 10553                           
 10554                           ;main.c: 156: bot_type = TOTAL;
 10555  001D14  0E00               	movlw	0
 10556  001D16  D00C               	goto	L10
 10557  001D18                     i2l4078:
 10558                           
 10559                           ;main.c: 159: bot_type = A;
 10560  001D18  0E01               	movlw	1
 10561  001D1A  D00A               	goto	L10
 10562  001D1C                     i2l4080:
 10563                           
 10564                           ;main.c: 162: bot_type = B;
 10565  001D1C  0E02               	movlw	2
 10566  001D1E  D008               	goto	L10
 10567  001D20                     i2l4082:
 10568                           
 10569                           ;main.c: 165: bot_type = C;
 10570  001D20  0E03               	movlw	3
 10571  001D22  D006               	goto	L10
 10572  001D24                     i2l4084:
 10573                           
 10574                           ;main.c: 168: bot_type = D;
 10575  001D24  0E04               	movlw	4
 10576  001D26  D004               	goto	L10
 10577  001D28                     i2l4086:
 10578                           
 10579                           ;main.c: 171: curr_state = DATETIME;
 10580  001D28  0E03               	movlw	3
 10581  001D2A                     L11:
 10582  001D2A  0101               	movlb	1	; () banked
 10583  001D2C  6F2B               	movwf	_curr_state& (0+255),b
 10584                           
 10585                           ;main.c: 172: bot_type = O;
 10586  001D2E  0E05               	movlw	5
 10587  001D30                     L10:
 10588  001D30  0100               	movlb	0	; () banked
 10589  001D32  6FF7               	movwf	_bot_type& (0+255),b
 10590                           
 10591                           ; BSR set to: 0
 10592                           ;main.c: 176: }
 10593                           
 10594                           ; BSR set to: 0
 10595                           ;main.c: 175: break;
 10596                           
 10597                           ;main.c: 174: default:
 10598                           
 10599                           ;main.c: 173: break;
 10600  001D34  D025               	goto	i2l112
 10601  001D36                     i2l4090:
 10602  001D36  3881               	swapf	3969,w,c	;volatile
 10603  001D38  0B0F               	andlw	15
 10604  001D3A  0B0F               	andlw	15
 10605  001D3C  6E01               	movwf	??_keypressed& (0+255),c
 10606  001D3E  6A02               	clrf	(??_keypressed+1)& (0+255),c
 10607                           
 10608                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10609                           ; Switch size 1, requested type "space"
 10610                           ; Number of cases is 1, Range of values is 0 to 0
 10611                           ; switch strategies available:
 10612                           ; Name         Instructions Cycles
 10613                           ; simple_byte            4     3 (average)
 10614                           ;	Chosen strategy is simple_byte
 10615  001D40  5002               	movf	??_keypressed+1,w,c
 10616  001D42  0A00               	xorlw	0	; case 0
 10617  001D44  A4D8               	btfss	status,2,c
 10618  001D46  D01C               	goto	i2l112
 10619                           
 10620                           ; Switch size 1, requested type "space"
 10621                           ; Number of cases is 9, Range of values is 0 to 15
 10622                           ; switch strategies available:
 10623                           ; Name         Instructions Cycles
 10624                           ; simple_byte           28    15 (average)
 10625                           ;	Chosen strategy is simple_byte
 10626  001D48  5001               	movf	??_keypressed,w,c
 10627  001D4A  0A00               	xorlw	0	; case 0
 10628  001D4C  B4D8               	btfsc	status,2,c
 10629  001D4E  D7DB               	goto	i2l4072
 10630  001D50  0A01               	xorlw	1	; case 1
 10631  001D52  B4D8               	btfsc	status,2,c
 10632  001D54  D7DA               	goto	i2l4074
 10633  001D56  0A03               	xorlw	3	; case 2
 10634  001D58  B4D8               	btfsc	status,2,c
 10635  001D5A  D7D9               	goto	i2l4076
 10636  001D5C  0A01               	xorlw	1	; case 3
 10637  001D5E  B4D8               	btfsc	status,2,c
 10638  001D60  D7DB               	goto	i2l4078
 10639  001D62  0A07               	xorlw	7	; case 4
 10640  001D64  B4D8               	btfsc	status,2,c
 10641  001D66  D7E0               	goto	i2l4086
 10642  001D68  0A03               	xorlw	3	; case 7
 10643  001D6A  B4D8               	btfsc	status,2,c
 10644  001D6C  D7D7               	goto	i2l4080
 10645  001D6E  0A0C               	xorlw	12	; case 11
 10646  001D70  B4D8               	btfsc	status,2,c
 10647  001D72  D7D6               	goto	i2l4082
 10648  001D74  0A07               	xorlw	7	; case 12
 10649  001D76  B4D8               	btfsc	status,2,c
 10650  001D78  D7C4               	goto	i2l4070
 10651  001D7A  0A03               	xorlw	3	; case 15
 10652  001D7C  B4D8               	btfsc	status,2,c
 10653  001D7E  D7D2               	goto	i2l4084
 10654  001D80                     i2l112:
 10655                           
 10656                           ;main.c: 177: }
 10657                           ;main.c: 178: INT1IF = 0;
 10658  001D80  90F0               	bcf	intcon3,0,c	;volatile
 10659                           
 10660                           ;main.c: 179: return;
 10661  001D82  C010  FFF5         	movff	??_keypressed+15,tablat
 10662  001D86  C00F  FFF8         	movff	??_keypressed+14,tblptru
 10663  001D8A  C00E  FFF7         	movff	??_keypressed+13,tblptrh
 10664  001D8E  C00D  FFF6         	movff	??_keypressed+12,tblptrl
 10665  001D92  C00C  FFF4         	movff	??_keypressed+11,prodh
 10666  001D96  C00B  FFF3         	movff	??_keypressed+10,prodl
 10667  001D9A  C00A  FFDA         	movff	??_keypressed+9,fsr2h
 10668  001D9E  C009  FFD9         	movff	??_keypressed+8,fsr2l
 10669  001DA2  C008  FFE2         	movff	??_keypressed+7,fsr1h
 10670  001DA6  C007  FFE1         	movff	??_keypressed+6,fsr1l
 10671  001DAA  C006  FFEA         	movff	??_keypressed+5,fsr0h
 10672  001DAE  C005  FFE9         	movff	??_keypressed+4,fsr0l
 10673  001DB2  C004  FFFB         	movff	??_keypressed+3,pclatu
 10674  001DB6  C003  FFFA         	movff	??_keypressed+2,pclath
 10675  001DBA  926F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10676  001DBC  0011               	retfie		f
 10677  001DBE                     __end_of_keypressed:
 10678                           	opt stack 0
 10679                           pclatu	equ	0xFFB
 10680                           pclath	equ	0xFFA
 10681                           tblptru	equ	0xFF8
 10682                           tblptrh	equ	0xFF7
 10683                           tblptrl	equ	0xFF6
 10684                           tablat	equ	0xFF5
 10685                           prodh	equ	0xFF4
 10686                           prodl	equ	0xFF3
 10687                           intcon	equ	0xFF2
 10688                           intcon2	equ	0xFF1
 10689                           intcon3	equ	0xFF0
 10690                           postinc0	equ	0xFEE
 10691                           fsr0h	equ	0xFEA
 10692                           fsr0l	equ	0xFE9
 10693                           wreg	equ	0xFE8
 10694                           postdec1	equ	0xFE5
 10695                           fsr1h	equ	0xFE2
 10696                           fsr1l	equ	0xFE1
 10697                           indf2	equ	0xFDF
 10698                           postinc2	equ	0xFDE
 10699                           postdec2	equ	0xFDD
 10700                           fsr2h	equ	0xFDA
 10701                           fsr2l	equ	0xFD9
 10702                           status	equ	0xFD8
 10703                           pclatu	equ	0xFFB
 10704                           pclath	equ	0xFFA
 10705                           tblptru	equ	0xFF8
 10706                           tblptrh	equ	0xFF7
 10707                           tblptrl	equ	0xFF6
 10708                           tablat	equ	0xFF5
 10709                           prodh	equ	0xFF4
 10710                           prodl	equ	0xFF3
 10711                           intcon	equ	0xFF2
 10712                           intcon2	equ	0xFF1
 10713                           intcon3	equ	0xFF0
 10714                           postinc0	equ	0xFEE
 10715                           fsr0h	equ	0xFEA
 10716                           fsr0l	equ	0xFE9
 10717                           wreg	equ	0xFE8
 10718                           postdec1	equ	0xFE5
 10719                           fsr1h	equ	0xFE2
 10720                           fsr1l	equ	0xFE1
 10721                           indf2	equ	0xFDF
 10722                           postinc2	equ	0xFDE
 10723                           postdec2	equ	0xFDD
 10724                           fsr2h	equ	0xFDA
 10725                           fsr2l	equ	0xFD9
 10726                           status	equ	0xFD8
 10727                           
 10728                           	psect	rparam
 10729  0000                     pclatu	equ	0xFFB
 10730                           pclath	equ	0xFFA
 10731                           tblptru	equ	0xFF8
 10732                           tblptrh	equ	0xFF7
 10733                           tblptrl	equ	0xFF6
 10734                           tablat	equ	0xFF5
 10735                           prodh	equ	0xFF4
 10736                           prodl	equ	0xFF3
 10737                           intcon	equ	0xFF2
 10738                           intcon2	equ	0xFF1
 10739                           intcon3	equ	0xFF0
 10740                           postinc0	equ	0xFEE
 10741                           fsr0h	equ	0xFEA
 10742                           fsr0l	equ	0xFE9
 10743                           wreg	equ	0xFE8
 10744                           postdec1	equ	0xFE5
 10745                           fsr1h	equ	0xFE2
 10746                           fsr1l	equ	0xFE1
 10747                           indf2	equ	0xFDF
 10748                           postinc2	equ	0xFDE
 10749                           postdec2	equ	0xFDD
 10750                           fsr2h	equ	0xFDA
 10751                           fsr2l	equ	0xFD9
 10752                           status	equ	0xFD8
 10753                           
 10754                           	psect	temp
 10755  00006F                     btemp:
 10756                           	opt stack 0
 10757  00006F                     	ds	1
 10758  0000                     int$flags	set	btemp
 10759                           pclatu	equ	0xFFB
 10760                           pclath	equ	0xFFA
 10761                           tblptru	equ	0xFF8
 10762                           tblptrh	equ	0xFF7
 10763                           tblptrl	equ	0xFF6
 10764                           tablat	equ	0xFF5
 10765                           prodh	equ	0xFF4
 10766                           prodl	equ	0xFF3
 10767                           intcon	equ	0xFF2
 10768                           intcon2	equ	0xFF1
 10769                           intcon3	equ	0xFF0
 10770                           postinc0	equ	0xFEE
 10771                           fsr0h	equ	0xFEA
 10772                           fsr0l	equ	0xFE9
 10773                           wreg	equ	0xFE8
 10774                           postdec1	equ	0xFE5
 10775                           fsr1h	equ	0xFE2
 10776                           fsr1l	equ	0xFE1
 10777                           indf2	equ	0xFDF
 10778                           postinc2	equ	0xFDE
 10779                           postdec2	equ	0xFDD
 10780                           fsr2h	equ	0xFDA
 10781                           fsr2l	equ	0xFD9
 10782                           status	equ	0xFD8


Data Sizes:
    Strings     279
    Constant    99
    Data        16
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    108     110
    BANK0           128    119     120
    BANK1           256     27      44
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_19(CODE[23]), STR_18(CODE[23]), STR_17(CODE[17]), STR_16(CODE[17]), 
		 -> STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[19]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    read_colorsensor2@blue	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@blue(BANK0[2]), 

    read_colorsensor2@green	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@green(BANK0[2]), 

    read_colorsensor2@red	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@red(BANK0[2]), 

    read_colorsensor2@clear	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@clear(BANK0[2]), 

    read_colorsensor1@blue	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@blue(BANK0[2]), 

    read_colorsensor1@green	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@green(BANK0[2]), 

    read_colorsensor1@red	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@red(BANK0[2]), 

    read_colorsensor1@clear	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@clear(BANK0[2]), 

    stepper_state@step_state	PTR unsigned char  size(2) Largest target is 2
		 -> main@step_state(BANK1[2]), 

    date_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK1[7]), 

    operation_end@step_state	PTR unsigned char  size(2) Largest target is 2
		 -> main@step_state(BANK1[2]), 

    bottle_count@bot_count	PTR unsigned char  size(2) Largest target is 4
		 -> main@bot_count(BANK1[4]), 

    runtime@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK1[7]), 

    runtime@end_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK1[7]), 

    init_operation@bot_count	PTR unsigned char  size(2) Largest target is 4
		 -> main@bot_count(BANK1[4]), 

    init_operation@step_state	PTR unsigned char  size(2) Largest target is 2
		 -> main@step_state(BANK1[2]), 

    init_operation@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK1[7]), 

    init_operation@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK1[7]), 

    time_difference@time2	PTR unsigned char  size(2) Largest target is 7
		 -> init_operation@detection_time(BANK0[7]), main@start_time(BANK1[7]), 

    time_difference@time1	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK1[7]), main@time(BANK1[7]), 

    update_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> init_operation@detection_time(BANK0[7]), main@end_time(BANK1[7]), main@time(BANK1[7]), main@start_time(BANK1[7]), 


Critical Paths under _main in COMRAM

    _main->_date_time
    _runtime->_time_difference
    _init_operation->_time_difference
    _update_time->_I2C_Master_Read
    _update_time->_I2C_Master_Write
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___ftge->___awtoft
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___awdiv
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _stepper_state->_stepper
    _stepper_state->_stepper_rev
    _read_colorsensor2->_I2C_Master_Read
    _read_colorsensor2->_I2C_Master_Write
    _read_colorsensor1->_I2C_Master_Read
    _read_colorsensor1->_I2C_Master_Write
    _initLCD->_lcdInst
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _printf->_time_difference
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_init_operation
    _runtime->_printf
    _operation_end->_printf
    _init_operation->_printf
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _date_time->_printf
    _bottle_count->_printf
    _printf->_time_difference

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0  222816
                                            117 BANK0      2     2      0
                                              0 BANK1     27    27      0
                    _I2C_Master_Init
                       _bottle_count
                          _date_time
                            _initLCD
                     _init_operation
                            _lcdInst
                      _operation_end
                             _printf
                            _runtime
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _runtime                                              4     0      4   86402
                                             69 BANK0      4     0      4
                            _lcdInst
                             _printf
                    _time_difference
 ---------------------------------------------------------------------------------
 (1) _operation_end                                        4     2      2    5869
                                             69 BANK0      4     2      2
                            _lcdInst
                             _printf
                      _stepper_state
 ---------------------------------------------------------------------------------
 (1) _init_operation                                      48    40      8  112119
                                             69 BANK0     48    40      8
                            ___awdiv
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___fttol
                            _initLCD
                            _lcdInst
                             _printf
                  _read_colorsensor1
                  _read_colorsensor2
                      _stepper_state
                    _time_difference
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _update_time                                          3     1      2    2483
                                             19 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _time_difference                                     24    20      4   82002
                                            105 COMRAM     2     2      0
                                             25 BANK0     22    18      4
                             ___wmul
                         _dec_to_hex
 ---------------------------------------------------------------------------------
 (3) _dec_to_hex                                          16    14      2   80275
                                            103 COMRAM     2     0      2
                                             11 BANK0     14    14      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   66751
                                             97 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   21784
                                             67 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   36080
                                             88 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     376
                                             67 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3    9247
                                             80 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     480
                                             16 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     636
                                             55 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6    1160
                                             28 COMRAM     9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    2414
                                             70 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7    9689
                                             55 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3958
                                             28 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4539
                                             55 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    4242
                                             43 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     237
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    2658
                                             24 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    3135
                                             24 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2281
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2148
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     940
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _stepper_state                                        6     4      2    1577
                                             21 COMRAM     6     4      2
                            _stepper
                        _stepper_rev
 ---------------------------------------------------------------------------------
 (3) _stepper_rev                                          5     3      2     558
                                             16 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _stepper                                              5     3      2     302
                                             16 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor2                                    8     0      8    2227
                                             19 COMRAM     8     0      8
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor1                                    8     0      8    2227
                                             19 COMRAM     8     0      8
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                             19 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _date_time                                            6     4      2    6287
                                            107 COMRAM     1     1      0
                                             69 BANK0      5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1750
                                             17 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             17 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         7     5      2    4402
                                             69 BANK0      7     5      2
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4049
                                             47 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                    _time_difference (ARG)
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     927
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _keypressed                                          16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftpack
               ___ftge
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___awdiv (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftpack
               ___ftge
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___awdiv (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _initLCD
     _lcdInst
       _lcdNibble
   _init_operation
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftge
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftpack
               ___ftge
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___awdiv (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _read_colorsensor1
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _read_colorsensor2
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _stepper_state
       _stepper
       _stepper_rev
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftpack
             ___ftge
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
     _update_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _lcdInst
     _lcdNibble
   _operation_end
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftpack
               ___ftge
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___awdiv (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _stepper_state
       _stepper
       _stepper_rev
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
     _time_difference (ARG)
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftpack
             ___ftge
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _runtime
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftpack
               ___ftge
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___awdiv (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftpack
             ___ftge
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _update_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1B      2C       7       17.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     77      78       5       93.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6C      6E       1       87.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     112      34        0.0%
DATA                 0      0     112       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 14 16:44:58 2017

                 _update_time 2752                  ___altoft@exp 004F                 ___altoft@sign 0050  
                ___awdiv@sign 0016           ___wmul@multiplicand 0013                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000                  ___ftadd@exp1 0037  
                ___ftadd@exp2 0036                  ___ftadd@sign 0035                           l233 25BE  
                         l234 255A                           l227 2642                           l228 25DE  
                         l166 00AA                           l354 2B9C                           l702 1184  
                         l713 1234                           l722 1250                           l805 26C8  
                         l733 205A                           l675 238C                           l755 2B70  
                         l858 2932                           l698 115A                           l890 1480  
                         l868 2A52                           l895 15B6                  __CFG_CPB$OFF 000000  
                         _PEN 007E2A                  __CFG_CPD$OFF 000000                           _SEN 007E28  
            ??_init_operation 00CD                           _exp 0D5C                           _log 1868  
                         _pow 1448                           wreg 000FE8                   _stepper_rev 2550  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0022                  ___ftdiv@sign 0027  
                __CFG_WDT$OFF 000000                          l1053 0E0E                          l1054 0F32  
                        l3000 1FCE                          l1064 215C                          l3100 2254  
                        l3006 1FF6                          l3120 22BA                          l4010 0D50  
                        l3026 2034                          l3202 0F08                          l3300 252E  
                        l3132 283A                          l3044 2A72                          l3124 22C6  
                        l3108 2298                          l4006 0D12                          l3134 2846  
                        l3230 1508                          l3222 14A6                          l4008 0D34  
                        l3304 2538                          l3056 2AEA                          l3152 18A2  
                        l3216 148E                          l3090 21AA                          l3082 20E2  
                        l3074 20BA                          l3146 1882                          l3234 152E  
                        l3500 07CA                          l3308 2546                          l3092 2226  
                        l3180 0DE0                          l3078 20C8                          l3174 0DAA  
                        l4310 0522                          l3432 2B94                          l3600 0A62  
                        l3520 087E                          l3336 2B2E                          l2800 1168  
                        l3168 0D74                          l3442 2900                          l3514 0870  
                        l3522 08B6                          l3506 07FA                          l3290 250E  
                        l3282 24F0                          l3346 1BD4                          l4306 04A6  
                        l4250 00B0                          l4410 1694                          l3444 2908  
                        l3604 0A76                          l3540 0918                          l3516 0876  
                        l3620 0B3C                          l3292 2512                          l3276 24E0  
                        l4324 057E                          l4308 04E4                          l4244 007E  
                        l4412 16A6                          l4420 16F8                          l4404 1640  
                        l3454 2928                          l3446 290C                          l3470 2A48  
                        l3462 2A28                          l3606 0A7C                          l3614 0B10  
                        l3534 08F6                          l3702 0FB0                          l2750 235A  
                        l2742 231C                          l2830 11EE                          l2822 11C2  
                        l2806 1192                          l2902 1F6C                          l3358 1CAC  
                        l3630 278E                          l4342 065A                          l4414 16B8  
                        l4406 1652                          l3464 2A30                          l3608 0AC4  
                        l3616 0B28                          l3552 094E                          l3712 0FFA  
                        l3704 0FBE                          l3288 2506                          l2752 2378  
                        l2744 2326                          l2840 1222                          l2832 11F8  
                        l4344 0698                          l4328 05FE                          l4360 0730  
                        l3466 2A34                          l3618 0B30                          l3554 0954  
                        l3570 09A2                          l3538 0912                          l3490 079A  
                        l3730 1078                          l3722 1040                          l2754 2382  
                        l2746 2344                          l2738 230E                          l2842 122C  
                        l2834 1200                          l2914 246C                          l3626 2786  
                        l4346 06D6                          l4362 074C                          l4418 16D6  
                        l3580 09FC                          l3740 10C0                          l3732 1086  
                        l3716 1014                          l3708 0FDC                          l2828 11E4  
                        l2924 24C8                          l3636 27AA                          l4292 0450  
                        l3582 0A06                          l3494 07AE                          l3726 105C  
                        l3718 1022                          l2918 249C                          l2934 1DEA  
                        l4366 0784                          l3760 267A                          l3576 09C4  
                        l3568 098A                          l3496 07C0                          l3744 10DC  
                        l3736 10A2                          l2848 126C                          l2784 26FC  
                        l2952 1E50                          l4288 03D2                          l3762 2686  
                        l3594 0A3C                          l3690 0F58                          l2858 129C  
                        l2874 1F02                          l2786 2708                          l2970 1EA0  
                        l2962 1E78                          l3772 26BA                          l3764 268A  
                        l3596 0A48                          l3588 0A20                          l3748 10EA  
                        l2892 1F44                          l2868 1EDA                          l2964 1E84  
                        l2956 1E60                          l3694 0F76                          l2966 1E8A  
                        l2982 23D4                          l3952 1752                          l2888 1F34  
                        l3698 0F94                          l2898 1F5C                          l3980 0C06  
                        l3948 174A                          ?_exp 0059                          ?_log 0044  
                        l3974 0B5C                          l3958 1772                          l3992 0C98  
                        l3986 0C4C                          l3998 0CE4                          ?_pow 0062  
                        STR_1 FEE8                          STR_2 FF66                          STR_3 FF66  
                        STR_4 FFCC                          STR_5 FF31                          STR_6 FF88  
                        STR_7 FF77                          STR_8 FF99                          STR_9 FF77  
                        u2011 1126                          u2021 113A                          u2221 1EC2  
                        _LATA 000F89                          _LATB 000F8A                          u2311 1DCE  
                        _LATC 000F8B                          u2400 23FC                          _LATD 000F8C  
                        u2241 1EEA                          _LATE 000F8D                          u2330 1E08  
                        u2411 1FB6                          u2510 20D4                          u4007 0D42  
                        u2431 1FDE                          u2335 1E00                          u2408 23FE  
                        u4017 2954                          u4027 295C                          u4037 297C  
                        u2550 2274                          u4047 2984                          u2650 0DE8  
                        u2660 0DEA                          u2740 14F2                          u3700 00AA  
                        u2558 2276                          u3375 28BE                          u2840 2B2C  
                        u3907 2568                          _RCEN 007E2B                          u3917 2580  
                        u3837 1706                          u3927 2598                          u3847 2824  
                        u3937 25B0                          u3857 0488                          u3947 25EC  
                        u3867 0560                          u3957 2604                          u3877 063C  
                        u3967 261C                          u3887 0714                          u3977 2634  
                        u3897 073E                          u3987 29DA                          u3997 2A0E  
                        _RSEN 007E29                          _main 15C4                  ___ftpack@arg 0011  
                        _keys FE85                  ___ftpack@exp 0014                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 006F        __size_of_stepper_state 01D6                          exp@x 0059  
                        log@x 0044                          pow@x 0062                          pow@y 0065  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
               __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 002A  
                ___param_bank 000000                  ___ftmul@sign 002B                 ?_bottle_count 00C5  
      read_colorsensor1@clear 001A                  ___fttol@exp1 0046        read_colorsensor2@clear 001A  
                       ??_exp 005C                         ??_log 0047                  ___fttol@lval 0042  
      read_colorsensor1@green 0016                         ??_pow 0068        read_colorsensor2@green 0016  
            ?_I2C_Master_Init 001E              ?_I2C_Master_Read 0001              ?_I2C_Master_Wait 0001  
                main@end_time 0107              ?_I2C_Master_Stop 0001                         ?_main 0001  
                       _ACKEN 007E2C                         _ACKDT 007E2D               __end_of___awdiv 2550  
                       _EEADR 000FA9               __end_of___ftadd 12C2                         STR_10 FFDD  
                       STR_11 FF77                         STR_12 FFAA                         STR_20 FF44  
                       STR_13 FF77                         STR_14 FFEE                         STR_15 FF77  
                       STR_16 FFBB                         STR_17 FF55                         STR_18 FF03  
                       STR_19 FF1A               __end_of___ftdiv 208C               __end_of___ftneg 2B7E  
             __end_of___lldiv 26DA               __end_of___ftmul 1FA6               ___awdiv@divisor 0013  
             __end_of___ftsub 2A9C               __end_of___fttol 1EB2               __end_of___lwdiv 293C  
                       i2l112 1D80               __end_of___lwmod 2A5C               ___awdiv@counter 0015  
                       _PORTB 000F81                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                  ___lltoft@exp 0021  
             __end_of_lcdInst 2BD6                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                       _nRBPU 007F8F                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initLCD 2A1A                __CFG_EBTRB$OFF 000000  
               ___awtoft@sign 001C               __end_of_dpowers FEA0                         _floor 208C  
                       _ldexp 223C                         _frexp 23AC                         _errno 006D  
             __end_of_isdigit 2B9C                 ___ftpack@sign 0015                         _putch 2BBE  
                       pclath 000FFA                         tablat 000FF5                         pow@yi 0087  
                       status 000FD8               __end_of_stepper 2658               __end_of_runtime 29D4  
              __CFG_PBADEN$ON 000000                   exp@exponent 005F                   ldexp@newexp 0047  
             __initialization 2A9C                   log@exponent 0047      init_operation@start_time 00C5  
              ??_bottle_count 00C7                  __end_of_main 1716      init_operation@step_state 00CB  
                __end_of_keys FE96                  update_time@i 0016                        ??_main 00F5  
               ___fttol@sign1 0041               runtime@end_time 00C7                 _stepper_state 0F40  
               __activetblptr 000002             time_difference@d1 00A9             time_difference@d2 00AB  
           time_difference@d3 00AD             time_difference@s1 00A5             time_difference@s2 00A7  
           ?_I2C_Master_Start 0001             ?_I2C_Master_Write 0012                 main@bot_count 0115  
          ??_I2C_Master_Start 0012                        _ADCON0 000FC2                        _ADCON1 000FC1  
          ??_I2C_Master_Write 0014                        ?_floor 0051                        ?_ldexp 0044  
                      ?_frexp 0011              __end_of___altoft 2752                        _EEADRH 000FAA  
                      _EEDATA 000FA8                        _EECON2 000FA7              ___awdiv@dividend 0011  
            __end_of___awtoft 2B0E                        ?_putch 0001              __end_of___ftpack 23AC  
            __end_of___lltoft 2890                        _INT1IE 007F83                        _INT1IF 007F80  
                      i2l4070 1D02                        i2l4080 1D1C                        i2l4072 1D06  
                      i2l4082 1D20                        i2l4074 1D0A                        i2l4090 1D36  
                      i2l4084 1D24                        i2l4076 1D0E                        i2l4086 1D28  
                      i2l4078 1D18  init_operation@detection_time 00D5                        _SSPADD 000FC8  
                      _TRISC3 007CA3                        _TRISC4 007CA4                        _SSPBUF 000FC9  
             update_time@time 0014                __CFG_XINST$OFF 000000                        ___ftge 243C  
                      ___wmul 2B34                     ??___awdiv 0015                     ??___ftadd 0032  
              __CFG_STVREN$ON 000000                     ??___ftdiv 001F                     ??___ftneg 0014  
                   ??___lldiv 0019                     ??___ftmul 0023                     ??___ftsub 003E  
                   ??___fttol 003C                     ??___lwdiv 0015                     ??___lwmod 001C  
     stepper_state@next_state 001A                 dec_to_hex@num 0068              ___awdiv@quotient 0017  
              ?_stepper_state 0016                     ??_lcdInst 0013                        _printf 078C  
                      floor@i 0054                        floor@x 0051         ___ftmul@f3_as_product 0027  
                   ??_initLCD 0014                     ??_isdigit 0011               _time_difference 12C2  
                __mediumconst FE84                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                     ??_stepper 0013                     ??_runtime 006C  
            __end_ofexp@coeff FECD              __end_oflog@coeff FEE8                    __accesstop 0080  
     __end_of__initialization 2AC8                    ___altoft@c 0047                    ___ftadd@f1 002C  
                  ___ftadd@f2 002F                    ___ftge@ff1 001D                    ___ftge@ff2 0020  
       __end_of_operation_end 2834                  eval_poly@res 0041                 ___rparam_used 000001  
                  ___ftdiv@f1 0019                    ___ftdiv@f2 001C                    ___ftdiv@f3 0023  
                  ___ftneg@f1 0011          time_difference@time1 0099          time_difference@time2 009B  
                  ___awtoft@c 0019                    ___ftmul@f1 001D                    ___ftmul@f2 0020  
                  ___ftsub@f1 0038                    ___ftsub@f2 003B                    ___fttol@f1 0038  
        __end_of_happynewyear FEAF                __pcstackCOMRAM 0001                  ?_update_time 0014  
                __pidataBANK1 2BAE       stepper_state@step_state 0016                    ___lltoft@c 0019  
               __end_of_floor 216A                 __end_of_ldexp 22FE                 __end_of_frexp 243C  
               __end_of_putch 2BCA            __size_of_date_time 0152                  stepper_rev@i 0014  
                stepper_rev@r 0011            __size_of_lcdNibble 004E         bottle_count@bot_count 00C5  
                ?_stepper_rev 0011                       ??_floor 0054                       ??_ldexp 0049  
                     ??_frexp 0016          __end_of_bottle_count 0D5C                    _dec_to_hex 1BB6  
                     ??_putch 0013                    __pbssBANK0 00F7                    __pbssBANK1 012B  
          time_difference@hr1 009D            time_difference@hr2 009F            __size_of_eval_poly 00D2  
                     ?___ftge 001D                       ?___wmul 0011               ??_stepper_state 0018  
                   ?___altoft 0047              init_operation@b1 00EF              init_operation@b2 00F3  
            init_operation@c1 00CF              init_operation@c2 00D1              init_operation@g1 00E9  
            init_operation@g2 00EB       __end_of_time_difference 1448              init_operation@r1 00ED  
            init_operation@r2 00F1                     ?___awtoft 0019                     ?___ftpack 0011  
                     ?_printf 00AF                     ?___lltoft 0019                       _SSPCON1 000FC6  
                     _SSPCON2 000FC5                       _SSPSTAT 000FC7             __end_of_date_time 1868  
           _read_colorsensor1 1A9C             _read_colorsensor2 1982            init_operation@blue 00E5  
          init_operation@time 00C7             __end_of_lcdNibble 298A            ?_read_colorsensor1 0014  
          ?_read_colorsensor2 0014                       __Hparam 0000                       __Lparam 0000  
             __size_of___ftge 0090                       ___awdiv 24CC                       ___ftadd 1116  
                     ___ftdiv 1FA6                       ___ftneg 2B5A                       ___lldiv 2658  
             __size_of___wmul 0026                       ___ftmul 1EB2                       ___ftsub 2A5C  
                     ___fttol 1DBE                       ___lwdiv 28EA                       ___lwmod 2A1A  
         ??_read_colorsensor1 001C           ??_read_colorsensor2 001C                    _curr_state 012B  
                  ??___altoft 004B                       __pcinit 2A9C                    ??___awtoft 001C  
                  ??___ftpack 0016             __end_of_eval_poly 223C                       __ramtop 1000  
                     _lcdInst 2BCA                    ??___lltoft 001D                       __ptext0 15C4  
                     __ptext1 298A                       __ptext2 27C4                       __ptext3 0012  
                     __ptext4 2752                       __ptext5 12C2                       __ptext6 1BB6  
                     __ptext7 1448                       __ptext8 1868                       __ptext9 0D5C  
             __size_of_printf 03CE                dec_to_hex@temp 0091                       _initLCD 29D4  
           __end_of_hexpowers FEA8                       _dpowers FE96                  __size_of_exp 01E4  
                __size_of_log 011A                       _isdigit 2B7E                  __size_of_pow 017C  
                  _keypressed 0008      __size_of_I2C_Master_Init 005A      __size_of_I2C_Master_Read 0026  
    __size_of_I2C_Master_Wait 0012                    date_time@i 006C      __size_of_I2C_Master_Stop 0008  
                     _stepper 25D4                       _runtime 298A                   ?_dec_to_hex 0068  
              __pintcode_body 1CC2          end_of_initialization 2AC8                       exp@sign 0061  
   __end_of_read_colorsensor1 1BB6     __end_of_read_colorsensor2 1A9C       __size_of_init_operation 077A  
     operation_end@step_state 00C5                 __Lmediumconst FE84                       int_func 1CC2  
   __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A               ___lldiv@divisor 0015  
                     pow@sign 0086               ___lldiv@counter 001D                       printf@c 00C4  
                     printf@f 00AF              I2C_Master_Init@c 001E              I2C_Master_Read@a 0012  
                     postdec1 000FE5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                 date_time@time 00C5          __size_of_update_time 0072  
              main@start_time 0100                main@step_state 0119              ?_time_difference 0099  
                   _PORTCbits 000F82                     _PORTEbits 000F84         __size_of_bottle_count 0202  
     init_operation@bot_count 00C9                  _happynewyear FEA8          __size_of_stepper_rev 0084  
                 ___ftdiv@exp 0026                   printf@width 00C2                   ___ftmul@exp 0026  
       read_colorsensor1@blue 0018         read_colorsensor2@blue 0018                  _bottle_count 0B5A  
              __end_of___ftge 24CC                __end_of___wmul 2B5A           __size_of_dec_to_hex 010C  
                  floor@expon 0057                __end_of_printf 0B5A           start_initialization 2A9C  
                  eval_poly@d 003B                    eval_poly@n 003D                    eval_poly@x 0038  
                 ?_keypressed 0001                    ldexp@value 0044                   __end_of_exp 0F40  
                 __end_of_log 1982                   __end_of_pow 15C4    __size_of_read_colorsensor1 011A  
  __size_of_read_colorsensor2 011A                    frexp@value 0011             ??_I2C_Master_Init 0022  
           ??_I2C_Master_Read 0012             ??_I2C_Master_Wait 0011             ??_I2C_Master_Stop 0012  
                    ??___ftge 0023                      ??___wmul 0015                   __pdataBANK1 011B  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 00B7             __size_of___altoft 0078  
           __size_of___awtoft 0038             __size_of___ftpack 00AE             __size_of___lltoft 005C  
                 __pbssCOMRAM 006D        __size_of_operation_end 0070           time_difference@min1 00A1  
         time_difference@min2 00A3                 __pcstackBANK0 0080                 __pcstackBANK1 0100  
              _init_operation 0012              _I2C_Master_Start 2BE8              _I2C_Master_Write 2BD6  
                   _date_time 1716              ___lwdiv@dividend 0011             __CFG_CCP2MX$PORTC 000000  
         __size_of_keypressed 1DB6                     __pintcode 0008                 __pmediumconst FE84  
                   _lcdNibble 293C                      ?___awdiv 0011                      ?___ftadd 002C  
             init_operation@i 00DF                      ?___ftdiv 0019                      ?___ftneg 0011  
                    ?___lldiv 0011                      ?___ftmul 001D                      ?___ftsub 0038  
                    ?___fttol 0038                      ?___lwdiv 0011                      ?___lwmod 0018  
       __end_of_stepper_state 1116                      ?_lcdInst 0001              dec_to_hex@hexnum 0095  
                    ?_initLCD 0001                      ?_isdigit 0001                     _eval_poly 216A  
           init_operation@red 00E1                     _hexpowers FEA0              ___lwdiv@quotient 0015  
                    ?_stepper 0011        __end_of_init_operation 078C                __size_of_floor 00DE  
              __size_of_ldexp 00C2                __size_of_frexp 0090                  ??_dec_to_hex 006A  
                    ?_runtime 00C5                __size_of_putch 000C                ___wmul@product 0015  
                    _LATDbits 000F8C           _init_operation$1404 00DC                 _operation_end 27C4  
                  ?_date_time 00C5                      _PIR2bits 000FA1              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001            __end_of_dec_to_hex 1CC2             ___wmul@multiplier 0011  
               lcdNibble@data 0012                    printf@flag 00C1                 lcdNibble@temp 0011  
                  printf@prec 00BE                    ?_eval_poly 0038          read_colorsensor1@red 0014  
        read_colorsensor2@red 0014             runtime@start_time 00C5           I2C_Master_Read@temp 0013  
             ?_init_operation 00C5                     copy_data0 2AB0            dec_to_hex@quotient 0097  
         init_operation@clear 00E7           init_operation@green 00E3     init_operation@luminosity1 00D3  
                   frexp@eptr 0014                    _EECON1bits 000FA6                ?_operation_end 00C5  
             hex_to_dec@F3226 011B                      __Hrparam 0000                      __Lrparam 0000  
               ??_update_time 0016            __CFG_BOREN$SBORDIS 000000                   dec_to_hex@i 0093  
            __size_of___awdiv 0084              __size_of___ftadd 01AC              __size_of___ftdiv 00E6  
            __size_of___ftneg 0024              __size_of___lldiv 0082                      ___altoft 26DA  
            __size_of___ftmul 00F4              __size_of___ftsub 0040              __size_of___fttol 00F4  
            __size_of___lwdiv 0052              __size_of___lwmod 0042                      ___awtoft 2AD6  
                    ___ftpack 22FE                      ___lltoft 2834                   _isdigit$947 0012  
            __size_of_lcdInst 000C                      _exp$1407 005C               _I2C_Master_Init 2890  
             _I2C_Master_Read 2B0E              __size_of_initLCD 0046               _I2C_Master_Wait 2B9C  
             _I2C_Master_Stop 2BE0                  ??_keypressed 0001              __size_of_isdigit 001E  
             ___lwdiv@divisor 0013      __size_of_time_difference 0186                 ??_stepper_rev 0013  
             ___lwdiv@counter 0017                      __ptext10 223C                      __ptext11 208C  
                    __ptext20 2B5A                      __ptext12 23AC                      __ptext21 1FA6  
                    __ptext13 1DBE                      __ptext30 1A9C                      __ptext22 2AD6  
                    __ptext14 243C                      __ptext31 29D4                      __ptext23 2834  
                    __ptext15 26DA                      __ptext40 2BBE                      __ptext32 1716  
                    __ptext24 22FE                      __ptext16 216A                      __ptext41 2B7E  
                    __ptext33 2BD6                      __ptext25 24CC                      __ptext17 1EB2  
                    __ptext42 2B34                      __ptext34 2BE0                      __ptext26 0F40  
                    __ptext18 2A5C                      __ptext43 2A1A                      __ptext35 2BE8  
                    __ptext27 2550                      __ptext19 1116                      __ptext44 28EA  
                    __ptext36 2B0E                      __ptext28 25D4                      __ptext45 2BCA  
                    __ptext37 2B9C                      __ptext29 1982                      __ptext46 293C  
                    __ptext38 0B5A                      __ptext47 2890                      __ptext39 078C  
                    __ptext48 2658                      _pow$1405 0080                      _pow$1406 0083  
                    _bot_type 00F7              __size_of_stepper 0084              __size_of_runtime 004A  
               __size_of_main 0152               _dec_to_hex$1400 008B               _dec_to_hex$1401 008E  
                 ??_date_time 00C7                   ??_lcdNibble 0011            __end_of_keypressed 1DBE  
                    int$flags 006F                     printf@idx 00BB                     printf@val 00BF  
                    main@time 010E           __end_of_update_time 27C4                      exp@coeff FEAF  
                    log@coeff FECD                     putch@data 0013      __end_of_I2C_Master_Start 2BF0  
    __end_of_I2C_Master_Write 2BE0                    _INTCONbits 000FF2                   ??_eval_poly 003F  
                    isdigit@c 0013                      intlevel2 0000               ??_operation_end 00C7  
            ___lwmod@dividend 0018              ___lldiv@dividend 0011           __end_of_stepper_rev 25D4  
                    printf@ap 00BC       __end_of_I2C_Master_Init 28EA       __end_of_I2C_Master_Read 2B34  
     __end_of_I2C_Master_Wait 2BAE       __end_of_I2C_Master_Stop 2BE8                   lcdInst@data 0013  
                    stepper@i 0014                      stepper@r 0011              ___lldiv@quotient 0019  
           I2C_Master_Write@d 0012               ___lwmod@divisor 001A               ___lwmod@counter 001C  
           ??_time_difference 006A  
