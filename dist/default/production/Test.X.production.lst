

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 10 03:47:01 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           ; Version 1.40
    72                           ; Generated 01/12/2016 GMT
    73                           ; 
    74                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F4620 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     
   106                           	psect	idataBANK1
   107  002946                     __pidataBANK1:
   108                           	opt stack 0
   109                           
   110                           ;initializer for hex_to_dec@F3223
   111  002946  00                 	db	0
   112  002947  01                 	db	1
   113  002948  02                 	db	2
   114  002949  03                 	db	3
   115  00294A  04                 	db	4
   116  00294B  05                 	db	5
   117  00294C  06                 	db	6
   118  00294D  07                 	db	7
   119  00294E  08                 	db	8
   120  00294F  09                 	db	9
   121  002950  0A                 	db	10
   122  002951  0B                 	db	11
   123  002952  0C                 	db	12
   124  002953  0D                 	db	13
   125  002954  0E                 	db	14
   126  002955  0F                 	db	15
   127                           
   128                           	psect	mediumconst
   129  00FE80                     __pmediumconst:
   130                           	opt stack 0
   131  00FE80  00                 	db	0
   132  00FE81                     _keys:
   133                           	opt stack 0
   134  00FE81  5A                 	db	90
   135  00FE82  32                 	db	50
   136  00FE83  33                 	db	51
   137  00FE84  41                 	db	65
   138  00FE85  34                 	db	52
   139  00FE86  35                 	db	53
   140  00FE87  36                 	db	54
   141  00FE88  42                 	db	66
   142  00FE89  37                 	db	55
   143  00FE8A  38                 	db	56
   144  00FE8B  39                 	db	57
   145  00FE8C  43                 	db	67
   146  00FE8D  2A                 	db	42
   147  00FE8E  30                 	db	48
   148  00FE8F  23                 	db	35
   149  00FE90  44                 	db	68
   150  00FE91  00                 	db	0
   151  00FE92                     __end_of_keys:
   152                           	opt stack 0
   153  00FE92                     _dpowers:
   154                           	opt stack 0
   155  00FE92  0001               	dw	1
   156  00FE94  000A               	dw	10
   157  00FE96  0064               	dw	100
   158  00FE98  03E8               	dw	1000
   159  00FE9A  2710               	dw	10000
   160  00FE9C                     __end_of_dpowers:
   161                           	opt stack 0
   162  00FE9C                     _hexpowers:
   163                           	opt stack 0
   164  00FE9C  0001               	dw	1
   165  00FE9E  0010               	dw	16
   166  00FEA0  0100               	dw	256
   167  00FEA2  1000               	dw	4096
   168  00FEA4                     __end_of_hexpowers:
   169                           	opt stack 0
   170  00FEA4                     _happynewyear:
   171                           	opt stack 0
   172  00FEA4  45                 	db	69
   173  00FEA5  59                 	db	89
   174  00FEA6  23                 	db	35
   175  00FEA7  07                 	db	7
   176  00FEA8  31                 	db	49
   177  00FEA9  12                 	db	18
   178  00FEAA  16                 	db	22
   179  00FEAB                     __end_of_happynewyear:
   180                           	opt stack 0
   181  00FEAB                     exp@coeff:
   182                           	opt stack 0
   183  00FEAB  00                 	db	0
   184  00FEAC  80                 	db	128
   185  00FEAD  3F                 	db	63
   186  00FEAE  72                 	db	114
   187  00FEAF  31                 	db	49
   188  00FEB0  3F                 	db	63
   189  00FEB1  FE                 	db	254
   190  00FEB2  75                 	db	117
   191  00FEB3  3E                 	db	62
   192  00FEB4  58                 	db	88
   193  00FEB5  63                 	db	99
   194  00FEB6  3D                 	db	61
   195  00FEB7  95                 	db	149
   196  00FEB8  1D                 	db	29
   197  00FEB9  3C                 	db	60
   198  00FEBA  C5                 	db	197
   199  00FEBB  AE                 	db	174
   200  00FEBC  3A                 	db	58
   201  00FEBD  79                 	db	121
   202  00FEBE  21                 	db	33
   203  00FEBF  39                 	db	57
   204  00FEC0  94                 	db	148
   205  00FEC1  80                 	db	128
   206  00FEC2  37                 	db	55
   207  00FEC3  93                 	db	147
   208  00FEC4  A7                 	db	167
   209  00FEC5  35                 	db	53
   210  00FEC6  56                 	db	86
   211  00FEC7  15                 	db	21
   212  00FEC8  34                 	db	52
   213  00FEC9                     __end_ofexp@coeff:
   214                           	opt stack 0
   215  00FEC9                     log@coeff:
   216                           	opt stack 0
   217  00FEC9  00                 	db	0
   218  00FECA  00                 	db	0
   219  00FECB  00                 	db	0
   220  00FECC  00                 	db	0
   221  00FECD  80                 	db	128
   222  00FECE  3F                 	db	63
   223  00FECF  F0                 	db	240
   224  00FED0  FF                 	db	255
   225  00FED1  BE                 	db	190
   226  00FED2  E2                 	db	226
   227  00FED3  A9                 	db	169
   228  00FED4  3E                 	db	62
   229  00FED5  83                 	db	131
   230  00FED6  76                 	db	118
   231  00FED7  BE                 	db	190
   232  00FED8  AE                 	db	174
   233  00FED9  2B                 	db	43
   234  00FEDA  3E                 	db	62
   235  00FEDB  3C                 	db	60
   236  00FEDC  C3                 	db	195
   237  00FEDD  BD                 	db	189
   238  00FEDE  D2                 	db	210
   239  00FEDF  13                 	db	19
   240  00FEE0  3D                 	db	61
   241  00FEE1  78                 	db	120
   242  00FEE2  D3                 	db	211
   243  00FEE3  BB                 	db	187
   244  00FEE4                     __end_oflog@coeff:
   245                           	opt stack 0
   246  0000                     _ADCON0	set	4034
   247  0000                     _ADCON1	set	4033
   248  0000                     _EEADR	set	4009
   249  0000                     _EEADRH	set	4010
   250  0000                     _EECON1bits	set	4006
   251  0000                     _EECON2	set	4007
   252  0000                     _EEDATA	set	4008
   253  0000                     _INTCONbits	set	4082
   254  0000                     _LATA	set	3977
   255  0000                     _LATB	set	3978
   256  0000                     _LATC	set	3979
   257  0000                     _LATD	set	3980
   258  0000                     _LATDbits	set	3980
   259  0000                     _LATE	set	3981
   260  0000                     _PIR2bits	set	4001
   261  0000                     _PORTB	set	3969
   262  0000                     _PORTCbits	set	3970
   263  0000                     _PORTEbits	set	3972
   264  0000                     _SSPADD	set	4040
   265  0000                     _SSPBUF	set	4041
   266  0000                     _SSPCON1	set	4038
   267  0000                     _SSPCON2	set	4037
   268  0000                     _SSPSTAT	set	4039
   269  0000                     _TRISA	set	3986
   270  0000                     _TRISB	set	3987
   271  0000                     _TRISC	set	3988
   272  0000                     _TRISD	set	3989
   273  0000                     _TRISE	set	3990
   274  0000                     _ACKDT	set	32301
   275  0000                     _ACKEN	set	32300
   276  0000                     _INT1IE	set	32643
   277  0000                     _INT1IF	set	32640
   278  0000                     _PEN	set	32298
   279  0000                     _RCEN	set	32299
   280  0000                     _RSEN	set	32297
   281  0000                     _SEN	set	32296
   282  0000                     _TRISC3	set	31907
   283  0000                     _TRISC4	set	31908
   284  0000                     _nRBPU	set	32655
   285  00FEE4                     STR_1:
   286  00FEE4  50                 	db	80	;'P'
   287  00FEE5  72                 	db	114	;'r'
   288  00FEE6  65                 	db	101	;'e'
   289  00FEE7  73                 	db	115	;'s'
   290  00FEE8  73                 	db	115	;'s'
   291  00FEE9  20                 	db	32
   292  00FEEA  31                 	db	49	;'1'
   293  00FEEB  20                 	db	32
   294  00FEEC  74                 	db	116	;'t'
   295  00FEED  6F                 	db	111	;'o'
   296  00FEEE  20                 	db	32
   297  00FEEF  62                 	db	98	;'b'
   298  00FEF0  65                 	db	101	;'e'
   299  00FEF1  67                 	db	103	;'g'
   300  00FEF2  69                 	db	105	;'i'
   301  00FEF3  6E                 	db	110	;'n'
   302  00FEF4  20                 	db	32
   303  00FEF5  6F                 	db	111	;'o'
   304  00FEF6  70                 	db	112	;'p'
   305  00FEF7  65                 	db	101	;'e'
   306  00FEF8  72                 	db	114	;'r'
   307  00FEF9  61                 	db	97	;'a'
   308  00FEFA  74                 	db	116	;'t'
   309  00FEFB  69                 	db	105	;'i'
   310  00FEFC  6F                 	db	111	;'o'
   311  00FEFD  6E                 	db	110	;'n'
   312  00FEFE  00                 	db	0
   313  00FEFF                     STR_18:
   314  00FEFF  44                 	db	68	;'D'
   315  00FF00  61                 	db	97	;'a'
   316  00FF01  74                 	db	116	;'t'
   317  00FF02  65                 	db	101	;'e'
   318  00FF03  3A                 	db	58	;':'
   319  00FF04  20                 	db	32
   320  00FF05  25                 	db	37
   321  00FF06  30                 	db	48	;'0'
   322  00FF07  32                 	db	50	;'2'
   323  00FF08  78                 	db	120	;'x'
   324  00FF09  2F                 	db	47
   325  00FF0A  25                 	db	37
   326  00FF0B  30                 	db	48	;'0'
   327  00FF0C  32                 	db	50	;'2'
   328  00FF0D  78                 	db	120	;'x'
   329  00FF0E  2F                 	db	47
   330  00FF0F  25                 	db	37
   331  00FF10  30                 	db	48	;'0'
   332  00FF11  32                 	db	50	;'2'
   333  00FF12  78                 	db	120	;'x'
   334  00FF13  20                 	db	32
   335  00FF14  20                 	db	32
   336  00FF15  00                 	db	0
   337  00FF16                     STR_19:
   338  00FF16  54                 	db	84	;'T'
   339  00FF17  69                 	db	105	;'i'
   340  00FF18  6D                 	db	109	;'m'
   341  00FF19  65                 	db	101	;'e'
   342  00FF1A  3A                 	db	58	;':'
   343  00FF1B  20                 	db	32
   344  00FF1C  25                 	db	37
   345  00FF1D  30                 	db	48	;'0'
   346  00FF1E  32                 	db	50	;'2'
   347  00FF1F  78                 	db	120	;'x'
   348  00FF20  3A                 	db	58	;':'
   349  00FF21  25                 	db	37
   350  00FF22  30                 	db	48	;'0'
   351  00FF23  32                 	db	50	;'2'
   352  00FF24  78                 	db	120	;'x'
   353  00FF25  3A                 	db	58	;':'
   354  00FF26  25                 	db	37
   355  00FF27  30                 	db	48	;'0'
   356  00FF28  32                 	db	50	;'2'
   357  00FF29  78                 	db	120	;'x'
   358  00FF2A  20                 	db	32
   359  00FF2B  20                 	db	32
   360  00FF2C  00                 	db	0
   361  00FF2D                     STR_2:
   362  00FF2D  25                 	db	37
   363  00FF2E  75                 	db	117	;'u'
   364  00FF2F  20                 	db	32
   365  00FF30  20                 	db	32
   366  00FF31  20                 	db	32
   367  00FF32  20                 	db	32
   368  00FF33  20                 	db	32
   369  00FF34  20                 	db	32
   370  00FF35  20                 	db	32
   371  00FF36  25                 	db	37
   372  00FF37  75                 	db	117	;'u'
   373  00FF38  20                 	db	32
   374  00FF39  20                 	db	32
   375  00FF3A  20                 	db	32
   376  00FF3B  20                 	db	32
   377  00FF3C  20                 	db	32
   378  00FF3D  20                 	db	32
   379  00FF3E  20                 	db	32
   380  00FF3F  20                 	db	32
   381  00FF40  00                 	db	0
   382  00FF41                     STR_5:
   383  00FF41  54                 	db	84	;'T'
   384  00FF42  69                 	db	105	;'i'
   385  00FF43  6D                 	db	109	;'m'
   386  00FF44  65                 	db	101	;'e'
   387  00FF45  3A                 	db	58	;':'
   388  00FF46  20                 	db	32
   389  00FF47  25                 	db	37
   390  00FF48  69                 	db	105	;'i'
   391  00FF49  73                 	db	115	;'s'
   392  00FF4A  20                 	db	32
   393  00FF4B  20                 	db	32
   394  00FF4C  20                 	db	32
   395  00FF4D  20                 	db	32
   396  00FF4E  20                 	db	32
   397  00FF4F  20                 	db	32
   398  00FF50  20                 	db	32
   399  00FF51  20                 	db	32
   400  00FF52  20                 	db	32
   401  00FF53  00                 	db	0
   402  00FF54                     STR_20:
   403  00FF54  30                 	db	48	;'0'
   404  00FF55  31                 	db	49	;'1'
   405  00FF56  32                 	db	50	;'2'
   406  00FF57  33                 	db	51	;'3'
   407  00FF58  34                 	db	52	;'4'
   408  00FF59  35                 	db	53	;'5'
   409  00FF5A  36                 	db	54	;'6'
   410  00FF5B  37                 	db	55	;'7'
   411  00FF5C  38                 	db	56	;'8'
   412  00FF5D  39                 	db	57	;'9'
   413  00FF5E  61                 	db	97	;'a'
   414  00FF5F  62                 	db	98	;'b'
   415  00FF60  63                 	db	99	;'c'
   416  00FF61  64                 	db	100	;'d'
   417  00FF62  65                 	db	101	;'e'
   418  00FF63  66                 	db	102	;'f'
   419  00FF64  00                 	db	0
   420  00FF65                     STR_17:
   421  00FF65  20                 	db	32
   422  00FF66  20                 	db	32
   423  00FF67  20                 	db	32
   424  00FF68  20                 	db	32
   425  00FF69  20                 	db	32
   426  00FF6A  20                 	db	32
   427  00FF6B  20                 	db	32
   428  00FF6C  20                 	db	32
   429  00FF6D  20                 	db	32
   430  00FF6E  20                 	db	32
   431  00FF6F  20                 	db	32
   432  00FF70  20                 	db	32
   433  00FF71  20                 	db	32
   434  00FF72  20                 	db	32
   435  00FF73  20                 	db	32
   436  00FF74  20                 	db	32
   437  00FF75  00                 	db	0
   438  00FF76                     STR_7:
   439  00FF76  43                 	db	67	;'C'
   440  00FF77  6F                 	db	111	;'o'
   441  00FF78  75                 	db	117	;'u'
   442  00FF79  6E                 	db	110	;'n'
   443  00FF7A  74                 	db	116	;'t'
   444  00FF7B  3A                 	db	58	;':'
   445  00FF7C  20                 	db	32
   446  00FF7D  25                 	db	37
   447  00FF7E  69                 	db	105	;'i'
   448  00FF7F  20                 	db	32
   449  00FF80  20                 	db	32
   450  00FF81  20                 	db	32
   451  00FF82  20                 	db	32
   452  00FF83  20                 	db	32
   453  00FF84  20                 	db	32
   454  00FF85  20                 	db	32
   455  00FF86  00                 	db	0
   456  00FF87                     STR_6:
   457  00FF87  54                 	db	84	;'T'
   458  00FF88  6F                 	db	111	;'o'
   459  00FF89  74                 	db	116	;'t'
   460  00FF8A  61                 	db	97	;'a'
   461  00FF8B  6C                 	db	108	;'l'
   462  00FF8C  20                 	db	32
   463  00FF8D  42                 	db	66	;'B'
   464  00FF8E  6F                 	db	111	;'o'
   465  00FF8F  74                 	db	116	;'t'
   466  00FF90  74                 	db	116	;'t'
   467  00FF91  6C                 	db	108	;'l'
   468  00FF92  65                 	db	101	;'e'
   469  00FF93  20                 	db	32
   470  00FF94  20                 	db	32
   471  00FF95  20                 	db	32
   472  00FF96  20                 	db	32
   473  00FF97  00                 	db	0
   474  00FF98                     STR_8:
   475  00FF98  59                 	db	89	;'Y'
   476  00FF99  4F                 	db	79	;'O'
   477  00FF9A  50                 	db	80	;'P'
   478  00FF9B  20                 	db	32
   479  00FF9C  57                 	db	87	;'W'
   480  00FF9D  69                 	db	105	;'i'
   481  00FF9E  74                 	db	116	;'t'
   482  00FF9F  68                 	db	104	;'h'
   483  00FFA0  20                 	db	32
   484  00FFA1  43                 	db	67	;'C'
   485  00FFA2  61                 	db	97	;'a'
   486  00FFA3  70                 	db	112	;'p'
   487  00FFA4  20                 	db	32
   488  00FFA5  20                 	db	32
   489  00FFA6  20                 	db	32
   490  00FFA7  20                 	db	32
   491  00FFA8  00                 	db	0
   492  00FFA9                     STR_12:
   493  00FFA9  45                 	db	69	;'E'
   494  00FFAA  53                 	db	83	;'S'
   495  00FFAB  4B                 	db	75	;'K'
   496  00FFAC  41                 	db	65	;'A'
   497  00FFAD  20                 	db	32
   498  00FFAE  57                 	db	87	;'W'
   499  00FFAF  69                 	db	105	;'i'
   500  00FFB0  74                 	db	116	;'t'
   501  00FFB1  68                 	db	104	;'h'
   502  00FFB2  20                 	db	32
   503  00FFB3  43                 	db	67	;'C'
   504  00FFB4  61                 	db	97	;'a'
   505  00FFB5  70                 	db	112	;'p'
   506  00FFB6  20                 	db	32
   507  00FFB7  20                 	db	32
   508  00FFB8  20                 	db	32
   509  00FFB9  00                 	db	0
   510  00FFBA                     STR_16:
   511  00FFBA  4F                 	db	79	;'O'
   512  00FFBB  70                 	db	112	;'p'
   513  00FFBC  65                 	db	101	;'e'
   514  00FFBD  72                 	db	114	;'r'
   515  00FFBE  61                 	db	97	;'a'
   516  00FFBF  74                 	db	116	;'t'
   517  00FFC0  69                 	db	105	;'i'
   518  00FFC1  6F                 	db	111	;'o'
   519  00FFC2  6E                 	db	110	;'n'
   520  00FFC3  20                 	db	32
   521  00FFC4  44                 	db	68	;'D'
   522  00FFC5  6F                 	db	111	;'o'
   523  00FFC6  6E                 	db	110	;'n'
   524  00FFC7  65                 	db	101	;'e'
   525  00FFC8  21                 	db	33
   526  00FFC9  20                 	db	32
   527  00FFCA  00                 	db	0
   528  00FFCB                     STR_4:
   529  00FFCB  54                 	db	84	;'T'
   530  00FFCC  6F                 	db	111	;'o'
   531  00FFCD  74                 	db	116	;'t'
   532  00FFCE  61                 	db	97	;'a'
   533  00FFCF  6C                 	db	108	;'l'
   534  00FFD0  20                 	db	32
   535  00FFD1  4F                 	db	79	;'O'
   536  00FFD2  70                 	db	112	;'p'
   537  00FFD3  65                 	db	101	;'e'
   538  00FFD4  72                 	db	114	;'r'
   539  00FFD5  61                 	db	97	;'a'
   540  00FFD6  74                 	db	116	;'t'
   541  00FFD7  69                 	db	105	;'i'
   542  00FFD8  6F                 	db	111	;'o'
   543  00FFD9  6E                 	db	110	;'n'
   544  00FFDA  20                 	db	32
   545  00FFDB  00                 	db	0
   546  00FFDC                     STR_10:
   547  00FFDC  59                 	db	89	;'Y'
   548  00FFDD  4F                 	db	79	;'O'
   549  00FFDE  50                 	db	80	;'P'
   550  00FFDF  20                 	db	32
   551  00FFE0  57                 	db	87	;'W'
   552  00FFE1  69                 	db	105	;'i'
   553  00FFE2  74                 	db	116	;'t'
   554  00FFE3  68                 	db	104	;'h'
   555  00FFE4  20                 	db	32
   556  00FFE5  4E                 	db	78	;'N'
   557  00FFE6  6F                 	db	111	;'o'
   558  00FFE7  20                 	db	32
   559  00FFE8  43                 	db	67	;'C'
   560  00FFE9  61                 	db	97	;'a'
   561  00FFEA  70                 	db	112	;'p'
   562  00FFEB  20                 	db	32
   563  00FFEC  00                 	db	0
   564  00FFED                     STR_14:
   565  00FFED  45                 	db	69	;'E'
   566  00FFEE  53                 	db	83	;'S'
   567  00FFEF  4B                 	db	75	;'K'
   568  00FFF0  41                 	db	65	;'A'
   569  00FFF1  20                 	db	32
   570  00FFF2  57                 	db	87	;'W'
   571  00FFF3  69                 	db	105	;'i'
   572  00FFF4  74                 	db	116	;'t'
   573  00FFF5  68                 	db	104	;'h'
   574  00FFF6  20                 	db	32
   575  00FFF7  4E                 	db	78	;'N'
   576  00FFF8  6F                 	db	111	;'o'
   577  00FFF9  20                 	db	32
   578  00FFFA  43                 	db	67	;'C'
   579  00FFFB  61                 	db	97	;'a'
   580  00FFFC  70                 	db	112	;'p'
   581  00FFFD  00                 	db	0
   582  0000                     
   583                           ; #config settings
   584  00FFFE  00                 	db	0	; dummy byte at the end
   585  0000                     
   586                           	psect	cinit
   587  002834                     __pcinit:
   588                           	opt stack 0
   589  002834                     start_initialization:
   590                           	opt stack 0
   591  002834                     __initialization:
   592                           	opt stack 0
   593                           
   594                           ; Initialize objects allocated to BANK1 (16 bytes)
   595                           ; load TBLPTR registers with __pidataBANK1
   596  002834  0E46               	movlw	low __pidataBANK1
   597  002836  6EF6               	movwf	tblptrl,c
   598  002838  0E29               	movlw	high __pidataBANK1
   599  00283A  6EF7               	movwf	tblptrh,c
   600  00283C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   601  00283E  6EF8               	movwf	tblptru,c
   602  002840  EE01  F01B         	lfsr	0,__pdataBANK1
   603  002844  EE10 F010          	lfsr	1,16
   604  002848                     copy_data0:
   605  002848  0009               	tblrd		*+
   606  00284A  CFF5 FFEE          	movff	tablat,postinc0
   607  00284E  50E5               	movf	postdec1,w,c
   608  002850  50E1               	movf	fsr1l,w,c
   609  002852  E1FA               	bnz	copy_data0
   610                           
   611                           ; Clear objects allocated to BANK1 (1 bytes)
   612  002854  0101               	movlb	1
   613  002856  6B2B               	clrf	__pbssBANK1& (0+255),b
   614                           
   615                           ; Clear objects allocated to BANK0 (1 bytes)
   616  002858  0100               	movlb	0
   617  00285A  6BF7               	clrf	__pbssBANK0& (0+255),b
   618                           
   619                           ; Clear objects allocated to COMRAM (2 bytes)
   620  00285C  6A6E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   621  00285E  6A6D               	clrf	__pbssCOMRAM& (0+255),c
   622  002860                     end_of_initialization:
   623                           	opt stack 0
   624  002860                     __end_of__initialization:
   625                           	opt stack 0
   626  002860  906F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   627  002862  926F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   628  002864  0E00               	movlw	low (__Lmediumconst shr (0+16))
   629  002866  6EF8               	movwf	tblptru,c
   630  002868  0100               	movlb	0
   631  00286A  EF1C  F009         	goto	_main	;jump to C main() function
   632                           tblptru	equ	0xFF8
   633                           tblptrh	equ	0xFF7
   634                           tblptrl	equ	0xFF6
   635                           tablat	equ	0xFF5
   636                           postinc0	equ	0xFEE
   637                           postdec1	equ	0xFE5
   638                           fsr1l	equ	0xFE1
   639                           
   640                           	psect	bssCOMRAM
   641  00006D                     __pbssCOMRAM:
   642                           	opt stack 0
   643  00006D                     _errno:
   644                           	opt stack 0
   645  00006D                     	ds	2
   646                           tblptru	equ	0xFF8
   647                           tblptrh	equ	0xFF7
   648                           tblptrl	equ	0xFF6
   649                           tablat	equ	0xFF5
   650                           postinc0	equ	0xFEE
   651                           postdec1	equ	0xFE5
   652                           fsr1l	equ	0xFE1
   653                           
   654                           	psect	bssBANK0
   655  0000F7                     __pbssBANK0:
   656                           	opt stack 0
   657  0000F7                     _bot_type:
   658                           	opt stack 0
   659  0000F7                     	ds	1
   660                           tblptru	equ	0xFF8
   661                           tblptrh	equ	0xFF7
   662                           tblptrl	equ	0xFF6
   663                           tablat	equ	0xFF5
   664                           postinc0	equ	0xFEE
   665                           postdec1	equ	0xFE5
   666                           fsr1l	equ	0xFE1
   667                           
   668                           	psect	bssBANK1
   669  00012B                     __pbssBANK1:
   670                           	opt stack 0
   671  00012B                     _curr_state:
   672                           	opt stack 0
   673  00012B                     	ds	1
   674                           tblptru	equ	0xFF8
   675                           tblptrh	equ	0xFF7
   676                           tblptrl	equ	0xFF6
   677                           tablat	equ	0xFF5
   678                           postinc0	equ	0xFEE
   679                           postdec1	equ	0xFE5
   680                           fsr1l	equ	0xFE1
   681                           
   682                           	psect	dataBANK1
   683  00011B                     __pdataBANK1:
   684                           	opt stack 0
   685  00011B                     hex_to_dec@F3223:
   686                           	opt stack 0
   687  00011B                     	ds	16
   688                           tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           postinc0	equ	0xFEE
   693                           postdec1	equ	0xFE5
   694                           fsr1l	equ	0xFE1
   695                           
   696                           	psect	cstackBANK1
   697  000100                     __pcstackBANK1:
   698                           	opt stack 0
   699  000100                     main@start_time:
   700                           	opt stack 0
   701                           
   702                           ; 7 bytes @ 0x0
   703  000100                     	ds	7
   704  000107                     main@end_time:
   705                           	opt stack 0
   706                           
   707                           ; 7 bytes @ 0x7
   708  000107                     	ds	7
   709  00010E                     main@time:
   710                           	opt stack 0
   711                           
   712                           ; 7 bytes @ 0xE
   713  00010E                     	ds	7
   714  000115                     main@bot_count:
   715                           	opt stack 0
   716                           
   717                           ; 4 bytes @ 0x15
   718  000115                     	ds	4
   719  000119                     main@step_state:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x19
   723  000119                     	ds	2
   724                           tblptru	equ	0xFF8
   725                           tblptrh	equ	0xFF7
   726                           tblptrl	equ	0xFF6
   727                           tablat	equ	0xFF5
   728                           postinc0	equ	0xFEE
   729                           postdec1	equ	0xFE5
   730                           fsr1l	equ	0xFE1
   731                           
   732                           	psect	cstackBANK0
   733  000080                     __pcstackBANK0:
   734                           	opt stack 0
   735  000080                     _pow$1477:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0x0
   739  000080                     	ds	3
   740  000083                     _pow$1478:
   741                           	opt stack 0
   742                           
   743                           ; 3 bytes @ 0x3
   744  000083                     	ds	3
   745  000086                     pow@sign:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x6
   749  000086                     	ds	1
   750  000087                     pow@yi:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0x7
   754  000087                     	ds	4
   755  00008B                     _dec_to_hex$1472:
   756                           	opt stack 0
   757                           
   758                           ; 3 bytes @ 0xB
   759  00008B                     	ds	3
   760  00008E                     _dec_to_hex$1473:
   761                           	opt stack 0
   762                           
   763                           ; 3 bytes @ 0xE
   764  00008E                     	ds	3
   765  000091                     dec_to_hex@temp:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x11
   769  000091                     	ds	2
   770  000093                     dec_to_hex@i:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x13
   774  000093                     	ds	2
   775  000095                     dec_to_hex@hexnum:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x15
   779  000095                     	ds	2
   780  000097                     dec_to_hex@quotient:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x17
   784  000097                     	ds	2
   785  000099                     ?_time_difference:
   786                           	opt stack 0
   787  000099                     time_difference@time1:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x19
   791  000099                     	ds	2
   792  00009B                     time_difference@time2:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x1B
   796  00009B                     	ds	2
   797  00009D                     time_difference@hr1:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0x1D
   801  00009D                     	ds	2
   802  00009F                     time_difference@hr2:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x1F
   806  00009F                     	ds	2
   807  0000A1                     time_difference@min1:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x21
   811  0000A1                     	ds	2
   812  0000A3                     time_difference@min2:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x23
   816  0000A3                     	ds	2
   817  0000A5                     time_difference@s1:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x25
   821  0000A5                     	ds	2
   822  0000A7                     time_difference@s2:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0x27
   826  0000A7                     	ds	2
   827  0000A9                     time_difference@d1:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x29
   831  0000A9                     	ds	2
   832  0000AB                     time_difference@d2:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x2B
   836  0000AB                     	ds	2
   837  0000AD                     time_difference@d3:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x2D
   841  0000AD                     	ds	2
   842  0000AF                     ?_printf:
   843                           	opt stack 0
   844  0000AF                     printf@f:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x2F
   848  0000AF                     	ds	8
   849  0000B7                     ??_printf:
   850                           
   851                           ; 1 bytes @ 0x37
   852  0000B7                     	ds	4
   853  0000BB                     printf@idx:
   854                           	opt stack 0
   855                           
   856                           ; 1 bytes @ 0x3B
   857  0000BB                     	ds	1
   858  0000BC                     printf@ap:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x3C
   862  0000BC                     	ds	2
   863  0000BE                     printf@prec:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0x3E
   867  0000BE                     	ds	1
   868  0000BF                     printf@val:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x3F
   872  0000BF                     	ds	2
   873  0000C1                     printf@flag:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x41
   877  0000C1                     	ds	1
   878  0000C2                     printf@width:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x42
   882  0000C2                     	ds	2
   883  0000C4                     printf@c:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x44
   887  0000C4                     	ds	1
   888  0000C5                     init_operation@start_time:
   889                           	opt stack 0
   890  0000C5                     runtime@start_time:
   891                           	opt stack 0
   892  0000C5                     bottle_count@bot_count:
   893                           	opt stack 0
   894  0000C5                     operation_end@step_state:
   895                           	opt stack 0
   896  0000C5                     date_time@time:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x45
   900  0000C5                     	ds	2
   901  0000C7                     ??_date_time:
   902  0000C7                     ??_bottle_count:
   903  0000C7                     init_operation@time:
   904                           	opt stack 0
   905  0000C7                     runtime@end_time:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x47
   909  0000C7                     	ds	2
   910  0000C9                     init_operation@bot_count:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x49
   914  0000C9                     	ds	2
   915  0000CB                     init_operation@step_state:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x4B
   919  0000CB                     	ds	2
   920  0000CD                     ??_init_operation:
   921                           
   922                           ; 1 bytes @ 0x4D
   923  0000CD                     	ds	2
   924  0000CF                     init_operation@r1:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x4F
   928  0000CF                     	ds	2
   929  0000D1                     init_operation@g1:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x51
   933  0000D1                     	ds	2
   934  0000D3                     init_operation@b1:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x53
   938  0000D3                     	ds	2
   939  0000D5                     init_operation@c1:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x55
   943  0000D5                     	ds	2
   944  0000D7                     init_operation@luminosity1:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x57
   948  0000D7                     	ds	2
   949  0000D9                     init_operation@detection_time:
   950                           	opt stack 0
   951                           
   952                           ; 7 bytes @ 0x59
   953  0000D9                     	ds	7
   954  0000E0                     _init_operation$1476:
   955                           	opt stack 0
   956                           
   957                           ; 3 bytes @ 0x60
   958  0000E0                     	ds	3
   959  0000E3                     init_operation@c2:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x63
   963  0000E3                     	ds	2
   964  0000E5                     init_operation@g2:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x65
   968  0000E5                     	ds	2
   969  0000E7                     init_operation@i:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x67
   973  0000E7                     	ds	2
   974  0000E9                     init_operation@red:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x69
   978  0000E9                     	ds	2
   979  0000EB                     init_operation@green:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x6B
   983  0000EB                     	ds	2
   984  0000ED                     init_operation@blue:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x6D
   988  0000ED                     	ds	2
   989  0000EF                     init_operation@clear:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x6F
   993  0000EF                     	ds	2
   994  0000F1                     init_operation@r2:
   995                           	opt stack 0
   996                           
   997                           ; 2 bytes @ 0x71
   998  0000F1                     	ds	2
   999  0000F3                     init_operation@b2:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x73
  1003  0000F3                     	ds	2
  1004  0000F5                     ??_main:
  1005                           
  1006                           ; 1 bytes @ 0x75
  1007  0000F5                     	ds	2
  1008                           tblptru	equ	0xFF8
  1009                           tblptrh	equ	0xFF7
  1010                           tblptrl	equ	0xFF6
  1011                           tablat	equ	0xFF5
  1012                           postinc0	equ	0xFEE
  1013                           postdec1	equ	0xFE5
  1014                           fsr1l	equ	0xFE1
  1015                           
  1016                           	psect	cstackCOMRAM
  1017  000001                     __pcstackCOMRAM:
  1018                           	opt stack 0
  1019  000001                     ??_keypressed:
  1020  000001                     
  1021                           ; 2 bytes @ 0x0
  1022  000001                     	ds	16
  1023  000011                     ??_isdigit:
  1024  000011                     ??_I2C_Master_Wait:
  1025  000011                     ?___wmul:
  1026                           	opt stack 0
  1027  000011                     ?___awdiv:
  1028                           	opt stack 0
  1029  000011                     ?___lwdiv:
  1030                           	opt stack 0
  1031  000011                     ?___ftpack:
  1032                           	opt stack 0
  1033  000011                     ?_frexp:
  1034                           	opt stack 0
  1035  000011                     ?___ftneg:
  1036                           	opt stack 0
  1037  000011                     ?___lldiv:
  1038                           	opt stack 0
  1039  000011                     lcdNibble@temp:
  1040                           	opt stack 0
  1041  000011                     delay@seconds:
  1042                           	opt stack 0
  1043  000011                     stepper@r:
  1044                           	opt stack 0
  1045  000011                     stepper_rev@r:
  1046                           	opt stack 0
  1047  000011                     ___wmul@multiplier:
  1048                           	opt stack 0
  1049  000011                     ___awdiv@dividend:
  1050                           	opt stack 0
  1051  000011                     ___lwdiv@dividend:
  1052                           	opt stack 0
  1053  000011                     ___ftpack@arg:
  1054                           	opt stack 0
  1055  000011                     ___ftge@ff1:
  1056                           	opt stack 0
  1057  000011                     ___ftneg@f1:
  1058                           	opt stack 0
  1059  000011                     frexp@value:
  1060                           	opt stack 0
  1061  000011                     ___lldiv@dividend:
  1062                           	opt stack 0
  1063                           
  1064                           ; 4 bytes @ 0x10
  1065  000011                     	ds	1
  1066  000012                     lcdNibble@data:
  1067                           	opt stack 0
  1068  000012                     I2C_Master_Read@a:
  1069                           	opt stack 0
  1070  000012                     _isdigit$1026:
  1071                           	opt stack 0
  1072  000012                     I2C_Master_Write@d:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x11
  1076  000012                     	ds	1
  1077  000013                     ??_delay:
  1078  000013                     ??_stepper:
  1079  000013                     ??_stepper_rev:
  1080  000013                     lcdInst@data:
  1081                           	opt stack 0
  1082  000013                     putch@data:
  1083                           	opt stack 0
  1084  000013                     I2C_Master_Read@temp:
  1085                           	opt stack 0
  1086  000013                     isdigit@c:
  1087                           	opt stack 0
  1088  000013                     ___wmul@multiplicand:
  1089                           	opt stack 0
  1090  000013                     ___awdiv@divisor:
  1091                           	opt stack 0
  1092  000013                     ___lwdiv@divisor:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x12
  1096  000013                     	ds	1
  1097  000014                     ??_initLCD:
  1098  000014                     ___ftpack@exp:
  1099                           	opt stack 0
  1100  000014                     update_time@time:
  1101                           	opt stack 0
  1102  000014                     delay@i:
  1103                           	opt stack 0
  1104  000014                     stepper@i:
  1105                           	opt stack 0
  1106  000014                     stepper_rev@i:
  1107                           	opt stack 0
  1108  000014                     read_colorsensor1@red:
  1109                           	opt stack 0
  1110  000014                     read_colorsensor2@red:
  1111                           	opt stack 0
  1112  000014                     frexp@eptr:
  1113                           	opt stack 0
  1114  000014                     ___ftge@ff2:
  1115                           	opt stack 0
  1116                           
  1117                           ; 3 bytes @ 0x13
  1118  000014                     	ds	1
  1119  000015                     ___awdiv@counter:
  1120                           	opt stack 0
  1121  000015                     ___ftpack@sign:
  1122                           	opt stack 0
  1123  000015                     ___wmul@product:
  1124                           	opt stack 0
  1125  000015                     ___lwdiv@quotient:
  1126                           	opt stack 0
  1127  000015                     ___lldiv@divisor:
  1128                           	opt stack 0
  1129                           
  1130                           ; 4 bytes @ 0x14
  1131  000015                     	ds	1
  1132  000016                     ??___ftpack:
  1133  000016                     ??_frexp:
  1134  000016                     update_time@i:
  1135                           	opt stack 0
  1136  000016                     delay@i_460:
  1137                           	opt stack 0
  1138  000016                     ___awdiv@sign:
  1139                           	opt stack 0
  1140  000016                     stepper_state@step_state:
  1141                           	opt stack 0
  1142  000016                     read_colorsensor1@green:
  1143                           	opt stack 0
  1144  000016                     read_colorsensor2@green:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x15
  1148  000016                     	ds	1
  1149  000017                     ??___ftge:
  1150  000017                     ___lwdiv@counter:
  1151                           	opt stack 0
  1152  000017                     ___awdiv@quotient:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0x16
  1156  000017                     	ds	1
  1157  000018                     ??_stepper_state:
  1158  000018                     ?___lwmod:
  1159                           	opt stack 0
  1160  000018                     read_colorsensor1@blue:
  1161                           	opt stack 0
  1162  000018                     read_colorsensor2@blue:
  1163                           	opt stack 0
  1164  000018                     ___lwmod@dividend:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x17
  1168  000018                     	ds	1
  1169  000019                     ?___ftdiv:
  1170                           	opt stack 0
  1171  000019                     ?___awtoft:
  1172                           	opt stack 0
  1173  000019                     ?___lltoft:
  1174                           	opt stack 0
  1175  000019                     ___awtoft@c:
  1176                           	opt stack 0
  1177  000019                     ___ftdiv@f1:
  1178                           	opt stack 0
  1179  000019                     ___lldiv@quotient:
  1180                           	opt stack 0
  1181  000019                     ___lltoft@c:
  1182                           	opt stack 0
  1183                           
  1184                           ; 4 bytes @ 0x18
  1185  000019                     	ds	1
  1186  00001A                     stepper_state@i:
  1187                           	opt stack 0
  1188  00001A                     read_colorsensor1@clear:
  1189                           	opt stack 0
  1190  00001A                     read_colorsensor2@clear:
  1191                           	opt stack 0
  1192  00001A                     ___lwmod@divisor:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x19
  1196  00001A                     	ds	2
  1197  00001C                     ___awtoft@sign:
  1198                           	opt stack 0
  1199  00001C                     ___lwmod@counter:
  1200                           	opt stack 0
  1201  00001C                     stepper_state@curr_state:
  1202                           	opt stack 0
  1203  00001C                     ___ftdiv@f2:
  1204                           	opt stack 0
  1205                           
  1206                           ; 3 bytes @ 0x1B
  1207  00001C                     	ds	1
  1208  00001D                     ??___lltoft:
  1209  00001D                     ?___ftmul:
  1210                           	opt stack 0
  1211  00001D                     ___lldiv@counter:
  1212                           	opt stack 0
  1213  00001D                     ___ftmul@f1:
  1214                           	opt stack 0
  1215                           
  1216                           ; 3 bytes @ 0x1C
  1217  00001D                     	ds	1
  1218  00001E                     I2C_Master_Init@c:
  1219                           	opt stack 0
  1220                           
  1221                           ; 4 bytes @ 0x1D
  1222  00001E                     	ds	1
  1223  00001F                     ??___ftdiv:
  1224                           
  1225                           ; 1 bytes @ 0x1E
  1226  00001F                     	ds	1
  1227  000020                     ___ftmul@f2:
  1228                           	opt stack 0
  1229                           
  1230                           ; 3 bytes @ 0x1F
  1231  000020                     	ds	1
  1232  000021                     ___lltoft@exp:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x20
  1236  000021                     	ds	1
  1237  000022                     ??_I2C_Master_Init:
  1238  000022                     ___ftdiv@cntr:
  1239                           	opt stack 0
  1240                           
  1241                           ; 1 bytes @ 0x21
  1242  000022                     	ds	1
  1243  000023                     ??___ftmul:
  1244  000023                     ___ftdiv@f3:
  1245                           	opt stack 0
  1246                           
  1247                           ; 3 bytes @ 0x22
  1248  000023                     	ds	3
  1249  000026                     ___ftdiv@exp:
  1250                           	opt stack 0
  1251  000026                     ___ftmul@exp:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x25
  1255  000026                     	ds	1
  1256  000027                     ___ftdiv@sign:
  1257                           	opt stack 0
  1258  000027                     ___ftmul@f3_as_product:
  1259                           	opt stack 0
  1260                           
  1261                           ; 3 bytes @ 0x26
  1262  000027                     	ds	3
  1263  00002A                     ___ftmul@cntr:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0x29
  1267  00002A                     	ds	1
  1268  00002B                     ___ftmul@sign:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0x2A
  1272  00002B                     	ds	1
  1273  00002C                     ?___ftadd:
  1274                           	opt stack 0
  1275  00002C                     ___ftadd@f1:
  1276                           	opt stack 0
  1277                           
  1278                           ; 3 bytes @ 0x2B
  1279  00002C                     	ds	3
  1280  00002F                     ___ftadd@f2:
  1281                           	opt stack 0
  1282                           
  1283                           ; 3 bytes @ 0x2E
  1284  00002F                     	ds	3
  1285  000032                     ??___ftadd:
  1286                           
  1287                           ; 1 bytes @ 0x31
  1288  000032                     	ds	3
  1289  000035                     ___ftadd@sign:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x34
  1293  000035                     	ds	1
  1294  000036                     ___ftadd@exp2:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x35
  1298  000036                     	ds	1
  1299  000037                     ___ftadd@exp1:
  1300                           	opt stack 0
  1301                           
  1302                           ; 1 bytes @ 0x36
  1303  000037                     	ds	1
  1304  000038                     ?___ftsub:
  1305                           	opt stack 0
  1306  000038                     ?_eval_poly:
  1307                           	opt stack 0
  1308  000038                     ?___fttol:
  1309                           	opt stack 0
  1310  000038                     ___ftsub@f1:
  1311                           	opt stack 0
  1312  000038                     ___fttol@f1:
  1313                           	opt stack 0
  1314  000038                     eval_poly@x:
  1315                           	opt stack 0
  1316                           
  1317                           ; 3 bytes @ 0x37
  1318  000038                     	ds	3
  1319  00003B                     eval_poly@d:
  1320                           	opt stack 0
  1321  00003B                     ___ftsub@f2:
  1322                           	opt stack 0
  1323                           
  1324                           ; 3 bytes @ 0x3A
  1325  00003B                     	ds	1
  1326  00003C                     ??___fttol:
  1327                           
  1328                           ; 1 bytes @ 0x3B
  1329  00003C                     	ds	1
  1330  00003D                     eval_poly@n:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0x3C
  1334  00003D                     	ds	1
  1335  00003E                     
  1336                           ; 1 bytes @ 0x3D
  1337  00003E                     	ds	1
  1338  00003F                     ??_eval_poly:
  1339                           
  1340                           ; 1 bytes @ 0x3E
  1341  00003F                     	ds	2
  1342  000041                     ___fttol@sign1:
  1343                           	opt stack 0
  1344  000041                     eval_poly@res:
  1345                           	opt stack 0
  1346                           
  1347                           ; 3 bytes @ 0x40
  1348  000041                     	ds	1
  1349  000042                     ___fttol@lval:
  1350                           	opt stack 0
  1351                           
  1352                           ; 4 bytes @ 0x41
  1353  000042                     	ds	2
  1354  000044                     ?_log:
  1355                           	opt stack 0
  1356  000044                     ?_ldexp:
  1357                           	opt stack 0
  1358  000044                     ldexp@value:
  1359                           	opt stack 0
  1360  000044                     log@x:
  1361                           	opt stack 0
  1362                           
  1363                           ; 3 bytes @ 0x43
  1364  000044                     	ds	2
  1365  000046                     ___fttol@exp1:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0x45
  1369  000046                     	ds	1
  1370  000047                     ?___altoft:
  1371                           	opt stack 0
  1372  000047                     ldexp@newexp:
  1373                           	opt stack 0
  1374  000047                     log@exponent:
  1375                           	opt stack 0
  1376  000047                     ___altoft@c:
  1377                           	opt stack 0
  1378                           
  1379                           ; 4 bytes @ 0x46
  1380  000047                     	ds	2
  1381  000049                     ??_ldexp:
  1382                           
  1383                           ; 1 bytes @ 0x48
  1384  000049                     	ds	2
  1385  00004B                     ??___altoft:
  1386                           
  1387                           ; 1 bytes @ 0x4A
  1388  00004B                     	ds	4
  1389  00004F                     ___altoft@exp:
  1390                           	opt stack 0
  1391                           
  1392                           ; 1 bytes @ 0x4E
  1393  00004F                     	ds	1
  1394  000050                     ___altoft@sign:
  1395                           	opt stack 0
  1396                           
  1397                           ; 1 bytes @ 0x4F
  1398  000050                     	ds	1
  1399  000051                     ?_floor:
  1400                           	opt stack 0
  1401  000051                     floor@x:
  1402                           	opt stack 0
  1403                           
  1404                           ; 3 bytes @ 0x50
  1405  000051                     	ds	3
  1406  000054                     floor@i:
  1407                           	opt stack 0
  1408                           
  1409                           ; 3 bytes @ 0x53
  1410  000054                     	ds	3
  1411  000057                     floor@expon:
  1412                           	opt stack 0
  1413                           
  1414                           ; 2 bytes @ 0x56
  1415  000057                     	ds	2
  1416  000059                     ?_exp:
  1417                           	opt stack 0
  1418  000059                     exp@x:
  1419                           	opt stack 0
  1420                           
  1421                           ; 3 bytes @ 0x58
  1422  000059                     	ds	3
  1423  00005C                     _exp$1479:
  1424                           	opt stack 0
  1425                           
  1426                           ; 3 bytes @ 0x5B
  1427  00005C                     	ds	3
  1428  00005F                     exp@exponent:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x5E
  1432  00005F                     	ds	2
  1433  000061                     exp@sign:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x60
  1437  000061                     	ds	1
  1438  000062                     ?_pow:
  1439                           	opt stack 0
  1440  000062                     pow@x:
  1441                           	opt stack 0
  1442                           
  1443                           ; 3 bytes @ 0x61
  1444  000062                     	ds	3
  1445  000065                     pow@y:
  1446                           	opt stack 0
  1447                           
  1448                           ; 3 bytes @ 0x64
  1449  000065                     	ds	3
  1450  000068                     ?_dec_to_hex:
  1451                           	opt stack 0
  1452  000068                     dec_to_hex@num:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x67
  1456  000068                     	ds	2
  1457  00006A                     ??_time_difference:
  1458                           
  1459                           ; 1 bytes @ 0x69
  1460  00006A                     	ds	2
  1461  00006C                     date_time@i:
  1462                           	opt stack 0
  1463                           
  1464                           ; 1 bytes @ 0x6B
  1465  00006C                     	ds	1
  1466                           tblptru	equ	0xFF8
  1467                           tblptrh	equ	0xFF7
  1468                           tblptrl	equ	0xFF6
  1469                           tablat	equ	0xFF5
  1470                           postinc0	equ	0xFEE
  1471                           postdec1	equ	0xFE5
  1472                           fsr1l	equ	0xFE1
  1473                           
  1474 ;;
  1475 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1476 ;;
  1477 ;; *************** function _main *****************
  1478 ;; Defined at:
  1479 ;;		line 67 in file "main.c"
  1480 ;; Parameters:    Size  Location     Type
  1481 ;;		None
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;  time            7   14[BANK1 ] unsigned char [7]
  1484 ;;  end_time        7    7[BANK1 ] unsigned char [7]
  1485 ;;  start_time      7    0[BANK1 ] unsigned char [7]
  1486 ;;  bot_count       4   21[BANK1 ] unsigned char [4]
  1487 ;;  step_state      2   25[BANK1 ] unsigned char [2]
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      void 
  1490 ;; Registers used:
  1491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1498 ;;      Locals:         0       0      27       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1499 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1500 ;;      Totals:         0       2      27       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1501 ;;Total ram usage:       29 bytes
  1502 ;; Hardware stack levels required when called:    9
  1503 ;; This function calls:
  1504 ;;		_I2C_Master_Init
  1505 ;;		_bottle_count
  1506 ;;		_date_time
  1507 ;;		_initLCD
  1508 ;;		_init_operation
  1509 ;;		_lcdInst
  1510 ;;		_operation_end
  1511 ;;		_printf
  1512 ;;		_runtime
  1513 ;;		_update_time
  1514 ;; This function is called by:
  1515 ;;		Startup code after reset
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text0
  1520  001238                     __ptext0:
  1521                           	opt stack 0
  1522  001238                     _main:
  1523                           	opt stack 22
  1524                           
  1525                           ;main.c: 71: TRISA = 0xFF;
  1526                           
  1527                           ;incstack = 0
  1528  001238  6892               	setf	3986,c	;volatile
  1529                           
  1530                           ;main.c: 72: TRISB = 0xFF;
  1531  00123A  6893               	setf	3987,c	;volatile
  1532                           
  1533                           ;main.c: 73: TRISC = 0x18;
  1534  00123C  0E18               	movlw	24
  1535  00123E  6E94               	movwf	3988,c	;volatile
  1536                           
  1537                           ;main.c: 74: TRISD = 0x00;
  1538  001240  0E00               	movlw	0
  1539  001242  6E95               	movwf	3989,c	;volatile
  1540                           
  1541                           ;main.c: 75: TRISE = 0x00;
  1542  001244  0E00               	movlw	0
  1543  001246  6E96               	movwf	3990,c	;volatile
  1544                           
  1545                           ;main.c: 77: LATA = 0x00;
  1546  001248  0E00               	movlw	0
  1547  00124A  6E89               	movwf	3977,c	;volatile
  1548                           
  1549                           ;main.c: 78: LATB = 0x00;
  1550  00124C  0E00               	movlw	0
  1551  00124E  6E8A               	movwf	3978,c	;volatile
  1552                           
  1553                           ;main.c: 79: LATC = 0x00;
  1554  001250  0E00               	movlw	0
  1555  001252  6E8B               	movwf	3979,c	;volatile
  1556                           
  1557                           ;main.c: 80: LATD = 0x00;
  1558  001254  0E00               	movlw	0
  1559  001256  6E8C               	movwf	3980,c	;volatile
  1560                           
  1561                           ;main.c: 81: LATE = 0x00;
  1562  001258  0E00               	movlw	0
  1563  00125A  6E8D               	movwf	3981,c	;volatile
  1564                           
  1565                           ;main.c: 83: ADCON0 = 0x00;
  1566  00125C  0E00               	movlw	0
  1567  00125E  6EC2               	movwf	4034,c	;volatile
  1568                           
  1569                           ;main.c: 84: ADCON1 = 0xFF;
  1570  001260  68C1               	setf	4033,c	;volatile
  1571                           
  1572                           ;main.c: 86: INT1IE = 1;
  1573  001262  86F0               	bsf	intcon3,3,c	;volatile
  1574                           
  1575                           ;main.c: 87: (INTCONbits.GIE = 1);
  1576  001264  8EF2               	bsf	intcon,7,c	;volatile
  1577                           
  1578                           ;main.c: 89: nRBPU = 0;
  1579  001266  9EF1               	bcf	intcon2,7,c	;volatile
  1580                           
  1581                           ;main.c: 93: lcdInst(0b00000001);;
  1582  001268  0E01               	movlw	1
  1583  00126A  ECB1  F014         	call	_lcdInst
  1584                           
  1585                           ;main.c: 94: initLCD();
  1586  00126E  EC94  F013         	call	_initLCD	;wreg free
  1587                           
  1588                           ;main.c: 95: unsigned char time[7];
  1589                           ;main.c: 96: unsigned char start_time[7];
  1590                           ;main.c: 97: unsigned char end_time[7];
  1591                           ;main.c: 98: unsigned char bot_count[4];
  1592                           ;main.c: 99: unsigned char step_state[2];
  1593                           ;main.c: 102: I2C_Master_Init(10000);
  1594  001272  0E10               	movlw	16
  1595  001274  6E1E               	movwf	I2C_Master_Init@c,c
  1596  001276  0E27               	movlw	39
  1597  001278  6E1F               	movwf	I2C_Master_Init@c+1,c
  1598  00127A  0E00               	movlw	0
  1599  00127C  6E20               	movwf	I2C_Master_Init@c+2,c
  1600  00127E  0E00               	movlw	0
  1601  001280  6E21               	movwf	I2C_Master_Init@c+3,c
  1602  001282  ECF2  F012         	call	_I2C_Master_Init	;wreg free
  1603                           
  1604                           ;main.c: 105: lcdInst(0b00000001);;
  1605  001286  0E01               	movlw	1
  1606  001288  ECB1  F014         	call	_lcdInst
  1607                           
  1608                           ;main.c: 106: initLCD();
  1609  00128C  EC94  F013         	call	_initLCD	;wreg free
  1610                           
  1611                           ;main.c: 107: lcdInst(0b10000000);;
  1612  001290  0E80               	movlw	128
  1613  001292  ECB1  F014         	call	_lcdInst
  1614                           
  1615                           ;main.c: 109: printf("Press 1 to begin operation");
  1616  001296  0EE4               	movlw	low STR_1
  1617  001298  0100               	movlb	0	; () banked
  1618  00129A  6FAF               	movwf	printf@f& (0+255),b
  1619  00129C  0EFE               	movlw	high STR_1
  1620  00129E  0100               	movlb	0	; () banked
  1621  0012A0  6FB0               	movwf	(printf@f+1)& (0+255),b
  1622  0012A2  ECEB  F002         	call	_printf	;wreg free
  1623                           
  1624                           ;main.c: 110: curr_state = STANDBY;
  1625  0012A6  0E00               	movlw	0
  1626  0012A8  0101               	movlb	1	; () banked
  1627  0012AA  6F2B               	movwf	_curr_state& (0+255),b
  1628                           
  1629                           ; BSR set to: 1
  1630                           ;main.c: 111: bot_type = O;
  1631  0012AC  0E05               	movlw	5
  1632  0012AE  0100               	movlb	0	; () banked
  1633  0012B0  6FF7               	movwf	_bot_type& (0+255),b
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;main.c: 113: switch(curr_state){
  1637                           
  1638                           ;main.c: 112: while (1){
  1639  0012B2  D04B               	goto	l4490
  1640  0012B4                     l4476:
  1641                           
  1642                           ;main.c: 115: operation_end(step_state);
  1643  0012B4  0E19               	movlw	low main@step_state
  1644  0012B6  0100               	movlb	0	; () banked
  1645  0012B8  6FC5               	movwf	operation_end@step_state& (0+255),b
  1646  0012BA  0E01               	movlw	high main@step_state
  1647  0012BC  0100               	movlb	0	; () banked
  1648  0012BE  6FC6               	movwf	(operation_end@step_state+1)& (0+255),b
  1649  0012C0  EC94  F012         	call	_operation_end	;wreg free
  1650                           
  1651                           ;main.c: 116: break;
  1652  0012C4  D053               	goto	l4492
  1653  0012C6                     l4478:
  1654                           
  1655                           ;main.c: 118: init_operation(start_time, time, bot_count, step_state);
  1656  0012C6  0E00               	movlw	low main@start_time
  1657  0012C8  0100               	movlb	0	; () banked
  1658  0012CA  6FC5               	movwf	init_operation@start_time& (0+255),b
  1659  0012CC  0E01               	movlw	high main@start_time
  1660  0012CE  0100               	movlb	0	; () banked
  1661  0012D0  6FC6               	movwf	(init_operation@start_time+1)& (0+255),b
  1662  0012D2  0E0E               	movlw	low main@time
  1663  0012D4  0100               	movlb	0	; () banked
  1664  0012D6  6FC7               	movwf	init_operation@time& (0+255),b
  1665  0012D8  0E01               	movlw	high main@time
  1666  0012DA  0100               	movlb	0	; () banked
  1667  0012DC  6FC8               	movwf	(init_operation@time+1)& (0+255),b
  1668  0012DE  0E15               	movlw	low main@bot_count
  1669  0012E0  0100               	movlb	0	; () banked
  1670  0012E2  6FC9               	movwf	init_operation@bot_count& (0+255),b
  1671  0012E4  0E01               	movlw	high main@bot_count
  1672  0012E6  0100               	movlb	0	; () banked
  1673  0012E8  6FCA               	movwf	(init_operation@bot_count+1)& (0+255),b
  1674  0012EA  0E19               	movlw	low main@step_state
  1675  0012EC  0100               	movlb	0	; () banked
  1676  0012EE  6FCB               	movwf	init_operation@step_state& (0+255),b
  1677  0012F0  0E01               	movlw	high main@step_state
  1678  0012F2  0100               	movlb	0	; () banked
  1679  0012F4  6FCC               	movwf	(init_operation@step_state+1)& (0+255),b
  1680  0012F6  EC09  F000         	call	_init_operation	;wreg free
  1681                           
  1682                           ;main.c: 119: update_time(end_time);
  1683  0012FA  0E07               	movlw	low main@end_time
  1684  0012FC  6E14               	movwf	update_time@time,c
  1685  0012FE  0E01               	movlw	high main@end_time
  1686  001300  6E15               	movwf	update_time@time+1,c
  1687  001302  EC5B  F012         	call	_update_time	;wreg free
  1688                           
  1689                           ;main.c: 120: break;
  1690  001306  D032               	goto	l4492
  1691  001308                     l4482:
  1692                           
  1693                           ;main.c: 122: date_time(time);
  1694  001308  0E0E               	movlw	low main@time
  1695  00130A  0100               	movlb	0	; () banked
  1696  00130C  6FC5               	movwf	date_time@time& (0+255),b
  1697  00130E  0E01               	movlw	high main@time
  1698  001310  0100               	movlb	0	; () banked
  1699  001312  6FC6               	movwf	(date_time@time+1)& (0+255),b
  1700  001314  ECC5  F009         	call	_date_time	;wreg free
  1701                           
  1702                           ;main.c: 123: break;
  1703  001318  D029               	goto	l4492
  1704  00131A                     l4484:
  1705                           
  1706                           ;main.c: 125: bottle_count(bot_count);
  1707  00131A  0E15               	movlw	low main@bot_count
  1708  00131C  0100               	movlb	0	; () banked
  1709  00131E  6FC5               	movwf	bottle_count@bot_count& (0+255),b
  1710  001320  0E01               	movlw	high main@bot_count
  1711  001322  0100               	movlb	0	; () banked
  1712  001324  6FC6               	movwf	(bottle_count@bot_count+1)& (0+255),b
  1713  001326  ECD2  F004         	call	_bottle_count	;wreg free
  1714                           
  1715                           ;main.c: 126: break;
  1716  00132A  D020               	goto	l4492
  1717  00132C                     l4486:
  1718                           
  1719                           ;main.c: 128: runtime(start_time, end_time);
  1720  00132C  0E00               	movlw	low main@start_time
  1721  00132E  0100               	movlb	0	; () banked
  1722  001330  6FC5               	movwf	runtime@start_time& (0+255),b
  1723  001332  0E01               	movlw	high main@start_time
  1724  001334  0100               	movlb	0	; () banked
  1725  001336  6FC6               	movwf	(runtime@start_time+1)& (0+255),b
  1726  001338  0E07               	movlw	low main@end_time
  1727  00133A  0100               	movlb	0	; () banked
  1728  00133C  6FC7               	movwf	runtime@end_time& (0+255),b
  1729  00133E  0E01               	movlw	high main@end_time
  1730  001340  0100               	movlb	0	; () banked
  1731  001342  6FC8               	movwf	(runtime@end_time+1)& (0+255),b
  1732  001344  EC6F  F013         	call	_runtime	;wreg free
  1733                           
  1734                           ;main.c: 130: }
  1735                           
  1736                           ;main.c: 129: break;
  1737  001348  D011               	goto	l4492
  1738  00134A                     l4490:
  1739  00134A  0101               	movlb	1	; () banked
  1740  00134C  512B               	movf	_curr_state& (0+255),w,b
  1741                           
  1742                           ; Switch size 1, requested type "space"
  1743                           ; Number of cases is 5, Range of values is 1 to 5
  1744                           ; switch strategies available:
  1745                           ; Name         Instructions Cycles
  1746                           ; simple_byte           16     9 (average)
  1747                           ;	Chosen strategy is simple_byte
  1748  00134E  0A01               	xorlw	1	; case 1
  1749  001350  B4D8               	btfsc	status,2,c
  1750  001352  D7B9               	goto	l4478
  1751  001354  0A03               	xorlw	3	; case 2
  1752  001356  B4D8               	btfsc	status,2,c
  1753  001358  D7AD               	goto	l4476
  1754  00135A  0A01               	xorlw	1	; case 3
  1755  00135C  B4D8               	btfsc	status,2,c
  1756  00135E  D7D4               	goto	l4482
  1757  001360  0A07               	xorlw	7	; case 4
  1758  001362  B4D8               	btfsc	status,2,c
  1759  001364  D7DA               	goto	l4484
  1760  001366  0A01               	xorlw	1	; case 5
  1761  001368  B4D8               	btfsc	status,2,c
  1762  00136A  D7E0               	goto	l4486
  1763  00136C                     l4492:
  1764                           
  1765                           ;main.c: 131: _delay((unsigned long)((100)*(10000000/4000.0)));
  1766  00136C  0E02               	movlw	2
  1767  00136E  0100               	movlb	0	; () banked
  1768  001370  6FF6               	movwf	(??_main+1)& (0+255),b
  1769  001372  0E45               	movlw	69
  1770  001374  0100               	movlb	0	; () banked
  1771  001376  6FF5               	movwf	??_main& (0+255),b
  1772  001378  0EA9               	movlw	169
  1773  00137A                     u3597:
  1774  00137A  2EE8               	decfsz	wreg,f,c
  1775  00137C  D7FE               	bra	u3597
  1776  00137E  2FF5               	decfsz	??_main& (0+255),f,b
  1777  001380  D7FC               	bra	u3597
  1778  001382  2FF6               	decfsz	(??_main+1)& (0+255),f,b
  1779  001384  D7FA               	bra	u3597
  1780  001386  D000               	nop2	
  1781  001388  D7E0               	goto	l4490
  1782  00138A                     __end_of_main:
  1783                           	opt stack 0
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           intcon	equ	0xFF2
  1789                           intcon2	equ	0xFF1
  1790                           intcon3	equ	0xFF0
  1791                           postinc0	equ	0xFEE
  1792                           wreg	equ	0xFE8
  1793                           postdec1	equ	0xFE5
  1794                           fsr1l	equ	0xFE1
  1795                           status	equ	0xFD8
  1796                           
  1797 ;; *************** function _runtime *****************
  1798 ;; Defined at:
  1799 ;;		line 348 in file "main.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;  start_time      2   69[BANK0 ] PTR unsigned char 
  1802 ;;		 -> main@start_time(7), 
  1803 ;;  end_time        2   71[BANK0 ] PTR unsigned char 
  1804 ;;		 -> main@end_time(7), 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      void 
  1809 ;; Registers used:
  1810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1816 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1819 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1820 ;;Total ram usage:        4 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    8
  1823 ;; This function calls:
  1824 ;;		_lcdInst
  1825 ;;		_printf
  1826 ;;		_time_difference
  1827 ;; This function is called by:
  1828 ;;		_main
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           	psect	text1
  1833  0026DE                     __ptext1:
  1834                           	opt stack 0
  1835  0026DE                     _runtime:
  1836                           	opt stack 22
  1837                           
  1838                           ;main.c: 349: lcdInst(0b10000000);;
  1839                           
  1840                           ;incstack = 0
  1841  0026DE  0E80               	movlw	128
  1842  0026E0  ECB1  F014         	call	_lcdInst
  1843                           
  1844                           ;main.c: 350: printf("Total Operation ");
  1845  0026E4  0ECB               	movlw	low STR_4
  1846  0026E6  0100               	movlb	0	; () banked
  1847  0026E8  6FAF               	movwf	printf@f& (0+255),b
  1848  0026EA  0EFF               	movlw	high STR_4
  1849  0026EC  0100               	movlb	0	; () banked
  1850  0026EE  6FB0               	movwf	(printf@f+1)& (0+255),b
  1851  0026F0  ECEB  F002         	call	_printf	;wreg free
  1852                           
  1853                           ;main.c: 351: lcdInst(0b11000000);;
  1854  0026F4  0EC0               	movlw	192
  1855  0026F6  ECB1  F014         	call	_lcdInst
  1856                           
  1857                           ;main.c: 352: printf("Time: %is         ", time_difference(end_time, start_time));
  1858  0026FA  0E41               	movlw	low STR_5
  1859  0026FC  0100               	movlb	0	; () banked
  1860  0026FE  6FAF               	movwf	printf@f& (0+255),b
  1861  002700  0EFF               	movlw	high STR_5
  1862  002702  0100               	movlb	0	; () banked
  1863  002704  6FB0               	movwf	(printf@f+1)& (0+255),b
  1864  002706  C0C7  F099         	movff	runtime@end_time,time_difference@time1
  1865  00270A  C0C8  F09A         	movff	runtime@end_time+1,time_difference@time1+1
  1866  00270E  C0C5  F09B         	movff	runtime@start_time,time_difference@time2
  1867  002712  C0C6  F09C         	movff	runtime@start_time+1,time_difference@time2+1
  1868  002716  EC9B  F007         	call	_time_difference	;wreg free
  1869  00271A  C099  F0B1         	movff	?_time_difference,?_printf+2
  1870  00271E  C09A  F0B2         	movff	?_time_difference+1,?_printf+3
  1871  002722  ECEB  F002         	call	_printf	;wreg free
  1872  002726  0012               	return		;funcret
  1873  002728                     __end_of_runtime:
  1874                           	opt stack 0
  1875                           tblptru	equ	0xFF8
  1876                           tblptrh	equ	0xFF7
  1877                           tblptrl	equ	0xFF6
  1878                           tablat	equ	0xFF5
  1879                           intcon	equ	0xFF2
  1880                           intcon2	equ	0xFF1
  1881                           intcon3	equ	0xFF0
  1882                           postinc0	equ	0xFEE
  1883                           wreg	equ	0xFE8
  1884                           postdec1	equ	0xFE5
  1885                           fsr1l	equ	0xFE1
  1886                           status	equ	0xFD8
  1887                           
  1888 ;; *************** function _operation_end *****************
  1889 ;; Defined at:
  1890 ;;		line 394 in file "main.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;  step_state      2   69[BANK0 ] PTR unsigned char 
  1893 ;;		 -> main@step_state(2), 
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1905 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;Total ram usage:        2 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    4
  1912 ;; This function calls:
  1913 ;;		_delay
  1914 ;;		_lcdInst
  1915 ;;		_printf
  1916 ;;		_stepper_state
  1917 ;; This function is called by:
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text2
  1923  002528                     __ptext2:
  1924                           	opt stack 0
  1925  002528                     _operation_end:
  1926                           	opt stack 26
  1927                           
  1928                           ;main.c: 395: PORTEbits.RE1 = 0;
  1929                           
  1930                           ;incstack = 0
  1931  002528  9284               	bcf	3972,1,c	;volatile
  1932                           
  1933                           ;main.c: 396: lcdInst(0b10000000);;
  1934  00252A  0E80               	movlw	128
  1935  00252C  ECB1  F014         	call	_lcdInst
  1936                           
  1937                           ;main.c: 397: printf("Operation Done! ");
  1938  002530  0EBA               	movlw	low STR_16
  1939  002532  0100               	movlb	0	; () banked
  1940  002534  6FAF               	movwf	printf@f& (0+255),b
  1941  002536  0EFF               	movlw	high STR_16
  1942  002538  0100               	movlb	0	; () banked
  1943  00253A  6FB0               	movwf	(printf@f+1)& (0+255),b
  1944  00253C  ECEB  F002         	call	_printf	;wreg free
  1945                           
  1946                           ;main.c: 398: lcdInst(0b11000000);;
  1947  002540  0EC0               	movlw	192
  1948  002542  ECB1  F014         	call	_lcdInst
  1949                           
  1950                           ;main.c: 399: printf("                ");
  1951  002546  0E65               	movlw	low STR_17
  1952  002548  0100               	movlb	0	; () banked
  1953  00254A  6FAF               	movwf	printf@f& (0+255),b
  1954  00254C  0EFF               	movlw	high STR_17
  1955  00254E  0100               	movlb	0	; () banked
  1956  002550  6FB0               	movwf	(printf@f+1)& (0+255),b
  1957  002552  ECEB  F002         	call	_printf	;wreg free
  1958                           
  1959                           ;main.c: 400: curr_state = RUNTIME;
  1960  002556  0E05               	movlw	5
  1961  002558  0101               	movlb	1	; () banked
  1962  00255A  6F2B               	movwf	_curr_state& (0+255),b
  1963                           
  1964                           ; BSR set to: 1
  1965                           ;main.c: 401: step_state[1] = 1;
  1966  00255C  0100               	movlb	0	; () banked
  1967  00255E  EE20 F001          	lfsr	2,1
  1968  002562  51C5               	movf	operation_end@step_state& (0+255),w,b
  1969  002564  26D9               	addwf	fsr2l,f,c
  1970  002566  51C6               	movf	(operation_end@step_state+1)& (0+255),w,b
  1971  002568  22DA               	addwfc	fsr2h,f,c
  1972  00256A  0E01               	movlw	1
  1973  00256C  6EDF               	movwf	indf2,c
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;main.c: 402: stepper_state(step_state);
  1977  00256E  C0C5  F016         	movff	operation_end@step_state,stepper_state@step_state
  1978  002572  C0C6  F017         	movff	operation_end@step_state+1,stepper_state@step_state+1
  1979  002576  EC0D  F00E         	call	_stepper_state	;wreg free
  1980                           
  1981                           ;main.c: 403: delay(1);
  1982  00257A  0E00               	movlw	0
  1983  00257C  6E12               	movwf	delay@seconds+1,c
  1984  00257E  0E01               	movlw	1
  1985  002580  6E11               	movwf	delay@seconds,c
  1986  002582  ECB7  F013         	call	_delay	;wreg free
  1987  002586  0012               	return	
  1988  002588                     __end_of_operation_end:
  1989                           	opt stack 0
  1990                           tblptru	equ	0xFF8
  1991                           tblptrh	equ	0xFF7
  1992                           tblptrl	equ	0xFF6
  1993                           tablat	equ	0xFF5
  1994                           intcon	equ	0xFF2
  1995                           intcon2	equ	0xFF1
  1996                           intcon3	equ	0xFF0
  1997                           postinc0	equ	0xFEE
  1998                           wreg	equ	0xFE8
  1999                           postdec1	equ	0xFE5
  2000                           fsr1l	equ	0xFE1
  2001                           indf2	equ	0xFDF
  2002                           fsr2h	equ	0xFDA
  2003                           fsr2l	equ	0xFD9
  2004                           status	equ	0xFD8
  2005                           
  2006 ;; *************** function _delay *****************
  2007 ;; Defined at:
  2008 ;;		line 205 in file "main.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  seconds         2   16[COMRAM] int 
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;  i               1   21[COMRAM] unsigned char 
  2013 ;;  i               2   19[COMRAM] int 
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg, status,2, status,0
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2023 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;Total ram usage:        6 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:    1
  2030 ;; This function calls:
  2031 ;;		Nothing
  2032 ;; This function is called by:
  2033 ;;		_operation_end
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           	psect	text3
  2038  00276E                     __ptext3:
  2039                           	opt stack 0
  2040  00276E                     _delay:
  2041                           	opt stack 28
  2042                           
  2043                           ;main.c: 206: for (int i = 0; i <= seconds; i ++) {
  2044                           
  2045                           ;incstack = 0
  2046  00276E  0E00               	movlw	0
  2047  002770  6E15               	movwf	delay@i+1,c
  2048  002772  0E00               	movlw	0
  2049  002774  6E14               	movwf	delay@i,c
  2050  002776  D012               	goto	l3696
  2051  002778                     l3684:
  2052                           
  2053                           ;main.c: 207: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2054  002778  0E00               	movlw	0
  2055  00277A  6E16               	movwf	delay@i_460,c
  2056  00277C                     l3686:
  2057  00277C  0E63               	movlw	99
  2058  00277E  6416               	cpfsgt	delay@i_460,c
  2059  002780  D001               	goto	l3690
  2060  002782  D00A               	goto	l3694
  2061  002784                     l3690:
  2062  002784  0E21               	movlw	33
  2063  002786  6E13               	movwf	??_delay& (0+255),c
  2064  002788  0E76               	movlw	118
  2065  00278A                     u3607:
  2066  00278A  2EE8               	decfsz	wreg,f,c
  2067  00278C  D7FE               	bra	u3607
  2068  00278E  2E13               	decfsz	??_delay& (0+255),f,c
  2069  002790  D7FC               	bra	u3607
  2070  002792  D000               	nop2	
  2071  002794  2A16               	incf	delay@i_460,f,c
  2072  002796  D7F2               	goto	l3686
  2073  002798                     l3694:
  2074  002798  4A14               	infsnz	delay@i,f,c
  2075  00279A  2A15               	incf	delay@i+1,f,c
  2076  00279C                     l3696:
  2077  00279C  5014               	movf	delay@i,w,c
  2078  00279E  5C11               	subwf	delay@seconds,w,c
  2079  0027A0  5012               	movf	delay@seconds+1,w,c
  2080  0027A2  0A80               	xorlw	128
  2081  0027A4  6E13               	movwf	??_delay& (0+255),c
  2082  0027A6  5015               	movf	delay@i+1,w,c
  2083  0027A8  0A80               	xorlw	128
  2084  0027AA  5813               	subwfb	??_delay& (0+255),w,c
  2085  0027AC  A0D8               	btfss	status,0,c
  2086  0027AE  0012               	return	
  2087  0027B0  D7E3               	goto	l3684
  2088  0027B2                     __end_of_delay:
  2089                           	opt stack 0
  2090                           tblptru	equ	0xFF8
  2091                           tblptrh	equ	0xFF7
  2092                           tblptrl	equ	0xFF6
  2093                           tablat	equ	0xFF5
  2094                           intcon	equ	0xFF2
  2095                           intcon2	equ	0xFF1
  2096                           intcon3	equ	0xFF0
  2097                           postinc0	equ	0xFEE
  2098                           wreg	equ	0xFE8
  2099                           postdec1	equ	0xFE5
  2100                           fsr1l	equ	0xFE1
  2101                           indf2	equ	0xFDF
  2102                           fsr2h	equ	0xFDA
  2103                           fsr2l	equ	0xFD9
  2104                           status	equ	0xFD8
  2105                           
  2106 ;; *************** function _init_operation *****************
  2107 ;; Defined at:
  2108 ;;		line 256 in file "main.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;  start_time      2   69[BANK0 ] PTR unsigned char 
  2111 ;;		 -> main@start_time(7), 
  2112 ;;  time            2   71[BANK0 ] PTR unsigned char 
  2113 ;;		 -> main@time(7), 
  2114 ;;  bot_count       2   73[BANK0 ] PTR unsigned char 
  2115 ;;		 -> main@bot_count(4), 
  2116 ;;  step_state      2   75[BANK0 ] PTR unsigned char 
  2117 ;;		 -> main@step_state(2), 
  2118 ;; Auto vars:     Size  Location     Type
  2119 ;;  b2              2  115[BANK0 ] int 
  2120 ;;  r2              2  113[BANK0 ] int 
  2121 ;;  g2              2  101[BANK0 ] int 
  2122 ;;  c2              2   99[BANK0 ] int 
  2123 ;;  luminosity1     2   87[BANK0 ] int 
  2124 ;;  c1              2   85[BANK0 ] int 
  2125 ;;  b1              2   83[BANK0 ] int 
  2126 ;;  g1              2   81[BANK0 ] int 
  2127 ;;  r1              2   79[BANK0 ] int 
  2128 ;;  i               2  103[BANK0 ] int 
  2129 ;;  detection_ti    7   89[BANK0 ] unsigned char [7]
  2130 ;;  clear           2  111[BANK0 ] unsigned char [2]
  2131 ;;  blue            2  109[BANK0 ] unsigned char [2]
  2132 ;;  green           2  107[BANK0 ] unsigned char [2]
  2133 ;;  red             2  105[BANK0 ] unsigned char [2]
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  1    wreg      void 
  2136 ;; Registers used:
  2137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2143 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2144 ;;      Locals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2145 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;      Totals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2147 ;;Total ram usage:       48 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; Hardware stack levels required when called:    8
  2150 ;; This function calls:
  2151 ;;		___awdiv
  2152 ;;		___awtoft
  2153 ;;		___ftadd
  2154 ;;		___ftmul
  2155 ;;		___fttol
  2156 ;;		_initLCD
  2157 ;;		_lcdInst
  2158 ;;		_printf
  2159 ;;		_read_colorsensor1
  2160 ;;		_read_colorsensor2
  2161 ;;		_stepper_state
  2162 ;;		_time_difference
  2163 ;;		_update_time
  2164 ;; This function is called by:
  2165 ;;		_main
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text4
  2170  000012                     __ptext4:
  2171                           	opt stack 0
  2172  000012                     _init_operation:
  2173                           	opt stack 22
  2174                           
  2175                           ;main.c: 257: update_time(start_time);
  2176                           
  2177                           ;incstack = 0
  2178  000012  C0C5  F014         	movff	init_operation@start_time,update_time@time
  2179  000016  C0C6  F015         	movff	init_operation@start_time+1,update_time@time+1
  2180  00001A  EC5B  F012         	call	_update_time	;wreg free
  2181                           
  2182                           ;main.c: 258: lcdInst(0b00000001);;
  2183  00001E  0E01               	movlw	1
  2184  000020  ECB1  F014         	call	_lcdInst
  2185                           
  2186                           ;main.c: 259: initLCD();
  2187  000024  EC94  F013         	call	_initLCD	;wreg free
  2188                           
  2189                           ;main.c: 260: step_state[0] = 1;
  2190  000028  C0CB  FFD9         	movff	init_operation@step_state,fsr2l
  2191  00002C  C0CC  FFDA         	movff	init_operation@step_state+1,fsr2h
  2192  000030  0E01               	movlw	1
  2193  000032  6EDF               	movwf	indf2,c
  2194                           
  2195                           ;main.c: 261: step_state[1] = 1;
  2196  000034  0100               	movlb	0	; () banked
  2197  000036  EE20 F001          	lfsr	2,1
  2198  00003A  51CB               	movf	init_operation@step_state& (0+255),w,b
  2199  00003C  26D9               	addwf	fsr2l,f,c
  2200  00003E  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  2201  000040  22DA               	addwfc	fsr2h,f,c
  2202  000042  0E01               	movlw	1
  2203  000044  6EDF               	movwf	indf2,c
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;main.c: 263: unsigned char detection_time[7];
  2207                           ;main.c: 264: update_time(detection_time);
  2208  000046  0ED9               	movlw	low init_operation@detection_time
  2209  000048  6E14               	movwf	update_time@time,c
  2210  00004A  0E00               	movlw	high init_operation@detection_time
  2211  00004C  6E15               	movwf	update_time@time+1,c
  2212  00004E  EC5B  F012         	call	_update_time	;wreg free
  2213                           
  2214                           ;main.c: 265: for (int i = 0; i<4; i++){
  2215  000052  0E00               	movlw	0
  2216  000054  0100               	movlb	0	; () banked
  2217  000056  6FE8               	movwf	(init_operation@i+1)& (0+255),b
  2218  000058  0E00               	movlw	0
  2219  00005A  6FE7               	movwf	init_operation@i& (0+255),b
  2220                           
  2221                           ; BSR set to: 0
  2222  00005C  0100               	movlb	0	; () banked
  2223  00005E  BFE8               	btfsc	(init_operation@i+1)& (0+255),7,b
  2224  000060  D008               	goto	l4320
  2225  000062  0100               	movlb	0	; () banked
  2226  000064  51E8               	movf	(init_operation@i+1)& (0+255),w,b
  2227  000066  E11B               	bnz	l166
  2228  000068  0E04               	movlw	4
  2229  00006A  0100               	movlb	0	; () banked
  2230  00006C  5DE7               	subwf	init_operation@i& (0+255),w,b
  2231  00006E  B0D8               	btfsc	status,0,c
  2232  000070  D016               	goto	l166
  2233  000072                     l4320:
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;main.c: 266: bot_count[i] = 0;
  2237  000072  0100               	movlb	0	; () banked
  2238  000074  51E7               	movf	init_operation@i& (0+255),w,b
  2239  000076  0100               	movlb	0	; () banked
  2240  000078  25C9               	addwf	init_operation@bot_count& (0+255),w,b
  2241  00007A  6ED9               	movwf	fsr2l,c
  2242  00007C  0100               	movlb	0	; () banked
  2243  00007E  51E8               	movf	(init_operation@i+1)& (0+255),w,b
  2244  000080  0100               	movlb	0	; () banked
  2245  000082  21CA               	addwfc	(init_operation@bot_count+1)& (0+255),w,b
  2246  000084  6EDA               	movwf	fsr2h,c
  2247  000086  0E00               	movlw	0
  2248  000088  6EDF               	movwf	indf2,c
  2249                           
  2250                           ; BSR set to: 0
  2251  00008A  0100               	movlb	0	; () banked
  2252  00008C  4BE7               	infsnz	init_operation@i& (0+255),f,b
  2253  00008E  2BE8               	incf	(init_operation@i+1)& (0+255),f,b
  2254                           
  2255                           ; BSR set to: 0
  2256  000090  0100               	movlb	0	; () banked
  2257  000092  BFE8               	btfsc	(init_operation@i+1)& (0+255),7,b
  2258  000094  D7EE               	goto	l4320
  2259  000096  0100               	movlb	0	; () banked
  2260  000098  51E8               	movf	(init_operation@i+1)& (0+255),w,b
  2261  00009A  E101               	bnz	u3470
  2262  00009C  D7E5               	goto	L1
  2263  00009E                     u3470:
  2264  00009E                     l166:
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;main.c: 267: }
  2268                           ;main.c: 269: unsigned char red[2];
  2269                           ;main.c: 270: unsigned char green[2];
  2270                           ;main.c: 271: unsigned char blue[2];
  2271                           ;main.c: 272: unsigned char clear[2];
  2272                           ;main.c: 274: PORTEbits.RE1 = 1;
  2273  00009E  8284               	bsf	3972,1,c	;volatile
  2274                           
  2275                           ;main.c: 275: PORTEbits.RE0 = 1;
  2276  0000A0  8084               	bsf	3972,0,c	;volatile
  2277                           
  2278                           ;main.c: 277: while((curr_state != OPERATION_END) && (time_difference(time, detection_ti
      +                          me) <20)){
  2279  0000A2  D279               	goto	l4434
  2280  0000A4                     l4326:
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;main.c: 278: update_time(time);
  2284  0000A4  C0C7  F014         	movff	init_operation@time,update_time@time
  2285  0000A8  C0C8  F015         	movff	init_operation@time+1,update_time@time+1
  2286  0000AC  EC5B  F012         	call	_update_time	;wreg free
  2287                           
  2288                           ;main.c: 286: read_colorsensor1(red, green, blue, clear);
  2289  0000B0  0EE9               	movlw	low init_operation@red
  2290  0000B2  6E14               	movwf	read_colorsensor1@red,c
  2291  0000B4  0E00               	movlw	high init_operation@red
  2292  0000B6  6E15               	movwf	read_colorsensor1@red+1,c
  2293  0000B8  0EEB               	movlw	low init_operation@green
  2294  0000BA  6E16               	movwf	read_colorsensor1@green,c
  2295  0000BC  0E00               	movlw	high init_operation@green
  2296  0000BE  6E17               	movwf	read_colorsensor1@green+1,c
  2297  0000C0  0EED               	movlw	low init_operation@blue
  2298  0000C2  6E18               	movwf	read_colorsensor1@blue,c
  2299  0000C4  0E00               	movlw	high init_operation@blue
  2300  0000C6  6E19               	movwf	read_colorsensor1@blue+1,c
  2301  0000C8  0EEF               	movlw	low init_operation@clear
  2302  0000CA  6E1A               	movwf	read_colorsensor1@clear,c
  2303  0000CC  0E00               	movlw	high init_operation@clear
  2304  0000CE  6E1B               	movwf	read_colorsensor1@clear+1,c
  2305  0000D0  EC88  F00B         	call	_read_colorsensor1	;wreg free
  2306                           
  2307                           ;main.c: 287: int r1 = (red[0]<<8) | red[1];
  2308  0000D4  0100               	movlb	0	; () banked
  2309  0000D6  51EA               	movf	(init_operation@red+1)& (0+255),w,b
  2310  0000D8  C0E9  F0CD         	movff	init_operation@red,??_init_operation
  2311  0000DC  0100               	movlb	0	; () banked
  2312  0000DE  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2313  0000E0  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2314  0000E4  0100               	movlb	0	; () banked
  2315  0000E6  6BCD               	clrf	??_init_operation& (0+255),b
  2316  0000E8  0100               	movlb	0	; () banked
  2317  0000EA  11CD               	iorwf	??_init_operation& (0+255),w,b
  2318  0000EC  0100               	movlb	0	; () banked
  2319  0000EE  6FCF               	movwf	init_operation@r1& (0+255),b
  2320  0000F0  0100               	movlb	0	; () banked
  2321  0000F2  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2322  0000F4  0100               	movlb	0	; () banked
  2323  0000F6  6FD0               	movwf	(init_operation@r1+1)& (0+255),b
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;main.c: 288: int g1 = (green[0]<<8) | green[1];
  2327  0000F8  0100               	movlb	0	; () banked
  2328  0000FA  51EC               	movf	(init_operation@green+1)& (0+255),w,b
  2329  0000FC  C0EB  F0CD         	movff	init_operation@green,??_init_operation
  2330  000100  0100               	movlb	0	; () banked
  2331  000102  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2332  000104  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2333  000108  0100               	movlb	0	; () banked
  2334  00010A  6BCD               	clrf	??_init_operation& (0+255),b
  2335  00010C  0100               	movlb	0	; () banked
  2336  00010E  11CD               	iorwf	??_init_operation& (0+255),w,b
  2337  000110  0100               	movlb	0	; () banked
  2338  000112  6FD1               	movwf	init_operation@g1& (0+255),b
  2339  000114  0100               	movlb	0	; () banked
  2340  000116  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2341  000118  0100               	movlb	0	; () banked
  2342  00011A  6FD2               	movwf	(init_operation@g1+1)& (0+255),b
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;main.c: 289: int b1 = (blue[0]<<8) | blue[1];
  2346  00011C  0100               	movlb	0	; () banked
  2347  00011E  51EE               	movf	(init_operation@blue+1)& (0+255),w,b
  2348  000120  C0ED  F0CD         	movff	init_operation@blue,??_init_operation
  2349  000124  0100               	movlb	0	; () banked
  2350  000126  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2351  000128  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2352  00012C  0100               	movlb	0	; () banked
  2353  00012E  6BCD               	clrf	??_init_operation& (0+255),b
  2354  000130  0100               	movlb	0	; () banked
  2355  000132  11CD               	iorwf	??_init_operation& (0+255),w,b
  2356  000134  0100               	movlb	0	; () banked
  2357  000136  6FD3               	movwf	init_operation@b1& (0+255),b
  2358  000138  0100               	movlb	0	; () banked
  2359  00013A  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2360  00013C  0100               	movlb	0	; () banked
  2361  00013E  6FD4               	movwf	(init_operation@b1+1)& (0+255),b
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;main.c: 290: int c1 = (clear[0]<<8) | clear[1];
  2365  000140  0100               	movlb	0	; () banked
  2366  000142  51F0               	movf	(init_operation@clear+1)& (0+255),w,b
  2367  000144  C0EF  F0CD         	movff	init_operation@clear,??_init_operation
  2368  000148  0100               	movlb	0	; () banked
  2369  00014A  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2370  00014C  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2371  000150  0100               	movlb	0	; () banked
  2372  000152  6BCD               	clrf	??_init_operation& (0+255),b
  2373  000154  0100               	movlb	0	; () banked
  2374  000156  11CD               	iorwf	??_init_operation& (0+255),w,b
  2375  000158  0100               	movlb	0	; () banked
  2376  00015A  6FD5               	movwf	init_operation@c1& (0+255),b
  2377  00015C  0100               	movlb	0	; () banked
  2378  00015E  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2379  000160  0100               	movlb	0	; () banked
  2380  000162  6FD6               	movwf	(init_operation@c1+1)& (0+255),b
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;main.c: 291: read_colorsensor2(red, green, blue, clear);
  2384  000164  0EE9               	movlw	low init_operation@red
  2385  000166  6E14               	movwf	read_colorsensor2@red,c
  2386  000168  0E00               	movlw	high init_operation@red
  2387  00016A  6E15               	movwf	read_colorsensor2@red+1,c
  2388  00016C  0EEB               	movlw	low init_operation@green
  2389  00016E  6E16               	movwf	read_colorsensor2@green,c
  2390  000170  0E00               	movlw	high init_operation@green
  2391  000172  6E17               	movwf	read_colorsensor2@green+1,c
  2392  000174  0EED               	movlw	low init_operation@blue
  2393  000176  6E18               	movwf	read_colorsensor2@blue,c
  2394  000178  0E00               	movlw	high init_operation@blue
  2395  00017A  6E19               	movwf	read_colorsensor2@blue+1,c
  2396  00017C  0EEF               	movlw	low init_operation@clear
  2397  00017E  6E1A               	movwf	read_colorsensor2@clear,c
  2398  000180  0E00               	movlw	high init_operation@clear
  2399  000182  6E1B               	movwf	read_colorsensor2@clear+1,c
  2400  000184  ECFB  F00A         	call	_read_colorsensor2	;wreg free
  2401                           
  2402                           ;main.c: 292: int r2 = (red[0]<<8) | red[1];
  2403  000188  0100               	movlb	0	; () banked
  2404  00018A  51EA               	movf	(init_operation@red+1)& (0+255),w,b
  2405  00018C  C0E9  F0CD         	movff	init_operation@red,??_init_operation
  2406  000190  0100               	movlb	0	; () banked
  2407  000192  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2408  000194  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2409  000198  0100               	movlb	0	; () banked
  2410  00019A  6BCD               	clrf	??_init_operation& (0+255),b
  2411  00019C  0100               	movlb	0	; () banked
  2412  00019E  11CD               	iorwf	??_init_operation& (0+255),w,b
  2413  0001A0  0100               	movlb	0	; () banked
  2414  0001A2  6FF1               	movwf	init_operation@r2& (0+255),b
  2415  0001A4  0100               	movlb	0	; () banked
  2416  0001A6  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2417  0001A8  0100               	movlb	0	; () banked
  2418  0001AA  6FF2               	movwf	(init_operation@r2+1)& (0+255),b
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;main.c: 293: int g2 = (green[0]<<8) | green[1];
  2422  0001AC  0100               	movlb	0	; () banked
  2423  0001AE  51EC               	movf	(init_operation@green+1)& (0+255),w,b
  2424  0001B0  C0EB  F0CD         	movff	init_operation@green,??_init_operation
  2425  0001B4  0100               	movlb	0	; () banked
  2426  0001B6  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2427  0001B8  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2428  0001BC  0100               	movlb	0	; () banked
  2429  0001BE  6BCD               	clrf	??_init_operation& (0+255),b
  2430  0001C0  0100               	movlb	0	; () banked
  2431  0001C2  11CD               	iorwf	??_init_operation& (0+255),w,b
  2432  0001C4  0100               	movlb	0	; () banked
  2433  0001C6  6FE5               	movwf	init_operation@g2& (0+255),b
  2434  0001C8  0100               	movlb	0	; () banked
  2435  0001CA  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2436  0001CC  0100               	movlb	0	; () banked
  2437  0001CE  6FE6               	movwf	(init_operation@g2+1)& (0+255),b
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;main.c: 294: int b2 = (blue[0]<<8) | blue[1];
  2441  0001D0  0100               	movlb	0	; () banked
  2442  0001D2  51EE               	movf	(init_operation@blue+1)& (0+255),w,b
  2443  0001D4  C0ED  F0CD         	movff	init_operation@blue,??_init_operation
  2444  0001D8  0100               	movlb	0	; () banked
  2445  0001DA  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2446  0001DC  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2447  0001E0  0100               	movlb	0	; () banked
  2448  0001E2  6BCD               	clrf	??_init_operation& (0+255),b
  2449  0001E4  0100               	movlb	0	; () banked
  2450  0001E6  11CD               	iorwf	??_init_operation& (0+255),w,b
  2451  0001E8  0100               	movlb	0	; () banked
  2452  0001EA  6FF3               	movwf	init_operation@b2& (0+255),b
  2453  0001EC  0100               	movlb	0	; () banked
  2454  0001EE  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2455  0001F0  0100               	movlb	0	; () banked
  2456  0001F2  6FF4               	movwf	(init_operation@b2+1)& (0+255),b
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;main.c: 295: int c2 = (clear[0]<<8) | clear[1];
  2460  0001F4  0100               	movlb	0	; () banked
  2461  0001F6  51F0               	movf	(init_operation@clear+1)& (0+255),w,b
  2462  0001F8  C0EF  F0CD         	movff	init_operation@clear,??_init_operation
  2463  0001FC  0100               	movlb	0	; () banked
  2464  0001FE  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2465  000200  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2466  000204  0100               	movlb	0	; () banked
  2467  000206  6BCD               	clrf	??_init_operation& (0+255),b
  2468  000208  0100               	movlb	0	; () banked
  2469  00020A  11CD               	iorwf	??_init_operation& (0+255),w,b
  2470  00020C  0100               	movlb	0	; () banked
  2471  00020E  6FE3               	movwf	init_operation@c2& (0+255),b
  2472  000210  0100               	movlb	0	; () banked
  2473  000212  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2474  000214  0100               	movlb	0	; () banked
  2475  000216  6FE4               	movwf	(init_operation@c2+1)& (0+255),b
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;main.c: 297: int luminosity1 = (-0.32466*r2) + (1.57837*g2) + (-0.73191*b2);
  2479  000218  0E08               	movlw	8
  2480  00021A  6E20               	movwf	___ftmul@f2,c
  2481  00021C  0ECA               	movlw	202
  2482  00021E  6E21               	movwf	___ftmul@f2+1,c
  2483  000220  0E3F               	movlw	63
  2484  000222  6E22               	movwf	___ftmul@f2+2,c
  2485  000224  C0E5  F019         	movff	init_operation@g2,___awtoft@c
  2486  000228  C0E6  F01A         	movff	init_operation@g2+1,___awtoft@c+1
  2487  00022C  EC37  F014         	call	___awtoft	;wreg free
  2488  000230  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2489  000234  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2490  000238  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2491  00023C  EC93  F00D         	call	___ftmul	;wreg free
  2492  000240  C01D  F02F         	movff	?___ftmul,___ftadd@f2
  2493  000244  C01E  F030         	movff	?___ftmul+1,___ftadd@f2+1
  2494  000248  C01F  F031         	movff	?___ftmul+2,___ftadd@f2+2
  2495  00024C  0E3A               	movlw	58
  2496  00024E  6E20               	movwf	___ftmul@f2,c
  2497  000250  0EA6               	movlw	166
  2498  000252  6E21               	movwf	___ftmul@f2+1,c
  2499  000254  0EBE               	movlw	190
  2500  000256  6E22               	movwf	___ftmul@f2+2,c
  2501  000258  C0F1  F019         	movff	init_operation@r2,___awtoft@c
  2502  00025C  C0F2  F01A         	movff	init_operation@r2+1,___awtoft@c+1
  2503  000260  EC37  F014         	call	___awtoft	;wreg free
  2504  000264  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2505  000268  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2506  00026C  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2507  000270  EC93  F00D         	call	___ftmul	;wreg free
  2508  000274  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  2509  000278  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  2510  00027C  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  2511  000280  ECC5  F006         	call	___ftadd	;wreg free
  2512  000284  C02C  F0E0         	movff	?___ftadd,_init_operation$1476
  2513  000288  C02D  F0E1         	movff	?___ftadd+1,_init_operation$1476+1
  2514  00028C  C02E  F0E2         	movff	?___ftadd+2,_init_operation$1476+2
  2515                           
  2516                           ;main.c: 297: int luminosity1 = (-0.32466*r2) + (1.57837*g2) + (-0.73191*b2);
  2517  000290  0E5E               	movlw	94
  2518  000292  6E20               	movwf	___ftmul@f2,c
  2519  000294  0E3B               	movlw	59
  2520  000296  6E21               	movwf	___ftmul@f2+1,c
  2521  000298  0EBF               	movlw	191
  2522  00029A  6E22               	movwf	___ftmul@f2+2,c
  2523  00029C  C0F3  F019         	movff	init_operation@b2,___awtoft@c
  2524  0002A0  C0F4  F01A         	movff	init_operation@b2+1,___awtoft@c+1
  2525  0002A4  EC37  F014         	call	___awtoft	;wreg free
  2526  0002A8  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2527  0002AC  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2528  0002B0  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2529  0002B4  EC93  F00D         	call	___ftmul	;wreg free
  2530  0002B8  C01D  F02F         	movff	?___ftmul,___ftadd@f2
  2531  0002BC  C01E  F030         	movff	?___ftmul+1,___ftadd@f2+1
  2532  0002C0  C01F  F031         	movff	?___ftmul+2,___ftadd@f2+2
  2533  0002C4  C0E0  F02C         	movff	_init_operation$1476,___ftadd@f1
  2534  0002C8  C0E1  F02D         	movff	_init_operation$1476+1,___ftadd@f1+1
  2535  0002CC  C0E2  F02E         	movff	_init_operation$1476+2,___ftadd@f1+2
  2536  0002D0  ECC5  F006         	call	___ftadd	;wreg free
  2537  0002D4  C02C  F038         	movff	?___ftadd,___fttol@f1
  2538  0002D8  C02D  F039         	movff	?___ftadd+1,___fttol@f1+1
  2539  0002DC  C02E  F03A         	movff	?___ftadd+2,___fttol@f1+2
  2540  0002E0  EC19  F00D         	call	___fttol	;wreg free
  2541  0002E4  C038  F0D7         	movff	?___fttol,init_operation@luminosity1
  2542  0002E8  C039  F0D8         	movff	?___fttol+1,init_operation@luminosity1+1
  2543                           
  2544                           ;main.c: 299: lcdInst(0b10000000);;
  2545  0002EC  0E80               	movlw	128
  2546  0002EE  ECB1  F014         	call	_lcdInst
  2547                           
  2548                           ;main.c: 300: printf("%u       %u        ", r2, g2);
  2549  0002F2  0E2D               	movlw	low STR_2
  2550  0002F4  0100               	movlb	0	; () banked
  2551  0002F6  6FAF               	movwf	printf@f& (0+255),b
  2552  0002F8  0EFF               	movlw	high STR_2
  2553  0002FA  0100               	movlb	0	; () banked
  2554  0002FC  6FB0               	movwf	(printf@f+1)& (0+255),b
  2555  0002FE  C0F1  F0B1         	movff	init_operation@r2,?_printf+2
  2556  000302  C0F2  F0B2         	movff	init_operation@r2+1,?_printf+3
  2557  000306  C0E5  F0B3         	movff	init_operation@g2,?_printf+4
  2558  00030A  C0E6  F0B4         	movff	init_operation@g2+1,?_printf+5
  2559  00030E  ECEB  F002         	call	_printf	;wreg free
  2560                           
  2561                           ;main.c: 301: lcdInst(0b11000000);;
  2562  000312  0EC0               	movlw	192
  2563  000314  ECB1  F014         	call	_lcdInst
  2564                           
  2565                           ;main.c: 302: printf("%u       %u        ", b2, r2/b2);
  2566  000318  0E2D               	movlw	low STR_2
  2567  00031A  0100               	movlb	0	; () banked
  2568  00031C  6FAF               	movwf	printf@f& (0+255),b
  2569  00031E  0EFF               	movlw	high STR_2
  2570  000320  0100               	movlb	0	; () banked
  2571  000322  6FB0               	movwf	(printf@f+1)& (0+255),b
  2572  000324  C0F3  F0B1         	movff	init_operation@b2,?_printf+2
  2573  000328  C0F4  F0B2         	movff	init_operation@b2+1,?_printf+3
  2574  00032C  C0F1  F011         	movff	init_operation@r2,___awdiv@dividend
  2575  000330  C0F2  F012         	movff	init_operation@r2+1,___awdiv@dividend+1
  2576  000334  C0F3  F013         	movff	init_operation@b2,___awdiv@divisor
  2577  000338  C0F4  F014         	movff	init_operation@b2+1,___awdiv@divisor+1
  2578  00033C  EC18  F011         	call	___awdiv	;wreg free
  2579  000340  C011  F0B3         	movff	?___awdiv,?_printf+4
  2580  000344  C012  F0B4         	movff	?___awdiv+1,?_printf+5
  2581  000348  ECEB  F002         	call	_printf	;wreg free
  2582                           
  2583                           ;main.c: 304: if (r2 > 4000 && b2 < 2000){
  2584  00034C  0100               	movlb	0	; () banked
  2585  00034E  BFF2               	btfsc	(init_operation@r2+1)& (0+255),7,b
  2586  000350  D03E               	goto	l4376
  2587  000352  0EA1               	movlw	161
  2588  000354  0100               	movlb	0	; () banked
  2589  000356  5DF1               	subwf	init_operation@r2& (0+255),w,b
  2590  000358  0E0F               	movlw	15
  2591  00035A  0100               	movlb	0	; () banked
  2592  00035C  59F2               	subwfb	(init_operation@r2+1)& (0+255),w,b
  2593  00035E  A0D8               	btfss	status,0,c
  2594  000360  D036               	goto	l4376
  2595                           
  2596                           ; BSR set to: 0
  2597  000362  0100               	movlb	0	; () banked
  2598  000364  BFF4               	btfsc	(init_operation@b2+1)& (0+255),7,b
  2599  000366  D008               	goto	l4364
  2600  000368  0ED0               	movlw	208
  2601  00036A  0100               	movlb	0	; () banked
  2602  00036C  5DF3               	subwf	init_operation@b2& (0+255),w,b
  2603  00036E  0E07               	movlw	7
  2604  000370  0100               	movlb	0	; () banked
  2605  000372  59F4               	subwfb	(init_operation@b2+1)& (0+255),w,b
  2606  000374  B0D8               	btfsc	status,0,c
  2607  000376  D02B               	goto	l4376
  2608  000378                     l4364:
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;main.c: 305: PORTEbits.RE0 = 0;
  2612  000378  9084               	bcf	3972,0,c	;volatile
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;main.c: 306: bot_count[0] ++;
  2616  00037A  C0C9  FFD9         	movff	init_operation@bot_count,fsr2l
  2617  00037E  C0CA  FFDA         	movff	init_operation@bot_count+1,fsr2h
  2618  000382  2ADF               	incf	indf2,f,c
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;main.c: 307: _delay((unsigned long)((500)*(10000000/4000.0)));
  2622  000384  0E07               	movlw	7
  2623  000386  0100               	movlb	0	; () banked
  2624  000388  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2625  00038A  0E58               	movlw	88
  2626  00038C  0100               	movlb	0	; () banked
  2627  00038E  6FCD               	movwf	??_init_operation& (0+255),b
  2628  000390  0E59               	movlw	89
  2629  000392                     u3617:
  2630  000392  2EE8               	decfsz	wreg,f,c
  2631  000394  D7FE               	bra	u3617
  2632  000396  2FCD               	decfsz	??_init_operation& (0+255),f,b
  2633  000398  D7FC               	bra	u3617
  2634  00039A  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  2635  00039C  D7FA               	bra	u3617
  2636  00039E  D000               	nop2	
  2637                           
  2638                           ;main.c: 308: PORTEbits.RE0 = 1;
  2639  0003A0  8084               	bsf	3972,0,c	;volatile
  2640                           
  2641                           ;main.c: 309: step_state[1] = 1;
  2642  0003A2  0100               	movlb	0	; () banked
  2643  0003A4  EE20 F001          	lfsr	2,1
  2644  0003A8  51CB               	movf	init_operation@step_state& (0+255),w,b
  2645  0003AA  26D9               	addwf	fsr2l,f,c
  2646  0003AC  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  2647  0003AE  22DA               	addwfc	fsr2h,f,c
  2648  0003B0  0E01               	movlw	1
  2649  0003B2  6EDF               	movwf	indf2,c
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;main.c: 310: stepper_state(step_state);
  2653  0003B4  C0CB  F016         	movff	init_operation@step_state,stepper_state@step_state
  2654  0003B8  C0CC  F017         	movff	init_operation@step_state+1,stepper_state@step_state+1
  2655  0003BC  EC0D  F00E         	call	_stepper_state	;wreg free
  2656                           
  2657                           ;main.c: 311: update_time(detection_time);
  2658  0003C0  0ED9               	movlw	low init_operation@detection_time
  2659  0003C2  6E14               	movwf	update_time@time,c
  2660  0003C4  0E00               	movlw	high init_operation@detection_time
  2661  0003C6  6E15               	movwf	update_time@time+1,c
  2662  0003C8  EC5B  F012         	call	_update_time	;wreg free
  2663                           
  2664                           ;main.c: 312: }
  2665  0003CC  D0D6               	goto	l4432
  2666  0003CE                     l4376:
  2667                           
  2668                           ;main.c: 313: else if (r2 > 3000 && g2 > 3000 && b2 > 3000){
  2669  0003CE  0100               	movlb	0	; () banked
  2670  0003D0  BFF2               	btfsc	(init_operation@r2+1)& (0+255),7,b
  2671  0003D2  D04C               	goto	l4396
  2672  0003D4  0EB9               	movlw	185
  2673  0003D6  0100               	movlb	0	; () banked
  2674  0003D8  5DF1               	subwf	init_operation@r2& (0+255),w,b
  2675  0003DA  0E0B               	movlw	11
  2676  0003DC  0100               	movlb	0	; () banked
  2677  0003DE  59F2               	subwfb	(init_operation@r2+1)& (0+255),w,b
  2678  0003E0  A0D8               	btfss	status,0,c
  2679  0003E2  D044               	goto	l4396
  2680                           
  2681                           ; BSR set to: 0
  2682  0003E4  0100               	movlb	0	; () banked
  2683  0003E6  BFE6               	btfsc	(init_operation@g2+1)& (0+255),7,b
  2684  0003E8  D041               	goto	l4396
  2685  0003EA  0EB9               	movlw	185
  2686  0003EC  0100               	movlb	0	; () banked
  2687  0003EE  5DE5               	subwf	init_operation@g2& (0+255),w,b
  2688  0003F0  0E0B               	movlw	11
  2689  0003F2  0100               	movlb	0	; () banked
  2690  0003F4  59E6               	subwfb	(init_operation@g2+1)& (0+255),w,b
  2691  0003F6  A0D8               	btfss	status,0,c
  2692  0003F8  D039               	goto	l4396
  2693                           
  2694                           ; BSR set to: 0
  2695  0003FA  0100               	movlb	0	; () banked
  2696  0003FC  BFF4               	btfsc	(init_operation@b2+1)& (0+255),7,b
  2697  0003FE  D036               	goto	l4396
  2698  000400  0EB9               	movlw	185
  2699  000402  0100               	movlb	0	; () banked
  2700  000404  5DF3               	subwf	init_operation@b2& (0+255),w,b
  2701  000406  0E0B               	movlw	11
  2702  000408  0100               	movlb	0	; () banked
  2703  00040A  59F4               	subwfb	(init_operation@b2+1)& (0+255),w,b
  2704  00040C  A0D8               	btfss	status,0,c
  2705  00040E  D02E               	goto	l4396
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;main.c: 314: PORTEbits.RE0 = 0;
  2709  000410  9084               	bcf	3972,0,c	;volatile
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;main.c: 315: bot_count[1] ++;
  2713  000412  0100               	movlb	0	; () banked
  2714  000414  EE20 F001          	lfsr	2,1
  2715  000418  51C9               	movf	init_operation@bot_count& (0+255),w,b
  2716  00041A  26D9               	addwf	fsr2l,f,c
  2717  00041C  51CA               	movf	(init_operation@bot_count+1)& (0+255),w,b
  2718  00041E  22DA               	addwfc	fsr2h,f,c
  2719  000420  2ADF               	incf	indf2,f,c
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;main.c: 316: _delay((unsigned long)((500)*(10000000/4000.0)));
  2723  000422  0E07               	movlw	7
  2724  000424  0100               	movlb	0	; () banked
  2725  000426  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2726  000428  0E58               	movlw	88
  2727  00042A  0100               	movlb	0	; () banked
  2728  00042C  6FCD               	movwf	??_init_operation& (0+255),b
  2729  00042E  0E59               	movlw	89
  2730  000430                     u3627:
  2731  000430  2EE8               	decfsz	wreg,f,c
  2732  000432  D7FE               	bra	u3627
  2733  000434  2FCD               	decfsz	??_init_operation& (0+255),f,b
  2734  000436  D7FC               	bra	u3627
  2735  000438  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  2736  00043A  D7FA               	bra	u3627
  2737  00043C  D000               	nop2	
  2738                           
  2739                           ;main.c: 317: PORTEbits.RE0 = 1;
  2740  00043E  8084               	bsf	3972,0,c	;volatile
  2741                           
  2742                           ;main.c: 318: step_state[1] = 2;
  2743  000440  0100               	movlb	0	; () banked
  2744  000442  EE20 F001          	lfsr	2,1
  2745  000446  51CB               	movf	init_operation@step_state& (0+255),w,b
  2746  000448  26D9               	addwf	fsr2l,f,c
  2747  00044A  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  2748  00044C  22DA               	addwfc	fsr2h,f,c
  2749  00044E  0E02               	movlw	2
  2750  000450  6EDF               	movwf	indf2,c
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;main.c: 319: stepper_state(step_state);
  2754  000452  C0CB  F016         	movff	init_operation@step_state,stepper_state@step_state
  2755  000456  C0CC  F017         	movff	init_operation@step_state+1,stepper_state@step_state+1
  2756  00045A  EC0D  F00E         	call	_stepper_state	;wreg free
  2757                           
  2758                           ;main.c: 320: update_time(detection_time);
  2759  00045E  0ED9               	movlw	low init_operation@detection_time
  2760  000460  6E14               	movwf	update_time@time,c
  2761  000462  0E00               	movlw	high init_operation@detection_time
  2762  000464  6E15               	movwf	update_time@time+1,c
  2763  000466  EC5B  F012         	call	_update_time	;wreg free
  2764                           
  2765                           ;main.c: 321: }
  2766  00046A  D087               	goto	l4432
  2767  00046C                     l4396:
  2768                           
  2769                           ;main.c: 323: else if (b2 > 4000 && r2 < 2500){
  2770  00046C  0100               	movlb	0	; () banked
  2771  00046E  BFF4               	btfsc	(init_operation@b2+1)& (0+255),7,b
  2772  000470  D041               	goto	l4414
  2773  000472  0EA1               	movlw	161
  2774  000474  0100               	movlb	0	; () banked
  2775  000476  5DF3               	subwf	init_operation@b2& (0+255),w,b
  2776  000478  0E0F               	movlw	15
  2777  00047A  0100               	movlb	0	; () banked
  2778  00047C  59F4               	subwfb	(init_operation@b2+1)& (0+255),w,b
  2779  00047E  A0D8               	btfss	status,0,c
  2780  000480  D039               	goto	l4414
  2781                           
  2782                           ; BSR set to: 0
  2783  000482  0100               	movlb	0	; () banked
  2784  000484  BFF2               	btfsc	(init_operation@r2+1)& (0+255),7,b
  2785  000486  D008               	goto	l4400
  2786  000488  0EC4               	movlw	196
  2787  00048A  0100               	movlb	0	; () banked
  2788  00048C  5DF1               	subwf	init_operation@r2& (0+255),w,b
  2789  00048E  0E09               	movlw	9
  2790  000490  0100               	movlb	0	; () banked
  2791  000492  59F2               	subwfb	(init_operation@r2+1)& (0+255),w,b
  2792  000494  B0D8               	btfsc	status,0,c
  2793  000496  D02E               	goto	l4414
  2794  000498                     l4400:
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;main.c: 324: PORTEbits.RE0 = 0;
  2798  000498  9084               	bcf	3972,0,c	;volatile
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;main.c: 325: bot_count[2] ++;
  2802  00049A  0100               	movlb	0	; () banked
  2803  00049C  EE20 F002          	lfsr	2,2
  2804  0004A0  51C9               	movf	init_operation@bot_count& (0+255),w,b
  2805  0004A2  26D9               	addwf	fsr2l,f,c
  2806  0004A4  51CA               	movf	(init_operation@bot_count+1)& (0+255),w,b
  2807  0004A6  22DA               	addwfc	fsr2h,f,c
  2808  0004A8  2ADF               	incf	indf2,f,c
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;main.c: 326: _delay((unsigned long)((500)*(10000000/4000.0)));
  2812  0004AA  0E07               	movlw	7
  2813  0004AC  0100               	movlb	0	; () banked
  2814  0004AE  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2815  0004B0  0E58               	movlw	88
  2816  0004B2  0100               	movlb	0	; () banked
  2817  0004B4  6FCD               	movwf	??_init_operation& (0+255),b
  2818  0004B6  0E59               	movlw	89
  2819  0004B8                     u3637:
  2820  0004B8  2EE8               	decfsz	wreg,f,c
  2821  0004BA  D7FE               	bra	u3637
  2822  0004BC  2FCD               	decfsz	??_init_operation& (0+255),f,b
  2823  0004BE  D7FC               	bra	u3637
  2824  0004C0  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  2825  0004C2  D7FA               	bra	u3637
  2826  0004C4  D000               	nop2	
  2827                           
  2828                           ;main.c: 327: PORTEbits.RE0 = 1;
  2829  0004C6  8084               	bsf	3972,0,c	;volatile
  2830                           
  2831                           ;main.c: 328: step_state[1] = 3;
  2832  0004C8  0100               	movlb	0	; () banked
  2833  0004CA  EE20 F001          	lfsr	2,1
  2834  0004CE  51CB               	movf	init_operation@step_state& (0+255),w,b
  2835  0004D0  26D9               	addwf	fsr2l,f,c
  2836  0004D2  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  2837  0004D4  22DA               	addwfc	fsr2h,f,c
  2838  0004D6  0E03               	movlw	3
  2839  0004D8  6EDF               	movwf	indf2,c
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;main.c: 329: stepper_state(step_state);
  2843  0004DA  C0CB  F016         	movff	init_operation@step_state,stepper_state@step_state
  2844  0004DE  C0CC  F017         	movff	init_operation@step_state+1,stepper_state@step_state+1
  2845  0004E2  EC0D  F00E         	call	_stepper_state	;wreg free
  2846                           
  2847                           ;main.c: 330: update_time(detection_time);
  2848  0004E6  0ED9               	movlw	low init_operation@detection_time
  2849  0004E8  6E14               	movwf	update_time@time,c
  2850  0004EA  0E00               	movlw	high init_operation@detection_time
  2851  0004EC  6E15               	movwf	update_time@time+1,c
  2852  0004EE  EC5B  F012         	call	_update_time	;wreg free
  2853                           
  2854                           ;main.c: 331: }
  2855  0004F2  D043               	goto	l4432
  2856  0004F4                     l4414:
  2857                           
  2858                           ;main.c: 333: else if (c2 > 2000 && c2 < 2500){
  2859  0004F4  0100               	movlb	0	; () banked
  2860  0004F6  BFE4               	btfsc	(init_operation@c2+1)& (0+255),7,b
  2861  0004F8  D040               	goto	l4432
  2862  0004FA  0ED1               	movlw	209
  2863  0004FC  0100               	movlb	0	; () banked
  2864  0004FE  5DE3               	subwf	init_operation@c2& (0+255),w,b
  2865  000500  0E07               	movlw	7
  2866  000502  0100               	movlb	0	; () banked
  2867  000504  59E4               	subwfb	(init_operation@c2+1)& (0+255),w,b
  2868  000506  A0D8               	btfss	status,0,c
  2869  000508  D038               	goto	l4432
  2870                           
  2871                           ; BSR set to: 0
  2872  00050A  0100               	movlb	0	; () banked
  2873  00050C  BFE4               	btfsc	(init_operation@c2+1)& (0+255),7,b
  2874  00050E  D008               	goto	l4418
  2875  000510  0EC4               	movlw	196
  2876  000512  0100               	movlb	0	; () banked
  2877  000514  5DE3               	subwf	init_operation@c2& (0+255),w,b
  2878  000516  0E09               	movlw	9
  2879  000518  0100               	movlb	0	; () banked
  2880  00051A  59E4               	subwfb	(init_operation@c2+1)& (0+255),w,b
  2881  00051C  B0D8               	btfsc	status,0,c
  2882  00051E  D02D               	goto	l4432
  2883  000520                     l4418:
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;main.c: 334: PORTEbits.RE0 = 0;
  2887  000520  9084               	bcf	3972,0,c	;volatile
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;main.c: 335: bot_count[3] ++;
  2891  000522  0100               	movlb	0	; () banked
  2892  000524  EE20 F003          	lfsr	2,3
  2893  000528  51C9               	movf	init_operation@bot_count& (0+255),w,b
  2894  00052A  26D9               	addwf	fsr2l,f,c
  2895  00052C  51CA               	movf	(init_operation@bot_count+1)& (0+255),w,b
  2896  00052E  22DA               	addwfc	fsr2h,f,c
  2897  000530  2ADF               	incf	indf2,f,c
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;main.c: 336: _delay((unsigned long)((500)*(10000000/4000.0)));
  2901  000532  0E07               	movlw	7
  2902  000534  0100               	movlb	0	; () banked
  2903  000536  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2904  000538  0E58               	movlw	88
  2905  00053A  0100               	movlb	0	; () banked
  2906  00053C  6FCD               	movwf	??_init_operation& (0+255),b
  2907  00053E  0E59               	movlw	89
  2908  000540                     u3647:
  2909  000540  2EE8               	decfsz	wreg,f,c
  2910  000542  D7FE               	bra	u3647
  2911  000544  2FCD               	decfsz	??_init_operation& (0+255),f,b
  2912  000546  D7FC               	bra	u3647
  2913  000548  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  2914  00054A  D7FA               	bra	u3647
  2915  00054C  D000               	nop2	
  2916                           
  2917                           ;main.c: 337: PORTEbits.RE0 = 1;
  2918  00054E  8084               	bsf	3972,0,c	;volatile
  2919                           
  2920                           ;main.c: 338: step_state[1] = 4;
  2921  000550  0100               	movlb	0	; () banked
  2922  000552  EE20 F001          	lfsr	2,1
  2923  000556  51CB               	movf	init_operation@step_state& (0+255),w,b
  2924  000558  26D9               	addwf	fsr2l,f,c
  2925  00055A  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  2926  00055C  22DA               	addwfc	fsr2h,f,c
  2927  00055E  0E04               	movlw	4
  2928  000560  6EDF               	movwf	indf2,c
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;main.c: 339: stepper_state(step_state);
  2932  000562  C0CB  F016         	movff	init_operation@step_state,stepper_state@step_state
  2933  000566  C0CC  F017         	movff	init_operation@step_state+1,stepper_state@step_state+1
  2934  00056A  EC0D  F00E         	call	_stepper_state	;wreg free
  2935                           
  2936                           ;main.c: 340: update_time(detection_time);
  2937  00056E  0ED9               	movlw	low init_operation@detection_time
  2938  000570  6E14               	movwf	update_time@time,c
  2939  000572  0E00               	movlw	high init_operation@detection_time
  2940  000574  6E15               	movwf	update_time@time+1,c
  2941  000576  EC5B  F012         	call	_update_time	;wreg free
  2942  00057A                     l4432:
  2943                           
  2944                           ;main.c: 341: }
  2945                           ;main.c: 343: _delay((unsigned long)((500)*(10000000/4000.0)));
  2946  00057A  0E07               	movlw	7
  2947  00057C  0100               	movlb	0	; () banked
  2948  00057E  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2949  000580  0E58               	movlw	88
  2950  000582  0100               	movlb	0	; () banked
  2951  000584  6FCD               	movwf	??_init_operation& (0+255),b
  2952  000586  0E59               	movlw	89
  2953  000588                     u3657:
  2954  000588  2EE8               	decfsz	wreg,f,c
  2955  00058A  D7FE               	bra	u3657
  2956  00058C  2FCD               	decfsz	??_init_operation& (0+255),f,b
  2957  00058E  D7FC               	bra	u3657
  2958  000590  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  2959  000592  D7FA               	bra	u3657
  2960  000594  D000               	nop2	
  2961  000596                     l4434:
  2962  000596  0E02               	movlw	2
  2963  000598  0101               	movlb	1	; () banked
  2964  00059A  192B               	xorwf	_curr_state& (0+255),w,b
  2965  00059C  B4D8               	btfsc	status,2,c
  2966  00059E  D017               	goto	l4438
  2967                           
  2968                           ; BSR set to: 1
  2969  0005A0  C0C7  F099         	movff	init_operation@time,time_difference@time1
  2970  0005A4  C0C8  F09A         	movff	init_operation@time+1,time_difference@time1+1
  2971  0005A8  0ED9               	movlw	low init_operation@detection_time
  2972  0005AA  0100               	movlb	0	; () banked
  2973  0005AC  6F9B               	movwf	time_difference@time2& (0+255),b
  2974  0005AE  0E00               	movlw	high init_operation@detection_time
  2975  0005B0  0100               	movlb	0	; () banked
  2976  0005B2  6F9C               	movwf	(time_difference@time2+1)& (0+255),b
  2977  0005B4  EC9B  F007         	call	_time_difference	;wreg free
  2978  0005B8  0100               	movlb	0	; () banked
  2979  0005BA  BF9A               	btfsc	(?_time_difference+1)& (0+255),7,b
  2980  0005BC  D573               	goto	l4326
  2981  0005BE  0100               	movlb	0	; () banked
  2982  0005C0  519A               	movf	(?_time_difference+1)& (0+255),w,b
  2983  0005C2  E105               	bnz	l4438
  2984  0005C4  0E14               	movlw	20
  2985  0005C6  0100               	movlb	0	; () banked
  2986  0005C8  5D99               	subwf	?_time_difference& (0+255),w,b
  2987  0005CA  A0D8               	btfss	status,0,c
  2988  0005CC  D56B               	goto	l4326
  2989  0005CE                     l4438:
  2990                           
  2991                           ;main.c: 344: }
  2992                           ;main.c: 345: curr_state = OPERATION_END;
  2993  0005CE  0E02               	movlw	2
  2994  0005D0  0101               	movlb	1	; () banked
  2995  0005D2  6F2B               	movwf	_curr_state& (0+255),b
  2996                           
  2997                           ; BSR set to: 1
  2998  0005D4  0012               	return		;funcret
  2999  0005D6                     __end_of_init_operation:
  3000                           	opt stack 0
  3001                           tblptru	equ	0xFF8
  3002                           tblptrh	equ	0xFF7
  3003                           tblptrl	equ	0xFF6
  3004                           tablat	equ	0xFF5
  3005                           intcon	equ	0xFF2
  3006                           intcon2	equ	0xFF1
  3007                           intcon3	equ	0xFF0
  3008                           postinc0	equ	0xFEE
  3009                           wreg	equ	0xFE8
  3010                           postdec1	equ	0xFE5
  3011                           fsr1l	equ	0xFE1
  3012                           indf2	equ	0xFDF
  3013                           fsr2h	equ	0xFDA
  3014                           fsr2l	equ	0xFD9
  3015                           status	equ	0xFD8
  3016                           
  3017 ;; *************** function _update_time *****************
  3018 ;; Defined at:
  3019 ;;		line 189 in file "main.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  time            2   19[COMRAM] PTR unsigned char 
  3022 ;;		 -> init_operation@detection_time(7), main@end_time(7), main@time(7), main@start_time(7), 
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;  i               1   21[COMRAM] unsigned char 
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      void 
  3027 ;; Registers used:
  3028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3034 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;Total ram usage:        3 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    3
  3041 ;; This function calls:
  3042 ;;		_I2C_Master_Read
  3043 ;;		_I2C_Master_Start
  3044 ;;		_I2C_Master_Stop
  3045 ;;		_I2C_Master_Write
  3046 ;; This function is called by:
  3047 ;;		_main
  3048 ;;		_init_operation
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text5
  3053  0024B6                     __ptext5:
  3054                           	opt stack 0
  3055  0024B6                     _update_time:
  3056                           	opt stack 27
  3057                           
  3058                           ;main.c: 190: I2C_Master_Start();
  3059                           
  3060                           ; BSR set to: 1
  3061                           ;incstack = 0
  3062  0024B6  ECC0  F014         	call	_I2C_Master_Start	;wreg free
  3063                           
  3064                           ;main.c: 191: I2C_Master_Write(0b11010000);
  3065  0024BA  0E00               	movlw	0
  3066  0024BC  6E13               	movwf	I2C_Master_Write@d+1,c
  3067  0024BE  0ED0               	movlw	208
  3068  0024C0  6E12               	movwf	I2C_Master_Write@d,c
  3069  0024C2  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  3070                           
  3071                           ;main.c: 192: I2C_Master_Write(0x00);
  3072  0024C6  0E00               	movlw	0
  3073  0024C8  6E13               	movwf	I2C_Master_Write@d+1,c
  3074  0024CA  0E00               	movlw	0
  3075  0024CC  6E12               	movwf	I2C_Master_Write@d,c
  3076  0024CE  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  3077                           
  3078                           ;main.c: 193: I2C_Master_Stop();
  3079  0024D2  ECBC  F014         	call	_I2C_Master_Stop	;wreg free
  3080                           
  3081                           ;main.c: 196: I2C_Master_Start();
  3082  0024D6  ECC0  F014         	call	_I2C_Master_Start	;wreg free
  3083                           
  3084                           ;main.c: 197: I2C_Master_Write(0b11010001);
  3085  0024DA  0E00               	movlw	0
  3086  0024DC  6E13               	movwf	I2C_Master_Write@d+1,c
  3087  0024DE  0ED1               	movlw	209
  3088  0024E0  6E12               	movwf	I2C_Master_Write@d,c
  3089  0024E2  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  3090                           
  3091                           ;main.c: 198: for(unsigned char i=0;i<0x06;i++){
  3092  0024E6  0E00               	movlw	0
  3093  0024E8  6E16               	movwf	update_time@i,c
  3094  0024EA                     l3668:
  3095  0024EA  0E05               	movlw	5
  3096  0024EC  6416               	cpfsgt	update_time@i,c
  3097  0024EE  D001               	goto	l3672
  3098  0024F0  D00E               	goto	l3678
  3099  0024F2                     l3672:
  3100                           
  3101                           ;main.c: 199: time[i] = I2C_Master_Read(1);
  3102  0024F2  5016               	movf	update_time@i,w,c
  3103  0024F4  0D01               	mullw	1
  3104  0024F6  50F3               	movf	prodl,w,c
  3105  0024F8  2414               	addwf	update_time@time,w,c
  3106  0024FA  6ED9               	movwf	fsr2l,c
  3107  0024FC  50F4               	movf	prodh,w,c
  3108  0024FE  2015               	addwfc	update_time@time+1,w,c
  3109  002500  6EDA               	movwf	fsr2h,c
  3110  002502  0E01               	movlw	1
  3111  002504  EC53  F014         	call	_I2C_Master_Read
  3112  002508  6EDF               	movwf	indf2,c
  3113  00250A  2A16               	incf	update_time@i,f,c
  3114  00250C  D7EE               	goto	l3668
  3115  00250E                     l3678:
  3116                           
  3117                           ;main.c: 200: }
  3118                           ;main.c: 201: time[6] = I2C_Master_Read(0);
  3119  00250E  EE20 F006          	lfsr	2,6
  3120  002512  5014               	movf	update_time@time,w,c
  3121  002514  26D9               	addwf	fsr2l,f,c
  3122  002516  5015               	movf	update_time@time+1,w,c
  3123  002518  22DA               	addwfc	fsr2h,f,c
  3124  00251A  0E00               	movlw	0
  3125  00251C  EC53  F014         	call	_I2C_Master_Read
  3126  002520  6EDF               	movwf	indf2,c
  3127                           
  3128                           ;main.c: 202: I2C_Master_Stop();
  3129  002522  ECBC  F014         	call	_I2C_Master_Stop	;wreg free
  3130  002526  0012               	return		;funcret
  3131  002528                     __end_of_update_time:
  3132                           	opt stack 0
  3133                           tblptru	equ	0xFF8
  3134                           tblptrh	equ	0xFF7
  3135                           tblptrl	equ	0xFF6
  3136                           tablat	equ	0xFF5
  3137                           prodh	equ	0xFF4
  3138                           prodl	equ	0xFF3
  3139                           intcon	equ	0xFF2
  3140                           intcon2	equ	0xFF1
  3141                           intcon3	equ	0xFF0
  3142                           postinc0	equ	0xFEE
  3143                           wreg	equ	0xFE8
  3144                           postdec1	equ	0xFE5
  3145                           fsr1l	equ	0xFE1
  3146                           indf2	equ	0xFDF
  3147                           fsr2h	equ	0xFDA
  3148                           fsr2l	equ	0xFD9
  3149                           status	equ	0xFD8
  3150                           
  3151 ;; *************** function _time_difference *****************
  3152 ;; Defined at:
  3153 ;;		line 244 in file "main.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  time1           2   25[BANK0 ] PTR unsigned char 
  3156 ;;		 -> main@end_time(7), main@time(7), 
  3157 ;;  time2           2   27[BANK0 ] PTR unsigned char 
  3158 ;;		 -> init_operation@detection_time(7), main@start_time(7), 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  d3              2   45[BANK0 ] int 
  3161 ;;  d2              2   43[BANK0 ] int 
  3162 ;;  d1              2   41[BANK0 ] int 
  3163 ;;  s2              2   39[BANK0 ] int 
  3164 ;;  s1              2   37[BANK0 ] int 
  3165 ;;  min2            2   35[BANK0 ] int 
  3166 ;;  min1            2   33[BANK0 ] int 
  3167 ;;  hr2             2   31[BANK0 ] int 
  3168 ;;  hr1             2   29[BANK0 ] int 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  2   25[BANK0 ] int 
  3171 ;; Registers used:
  3172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3178 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3179 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3180 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;      Totals:         2      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;Total ram usage:       24 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:    7
  3185 ;; This function calls:
  3186 ;;		___wmul
  3187 ;;		_dec_to_hex
  3188 ;; This function is called by:
  3189 ;;		_init_operation
  3190 ;;		_runtime
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text6
  3195  000F36                     __ptext6:
  3196                           	opt stack 0
  3197  000F36                     _time_difference:
  3198                           	opt stack 22
  3199                           
  3200                           ;main.c: 245: int hr1, hr2, min1, min2, s1, s2;
  3201                           ;main.c: 246: int d1, d2, d3;
  3202                           ;main.c: 247: hr1 = time1[2]; hr2 = time2[2]; min1 = time1[1]; min2 = time2[1];
  3203                           
  3204                           ;incstack = 0
  3205  000F36  0100               	movlb	0	; () banked
  3206  000F38  EE20 F002          	lfsr	2,2
  3207  000F3C  5199               	movf	time_difference@time1& (0+255),w,b
  3208  000F3E  26D9               	addwf	fsr2l,f,c
  3209  000F40  519A               	movf	(time_difference@time1+1)& (0+255),w,b
  3210  000F42  22DA               	addwfc	fsr2h,f,c
  3211  000F44  50DF               	movf	indf2,w,c
  3212  000F46  6E6A               	movwf	??_time_difference& (0+255),c
  3213  000F48  506A               	movf	??_time_difference,w,c
  3214  000F4A  0100               	movlb	0	; () banked
  3215  000F4C  6F9D               	movwf	time_difference@hr1& (0+255),b
  3216  000F4E  6B9E               	clrf	(time_difference@hr1+1)& (0+255),b
  3217  000F50  0100               	movlb	0	; () banked
  3218  000F52  EE20 F002          	lfsr	2,2
  3219  000F56  519B               	movf	time_difference@time2& (0+255),w,b
  3220  000F58  26D9               	addwf	fsr2l,f,c
  3221  000F5A  519C               	movf	(time_difference@time2+1)& (0+255),w,b
  3222  000F5C  22DA               	addwfc	fsr2h,f,c
  3223  000F5E  50DF               	movf	indf2,w,c
  3224  000F60  6E6A               	movwf	??_time_difference& (0+255),c
  3225  000F62  506A               	movf	??_time_difference,w,c
  3226  000F64  0100               	movlb	0	; () banked
  3227  000F66  6F9F               	movwf	time_difference@hr2& (0+255),b
  3228  000F68  6BA0               	clrf	(time_difference@hr2+1)& (0+255),b
  3229  000F6A  0100               	movlb	0	; () banked
  3230  000F6C  EE20 F001          	lfsr	2,1
  3231  000F70  5199               	movf	time_difference@time1& (0+255),w,b
  3232  000F72  26D9               	addwf	fsr2l,f,c
  3233  000F74  519A               	movf	(time_difference@time1+1)& (0+255),w,b
  3234  000F76  22DA               	addwfc	fsr2h,f,c
  3235  000F78  50DF               	movf	indf2,w,c
  3236  000F7A  6E6A               	movwf	??_time_difference& (0+255),c
  3237  000F7C  506A               	movf	??_time_difference,w,c
  3238  000F7E  0100               	movlb	0	; () banked
  3239  000F80  6FA1               	movwf	time_difference@min1& (0+255),b
  3240  000F82  6BA2               	clrf	(time_difference@min1+1)& (0+255),b
  3241  000F84  0100               	movlb	0	; () banked
  3242  000F86  EE20 F001          	lfsr	2,1
  3243  000F8A  519B               	movf	time_difference@time2& (0+255),w,b
  3244  000F8C  26D9               	addwf	fsr2l,f,c
  3245  000F8E  519C               	movf	(time_difference@time2+1)& (0+255),w,b
  3246  000F90  22DA               	addwfc	fsr2h,f,c
  3247  000F92  50DF               	movf	indf2,w,c
  3248  000F94  6E6A               	movwf	??_time_difference& (0+255),c
  3249  000F96  506A               	movf	??_time_difference,w,c
  3250  000F98  0100               	movlb	0	; () banked
  3251  000F9A  6FA3               	movwf	time_difference@min2& (0+255),b
  3252  000F9C  6BA4               	clrf	(time_difference@min2+1)& (0+255),b
  3253                           
  3254                           ;main.c: 248: s1 = time1[0]; s2 = time2[0];
  3255  000F9E  C099  FFD9         	movff	time_difference@time1,fsr2l
  3256  000FA2  C09A  FFDA         	movff	time_difference@time1+1,fsr2h
  3257  000FA6  50DF               	movf	indf2,w,c
  3258  000FA8  6E6A               	movwf	??_time_difference& (0+255),c
  3259  000FAA  506A               	movf	??_time_difference,w,c
  3260  000FAC  0100               	movlb	0	; () banked
  3261  000FAE  6FA5               	movwf	time_difference@s1& (0+255),b
  3262  000FB0  6BA6               	clrf	(time_difference@s1+1)& (0+255),b
  3263  000FB2  C09B  FFD9         	movff	time_difference@time2,fsr2l
  3264  000FB6  C09C  FFDA         	movff	time_difference@time2+1,fsr2h
  3265  000FBA  50DF               	movf	indf2,w,c
  3266  000FBC  6E6A               	movwf	??_time_difference& (0+255),c
  3267  000FBE  506A               	movf	??_time_difference,w,c
  3268  000FC0  0100               	movlb	0	; () banked
  3269  000FC2  6FA7               	movwf	time_difference@s2& (0+255),b
  3270  000FC4  6BA8               	clrf	(time_difference@s2+1)& (0+255),b
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;main.c: 250: d1 = dec_to_hex(hr1) - dec_to_hex(hr2);
  3274  000FC6  C09D  F068         	movff	time_difference@hr1,dec_to_hex@num
  3275  000FCA  C09E  F069         	movff	time_difference@hr1+1,dec_to_hex@num+1
  3276  000FCE  EC15  F00C         	call	_dec_to_hex	;wreg free
  3277  000FD2  C068  F06A         	movff	?_dec_to_hex,??_time_difference
  3278  000FD6  C069  F06B         	movff	?_dec_to_hex+1,??_time_difference+1
  3279  000FDA  C09F  F068         	movff	time_difference@hr2,dec_to_hex@num
  3280  000FDE  C0A0  F069         	movff	time_difference@hr2+1,dec_to_hex@num+1
  3281  000FE2  EC15  F00C         	call	_dec_to_hex	;wreg free
  3282  000FE6  1E68               	comf	?_dec_to_hex,f,c
  3283  000FE8  1E69               	comf	?_dec_to_hex+1,f,c
  3284  000FEA  4A68               	infsnz	?_dec_to_hex,f,c
  3285  000FEC  2A69               	incf	?_dec_to_hex+1,f,c
  3286  000FEE  5068               	movf	?_dec_to_hex,w,c
  3287  000FF0  246A               	addwf	??_time_difference,w,c
  3288  000FF2  0100               	movlb	0	; () banked
  3289  000FF4  6FA9               	movwf	time_difference@d1& (0+255),b
  3290  000FF6  5069               	movf	?_dec_to_hex+1,w,c
  3291  000FF8  206B               	addwfc	??_time_difference+1,w,c
  3292  000FFA  0100               	movlb	0	; () banked
  3293  000FFC  6FAA               	movwf	(time_difference@d1+1)& (0+255),b
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;main.c: 251: d2 = dec_to_hex(min1) - dec_to_hex(min2);
  3297  000FFE  C0A1  F068         	movff	time_difference@min1,dec_to_hex@num
  3298  001002  C0A2  F069         	movff	time_difference@min1+1,dec_to_hex@num+1
  3299  001006  EC15  F00C         	call	_dec_to_hex	;wreg free
  3300  00100A  C068  F06A         	movff	?_dec_to_hex,??_time_difference
  3301  00100E  C069  F06B         	movff	?_dec_to_hex+1,??_time_difference+1
  3302  001012  C0A3  F068         	movff	time_difference@min2,dec_to_hex@num
  3303  001016  C0A4  F069         	movff	time_difference@min2+1,dec_to_hex@num+1
  3304  00101A  EC15  F00C         	call	_dec_to_hex	;wreg free
  3305  00101E  1E68               	comf	?_dec_to_hex,f,c
  3306  001020  1E69               	comf	?_dec_to_hex+1,f,c
  3307  001022  4A68               	infsnz	?_dec_to_hex,f,c
  3308  001024  2A69               	incf	?_dec_to_hex+1,f,c
  3309  001026  5068               	movf	?_dec_to_hex,w,c
  3310  001028  246A               	addwf	??_time_difference,w,c
  3311  00102A  0100               	movlb	0	; () banked
  3312  00102C  6FAB               	movwf	time_difference@d2& (0+255),b
  3313  00102E  5069               	movf	?_dec_to_hex+1,w,c
  3314  001030  206B               	addwfc	??_time_difference+1,w,c
  3315  001032  0100               	movlb	0	; () banked
  3316  001034  6FAC               	movwf	(time_difference@d2+1)& (0+255),b
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;main.c: 252: d3 = dec_to_hex(s1) - dec_to_hex(s2);
  3320  001036  C0A5  F068         	movff	time_difference@s1,dec_to_hex@num
  3321  00103A  C0A6  F069         	movff	time_difference@s1+1,dec_to_hex@num+1
  3322  00103E  EC15  F00C         	call	_dec_to_hex	;wreg free
  3323  001042  C068  F06A         	movff	?_dec_to_hex,??_time_difference
  3324  001046  C069  F06B         	movff	?_dec_to_hex+1,??_time_difference+1
  3325  00104A  C0A7  F068         	movff	time_difference@s2,dec_to_hex@num
  3326  00104E  C0A8  F069         	movff	time_difference@s2+1,dec_to_hex@num+1
  3327  001052  EC15  F00C         	call	_dec_to_hex	;wreg free
  3328  001056  1E68               	comf	?_dec_to_hex,f,c
  3329  001058  1E69               	comf	?_dec_to_hex+1,f,c
  3330  00105A  4A68               	infsnz	?_dec_to_hex,f,c
  3331  00105C  2A69               	incf	?_dec_to_hex+1,f,c
  3332  00105E  5068               	movf	?_dec_to_hex,w,c
  3333  001060  246A               	addwf	??_time_difference,w,c
  3334  001062  0100               	movlb	0	; () banked
  3335  001064  6FAD               	movwf	time_difference@d3& (0+255),b
  3336  001066  5069               	movf	?_dec_to_hex+1,w,c
  3337  001068  206B               	addwfc	??_time_difference+1,w,c
  3338  00106A  0100               	movlb	0	; () banked
  3339  00106C  6FAE               	movwf	(time_difference@d3+1)& (0+255),b
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;main.c: 253: return 3600*d1 + 60*d2 + d3;
  3343  00106E  C0A9  F011         	movff	time_difference@d1,___wmul@multiplier
  3344  001072  C0AA  F012         	movff	time_difference@d1+1,___wmul@multiplier+1
  3345  001076  0E0E               	movlw	14
  3346  001078  6E14               	movwf	___wmul@multiplicand+1,c
  3347  00107A  0E10               	movlw	16
  3348  00107C  6E13               	movwf	___wmul@multiplicand,c
  3349  00107E  EC66  F014         	call	___wmul	;wreg free
  3350  001082  C011  F06A         	movff	?___wmul,??_time_difference
  3351  001086  C012  F06B         	movff	?___wmul+1,??_time_difference+1
  3352  00108A  C0AB  F011         	movff	time_difference@d2,___wmul@multiplier
  3353  00108E  C0AC  F012         	movff	time_difference@d2+1,___wmul@multiplier+1
  3354  001092  0E00               	movlw	0
  3355  001094  6E14               	movwf	___wmul@multiplicand+1,c
  3356  001096  0E3C               	movlw	60
  3357  001098  6E13               	movwf	___wmul@multiplicand,c
  3358  00109A  EC66  F014         	call	___wmul	;wreg free
  3359  00109E  5011               	movf	?___wmul,w,c
  3360  0010A0  266A               	addwf	??_time_difference,f,c
  3361  0010A2  5012               	movf	?___wmul+1,w,c
  3362  0010A4  226B               	addwfc	??_time_difference+1,f,c
  3363  0010A6  0100               	movlb	0	; () banked
  3364  0010A8  51AD               	movf	time_difference@d3& (0+255),w,b
  3365  0010AA  246A               	addwf	??_time_difference,w,c
  3366  0010AC  0100               	movlb	0	; () banked
  3367  0010AE  6F99               	movwf	?_time_difference& (0+255),b
  3368  0010B0  0100               	movlb	0	; () banked
  3369  0010B2  51AE               	movf	(time_difference@d3+1)& (0+255),w,b
  3370  0010B4  206B               	addwfc	??_time_difference+1,w,c
  3371  0010B6  0100               	movlb	0	; () banked
  3372  0010B8  6F9A               	movwf	(?_time_difference+1)& (0+255),b
  3373  0010BA  0012               	return	
  3374  0010BC                     __end_of_time_difference:
  3375                           	opt stack 0
  3376                           tblptru	equ	0xFF8
  3377                           tblptrh	equ	0xFF7
  3378                           tblptrl	equ	0xFF6
  3379                           tablat	equ	0xFF5
  3380                           prodh	equ	0xFF4
  3381                           prodl	equ	0xFF3
  3382                           intcon	equ	0xFF2
  3383                           intcon2	equ	0xFF1
  3384                           intcon3	equ	0xFF0
  3385                           postinc0	equ	0xFEE
  3386                           wreg	equ	0xFE8
  3387                           postdec1	equ	0xFE5
  3388                           fsr1l	equ	0xFE1
  3389                           indf2	equ	0xFDF
  3390                           fsr2h	equ	0xFDA
  3391                           fsr2l	equ	0xFD9
  3392                           status	equ	0xFD8
  3393                           
  3394 ;; *************** function _dec_to_hex *****************
  3395 ;; Defined at:
  3396 ;;		line 211 in file "main.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;  num             2  103[COMRAM] int 
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;  quotient        2   23[BANK0 ] int 
  3401 ;;  hexnum          2   21[BANK0 ] int 
  3402 ;;  i               2   19[BANK0 ] int 
  3403 ;;  temp            2   17[BANK0 ] int 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  2  103[COMRAM] int 
  3406 ;; Registers used:
  3407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3413 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Totals:         2      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;Total ram usage:       16 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:    6
  3420 ;; This function calls:
  3421 ;;		___awdiv
  3422 ;;		___awtoft
  3423 ;;		___ftadd
  3424 ;;		___ftmul
  3425 ;;		___fttol
  3426 ;;		_pow
  3427 ;; This function is called by:
  3428 ;;		_time_difference
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           	psect	text7
  3433  00182A                     __ptext7:
  3434                           	opt stack 0
  3435  00182A                     _dec_to_hex:
  3436                           	opt stack 22
  3437                           
  3438                           ;main.c: 212: int i = 0, quotient = num, temp, hexnum = 0;
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;incstack = 0
  3442  00182A  0E00               	movlw	0
  3443  00182C  0100               	movlb	0	; () banked
  3444  00182E  6F94               	movwf	(dec_to_hex@i+1)& (0+255),b
  3445  001830  0E00               	movlw	0
  3446  001832  6F93               	movwf	dec_to_hex@i& (0+255),b
  3447                           
  3448                           ; BSR set to: 0
  3449  001834  C068  F097         	movff	dec_to_hex@num,dec_to_hex@quotient
  3450  001838  C069  F098         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  3451  00183C  0E00               	movlw	0
  3452  00183E  0100               	movlb	0	; () banked
  3453  001840  6F96               	movwf	(dec_to_hex@hexnum+1)& (0+255),b
  3454  001842  0E00               	movlw	0
  3455  001844  6F95               	movwf	dec_to_hex@hexnum& (0+255),b
  3456                           
  3457                           ;main.c: 214: while (quotient != 0) {
  3458  001846  D06C               	goto	l3400
  3459  001848                     l3388:
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;main.c: 215: temp = quotient % 16;
  3463  001848  0E0F               	movlw	15
  3464  00184A  0100               	movlb	0	; () banked
  3465  00184C  1597               	andwf	dec_to_hex@quotient& (0+255),w,b
  3466  00184E  0100               	movlb	0	; () banked
  3467  001850  6F91               	movwf	dec_to_hex@temp& (0+255),b
  3468  001852  0100               	movlb	0	; () banked
  3469  001854  6B92               	clrf	(dec_to_hex@temp+1)& (0+255),b
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;main.c: 217: hexnum += temp*pow(10,i);
  3473  001856  C093  F019         	movff	dec_to_hex@i,___awtoft@c
  3474  00185A  C094  F01A         	movff	dec_to_hex@i+1,___awtoft@c+1
  3475  00185E  EC37  F014         	call	___awtoft	;wreg free
  3476  001862  C019  F08B         	movff	?___awtoft,_dec_to_hex$1472
  3477  001866  C01A  F08C         	movff	?___awtoft+1,_dec_to_hex$1472+1
  3478  00186A  C01B  F08D         	movff	?___awtoft+2,_dec_to_hex$1472+2
  3479                           
  3480                           ;main.c: 217: hexnum += temp*pow(10,i);
  3481  00186E  C08B  F065         	movff	_dec_to_hex$1472,pow@y
  3482  001872  C08C  F066         	movff	_dec_to_hex$1472+1,pow@y+1
  3483  001876  C08D  F067         	movff	_dec_to_hex$1472+2,pow@y+2
  3484  00187A  0E00               	movlw	0
  3485  00187C  6E62               	movwf	pow@x,c
  3486  00187E  0E20               	movlw	32
  3487  001880  6E63               	movwf	pow@x+1,c
  3488  001882  0E41               	movlw	65
  3489  001884  6E64               	movwf	pow@x+2,c
  3490  001886  EC5E  F008         	call	_pow	;wreg free
  3491  00188A  C062  F08E         	movff	?_pow,_dec_to_hex$1473
  3492  00188E  C063  F08F         	movff	?_pow+1,_dec_to_hex$1473+1
  3493  001892  C064  F090         	movff	?_pow+2,_dec_to_hex$1473+2
  3494                           
  3495                           ;main.c: 217: hexnum += temp*pow(10,i);
  3496  001896  C08E  F020         	movff	_dec_to_hex$1473,___ftmul@f2
  3497  00189A  C08F  F021         	movff	_dec_to_hex$1473+1,___ftmul@f2+1
  3498  00189E  C090  F022         	movff	_dec_to_hex$1473+2,___ftmul@f2+2
  3499  0018A2  C091  F019         	movff	dec_to_hex@temp,___awtoft@c
  3500  0018A6  C092  F01A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  3501  0018AA  EC37  F014         	call	___awtoft	;wreg free
  3502  0018AE  C019  F01D         	movff	?___awtoft,___ftmul@f1
  3503  0018B2  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  3504  0018B6  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  3505  0018BA  EC93  F00D         	call	___ftmul	;wreg free
  3506  0018BE  C01D  F02F         	movff	?___ftmul,___ftadd@f2
  3507  0018C2  C01E  F030         	movff	?___ftmul+1,___ftadd@f2+1
  3508  0018C6  C01F  F031         	movff	?___ftmul+2,___ftadd@f2+2
  3509  0018CA  C095  F019         	movff	dec_to_hex@hexnum,___awtoft@c
  3510  0018CE  C096  F01A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  3511  0018D2  EC37  F014         	call	___awtoft	;wreg free
  3512  0018D6  C019  F02C         	movff	?___awtoft,___ftadd@f1
  3513  0018DA  C01A  F02D         	movff	?___awtoft+1,___ftadd@f1+1
  3514  0018DE  C01B  F02E         	movff	?___awtoft+2,___ftadd@f1+2
  3515  0018E2  ECC5  F006         	call	___ftadd	;wreg free
  3516  0018E6  C02C  F038         	movff	?___ftadd,___fttol@f1
  3517  0018EA  C02D  F039         	movff	?___ftadd+1,___fttol@f1+1
  3518  0018EE  C02E  F03A         	movff	?___ftadd+2,___fttol@f1+2
  3519  0018F2  EC19  F00D         	call	___fttol	;wreg free
  3520  0018F6  C038  F095         	movff	?___fttol,dec_to_hex@hexnum
  3521  0018FA  C039  F096         	movff	?___fttol+1,dec_to_hex@hexnum+1
  3522                           
  3523                           ;main.c: 219: quotient = quotient / 16;
  3524  0018FE  C097  F011         	movff	dec_to_hex@quotient,___awdiv@dividend
  3525  001902  C098  F012         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  3526  001906  0E00               	movlw	0
  3527  001908  6E14               	movwf	___awdiv@divisor+1,c
  3528  00190A  0E10               	movlw	16
  3529  00190C  6E13               	movwf	___awdiv@divisor,c
  3530  00190E  EC18  F011         	call	___awdiv	;wreg free
  3531  001912  C011  F097         	movff	?___awdiv,dec_to_hex@quotient
  3532  001916  C012  F098         	movff	?___awdiv+1,dec_to_hex@quotient+1
  3533                           
  3534                           ;main.c: 220: i += 1;
  3535  00191A  0100               	movlb	0	; () banked
  3536  00191C  4B93               	infsnz	dec_to_hex@i& (0+255),f,b
  3537  00191E  2B94               	incf	(dec_to_hex@i+1)& (0+255),f,b
  3538  001920                     l3400:
  3539                           
  3540                           ; BSR set to: 0
  3541  001920  0100               	movlb	0	; () banked
  3542  001922  5197               	movf	dec_to_hex@quotient& (0+255),w,b
  3543  001924  0100               	movlb	0	; () banked
  3544  001926  1198               	iorwf	(dec_to_hex@quotient+1)& (0+255),w,b
  3545  001928  A4D8               	btfss	status,2,c
  3546  00192A  D78E               	goto	l3388
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;main.c: 221: }
  3550                           ;main.c: 222: return hexnum;
  3551  00192C  C095  F068         	movff	dec_to_hex@hexnum,?_dec_to_hex
  3552  001930  C096  F069         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  3553                           
  3554                           ; BSR set to: 0
  3555  001934  0012               	return		;funcret
  3556  001936                     __end_of_dec_to_hex:
  3557                           	opt stack 0
  3558                           tblptru	equ	0xFF8
  3559                           tblptrh	equ	0xFF7
  3560                           tblptrl	equ	0xFF6
  3561                           tablat	equ	0xFF5
  3562                           prodh	equ	0xFF4
  3563                           prodl	equ	0xFF3
  3564                           intcon	equ	0xFF2
  3565                           intcon2	equ	0xFF1
  3566                           intcon3	equ	0xFF0
  3567                           postinc0	equ	0xFEE
  3568                           wreg	equ	0xFE8
  3569                           postdec1	equ	0xFE5
  3570                           fsr1l	equ	0xFE1
  3571                           indf2	equ	0xFDF
  3572                           fsr2h	equ	0xFDA
  3573                           fsr2l	equ	0xFD9
  3574                           status	equ	0xFD8
  3575                           
  3576 ;; *************** function _pow *****************
  3577 ;; Defined at:
  3578 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  x               3   97[COMRAM] int 
  3581 ;;  y               3  100[COMRAM] int 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  yi              4    7[BANK0 ] unsigned long 
  3584 ;;  sign            1    6[BANK0 ] unsigned char 
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  3   97[COMRAM] unsigned char 
  3587 ;; Registers used:
  3588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3594 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;Total ram usage:       17 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    5
  3601 ;; This function calls:
  3602 ;;		___ftge
  3603 ;;		___ftmul
  3604 ;;		___ftneg
  3605 ;;		___fttol
  3606 ;;		___lltoft
  3607 ;;		_exp
  3608 ;;		_log
  3609 ;; This function is called by:
  3610 ;;		_dec_to_hex
  3611 ;;		_hex_to_dec
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           	psect	text8
  3616  0010BC                     __ptext8:
  3617                           	opt stack 0
  3618  0010BC                     _pow:
  3619                           	opt stack 22
  3620                           
  3621                           ; BSR set to: 0
  3622                           ;incstack = 0
  3623  0010BC  0E00               	movlw	0
  3624  0010BE  0100               	movlb	0	; () banked
  3625  0010C0  6F86               	movwf	pow@sign& (0+255),b
  3626                           
  3627                           ; BSR set to: 0
  3628  0010C2  5062               	movf	pow@x,w,c
  3629  0010C4  1063               	iorwf	pow@x+1,w,c
  3630  0010C6  1064               	iorwf	pow@x+2,w,c
  3631  0010C8  A4D8               	btfss	status,2,c
  3632  0010CA  D01B               	goto	l3258
  3633                           
  3634                           ; BSR set to: 0
  3635  0010CC  0E00               	movlw	0
  3636  0010CE  6E11               	movwf	___ftge@ff1,c
  3637  0010D0  0E00               	movlw	0
  3638  0010D2  6E12               	movwf	___ftge@ff1+1,c
  3639  0010D4  0E00               	movlw	0
  3640  0010D6  6E13               	movwf	___ftge@ff1+2,c
  3641  0010D8  C065  F014         	movff	pow@y,___ftge@ff2
  3642  0010DC  C066  F015         	movff	pow@y+1,___ftge@ff2+1
  3643  0010E0  C067  F016         	movff	pow@y+2,___ftge@ff2+2
  3644  0010E4  ECD0  F010         	call	___ftge	;wreg free
  3645  0010E8  A0D8               	btfss	status,0,c
  3646  0010EA  D004               	goto	l914
  3647  0010EC  0E00               	movlw	0
  3648  0010EE  6E6E               	movwf	_errno+1,c
  3649  0010F0  0E21               	movlw	33
  3650  0010F2  6E6D               	movwf	_errno,c
  3651  0010F4                     l914:
  3652  0010F4  0E00               	movlw	0
  3653  0010F6  6E62               	movwf	?_pow,c
  3654  0010F8  0E00               	movlw	0
  3655  0010FA  6E63               	movwf	?_pow+1,c
  3656  0010FC  0E00               	movlw	0
  3657  0010FE  6E64               	movwf	?_pow+2,c
  3658  001100  0012               	return	
  3659  001102                     l3258:
  3660  001102  5065               	movf	pow@y,w,c
  3661  001104  1066               	iorwf	pow@y+1,w,c
  3662  001106  1067               	iorwf	pow@y+2,w,c
  3663  001108  A4D8               	btfss	status,2,c
  3664  00110A  D007               	goto	l3264
  3665  00110C  0E00               	movlw	0
  3666  00110E  6E62               	movwf	?_pow,c
  3667  001110  0E80               	movlw	128
  3668  001112  6E63               	movwf	?_pow+1,c
  3669  001114  0E3F               	movlw	63
  3670  001116  6E64               	movwf	?_pow+2,c
  3671  001118  0012               	return	
  3672  00111A                     l3264:
  3673  00111A  AE64               	btfss	pow@x+2,7,c
  3674  00111C  D042               	goto	l3276
  3675  00111E  C065  F038         	movff	pow@y,___fttol@f1
  3676  001122  C066  F039         	movff	pow@y+1,___fttol@f1+1
  3677  001126  C067  F03A         	movff	pow@y+2,___fttol@f1+2
  3678  00112A  EC19  F00D         	call	___fttol	;wreg free
  3679  00112E  C038  F087         	movff	?___fttol,pow@yi
  3680  001132  C039  F088         	movff	?___fttol+1,pow@yi+1
  3681  001136  C03A  F089         	movff	?___fttol+2,pow@yi+2
  3682  00113A  C03B  F08A         	movff	?___fttol+3,pow@yi+3
  3683  00113E  C087  F019         	movff	pow@yi,___lltoft@c
  3684  001142  C088  F01A         	movff	pow@yi+1,___lltoft@c+1
  3685  001146  C089  F01B         	movff	pow@yi+2,___lltoft@c+2
  3686  00114A  C08A  F01C         	movff	pow@yi+3,___lltoft@c+3
  3687  00114E  ECC4  F012         	call	___lltoft	;wreg free
  3688  001152  5065               	movf	pow@y,w,c
  3689  001154  1819               	xorwf	?___lltoft,w,c
  3690  001156  E107               	bnz	u2610
  3691  001158  5066               	movf	pow@y+1,w,c
  3692  00115A  181A               	xorwf	?___lltoft+1,w,c
  3693  00115C  E104               	bnz	u2610
  3694  00115E  5067               	movf	pow@y+2,w,c
  3695  001160  181B               	xorwf	?___lltoft+2,w,c
  3696  001162  B4D8               	btfsc	status,2,c
  3697  001164  D00B               	goto	l3272
  3698  001166                     u2610:
  3699  001166  0E00               	movlw	0
  3700  001168  6E6E               	movwf	_errno+1,c
  3701  00116A  0E21               	movlw	33
  3702  00116C  6E6D               	movwf	_errno,c
  3703  00116E  0E00               	movlw	0
  3704  001170  6E62               	movwf	?_pow,c
  3705  001172  0E00               	movlw	0
  3706  001174  6E63               	movwf	?_pow+1,c
  3707  001176  0E00               	movlw	0
  3708  001178  6E64               	movwf	?_pow+2,c
  3709  00117A  0012               	return	
  3710  00117C                     l3272:
  3711  00117C  0100               	movlb	0	; () banked
  3712  00117E  5187               	movf	pow@yi& (0+255),w,b
  3713  001180  0B01               	andlw	1
  3714  001182  0100               	movlb	0	; () banked
  3715  001184  6F86               	movwf	pow@sign& (0+255),b
  3716                           
  3717                           ; BSR set to: 0
  3718  001186  C062  F011         	movff	pow@x,___ftneg@f1
  3719  00118A  C063  F012         	movff	pow@x+1,___ftneg@f1+1
  3720  00118E  C064  F013         	movff	pow@x+2,___ftneg@f1+2
  3721  001192  EC79  F014         	call	___ftneg	;wreg free
  3722  001196  C011  F062         	movff	?___ftneg,pow@x
  3723  00119A  C012  F063         	movff	?___ftneg+1,pow@x+1
  3724  00119E  C013  F064         	movff	?___ftneg+2,pow@x+2
  3725  0011A2                     l3276:
  3726  0011A2  C062  F044         	movff	pow@x,log@x
  3727  0011A6  C063  F045         	movff	pow@x+1,log@x+1
  3728  0011AA  C064  F046         	movff	pow@x+2,log@x+2
  3729  0011AE  EC6E  F00A         	call	_log	;wreg free
  3730  0011B2  C044  F080         	movff	?_log,_pow$1477
  3731  0011B6  C045  F081         	movff	?_log+1,_pow$1477+1
  3732  0011BA  C046  F082         	movff	?_log+2,_pow$1477+2
  3733  0011BE  C080  F01D         	movff	_pow$1477,___ftmul@f1
  3734  0011C2  C081  F01E         	movff	_pow$1477+1,___ftmul@f1+1
  3735  0011C6  C082  F01F         	movff	_pow$1477+2,___ftmul@f1+2
  3736  0011CA  C065  F020         	movff	pow@y,___ftmul@f2
  3737  0011CE  C066  F021         	movff	pow@y+1,___ftmul@f2+1
  3738  0011D2  C067  F022         	movff	pow@y+2,___ftmul@f2+2
  3739  0011D6  EC93  F00D         	call	___ftmul	;wreg free
  3740  0011DA  C01D  F083         	movff	?___ftmul,_pow$1478
  3741  0011DE  C01E  F084         	movff	?___ftmul+1,_pow$1478+1
  3742  0011E2  C01F  F085         	movff	?___ftmul+2,_pow$1478+2
  3743  0011E6  C083  F059         	movff	_pow$1478,exp@x
  3744  0011EA  C084  F05A         	movff	_pow$1478+1,exp@x+1
  3745  0011EE  C085  F05B         	movff	_pow$1478+2,exp@x+2
  3746  0011F2  ECD3  F005         	call	_exp	;wreg free
  3747  0011F6  C059  F062         	movff	?_exp,pow@x
  3748  0011FA  C05A  F063         	movff	?_exp+1,pow@x+1
  3749  0011FE  C05B  F064         	movff	?_exp+2,pow@x+2
  3750  001202  0100               	movlb	0	; () banked
  3751  001204  5186               	movf	pow@sign& (0+255),w,b
  3752  001206  0100               	movlb	0	; () banked
  3753  001208  B4D8               	btfsc	status,2,c
  3754  00120A  D00F               	goto	l919
  3755                           
  3756                           ; BSR set to: 0
  3757  00120C  C062  F011         	movff	pow@x,___ftneg@f1
  3758  001210  C063  F012         	movff	pow@x+1,___ftneg@f1+1
  3759  001214  C064  F013         	movff	pow@x+2,___ftneg@f1+2
  3760  001218  EC79  F014         	call	___ftneg	;wreg free
  3761  00121C  C011  F062         	movff	?___ftneg,?_pow
  3762  001220  C012  F063         	movff	?___ftneg+1,?_pow+1
  3763  001224  C013  F064         	movff	?___ftneg+2,?_pow+2
  3764  001228  0012               	return	
  3765  00122A                     l919:
  3766                           
  3767                           ; BSR set to: 0
  3768  00122A  C062  F062         	movff	pow@x,?_pow
  3769  00122E  C063  F063         	movff	pow@x+1,?_pow+1
  3770  001232  C064  F064         	movff	pow@x+2,?_pow+2
  3771  001236  0012               	return		;funcret
  3772  001238                     __end_of_pow:
  3773                           	opt stack 0
  3774                           tblptru	equ	0xFF8
  3775                           tblptrh	equ	0xFF7
  3776                           tblptrl	equ	0xFF6
  3777                           tablat	equ	0xFF5
  3778                           prodh	equ	0xFF4
  3779                           prodl	equ	0xFF3
  3780                           intcon	equ	0xFF2
  3781                           intcon2	equ	0xFF1
  3782                           intcon3	equ	0xFF0
  3783                           postinc0	equ	0xFEE
  3784                           wreg	equ	0xFE8
  3785                           postdec1	equ	0xFE5
  3786                           fsr1l	equ	0xFE1
  3787                           indf2	equ	0xFDF
  3788                           fsr2h	equ	0xFDA
  3789                           fsr2l	equ	0xFD9
  3790                           status	equ	0xFD8
  3791                           
  3792 ;; *************** function _log *****************
  3793 ;; Defined at:
  3794 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  x               3   67[COMRAM] unsigned char 
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  exponent        2   70[COMRAM] int 
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  3   67[COMRAM] int 
  3801 ;; Registers used:
  3802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3808 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;Total ram usage:        5 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    4
  3815 ;; This function calls:
  3816 ;;		___awtoft
  3817 ;;		___ftadd
  3818 ;;		___ftmul
  3819 ;;		_eval_poly
  3820 ;;		_frexp
  3821 ;; This function is called by:
  3822 ;;		_pow
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           	psect	text9
  3827  0014DC                     __ptext9:
  3828                           	opt stack 0
  3829  0014DC                     _log:
  3830                           	opt stack 22
  3831                           
  3832                           ;incstack = 0
  3833  0014DC  AE46               	btfss	log@x+2,7,c
  3834  0014DE  D00B               	goto	l3188
  3835  0014E0  0E00               	movlw	0
  3836  0014E2  6E6E               	movwf	_errno+1,c
  3837  0014E4  0E21               	movlw	33
  3838  0014E6  6E6D               	movwf	_errno,c
  3839  0014E8  0E00               	movlw	0
  3840  0014EA  6E44               	movwf	?_log,c
  3841  0014EC  0E00               	movlw	0
  3842  0014EE  6E45               	movwf	?_log+1,c
  3843  0014F0  0E00               	movlw	0
  3844  0014F2  6E46               	movwf	?_log+2,c
  3845  0014F4  0012               	return	
  3846  0014F6                     l3188:
  3847  0014F6  5044               	movf	log@x,w,c
  3848  0014F8  1045               	iorwf	log@x+1,w,c
  3849  0014FA  1046               	iorwf	log@x+2,w,c
  3850  0014FC  A4D8               	btfss	status,2,c
  3851  0014FE  D00B               	goto	l3194
  3852  001500  0E00               	movlw	0
  3853  001502  6E6E               	movwf	_errno+1,c
  3854  001504  0E22               	movlw	34
  3855  001506  6E6D               	movwf	_errno,c
  3856  001508  0E00               	movlw	0
  3857  00150A  6E44               	movwf	?_log,c
  3858  00150C  0E00               	movlw	0
  3859  00150E  6E45               	movwf	?_log+1,c
  3860  001510  0E00               	movlw	0
  3861  001512  6E46               	movwf	?_log+2,c
  3862  001514  0012               	return	
  3863  001516                     l3194:
  3864  001516  0E00               	movlw	0
  3865  001518  6E20               	movwf	___ftmul@f2,c
  3866  00151A  0E00               	movlw	0
  3867  00151C  6E21               	movwf	___ftmul@f2+1,c
  3868  00151E  0E40               	movlw	64
  3869  001520  6E22               	movwf	___ftmul@f2+2,c
  3870  001522  0E47               	movlw	low log@exponent
  3871  001524  6E14               	movwf	frexp@eptr,c
  3872  001526  0E00               	movlw	high log@exponent
  3873  001528  6E15               	movwf	frexp@eptr+1,c
  3874  00152A  C044  F011         	movff	log@x,frexp@value
  3875  00152E  C045  F012         	movff	log@x+1,frexp@value+1
  3876  001532  C046  F013         	movff	log@x+2,frexp@value+2
  3877  001536  EC88  F010         	call	_frexp	;wreg free
  3878  00153A  C011  F01D         	movff	?_frexp,___ftmul@f1
  3879  00153E  C012  F01E         	movff	?_frexp+1,___ftmul@f1+1
  3880  001542  C013  F01F         	movff	?_frexp+2,___ftmul@f1+2
  3881  001546  EC93  F00D         	call	___ftmul	;wreg free
  3882  00154A  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  3883  00154E  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  3884  001552  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  3885  001556  0E00               	movlw	0
  3886  001558  6E2F               	movwf	___ftadd@f2,c
  3887  00155A  0E80               	movlw	128
  3888  00155C  6E30               	movwf	___ftadd@f2+1,c
  3889  00155E  0EBF               	movlw	191
  3890  001560  6E31               	movwf	___ftadd@f2+2,c
  3891  001562  ECC5  F006         	call	___ftadd	;wreg free
  3892  001566  C02C  F044         	movff	?___ftadd,log@x
  3893  00156A  C02D  F045         	movff	?___ftadd+1,log@x+1
  3894  00156E  C02E  F046         	movff	?___ftadd+2,log@x+2
  3895  001572  0647               	decf	log@exponent,f,c
  3896  001574  A0D8               	btfss	status,0,c
  3897  001576  0648               	decf	log@exponent+1,f,c
  3898  001578  C044  F038         	movff	log@x,eval_poly@x
  3899  00157C  C045  F039         	movff	log@x+1,eval_poly@x+1
  3900  001580  C046  F03A         	movff	log@x+2,eval_poly@x+2
  3901  001584  0EC9               	movlw	low log@coeff
  3902  001586  6E3B               	movwf	eval_poly@d,c
  3903  001588  0EFE               	movlw	high log@coeff
  3904  00158A  6E3C               	movwf	eval_poly@d+1,c
  3905  00158C  0E00               	movlw	0
  3906  00158E  6E3E               	movwf	eval_poly@n+1,c
  3907  001590  0E08               	movlw	8
  3908  001592  6E3D               	movwf	eval_poly@n,c
  3909  001594  EC67  F00F         	call	_eval_poly	;wreg free
  3910  001598  C038  F044         	movff	?_eval_poly,log@x
  3911  00159C  C039  F045         	movff	?_eval_poly+1,log@x+1
  3912  0015A0  C03A  F046         	movff	?_eval_poly+2,log@x+2
  3913  0015A4  0E72               	movlw	114
  3914  0015A6  6E20               	movwf	___ftmul@f2,c
  3915  0015A8  0E31               	movlw	49
  3916  0015AA  6E21               	movwf	___ftmul@f2+1,c
  3917  0015AC  0E3F               	movlw	63
  3918  0015AE  6E22               	movwf	___ftmul@f2+2,c
  3919  0015B0  C047  F019         	movff	log@exponent,___awtoft@c
  3920  0015B4  C048  F01A         	movff	log@exponent+1,___awtoft@c+1
  3921  0015B8  EC37  F014         	call	___awtoft	;wreg free
  3922  0015BC  C019  F01D         	movff	?___awtoft,___ftmul@f1
  3923  0015C0  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  3924  0015C4  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  3925  0015C8  EC93  F00D         	call	___ftmul	;wreg free
  3926  0015CC  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  3927  0015D0  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  3928  0015D4  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  3929  0015D8  C044  F02F         	movff	log@x,___ftadd@f2
  3930  0015DC  C045  F030         	movff	log@x+1,___ftadd@f2+1
  3931  0015E0  C046  F031         	movff	log@x+2,___ftadd@f2+2
  3932  0015E4  ECC5  F006         	call	___ftadd	;wreg free
  3933  0015E8  C02C  F044         	movff	?___ftadd,?_log
  3934  0015EC  C02D  F045         	movff	?___ftadd+1,?_log+1
  3935  0015F0  C02E  F046         	movff	?___ftadd+2,?_log+2
  3936  0015F4  0012               	return	
  3937  0015F6                     __end_of_log:
  3938                           	opt stack 0
  3939                           tblptru	equ	0xFF8
  3940                           tblptrh	equ	0xFF7
  3941                           tblptrl	equ	0xFF6
  3942                           tablat	equ	0xFF5
  3943                           prodh	equ	0xFF4
  3944                           prodl	equ	0xFF3
  3945                           intcon	equ	0xFF2
  3946                           intcon2	equ	0xFF1
  3947                           intcon3	equ	0xFF0
  3948                           postinc0	equ	0xFEE
  3949                           wreg	equ	0xFE8
  3950                           postdec1	equ	0xFE5
  3951                           fsr1l	equ	0xFE1
  3952                           indf2	equ	0xFDF
  3953                           fsr2h	equ	0xFDA
  3954                           fsr2l	equ	0xFD9
  3955                           status	equ	0xFD8
  3956                           
  3957 ;; *************** function _exp *****************
  3958 ;; Defined at:
  3959 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;  x               3   88[COMRAM] int 
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;  exponent        2   94[COMRAM] int 
  3964 ;;  sign            1   96[COMRAM] unsigned char 
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  3   88[COMRAM] unsigned char 
  3967 ;; Registers used:
  3968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3974 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3975 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;Total ram usage:        9 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    4
  3981 ;; This function calls:
  3982 ;;		___awtoft
  3983 ;;		___ftdiv
  3984 ;;		___ftge
  3985 ;;		___ftmul
  3986 ;;		___ftneg
  3987 ;;		___ftsub
  3988 ;;		___fttol
  3989 ;;		_eval_poly
  3990 ;;		_floor
  3991 ;;		_ldexp
  3992 ;; This function is called by:
  3993 ;;		_pow
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           	psect	text10
  3998  000BA6                     __ptext10:
  3999                           	opt stack 0
  4000  000BA6                     _exp:
  4001                           	opt stack 22
  4002                           
  4003                           ;incstack = 0
  4004  000BA6  5059               	movf	exp@x,w,c
  4005  000BA8  105A               	iorwf	exp@x+1,w,c
  4006  000BAA  105B               	iorwf	exp@x+2,w,c
  4007  000BAC  A4D8               	btfss	status,2,c
  4008  000BAE  D007               	goto	l3210
  4009  000BB0  0E00               	movlw	0
  4010  000BB2  6E59               	movwf	?_exp,c
  4011  000BB4  0E80               	movlw	128
  4012  000BB6  6E5A               	movwf	?_exp+1,c
  4013  000BB8  0E3F               	movlw	63
  4014  000BBA  6E5B               	movwf	?_exp+2,c
  4015  000BBC  0012               	return	
  4016  000BBE                     l3210:
  4017  000BBE  0E72               	movlw	114
  4018  000BC0  6E11               	movwf	___ftge@ff1,c
  4019  000BC2  0E31               	movlw	49
  4020  000BC4  6E12               	movwf	___ftge@ff1+1,c
  4021  000BC6  0E44               	movlw	68
  4022  000BC8  6E13               	movwf	___ftge@ff1+2,c
  4023  000BCA  C059  F014         	movff	exp@x,___ftge@ff2
  4024  000BCE  C05A  F015         	movff	exp@x+1,___ftge@ff2+1
  4025  000BD2  C05B  F016         	movff	exp@x+2,___ftge@ff2+2
  4026  000BD6  ECD0  F010         	call	___ftge	;wreg free
  4027  000BDA  B0D8               	btfsc	status,0,c
  4028  000BDC  D00B               	goto	l3216
  4029  000BDE  0E00               	movlw	0
  4030  000BE0  6E6E               	movwf	_errno+1,c
  4031  000BE2  0E22               	movlw	34
  4032  000BE4  6E6D               	movwf	_errno,c
  4033  000BE6  0EFF               	movlw	255
  4034  000BE8  6E59               	movwf	?_exp,c
  4035  000BEA  0E7F               	movlw	127
  4036  000BEC  6E5A               	movwf	?_exp+1,c
  4037  000BEE  0E7F               	movlw	127
  4038  000BF0  6E5B               	movwf	?_exp+2,c
  4039  000BF2  0012               	return	
  4040  000BF4                     l3216:
  4041  000BF4  C059  F011         	movff	exp@x,___ftge@ff1
  4042  000BF8  C05A  F012         	movff	exp@x+1,___ftge@ff1+1
  4043  000BFC  C05B  F013         	movff	exp@x+2,___ftge@ff1+2
  4044  000C00  0E49               	movlw	73
  4045  000C02  6E14               	movwf	___ftge@ff2,c
  4046  000C04  0E3A               	movlw	58
  4047  000C06  6E15               	movwf	___ftge@ff2+1,c
  4048  000C08  0EC4               	movlw	196
  4049  000C0A  6E16               	movwf	___ftge@ff2+2,c
  4050  000C0C  ECD0  F010         	call	___ftge	;wreg free
  4051  000C10  B0D8               	btfsc	status,0,c
  4052  000C12  D00B               	goto	l3222
  4053  000C14  0E00               	movlw	0
  4054  000C16  6E6E               	movwf	_errno+1,c
  4055  000C18  0E22               	movlw	34
  4056  000C1A  6E6D               	movwf	_errno,c
  4057  000C1C  0E00               	movlw	0
  4058  000C1E  6E59               	movwf	?_exp,c
  4059  000C20  0E00               	movlw	0
  4060  000C22  6E5A               	movwf	?_exp+1,c
  4061  000C24  0E00               	movlw	0
  4062  000C26  6E5B               	movwf	?_exp+2,c
  4063  000C28  0012               	return	
  4064  000C2A                     l3222:
  4065  000C2A  AE5B               	btfss	exp@x+2,7,c
  4066  000C2C  D002               	goto	u2520
  4067  000C2E  0E01               	movlw	1
  4068  000C30  D001               	goto	u2530
  4069  000C32                     u2520:
  4070  000C32  0E00               	movlw	0
  4071  000C34                     u2530:
  4072  000C34  6E61               	movwf	exp@sign,c
  4073  000C36  5061               	movf	exp@sign,w,c
  4074  000C38  B4D8               	btfsc	status,2,c
  4075  000C3A  D00E               	goto	l1077
  4076  000C3C  C059  F011         	movff	exp@x,___ftneg@f1
  4077  000C40  C05A  F012         	movff	exp@x+1,___ftneg@f1+1
  4078  000C44  C05B  F013         	movff	exp@x+2,___ftneg@f1+2
  4079  000C48  EC79  F014         	call	___ftneg	;wreg free
  4080  000C4C  C011  F059         	movff	?___ftneg,exp@x
  4081  000C50  C012  F05A         	movff	?___ftneg+1,exp@x+1
  4082  000C54  C013  F05B         	movff	?___ftneg+2,exp@x+2
  4083  000C58                     l1077:
  4084  000C58  C059  F01D         	movff	exp@x,___ftmul@f1
  4085  000C5C  C05A  F01E         	movff	exp@x+1,___ftmul@f1+1
  4086  000C60  C05B  F01F         	movff	exp@x+2,___ftmul@f1+2
  4087  000C64  0EAA               	movlw	170
  4088  000C66  6E20               	movwf	___ftmul@f2,c
  4089  000C68  0EB8               	movlw	184
  4090  000C6A  6E21               	movwf	___ftmul@f2+1,c
  4091  000C6C  0E3F               	movlw	63
  4092  000C6E  6E22               	movwf	___ftmul@f2+2,c
  4093  000C70  EC93  F00D         	call	___ftmul	;wreg free
  4094  000C74  C01D  F059         	movff	?___ftmul,exp@x
  4095  000C78  C01E  F05A         	movff	?___ftmul+1,exp@x+1
  4096  000C7C  C01F  F05B         	movff	?___ftmul+2,exp@x+2
  4097  000C80  C059  F051         	movff	exp@x,floor@x
  4098  000C84  C05A  F052         	movff	exp@x+1,floor@x+1
  4099  000C88  C05B  F053         	movff	exp@x+2,floor@x+2
  4100  000C8C  ECF8  F00E         	call	_floor	;wreg free
  4101  000C90  C051  F05C         	movff	?_floor,_exp$1479
  4102  000C94  C052  F05D         	movff	?_floor+1,_exp$1479+1
  4103  000C98  C053  F05E         	movff	?_floor+2,_exp$1479+2
  4104  000C9C  C05C  F038         	movff	_exp$1479,___fttol@f1
  4105  000CA0  C05D  F039         	movff	_exp$1479+1,___fttol@f1+1
  4106  000CA4  C05E  F03A         	movff	_exp$1479+2,___fttol@f1+2
  4107  000CA8  EC19  F00D         	call	___fttol	;wreg free
  4108  000CAC  C038  F05F         	movff	?___fttol,exp@exponent
  4109  000CB0  C039  F060         	movff	?___fttol+1,exp@exponent+1
  4110  000CB4  C059  F038         	movff	exp@x,___ftsub@f1
  4111  000CB8  C05A  F039         	movff	exp@x+1,___ftsub@f1+1
  4112  000CBC  C05B  F03A         	movff	exp@x+2,___ftsub@f1+2
  4113  000CC0  C05F  F019         	movff	exp@exponent,___awtoft@c
  4114  000CC4  C060  F01A         	movff	exp@exponent+1,___awtoft@c+1
  4115  000CC8  EC37  F014         	call	___awtoft	;wreg free
  4116  000CCC  C019  F03B         	movff	?___awtoft,___ftsub@f2
  4117  000CD0  C01A  F03C         	movff	?___awtoft+1,___ftsub@f2+1
  4118  000CD4  C01B  F03D         	movff	?___awtoft+2,___ftsub@f2+2
  4119  000CD8  ECFA  F013         	call	___ftsub	;wreg free
  4120  000CDC  C038  F059         	movff	?___ftsub,exp@x
  4121  000CE0  C039  F05A         	movff	?___ftsub+1,exp@x+1
  4122  000CE4  C03A  F05B         	movff	?___ftsub+2,exp@x+2
  4123  000CE8  C059  F038         	movff	exp@x,eval_poly@x
  4124  000CEC  C05A  F039         	movff	exp@x+1,eval_poly@x+1
  4125  000CF0  C05B  F03A         	movff	exp@x+2,eval_poly@x+2
  4126  000CF4  0EAB               	movlw	low exp@coeff
  4127  000CF6  6E3B               	movwf	eval_poly@d,c
  4128  000CF8  0EFE               	movlw	high exp@coeff
  4129  000CFA  6E3C               	movwf	eval_poly@d+1,c
  4130  000CFC  0E00               	movlw	0
  4131  000CFE  6E3E               	movwf	eval_poly@n+1,c
  4132  000D00  0E09               	movlw	9
  4133  000D02  6E3D               	movwf	eval_poly@n,c
  4134  000D04  EC67  F00F         	call	_eval_poly	;wreg free
  4135  000D08  C038  F044         	movff	?_eval_poly,ldexp@value
  4136  000D0C  C039  F045         	movff	?_eval_poly+1,ldexp@value+1
  4137  000D10  C03A  F046         	movff	?_eval_poly+2,ldexp@value+2
  4138  000D14  C05F  F047         	movff	exp@exponent,ldexp@newexp
  4139  000D18  C060  F048         	movff	exp@exponent+1,ldexp@newexp+1
  4140  000D1C  ECD0  F00F         	call	_ldexp	;wreg free
  4141  000D20  C044  F059         	movff	?_ldexp,exp@x
  4142  000D24  C045  F05A         	movff	?_ldexp+1,exp@x+1
  4143  000D28  C046  F05B         	movff	?_ldexp+2,exp@x+2
  4144  000D2C  5061               	movf	exp@sign,w,c
  4145  000D2E  B4D8               	btfsc	status,2,c
  4146  000D30  D025               	goto	l1078
  4147  000D32  2859               	incf	exp@x,w,c
  4148  000D34  E10E               	bnz	l3244
  4149  000D36  0E7F               	movlw	127
  4150  000D38  185A               	xorwf	exp@x+1,w,c
  4151  000D3A  E10B               	bnz	l3244
  4152  000D3C  0E7F               	movlw	127
  4153  000D3E  185B               	xorwf	exp@x+2,w,c
  4154  000D40  A4D8               	btfss	status,2,c
  4155  000D42  D007               	goto	l3244
  4156  000D44  0E00               	movlw	0
  4157  000D46  6E59               	movwf	?_exp,c
  4158  000D48  0E00               	movlw	0
  4159  000D4A  6E5A               	movwf	?_exp+1,c
  4160  000D4C  0E00               	movlw	0
  4161  000D4E  6E5B               	movwf	?_exp+2,c
  4162  000D50  0012               	return	
  4163  000D52                     l3244:
  4164  000D52  0E00               	movlw	0
  4165  000D54  6E19               	movwf	___ftdiv@f1,c
  4166  000D56  0E80               	movlw	128
  4167  000D58  6E1A               	movwf	___ftdiv@f1+1,c
  4168  000D5A  0E3F               	movlw	63
  4169  000D5C  6E1B               	movwf	___ftdiv@f1+2,c
  4170  000D5E  C059  F01C         	movff	exp@x,___ftdiv@f2
  4171  000D62  C05A  F01D         	movff	exp@x+1,___ftdiv@f2+1
  4172  000D66  C05B  F01E         	movff	exp@x+2,___ftdiv@f2+2
  4173  000D6A  EC85  F00E         	call	___ftdiv	;wreg free
  4174  000D6E  C019  F059         	movff	?___ftdiv,?_exp
  4175  000D72  C01A  F05A         	movff	?___ftdiv+1,?_exp+1
  4176  000D76  C01B  F05B         	movff	?___ftdiv+2,?_exp+2
  4177  000D7A  0012               	return	
  4178  000D7C                     l1078:
  4179  000D7C  C059  F059         	movff	exp@x,?_exp
  4180  000D80  C05A  F05A         	movff	exp@x+1,?_exp+1
  4181  000D84  C05B  F05B         	movff	exp@x+2,?_exp+2
  4182  000D88  0012               	return		;funcret
  4183  000D8A                     __end_of_exp:
  4184                           	opt stack 0
  4185                           tblptru	equ	0xFF8
  4186                           tblptrh	equ	0xFF7
  4187                           tblptrl	equ	0xFF6
  4188                           tablat	equ	0xFF5
  4189                           prodh	equ	0xFF4
  4190                           prodl	equ	0xFF3
  4191                           intcon	equ	0xFF2
  4192                           intcon2	equ	0xFF1
  4193                           intcon3	equ	0xFF0
  4194                           postinc0	equ	0xFEE
  4195                           wreg	equ	0xFE8
  4196                           postdec1	equ	0xFE5
  4197                           fsr1l	equ	0xFE1
  4198                           indf2	equ	0xFDF
  4199                           fsr2h	equ	0xFDA
  4200                           fsr2l	equ	0xFD9
  4201                           status	equ	0xFD8
  4202                           
  4203 ;; *************** function _ldexp *****************
  4204 ;; Defined at:
  4205 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;  value           3   67[COMRAM] unsigned char 
  4208 ;;  newexp          2   70[COMRAM] int 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;		None
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  3   67[COMRAM] int 
  4213 ;; Registers used:
  4214 ;;		wreg, status,2, status,0
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4220 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;Total ram usage:        7 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    1
  4227 ;; This function calls:
  4228 ;;		Nothing
  4229 ;; This function is called by:
  4230 ;;		_exp
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           	psect	text11
  4235  001FA0                     __ptext11:
  4236                           	opt stack 0
  4237  001FA0                     _ldexp:
  4238                           	opt stack 24
  4239                           
  4240                           ;incstack = 0
  4241  001FA0  5044               	movf	ldexp@value,w,c
  4242  001FA2  1045               	iorwf	ldexp@value+1,w,c
  4243  001FA4  1046               	iorwf	ldexp@value+2,w,c
  4244  001FA6  A4D8               	btfss	status,2,c
  4245  001FA8  D007               	goto	l3142
  4246  001FAA  0E00               	movlw	0
  4247  001FAC  6E44               	movwf	?_ldexp,c
  4248  001FAE  0E00               	movlw	0
  4249  001FB0  6E45               	movwf	?_ldexp+1,c
  4250  001FB2  0E00               	movlw	0
  4251  001FB4  6E46               	movwf	?_ldexp+2,c
  4252  001FB6  0012               	return	
  4253  001FB8                     l3142:
  4254  001FB8  5046               	movf	ldexp@value+2,w,c
  4255  001FBA  0B7F               	andlw	127
  4256  001FBC  6E49               	movwf	??_ldexp& (0+255),c
  4257  001FBE  6A4A               	clrf	(??_ldexp+1)& (0+255),c
  4258  001FC0  90D8               	bcf	status,0,c
  4259  001FC2  3649               	rlcf	??_ldexp,f,c
  4260  001FC4  364A               	rlcf	??_ldexp+1,f,c
  4261  001FC6  5049               	movf	??_ldexp,w,c
  4262  001FC8  2647               	addwf	ldexp@newexp,f,c
  4263  001FCA  504A               	movf	??_ldexp+1,w,c
  4264  001FCC  2248               	addwfc	ldexp@newexp+1,f,c
  4265  001FCE  AE45               	btfss	ldexp@value+1,7,c
  4266  001FD0  D003               	goto	u2420
  4267  001FD2  6A49               	clrf	??_ldexp& (0+255),c
  4268  001FD4  2A49               	incf	??_ldexp& (0+255),f,c
  4269  001FD6  D001               	goto	u2428
  4270  001FD8                     u2420:
  4271  001FD8  6A49               	clrf	??_ldexp& (0+255),c
  4272  001FDA                     u2428:
  4273  001FDA  5049               	movf	??_ldexp,w,c
  4274  001FDC  2647               	addwf	ldexp@newexp,f,c
  4275  001FDE  0E00               	movlw	0
  4276  001FE0  2248               	addwfc	ldexp@newexp+1,f,c
  4277  001FE2  AE48               	btfss	ldexp@newexp+1,7,c
  4278  001FE4  D00B               	goto	l3150
  4279  001FE6  0E00               	movlw	0
  4280  001FE8  6E6E               	movwf	_errno+1,c
  4281  001FEA  0E22               	movlw	34
  4282  001FEC  6E6D               	movwf	_errno,c
  4283  001FEE  0E00               	movlw	0
  4284  001FF0  6E44               	movwf	?_ldexp,c
  4285  001FF2  0E00               	movlw	0
  4286  001FF4  6E45               	movwf	?_ldexp+1,c
  4287  001FF6  0E00               	movlw	0
  4288  001FF8                     L2:
  4289  001FF8  6E46               	movwf	?_ldexp+2,c
  4290  001FFA  0012               	return	
  4291  001FFC                     l3150:
  4292  001FFC  BE48               	btfsc	ldexp@newexp+1,7,c
  4293  001FFE  D015               	goto	l3166
  4294  002000  0448               	decf	ldexp@newexp+1,w,c
  4295  002002  A0D8               	btfss	status,0,c
  4296  002004  D012               	goto	l3166
  4297  002006  0E00               	movlw	0
  4298  002008  6E6E               	movwf	_errno+1,c
  4299  00200A  0E22               	movlw	34
  4300  00200C  6E6D               	movwf	_errno,c
  4301  00200E  AE46               	btfss	ldexp@value+2,7,c
  4302  002010  D006               	goto	l3162
  4303  002012  0EFF               	movlw	255
  4304  002014  6E44               	movwf	?_ldexp,c
  4305  002016  0E7F               	movlw	127
  4306  002018  6E45               	movwf	?_ldexp+1,c
  4307  00201A  0EFF               	movlw	255
  4308  00201C  D7ED               	goto	L2
  4309  00201E                     l3162:
  4310  00201E  0EFF               	movlw	255
  4311  002020  6E44               	movwf	?_ldexp,c
  4312  002022  0E7F               	movlw	127
  4313  002024  6E45               	movwf	?_ldexp+1,c
  4314  002026  0E7F               	movlw	127
  4315  002028  D7E7               	goto	L2
  4316  00202A                     l3166:
  4317  00202A  3448               	rlcf	ldexp@newexp+1,w,c
  4318  00202C  3048               	rrcf	ldexp@newexp+1,w,c
  4319  00202E  6E4A               	movwf	(??_ldexp+1)& (0+255),c
  4320  002030  3047               	rrcf	ldexp@newexp,w,c
  4321  002032  6E49               	movwf	??_ldexp& (0+255),c
  4322  002034  5046               	movf	ldexp@value+2,w,c
  4323  002036  1849               	xorwf	??_ldexp,w,c
  4324  002038  0B80               	andlw	-128
  4325  00203A  1849               	xorwf	??_ldexp,w,c
  4326  00203C  6E46               	movwf	ldexp@value+2,c
  4327  00203E  C047  F049         	movff	ldexp@newexp,??_ldexp
  4328  002042  0E01               	movlw	1
  4329  002044  1649               	andwf	??_ldexp,f,c
  4330  002046  3249               	rrcf	??_ldexp,f,c
  4331  002048  3249               	rrcf	??_ldexp,f,c
  4332  00204A  5045               	movf	ldexp@value+1,w,c
  4333  00204C  1849               	xorwf	??_ldexp,w,c
  4334  00204E  0B7F               	andlw	-129
  4335  002050  1849               	xorwf	??_ldexp,w,c
  4336  002052  6E45               	movwf	ldexp@value+1,c
  4337  002054  C044  F044         	movff	ldexp@value,?_ldexp
  4338  002058  C045  F045         	movff	ldexp@value+1,?_ldexp+1
  4339  00205C  C046  F046         	movff	ldexp@value+2,?_ldexp+2
  4340  002060  0012               	return	
  4341  002062                     __end_of_ldexp:
  4342                           	opt stack 0
  4343                           tblptru	equ	0xFF8
  4344                           tblptrh	equ	0xFF7
  4345                           tblptrl	equ	0xFF6
  4346                           tablat	equ	0xFF5
  4347                           prodh	equ	0xFF4
  4348                           prodl	equ	0xFF3
  4349                           intcon	equ	0xFF2
  4350                           intcon2	equ	0xFF1
  4351                           intcon3	equ	0xFF0
  4352                           postinc0	equ	0xFEE
  4353                           wreg	equ	0xFE8
  4354                           postdec1	equ	0xFE5
  4355                           fsr1l	equ	0xFE1
  4356                           indf2	equ	0xFDF
  4357                           fsr2h	equ	0xFDA
  4358                           fsr2l	equ	0xFD9
  4359                           status	equ	0xFD8
  4360                           
  4361 ;; *************** function _floor *****************
  4362 ;; Defined at:
  4363 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;  x               3   80[COMRAM] int 
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;  i               3   83[COMRAM] int 
  4368 ;;  expon           2   86[COMRAM] int 
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  3   80[COMRAM] int 
  4371 ;; Registers used:
  4372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4378 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4381 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4382 ;;Total ram usage:        8 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    3
  4385 ;; This function calls:
  4386 ;;		___altoft
  4387 ;;		___ftadd
  4388 ;;		___ftge
  4389 ;;		___fttol
  4390 ;;		_frexp
  4391 ;; This function is called by:
  4392 ;;		_exp
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text12
  4397  001DF0                     __ptext12:
  4398                           	opt stack 0
  4399  001DF0                     _floor:
  4400                           	opt stack 22
  4401                           
  4402                           ;incstack = 0
  4403  001DF0  C051  F011         	movff	floor@x,frexp@value
  4404  001DF4  C052  F012         	movff	floor@x+1,frexp@value+1
  4405  001DF8  C053  F013         	movff	floor@x+2,frexp@value+2
  4406  001DFC  0E57               	movlw	low floor@expon
  4407  001DFE  6E14               	movwf	frexp@eptr,c
  4408  001E00  0E00               	movlw	high floor@expon
  4409  001E02  6E15               	movwf	frexp@eptr+1,c
  4410  001E04  EC88  F010         	call	_frexp	;wreg free
  4411  001E08  AE58               	btfss	floor@expon+1,7,c
  4412  001E0A  D010               	goto	l3120
  4413  001E0C  AE53               	btfss	floor@x+2,7,c
  4414  001E0E  D007               	goto	l3116
  4415  001E10  0E00               	movlw	0
  4416  001E12  6E51               	movwf	?_floor,c
  4417  001E14  0E80               	movlw	128
  4418  001E16  6E52               	movwf	?_floor+1,c
  4419  001E18  0EBF               	movlw	191
  4420  001E1A  6E53               	movwf	?_floor+2,c
  4421  001E1C  0012               	return	
  4422  001E1E                     l3116:
  4423  001E1E  0E00               	movlw	0
  4424  001E20  6E51               	movwf	?_floor,c
  4425  001E22  0E00               	movlw	0
  4426  001E24  6E52               	movwf	?_floor+1,c
  4427  001E26  0E00               	movlw	0
  4428  001E28  6E53               	movwf	?_floor+2,c
  4429  001E2A  0012               	return	
  4430  001E2C                     l3120:
  4431  001E2C  5058               	movf	floor@expon+1,w,c
  4432  001E2E  E104               	bnz	u2380
  4433  001E30  0E15               	movlw	21
  4434  001E32  5C57               	subwf	floor@expon,w,c
  4435  001E34  A0D8               	btfss	status,0,c
  4436  001E36  D007               	goto	l3124
  4437  001E38                     u2380:
  4438  001E38  C051  F051         	movff	floor@x,?_floor
  4439  001E3C  C052  F052         	movff	floor@x+1,?_floor+1
  4440  001E40  C053  F053         	movff	floor@x+2,?_floor+2
  4441  001E44  0012               	return	
  4442  001E46                     l3124:
  4443  001E46  C051  F038         	movff	floor@x,___fttol@f1
  4444  001E4A  C052  F039         	movff	floor@x+1,___fttol@f1+1
  4445  001E4E  C053  F03A         	movff	floor@x+2,___fttol@f1+2
  4446  001E52  EC19  F00D         	call	___fttol	;wreg free
  4447  001E56  C038  F047         	movff	?___fttol,___altoft@c
  4448  001E5A  C039  F048         	movff	?___fttol+1,___altoft@c+1
  4449  001E5E  C03A  F049         	movff	?___fttol+2,___altoft@c+2
  4450  001E62  C03B  F04A         	movff	?___fttol+3,___altoft@c+3
  4451  001E66  EC1F  F012         	call	___altoft	;wreg free
  4452  001E6A  C047  F054         	movff	?___altoft,floor@i
  4453  001E6E  C048  F055         	movff	?___altoft+1,floor@i+1
  4454  001E72  C049  F056         	movff	?___altoft+2,floor@i+2
  4455  001E76  C051  F011         	movff	floor@x,___ftge@ff1
  4456  001E7A  C052  F012         	movff	floor@x+1,___ftge@ff1+1
  4457  001E7E  C053  F013         	movff	floor@x+2,___ftge@ff1+2
  4458  001E82  C054  F014         	movff	floor@i,___ftge@ff2
  4459  001E86  C055  F015         	movff	floor@i+1,___ftge@ff2+1
  4460  001E8A  C056  F016         	movff	floor@i+2,___ftge@ff2+2
  4461  001E8E  ECD0  F010         	call	___ftge	;wreg free
  4462  001E92  B0D8               	btfsc	status,0,c
  4463  001E94  D015               	goto	l1088
  4464  001E96  C054  F02C         	movff	floor@i,___ftadd@f1
  4465  001E9A  C055  F02D         	movff	floor@i+1,___ftadd@f1+1
  4466  001E9E  C056  F02E         	movff	floor@i+2,___ftadd@f1+2
  4467  001EA2  0E00               	movlw	0
  4468  001EA4  6E2F               	movwf	___ftadd@f2,c
  4469  001EA6  0E80               	movlw	128
  4470  001EA8  6E30               	movwf	___ftadd@f2+1,c
  4471  001EAA  0EBF               	movlw	191
  4472  001EAC  6E31               	movwf	___ftadd@f2+2,c
  4473  001EAE  ECC5  F006         	call	___ftadd	;wreg free
  4474  001EB2  C02C  F051         	movff	?___ftadd,?_floor
  4475  001EB6  C02D  F052         	movff	?___ftadd+1,?_floor+1
  4476  001EBA  C02E  F053         	movff	?___ftadd+2,?_floor+2
  4477  001EBE  0012               	return	
  4478  001EC0                     l1088:
  4479  001EC0  C054  F051         	movff	floor@i,?_floor
  4480  001EC4  C055  F052         	movff	floor@i+1,?_floor+1
  4481  001EC8  C056  F053         	movff	floor@i+2,?_floor+2
  4482  001ECC  0012               	return		;funcret
  4483  001ECE                     __end_of_floor:
  4484                           	opt stack 0
  4485                           tblptru	equ	0xFF8
  4486                           tblptrh	equ	0xFF7
  4487                           tblptrl	equ	0xFF6
  4488                           tablat	equ	0xFF5
  4489                           prodh	equ	0xFF4
  4490                           prodl	equ	0xFF3
  4491                           intcon	equ	0xFF2
  4492                           intcon2	equ	0xFF1
  4493                           intcon3	equ	0xFF0
  4494                           postinc0	equ	0xFEE
  4495                           wreg	equ	0xFE8
  4496                           postdec1	equ	0xFE5
  4497                           fsr1l	equ	0xFE1
  4498                           indf2	equ	0xFDF
  4499                           fsr2h	equ	0xFDA
  4500                           fsr2l	equ	0xFD9
  4501                           status	equ	0xFD8
  4502                           
  4503 ;; *************** function _frexp *****************
  4504 ;; Defined at:
  4505 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  value           3   16[COMRAM] int 
  4508 ;;  eptr            2   19[COMRAM] PTR int 
  4509 ;;		 -> log@exponent(2), floor@expon(2), 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  3   16[COMRAM] PTR int 
  4514 ;; Registers used:
  4515 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4521 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4523 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;Total ram usage:        7 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    1
  4528 ;; This function calls:
  4529 ;;		Nothing
  4530 ;; This function is called by:
  4531 ;;		_floor
  4532 ;;		_log
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	text13
  4537  002110                     __ptext13:
  4538                           	opt stack 0
  4539  002110                     _frexp:
  4540                           	opt stack 24
  4541                           
  4542                           ;incstack = 0
  4543  002110  5011               	movf	frexp@value,w,c
  4544  002112  1012               	iorwf	frexp@value+1,w,c
  4545  002114  1013               	iorwf	frexp@value+2,w,c
  4546  002116  A4D8               	btfss	status,2,c
  4547  002118  D00F               	goto	l3024
  4548  00211A  C014  FFD9         	movff	frexp@eptr,fsr2l
  4549  00211E  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4550  002122  0E00               	movlw	0
  4551  002124  6EDE               	movwf	postinc2,c
  4552  002126  0E00               	movlw	0
  4553  002128  6EDD               	movwf	postdec2,c
  4554  00212A  0E00               	movlw	0
  4555  00212C  6E11               	movwf	?_frexp,c
  4556  00212E  0E00               	movlw	0
  4557  002130  6E12               	movwf	?_frexp+1,c
  4558  002132  0E00               	movlw	0
  4559  002134  6E13               	movwf	?_frexp+2,c
  4560  002136  0012               	return	
  4561  002138                     l3024:
  4562  002138  5013               	movf	frexp@value+2,w,c
  4563  00213A  0B7F               	andlw	127
  4564  00213C  6E16               	movwf	??_frexp& (0+255),c
  4565  00213E  6A17               	clrf	(??_frexp+1)& (0+255),c
  4566  002140  90D8               	bcf	status,0,c
  4567  002142  3616               	rlcf	??_frexp,f,c
  4568  002144  3617               	rlcf	??_frexp+1,f,c
  4569  002146  C014  FFD9         	movff	frexp@eptr,fsr2l
  4570  00214A  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4571  00214E  C016  FFDE         	movff	??_frexp,postinc2
  4572  002152  C017  FFDD         	movff	??_frexp+1,postdec2
  4573  002156  AE12               	btfss	frexp@value+1,7,c
  4574  002158  D003               	goto	u2270
  4575  00215A  6A16               	clrf	??_frexp& (0+255),c
  4576  00215C  2A16               	incf	??_frexp& (0+255),f,c
  4577  00215E  D001               	goto	u2278
  4578  002160                     u2270:
  4579  002160  6A16               	clrf	??_frexp& (0+255),c
  4580  002162                     u2278:
  4581  002162  5016               	movf	??_frexp,w,c
  4582  002164  C014  FFD9         	movff	frexp@eptr,fsr2l
  4583  002168  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4584  00216C  12DE               	iorwf	postinc2,f,c
  4585  00216E  0E00               	movlw	0
  4586  002170  12DD               	iorwf	postdec2,f,c
  4587  002172  C014  FFD9         	movff	frexp@eptr,fsr2l
  4588  002176  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4589  00217A  0E82               	movlw	130
  4590  00217C  26DE               	addwf	postinc2,f,c
  4591  00217E  0EFF               	movlw	255
  4592  002180  22DD               	addwfc	postdec2,f,c
  4593  002182  8013               	bsf	frexp@value+2,0,c
  4594  002184  8213               	bsf	frexp@value+2,1,c
  4595  002186  8413               	bsf	frexp@value+2,2,c
  4596  002188  8613               	bsf	frexp@value+2,3,c
  4597  00218A  8813               	bsf	frexp@value+2,4,c
  4598  00218C  8A13               	bsf	frexp@value+2,5,c
  4599  00218E  9C13               	bcf	frexp@value+2,6,c
  4600  002190  9E12               	bcf	frexp@value+1,7,c
  4601  002192  C011  F011         	movff	frexp@value,?_frexp
  4602  002196  C012  F012         	movff	frexp@value+1,?_frexp+1
  4603  00219A  C013  F013         	movff	frexp@value+2,?_frexp+2
  4604  00219E  0012               	return	
  4605  0021A0                     __end_of_frexp:
  4606                           	opt stack 0
  4607                           tblptru	equ	0xFF8
  4608                           tblptrh	equ	0xFF7
  4609                           tblptrl	equ	0xFF6
  4610                           tablat	equ	0xFF5
  4611                           prodh	equ	0xFF4
  4612                           prodl	equ	0xFF3
  4613                           intcon	equ	0xFF2
  4614                           intcon2	equ	0xFF1
  4615                           intcon3	equ	0xFF0
  4616                           postinc0	equ	0xFEE
  4617                           wreg	equ	0xFE8
  4618                           postdec1	equ	0xFE5
  4619                           fsr1l	equ	0xFE1
  4620                           indf2	equ	0xFDF
  4621                           postinc2	equ	0xFDE
  4622                           postdec2	equ	0xFDD
  4623                           fsr2h	equ	0xFDA
  4624                           fsr2l	equ	0xFD9
  4625                           status	equ	0xFD8
  4626                           
  4627 ;; *************** function ___fttol *****************
  4628 ;; Defined at:
  4629 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;  f1              3   55[COMRAM] float 
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  lval            4   65[COMRAM] unsigned long 
  4634 ;;  exp1            1   69[COMRAM] unsigned char 
  4635 ;;  sign1           1   64[COMRAM] unsigned char 
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  4   55[COMRAM] long 
  4638 ;; Registers used:
  4639 ;;		wreg, status,2, status,0
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4645 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;Total ram usage:       15 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; Hardware stack levels required when called:    1
  4652 ;; This function calls:
  4653 ;;		Nothing
  4654 ;; This function is called by:
  4655 ;;		_dec_to_hex
  4656 ;;		_init_operation
  4657 ;;		_pow
  4658 ;;		_exp
  4659 ;;		_floor
  4660 ;;		_hex_to_dec
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664                           	psect	text14
  4665  001A32                     __ptext14:
  4666                           	opt stack 0
  4667  001A32                     ___fttol:
  4668                           	opt stack 23
  4669                           
  4670                           ;incstack = 0
  4671  001A32  C03A  F03C         	movff	___fttol@f1+2,??___fttol
  4672  001A36  6A3D               	clrf	(??___fttol+1)& (0+255),c
  4673  001A38  6A3E               	clrf	(??___fttol+2)& (0+255),c
  4674  001A3A  3439               	rlcf	___fttol@f1+1,w,c
  4675  001A3C  363C               	rlcf	??___fttol& (0+255),f,c
  4676  001A3E  E301               	bnc	u2181
  4677  001A40  803D               	bsf	(??___fttol+1)& (0+255),0,c
  4678  001A42                     u2181:
  4679  001A42  503C               	movf	??___fttol,w,c
  4680  001A44  6E46               	movwf	___fttol@exp1,c
  4681  001A46  5046               	movf	___fttol@exp1,w,c
  4682  001A48  A4D8               	btfss	status,2,c
  4683  001A4A  D009               	goto	l2976
  4684  001A4C  0E00               	movlw	0
  4685  001A4E  6E38               	movwf	?___fttol,c
  4686  001A50  0E00               	movlw	0
  4687  001A52  6E39               	movwf	?___fttol+1,c
  4688  001A54  0E00               	movlw	0
  4689  001A56  6E3A               	movwf	?___fttol+2,c
  4690  001A58  0E00               	movlw	0
  4691  001A5A  6E3B               	movwf	?___fttol+3,c
  4692  001A5C  0012               	return	
  4693  001A5E                     l2976:
  4694  001A5E  0E17               	movlw	23
  4695  001A60  6E3C               	movwf	??___fttol& (0+255),c
  4696  001A62  C038  F03D         	movff	___fttol@f1,??___fttol+1
  4697  001A66  C039  F03E         	movff	___fttol@f1+1,??___fttol+2
  4698  001A6A  C03A  F03F         	movff	___fttol@f1+2,??___fttol+3
  4699  001A6E  283C               	incf	??___fttol,w,c
  4700  001A70  6E40               	movwf	(??___fttol+4)& (0+255),c
  4701  001A72  D004               	goto	u2200
  4702  001A74                     u2205:
  4703  001A74  90D8               	bcf	status,0,c
  4704  001A76  323F               	rrcf	??___fttol+3,f,c
  4705  001A78  323E               	rrcf	??___fttol+2,f,c
  4706  001A7A  323D               	rrcf	??___fttol+1,f,c
  4707  001A7C                     u2200:
  4708  001A7C  2E40               	decfsz	(??___fttol+4)& (0+255),f,c
  4709  001A7E  D7FA               	goto	u2205
  4710  001A80  503D               	movf	??___fttol+1,w,c
  4711  001A82  6E41               	movwf	___fttol@sign1,c
  4712  001A84  8E39               	bsf	___fttol@f1+1,7,c
  4713  001A86  0EFF               	movlw	255
  4714  001A88  1638               	andwf	___fttol@f1,f,c
  4715  001A8A  0EFF               	movlw	255
  4716  001A8C  1639               	andwf	___fttol@f1+1,f,c
  4717  001A8E  0E00               	movlw	0
  4718  001A90  163A               	andwf	___fttol@f1+2,f,c
  4719  001A92  5038               	movf	___fttol@f1,w,c
  4720  001A94  6E42               	movwf	___fttol@lval,c
  4721  001A96  5039               	movf	___fttol@f1+1,w,c
  4722  001A98  6E43               	movwf	___fttol@lval+1,c
  4723  001A9A  503A               	movf	___fttol@f1+2,w,c
  4724  001A9C  6E44               	movwf	___fttol@lval+2,c
  4725  001A9E  6A45               	clrf	___fttol@lval+3,c
  4726  001AA0  0E8E               	movlw	142
  4727  001AA2  5E46               	subwf	___fttol@exp1,f,c
  4728  001AA4  AE46               	btfss	___fttol@exp1,7,c
  4729  001AA6  D016               	goto	l2998
  4730  001AA8  5046               	movf	___fttol@exp1,w,c
  4731  001AAA  0A80               	xorlw	128
  4732  001AAC  0F8F               	addlw	143
  4733  001AAE  B0D8               	btfsc	status,0,c
  4734  001AB0  D009               	goto	l2994
  4735  001AB2  0E00               	movlw	0
  4736  001AB4  6E38               	movwf	?___fttol,c
  4737  001AB6  0E00               	movlw	0
  4738  001AB8  6E39               	movwf	?___fttol+1,c
  4739  001ABA  0E00               	movlw	0
  4740  001ABC  6E3A               	movwf	?___fttol+2,c
  4741  001ABE  0E00               	movlw	0
  4742  001AC0  6E3B               	movwf	?___fttol+3,c
  4743  001AC2  0012               	return	
  4744  001AC4                     l2994:
  4745  001AC4  90D8               	bcf	status,0,c
  4746  001AC6  3245               	rrcf	___fttol@lval+3,f,c
  4747  001AC8  3244               	rrcf	___fttol@lval+2,f,c
  4748  001ACA  3243               	rrcf	___fttol@lval+1,f,c
  4749  001ACC  3242               	rrcf	___fttol@lval,f,c
  4750  001ACE  3E46               	incfsz	___fttol@exp1,f,c
  4751  001AD0  D7F9               	goto	l2994
  4752  001AD2  D015               	goto	l3008
  4753  001AD4                     l2998:
  4754  001AD4  0E17               	movlw	23
  4755  001AD6  6446               	cpfsgt	___fttol@exp1,c
  4756  001AD8  D00F               	goto	l3006
  4757  001ADA  0E00               	movlw	0
  4758  001ADC  6E38               	movwf	?___fttol,c
  4759  001ADE  0E00               	movlw	0
  4760  001AE0  6E39               	movwf	?___fttol+1,c
  4761  001AE2  0E00               	movlw	0
  4762  001AE4  6E3A               	movwf	?___fttol+2,c
  4763  001AE6  0E00               	movlw	0
  4764  001AE8  6E3B               	movwf	?___fttol+3,c
  4765  001AEA  0012               	return	
  4766  001AEC                     l3004:
  4767  001AEC  90D8               	bcf	status,0,c
  4768  001AEE  3642               	rlcf	___fttol@lval,f,c
  4769  001AF0  3643               	rlcf	___fttol@lval+1,f,c
  4770  001AF2  3644               	rlcf	___fttol@lval+2,f,c
  4771  001AF4  3645               	rlcf	___fttol@lval+3,f,c
  4772  001AF6  0646               	decf	___fttol@exp1,f,c
  4773  001AF8                     l3006:
  4774  001AF8  5046               	movf	___fttol@exp1,w,c
  4775  001AFA  A4D8               	btfss	status,2,c
  4776  001AFC  D7F7               	goto	l3004
  4777  001AFE                     l3008:
  4778  001AFE  5041               	movf	___fttol@sign1,w,c
  4779  001B00  B4D8               	btfsc	status,2,c
  4780  001B02  D008               	goto	l3012
  4781  001B04  1E45               	comf	___fttol@lval+3,f,c
  4782  001B06  1E44               	comf	___fttol@lval+2,f,c
  4783  001B08  1E43               	comf	___fttol@lval+1,f,c
  4784  001B0A  6C42               	negf	___fttol@lval,c
  4785  001B0C  0E00               	movlw	0
  4786  001B0E  2243               	addwfc	___fttol@lval+1,f,c
  4787  001B10  2244               	addwfc	___fttol@lval+2,f,c
  4788  001B12  2245               	addwfc	___fttol@lval+3,f,c
  4789  001B14                     l3012:
  4790  001B14  C042  F038         	movff	___fttol@lval,?___fttol
  4791  001B18  C043  F039         	movff	___fttol@lval+1,?___fttol+1
  4792  001B1C  C044  F03A         	movff	___fttol@lval+2,?___fttol+2
  4793  001B20  C045  F03B         	movff	___fttol@lval+3,?___fttol+3
  4794  001B24  0012               	return	
  4795  001B26                     __end_of___fttol:
  4796                           	opt stack 0
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           intcon	equ	0xFF2
  4804                           intcon2	equ	0xFF1
  4805                           intcon3	equ	0xFF0
  4806                           postinc0	equ	0xFEE
  4807                           wreg	equ	0xFE8
  4808                           postdec1	equ	0xFE5
  4809                           fsr1l	equ	0xFE1
  4810                           indf2	equ	0xFDF
  4811                           postinc2	equ	0xFDE
  4812                           postdec2	equ	0xFDD
  4813                           fsr2h	equ	0xFDA
  4814                           fsr2l	equ	0xFD9
  4815                           status	equ	0xFD8
  4816                           
  4817 ;; *************** function ___ftge *****************
  4818 ;; Defined at:
  4819 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;  ff1             3   16[COMRAM] float 
  4822 ;;  ff2             3   19[COMRAM] float 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;		None
  4825 ;; Return value:  Size  Location     Type
  4826 ;;		None               void
  4827 ;; Registers used:
  4828 ;;		wreg, status,2, status,0
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4834 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4836 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4837 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;Total ram usage:        9 bytes
  4839 ;; Hardware stack levels used:    1
  4840 ;; Hardware stack levels required when called:    1
  4841 ;; This function calls:
  4842 ;;		Nothing
  4843 ;; This function is called by:
  4844 ;;		_pow
  4845 ;;		_exp
  4846 ;;		_floor
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           	psect	text15
  4851  0021A0                     __ptext15:
  4852                           	opt stack 0
  4853  0021A0                     ___ftge:
  4854                           	opt stack 23
  4855                           
  4856                           ;incstack = 0
  4857  0021A0  AE13               	btfss	___ftge@ff1+2,7,c
  4858  0021A2  D016               	goto	l2956
  4859  0021A4  C011  F017         	movff	___ftge@ff1,??___ftge
  4860  0021A8  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
  4861  0021AC  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
  4862  0021B0  1E17               	comf	??___ftge,f,c
  4863  0021B2  1E18               	comf	??___ftge+1,f,c
  4864  0021B4  1E19               	comf	??___ftge+2,f,c
  4865  0021B6  2A17               	incf	??___ftge,f,c
  4866  0021B8  0E00               	movlw	0
  4867  0021BA  2218               	addwfc	??___ftge+1,f,c
  4868  0021BC  2219               	addwfc	??___ftge+2,f,c
  4869  0021BE  0E00               	movlw	0
  4870  0021C0  2417               	addwf	??___ftge,w,c
  4871  0021C2  6E11               	movwf	___ftge@ff1,c
  4872  0021C4  0E00               	movlw	0
  4873  0021C6  2018               	addwfc	??___ftge+1,w,c
  4874  0021C8  6E12               	movwf	___ftge@ff1+1,c
  4875  0021CA  0E80               	movlw	128
  4876  0021CC  2019               	addwfc	??___ftge+2,w,c
  4877  0021CE  6E13               	movwf	___ftge@ff1+2,c
  4878  0021D0                     l2956:
  4879  0021D0  AE16               	btfss	___ftge@ff2+2,7,c
  4880  0021D2  D016               	goto	l2960
  4881  0021D4  C014  F017         	movff	___ftge@ff2,??___ftge
  4882  0021D8  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
  4883  0021DC  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
  4884  0021E0  1E17               	comf	??___ftge,f,c
  4885  0021E2  1E18               	comf	??___ftge+1,f,c
  4886  0021E4  1E19               	comf	??___ftge+2,f,c
  4887  0021E6  2A17               	incf	??___ftge,f,c
  4888  0021E8  0E00               	movlw	0
  4889  0021EA  2218               	addwfc	??___ftge+1,f,c
  4890  0021EC  2219               	addwfc	??___ftge+2,f,c
  4891  0021EE  0E00               	movlw	0
  4892  0021F0  2417               	addwf	??___ftge,w,c
  4893  0021F2  6E14               	movwf	___ftge@ff2,c
  4894  0021F4  0E00               	movlw	0
  4895  0021F6  2018               	addwfc	??___ftge+1,w,c
  4896  0021F8  6E15               	movwf	___ftge@ff2+1,c
  4897  0021FA  0E80               	movlw	128
  4898  0021FC  2019               	addwfc	??___ftge+2,w,c
  4899  0021FE  6E16               	movwf	___ftge@ff2+2,c
  4900  002200                     l2960:
  4901  002200  0E00               	movlw	0
  4902  002202  1A11               	xorwf	___ftge@ff1,f,c
  4903  002204  0E00               	movlw	0
  4904  002206  1A12               	xorwf	___ftge@ff1+1,f,c
  4905  002208  0E80               	movlw	128
  4906  00220A  1A13               	xorwf	___ftge@ff1+2,f,c
  4907  00220C  0E00               	movlw	0
  4908  00220E  1A14               	xorwf	___ftge@ff2,f,c
  4909  002210  0E00               	movlw	0
  4910  002212  1A15               	xorwf	___ftge@ff2+1,f,c
  4911  002214  0E80               	movlw	128
  4912  002216  1A16               	xorwf	___ftge@ff2+2,f,c
  4913  002218  5014               	movf	___ftge@ff2,w,c
  4914  00221A  5C11               	subwf	___ftge@ff1,w,c
  4915  00221C  5015               	movf	___ftge@ff2+1,w,c
  4916  00221E  5812               	subwfb	___ftge@ff1+1,w,c
  4917  002220  5016               	movf	___ftge@ff2+2,w,c
  4918  002222  5813               	subwfb	___ftge@ff1+2,w,c
  4919  002224  B0D8               	btfsc	status,0,c
  4920  002226  D002               	goto	l2966
  4921  002228  90D8               	bcf	status,0,c
  4922  00222A  0012               	return	
  4923  00222C                     l2966:
  4924  00222C  80D8               	bsf	status,0,c
  4925  00222E  0012               	return	
  4926  002230                     __end_of___ftge:
  4927                           	opt stack 0
  4928                           tblptru	equ	0xFF8
  4929                           tblptrh	equ	0xFF7
  4930                           tblptrl	equ	0xFF6
  4931                           tablat	equ	0xFF5
  4932                           prodh	equ	0xFF4
  4933                           prodl	equ	0xFF3
  4934                           intcon	equ	0xFF2
  4935                           intcon2	equ	0xFF1
  4936                           intcon3	equ	0xFF0
  4937                           postinc0	equ	0xFEE
  4938                           wreg	equ	0xFE8
  4939                           postdec1	equ	0xFE5
  4940                           fsr1l	equ	0xFE1
  4941                           indf2	equ	0xFDF
  4942                           postinc2	equ	0xFDE
  4943                           postdec2	equ	0xFDD
  4944                           fsr2h	equ	0xFDA
  4945                           fsr2l	equ	0xFD9
  4946                           status	equ	0xFD8
  4947                           
  4948 ;; *************** function ___altoft *****************
  4949 ;; Defined at:
  4950 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;  c               4   70[COMRAM] long 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;  sign            1   79[COMRAM] unsigned char 
  4955 ;;  exp             1   78[COMRAM] unsigned char 
  4956 ;; Return value:  Size  Location     Type
  4957 ;;                  3   70[COMRAM] float 
  4958 ;; Registers used:
  4959 ;;		wreg, status,2, status,0, cstack
  4960 ;; Tracked objects:
  4961 ;;		On entry : 0/0
  4962 ;;		On exit  : 0/0
  4963 ;;		Unchanged: 0/0
  4964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4965 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4966 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4967 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4968 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4969 ;;Total ram usage:       10 bytes
  4970 ;; Hardware stack levels used:    1
  4971 ;; Hardware stack levels required when called:    2
  4972 ;; This function calls:
  4973 ;;		___ftpack
  4974 ;; This function is called by:
  4975 ;;		_floor
  4976 ;;		_hex_to_dec
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           	psect	text16
  4981  00243E                     __ptext16:
  4982                           	opt stack 0
  4983  00243E                     ___altoft:
  4984                           	opt stack 22
  4985                           
  4986                           ;incstack = 0
  4987  00243E  0E00               	movlw	0
  4988  002440  6E50               	movwf	___altoft@sign,c
  4989  002442  0E8E               	movlw	142
  4990  002444  6E4F               	movwf	___altoft@exp,c
  4991  002446  AE4A               	btfss	___altoft@c+3,7,c
  4992  002448  D011               	goto	l2828
  4993  00244A  1E4A               	comf	___altoft@c+3,f,c
  4994  00244C  1E49               	comf	___altoft@c+2,f,c
  4995  00244E  1E48               	comf	___altoft@c+1,f,c
  4996  002450  6C47               	negf	___altoft@c,c
  4997  002452  0E00               	movlw	0
  4998  002454  2248               	addwfc	___altoft@c+1,f,c
  4999  002456  2249               	addwfc	___altoft@c+2,f,c
  5000  002458  224A               	addwfc	___altoft@c+3,f,c
  5001  00245A  0E01               	movlw	1
  5002  00245C  6E50               	movwf	___altoft@sign,c
  5003  00245E  D006               	goto	l2828
  5004  002460                     l2826:
  5005  002460  90D8               	bcf	status,0,c
  5006  002462  324A               	rrcf	___altoft@c+3,f,c
  5007  002464  3249               	rrcf	___altoft@c+2,f,c
  5008  002466  3248               	rrcf	___altoft@c+1,f,c
  5009  002468  3247               	rrcf	___altoft@c,f,c
  5010  00246A  2A4F               	incf	___altoft@exp,f,c
  5011  00246C                     l2828:
  5012  00246C  0E00               	movlw	0
  5013  00246E  1447               	andwf	___altoft@c,w,c
  5014  002470  6E4B               	movwf	??___altoft& (0+255),c
  5015  002472  0E00               	movlw	0
  5016  002474  1448               	andwf	___altoft@c+1,w,c
  5017  002476  6E4C               	movwf	(??___altoft+1)& (0+255),c
  5018  002478  0E00               	movlw	0
  5019  00247A  1449               	andwf	___altoft@c+2,w,c
  5020  00247C  6E4D               	movwf	(??___altoft+2)& (0+255),c
  5021  00247E  0EFF               	movlw	255
  5022  002480  144A               	andwf	___altoft@c+3,w,c
  5023  002482  6E4E               	movwf	(??___altoft+3)& (0+255),c
  5024  002484  504B               	movf	??___altoft,w,c
  5025  002486  104C               	iorwf	??___altoft+1,w,c
  5026  002488  104D               	iorwf	??___altoft+2,w,c
  5027  00248A  104E               	iorwf	??___altoft+3,w,c
  5028  00248C  A4D8               	btfss	status,2,c
  5029  00248E  D7E8               	goto	l2826
  5030  002490  C047  F011         	movff	___altoft@c,___ftpack@arg
  5031  002494  C048  F012         	movff	___altoft@c+1,___ftpack@arg+1
  5032  002498  C049  F013         	movff	___altoft@c+2,___ftpack@arg+2
  5033  00249C  C04F  F014         	movff	___altoft@exp,___ftpack@exp
  5034  0024A0  C050  F015         	movff	___altoft@sign,___ftpack@sign
  5035  0024A4  EC31  F010         	call	___ftpack	;wreg free
  5036  0024A8  C011  F047         	movff	?___ftpack,?___altoft
  5037  0024AC  C012  F048         	movff	?___ftpack+1,?___altoft+1
  5038  0024B0  C013  F049         	movff	?___ftpack+2,?___altoft+2
  5039  0024B4  0012               	return	
  5040  0024B6                     __end_of___altoft:
  5041                           	opt stack 0
  5042                           tblptru	equ	0xFF8
  5043                           tblptrh	equ	0xFF7
  5044                           tblptrl	equ	0xFF6
  5045                           tablat	equ	0xFF5
  5046                           prodh	equ	0xFF4
  5047                           prodl	equ	0xFF3
  5048                           intcon	equ	0xFF2
  5049                           intcon2	equ	0xFF1
  5050                           intcon3	equ	0xFF0
  5051                           postinc0	equ	0xFEE
  5052                           wreg	equ	0xFE8
  5053                           postdec1	equ	0xFE5
  5054                           fsr1l	equ	0xFE1
  5055                           indf2	equ	0xFDF
  5056                           postinc2	equ	0xFDE
  5057                           postdec2	equ	0xFDD
  5058                           fsr2h	equ	0xFDA
  5059                           fsr2l	equ	0xFD9
  5060                           status	equ	0xFD8
  5061                           
  5062 ;; *************** function _eval_poly *****************
  5063 ;; Defined at:
  5064 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  x               3   55[COMRAM] float 
  5067 ;;  d               2   58[COMRAM] PTR const 
  5068 ;;		 -> log@coeff(27), exp@coeff(30), 
  5069 ;;  n               2   60[COMRAM] int 
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;  res             3   64[COMRAM] int 
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  3   55[COMRAM] int 
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5081 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5082 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5083 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5084 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5085 ;;Total ram usage:       12 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    3
  5088 ;; This function calls:
  5089 ;;		___ftadd
  5090 ;;		___ftmul
  5091 ;;		___wmul
  5092 ;; This function is called by:
  5093 ;;		_exp
  5094 ;;		_log
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           	psect	text17
  5099  001ECE                     __ptext17:
  5100                           	opt stack 0
  5101  001ECE                     _eval_poly:
  5102                           	opt stack 22
  5103                           
  5104                           ;incstack = 0
  5105  001ECE  C03D  F011         	movff	eval_poly@n,___wmul@multiplier
  5106  001ED2  C03E  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  5107  001ED6  0E00               	movlw	0
  5108  001ED8  6E14               	movwf	___wmul@multiplicand+1,c
  5109  001EDA  0E03               	movlw	3
  5110  001EDC  6E13               	movwf	___wmul@multiplicand,c
  5111  001EDE  EC66  F014         	call	___wmul	;wreg free
  5112  001EE2  C03B  F03F         	movff	eval_poly@d,??_eval_poly
  5113  001EE6  C03C  F040         	movff	eval_poly@d+1,??_eval_poly+1
  5114  001EEA  5011               	movf	?___wmul,w,c
  5115  001EEC  263F               	addwf	??_eval_poly,f,c
  5116  001EEE  5012               	movf	?___wmul+1,w,c
  5117  001EF0  2240               	addwfc	??_eval_poly+1,f,c
  5118  001EF2  C03F  FFF6         	movff	??_eval_poly,tblptrl
  5119  001EF6  C040  FFF7         	movff	??_eval_poly+1,tblptrh
  5120  001EFA                     	if	0	;tblptru may be non-zero
  5121  001EFA                     	endif
  5122  001EFA                     	if	0	;tblptru may be non-zero
  5123  001EFA                     	endif
  5124  001EFA  0009               	tblrd		*+
  5125  001EFC  CFF5 F041          	movff	tablat,eval_poly@res
  5126  001F00  0009               	tblrd		*+
  5127  001F02  CFF5 F042          	movff	tablat,eval_poly@res+1
  5128  001F06  000A               	tblrd		*-
  5129  001F08  CFF5 F043          	movff	tablat,eval_poly@res+2
  5130  001F0C  D03E               	goto	l3134
  5131  001F0E                     l3132:
  5132  001F0E  C041  F020         	movff	eval_poly@res,___ftmul@f2
  5133  001F12  C042  F021         	movff	eval_poly@res+1,___ftmul@f2+1
  5134  001F16  C043  F022         	movff	eval_poly@res+2,___ftmul@f2+2
  5135  001F1A  C038  F01D         	movff	eval_poly@x,___ftmul@f1
  5136  001F1E  C039  F01E         	movff	eval_poly@x+1,___ftmul@f1+1
  5137  001F22  C03A  F01F         	movff	eval_poly@x+2,___ftmul@f1+2
  5138  001F26  EC93  F00D         	call	___ftmul	;wreg free
  5139  001F2A  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  5140  001F2E  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  5141  001F32  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  5142  001F36  0E00               	movlw	0
  5143  001F38  6E14               	movwf	___wmul@multiplicand+1,c
  5144  001F3A  0E03               	movlw	3
  5145  001F3C  6E13               	movwf	___wmul@multiplicand,c
  5146  001F3E  063D               	decf	eval_poly@n,f,c
  5147  001F40  A0D8               	btfss	status,0,c
  5148  001F42  063E               	decf	eval_poly@n+1,f,c
  5149  001F44  C03D  F011         	movff	eval_poly@n,___wmul@multiplier
  5150  001F48  C03E  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  5151  001F4C  EC66  F014         	call	___wmul	;wreg free
  5152  001F50  C03B  F03F         	movff	eval_poly@d,??_eval_poly
  5153  001F54  C03C  F040         	movff	eval_poly@d+1,??_eval_poly+1
  5154  001F58  5011               	movf	?___wmul,w,c
  5155  001F5A  263F               	addwf	??_eval_poly,f,c
  5156  001F5C  5012               	movf	?___wmul+1,w,c
  5157  001F5E  2240               	addwfc	??_eval_poly+1,f,c
  5158  001F60  C03F  FFF6         	movff	??_eval_poly,tblptrl
  5159  001F64  C040  FFF7         	movff	??_eval_poly+1,tblptrh
  5160  001F68                     	if	0	;tblptru may be non-zero
  5161  001F68                     	endif
  5162  001F68                     	if	0	;tblptru may be non-zero
  5163  001F68                     	endif
  5164  001F68  0009               	tblrd		*+
  5165  001F6A  CFF5 F02F          	movff	tablat,___ftadd@f2
  5166  001F6E  0009               	tblrd		*+
  5167  001F70  CFF5 F030          	movff	tablat,___ftadd@f2+1
  5168  001F74  000A               	tblrd		*-
  5169  001F76  CFF5 F031          	movff	tablat,___ftadd@f2+2
  5170  001F7A  ECC5  F006         	call	___ftadd	;wreg free
  5171  001F7E  C02C  F041         	movff	?___ftadd,eval_poly@res
  5172  001F82  C02D  F042         	movff	?___ftadd+1,eval_poly@res+1
  5173  001F86  C02E  F043         	movff	?___ftadd+2,eval_poly@res+2
  5174  001F8A                     l3134:
  5175  001F8A  503D               	movf	eval_poly@n,w,c
  5176  001F8C  103E               	iorwf	eval_poly@n+1,w,c
  5177  001F8E  A4D8               	btfss	status,2,c
  5178  001F90  D7BE               	goto	l3132
  5179  001F92  C041  F038         	movff	eval_poly@res,?_eval_poly
  5180  001F96  C042  F039         	movff	eval_poly@res+1,?_eval_poly+1
  5181  001F9A  C043  F03A         	movff	eval_poly@res+2,?_eval_poly+2
  5182  001F9E  0012               	return		;funcret
  5183  001FA0                     __end_of_eval_poly:
  5184                           	opt stack 0
  5185                           tblptru	equ	0xFF8
  5186                           tblptrh	equ	0xFF7
  5187                           tblptrl	equ	0xFF6
  5188                           tablat	equ	0xFF5
  5189                           prodh	equ	0xFF4
  5190                           prodl	equ	0xFF3
  5191                           intcon	equ	0xFF2
  5192                           intcon2	equ	0xFF1
  5193                           intcon3	equ	0xFF0
  5194                           postinc0	equ	0xFEE
  5195                           wreg	equ	0xFE8
  5196                           postdec1	equ	0xFE5
  5197                           fsr1l	equ	0xFE1
  5198                           indf2	equ	0xFDF
  5199                           postinc2	equ	0xFDE
  5200                           postdec2	equ	0xFDD
  5201                           fsr2h	equ	0xFDA
  5202                           fsr2l	equ	0xFD9
  5203                           status	equ	0xFD8
  5204                           
  5205 ;; *************** function ___ftmul *****************
  5206 ;; Defined at:
  5207 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;  f1              3   28[COMRAM] float 
  5210 ;;  f2              3   31[COMRAM] float 
  5211 ;; Auto vars:     Size  Location     Type
  5212 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  5213 ;;  sign            1   42[COMRAM] unsigned char 
  5214 ;;  cntr            1   41[COMRAM] unsigned char 
  5215 ;;  exp             1   37[COMRAM] unsigned char 
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  3   28[COMRAM] float 
  5218 ;; Registers used:
  5219 ;;		wreg, status,2, status,0, cstack
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5225 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5226 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;Total ram usage:       15 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    2
  5232 ;; This function calls:
  5233 ;;		___ftpack
  5234 ;; This function is called by:
  5235 ;;		_dec_to_hex
  5236 ;;		_init_operation
  5237 ;;		_pow
  5238 ;;		_exp
  5239 ;;		_log
  5240 ;;		_eval_poly
  5241 ;;		_hex_to_dec
  5242 ;; This function uses a non-reentrant model
  5243 ;;
  5244                           
  5245                           	psect	text18
  5246  001B26                     __ptext18:
  5247                           	opt stack 0
  5248  001B26                     ___ftmul:
  5249                           	opt stack 22
  5250                           
  5251                           ;incstack = 0
  5252  001B26  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  5253  001B2A  6A24               	clrf	(??___ftmul+1)& (0+255),c
  5254  001B2C  6A25               	clrf	(??___ftmul+2)& (0+255),c
  5255  001B2E  341E               	rlcf	___ftmul@f1+1,w,c
  5256  001B30  3623               	rlcf	??___ftmul& (0+255),f,c
  5257  001B32  E301               	bnc	u2091
  5258  001B34  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  5259  001B36                     u2091:
  5260  001B36  5023               	movf	??___ftmul,w,c
  5261  001B38  6E26               	movwf	___ftmul@exp,c
  5262  001B3A  5026               	movf	___ftmul@exp,w,c
  5263  001B3C  A4D8               	btfss	status,2,c
  5264  001B3E  D007               	goto	l2910
  5265  001B40  0E00               	movlw	0
  5266  001B42  6E1D               	movwf	?___ftmul,c
  5267  001B44  0E00               	movlw	0
  5268  001B46  6E1E               	movwf	?___ftmul+1,c
  5269  001B48  0E00               	movlw	0
  5270  001B4A  6E1F               	movwf	?___ftmul+2,c
  5271  001B4C  0012               	return	
  5272  001B4E                     l2910:
  5273  001B4E  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  5274  001B52  6A24               	clrf	(??___ftmul+1)& (0+255),c
  5275  001B54  6A25               	clrf	(??___ftmul+2)& (0+255),c
  5276  001B56  3421               	rlcf	___ftmul@f2+1,w,c
  5277  001B58  3623               	rlcf	??___ftmul& (0+255),f,c
  5278  001B5A  E301               	bnc	u2111
  5279  001B5C  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  5280  001B5E                     u2111:
  5281  001B5E  5023               	movf	??___ftmul,w,c
  5282  001B60  6E2B               	movwf	___ftmul@sign,c
  5283  001B62  502B               	movf	___ftmul@sign,w,c
  5284  001B64  A4D8               	btfss	status,2,c
  5285  001B66  D007               	goto	l2916
  5286  001B68  0E00               	movlw	0
  5287  001B6A  6E1D               	movwf	?___ftmul,c
  5288  001B6C  0E00               	movlw	0
  5289  001B6E  6E1E               	movwf	?___ftmul+1,c
  5290  001B70  0E00               	movlw	0
  5291  001B72  6E1F               	movwf	?___ftmul+2,c
  5292  001B74  0012               	return	
  5293  001B76                     l2916:
  5294  001B76  502B               	movf	___ftmul@sign,w,c
  5295  001B78  0F7B               	addlw	123
  5296  001B7A  2626               	addwf	___ftmul@exp,f,c
  5297  001B7C  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  5298  001B80  5022               	movf	___ftmul@f2+2,w,c
  5299  001B82  1A2B               	xorwf	___ftmul@sign,f,c
  5300  001B84  0E80               	movlw	128
  5301  001B86  162B               	andwf	___ftmul@sign,f,c
  5302  001B88  8E1E               	bsf	___ftmul@f1+1,7,c
  5303  001B8A  8E21               	bsf	___ftmul@f2+1,7,c
  5304  001B8C  0EFF               	movlw	255
  5305  001B8E  1620               	andwf	___ftmul@f2,f,c
  5306  001B90  0EFF               	movlw	255
  5307  001B92  1621               	andwf	___ftmul@f2+1,f,c
  5308  001B94  0E00               	movlw	0
  5309  001B96  1622               	andwf	___ftmul@f2+2,f,c
  5310  001B98  0E00               	movlw	0
  5311  001B9A  6E27               	movwf	___ftmul@f3_as_product,c
  5312  001B9C  0E00               	movlw	0
  5313  001B9E  6E28               	movwf	___ftmul@f3_as_product+1,c
  5314  001BA0  0E00               	movlw	0
  5315  001BA2  6E29               	movwf	___ftmul@f3_as_product+2,c
  5316  001BA4  0E07               	movlw	7
  5317  001BA6  6E2A               	movwf	___ftmul@cntr,c
  5318  001BA8                     l2930:
  5319  001BA8  A01D               	btfss	___ftmul@f1,0,c
  5320  001BAA  D006               	goto	l2934
  5321  001BAC  5020               	movf	___ftmul@f2,w,c
  5322  001BAE  2627               	addwf	___ftmul@f3_as_product,f,c
  5323  001BB0  5021               	movf	___ftmul@f2+1,w,c
  5324  001BB2  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  5325  001BB4  5022               	movf	___ftmul@f2+2,w,c
  5326  001BB6  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  5327  001BB8                     l2934:
  5328  001BB8  90D8               	bcf	status,0,c
  5329  001BBA  321F               	rrcf	___ftmul@f1+2,f,c
  5330  001BBC  321E               	rrcf	___ftmul@f1+1,f,c
  5331  001BBE  321D               	rrcf	___ftmul@f1,f,c
  5332  001BC0  90D8               	bcf	status,0,c
  5333  001BC2  3620               	rlcf	___ftmul@f2,f,c
  5334  001BC4  3621               	rlcf	___ftmul@f2+1,f,c
  5335  001BC6  3622               	rlcf	___ftmul@f2+2,f,c
  5336  001BC8  2E2A               	decfsz	___ftmul@cntr,f,c
  5337  001BCA  D7EE               	goto	l2930
  5338  001BCC  0E09               	movlw	9
  5339  001BCE  6E2A               	movwf	___ftmul@cntr,c
  5340  001BD0                     l2940:
  5341  001BD0  A01D               	btfss	___ftmul@f1,0,c
  5342  001BD2  D006               	goto	l2944
  5343  001BD4  5020               	movf	___ftmul@f2,w,c
  5344  001BD6  2627               	addwf	___ftmul@f3_as_product,f,c
  5345  001BD8  5021               	movf	___ftmul@f2+1,w,c
  5346  001BDA  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  5347  001BDC  5022               	movf	___ftmul@f2+2,w,c
  5348  001BDE  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  5349  001BE0                     l2944:
  5350  001BE0  90D8               	bcf	status,0,c
  5351  001BE2  321F               	rrcf	___ftmul@f1+2,f,c
  5352  001BE4  321E               	rrcf	___ftmul@f1+1,f,c
  5353  001BE6  321D               	rrcf	___ftmul@f1,f,c
  5354  001BE8  90D8               	bcf	status,0,c
  5355  001BEA  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  5356  001BEC  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  5357  001BEE  3227               	rrcf	___ftmul@f3_as_product,f,c
  5358  001BF0  2E2A               	decfsz	___ftmul@cntr,f,c
  5359  001BF2  D7EE               	goto	l2940
  5360  001BF4  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  5361  001BF8  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5362  001BFC  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5363  001C00  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  5364  001C04  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  5365  001C08  EC31  F010         	call	___ftpack	;wreg free
  5366  001C0C  C011  F01D         	movff	?___ftpack,?___ftmul
  5367  001C10  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  5368  001C14  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  5369  001C18  0012               	return	
  5370  001C1A                     __end_of___ftmul:
  5371                           	opt stack 0
  5372                           tblptru	equ	0xFF8
  5373                           tblptrh	equ	0xFF7
  5374                           tblptrl	equ	0xFF6
  5375                           tablat	equ	0xFF5
  5376                           prodh	equ	0xFF4
  5377                           prodl	equ	0xFF3
  5378                           intcon	equ	0xFF2
  5379                           intcon2	equ	0xFF1
  5380                           intcon3	equ	0xFF0
  5381                           postinc0	equ	0xFEE
  5382                           wreg	equ	0xFE8
  5383                           postdec1	equ	0xFE5
  5384                           fsr1l	equ	0xFE1
  5385                           indf2	equ	0xFDF
  5386                           postinc2	equ	0xFDE
  5387                           postdec2	equ	0xFDD
  5388                           fsr2h	equ	0xFDA
  5389                           fsr2l	equ	0xFD9
  5390                           status	equ	0xFD8
  5391                           
  5392 ;; *************** function ___ftsub *****************
  5393 ;; Defined at:
  5394 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;  f1              3   55[COMRAM] float 
  5397 ;;  f2              3   58[COMRAM] float 
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;		None
  5400 ;; Return value:  Size  Location     Type
  5401 ;;                  3   55[COMRAM] float 
  5402 ;; Registers used:
  5403 ;;		wreg, status,2, status,0, cstack
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5409 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;Total ram usage:        6 bytes
  5414 ;; Hardware stack levels used:    1
  5415 ;; Hardware stack levels required when called:    3
  5416 ;; This function calls:
  5417 ;;		___ftadd
  5418 ;; This function is called by:
  5419 ;;		_exp
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text19
  5424  0027F4                     __ptext19:
  5425                           	opt stack 0
  5426  0027F4                     ___ftsub:
  5427                           	opt stack 22
  5428                           
  5429                           ;incstack = 0
  5430  0027F4  503B               	movf	___ftsub@f2,w,c
  5431  0027F6  103C               	iorwf	___ftsub@f2+1,w,c
  5432  0027F8  103D               	iorwf	___ftsub@f2+2,w,c
  5433  0027FA  B4D8               	btfsc	status,2,c
  5434  0027FC  D006               	goto	l3086
  5435  0027FE  0E00               	movlw	0
  5436  002800  1A3B               	xorwf	___ftsub@f2,f,c
  5437  002802  0E00               	movlw	0
  5438  002804  1A3C               	xorwf	___ftsub@f2+1,f,c
  5439  002806  0E80               	movlw	128
  5440  002808  1A3D               	xorwf	___ftsub@f2+2,f,c
  5441  00280A                     l3086:
  5442  00280A  C038  F02C         	movff	___ftsub@f1,___ftadd@f1
  5443  00280E  C039  F02D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5444  002812  C03A  F02E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5445  002816  C03B  F02F         	movff	___ftsub@f2,___ftadd@f2
  5446  00281A  C03C  F030         	movff	___ftsub@f2+1,___ftadd@f2+1
  5447  00281E  C03D  F031         	movff	___ftsub@f2+2,___ftadd@f2+2
  5448  002822  ECC5  F006         	call	___ftadd	;wreg free
  5449  002826  C02C  F038         	movff	?___ftadd,?___ftsub
  5450  00282A  C02D  F039         	movff	?___ftadd+1,?___ftsub+1
  5451  00282E  C02E  F03A         	movff	?___ftadd+2,?___ftsub+2
  5452  002832  0012               	return	
  5453  002834                     __end_of___ftsub:
  5454                           	opt stack 0
  5455                           tblptru	equ	0xFF8
  5456                           tblptrh	equ	0xFF7
  5457                           tblptrl	equ	0xFF6
  5458                           tablat	equ	0xFF5
  5459                           prodh	equ	0xFF4
  5460                           prodl	equ	0xFF3
  5461                           intcon	equ	0xFF2
  5462                           intcon2	equ	0xFF1
  5463                           intcon3	equ	0xFF0
  5464                           postinc0	equ	0xFEE
  5465                           wreg	equ	0xFE8
  5466                           postdec1	equ	0xFE5
  5467                           fsr1l	equ	0xFE1
  5468                           indf2	equ	0xFDF
  5469                           postinc2	equ	0xFDE
  5470                           postdec2	equ	0xFDD
  5471                           fsr2h	equ	0xFDA
  5472                           fsr2l	equ	0xFD9
  5473                           status	equ	0xFD8
  5474                           
  5475 ;; *************** function ___ftadd *****************
  5476 ;; Defined at:
  5477 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  f1              3   43[COMRAM] float 
  5480 ;;  f2              3   46[COMRAM] float 
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;  exp1            1   54[COMRAM] unsigned char 
  5483 ;;  exp2            1   53[COMRAM] unsigned char 
  5484 ;;  sign            1   52[COMRAM] unsigned char 
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  3   43[COMRAM] float 
  5487 ;; Registers used:
  5488 ;;		wreg, status,2, status,0, cstack
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5494 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5496 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5497 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;Total ram usage:       12 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    2
  5501 ;; This function calls:
  5502 ;;		___ftpack
  5503 ;; This function is called by:
  5504 ;;		_dec_to_hex
  5505 ;;		_init_operation
  5506 ;;		___ftsub
  5507 ;;		_floor
  5508 ;;		_log
  5509 ;;		_eval_poly
  5510 ;;		_hex_to_dec
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           	psect	text20
  5515  000D8A                     __ptext20:
  5516                           	opt stack 0
  5517  000D8A                     ___ftadd:
  5518                           	opt stack 22
  5519                           
  5520                           ;incstack = 0
  5521  000D8A  C02E  F032         	movff	___ftadd@f1+2,??___ftadd
  5522  000D8E  6A33               	clrf	(??___ftadd+1)& (0+255),c
  5523  000D90  6A34               	clrf	(??___ftadd+2)& (0+255),c
  5524  000D92  342D               	rlcf	___ftadd@f1+1,w,c
  5525  000D94  3632               	rlcf	??___ftadd& (0+255),f,c
  5526  000D96  E301               	bnc	u1881
  5527  000D98  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  5528  000D9A                     u1881:
  5529  000D9A  5032               	movf	??___ftadd,w,c
  5530  000D9C  6E37               	movwf	___ftadd@exp1,c
  5531  000D9E  C031  F032         	movff	___ftadd@f2+2,??___ftadd
  5532  000DA2  6A33               	clrf	(??___ftadd+1)& (0+255),c
  5533  000DA4  6A34               	clrf	(??___ftadd+2)& (0+255),c
  5534  000DA6  3430               	rlcf	___ftadd@f2+1,w,c
  5535  000DA8  3632               	rlcf	??___ftadd& (0+255),f,c
  5536  000DAA  E301               	bnc	u1891
  5537  000DAC  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  5538  000DAE                     u1891:
  5539  000DAE  5032               	movf	??___ftadd,w,c
  5540  000DB0  6E36               	movwf	___ftadd@exp2,c
  5541  000DB2  5037               	movf	___ftadd@exp1,w,c
  5542  000DB4  B4D8               	btfsc	status,2,c
  5543  000DB6  D00B               	goto	l722
  5544  000DB8  5036               	movf	___ftadd@exp2,w,c
  5545  000DBA  5C37               	subwf	___ftadd@exp1,w,c
  5546  000DBC  B0D8               	btfsc	status,0,c
  5547  000DBE  D00E               	goto	l2842
  5548  000DC0  5037               	movf	___ftadd@exp1,w,c
  5549  000DC2  0800               	sublw	0
  5550  000DC4  2436               	addwf	___ftadd@exp2,w,c
  5551  000DC6  6E32               	movwf	??___ftadd& (0+255),c
  5552  000DC8  0E18               	movlw	24
  5553  000DCA  6432               	cpfsgt	??___ftadd,c
  5554  000DCC  D007               	goto	l2842
  5555  000DCE                     l722:
  5556  000DCE  C02F  F02C         	movff	___ftadd@f2,?___ftadd
  5557  000DD2  C030  F02D         	movff	___ftadd@f2+1,?___ftadd+1
  5558  000DD6  C031  F02E         	movff	___ftadd@f2+2,?___ftadd+2
  5559  000DDA  0012               	return	
  5560  000DDC                     l2842:
  5561  000DDC  5036               	movf	___ftadd@exp2,w,c
  5562  000DDE  B4D8               	btfsc	status,2,c
  5563  000DE0  D00B               	goto	l726
  5564  000DE2  5037               	movf	___ftadd@exp1,w,c
  5565  000DE4  5C36               	subwf	___ftadd@exp2,w,c
  5566  000DE6  B0D8               	btfsc	status,0,c
  5567  000DE8  D00E               	goto	l2848
  5568  000DEA  5036               	movf	___ftadd@exp2,w,c
  5569  000DEC  0800               	sublw	0
  5570  000DEE  2437               	addwf	___ftadd@exp1,w,c
  5571  000DF0  6E32               	movwf	??___ftadd& (0+255),c
  5572  000DF2  0E18               	movlw	24
  5573  000DF4  6432               	cpfsgt	??___ftadd,c
  5574  000DF6  D007               	goto	l2848
  5575  000DF8                     l726:
  5576  000DF8  C02C  F02C         	movff	___ftadd@f1,?___ftadd
  5577  000DFC  C02D  F02D         	movff	___ftadd@f1+1,?___ftadd+1
  5578  000E00  C02E  F02E         	movff	___ftadd@f1+2,?___ftadd+2
  5579  000E04  0012               	return	
  5580  000E06                     l2848:
  5581  000E06  0E06               	movlw	6
  5582  000E08  6E35               	movwf	___ftadd@sign,c
  5583  000E0A  BE2E               	btfsc	___ftadd@f1+2,7,c
  5584  000E0C  8E35               	bsf	___ftadd@sign,7,c
  5585  000E0E  BE31               	btfsc	___ftadd@f2+2,7,c
  5586  000E10  8C35               	bsf	___ftadd@sign,6,c
  5587  000E12  8E2D               	bsf	___ftadd@f1+1,7,c
  5588  000E14  0EFF               	movlw	255
  5589  000E16  162C               	andwf	___ftadd@f1,f,c
  5590  000E18  0EFF               	movlw	255
  5591  000E1A  162D               	andwf	___ftadd@f1+1,f,c
  5592  000E1C  0E00               	movlw	0
  5593  000E1E  162E               	andwf	___ftadd@f1+2,f,c
  5594  000E20  8E30               	bsf	___ftadd@f2+1,7,c
  5595  000E22  0EFF               	movlw	255
  5596  000E24  162F               	andwf	___ftadd@f2,f,c
  5597  000E26  0EFF               	movlw	255
  5598  000E28  1630               	andwf	___ftadd@f2+1,f,c
  5599  000E2A  0E00               	movlw	0
  5600  000E2C  1631               	andwf	___ftadd@f2+2,f,c
  5601  000E2E  5036               	movf	___ftadd@exp2,w,c
  5602  000E30  5C37               	subwf	___ftadd@exp1,w,c
  5603  000E32  B0D8               	btfsc	status,0,c
  5604  000E34  D01B               	goto	l2874
  5605  000E36                     l2864:
  5606  000E36  90D8               	bcf	status,0,c
  5607  000E38  362F               	rlcf	___ftadd@f2,f,c
  5608  000E3A  3630               	rlcf	___ftadd@f2+1,f,c
  5609  000E3C  3631               	rlcf	___ftadd@f2+2,f,c
  5610  000E3E  0636               	decf	___ftadd@exp2,f,c
  5611  000E40  5037               	movf	___ftadd@exp1,w,c
  5612  000E42  1836               	xorwf	___ftadd@exp2,w,c
  5613  000E44  B4D8               	btfsc	status,2,c
  5614  000E46  D00D               	goto	l2872
  5615  000E48  0635               	decf	___ftadd@sign,f,c
  5616  000E4A  C035  F032         	movff	___ftadd@sign,??___ftadd
  5617  000E4E  0E07               	movlw	7
  5618  000E50  1632               	andwf	??___ftadd,f,c
  5619  000E52  B4D8               	btfsc	status,2,c
  5620  000E54  D006               	goto	l2872
  5621  000E56  D7EF               	goto	l2864
  5622  000E58                     l2870:
  5623  000E58  90D8               	bcf	status,0,c
  5624  000E5A  322E               	rrcf	___ftadd@f1+2,f,c
  5625  000E5C  322D               	rrcf	___ftadd@f1+1,f,c
  5626  000E5E  322C               	rrcf	___ftadd@f1,f,c
  5627  000E60  2A37               	incf	___ftadd@exp1,f,c
  5628  000E62                     l2872:
  5629  000E62  5036               	movf	___ftadd@exp2,w,c
  5630  000E64  1837               	xorwf	___ftadd@exp1,w,c
  5631  000E66  B4D8               	btfsc	status,2,c
  5632  000E68  D01F               	goto	l737
  5633  000E6A  D7F6               	goto	l2870
  5634  000E6C                     l2874:
  5635  000E6C  5037               	movf	___ftadd@exp1,w,c
  5636  000E6E  5C36               	subwf	___ftadd@exp2,w,c
  5637  000E70  B0D8               	btfsc	status,0,c
  5638  000E72  D01A               	goto	l737
  5639  000E74                     l2876:
  5640  000E74  90D8               	bcf	status,0,c
  5641  000E76  362C               	rlcf	___ftadd@f1,f,c
  5642  000E78  362D               	rlcf	___ftadd@f1+1,f,c
  5643  000E7A  362E               	rlcf	___ftadd@f1+2,f,c
  5644  000E7C  0637               	decf	___ftadd@exp1,f,c
  5645  000E7E  5037               	movf	___ftadd@exp1,w,c
  5646  000E80  1836               	xorwf	___ftadd@exp2,w,c
  5647  000E82  B4D8               	btfsc	status,2,c
  5648  000E84  D00D               	goto	l2884
  5649  000E86  0635               	decf	___ftadd@sign,f,c
  5650  000E88  C035  F032         	movff	___ftadd@sign,??___ftadd
  5651  000E8C  0E07               	movlw	7
  5652  000E8E  1632               	andwf	??___ftadd,f,c
  5653  000E90  B4D8               	btfsc	status,2,c
  5654  000E92  D006               	goto	l2884
  5655  000E94  D7EF               	goto	l2876
  5656  000E96                     l2882:
  5657  000E96  90D8               	bcf	status,0,c
  5658  000E98  3231               	rrcf	___ftadd@f2+2,f,c
  5659  000E9A  3230               	rrcf	___ftadd@f2+1,f,c
  5660  000E9C  322F               	rrcf	___ftadd@f2,f,c
  5661  000E9E  2A36               	incf	___ftadd@exp2,f,c
  5662  000EA0                     l2884:
  5663  000EA0  5036               	movf	___ftadd@exp2,w,c
  5664  000EA2  1837               	xorwf	___ftadd@exp1,w,c
  5665  000EA4  A4D8               	btfss	status,2,c
  5666  000EA6  D7F7               	goto	l2882
  5667  000EA8                     l737:
  5668  000EA8  AE35               	btfss	___ftadd@sign,7,c
  5669  000EAA  D00C               	goto	l746
  5670  000EAC  0EFF               	movlw	255
  5671  000EAE  1A2C               	xorwf	___ftadd@f1,f,c
  5672  000EB0  0EFF               	movlw	255
  5673  000EB2  1A2D               	xorwf	___ftadd@f1+1,f,c
  5674  000EB4  0EFF               	movlw	255
  5675  000EB6  1A2E               	xorwf	___ftadd@f1+2,f,c
  5676  000EB8  0E01               	movlw	1
  5677  000EBA  262C               	addwf	___ftadd@f1,f,c
  5678  000EBC  0E00               	movlw	0
  5679  000EBE  222D               	addwfc	___ftadd@f1+1,f,c
  5680  000EC0  0E00               	movlw	0
  5681  000EC2  222E               	addwfc	___ftadd@f1+2,f,c
  5682  000EC4                     l746:
  5683  000EC4  AC35               	btfss	___ftadd@sign,6,c
  5684  000EC6  D00C               	goto	l2890
  5685  000EC8  0EFF               	movlw	255
  5686  000ECA  1A2F               	xorwf	___ftadd@f2,f,c
  5687  000ECC  0EFF               	movlw	255
  5688  000ECE  1A30               	xorwf	___ftadd@f2+1,f,c
  5689  000ED0  0EFF               	movlw	255
  5690  000ED2  1A31               	xorwf	___ftadd@f2+2,f,c
  5691  000ED4  0E01               	movlw	1
  5692  000ED6  262F               	addwf	___ftadd@f2,f,c
  5693  000ED8  0E00               	movlw	0
  5694  000EDA  2230               	addwfc	___ftadd@f2+1,f,c
  5695  000EDC  0E00               	movlw	0
  5696  000EDE  2231               	addwfc	___ftadd@f2+2,f,c
  5697  000EE0                     l2890:
  5698  000EE0  0E00               	movlw	0
  5699  000EE2  6E35               	movwf	___ftadd@sign,c
  5700  000EE4  502C               	movf	___ftadd@f1,w,c
  5701  000EE6  262F               	addwf	___ftadd@f2,f,c
  5702  000EE8  502D               	movf	___ftadd@f1+1,w,c
  5703  000EEA  2230               	addwfc	___ftadd@f2+1,f,c
  5704  000EEC  502E               	movf	___ftadd@f1+2,w,c
  5705  000EEE  2231               	addwfc	___ftadd@f2+2,f,c
  5706  000EF0  AE31               	btfss	___ftadd@f2+2,7,c
  5707  000EF2  D00E               	goto	l2900
  5708  000EF4  0EFF               	movlw	255
  5709  000EF6  1A2F               	xorwf	___ftadd@f2,f,c
  5710  000EF8  0EFF               	movlw	255
  5711  000EFA  1A30               	xorwf	___ftadd@f2+1,f,c
  5712  000EFC  0EFF               	movlw	255
  5713  000EFE  1A31               	xorwf	___ftadd@f2+2,f,c
  5714  000F00  0E01               	movlw	1
  5715  000F02  262F               	addwf	___ftadd@f2,f,c
  5716  000F04  0E00               	movlw	0
  5717  000F06  2230               	addwfc	___ftadd@f2+1,f,c
  5718  000F08  0E00               	movlw	0
  5719  000F0A  2231               	addwfc	___ftadd@f2+2,f,c
  5720  000F0C  0E01               	movlw	1
  5721  000F0E  6E35               	movwf	___ftadd@sign,c
  5722  000F10                     l2900:
  5723  000F10  C02F  F011         	movff	___ftadd@f2,___ftpack@arg
  5724  000F14  C030  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
  5725  000F18  C031  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
  5726  000F1C  C037  F014         	movff	___ftadd@exp1,___ftpack@exp
  5727  000F20  C035  F015         	movff	___ftadd@sign,___ftpack@sign
  5728  000F24  EC31  F010         	call	___ftpack	;wreg free
  5729  000F28  C011  F02C         	movff	?___ftpack,?___ftadd
  5730  000F2C  C012  F02D         	movff	?___ftpack+1,?___ftadd+1
  5731  000F30  C013  F02E         	movff	?___ftpack+2,?___ftadd+2
  5732  000F34  0012               	return	
  5733  000F36                     __end_of___ftadd:
  5734                           	opt stack 0
  5735                           tblptru	equ	0xFF8
  5736                           tblptrh	equ	0xFF7
  5737                           tblptrl	equ	0xFF6
  5738                           tablat	equ	0xFF5
  5739                           prodh	equ	0xFF4
  5740                           prodl	equ	0xFF3
  5741                           intcon	equ	0xFF2
  5742                           intcon2	equ	0xFF1
  5743                           intcon3	equ	0xFF0
  5744                           postinc0	equ	0xFEE
  5745                           wreg	equ	0xFE8
  5746                           postdec1	equ	0xFE5
  5747                           fsr1l	equ	0xFE1
  5748                           indf2	equ	0xFDF
  5749                           postinc2	equ	0xFDE
  5750                           postdec2	equ	0xFDD
  5751                           fsr2h	equ	0xFDA
  5752                           fsr2l	equ	0xFD9
  5753                           status	equ	0xFD8
  5754                           
  5755 ;; *************** function ___ftneg *****************
  5756 ;; Defined at:
  5757 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  f1              3   16[COMRAM] float 
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;		None
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  3   16[COMRAM] float 
  5764 ;; Registers used:
  5765 ;;		wreg, status,2, status,0
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5771 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5774 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;Total ram usage:        3 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:    1
  5778 ;; This function calls:
  5779 ;;		Nothing
  5780 ;; This function is called by:
  5781 ;;		_pow
  5782 ;;		_exp
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           	psect	text21
  5787  0028F2                     __ptext21:
  5788                           	opt stack 0
  5789  0028F2                     ___ftneg:
  5790                           	opt stack 24
  5791                           
  5792                           ;incstack = 0
  5793  0028F2  5011               	movf	___ftneg@f1,w,c
  5794  0028F4  1012               	iorwf	___ftneg@f1+1,w,c
  5795  0028F6  1013               	iorwf	___ftneg@f1+2,w,c
  5796  0028F8  B4D8               	btfsc	status,2,c
  5797  0028FA  D006               	goto	l779
  5798  0028FC  0E00               	movlw	0
  5799  0028FE  1A11               	xorwf	___ftneg@f1,f,c
  5800  002900  0E00               	movlw	0
  5801  002902  1A12               	xorwf	___ftneg@f1+1,f,c
  5802  002904  0E80               	movlw	128
  5803  002906  1A13               	xorwf	___ftneg@f1+2,f,c
  5804  002908                     l779:
  5805  002908  C011  F011         	movff	___ftneg@f1,?___ftneg
  5806  00290C  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
  5807  002910  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
  5808  002914  0012               	return		;funcret
  5809  002916                     __end_of___ftneg:
  5810                           	opt stack 0
  5811                           tblptru	equ	0xFF8
  5812                           tblptrh	equ	0xFF7
  5813                           tblptrl	equ	0xFF6
  5814                           tablat	equ	0xFF5
  5815                           prodh	equ	0xFF4
  5816                           prodl	equ	0xFF3
  5817                           intcon	equ	0xFF2
  5818                           intcon2	equ	0xFF1
  5819                           intcon3	equ	0xFF0
  5820                           postinc0	equ	0xFEE
  5821                           wreg	equ	0xFE8
  5822                           postdec1	equ	0xFE5
  5823                           fsr1l	equ	0xFE1
  5824                           indf2	equ	0xFDF
  5825                           postinc2	equ	0xFDE
  5826                           postdec2	equ	0xFDD
  5827                           fsr2h	equ	0xFDA
  5828                           fsr2l	equ	0xFD9
  5829                           status	equ	0xFD8
  5830                           
  5831 ;; *************** function ___ftdiv *****************
  5832 ;; Defined at:
  5833 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  f1              3   24[COMRAM] float 
  5836 ;;  f2              3   27[COMRAM] float 
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  f3              3   34[COMRAM] float 
  5839 ;;  sign            1   38[COMRAM] unsigned char 
  5840 ;;  exp             1   37[COMRAM] unsigned char 
  5841 ;;  cntr            1   33[COMRAM] unsigned char 
  5842 ;; Return value:  Size  Location     Type
  5843 ;;                  3   24[COMRAM] float 
  5844 ;; Registers used:
  5845 ;;		wreg, status,2, status,0, cstack
  5846 ;; Tracked objects:
  5847 ;;		On entry : 0/0
  5848 ;;		On exit  : 0/0
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5851 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5852 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5853 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5855 ;;Total ram usage:       15 bytes
  5856 ;; Hardware stack levels used:    1
  5857 ;; Hardware stack levels required when called:    2
  5858 ;; This function calls:
  5859 ;;		___ftpack
  5860 ;; This function is called by:
  5861 ;;		_exp
  5862 ;; This function uses a non-reentrant model
  5863 ;;
  5864                           
  5865                           	psect	text22
  5866  001D0A                     __ptext22:
  5867                           	opt stack 0
  5868  001D0A                     ___ftdiv:
  5869                           	opt stack 23
  5870                           
  5871                           ;incstack = 0
  5872  001D0A  C01B  F01F         	movff	___ftdiv@f1+2,??___ftdiv
  5873  001D0E  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  5874  001D10  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  5875  001D12  341A               	rlcf	___ftdiv@f1+1,w,c
  5876  001D14  361F               	rlcf	??___ftdiv& (0+255),f,c
  5877  001D16  E301               	bnc	u2281
  5878  001D18  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  5879  001D1A                     u2281:
  5880  001D1A  501F               	movf	??___ftdiv,w,c
  5881  001D1C  6E26               	movwf	___ftdiv@exp,c
  5882  001D1E  5026               	movf	___ftdiv@exp,w,c
  5883  001D20  A4D8               	btfss	status,2,c
  5884  001D22  D007               	goto	l3042
  5885  001D24  0E00               	movlw	0
  5886  001D26  6E19               	movwf	?___ftdiv,c
  5887  001D28  0E00               	movlw	0
  5888  001D2A  6E1A               	movwf	?___ftdiv+1,c
  5889  001D2C  0E00               	movlw	0
  5890  001D2E  6E1B               	movwf	?___ftdiv+2,c
  5891  001D30  0012               	return	
  5892  001D32                     l3042:
  5893  001D32  C01E  F01F         	movff	___ftdiv@f2+2,??___ftdiv
  5894  001D36  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  5895  001D38  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  5896  001D3A  341D               	rlcf	___ftdiv@f2+1,w,c
  5897  001D3C  361F               	rlcf	??___ftdiv& (0+255),f,c
  5898  001D3E  E301               	bnc	u2301
  5899  001D40  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  5900  001D42                     u2301:
  5901  001D42  501F               	movf	??___ftdiv,w,c
  5902  001D44  6E27               	movwf	___ftdiv@sign,c
  5903  001D46  5027               	movf	___ftdiv@sign,w,c
  5904  001D48  A4D8               	btfss	status,2,c
  5905  001D4A  D007               	goto	l3048
  5906  001D4C  0E00               	movlw	0
  5907  001D4E  6E19               	movwf	?___ftdiv,c
  5908  001D50  0E00               	movlw	0
  5909  001D52  6E1A               	movwf	?___ftdiv+1,c
  5910  001D54  0E00               	movlw	0
  5911  001D56  6E1B               	movwf	?___ftdiv+2,c
  5912  001D58  0012               	return	
  5913  001D5A                     l3048:
  5914  001D5A  0E00               	movlw	0
  5915  001D5C  6E23               	movwf	___ftdiv@f3,c
  5916  001D5E  0E00               	movlw	0
  5917  001D60  6E24               	movwf	___ftdiv@f3+1,c
  5918  001D62  0E00               	movlw	0
  5919  001D64  6E25               	movwf	___ftdiv@f3+2,c
  5920  001D66  5027               	movf	___ftdiv@sign,w,c
  5921  001D68  0F89               	addlw	137
  5922  001D6A  5E26               	subwf	___ftdiv@exp,f,c
  5923  001D6C  C01B  F027         	movff	___ftdiv@f1+2,___ftdiv@sign
  5924  001D70  501E               	movf	___ftdiv@f2+2,w,c
  5925  001D72  1A27               	xorwf	___ftdiv@sign,f,c
  5926  001D74  0E80               	movlw	128
  5927  001D76  1627               	andwf	___ftdiv@sign,f,c
  5928  001D78  8E1A               	bsf	___ftdiv@f1+1,7,c
  5929  001D7A  0EFF               	movlw	255
  5930  001D7C  1619               	andwf	___ftdiv@f1,f,c
  5931  001D7E  0EFF               	movlw	255
  5932  001D80  161A               	andwf	___ftdiv@f1+1,f,c
  5933  001D82  0E00               	movlw	0
  5934  001D84  161B               	andwf	___ftdiv@f1+2,f,c
  5935  001D86  8E1D               	bsf	___ftdiv@f2+1,7,c
  5936  001D88  0EFF               	movlw	255
  5937  001D8A  161C               	andwf	___ftdiv@f2,f,c
  5938  001D8C  0EFF               	movlw	255
  5939  001D8E  161D               	andwf	___ftdiv@f2+1,f,c
  5940  001D90  0E00               	movlw	0
  5941  001D92  161E               	andwf	___ftdiv@f2+2,f,c
  5942  001D94  0E18               	movlw	24
  5943  001D96  6E22               	movwf	___ftdiv@cntr,c
  5944  001D98                     l3068:
  5945  001D98  90D8               	bcf	status,0,c
  5946  001D9A  3623               	rlcf	___ftdiv@f3,f,c
  5947  001D9C  3624               	rlcf	___ftdiv@f3+1,f,c
  5948  001D9E  3625               	rlcf	___ftdiv@f3+2,f,c
  5949  001DA0  501C               	movf	___ftdiv@f2,w,c
  5950  001DA2  5C19               	subwf	___ftdiv@f1,w,c
  5951  001DA4  501D               	movf	___ftdiv@f2+1,w,c
  5952  001DA6  581A               	subwfb	___ftdiv@f1+1,w,c
  5953  001DA8  501E               	movf	___ftdiv@f2+2,w,c
  5954  001DAA  581B               	subwfb	___ftdiv@f1+2,w,c
  5955  001DAC  A0D8               	btfss	status,0,c
  5956  001DAE  D007               	goto	l757
  5957  001DB0  501C               	movf	___ftdiv@f2,w,c
  5958  001DB2  5E19               	subwf	___ftdiv@f1,f,c
  5959  001DB4  501D               	movf	___ftdiv@f2+1,w,c
  5960  001DB6  5A1A               	subwfb	___ftdiv@f1+1,f,c
  5961  001DB8  501E               	movf	___ftdiv@f2+2,w,c
  5962  001DBA  5A1B               	subwfb	___ftdiv@f1+2,f,c
  5963  001DBC  8023               	bsf	___ftdiv@f3,0,c
  5964  001DBE                     l757:
  5965  001DBE  90D8               	bcf	status,0,c
  5966  001DC0  3619               	rlcf	___ftdiv@f1,f,c
  5967  001DC2  361A               	rlcf	___ftdiv@f1+1,f,c
  5968  001DC4  361B               	rlcf	___ftdiv@f1+2,f,c
  5969  001DC6  2E22               	decfsz	___ftdiv@cntr,f,c
  5970  001DC8  D7E7               	goto	l3068
  5971  001DCA  C023  F011         	movff	___ftdiv@f3,___ftpack@arg
  5972  001DCE  C024  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5973  001DD2  C025  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5974  001DD6  C026  F014         	movff	___ftdiv@exp,___ftpack@exp
  5975  001DDA  C027  F015         	movff	___ftdiv@sign,___ftpack@sign
  5976  001DDE  EC31  F010         	call	___ftpack	;wreg free
  5977  001DE2  C011  F019         	movff	?___ftpack,?___ftdiv
  5978  001DE6  C012  F01A         	movff	?___ftpack+1,?___ftdiv+1
  5979  001DEA  C013  F01B         	movff	?___ftpack+2,?___ftdiv+2
  5980  001DEE  0012               	return	
  5981  001DF0                     __end_of___ftdiv:
  5982                           	opt stack 0
  5983                           tblptru	equ	0xFF8
  5984                           tblptrh	equ	0xFF7
  5985                           tblptrl	equ	0xFF6
  5986                           tablat	equ	0xFF5
  5987                           prodh	equ	0xFF4
  5988                           prodl	equ	0xFF3
  5989                           intcon	equ	0xFF2
  5990                           intcon2	equ	0xFF1
  5991                           intcon3	equ	0xFF0
  5992                           postinc0	equ	0xFEE
  5993                           wreg	equ	0xFE8
  5994                           postdec1	equ	0xFE5
  5995                           fsr1l	equ	0xFE1
  5996                           indf2	equ	0xFDF
  5997                           postinc2	equ	0xFDE
  5998                           postdec2	equ	0xFDD
  5999                           fsr2h	equ	0xFDA
  6000                           fsr2l	equ	0xFD9
  6001                           status	equ	0xFD8
  6002                           
  6003 ;; *************** function ___awtoft *****************
  6004 ;; Defined at:
  6005 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;  c               2   24[COMRAM] int 
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;  sign            1   27[COMRAM] unsigned char 
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  3   24[COMRAM] float 
  6012 ;; Registers used:
  6013 ;;		wreg, status,2, status,0, cstack
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6019 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6022 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;Total ram usage:        4 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    2
  6026 ;; This function calls:
  6027 ;;		___ftpack
  6028 ;; This function is called by:
  6029 ;;		_dec_to_hex
  6030 ;;		_init_operation
  6031 ;;		_exp
  6032 ;;		_log
  6033 ;;		_hex_to_dec
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           	psect	text23
  6038  00286E                     __ptext23:
  6039                           	opt stack 0
  6040  00286E                     ___awtoft:
  6041                           	opt stack 23
  6042                           
  6043                           ;incstack = 0
  6044  00286E  0E00               	movlw	0
  6045  002870  6E1C               	movwf	___awtoft@sign,c
  6046  002872  AE1A               	btfss	___awtoft@c+1,7,c
  6047  002874  D006               	goto	l3098
  6048  002876  6C19               	negf	___awtoft@c,c
  6049  002878  1E1A               	comf	___awtoft@c+1,f,c
  6050  00287A  B0D8               	btfsc	status,0,c
  6051  00287C  2A1A               	incf	___awtoft@c+1,f,c
  6052  00287E  0E01               	movlw	1
  6053  002880  6E1C               	movwf	___awtoft@sign,c
  6054  002882                     l3098:
  6055  002882  C019  F011         	movff	___awtoft@c,___ftpack@arg
  6056  002886  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  6057  00288A  6A13               	clrf	___ftpack@arg+2,c
  6058  00288C  0E8E               	movlw	142
  6059  00288E  6E14               	movwf	___ftpack@exp,c
  6060  002890  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  6061  002894  EC31  F010         	call	___ftpack	;wreg free
  6062  002898  C011  F019         	movff	?___ftpack,?___awtoft
  6063  00289C  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  6064  0028A0  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  6065  0028A4  0012               	return	
  6066  0028A6                     __end_of___awtoft:
  6067                           	opt stack 0
  6068                           tblptru	equ	0xFF8
  6069                           tblptrh	equ	0xFF7
  6070                           tblptrl	equ	0xFF6
  6071                           tablat	equ	0xFF5
  6072                           prodh	equ	0xFF4
  6073                           prodl	equ	0xFF3
  6074                           intcon	equ	0xFF2
  6075                           intcon2	equ	0xFF1
  6076                           intcon3	equ	0xFF0
  6077                           postinc0	equ	0xFEE
  6078                           wreg	equ	0xFE8
  6079                           postdec1	equ	0xFE5
  6080                           fsr1l	equ	0xFE1
  6081                           indf2	equ	0xFDF
  6082                           postinc2	equ	0xFDE
  6083                           postdec2	equ	0xFDD
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function ___lltoft *****************
  6089 ;; Defined at:
  6090 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  c               4   24[COMRAM] unsigned long 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  exp             1   32[COMRAM] unsigned char 
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  3   24[COMRAM] float 
  6097 ;; Registers used:
  6098 ;;		wreg, status,2, status,0, cstack
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6104 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6106 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6107 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;Total ram usage:        9 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:    2
  6111 ;; This function calls:
  6112 ;;		___ftpack
  6113 ;; This function is called by:
  6114 ;;		_pow
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           	psect	text24
  6119  002588                     __ptext24:
  6120                           	opt stack 0
  6121  002588                     ___lltoft:
  6122                           	opt stack 24
  6123                           
  6124                           ;incstack = 0
  6125  002588  0E8E               	movlw	142
  6126  00258A  6E21               	movwf	___lltoft@exp,c
  6127  00258C  D006               	goto	l3176
  6128  00258E                     l3174:
  6129  00258E  90D8               	bcf	status,0,c
  6130  002590  321C               	rrcf	___lltoft@c+3,f,c
  6131  002592  321B               	rrcf	___lltoft@c+2,f,c
  6132  002594  321A               	rrcf	___lltoft@c+1,f,c
  6133  002596  3219               	rrcf	___lltoft@c,f,c
  6134  002598  2A21               	incf	___lltoft@exp,f,c
  6135  00259A                     l3176:
  6136  00259A  0E00               	movlw	0
  6137  00259C  1419               	andwf	___lltoft@c,w,c
  6138  00259E  6E1D               	movwf	??___lltoft& (0+255),c
  6139  0025A0  0E00               	movlw	0
  6140  0025A2  141A               	andwf	___lltoft@c+1,w,c
  6141  0025A4  6E1E               	movwf	(??___lltoft+1)& (0+255),c
  6142  0025A6  0E00               	movlw	0
  6143  0025A8  141B               	andwf	___lltoft@c+2,w,c
  6144  0025AA  6E1F               	movwf	(??___lltoft+2)& (0+255),c
  6145  0025AC  0EFF               	movlw	255
  6146  0025AE  141C               	andwf	___lltoft@c+3,w,c
  6147  0025B0  6E20               	movwf	(??___lltoft+3)& (0+255),c
  6148  0025B2  501D               	movf	??___lltoft,w,c
  6149  0025B4  101E               	iorwf	??___lltoft+1,w,c
  6150  0025B6  101F               	iorwf	??___lltoft+2,w,c
  6151  0025B8  1020               	iorwf	??___lltoft+3,w,c
  6152  0025BA  A4D8               	btfss	status,2,c
  6153  0025BC  D7E8               	goto	l3174
  6154  0025BE  C019  F011         	movff	___lltoft@c,___ftpack@arg
  6155  0025C2  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
  6156  0025C6  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
  6157  0025CA  C021  F014         	movff	___lltoft@exp,___ftpack@exp
  6158  0025CE  0E00               	movlw	0
  6159  0025D0  6E15               	movwf	___ftpack@sign,c
  6160  0025D2  EC31  F010         	call	___ftpack	;wreg free
  6161  0025D6  C011  F019         	movff	?___ftpack,?___lltoft
  6162  0025DA  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
  6163  0025DE  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
  6164  0025E2  0012               	return	
  6165  0025E4                     __end_of___lltoft:
  6166                           	opt stack 0
  6167                           tblptru	equ	0xFF8
  6168                           tblptrh	equ	0xFF7
  6169                           tblptrl	equ	0xFF6
  6170                           tablat	equ	0xFF5
  6171                           prodh	equ	0xFF4
  6172                           prodl	equ	0xFF3
  6173                           intcon	equ	0xFF2
  6174                           intcon2	equ	0xFF1
  6175                           intcon3	equ	0xFF0
  6176                           postinc0	equ	0xFEE
  6177                           wreg	equ	0xFE8
  6178                           postdec1	equ	0xFE5
  6179                           fsr1l	equ	0xFE1
  6180                           indf2	equ	0xFDF
  6181                           postinc2	equ	0xFDE
  6182                           postdec2	equ	0xFDD
  6183                           fsr2h	equ	0xFDA
  6184                           fsr2l	equ	0xFD9
  6185                           status	equ	0xFD8
  6186                           
  6187 ;; *************** function ___ftpack *****************
  6188 ;; Defined at:
  6189 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;  arg             3   16[COMRAM] unsigned um
  6192 ;;  exp             1   19[COMRAM] unsigned char 
  6193 ;;  sign            1   20[COMRAM] unsigned char 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;		None
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  3   16[COMRAM] float 
  6198 ;; Registers used:
  6199 ;;		wreg, status,2, status,0
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6205 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6207 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6208 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6209 ;;Total ram usage:        8 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    1
  6212 ;; This function calls:
  6213 ;;		Nothing
  6214 ;; This function is called by:
  6215 ;;		___altoft
  6216 ;;		___awtoft
  6217 ;;		___ftadd
  6218 ;;		___ftdiv
  6219 ;;		___ftmul
  6220 ;;		___lltoft
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           	psect	text25
  6225  002062                     __ptext25:
  6226                           	opt stack 0
  6227  002062                     ___ftpack:
  6228                           	opt stack 22
  6229                           
  6230                           ;incstack = 0
  6231  002062  5014               	movf	___ftpack@exp,w,c
  6232  002064  B4D8               	btfsc	status,2,c
  6233  002066  D005               	goto	l2780
  6234  002068  5011               	movf	___ftpack@arg,w,c
  6235  00206A  1012               	iorwf	___ftpack@arg+1,w,c
  6236  00206C  1013               	iorwf	___ftpack@arg+2,w,c
  6237  00206E  A4D8               	btfss	status,2,c
  6238  002070  D00C               	goto	l2786
  6239  002072                     l2780:
  6240  002072  0E00               	movlw	0
  6241  002074  6E11               	movwf	?___ftpack,c
  6242  002076  0E00               	movlw	0
  6243  002078  6E12               	movwf	?___ftpack+1,c
  6244  00207A  0E00               	movlw	0
  6245  00207C  6E13               	movwf	?___ftpack+2,c
  6246  00207E  0012               	return	
  6247  002080                     l2784:
  6248  002080  2A14               	incf	___ftpack@exp,f,c
  6249  002082  90D8               	bcf	status,0,c
  6250  002084  3213               	rrcf	___ftpack@arg+2,f,c
  6251  002086  3212               	rrcf	___ftpack@arg+1,f,c
  6252  002088  3211               	rrcf	___ftpack@arg,f,c
  6253  00208A                     l2786:
  6254  00208A  0E00               	movlw	0
  6255  00208C  1411               	andwf	___ftpack@arg,w,c
  6256  00208E  6E16               	movwf	??___ftpack& (0+255),c
  6257  002090  0E00               	movlw	0
  6258  002092  1412               	andwf	___ftpack@arg+1,w,c
  6259  002094  6E17               	movwf	(??___ftpack+1)& (0+255),c
  6260  002096  0EFE               	movlw	254
  6261  002098  1413               	andwf	___ftpack@arg+2,w,c
  6262  00209A  6E18               	movwf	(??___ftpack+2)& (0+255),c
  6263  00209C  5016               	movf	??___ftpack,w,c
  6264  00209E  1017               	iorwf	??___ftpack+1,w,c
  6265  0020A0  1018               	iorwf	??___ftpack+2,w,c
  6266  0020A2  B4D8               	btfsc	status,2,c
  6267  0020A4  D00C               	goto	l2792
  6268  0020A6  D7EC               	goto	l2784
  6269  0020A8                     l2788:
  6270  0020A8  2A14               	incf	___ftpack@exp,f,c
  6271  0020AA  0E01               	movlw	1
  6272  0020AC  2611               	addwf	___ftpack@arg,f,c
  6273  0020AE  0E00               	movlw	0
  6274  0020B0  2212               	addwfc	___ftpack@arg+1,f,c
  6275  0020B2  0E00               	movlw	0
  6276  0020B4  2213               	addwfc	___ftpack@arg+2,f,c
  6277  0020B6  90D8               	bcf	status,0,c
  6278  0020B8  3213               	rrcf	___ftpack@arg+2,f,c
  6279  0020BA  3212               	rrcf	___ftpack@arg+1,f,c
  6280  0020BC  3211               	rrcf	___ftpack@arg,f,c
  6281  0020BE                     l2792:
  6282  0020BE  0E00               	movlw	0
  6283  0020C0  1411               	andwf	___ftpack@arg,w,c
  6284  0020C2  6E16               	movwf	??___ftpack& (0+255),c
  6285  0020C4  0E00               	movlw	0
  6286  0020C6  1412               	andwf	___ftpack@arg+1,w,c
  6287  0020C8  6E17               	movwf	(??___ftpack+1)& (0+255),c
  6288  0020CA  0EFF               	movlw	255
  6289  0020CC  1413               	andwf	___ftpack@arg+2,w,c
  6290  0020CE  6E18               	movwf	(??___ftpack+2)& (0+255),c
  6291  0020D0  5016               	movf	??___ftpack,w,c
  6292  0020D2  1017               	iorwf	??___ftpack+1,w,c
  6293  0020D4  1018               	iorwf	??___ftpack+2,w,c
  6294  0020D6  B4D8               	btfsc	status,2,c
  6295  0020D8  D006               	goto	l2796
  6296  0020DA  D7E6               	goto	l2788
  6297  0020DC                     l2794:
  6298  0020DC  0614               	decf	___ftpack@exp,f,c
  6299  0020DE  90D8               	bcf	status,0,c
  6300  0020E0  3611               	rlcf	___ftpack@arg,f,c
  6301  0020E2  3612               	rlcf	___ftpack@arg+1,f,c
  6302  0020E4  3613               	rlcf	___ftpack@arg+2,f,c
  6303  0020E6                     l2796:
  6304  0020E6  BE12               	btfsc	___ftpack@arg+1,7,c
  6305  0020E8  D003               	goto	l699
  6306  0020EA  0E02               	movlw	2
  6307  0020EC  6014               	cpfslt	___ftpack@exp,c
  6308  0020EE  D7F6               	goto	l2794
  6309  0020F0                     l699:
  6310  0020F0  A014               	btfss	___ftpack@exp,0,c
  6311  0020F2  9E12               	bcf	___ftpack@arg+1,7,c
  6312  0020F4  90D8               	bcf	status,0,c
  6313  0020F6  3214               	rrcf	___ftpack@exp,f,c
  6314  0020F8  5014               	movf	___ftpack@exp,w,c
  6315  0020FA  1213               	iorwf	___ftpack@arg+2,f,c
  6316  0020FC  5015               	movf	___ftpack@sign,w,c
  6317  0020FE  A4D8               	btfss	status,2,c
  6318  002100  8E13               	bsf	___ftpack@arg+2,7,c
  6319  002102  C011  F011         	movff	___ftpack@arg,?___ftpack
  6320  002106  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  6321  00210A  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  6322  00210E  0012               	return	
  6323  002110                     __end_of___ftpack:
  6324                           	opt stack 0
  6325                           tblptru	equ	0xFF8
  6326                           tblptrh	equ	0xFF7
  6327                           tblptrl	equ	0xFF6
  6328                           tablat	equ	0xFF5
  6329                           prodh	equ	0xFF4
  6330                           prodl	equ	0xFF3
  6331                           intcon	equ	0xFF2
  6332                           intcon2	equ	0xFF1
  6333                           intcon3	equ	0xFF0
  6334                           postinc0	equ	0xFEE
  6335                           wreg	equ	0xFE8
  6336                           postdec1	equ	0xFE5
  6337                           fsr1l	equ	0xFE1
  6338                           indf2	equ	0xFDF
  6339                           postinc2	equ	0xFDE
  6340                           postdec2	equ	0xFDD
  6341                           fsr2h	equ	0xFDA
  6342                           fsr2l	equ	0xFD9
  6343                           status	equ	0xFD8
  6344                           
  6345 ;; *************** function ___awdiv *****************
  6346 ;; Defined at:
  6347 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;  dividend        2   16[COMRAM] int 
  6350 ;;  divisor         2   18[COMRAM] int 
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;  quotient        2   22[COMRAM] int 
  6353 ;;  sign            1   21[COMRAM] unsigned char 
  6354 ;;  counter         1   20[COMRAM] unsigned char 
  6355 ;; Return value:  Size  Location     Type
  6356 ;;                  2   16[COMRAM] int 
  6357 ;; Registers used:
  6358 ;;		wreg, status,2, status,0
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6364 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6365 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;Total ram usage:        8 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    1
  6371 ;; This function calls:
  6372 ;;		Nothing
  6373 ;; This function is called by:
  6374 ;;		_dec_to_hex
  6375 ;;		_init_operation
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           	psect	text26
  6380  002230                     __ptext26:
  6381                           	opt stack 0
  6382  002230                     ___awdiv:
  6383                           	opt stack 26
  6384                           
  6385                           ;incstack = 0
  6386  002230  0E00               	movlw	0
  6387  002232  6E16               	movwf	___awdiv@sign,c
  6388  002234  AE14               	btfss	___awdiv@divisor+1,7,c
  6389  002236  D006               	goto	l3318
  6390  002238  6C13               	negf	___awdiv@divisor,c
  6391  00223A  1E14               	comf	___awdiv@divisor+1,f,c
  6392  00223C  B0D8               	btfsc	status,0,c
  6393  00223E  2A14               	incf	___awdiv@divisor+1,f,c
  6394  002240  0E01               	movlw	1
  6395  002242  6E16               	movwf	___awdiv@sign,c
  6396  002244                     l3318:
  6397  002244  AE12               	btfss	___awdiv@dividend+1,7,c
  6398  002246  D006               	goto	l3324
  6399  002248  6C11               	negf	___awdiv@dividend,c
  6400  00224A  1E12               	comf	___awdiv@dividend+1,f,c
  6401  00224C  B0D8               	btfsc	status,0,c
  6402  00224E  2A12               	incf	___awdiv@dividend+1,f,c
  6403  002250  0E01               	movlw	1
  6404  002252  1A16               	xorwf	___awdiv@sign,f,c
  6405  002254                     l3324:
  6406  002254  0E00               	movlw	0
  6407  002256  6E18               	movwf	___awdiv@quotient+1,c
  6408  002258  0E00               	movlw	0
  6409  00225A  6E17               	movwf	___awdiv@quotient,c
  6410  00225C  5013               	movf	___awdiv@divisor,w,c
  6411  00225E  1014               	iorwf	___awdiv@divisor+1,w,c
  6412  002260  B4D8               	btfsc	status,2,c
  6413  002262  D01C               	goto	l3346
  6414  002264  0E01               	movlw	1
  6415  002266  6E15               	movwf	___awdiv@counter,c
  6416  002268  D004               	goto	l3332
  6417  00226A                     l3330:
  6418  00226A  90D8               	bcf	status,0,c
  6419  00226C  3613               	rlcf	___awdiv@divisor,f,c
  6420  00226E  3614               	rlcf	___awdiv@divisor+1,f,c
  6421  002270  2A15               	incf	___awdiv@counter,f,c
  6422  002272                     l3332:
  6423  002272  AE14               	btfss	___awdiv@divisor+1,7,c
  6424  002274  D7FA               	goto	l3330
  6425  002276                     l3334:
  6426  002276  90D8               	bcf	status,0,c
  6427  002278  3617               	rlcf	___awdiv@quotient,f,c
  6428  00227A  3618               	rlcf	___awdiv@quotient+1,f,c
  6429  00227C  5013               	movf	___awdiv@divisor,w,c
  6430  00227E  5C11               	subwf	___awdiv@dividend,w,c
  6431  002280  5014               	movf	___awdiv@divisor+1,w,c
  6432  002282  5812               	subwfb	___awdiv@dividend+1,w,c
  6433  002284  A0D8               	btfss	status,0,c
  6434  002286  D005               	goto	l3342
  6435  002288  5013               	movf	___awdiv@divisor,w,c
  6436  00228A  5E11               	subwf	___awdiv@dividend,f,c
  6437  00228C  5014               	movf	___awdiv@divisor+1,w,c
  6438  00228E  5A12               	subwfb	___awdiv@dividend+1,f,c
  6439  002290  8017               	bsf	___awdiv@quotient,0,c
  6440  002292                     l3342:
  6441  002292  90D8               	bcf	status,0,c
  6442  002294  3214               	rrcf	___awdiv@divisor+1,f,c
  6443  002296  3213               	rrcf	___awdiv@divisor,f,c
  6444  002298  2E15               	decfsz	___awdiv@counter,f,c
  6445  00229A  D7ED               	goto	l3334
  6446  00229C                     l3346:
  6447  00229C  5016               	movf	___awdiv@sign,w,c
  6448  00229E  B4D8               	btfsc	status,2,c
  6449  0022A0  D004               	goto	l3350
  6450  0022A2  6C17               	negf	___awdiv@quotient,c
  6451  0022A4  1E18               	comf	___awdiv@quotient+1,f,c
  6452  0022A6  B0D8               	btfsc	status,0,c
  6453  0022A8  2A18               	incf	___awdiv@quotient+1,f,c
  6454  0022AA                     l3350:
  6455  0022AA  C017  F011         	movff	___awdiv@quotient,?___awdiv
  6456  0022AE  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  6457  0022B2  0012               	return	
  6458  0022B4                     __end_of___awdiv:
  6459                           	opt stack 0
  6460                           tblptru	equ	0xFF8
  6461                           tblptrh	equ	0xFF7
  6462                           tblptrl	equ	0xFF6
  6463                           tablat	equ	0xFF5
  6464                           prodh	equ	0xFF4
  6465                           prodl	equ	0xFF3
  6466                           intcon	equ	0xFF2
  6467                           intcon2	equ	0xFF1
  6468                           intcon3	equ	0xFF0
  6469                           postinc0	equ	0xFEE
  6470                           wreg	equ	0xFE8
  6471                           postdec1	equ	0xFE5
  6472                           fsr1l	equ	0xFE1
  6473                           indf2	equ	0xFDF
  6474                           postinc2	equ	0xFDE
  6475                           postdec2	equ	0xFDD
  6476                           fsr2h	equ	0xFDA
  6477                           fsr2l	equ	0xFD9
  6478                           status	equ	0xFD8
  6479                           
  6480 ;; *************** function _stepper_state *****************
  6481 ;; Defined at:
  6482 ;;		line 500 in file "main.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;  step_state      2   21[COMRAM] PTR unsigned char 
  6485 ;;		 -> main@step_state(2), 
  6486 ;; Auto vars:     Size  Location     Type
  6487 ;;  curr_state      2   27[COMRAM] int 
  6488 ;;  i               2   25[COMRAM] int 
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  1    wreg      void 
  6491 ;; Registers used:
  6492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6498 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6500 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;Total ram usage:        8 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    2
  6505 ;; This function calls:
  6506 ;;		_stepper
  6507 ;;		_stepper_rev
  6508 ;; This function is called by:
  6509 ;;		_init_operation
  6510 ;;		_operation_end
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           	psect	text27
  6515  001C1A                     __ptext27:
  6516                           	opt stack 0
  6517  001C1A                     _stepper_state:
  6518                           	opt stack 27
  6519                           
  6520                           ;main.c: 501: int i = 0;
  6521                           
  6522                           ;incstack = 0
  6523  001C1A  0E00               	movlw	0
  6524  001C1C  6E1B               	movwf	stepper_state@i+1,c
  6525  001C1E  0E00               	movlw	0
  6526  001C20  6E1A               	movwf	stepper_state@i,c
  6527                           
  6528                           ;main.c: 502: int curr_state = step_state[0];
  6529  001C22  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6530  001C26  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6531  001C2A  50DF               	movf	indf2,w,c
  6532  001C2C  6E18               	movwf	??_stepper_state& (0+255),c
  6533  001C2E  5018               	movf	??_stepper_state,w,c
  6534  001C30  6E1C               	movwf	stepper_state@curr_state,c
  6535  001C32  6A1D               	clrf	stepper_state@curr_state+1,c
  6536                           
  6537                           ;main.c: 503: switch(curr_state){
  6538  001C34  D054               	goto	l3808
  6539  001C36                     l3750:
  6540                           
  6541                           ;main.c: 505: if (step_state[1] = 2) stepper(128);
  6542  001C36  EE20 F001          	lfsr	2,1
  6543  001C3A  5016               	movf	stepper_state@step_state,w,c
  6544  001C3C  26D9               	addwf	fsr2l,f,c
  6545  001C3E  5017               	movf	stepper_state@step_state+1,w,c
  6546  001C40  22DA               	addwfc	fsr2h,f,c
  6547  001C42  0E02               	movlw	2
  6548  001C44  6EDF               	movwf	indf2,c
  6549  001C46  0E00               	movlw	0
  6550  001C48  6E12               	movwf	stepper@r+1,c
  6551  001C4A  0E80               	movlw	128
  6552  001C4C  6E11               	movwf	stepper@r,c
  6553  001C4E  EC9C  F011         	call	_stepper	;wreg free
  6554                           
  6555                           ;main.c: 508: step_state[0] = 1;
  6556                           
  6557                           ;main.c: 507: else if (step_state[1] = 4) stepper_rev(128);
  6558                           
  6559                           ;main.c: 506: else if (step_state[1] = 3) stepper(256);
  6560  001C52  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6561  001C56  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6562  001C5A  0E01               	movlw	1
  6563  001C5C  6EDF               	movwf	indf2,c
  6564                           
  6565                           ;main.c: 509: break;
  6566  001C5E  0012               	return	
  6567  001C60                     l3764:
  6568                           
  6569                           ;main.c: 511: if (step_state[1] = 3) stepper(128);
  6570  001C60  EE20 F001          	lfsr	2,1
  6571  001C64  5016               	movf	stepper_state@step_state,w,c
  6572  001C66  26D9               	addwf	fsr2l,f,c
  6573  001C68  5017               	movf	stepper_state@step_state+1,w,c
  6574  001C6A  22DA               	addwfc	fsr2h,f,c
  6575  001C6C  0E03               	movlw	3
  6576  001C6E  6EDF               	movwf	indf2,c
  6577  001C70  0E00               	movlw	0
  6578  001C72  6E12               	movwf	stepper@r+1,c
  6579  001C74  0E80               	movlw	128
  6580  001C76  6E11               	movwf	stepper@r,c
  6581  001C78  EC9C  F011         	call	_stepper	;wreg free
  6582                           
  6583                           ;main.c: 514: step_state[0] = 2;
  6584                           
  6585                           ;main.c: 513: else if (step_state[1] = 1) stepper_rev(128);
  6586                           
  6587                           ;main.c: 512: else if (step_state[1] = 4) stepper(256);
  6588  001C7C  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6589  001C80  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6590  001C84  0E02               	movlw	2
  6591  001C86  6EDF               	movwf	indf2,c
  6592                           
  6593                           ;main.c: 515: break;
  6594  001C88  0012               	return	
  6595  001C8A                     l3778:
  6596                           
  6597                           ;main.c: 517: if (step_state[1] = 4) stepper(128);
  6598  001C8A  EE20 F001          	lfsr	2,1
  6599  001C8E  5016               	movf	stepper_state@step_state,w,c
  6600  001C90  26D9               	addwf	fsr2l,f,c
  6601  001C92  5017               	movf	stepper_state@step_state+1,w,c
  6602  001C94  22DA               	addwfc	fsr2h,f,c
  6603  001C96  0E04               	movlw	4
  6604  001C98  6EDF               	movwf	indf2,c
  6605  001C9A  0E00               	movlw	0
  6606  001C9C  6E12               	movwf	stepper@r+1,c
  6607  001C9E  0E80               	movlw	128
  6608  001CA0  6E11               	movwf	stepper@r,c
  6609  001CA2  EC9C  F011         	call	_stepper	;wreg free
  6610                           
  6611                           ;main.c: 520: step_state[0] = 3;
  6612                           
  6613                           ;main.c: 519: else if (step_state[1] = 2) stepper_rev(128);
  6614                           
  6615                           ;main.c: 518: else if (step_state[1] = 1) stepper(256);
  6616  001CA6  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6617  001CAA  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6618  001CAE  0E03               	movlw	3
  6619  001CB0  6EDF               	movwf	indf2,c
  6620                           
  6621                           ;main.c: 521: break;
  6622  001CB2  0012               	return	
  6623  001CB4                     l3792:
  6624                           
  6625                           ;main.c: 523: if (step_state[1] = 1) stepper(128);
  6626  001CB4  EE20 F001          	lfsr	2,1
  6627  001CB8  5016               	movf	stepper_state@step_state,w,c
  6628  001CBA  26D9               	addwf	fsr2l,f,c
  6629  001CBC  5017               	movf	stepper_state@step_state+1,w,c
  6630  001CBE  22DA               	addwfc	fsr2h,f,c
  6631  001CC0  0E01               	movlw	1
  6632  001CC2  6EDF               	movwf	indf2,c
  6633  001CC4  0E00               	movlw	0
  6634  001CC6  6E12               	movwf	stepper@r+1,c
  6635  001CC8  0E80               	movlw	128
  6636  001CCA  6E11               	movwf	stepper@r,c
  6637  001CCC  EC9C  F011         	call	_stepper	;wreg free
  6638                           
  6639                           ;main.c: 526: step_state[0] = 4;
  6640                           
  6641                           ;main.c: 525: else if (step_state[1] = 3) stepper_rev(128);
  6642                           
  6643                           ;main.c: 524: else if (step_state[1] = 2) stepper(256);
  6644  001CD0  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6645  001CD4  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6646  001CD8  0E04               	movlw	4
  6647  001CDA  6EDF               	movwf	indf2,c
  6648                           
  6649                           ;main.c: 528: }
  6650                           
  6651                           ;main.c: 527: break;
  6652  001CDC  0012               	return	
  6653  001CDE                     l3808:
  6654  001CDE  C01C  F018         	movff	stepper_state@curr_state,??_stepper_state
  6655  001CE2  C01D  F019         	movff	stepper_state@curr_state+1,??_stepper_state+1
  6656                           
  6657                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6658                           ; Switch size 1, requested type "space"
  6659                           ; Number of cases is 1, Range of values is 0 to 0
  6660                           ; switch strategies available:
  6661                           ; Name         Instructions Cycles
  6662                           ; simple_byte            4     3 (average)
  6663                           ;	Chosen strategy is simple_byte
  6664  001CE6  5019               	movf	??_stepper_state+1,w,c
  6665  001CE8  0A00               	xorlw	0	; case 0
  6666  001CEA  A4D8               	btfss	status,2,c
  6667  001CEC  0012               	return	
  6668                           
  6669                           ; Switch size 1, requested type "space"
  6670                           ; Number of cases is 4, Range of values is 1 to 4
  6671                           ; switch strategies available:
  6672                           ; Name         Instructions Cycles
  6673                           ; simple_byte           13     7 (average)
  6674                           ;	Chosen strategy is simple_byte
  6675  001CEE  5018               	movf	??_stepper_state,w,c
  6676  001CF0  0A01               	xorlw	1	; case 1
  6677  001CF2  B4D8               	btfsc	status,2,c
  6678  001CF4  D7A0               	goto	l3750
  6679  001CF6  0A03               	xorlw	3	; case 2
  6680  001CF8  B4D8               	btfsc	status,2,c
  6681  001CFA  D7B2               	goto	l3764
  6682  001CFC  0A01               	xorlw	1	; case 3
  6683  001CFE  B4D8               	btfsc	status,2,c
  6684  001D00  D7C4               	goto	l3778
  6685  001D02  0A07               	xorlw	7	; case 4
  6686  001D04  A4D8               	btfss	status,2,c
  6687  001D06  0012               	return	
  6688  001D08  D7D5               	goto	l3792
  6689  001D0A                     __end_of_stepper_state:
  6690                           	opt stack 0
  6691                           tblptru	equ	0xFF8
  6692                           tblptrh	equ	0xFF7
  6693                           tblptrl	equ	0xFF6
  6694                           tablat	equ	0xFF5
  6695                           prodh	equ	0xFF4
  6696                           prodl	equ	0xFF3
  6697                           intcon	equ	0xFF2
  6698                           intcon2	equ	0xFF1
  6699                           intcon3	equ	0xFF0
  6700                           postinc0	equ	0xFEE
  6701                           wreg	equ	0xFE8
  6702                           postdec1	equ	0xFE5
  6703                           fsr1l	equ	0xFE1
  6704                           indf2	equ	0xFDF
  6705                           postinc2	equ	0xFDE
  6706                           postdec2	equ	0xFDD
  6707                           fsr2h	equ	0xFDA
  6708                           fsr2l	equ	0xFD9
  6709                           status	equ	0xFD8
  6710                           
  6711 ;; *************** function _stepper_rev *****************
  6712 ;; Defined at:
  6713 ;;		line 474 in file "main.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;  r               2   16[COMRAM] int 
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;  i               2   19[COMRAM] int 
  6718 ;; Return value:  Size  Location     Type
  6719 ;;                  1    wreg      void 
  6720 ;; Registers used:
  6721 ;;		wreg, status,2, status,0
  6722 ;; Tracked objects:
  6723 ;;		On entry : 0/0
  6724 ;;		On exit  : 0/0
  6725 ;;		Unchanged: 0/0
  6726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6727 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6728 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6729 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6730 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6731 ;;Total ram usage:        5 bytes
  6732 ;; Hardware stack levels used:    1
  6733 ;; Hardware stack levels required when called:    1
  6734 ;; This function calls:
  6735 ;;		Nothing
  6736 ;; This function is called by:
  6737 ;;		_stepper_state
  6738 ;; This function uses a non-reentrant model
  6739 ;;
  6740                           
  6741                           	psect	text28
  6742  0022B4                     __ptext28:
  6743                           	opt stack 0
  6744  0022B4                     _stepper_rev:
  6745                           	opt stack 27
  6746                           
  6747                           ;main.c: 476: for (int i = 0; i < r; i++){
  6748                           
  6749                           ;incstack = 0
  6750  0022B4  0E00               	movlw	0
  6751  0022B6  6E15               	movwf	stepper_rev@i+1,c
  6752  0022B8  0E00               	movlw	0
  6753  0022BA  6E14               	movwf	stepper_rev@i,c
  6754  0022BC  D032               	goto	l223
  6755  0022BE                     l224:
  6756                           
  6757                           ;main.c: 477: PORTCbits.RC0 = 1;
  6758  0022BE  8082               	bsf	3970,0,c	;volatile
  6759                           
  6760                           ;main.c: 478: PORTCbits.RC1 = 0;
  6761  0022C0  9282               	bcf	3970,1,c	;volatile
  6762                           
  6763                           ;main.c: 479: PORTCbits.RC2 = 0;
  6764  0022C2  9482               	bcf	3970,2,c	;volatile
  6765                           
  6766                           ;main.c: 480: PORTCbits.RC5 = 1;
  6767  0022C4  8A82               	bsf	3970,5,c	;volatile
  6768                           
  6769                           ;main.c: 481: _delay((unsigned long)((5)*(10000000/4000.0)));
  6770  0022C6  0E11               	movlw	17
  6771  0022C8  6E13               	movwf	??_stepper_rev& (0+255),c
  6772  0022CA  0E3A               	movlw	58
  6773  0022CC                     u3667:
  6774  0022CC  2EE8               	decfsz	wreg,f,c
  6775  0022CE  D7FE               	bra	u3667
  6776  0022D0  2E13               	decfsz	??_stepper_rev& (0+255),f,c
  6777  0022D2  D7FC               	bra	u3667
  6778  0022D4  D000               	nop2	
  6779                           
  6780                           ;main.c: 482: PORTCbits.RC0 = 0;
  6781  0022D6  9082               	bcf	3970,0,c	;volatile
  6782                           
  6783                           ;main.c: 483: PORTCbits.RC1 = 0;
  6784  0022D8  9282               	bcf	3970,1,c	;volatile
  6785                           
  6786                           ;main.c: 484: PORTCbits.RC2 = 1;
  6787  0022DA  8482               	bsf	3970,2,c	;volatile
  6788                           
  6789                           ;main.c: 485: PORTCbits.RC5 = 1;
  6790  0022DC  8A82               	bsf	3970,5,c	;volatile
  6791                           
  6792                           ;main.c: 486: _delay((unsigned long)((5)*(10000000/4000.0)));
  6793  0022DE  0E11               	movlw	17
  6794  0022E0  6E13               	movwf	??_stepper_rev& (0+255),c
  6795  0022E2  0E3A               	movlw	58
  6796  0022E4                     u3677:
  6797  0022E4  2EE8               	decfsz	wreg,f,c
  6798  0022E6  D7FE               	bra	u3677
  6799  0022E8  2E13               	decfsz	??_stepper_rev& (0+255),f,c
  6800  0022EA  D7FC               	bra	u3677
  6801  0022EC  D000               	nop2	
  6802                           
  6803                           ;main.c: 487: PORTCbits.RC0 = 0;
  6804  0022EE  9082               	bcf	3970,0,c	;volatile
  6805                           
  6806                           ;main.c: 488: PORTCbits.RC1 = 1;
  6807  0022F0  8282               	bsf	3970,1,c	;volatile
  6808                           
  6809                           ;main.c: 489: PORTCbits.RC2 = 1;
  6810  0022F2  8482               	bsf	3970,2,c	;volatile
  6811                           
  6812                           ;main.c: 490: PORTCbits.RC5 = 0;
  6813  0022F4  9A82               	bcf	3970,5,c	;volatile
  6814                           
  6815                           ;main.c: 491: _delay((unsigned long)((5)*(10000000/4000.0)));
  6816  0022F6  0E11               	movlw	17
  6817  0022F8  6E13               	movwf	??_stepper_rev& (0+255),c
  6818  0022FA  0E3A               	movlw	58
  6819  0022FC                     u3687:
  6820  0022FC  2EE8               	decfsz	wreg,f,c
  6821  0022FE  D7FE               	bra	u3687
  6822  002300  2E13               	decfsz	??_stepper_rev& (0+255),f,c
  6823  002302  D7FC               	bra	u3687
  6824  002304  D000               	nop2	
  6825                           
  6826                           ;main.c: 492: PORTCbits.RC0 = 1;
  6827  002306  8082               	bsf	3970,0,c	;volatile
  6828                           
  6829                           ;main.c: 493: PORTCbits.RC1 = 1;
  6830  002308  8282               	bsf	3970,1,c	;volatile
  6831                           
  6832                           ;main.c: 494: PORTCbits.RC2 = 0;
  6833  00230A  9482               	bcf	3970,2,c	;volatile
  6834                           
  6835                           ;main.c: 495: PORTCbits.RC5 = 0;
  6836  00230C  9A82               	bcf	3970,5,c	;volatile
  6837                           
  6838                           ;main.c: 496: _delay((unsigned long)((5)*(10000000/4000.0)));
  6839  00230E  0E11               	movlw	17
  6840  002310  6E13               	movwf	??_stepper_rev& (0+255),c
  6841  002312  0E3A               	movlw	58
  6842  002314                     u3697:
  6843  002314  2EE8               	decfsz	wreg,f,c
  6844  002316  D7FE               	bra	u3697
  6845  002318  2E13               	decfsz	??_stepper_rev& (0+255),f,c
  6846  00231A  D7FC               	bra	u3697
  6847  00231C  D000               	nop2	
  6848  00231E  4A14               	infsnz	stepper_rev@i,f,c
  6849  002320  2A15               	incf	stepper_rev@i+1,f,c
  6850  002322                     l223:
  6851  002322  5011               	movf	stepper_rev@r,w,c
  6852  002324  5C14               	subwf	stepper_rev@i,w,c
  6853  002326  5015               	movf	stepper_rev@i+1,w,c
  6854  002328  0A80               	xorlw	128
  6855  00232A  6E13               	movwf	??_stepper_rev& (0+255),c
  6856  00232C  5012               	movf	stepper_rev@r+1,w,c
  6857  00232E  0A80               	xorlw	128
  6858  002330  5813               	subwfb	??_stepper_rev& (0+255),w,c
  6859  002332  B0D8               	btfsc	status,0,c
  6860  002334  0012               	return	
  6861  002336  D7C3               	goto	l224
  6862  002338                     __end_of_stepper_rev:
  6863                           	opt stack 0
  6864                           tblptru	equ	0xFF8
  6865                           tblptrh	equ	0xFF7
  6866                           tblptrl	equ	0xFF6
  6867                           tablat	equ	0xFF5
  6868                           prodh	equ	0xFF4
  6869                           prodl	equ	0xFF3
  6870                           intcon	equ	0xFF2
  6871                           intcon2	equ	0xFF1
  6872                           intcon3	equ	0xFF0
  6873                           postinc0	equ	0xFEE
  6874                           wreg	equ	0xFE8
  6875                           postdec1	equ	0xFE5
  6876                           fsr1l	equ	0xFE1
  6877                           indf2	equ	0xFDF
  6878                           postinc2	equ	0xFDE
  6879                           postdec2	equ	0xFDD
  6880                           fsr2h	equ	0xFDA
  6881                           fsr2l	equ	0xFD9
  6882                           status	equ	0xFD8
  6883                           
  6884 ;; *************** function _stepper *****************
  6885 ;; Defined at:
  6886 ;;		line 448 in file "main.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;  r               2   16[COMRAM] int 
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  i               2   19[COMRAM] int 
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  1    wreg      void 
  6893 ;; Registers used:
  6894 ;;		wreg, status,2, status,0
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6900 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;Total ram usage:        5 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:    1
  6907 ;; This function calls:
  6908 ;;		Nothing
  6909 ;; This function is called by:
  6910 ;;		_stepper_state
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	text29
  6915  002338                     __ptext29:
  6916                           	opt stack 0
  6917  002338                     _stepper:
  6918                           	opt stack 27
  6919                           
  6920                           ;main.c: 450: for (int i = 0; i < r; i++){
  6921                           
  6922                           ;incstack = 0
  6923  002338  0E00               	movlw	0
  6924  00233A  6E15               	movwf	stepper@i+1,c
  6925  00233C  0E00               	movlw	0
  6926  00233E  6E14               	movwf	stepper@i,c
  6927  002340  D032               	goto	l217
  6928  002342                     l218:
  6929                           
  6930                           ;main.c: 451: PORTCbits.RC0 = 1;
  6931  002342  8082               	bsf	3970,0,c	;volatile
  6932                           
  6933                           ;main.c: 452: PORTCbits.RC1 = 1;
  6934  002344  8282               	bsf	3970,1,c	;volatile
  6935                           
  6936                           ;main.c: 453: PORTCbits.RC2 = 0;
  6937  002346  9482               	bcf	3970,2,c	;volatile
  6938                           
  6939                           ;main.c: 454: PORTCbits.RC5 = 0;
  6940  002348  9A82               	bcf	3970,5,c	;volatile
  6941                           
  6942                           ;main.c: 455: _delay((unsigned long)((5)*(10000000/4000.0)));
  6943  00234A  0E11               	movlw	17
  6944  00234C  6E13               	movwf	??_stepper& (0+255),c
  6945  00234E  0E3A               	movlw	58
  6946  002350                     u3707:
  6947  002350  2EE8               	decfsz	wreg,f,c
  6948  002352  D7FE               	bra	u3707
  6949  002354  2E13               	decfsz	??_stepper& (0+255),f,c
  6950  002356  D7FC               	bra	u3707
  6951  002358  D000               	nop2	
  6952                           
  6953                           ;main.c: 456: PORTCbits.RC0 = 0;
  6954  00235A  9082               	bcf	3970,0,c	;volatile
  6955                           
  6956                           ;main.c: 457: PORTCbits.RC1 = 1;
  6957  00235C  8282               	bsf	3970,1,c	;volatile
  6958                           
  6959                           ;main.c: 458: PORTCbits.RC2 = 1;
  6960  00235E  8482               	bsf	3970,2,c	;volatile
  6961                           
  6962                           ;main.c: 459: PORTCbits.RC5 = 0;
  6963  002360  9A82               	bcf	3970,5,c	;volatile
  6964                           
  6965                           ;main.c: 460: _delay((unsigned long)((5)*(10000000/4000.0)));
  6966  002362  0E11               	movlw	17
  6967  002364  6E13               	movwf	??_stepper& (0+255),c
  6968  002366  0E3A               	movlw	58
  6969  002368                     u3717:
  6970  002368  2EE8               	decfsz	wreg,f,c
  6971  00236A  D7FE               	bra	u3717
  6972  00236C  2E13               	decfsz	??_stepper& (0+255),f,c
  6973  00236E  D7FC               	bra	u3717
  6974  002370  D000               	nop2	
  6975                           
  6976                           ;main.c: 461: PORTCbits.RC0 = 0;
  6977  002372  9082               	bcf	3970,0,c	;volatile
  6978                           
  6979                           ;main.c: 462: PORTCbits.RC1 = 0;
  6980  002374  9282               	bcf	3970,1,c	;volatile
  6981                           
  6982                           ;main.c: 463: PORTCbits.RC2 = 1;
  6983  002376  8482               	bsf	3970,2,c	;volatile
  6984                           
  6985                           ;main.c: 464: PORTCbits.RC5 = 1;
  6986  002378  8A82               	bsf	3970,5,c	;volatile
  6987                           
  6988                           ;main.c: 465: _delay((unsigned long)((5)*(10000000/4000.0)));
  6989  00237A  0E11               	movlw	17
  6990  00237C  6E13               	movwf	??_stepper& (0+255),c
  6991  00237E  0E3A               	movlw	58
  6992  002380                     u3727:
  6993  002380  2EE8               	decfsz	wreg,f,c
  6994  002382  D7FE               	bra	u3727
  6995  002384  2E13               	decfsz	??_stepper& (0+255),f,c
  6996  002386  D7FC               	bra	u3727
  6997  002388  D000               	nop2	
  6998                           
  6999                           ;main.c: 466: PORTCbits.RC0 = 1;
  7000  00238A  8082               	bsf	3970,0,c	;volatile
  7001                           
  7002                           ;main.c: 467: PORTCbits.RC1 = 0;
  7003  00238C  9282               	bcf	3970,1,c	;volatile
  7004                           
  7005                           ;main.c: 468: PORTCbits.RC2 = 0;
  7006  00238E  9482               	bcf	3970,2,c	;volatile
  7007                           
  7008                           ;main.c: 469: PORTCbits.RC5 = 1;
  7009  002390  8A82               	bsf	3970,5,c	;volatile
  7010                           
  7011                           ;main.c: 470: _delay((unsigned long)((5)*(10000000/4000.0)));
  7012  002392  0E11               	movlw	17
  7013  002394  6E13               	movwf	??_stepper& (0+255),c
  7014  002396  0E3A               	movlw	58
  7015  002398                     u3737:
  7016  002398  2EE8               	decfsz	wreg,f,c
  7017  00239A  D7FE               	bra	u3737
  7018  00239C  2E13               	decfsz	??_stepper& (0+255),f,c
  7019  00239E  D7FC               	bra	u3737
  7020  0023A0  D000               	nop2	
  7021  0023A2  4A14               	infsnz	stepper@i,f,c
  7022  0023A4  2A15               	incf	stepper@i+1,f,c
  7023  0023A6                     l217:
  7024  0023A6  5011               	movf	stepper@r,w,c
  7025  0023A8  5C14               	subwf	stepper@i,w,c
  7026  0023AA  5015               	movf	stepper@i+1,w,c
  7027  0023AC  0A80               	xorlw	128
  7028  0023AE  6E13               	movwf	??_stepper& (0+255),c
  7029  0023B0  5012               	movf	stepper@r+1,w,c
  7030  0023B2  0A80               	xorlw	128
  7031  0023B4  5813               	subwfb	??_stepper& (0+255),w,c
  7032  0023B6  B0D8               	btfsc	status,0,c
  7033  0023B8  0012               	return	
  7034  0023BA  D7C3               	goto	l218
  7035  0023BC                     __end_of_stepper:
  7036                           	opt stack 0
  7037                           tblptru	equ	0xFF8
  7038                           tblptrh	equ	0xFF7
  7039                           tblptrl	equ	0xFF6
  7040                           tablat	equ	0xFF5
  7041                           prodh	equ	0xFF4
  7042                           prodl	equ	0xFF3
  7043                           intcon	equ	0xFF2
  7044                           intcon2	equ	0xFF1
  7045                           intcon3	equ	0xFF0
  7046                           postinc0	equ	0xFEE
  7047                           wreg	equ	0xFE8
  7048                           postdec1	equ	0xFE5
  7049                           fsr1l	equ	0xFE1
  7050                           indf2	equ	0xFDF
  7051                           postinc2	equ	0xFDE
  7052                           postdec2	equ	0xFDD
  7053                           fsr2h	equ	0xFDA
  7054                           fsr2l	equ	0xFD9
  7055                           status	equ	0xFD8
  7056                           
  7057 ;; *************** function _read_colorsensor2 *****************
  7058 ;; Defined at:
  7059 ;;		line 569 in file "main.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;  red             2   19[COMRAM] PTR unsigned char 
  7062 ;;		 -> init_operation@red(2), 
  7063 ;;  green           2   21[COMRAM] PTR unsigned char 
  7064 ;;		 -> init_operation@green(2), 
  7065 ;;  blue            2   23[COMRAM] PTR unsigned char 
  7066 ;;		 -> init_operation@blue(2), 
  7067 ;;  clear           2   25[COMRAM] PTR unsigned char 
  7068 ;;		 -> init_operation@clear(2), 
  7069 ;; Auto vars:     Size  Location     Type
  7070 ;;		None
  7071 ;; Return value:  Size  Location     Type
  7072 ;;                  1    wreg      void 
  7073 ;; Registers used:
  7074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7075 ;; Tracked objects:
  7076 ;;		On entry : 0/0
  7077 ;;		On exit  : 0/0
  7078 ;;		Unchanged: 0/0
  7079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7080 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7083 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;Total ram usage:        8 bytes
  7085 ;; Hardware stack levels used:    1
  7086 ;; Hardware stack levels required when called:    3
  7087 ;; This function calls:
  7088 ;;		_I2C_Master_Read
  7089 ;;		_I2C_Master_Start
  7090 ;;		_I2C_Master_Stop
  7091 ;;		_I2C_Master_Write
  7092 ;; This function is called by:
  7093 ;;		_init_operation
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           	psect	text30
  7098  0015F6                     __ptext30:
  7099                           	opt stack 0
  7100  0015F6                     _read_colorsensor2:
  7101                           	opt stack 26
  7102                           
  7103                           ;main.c: 571: I2C_Master_Start();
  7104                           
  7105                           ;incstack = 0
  7106  0015F6  ECC0  F014         	call	_I2C_Master_Start	;wreg free
  7107                           
  7108                           ;main.c: 572: I2C_Master_Write(0b11100000);
  7109  0015FA  0E00               	movlw	0
  7110  0015FC  6E13               	movwf	I2C_Master_Write@d+1,c
  7111  0015FE  0EE0               	movlw	224
  7112  001600  6E12               	movwf	I2C_Master_Write@d,c
  7113  001602  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7114                           
  7115                           ;main.c: 573: I2C_Master_Write(0b10000000);
  7116  001606  0E00               	movlw	0
  7117  001608  6E13               	movwf	I2C_Master_Write@d+1,c
  7118  00160A  0E80               	movlw	128
  7119  00160C  6E12               	movwf	I2C_Master_Write@d,c
  7120  00160E  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7121                           
  7122                           ;main.c: 574: I2C_Master_Write(0b00000100);
  7123  001612  0E00               	movlw	0
  7124  001614  6E13               	movwf	I2C_Master_Write@d+1,c
  7125  001616  0E04               	movlw	4
  7126  001618  6E12               	movwf	I2C_Master_Write@d,c
  7127  00161A  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7128                           
  7129                           ;main.c: 575: I2C_Master_Stop();
  7130  00161E  ECBC  F014         	call	_I2C_Master_Stop	;wreg free
  7131                           
  7132                           ;main.c: 578: I2C_Master_Start();
  7133  001622  ECC0  F014         	call	_I2C_Master_Start	;wreg free
  7134                           
  7135                           ;main.c: 579: I2C_Master_Write(0b01010010);
  7136  001626  0E00               	movlw	0
  7137  001628  6E13               	movwf	I2C_Master_Write@d+1,c
  7138  00162A  0E52               	movlw	82
  7139  00162C  6E12               	movwf	I2C_Master_Write@d,c
  7140  00162E  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7141                           
  7142                           ;main.c: 580: I2C_Master_Write(0b10000000);
  7143  001632  0E00               	movlw	0
  7144  001634  6E13               	movwf	I2C_Master_Write@d+1,c
  7145  001636  0E80               	movlw	128
  7146  001638  6E12               	movwf	I2C_Master_Write@d,c
  7147  00163A  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7148                           
  7149                           ;main.c: 581: I2C_Master_Write(0b00000011);
  7150  00163E  0E00               	movlw	0
  7151  001640  6E13               	movwf	I2C_Master_Write@d+1,c
  7152  001642  0E03               	movlw	3
  7153  001644  6E12               	movwf	I2C_Master_Write@d,c
  7154  001646  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7155                           
  7156                           ;main.c: 582: I2C_Master_Stop();
  7157  00164A  ECBC  F014         	call	_I2C_Master_Stop	;wreg free
  7158                           
  7159                           ;main.c: 585: I2C_Master_Start();
  7160  00164E  ECC0  F014         	call	_I2C_Master_Start	;wreg free
  7161                           
  7162                           ;main.c: 586: I2C_Master_Write(0b01010010);
  7163  001652  0E00               	movlw	0
  7164  001654  6E13               	movwf	I2C_Master_Write@d+1,c
  7165  001656  0E52               	movlw	82
  7166  001658  6E12               	movwf	I2C_Master_Write@d,c
  7167  00165A  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7168                           
  7169                           ;main.c: 587: I2C_Master_Write(0b10110100);
  7170  00165E  0E00               	movlw	0
  7171  001660  6E13               	movwf	I2C_Master_Write@d+1,c
  7172  001662  0EB4               	movlw	180
  7173  001664  6E12               	movwf	I2C_Master_Write@d,c
  7174  001666  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7175                           
  7176                           ;main.c: 588: I2C_Master_Start();
  7177  00166A  ECC0  F014         	call	_I2C_Master_Start	;wreg free
  7178                           
  7179                           ;main.c: 589: I2C_Master_Write(0b01010011);
  7180  00166E  0E00               	movlw	0
  7181  001670  6E13               	movwf	I2C_Master_Write@d+1,c
  7182  001672  0E53               	movlw	83
  7183  001674  6E12               	movwf	I2C_Master_Write@d,c
  7184  001676  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7185                           
  7186                           ;main.c: 591: clear[1] = I2C_Master_Read(1);
  7187  00167A  EE20 F001          	lfsr	2,1
  7188  00167E  501A               	movf	read_colorsensor2@clear,w,c
  7189  001680  26D9               	addwf	fsr2l,f,c
  7190  001682  501B               	movf	read_colorsensor2@clear+1,w,c
  7191  001684  22DA               	addwfc	fsr2h,f,c
  7192  001686  0E01               	movlw	1
  7193  001688  EC53  F014         	call	_I2C_Master_Read
  7194  00168C  6EDF               	movwf	indf2,c
  7195                           
  7196                           ;main.c: 592: clear[0] = I2C_Master_Read(1);
  7197  00168E  0E01               	movlw	1
  7198  001690  EC53  F014         	call	_I2C_Master_Read
  7199  001694  C01A  FFD9         	movff	read_colorsensor2@clear,fsr2l
  7200  001698  C01B  FFDA         	movff	read_colorsensor2@clear+1,fsr2h
  7201  00169C  6EDF               	movwf	indf2,c
  7202                           
  7203                           ;main.c: 594: red[1] = I2C_Master_Read(1);
  7204  00169E  EE20 F001          	lfsr	2,1
  7205  0016A2  5014               	movf	read_colorsensor2@red,w,c
  7206  0016A4  26D9               	addwf	fsr2l,f,c
  7207  0016A6  5015               	movf	read_colorsensor2@red+1,w,c
  7208  0016A8  22DA               	addwfc	fsr2h,f,c
  7209  0016AA  0E01               	movlw	1
  7210  0016AC  EC53  F014         	call	_I2C_Master_Read
  7211  0016B0  6EDF               	movwf	indf2,c
  7212                           
  7213                           ;main.c: 595: red[0] = I2C_Master_Read(1);
  7214  0016B2  0E01               	movlw	1
  7215  0016B4  EC53  F014         	call	_I2C_Master_Read
  7216  0016B8  C014  FFD9         	movff	read_colorsensor2@red,fsr2l
  7217  0016BC  C015  FFDA         	movff	read_colorsensor2@red+1,fsr2h
  7218  0016C0  6EDF               	movwf	indf2,c
  7219                           
  7220                           ;main.c: 597: green[1] = I2C_Master_Read(1);
  7221  0016C2  EE20 F001          	lfsr	2,1
  7222  0016C6  5016               	movf	read_colorsensor2@green,w,c
  7223  0016C8  26D9               	addwf	fsr2l,f,c
  7224  0016CA  5017               	movf	read_colorsensor2@green+1,w,c
  7225  0016CC  22DA               	addwfc	fsr2h,f,c
  7226  0016CE  0E01               	movlw	1
  7227  0016D0  EC53  F014         	call	_I2C_Master_Read
  7228  0016D4  6EDF               	movwf	indf2,c
  7229                           
  7230                           ;main.c: 598: green[0] = I2C_Master_Read(1);
  7231  0016D6  0E01               	movlw	1
  7232  0016D8  EC53  F014         	call	_I2C_Master_Read
  7233  0016DC  C016  FFD9         	movff	read_colorsensor2@green,fsr2l
  7234  0016E0  C017  FFDA         	movff	read_colorsensor2@green+1,fsr2h
  7235  0016E4  6EDF               	movwf	indf2,c
  7236                           
  7237                           ;main.c: 600: blue[1] = I2C_Master_Read(1);
  7238  0016E6  EE20 F001          	lfsr	2,1
  7239  0016EA  5018               	movf	read_colorsensor2@blue,w,c
  7240  0016EC  26D9               	addwf	fsr2l,f,c
  7241  0016EE  5019               	movf	read_colorsensor2@blue+1,w,c
  7242  0016F0  22DA               	addwfc	fsr2h,f,c
  7243  0016F2  0E01               	movlw	1
  7244  0016F4  EC53  F014         	call	_I2C_Master_Read
  7245  0016F8  6EDF               	movwf	indf2,c
  7246                           
  7247                           ;main.c: 601: blue[0] = I2C_Master_Read(0);
  7248  0016FA  0E00               	movlw	0
  7249  0016FC  EC53  F014         	call	_I2C_Master_Read
  7250  001700  C018  FFD9         	movff	read_colorsensor2@blue,fsr2l
  7251  001704  C019  FFDA         	movff	read_colorsensor2@blue+1,fsr2h
  7252  001708  6EDF               	movwf	indf2,c
  7253                           
  7254                           ;main.c: 603: I2C_Master_Stop();
  7255  00170A  ECBC  F014         	call	_I2C_Master_Stop	;wreg free
  7256  00170E  0012               	return		;funcret
  7257  001710                     __end_of_read_colorsensor2:
  7258                           	opt stack 0
  7259                           tblptru	equ	0xFF8
  7260                           tblptrh	equ	0xFF7
  7261                           tblptrl	equ	0xFF6
  7262                           tablat	equ	0xFF5
  7263                           prodh	equ	0xFF4
  7264                           prodl	equ	0xFF3
  7265                           intcon	equ	0xFF2
  7266                           intcon2	equ	0xFF1
  7267                           intcon3	equ	0xFF0
  7268                           postinc0	equ	0xFEE
  7269                           wreg	equ	0xFE8
  7270                           postdec1	equ	0xFE5
  7271                           fsr1l	equ	0xFE1
  7272                           indf2	equ	0xFDF
  7273                           postinc2	equ	0xFDE
  7274                           postdec2	equ	0xFDD
  7275                           fsr2h	equ	0xFDA
  7276                           fsr2l	equ	0xFD9
  7277                           status	equ	0xFD8
  7278                           
  7279 ;; *************** function _read_colorsensor1 *****************
  7280 ;; Defined at:
  7281 ;;		line 531 in file "main.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;  red             2   19[COMRAM] PTR unsigned char 
  7284 ;;		 -> init_operation@red(2), 
  7285 ;;  green           2   21[COMRAM] PTR unsigned char 
  7286 ;;		 -> init_operation@green(2), 
  7287 ;;  blue            2   23[COMRAM] PTR unsigned char 
  7288 ;;		 -> init_operation@blue(2), 
  7289 ;;  clear           2   25[COMRAM] PTR unsigned char 
  7290 ;;		 -> init_operation@clear(2), 
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;		None
  7293 ;; Return value:  Size  Location     Type
  7294 ;;                  1    wreg      void 
  7295 ;; Registers used:
  7296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7297 ;; Tracked objects:
  7298 ;;		On entry : 0/0
  7299 ;;		On exit  : 0/0
  7300 ;;		Unchanged: 0/0
  7301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7302 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7305 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7306 ;;Total ram usage:        8 bytes
  7307 ;; Hardware stack levels used:    1
  7308 ;; Hardware stack levels required when called:    3
  7309 ;; This function calls:
  7310 ;;		_I2C_Master_Read
  7311 ;;		_I2C_Master_Start
  7312 ;;		_I2C_Master_Stop
  7313 ;;		_I2C_Master_Write
  7314 ;; This function is called by:
  7315 ;;		_init_operation
  7316 ;; This function uses a non-reentrant model
  7317 ;;
  7318                           
  7319                           	psect	text31
  7320  001710                     __ptext31:
  7321                           	opt stack 0
  7322  001710                     _read_colorsensor1:
  7323                           	opt stack 26
  7324                           
  7325                           ;main.c: 533: I2C_Master_Start();
  7326                           
  7327                           ;incstack = 0
  7328  001710  ECC0  F014         	call	_I2C_Master_Start	;wreg free
  7329                           
  7330                           ;main.c: 534: I2C_Master_Write(0b11100000);
  7331  001714  0E00               	movlw	0
  7332  001716  6E13               	movwf	I2C_Master_Write@d+1,c
  7333  001718  0EE0               	movlw	224
  7334  00171A  6E12               	movwf	I2C_Master_Write@d,c
  7335  00171C  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7336                           
  7337                           ;main.c: 535: I2C_Master_Write(0b10000000);
  7338  001720  0E00               	movlw	0
  7339  001722  6E13               	movwf	I2C_Master_Write@d+1,c
  7340  001724  0E80               	movlw	128
  7341  001726  6E12               	movwf	I2C_Master_Write@d,c
  7342  001728  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7343                           
  7344                           ;main.c: 536: I2C_Master_Write(0b10000000);
  7345  00172C  0E00               	movlw	0
  7346  00172E  6E13               	movwf	I2C_Master_Write@d+1,c
  7347  001730  0E80               	movlw	128
  7348  001732  6E12               	movwf	I2C_Master_Write@d,c
  7349  001734  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7350                           
  7351                           ;main.c: 537: I2C_Master_Stop();
  7352  001738  ECBC  F014         	call	_I2C_Master_Stop	;wreg free
  7353                           
  7354                           ;main.c: 540: I2C_Master_Start();
  7355  00173C  ECC0  F014         	call	_I2C_Master_Start	;wreg free
  7356                           
  7357                           ;main.c: 541: I2C_Master_Write(0b01010010);
  7358  001740  0E00               	movlw	0
  7359  001742  6E13               	movwf	I2C_Master_Write@d+1,c
  7360  001744  0E52               	movlw	82
  7361  001746  6E12               	movwf	I2C_Master_Write@d,c
  7362  001748  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7363                           
  7364                           ;main.c: 542: I2C_Master_Write(0b10000000);
  7365  00174C  0E00               	movlw	0
  7366  00174E  6E13               	movwf	I2C_Master_Write@d+1,c
  7367  001750  0E80               	movlw	128
  7368  001752  6E12               	movwf	I2C_Master_Write@d,c
  7369  001754  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7370                           
  7371                           ;main.c: 543: I2C_Master_Write(0b00000011);
  7372  001758  0E00               	movlw	0
  7373  00175A  6E13               	movwf	I2C_Master_Write@d+1,c
  7374  00175C  0E03               	movlw	3
  7375  00175E  6E12               	movwf	I2C_Master_Write@d,c
  7376  001760  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7377                           
  7378                           ;main.c: 544: I2C_Master_Stop();
  7379  001764  ECBC  F014         	call	_I2C_Master_Stop	;wreg free
  7380                           
  7381                           ;main.c: 547: I2C_Master_Start();
  7382  001768  ECC0  F014         	call	_I2C_Master_Start	;wreg free
  7383                           
  7384                           ;main.c: 548: I2C_Master_Write(0b01010010);
  7385  00176C  0E00               	movlw	0
  7386  00176E  6E13               	movwf	I2C_Master_Write@d+1,c
  7387  001770  0E52               	movlw	82
  7388  001772  6E12               	movwf	I2C_Master_Write@d,c
  7389  001774  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7390                           
  7391                           ;main.c: 549: I2C_Master_Write(0b10110100);
  7392  001778  0E00               	movlw	0
  7393  00177A  6E13               	movwf	I2C_Master_Write@d+1,c
  7394  00177C  0EB4               	movlw	180
  7395  00177E  6E12               	movwf	I2C_Master_Write@d,c
  7396  001780  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7397                           
  7398                           ;main.c: 550: I2C_Master_Start();
  7399  001784  ECC0  F014         	call	_I2C_Master_Start	;wreg free
  7400                           
  7401                           ;main.c: 551: I2C_Master_Write(0b01010011);
  7402  001788  0E00               	movlw	0
  7403  00178A  6E13               	movwf	I2C_Master_Write@d+1,c
  7404  00178C  0E53               	movlw	83
  7405  00178E  6E12               	movwf	I2C_Master_Write@d,c
  7406  001790  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7407                           
  7408                           ;main.c: 553: clear[1] = I2C_Master_Read(1);
  7409  001794  EE20 F001          	lfsr	2,1
  7410  001798  501A               	movf	read_colorsensor1@clear,w,c
  7411  00179A  26D9               	addwf	fsr2l,f,c
  7412  00179C  501B               	movf	read_colorsensor1@clear+1,w,c
  7413  00179E  22DA               	addwfc	fsr2h,f,c
  7414  0017A0  0E01               	movlw	1
  7415  0017A2  EC53  F014         	call	_I2C_Master_Read
  7416  0017A6  6EDF               	movwf	indf2,c
  7417                           
  7418                           ;main.c: 554: clear[0] = I2C_Master_Read(1);
  7419  0017A8  0E01               	movlw	1
  7420  0017AA  EC53  F014         	call	_I2C_Master_Read
  7421  0017AE  C01A  FFD9         	movff	read_colorsensor1@clear,fsr2l
  7422  0017B2  C01B  FFDA         	movff	read_colorsensor1@clear+1,fsr2h
  7423  0017B6  6EDF               	movwf	indf2,c
  7424                           
  7425                           ;main.c: 556: red[1] = I2C_Master_Read(1);
  7426  0017B8  EE20 F001          	lfsr	2,1
  7427  0017BC  5014               	movf	read_colorsensor1@red,w,c
  7428  0017BE  26D9               	addwf	fsr2l,f,c
  7429  0017C0  5015               	movf	read_colorsensor1@red+1,w,c
  7430  0017C2  22DA               	addwfc	fsr2h,f,c
  7431  0017C4  0E01               	movlw	1
  7432  0017C6  EC53  F014         	call	_I2C_Master_Read
  7433  0017CA  6EDF               	movwf	indf2,c
  7434                           
  7435                           ;main.c: 557: red[0] = I2C_Master_Read(1);
  7436  0017CC  0E01               	movlw	1
  7437  0017CE  EC53  F014         	call	_I2C_Master_Read
  7438  0017D2  C014  FFD9         	movff	read_colorsensor1@red,fsr2l
  7439  0017D6  C015  FFDA         	movff	read_colorsensor1@red+1,fsr2h
  7440  0017DA  6EDF               	movwf	indf2,c
  7441                           
  7442                           ;main.c: 559: green[1] = I2C_Master_Read(1);
  7443  0017DC  EE20 F001          	lfsr	2,1
  7444  0017E0  5016               	movf	read_colorsensor1@green,w,c
  7445  0017E2  26D9               	addwf	fsr2l,f,c
  7446  0017E4  5017               	movf	read_colorsensor1@green+1,w,c
  7447  0017E6  22DA               	addwfc	fsr2h,f,c
  7448  0017E8  0E01               	movlw	1
  7449  0017EA  EC53  F014         	call	_I2C_Master_Read
  7450  0017EE  6EDF               	movwf	indf2,c
  7451                           
  7452                           ;main.c: 560: green[0] = I2C_Master_Read(1);
  7453  0017F0  0E01               	movlw	1
  7454  0017F2  EC53  F014         	call	_I2C_Master_Read
  7455  0017F6  C016  FFD9         	movff	read_colorsensor1@green,fsr2l
  7456  0017FA  C017  FFDA         	movff	read_colorsensor1@green+1,fsr2h
  7457  0017FE  6EDF               	movwf	indf2,c
  7458                           
  7459                           ;main.c: 562: blue[1] = I2C_Master_Read(1);
  7460  001800  EE20 F001          	lfsr	2,1
  7461  001804  5018               	movf	read_colorsensor1@blue,w,c
  7462  001806  26D9               	addwf	fsr2l,f,c
  7463  001808  5019               	movf	read_colorsensor1@blue+1,w,c
  7464  00180A  22DA               	addwfc	fsr2h,f,c
  7465  00180C  0E01               	movlw	1
  7466  00180E  EC53  F014         	call	_I2C_Master_Read
  7467  001812  6EDF               	movwf	indf2,c
  7468                           
  7469                           ;main.c: 563: blue[0] = I2C_Master_Read(0);
  7470  001814  0E00               	movlw	0
  7471  001816  EC53  F014         	call	_I2C_Master_Read
  7472  00181A  C018  FFD9         	movff	read_colorsensor1@blue,fsr2l
  7473  00181E  C019  FFDA         	movff	read_colorsensor1@blue+1,fsr2h
  7474  001822  6EDF               	movwf	indf2,c
  7475                           
  7476                           ;main.c: 565: I2C_Master_Stop();
  7477  001824  ECBC  F014         	call	_I2C_Master_Stop	;wreg free
  7478  001828  0012               	return		;funcret
  7479  00182A                     __end_of_read_colorsensor1:
  7480                           	opt stack 0
  7481                           tblptru	equ	0xFF8
  7482                           tblptrh	equ	0xFF7
  7483                           tblptrl	equ	0xFF6
  7484                           tablat	equ	0xFF5
  7485                           prodh	equ	0xFF4
  7486                           prodl	equ	0xFF3
  7487                           intcon	equ	0xFF2
  7488                           intcon2	equ	0xFF1
  7489                           intcon3	equ	0xFF0
  7490                           postinc0	equ	0xFEE
  7491                           wreg	equ	0xFE8
  7492                           postdec1	equ	0xFE5
  7493                           fsr1l	equ	0xFE1
  7494                           indf2	equ	0xFDF
  7495                           postinc2	equ	0xFDE
  7496                           postdec2	equ	0xFDD
  7497                           fsr2h	equ	0xFDA
  7498                           fsr2l	equ	0xFD9
  7499                           status	equ	0xFD8
  7500                           
  7501 ;; *************** function _initLCD *****************
  7502 ;; Defined at:
  7503 ;;		line 14 in file "lcd.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      void 
  7510 ;; Registers used:
  7511 ;;		wreg, status,2, status,0, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7519 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7520 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7521 ;;Total ram usage:        1 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    3
  7524 ;; This function calls:
  7525 ;;		_lcdInst
  7526 ;; This function is called by:
  7527 ;;		_main
  7528 ;;		_init_operation
  7529 ;;		_Motors
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           	psect	text32
  7534  002728                     __ptext32:
  7535                           	opt stack 0
  7536  002728                     _initLCD:
  7537                           	opt stack 26
  7538                           
  7539                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  7540                           
  7541                           ;incstack = 0
  7542  002728  0E31               	movlw	49
  7543  00272A  6E14               	movwf	??_initLCD& (0+255),c
  7544  00272C  0EB2               	movlw	178
  7545  00272E                     u3747:
  7546  00272E  2EE8               	decfsz	wreg,f,c
  7547  002730  D7FE               	bra	u3747
  7548  002732  2E14               	decfsz	??_initLCD& (0+255),f,c
  7549  002734  D7FC               	bra	u3747
  7550  002736  D000               	nop2	
  7551                           
  7552                           ;lcd.c: 16: lcdInst(0b00110011);
  7553  002738  0E33               	movlw	51
  7554  00273A  ECB1  F014         	call	_lcdInst
  7555                           
  7556                           ;lcd.c: 17: lcdInst(0b00110010);
  7557  00273E  0E32               	movlw	50
  7558  002740  ECB1  F014         	call	_lcdInst
  7559                           
  7560                           ;lcd.c: 18: lcdInst(0b00101000);
  7561  002744  0E28               	movlw	40
  7562  002746  ECB1  F014         	call	_lcdInst
  7563                           
  7564                           ;lcd.c: 19: lcdInst(0b00001111);
  7565  00274A  0E0F               	movlw	15
  7566  00274C  ECB1  F014         	call	_lcdInst
  7567                           
  7568                           ;lcd.c: 20: lcdInst(0b00000110);
  7569  002750  0E06               	movlw	6
  7570  002752  ECB1  F014         	call	_lcdInst
  7571                           
  7572                           ;lcd.c: 21: lcdInst(0b00000001);
  7573  002756  0E01               	movlw	1
  7574  002758  ECB1  F014         	call	_lcdInst
  7575                           
  7576                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  7577  00275C  0E31               	movlw	49
  7578  00275E  6E14               	movwf	??_initLCD& (0+255),c
  7579  002760  0EB2               	movlw	178
  7580  002762                     u3757:
  7581  002762  2EE8               	decfsz	wreg,f,c
  7582  002764  D7FE               	bra	u3757
  7583  002766  2E14               	decfsz	??_initLCD& (0+255),f,c
  7584  002768  D7FC               	bra	u3757
  7585  00276A  D000               	nop2	
  7586  00276C  0012               	return		;funcret
  7587  00276E                     __end_of_initLCD:
  7588                           	opt stack 0
  7589                           tblptru	equ	0xFF8
  7590                           tblptrh	equ	0xFF7
  7591                           tblptrl	equ	0xFF6
  7592                           tablat	equ	0xFF5
  7593                           prodh	equ	0xFF4
  7594                           prodl	equ	0xFF3
  7595                           intcon	equ	0xFF2
  7596                           intcon2	equ	0xFF1
  7597                           intcon3	equ	0xFF0
  7598                           postinc0	equ	0xFEE
  7599                           wreg	equ	0xFE8
  7600                           postdec1	equ	0xFE5
  7601                           fsr1l	equ	0xFE1
  7602                           indf2	equ	0xFDF
  7603                           postinc2	equ	0xFDE
  7604                           postdec2	equ	0xFDD
  7605                           fsr2h	equ	0xFDA
  7606                           fsr2l	equ	0xFD9
  7607                           status	equ	0xFD8
  7608                           
  7609 ;; *************** function _date_time *****************
  7610 ;; Defined at:
  7611 ;;		line 407 in file "main.c"
  7612 ;; Parameters:    Size  Location     Type
  7613 ;;  time            2   69[BANK0 ] PTR unsigned char 
  7614 ;;		 -> main@time(7), 
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;  i               1  107[COMRAM] unsigned char 
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  1    wreg      void 
  7619 ;; Registers used:
  7620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7626 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7627 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7628 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7629 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7630 ;;Total ram usage:        6 bytes
  7631 ;; Hardware stack levels used:    1
  7632 ;; Hardware stack levels required when called:    4
  7633 ;; This function calls:
  7634 ;;		_I2C_Master_Read
  7635 ;;		_I2C_Master_Start
  7636 ;;		_I2C_Master_Stop
  7637 ;;		_I2C_Master_Write
  7638 ;;		_lcdInst
  7639 ;;		_printf
  7640 ;; This function is called by:
  7641 ;;		_main
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           	psect	text33
  7646  00138A                     __ptext33:
  7647                           	opt stack 0
  7648  00138A                     _date_time:
  7649                           	opt stack 26
  7650                           
  7651                           ;main.c: 409: I2C_Master_Start();
  7652                           
  7653                           ;incstack = 0
  7654  00138A  ECC0  F014         	call	_I2C_Master_Start	;wreg free
  7655                           
  7656                           ;main.c: 410: I2C_Master_Write(0b11010000);
  7657  00138E  0E00               	movlw	0
  7658  001390  6E13               	movwf	I2C_Master_Write@d+1,c
  7659  001392  0ED0               	movlw	208
  7660  001394  6E12               	movwf	I2C_Master_Write@d,c
  7661  001396  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7662                           
  7663                           ;main.c: 411: I2C_Master_Write(0x00);
  7664  00139A  0E00               	movlw	0
  7665  00139C  6E13               	movwf	I2C_Master_Write@d+1,c
  7666  00139E  0E00               	movlw	0
  7667  0013A0  6E12               	movwf	I2C_Master_Write@d,c
  7668  0013A2  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7669                           
  7670                           ;main.c: 412: I2C_Master_Stop();
  7671  0013A6  ECBC  F014         	call	_I2C_Master_Stop	;wreg free
  7672                           
  7673                           ;main.c: 415: I2C_Master_Start();
  7674  0013AA  ECC0  F014         	call	_I2C_Master_Start	;wreg free
  7675                           
  7676                           ;main.c: 416: I2C_Master_Write(0b11010001);
  7677  0013AE  0E00               	movlw	0
  7678  0013B0  6E13               	movwf	I2C_Master_Write@d+1,c
  7679  0013B2  0ED1               	movlw	209
  7680  0013B4  6E12               	movwf	I2C_Master_Write@d,c
  7681  0013B6  ECB7  F014         	call	_I2C_Master_Write	;wreg free
  7682                           
  7683                           ;main.c: 417: for(unsigned char i=0;i<0x06;i++){
  7684  0013BA  0E00               	movlw	0
  7685  0013BC  6E6C               	movwf	date_time@i,c
  7686  0013BE                     l4004:
  7687  0013BE  0E05               	movlw	5
  7688  0013C0  646C               	cpfsgt	date_time@i,c
  7689  0013C2  D001               	goto	l4008
  7690  0013C4  D010               	goto	l4014
  7691  0013C6                     l4008:
  7692                           
  7693                           ;main.c: 418: time[i] = I2C_Master_Read(1);
  7694  0013C6  506C               	movf	date_time@i,w,c
  7695  0013C8  0D01               	mullw	1
  7696  0013CA  50F3               	movf	prodl,w,c
  7697  0013CC  0100               	movlb	0	; () banked
  7698  0013CE  25C5               	addwf	date_time@time& (0+255),w,b
  7699  0013D0  6ED9               	movwf	fsr2l,c
  7700  0013D2  50F4               	movf	prodh,w,c
  7701  0013D4  0100               	movlb	0	; () banked
  7702  0013D6  21C6               	addwfc	(date_time@time+1)& (0+255),w,b
  7703  0013D8  6EDA               	movwf	fsr2h,c
  7704  0013DA  0E01               	movlw	1
  7705  0013DC  EC53  F014         	call	_I2C_Master_Read
  7706  0013E0  6EDF               	movwf	indf2,c
  7707  0013E2  2A6C               	incf	date_time@i,f,c
  7708  0013E4  D7EC               	goto	l4004
  7709  0013E6                     l4014:
  7710                           
  7711                           ;main.c: 419: }
  7712                           ;main.c: 420: time[6] = I2C_Master_Read(0);
  7713  0013E6  0100               	movlb	0	; () banked
  7714  0013E8  EE20 F006          	lfsr	2,6
  7715  0013EC  51C5               	movf	date_time@time& (0+255),w,b
  7716  0013EE  26D9               	addwf	fsr2l,f,c
  7717  0013F0  51C6               	movf	(date_time@time+1)& (0+255),w,b
  7718  0013F2  22DA               	addwfc	fsr2h,f,c
  7719  0013F4  0E00               	movlw	0
  7720  0013F6  EC53  F014         	call	_I2C_Master_Read
  7721  0013FA  6EDF               	movwf	indf2,c
  7722                           
  7723                           ;main.c: 421: I2C_Master_Stop();
  7724  0013FC  ECBC  F014         	call	_I2C_Master_Stop	;wreg free
  7725                           
  7726                           ;main.c: 424: lcdInst(0b10000000);;
  7727  001400  0E80               	movlw	128
  7728  001402  ECB1  F014         	call	_lcdInst
  7729                           
  7730                           ;main.c: 425: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  7731  001406  0EFF               	movlw	low STR_18
  7732  001408  0100               	movlb	0	; () banked
  7733  00140A  6FAF               	movwf	printf@f& (0+255),b
  7734  00140C  0EFE               	movlw	high STR_18
  7735  00140E  0100               	movlb	0	; () banked
  7736  001410  6FB0               	movwf	(printf@f+1)& (0+255),b
  7737  001412  0100               	movlb	0	; () banked
  7738  001414  EE20 F005          	lfsr	2,5
  7739  001418  51C5               	movf	date_time@time& (0+255),w,b
  7740  00141A  26D9               	addwf	fsr2l,f,c
  7741  00141C  51C6               	movf	(date_time@time+1)& (0+255),w,b
  7742  00141E  22DA               	addwfc	fsr2h,f,c
  7743  001420  50DF               	movf	indf2,w,c
  7744  001422  0100               	movlb	0	; () banked
  7745  001424  6FC7               	movwf	??_date_time& (0+255),b
  7746  001426  0100               	movlb	0	; () banked
  7747  001428  51C7               	movf	??_date_time& (0+255),w,b
  7748  00142A  0100               	movlb	0	; () banked
  7749  00142C  6FB1               	movwf	(?_printf+2)& (0+255),b
  7750  00142E  6BB2               	clrf	(?_printf+3)& (0+255),b
  7751  001430  0100               	movlb	0	; () banked
  7752  001432  EE20 F004          	lfsr	2,4
  7753  001436  51C5               	movf	date_time@time& (0+255),w,b
  7754  001438  26D9               	addwf	fsr2l,f,c
  7755  00143A  51C6               	movf	(date_time@time+1)& (0+255),w,b
  7756  00143C  22DA               	addwfc	fsr2h,f,c
  7757  00143E  50DF               	movf	indf2,w,c
  7758  001440  0100               	movlb	0	; () banked
  7759  001442  6FC8               	movwf	(??_date_time+1)& (0+255),b
  7760  001444  0100               	movlb	0	; () banked
  7761  001446  51C8               	movf	(??_date_time+1)& (0+255),w,b
  7762  001448  0100               	movlb	0	; () banked
  7763  00144A  6FB3               	movwf	(?_printf+4)& (0+255),b
  7764  00144C  6BB4               	clrf	(?_printf+5)& (0+255),b
  7765  00144E  0100               	movlb	0	; () banked
  7766  001450  EE20 F006          	lfsr	2,6
  7767  001454  51C5               	movf	date_time@time& (0+255),w,b
  7768  001456  26D9               	addwf	fsr2l,f,c
  7769  001458  51C6               	movf	(date_time@time+1)& (0+255),w,b
  7770  00145A  22DA               	addwfc	fsr2h,f,c
  7771  00145C  50DF               	movf	indf2,w,c
  7772  00145E  0100               	movlb	0	; () banked
  7773  001460  6FC9               	movwf	(??_date_time+2)& (0+255),b
  7774  001462  0100               	movlb	0	; () banked
  7775  001464  51C9               	movf	(??_date_time+2)& (0+255),w,b
  7776  001466  0100               	movlb	0	; () banked
  7777  001468  6FB5               	movwf	(?_printf+6)& (0+255),b
  7778  00146A  6BB6               	clrf	(?_printf+7)& (0+255),b
  7779  00146C  ECEB  F002         	call	_printf	;wreg free
  7780                           
  7781                           ;main.c: 426: lcdInst(0b11000000);;
  7782  001470  0EC0               	movlw	192
  7783  001472  ECB1  F014         	call	_lcdInst
  7784                           
  7785                           ;main.c: 427: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  7786  001476  0E16               	movlw	low STR_19
  7787  001478  0100               	movlb	0	; () banked
  7788  00147A  6FAF               	movwf	printf@f& (0+255),b
  7789  00147C  0EFF               	movlw	high STR_19
  7790  00147E  0100               	movlb	0	; () banked
  7791  001480  6FB0               	movwf	(printf@f+1)& (0+255),b
  7792  001482  0100               	movlb	0	; () banked
  7793  001484  EE20 F002          	lfsr	2,2
  7794  001488  51C5               	movf	date_time@time& (0+255),w,b
  7795  00148A  26D9               	addwf	fsr2l,f,c
  7796  00148C  51C6               	movf	(date_time@time+1)& (0+255),w,b
  7797  00148E  22DA               	addwfc	fsr2h,f,c
  7798  001490  50DF               	movf	indf2,w,c
  7799  001492  0100               	movlb	0	; () banked
  7800  001494  6FC7               	movwf	??_date_time& (0+255),b
  7801  001496  0100               	movlb	0	; () banked
  7802  001498  51C7               	movf	??_date_time& (0+255),w,b
  7803  00149A  0100               	movlb	0	; () banked
  7804  00149C  6FB1               	movwf	(?_printf+2)& (0+255),b
  7805  00149E  6BB2               	clrf	(?_printf+3)& (0+255),b
  7806  0014A0  0100               	movlb	0	; () banked
  7807  0014A2  EE20 F001          	lfsr	2,1
  7808  0014A6  51C5               	movf	date_time@time& (0+255),w,b
  7809  0014A8  26D9               	addwf	fsr2l,f,c
  7810  0014AA  51C6               	movf	(date_time@time+1)& (0+255),w,b
  7811  0014AC  22DA               	addwfc	fsr2h,f,c
  7812  0014AE  50DF               	movf	indf2,w,c
  7813  0014B0  0100               	movlb	0	; () banked
  7814  0014B2  6FC8               	movwf	(??_date_time+1)& (0+255),b
  7815  0014B4  0100               	movlb	0	; () banked
  7816  0014B6  51C8               	movf	(??_date_time+1)& (0+255),w,b
  7817  0014B8  0100               	movlb	0	; () banked
  7818  0014BA  6FB3               	movwf	(?_printf+4)& (0+255),b
  7819  0014BC  6BB4               	clrf	(?_printf+5)& (0+255),b
  7820  0014BE  C0C5  FFD9         	movff	date_time@time,fsr2l
  7821  0014C2  C0C6  FFDA         	movff	date_time@time+1,fsr2h
  7822  0014C6  50DF               	movf	indf2,w,c
  7823  0014C8  0100               	movlb	0	; () banked
  7824  0014CA  6FC9               	movwf	(??_date_time+2)& (0+255),b
  7825  0014CC  0100               	movlb	0	; () banked
  7826  0014CE  51C9               	movf	(??_date_time+2)& (0+255),w,b
  7827  0014D0  0100               	movlb	0	; () banked
  7828  0014D2  6FB5               	movwf	(?_printf+6)& (0+255),b
  7829  0014D4  6BB6               	clrf	(?_printf+7)& (0+255),b
  7830  0014D6  ECEB  F002         	call	_printf	;wreg free
  7831  0014DA  0012               	return	
  7832  0014DC                     __end_of_date_time:
  7833                           	opt stack 0
  7834                           tblptru	equ	0xFF8
  7835                           tblptrh	equ	0xFF7
  7836                           tblptrl	equ	0xFF6
  7837                           tablat	equ	0xFF5
  7838                           prodh	equ	0xFF4
  7839                           prodl	equ	0xFF3
  7840                           intcon	equ	0xFF2
  7841                           intcon2	equ	0xFF1
  7842                           intcon3	equ	0xFF0
  7843                           postinc0	equ	0xFEE
  7844                           wreg	equ	0xFE8
  7845                           postdec1	equ	0xFE5
  7846                           fsr1l	equ	0xFE1
  7847                           indf2	equ	0xFDF
  7848                           postinc2	equ	0xFDE
  7849                           postdec2	equ	0xFDD
  7850                           fsr2h	equ	0xFDA
  7851                           fsr2l	equ	0xFD9
  7852                           status	equ	0xFD8
  7853                           
  7854 ;; *************** function _I2C_Master_Write *****************
  7855 ;; Defined at:
  7856 ;;		line 47 in file "I2C.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;  d               2   17[COMRAM] unsigned int 
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;		None
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  1    wreg      void 
  7863 ;; Registers used:
  7864 ;;		wreg, status,2, status,0, cstack
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7870 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7873 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7874 ;;Total ram usage:        2 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; Hardware stack levels required when called:    2
  7877 ;; This function calls:
  7878 ;;		_I2C_Master_Wait
  7879 ;; This function is called by:
  7880 ;;		_update_time
  7881 ;;		_date_time
  7882 ;;		_read_colorsensor1
  7883 ;;		_read_colorsensor2
  7884 ;;		_set_time
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           	psect	text34
  7889  00296E                     __ptext34:
  7890                           	opt stack 0
  7891  00296E                     _I2C_Master_Write:
  7892                           	opt stack 27
  7893                           
  7894                           ;I2C.c: 49: I2C_Master_Wait();
  7895                           
  7896                           ;incstack = 0
  7897  00296E  EC9A  F014         	call	_I2C_Master_Wait	;wreg free
  7898                           
  7899                           ;I2C.c: 50: SSPBUF = d;
  7900  002972  C012  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7901  002976  0012               	return		;funcret
  7902  002978                     __end_of_I2C_Master_Write:
  7903                           	opt stack 0
  7904                           tblptru	equ	0xFF8
  7905                           tblptrh	equ	0xFF7
  7906                           tblptrl	equ	0xFF6
  7907                           tablat	equ	0xFF5
  7908                           prodh	equ	0xFF4
  7909                           prodl	equ	0xFF3
  7910                           intcon	equ	0xFF2
  7911                           intcon2	equ	0xFF1
  7912                           intcon3	equ	0xFF0
  7913                           postinc0	equ	0xFEE
  7914                           wreg	equ	0xFE8
  7915                           postdec1	equ	0xFE5
  7916                           fsr1l	equ	0xFE1
  7917                           indf2	equ	0xFDF
  7918                           postinc2	equ	0xFDE
  7919                           postdec2	equ	0xFDD
  7920                           fsr2h	equ	0xFDA
  7921                           fsr2l	equ	0xFD9
  7922                           status	equ	0xFD8
  7923                           
  7924 ;; *************** function _I2C_Master_Stop *****************
  7925 ;; Defined at:
  7926 ;;		line 41 in file "I2C.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;		None
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;		None
  7931 ;; Return value:  Size  Location     Type
  7932 ;;                  2   62[None  ] int 
  7933 ;; Registers used:
  7934 ;;		wreg, status,2, status,0, cstack
  7935 ;; Tracked objects:
  7936 ;;		On entry : 0/0
  7937 ;;		On exit  : 0/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7944 ;;Total ram usage:        0 bytes
  7945 ;; Hardware stack levels used:    1
  7946 ;; Hardware stack levels required when called:    2
  7947 ;; This function calls:
  7948 ;;		_I2C_Master_Wait
  7949 ;; This function is called by:
  7950 ;;		_update_time
  7951 ;;		_date_time
  7952 ;;		_read_colorsensor1
  7953 ;;		_read_colorsensor2
  7954 ;;		_set_time
  7955 ;; This function uses a non-reentrant model
  7956 ;;
  7957                           
  7958                           	psect	text35
  7959  002978                     __ptext35:
  7960                           	opt stack 0
  7961  002978                     _I2C_Master_Stop:
  7962                           	opt stack 27
  7963                           
  7964                           ;I2C.c: 43: I2C_Master_Wait();
  7965                           
  7966                           ;incstack = 0
  7967  002978  EC9A  F014         	call	_I2C_Master_Wait	;wreg free
  7968                           
  7969                           ;I2C.c: 44: PEN = 1;
  7970  00297C  84C5               	bsf	4037,2,c	;volatile
  7971  00297E  0012               	return		;funcret
  7972  002980                     __end_of_I2C_Master_Stop:
  7973                           	opt stack 0
  7974                           tblptru	equ	0xFF8
  7975                           tblptrh	equ	0xFF7
  7976                           tblptrl	equ	0xFF6
  7977                           tablat	equ	0xFF5
  7978                           prodh	equ	0xFF4
  7979                           prodl	equ	0xFF3
  7980                           intcon	equ	0xFF2
  7981                           intcon2	equ	0xFF1
  7982                           intcon3	equ	0xFF0
  7983                           postinc0	equ	0xFEE
  7984                           wreg	equ	0xFE8
  7985                           postdec1	equ	0xFE5
  7986                           fsr1l	equ	0xFE1
  7987                           indf2	equ	0xFDF
  7988                           postinc2	equ	0xFDE
  7989                           postdec2	equ	0xFDD
  7990                           fsr2h	equ	0xFDA
  7991                           fsr2l	equ	0xFD9
  7992                           status	equ	0xFD8
  7993                           
  7994 ;; *************** function _I2C_Master_Start *****************
  7995 ;; Defined at:
  7996 ;;		line 29 in file "I2C.c"
  7997 ;; Parameters:    Size  Location     Type
  7998 ;;		None
  7999 ;; Auto vars:     Size  Location     Type
  8000 ;;		None
  8001 ;; Return value:  Size  Location     Type
  8002 ;;                  2   58[None  ] int 
  8003 ;; Registers used:
  8004 ;;		wreg, status,2, status,0, cstack
  8005 ;; Tracked objects:
  8006 ;;		On entry : 0/0
  8007 ;;		On exit  : 0/0
  8008 ;;		Unchanged: 0/0
  8009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8014 ;;Total ram usage:        0 bytes
  8015 ;; Hardware stack levels used:    1
  8016 ;; Hardware stack levels required when called:    2
  8017 ;; This function calls:
  8018 ;;		_I2C_Master_Wait
  8019 ;; This function is called by:
  8020 ;;		_update_time
  8021 ;;		_date_time
  8022 ;;		_read_colorsensor1
  8023 ;;		_read_colorsensor2
  8024 ;;		_set_time
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028                           	psect	text36
  8029  002980                     __ptext36:
  8030                           	opt stack 0
  8031  002980                     _I2C_Master_Start:
  8032                           	opt stack 27
  8033                           
  8034                           ;I2C.c: 31: I2C_Master_Wait();
  8035                           
  8036                           ;incstack = 0
  8037  002980  EC9A  F014         	call	_I2C_Master_Wait	;wreg free
  8038                           
  8039                           ;I2C.c: 32: SEN = 1;
  8040  002984  80C5               	bsf	4037,0,c	;volatile
  8041  002986  0012               	return		;funcret
  8042  002988                     __end_of_I2C_Master_Start:
  8043                           	opt stack 0
  8044                           tblptru	equ	0xFF8
  8045                           tblptrh	equ	0xFF7
  8046                           tblptrl	equ	0xFF6
  8047                           tablat	equ	0xFF5
  8048                           prodh	equ	0xFF4
  8049                           prodl	equ	0xFF3
  8050                           intcon	equ	0xFF2
  8051                           intcon2	equ	0xFF1
  8052                           intcon3	equ	0xFF0
  8053                           postinc0	equ	0xFEE
  8054                           wreg	equ	0xFE8
  8055                           postdec1	equ	0xFE5
  8056                           fsr1l	equ	0xFE1
  8057                           indf2	equ	0xFDF
  8058                           postinc2	equ	0xFDE
  8059                           postdec2	equ	0xFDD
  8060                           fsr2h	equ	0xFDA
  8061                           fsr2l	equ	0xFD9
  8062                           status	equ	0xFD8
  8063                           
  8064 ;; *************** function _I2C_Master_Read *****************
  8065 ;; Defined at:
  8066 ;;		line 53 in file "I2C.c"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;  a               1    wreg     unsigned char 
  8069 ;; Auto vars:     Size  Location     Type
  8070 ;;  a               1   17[COMRAM] unsigned char 
  8071 ;;  temp            1   18[COMRAM] unsigned char 
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  1    wreg      unsigned char 
  8074 ;; Registers used:
  8075 ;;		wreg, status,2, status,0, cstack
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8082 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8084 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8085 ;;Total ram usage:        2 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    2
  8088 ;; This function calls:
  8089 ;;		_I2C_Master_Wait
  8090 ;; This function is called by:
  8091 ;;		_update_time
  8092 ;;		_date_time
  8093 ;;		_read_colorsensor1
  8094 ;;		_read_colorsensor2
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           	psect	text37
  8099  0028A6                     __ptext37:
  8100                           	opt stack 0
  8101  0028A6                     _I2C_Master_Read:
  8102                           	opt stack 27
  8103                           
  8104                           ;incstack = 0
  8105                           ;I2C_Master_Read@a stored from wreg
  8106  0028A6  6E12               	movwf	I2C_Master_Read@a,c
  8107                           
  8108                           ;I2C.c: 55: unsigned char temp;
  8109                           ;I2C.c: 56: I2C_Master_Wait();
  8110  0028A8  EC9A  F014         	call	_I2C_Master_Wait	;wreg free
  8111                           
  8112                           ;I2C.c: 57: RCEN = 1;
  8113  0028AC  86C5               	bsf	4037,3,c	;volatile
  8114                           
  8115                           ;I2C.c: 58: I2C_Master_Wait();
  8116  0028AE  EC9A  F014         	call	_I2C_Master_Wait	;wreg free
  8117                           
  8118                           ;I2C.c: 59: temp = SSPBUF;
  8119  0028B2  CFC9 F013          	movff	4041,I2C_Master_Read@temp	;volatile
  8120                           
  8121                           ;I2C.c: 60: I2C_Master_Wait();
  8122  0028B6  EC9A  F014         	call	_I2C_Master_Wait	;wreg free
  8123                           
  8124                           ;I2C.c: 61: ACKDT = (a)?0:1;
  8125  0028BA  5012               	movf	I2C_Master_Read@a,w,c
  8126  0028BC  A4D8               	btfss	status,2,c
  8127  0028BE  D002               	goto	u2710
  8128  0028C0  8AC5               	bsf	4037,5,c	;volatile
  8129  0028C2  D001               	goto	l3378
  8130  0028C4                     u2710:
  8131  0028C4  9AC5               	bcf	4037,5,c	;volatile
  8132  0028C6                     l3378:
  8133                           
  8134                           ;I2C.c: 62: ACKEN = 1;
  8135  0028C6  88C5               	bsf	4037,4,c	;volatile
  8136                           
  8137                           ;I2C.c: 63: return temp;
  8138  0028C8  5013               	movf	I2C_Master_Read@temp,w,c
  8139  0028CA  0012               	return	
  8140  0028CC                     __end_of_I2C_Master_Read:
  8141                           	opt stack 0
  8142                           tblptru	equ	0xFF8
  8143                           tblptrh	equ	0xFF7
  8144                           tblptrl	equ	0xFF6
  8145                           tablat	equ	0xFF5
  8146                           prodh	equ	0xFF4
  8147                           prodl	equ	0xFF3
  8148                           intcon	equ	0xFF2
  8149                           intcon2	equ	0xFF1
  8150                           intcon3	equ	0xFF0
  8151                           postinc0	equ	0xFEE
  8152                           wreg	equ	0xFE8
  8153                           postdec1	equ	0xFE5
  8154                           fsr1l	equ	0xFE1
  8155                           indf2	equ	0xFDF
  8156                           postinc2	equ	0xFDE
  8157                           postdec2	equ	0xFDD
  8158                           fsr2h	equ	0xFDA
  8159                           fsr2l	equ	0xFD9
  8160                           status	equ	0xFD8
  8161                           
  8162 ;; *************** function _I2C_Master_Wait *****************
  8163 ;; Defined at:
  8164 ;;		line 24 in file "I2C.c"
  8165 ;; Parameters:    Size  Location     Type
  8166 ;;		None
  8167 ;; Auto vars:     Size  Location     Type
  8168 ;;		None
  8169 ;; Return value:  Size  Location     Type
  8170 ;;                  1    wreg      void 
  8171 ;; Registers used:
  8172 ;;		wreg, status,2, status,0
  8173 ;; Tracked objects:
  8174 ;;		On entry : 0/0
  8175 ;;		On exit  : 0/0
  8176 ;;		Unchanged: 0/0
  8177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8180 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8181 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8182 ;;Total ram usage:        1 bytes
  8183 ;; Hardware stack levels used:    1
  8184 ;; Hardware stack levels required when called:    1
  8185 ;; This function calls:
  8186 ;;		Nothing
  8187 ;; This function is called by:
  8188 ;;		_I2C_Master_Start
  8189 ;;		_I2C_Master_Stop
  8190 ;;		_I2C_Master_Write
  8191 ;;		_I2C_Master_Read
  8192 ;;		_I2C_Master_RepeatedStart
  8193 ;; This function uses a non-reentrant model
  8194 ;;
  8195                           
  8196                           	psect	text38
  8197  002934                     __ptext38:
  8198                           	opt stack 0
  8199  002934                     _I2C_Master_Wait:
  8200                           	opt stack 27
  8201  002934                     l329:
  8202  002934  B4C7               	btfsc	4039,2,c	;volatile
  8203  002936  D7FE               	goto	l329
  8204  002938  CFC5 F011          	movff	4037,??_I2C_Master_Wait	;volatile
  8205  00293C  0E1F               	movlw	31
  8206  00293E  1611               	andwf	??_I2C_Master_Wait,f,c
  8207  002940  B4D8               	btfsc	status,2,c
  8208  002942  0012               	return	
  8209  002944  D7F7               	goto	l329
  8210  002946                     __end_of_I2C_Master_Wait:
  8211                           	opt stack 0
  8212                           tblptru	equ	0xFF8
  8213                           tblptrh	equ	0xFF7
  8214                           tblptrl	equ	0xFF6
  8215                           tablat	equ	0xFF5
  8216                           prodh	equ	0xFF4
  8217                           prodl	equ	0xFF3
  8218                           intcon	equ	0xFF2
  8219                           intcon2	equ	0xFF1
  8220                           intcon3	equ	0xFF0
  8221                           postinc0	equ	0xFEE
  8222                           wreg	equ	0xFE8
  8223                           postdec1	equ	0xFE5
  8224                           fsr1l	equ	0xFE1
  8225                           indf2	equ	0xFDF
  8226                           postinc2	equ	0xFDE
  8227                           postdec2	equ	0xFDD
  8228                           fsr2h	equ	0xFDA
  8229                           fsr2l	equ	0xFD9
  8230                           status	equ	0xFD8
  8231                           
  8232 ;; *************** function _bottle_count *****************
  8233 ;; Defined at:
  8234 ;;		line 355 in file "main.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;  bot_count       2   69[BANK0 ] PTR unsigned char 
  8237 ;;		 -> main@bot_count(4), 
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;		None
  8240 ;; Return value:  Size  Location     Type
  8241 ;;                  1    wreg      void 
  8242 ;; Registers used:
  8243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8244 ;; Tracked objects:
  8245 ;;		On entry : 0/0
  8246 ;;		On exit  : 0/0
  8247 ;;		Unchanged: 0/0
  8248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8249 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8251 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8252 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8253 ;;Total ram usage:        7 bytes
  8254 ;; Hardware stack levels used:    1
  8255 ;; Hardware stack levels required when called:    4
  8256 ;; This function calls:
  8257 ;;		_lcdInst
  8258 ;;		_printf
  8259 ;; This function is called by:
  8260 ;;		_main
  8261 ;; This function uses a non-reentrant model
  8262 ;;
  8263                           
  8264                           	psect	text39
  8265  0009A4                     __ptext39:
  8266                           	opt stack 0
  8267  0009A4                     _bottle_count:
  8268                           	opt stack 26
  8269                           
  8270                           ;main.c: 356: while (bot_type != O){
  8271                           
  8272                           ;incstack = 0
  8273  0009A4  D0FA               	goto	l4066
  8274  0009A6                     l4030:
  8275                           
  8276                           ;main.c: 359: lcdInst(0b10000000);;
  8277  0009A6  0E80               	movlw	128
  8278  0009A8  ECB1  F014         	call	_lcdInst
  8279                           
  8280                           ;main.c: 360: printf("Total Bottle    ");
  8281  0009AC  0E87               	movlw	low STR_6
  8282  0009AE  0100               	movlb	0	; () banked
  8283  0009B0  6FAF               	movwf	printf@f& (0+255),b
  8284  0009B2  0EFF               	movlw	high STR_6
  8285  0009B4  0100               	movlb	0	; () banked
  8286  0009B6  6FB0               	movwf	(printf@f+1)& (0+255),b
  8287  0009B8  ECEB  F002         	call	_printf	;wreg free
  8288                           
  8289                           ;main.c: 361: lcdInst(0b11000000);;
  8290  0009BC  0EC0               	movlw	192
  8291  0009BE  ECB1  F014         	call	_lcdInst
  8292                           
  8293                           ;main.c: 362: printf("Count: %i       ", (bot_count[0] + bot_count[1] + bot_count[2] + b
      +                          ot_count[3]));
  8294  0009C2  0E76               	movlw	low STR_7
  8295  0009C4  0100               	movlb	0	; () banked
  8296  0009C6  6FAF               	movwf	printf@f& (0+255),b
  8297  0009C8  0EFF               	movlw	high STR_7
  8298  0009CA  0100               	movlb	0	; () banked
  8299  0009CC  6FB0               	movwf	(printf@f+1)& (0+255),b
  8300  0009CE  0100               	movlb	0	; () banked
  8301  0009D0  EE20 F003          	lfsr	2,3
  8302  0009D4  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8303  0009D6  26D9               	addwf	fsr2l,f,c
  8304  0009D8  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8305  0009DA  22DA               	addwfc	fsr2h,f,c
  8306  0009DC  50DF               	movf	indf2,w,c
  8307  0009DE  0100               	movlb	0	; () banked
  8308  0009E0  6FC7               	movwf	??_bottle_count& (0+255),b
  8309  0009E2  C0C5  FFD9         	movff	bottle_count@bot_count,fsr2l
  8310  0009E6  C0C6  FFDA         	movff	bottle_count@bot_count+1,fsr2h
  8311  0009EA  50DF               	movf	indf2,w,c
  8312  0009EC  0100               	movlb	0	; () banked
  8313  0009EE  6FC8               	movwf	(??_bottle_count+1)& (0+255),b
  8314  0009F0  6BC9               	clrf	(??_bottle_count+2)& (0+255),b
  8315  0009F2  0100               	movlb	0	; () banked
  8316  0009F4  EE20 F001          	lfsr	2,1
  8317  0009F8  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8318  0009FA  26D9               	addwf	fsr2l,f,c
  8319  0009FC  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8320  0009FE  22DA               	addwfc	fsr2h,f,c
  8321  000A00  50DF               	movf	indf2,w,c
  8322  000A02  0100               	movlb	0	; () banked
  8323  000A04  6FCA               	movwf	(??_bottle_count+3)& (0+255),b
  8324  000A06  0100               	movlb	0	; () banked
  8325  000A08  51CA               	movf	(??_bottle_count+3)& (0+255),w,b
  8326  000A0A  0100               	movlb	0	; () banked
  8327  000A0C  27C8               	addwf	(??_bottle_count+1)& (0+255),f,b
  8328  000A0E  0E00               	movlw	0
  8329  000A10  23C9               	addwfc	(??_bottle_count+2)& (0+255),f,b
  8330  000A12  0100               	movlb	0	; () banked
  8331  000A14  EE20 F002          	lfsr	2,2
  8332  000A18  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8333  000A1A  26D9               	addwf	fsr2l,f,c
  8334  000A1C  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8335  000A1E  22DA               	addwfc	fsr2h,f,c
  8336  000A20  50DF               	movf	indf2,w,c
  8337  000A22  0100               	movlb	0	; () banked
  8338  000A24  6FCB               	movwf	(??_bottle_count+4)& (0+255),b
  8339  000A26  0100               	movlb	0	; () banked
  8340  000A28  51CB               	movf	(??_bottle_count+4)& (0+255),w,b
  8341  000A2A  0100               	movlb	0	; () banked
  8342  000A2C  27C8               	addwf	(??_bottle_count+1)& (0+255),f,b
  8343  000A2E  0E00               	movlw	0
  8344  000A30  23C9               	addwfc	(??_bottle_count+2)& (0+255),f,b
  8345  000A32  0100               	movlb	0	; () banked
  8346  000A34  51C7               	movf	??_bottle_count& (0+255),w,b
  8347  000A36  0100               	movlb	0	; () banked
  8348  000A38  25C8               	addwf	(??_bottle_count+1)& (0+255),w,b
  8349  000A3A  0100               	movlb	0	; () banked
  8350  000A3C  6FB1               	movwf	(?_printf+2)& (0+255),b
  8351  000A3E  0100               	movlb	0	; () banked
  8352  000A40  0E00               	movlw	0
  8353  000A42  0100               	movlb	0	; () banked
  8354  000A44  21C9               	addwfc	(??_bottle_count+2)& (0+255),w,b
  8355  000A46  0100               	movlb	0	; () banked
  8356  000A48  6FB2               	movwf	(?_printf+3)& (0+255),b
  8357  000A4A  ECEB  F002         	call	_printf	;wreg free
  8358                           
  8359                           ;main.c: 363: break;
  8360  000A4E  D097               	goto	l4064
  8361  000A50                     l4036:
  8362                           
  8363                           ;main.c: 365: lcdInst(0b10000000);;
  8364  000A50  0E80               	movlw	128
  8365  000A52  ECB1  F014         	call	_lcdInst
  8366                           
  8367                           ;main.c: 366: printf("YOP With Cap    ");
  8368  000A56  0E98               	movlw	low STR_8
  8369  000A58  0100               	movlb	0	; () banked
  8370  000A5A  6FAF               	movwf	printf@f& (0+255),b
  8371  000A5C  0EFF               	movlw	high STR_8
  8372  000A5E  0100               	movlb	0	; () banked
  8373  000A60  6FB0               	movwf	(printf@f+1)& (0+255),b
  8374  000A62  ECEB  F002         	call	_printf	;wreg free
  8375                           
  8376                           ;main.c: 367: lcdInst(0b11000000);;
  8377  000A66  0EC0               	movlw	192
  8378  000A68  ECB1  F014         	call	_lcdInst
  8379                           
  8380                           ;main.c: 368: printf("Count: %i       ", bot_count[0]);
  8381  000A6C  0E76               	movlw	low STR_7
  8382  000A6E  0100               	movlb	0	; () banked
  8383  000A70  6FAF               	movwf	printf@f& (0+255),b
  8384  000A72  0EFF               	movlw	high STR_7
  8385  000A74  0100               	movlb	0	; () banked
  8386  000A76  6FB0               	movwf	(printf@f+1)& (0+255),b
  8387  000A78  C0C5  FFD9         	movff	bottle_count@bot_count,fsr2l
  8388  000A7C  C0C6  FFDA         	movff	bottle_count@bot_count+1,fsr2h
  8389  000A80  50DF               	movf	indf2,w,c
  8390  000A82  0100               	movlb	0	; () banked
  8391  000A84  6FC7               	movwf	??_bottle_count& (0+255),b
  8392  000A86  0100               	movlb	0	; () banked
  8393  000A88  51C7               	movf	??_bottle_count& (0+255),w,b
  8394  000A8A  0100               	movlb	0	; () banked
  8395  000A8C  6FB1               	movwf	(?_printf+2)& (0+255),b
  8396  000A8E  6BB2               	clrf	(?_printf+3)& (0+255),b
  8397  000A90  ECEB  F002         	call	_printf	;wreg free
  8398                           
  8399                           ;main.c: 369: break;
  8400  000A94  D074               	goto	l4064
  8401  000A96                     l4042:
  8402                           
  8403                           ;main.c: 371: lcdInst(0b10000000);;
  8404  000A96  0E80               	movlw	128
  8405  000A98  ECB1  F014         	call	_lcdInst
  8406                           
  8407                           ;main.c: 372: printf("YOP With No Cap ");
  8408  000A9C  0EDC               	movlw	low STR_10
  8409  000A9E  0100               	movlb	0	; () banked
  8410  000AA0  6FAF               	movwf	printf@f& (0+255),b
  8411  000AA2  0EFF               	movlw	high STR_10
  8412  000AA4  0100               	movlb	0	; () banked
  8413  000AA6  6FB0               	movwf	(printf@f+1)& (0+255),b
  8414  000AA8  ECEB  F002         	call	_printf	;wreg free
  8415                           
  8416                           ;main.c: 373: lcdInst(0b11000000);;
  8417  000AAC  0EC0               	movlw	192
  8418  000AAE  ECB1  F014         	call	_lcdInst
  8419                           
  8420                           ;main.c: 374: printf("Count: %i       ", bot_count[1]);
  8421  000AB2  0E76               	movlw	low STR_7
  8422  000AB4  0100               	movlb	0	; () banked
  8423  000AB6  6FAF               	movwf	printf@f& (0+255),b
  8424  000AB8  0EFF               	movlw	high STR_7
  8425  000ABA  0100               	movlb	0	; () banked
  8426  000ABC  6FB0               	movwf	(printf@f+1)& (0+255),b
  8427  000ABE  0100               	movlb	0	; () banked
  8428  000AC0  EE20 F001          	lfsr	2,1
  8429  000AC4  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8430  000AC6  26D9               	addwf	fsr2l,f,c
  8431  000AC8  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8432  000ACA  22DA               	addwfc	fsr2h,f,c
  8433  000ACC  50DF               	movf	indf2,w,c
  8434  000ACE  0100               	movlb	0	; () banked
  8435  000AD0  6FC7               	movwf	??_bottle_count& (0+255),b
  8436  000AD2  0100               	movlb	0	; () banked
  8437  000AD4  51C7               	movf	??_bottle_count& (0+255),w,b
  8438  000AD6  0100               	movlb	0	; () banked
  8439  000AD8  6FB1               	movwf	(?_printf+2)& (0+255),b
  8440  000ADA  6BB2               	clrf	(?_printf+3)& (0+255),b
  8441  000ADC  ECEB  F002         	call	_printf	;wreg free
  8442                           
  8443                           ;main.c: 375: break;
  8444  000AE0  D04E               	goto	l4064
  8445  000AE2                     l4048:
  8446                           
  8447                           ;main.c: 377: lcdInst(0b10000000);;
  8448  000AE2  0E80               	movlw	128
  8449  000AE4  ECB1  F014         	call	_lcdInst
  8450                           
  8451                           ;main.c: 378: printf("ESKA With Cap   ");
  8452  000AE8  0EA9               	movlw	low STR_12
  8453  000AEA  0100               	movlb	0	; () banked
  8454  000AEC  6FAF               	movwf	printf@f& (0+255),b
  8455  000AEE  0EFF               	movlw	high STR_12
  8456  000AF0  0100               	movlb	0	; () banked
  8457  000AF2  6FB0               	movwf	(printf@f+1)& (0+255),b
  8458  000AF4  ECEB  F002         	call	_printf	;wreg free
  8459                           
  8460                           ;main.c: 379: lcdInst(0b11000000);;
  8461  000AF8  0EC0               	movlw	192
  8462  000AFA  ECB1  F014         	call	_lcdInst
  8463                           
  8464                           ;main.c: 380: printf("Count: %i       ", bot_count[2]);
  8465  000AFE  0E76               	movlw	low STR_7
  8466  000B00  0100               	movlb	0	; () banked
  8467  000B02  6FAF               	movwf	printf@f& (0+255),b
  8468  000B04  0EFF               	movlw	high STR_7
  8469  000B06  0100               	movlb	0	; () banked
  8470  000B08  6FB0               	movwf	(printf@f+1)& (0+255),b
  8471  000B0A  0100               	movlb	0	; () banked
  8472  000B0C  EE20 F002          	lfsr	2,2
  8473  000B10  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8474  000B12  26D9               	addwf	fsr2l,f,c
  8475  000B14  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8476  000B16  22DA               	addwfc	fsr2h,f,c
  8477  000B18  50DF               	movf	indf2,w,c
  8478  000B1A  0100               	movlb	0	; () banked
  8479  000B1C  6FC7               	movwf	??_bottle_count& (0+255),b
  8480  000B1E  0100               	movlb	0	; () banked
  8481  000B20  51C7               	movf	??_bottle_count& (0+255),w,b
  8482  000B22  0100               	movlb	0	; () banked
  8483  000B24  6FB1               	movwf	(?_printf+2)& (0+255),b
  8484  000B26  6BB2               	clrf	(?_printf+3)& (0+255),b
  8485  000B28  ECEB  F002         	call	_printf	;wreg free
  8486                           
  8487                           ;main.c: 381: break;
  8488  000B2C  D028               	goto	l4064
  8489  000B2E                     l4054:
  8490                           
  8491                           ;main.c: 383: lcdInst(0b10000000);;
  8492  000B2E  0E80               	movlw	128
  8493  000B30  ECB1  F014         	call	_lcdInst
  8494                           
  8495                           ;main.c: 384: printf("ESKA With No Cap");
  8496  000B34  0EED               	movlw	low STR_14
  8497  000B36  0100               	movlb	0	; () banked
  8498  000B38  6FAF               	movwf	printf@f& (0+255),b
  8499  000B3A  0EFF               	movlw	high STR_14
  8500  000B3C  0100               	movlb	0	; () banked
  8501  000B3E  6FB0               	movwf	(printf@f+1)& (0+255),b
  8502  000B40  ECEB  F002         	call	_printf	;wreg free
  8503                           
  8504                           ;main.c: 385: lcdInst(0b11000000);;
  8505  000B44  0EC0               	movlw	192
  8506  000B46  ECB1  F014         	call	_lcdInst
  8507                           
  8508                           ;main.c: 386: printf("Count: %i       "), bot_count[3];
  8509  000B4A  0E76               	movlw	low STR_7
  8510  000B4C  0100               	movlb	0	; () banked
  8511  000B4E  6FAF               	movwf	printf@f& (0+255),b
  8512  000B50  0EFF               	movlw	high STR_7
  8513  000B52  0100               	movlb	0	; () banked
  8514  000B54  6FB0               	movwf	(printf@f+1)& (0+255),b
  8515  000B56  ECEB  F002         	call	_printf	;wreg free
  8516                           
  8517                           ;main.c: 388: }
  8518                           
  8519                           ;main.c: 387: break;
  8520  000B5A  D011               	goto	l4064
  8521  000B5C                     l4062:
  8522  000B5C  0100               	movlb	0	; () banked
  8523  000B5E  51F7               	movf	_bot_type& (0+255),w,b
  8524                           
  8525                           ; Switch size 1, requested type "space"
  8526                           ; Number of cases is 5, Range of values is 0 to 4
  8527                           ; switch strategies available:
  8528                           ; Name         Instructions Cycles
  8529                           ; simple_byte           16     9 (average)
  8530                           ;	Chosen strategy is simple_byte
  8531  000B60  0A00               	xorlw	0	; case 0
  8532  000B62  B4D8               	btfsc	status,2,c
  8533  000B64  D720               	goto	l4030
  8534  000B66  0A01               	xorlw	1	; case 1
  8535  000B68  B4D8               	btfsc	status,2,c
  8536  000B6A  D772               	goto	l4036
  8537  000B6C  0A03               	xorlw	3	; case 2
  8538  000B6E  B4D8               	btfsc	status,2,c
  8539  000B70  D792               	goto	l4042
  8540  000B72  0A01               	xorlw	1	; case 3
  8541  000B74  B4D8               	btfsc	status,2,c
  8542  000B76  D7B5               	goto	l4048
  8543  000B78  0A07               	xorlw	7	; case 4
  8544  000B7A  B4D8               	btfsc	status,2,c
  8545  000B7C  D7D8               	goto	l4054
  8546  000B7E                     l4064:
  8547                           
  8548                           ;main.c: 389: _delay((unsigned long)((100)*(10000000/4000.0)));
  8549  000B7E  0E02               	movlw	2
  8550  000B80  0100               	movlb	0	; () banked
  8551  000B82  6FC8               	movwf	(??_bottle_count+1)& (0+255),b
  8552  000B84  0E45               	movlw	69
  8553  000B86  0100               	movlb	0	; () banked
  8554  000B88  6FC7               	movwf	??_bottle_count& (0+255),b
  8555  000B8A  0EA9               	movlw	169
  8556  000B8C                     u3767:
  8557  000B8C  2EE8               	decfsz	wreg,f,c
  8558  000B8E  D7FE               	bra	u3767
  8559  000B90  2FC7               	decfsz	??_bottle_count& (0+255),f,b
  8560  000B92  D7FC               	bra	u3767
  8561  000B94  2FC8               	decfsz	(??_bottle_count+1)& (0+255),f,b
  8562  000B96  D7FA               	bra	u3767
  8563  000B98  D000               	nop2	
  8564  000B9A                     l4066:
  8565  000B9A  0E05               	movlw	5
  8566  000B9C  0100               	movlb	0	; () banked
  8567  000B9E  19F7               	xorwf	_bot_type& (0+255),w,b
  8568  000BA0  B4D8               	btfsc	status,2,c
  8569  000BA2  0012               	return	
  8570  000BA4  D7DB               	goto	l4062
  8571  000BA6                     __end_of_bottle_count:
  8572                           	opt stack 0
  8573                           tblptru	equ	0xFF8
  8574                           tblptrh	equ	0xFF7
  8575                           tblptrl	equ	0xFF6
  8576                           tablat	equ	0xFF5
  8577                           prodh	equ	0xFF4
  8578                           prodl	equ	0xFF3
  8579                           intcon	equ	0xFF2
  8580                           intcon2	equ	0xFF1
  8581                           intcon3	equ	0xFF0
  8582                           postinc0	equ	0xFEE
  8583                           wreg	equ	0xFE8
  8584                           postdec1	equ	0xFE5
  8585                           fsr1l	equ	0xFE1
  8586                           indf2	equ	0xFDF
  8587                           postinc2	equ	0xFDE
  8588                           postdec2	equ	0xFDD
  8589                           fsr2h	equ	0xFDA
  8590                           fsr2l	equ	0xFD9
  8591                           status	equ	0xFD8
  8592                           
  8593 ;; *************** function _printf *****************
  8594 ;; Defined at:
  8595 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8596 ;; Parameters:    Size  Location     Type
  8597 ;;  f               2   47[BANK0 ] PTR const unsigned char 
  8598 ;;		 -> STR_19(23), STR_18(23), STR_17(17), STR_16(17), 
  8599 ;;		 -> STR_15(17), STR_14(17), STR_13(17), STR_12(17), 
  8600 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  8601 ;;		 -> STR_7(17), STR_6(17), STR_5(19), STR_4(17), 
  8602 ;;		 -> STR_3(20), STR_2(20), STR_1(27), 
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;  idx             1   59[BANK0 ] unsigned char 
  8605 ;;  tmpval          4    0        struct .
  8606 ;;  cp              3    0        PTR const unsigned char 
  8607 ;;  width           2   66[BANK0 ] int 
  8608 ;;  val             2   63[BANK0 ] unsigned int 
  8609 ;;  ap              2   60[BANK0 ] PTR void [1]
  8610 ;;		 -> ?_printf(2), 
  8611 ;;  len             2    0        unsigned int 
  8612 ;;  c               1   68[BANK0 ] char 
  8613 ;;  flag            1   65[BANK0 ] unsigned char 
  8614 ;;  prec            1   62[BANK0 ] char 
  8615 ;; Return value:  Size  Location     Type
  8616 ;;                  2   47[BANK0 ] int 
  8617 ;; Registers used:
  8618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8619 ;; Tracked objects:
  8620 ;;		On entry : 0/0
  8621 ;;		On exit  : 0/0
  8622 ;;		Unchanged: 0/0
  8623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8624 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;Total ram usage:       22 bytes
  8629 ;; Hardware stack levels used:    1
  8630 ;; Hardware stack levels required when called:    3
  8631 ;; This function calls:
  8632 ;;		___lwdiv
  8633 ;;		___lwmod
  8634 ;;		___wmul
  8635 ;;		_isdigit
  8636 ;;		_putch
  8637 ;; This function is called by:
  8638 ;;		_main
  8639 ;;		_init_operation
  8640 ;;		_runtime
  8641 ;;		_bottle_count
  8642 ;;		_operation_end
  8643 ;;		_date_time
  8644 ;; This function uses a non-reentrant model
  8645 ;;
  8646                           
  8647                           	psect	text40
  8648  0005D6                     __ptext40:
  8649                           	opt stack 0
  8650  0005D6                     _printf:
  8651                           	opt stack 26
  8652                           
  8653                           ;doprnt.c: 466: va_list ap;
  8654                           ;doprnt.c: 499: signed char c;
  8655                           ;doprnt.c: 501: int width;
  8656                           ;doprnt.c: 506: signed char prec;
  8657                           ;doprnt.c: 508: unsigned char flag;
  8658                           ;doprnt.c: 523: union {
  8659                           ;doprnt.c: 524: unsigned long vd;
  8660                           ;doprnt.c: 525: double integ;
  8661                           ;doprnt.c: 526: } tmpval;
  8662                           ;doprnt.c: 528: unsigned int val;
  8663                           ;doprnt.c: 529: unsigned len;
  8664                           ;doprnt.c: 530: const char * cp;
  8665                           ;doprnt.c: 533: *ap = __va_start();
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;incstack = 0
  8669  0005D6  0EB1               	movlw	low (?_printf+2)
  8670  0005D8  0100               	movlb	0	; () banked
  8671  0005DA  6FBC               	movwf	printf@ap& (0+255),b
  8672  0005DC  0E00               	movlw	high (?_printf+2)
  8673  0005DE  0100               	movlb	0	; () banked
  8674  0005E0  6FBD               	movwf	(printf@ap+1)& (0+255),b
  8675                           
  8676                           ;doprnt.c: 536: while(c = *f++) {
  8677  0005E2  D1D1               	goto	l3662
  8678  0005E4                     l3532:
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;doprnt.c: 538: if(c != '%')
  8682  0005E4  0E25               	movlw	37
  8683  0005E6  0100               	movlb	0	; () banked
  8684  0005E8  19C4               	xorwf	printf@c& (0+255),w,b
  8685  0005EA  B4D8               	btfsc	status,2,c
  8686  0005EC  D005               	goto	l3536
  8687                           
  8688                           ; BSR set to: 0
  8689                           ;doprnt.c: 540: {
  8690                           ;doprnt.c: 541: (putch(c) );
  8691  0005EE  0100               	movlb	0	; () banked
  8692  0005F0  51C4               	movf	printf@c& (0+255),w,b
  8693  0005F2  ECAB  F014         	call	_putch
  8694                           
  8695                           ;doprnt.c: 542: continue;
  8696  0005F6  D1C7               	goto	l3662
  8697  0005F8                     l3536:
  8698                           
  8699                           ;doprnt.c: 543: }
  8700                           ;doprnt.c: 546: width = 0;
  8701  0005F8  0E00               	movlw	0
  8702  0005FA  0100               	movlb	0	; () banked
  8703  0005FC  6FC3               	movwf	(printf@width+1)& (0+255),b
  8704  0005FE  0E00               	movlw	0
  8705  000600  6FC2               	movwf	printf@width& (0+255),b
  8706                           
  8707                           ;doprnt.c: 548: flag = 0;
  8708  000602  0E00               	movlw	0
  8709  000604  0100               	movlb	0	; () banked
  8710  000606  6FC1               	movwf	printf@flag& (0+255),b
  8711                           
  8712                           ; BSR set to: 0
  8713                           ;doprnt.c: 551: switch(*f) {
  8714                           
  8715                           ;doprnt.c: 550: for(;;) {
  8716  000608  D005               	goto	l3542
  8717  00060A                     l3538:
  8718                           
  8719                           ;doprnt.c: 580: flag |= 0x04;
  8720  00060A  0100               	movlb	0	; () banked
  8721  00060C  85C1               	bsf	printf@flag& (0+255),2,b
  8722                           
  8723                           ;doprnt.c: 581: f++;
  8724  00060E  0100               	movlb	0	; () banked
  8725  000610  4BAF               	infsnz	printf@f& (0+255),f,b
  8726  000612  2BB0               	incf	(printf@f+1)& (0+255),f,b
  8727  000614                     l3542:
  8728  000614  C0AF  FFF6         	movff	printf@f,tblptrl
  8729  000618  C0B0  FFF7         	movff	printf@f+1,tblptrh
  8730  00061C                     	if	0	;tblptru may be non-zero
  8731  00061C                     	endif
  8732  00061C                     	if	0	;tblptru may be non-zero
  8733  00061C                     	endif
  8734  00061C  0008               	tblrd		*
  8735  00061E  50F5               	movf	tablat,w,c
  8736                           
  8737                           ; Switch size 1, requested type "space"
  8738                           ; Number of cases is 1, Range of values is 48 to 48
  8739                           ; switch strategies available:
  8740                           ; Name         Instructions Cycles
  8741                           ; simple_byte            4     3 (average)
  8742                           ;	Chosen strategy is simple_byte
  8743  000620  0A30               	xorlw	48	; case 48
  8744  000622  B4D8               	btfsc	status,2,c
  8745  000624  D7F2               	goto	l3538
  8746                           
  8747                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8748                           
  8749                           ;doprnt.c: 586: }
  8750                           
  8751                           ;doprnt.c: 585: break;
  8752  000626  C0AF  FFF6         	movff	printf@f,tblptrl
  8753  00062A  C0B0  FFF7         	movff	printf@f+1,tblptrh
  8754  00062E                     	if	0	;tblptru may be non-zero
  8755  00062E                     	endif
  8756  00062E                     	if	0	;tblptru may be non-zero
  8757  00062E                     	endif
  8758  00062E  0008               	tblrd		*
  8759  000630  50F5               	movf	tablat,w,c
  8760  000632  EC8B  F014         	call	_isdigit
  8761  000636  A0D8               	btfss	status,0,c
  8762  000638  D047               	goto	l3562
  8763                           
  8764                           ;doprnt.c: 598: width = 0;
  8765  00063A  0E00               	movlw	0
  8766  00063C  0100               	movlb	0	; () banked
  8767  00063E  6FC3               	movwf	(printf@width+1)& (0+255),b
  8768  000640  0E00               	movlw	0
  8769  000642  6FC2               	movwf	printf@width& (0+255),b
  8770  000644                     l3548:
  8771                           
  8772                           ;doprnt.c: 600: width *= 10;
  8773  000644  C0C2  F011         	movff	printf@width,___wmul@multiplier
  8774  000648  C0C3  F012         	movff	printf@width+1,___wmul@multiplier+1
  8775  00064C  0E00               	movlw	0
  8776  00064E  6E14               	movwf	___wmul@multiplicand+1,c
  8777  000650  0E0A               	movlw	10
  8778  000652  6E13               	movwf	___wmul@multiplicand,c
  8779  000654  EC66  F014         	call	___wmul	;wreg free
  8780  000658  C011  F0C2         	movff	?___wmul,printf@width
  8781  00065C  C012  F0C3         	movff	?___wmul+1,printf@width+1
  8782                           
  8783                           ;doprnt.c: 601: width += *f++ - '0';
  8784  000660  0ED0               	movlw	208
  8785  000662  0100               	movlb	0	; () banked
  8786  000664  6FB7               	movwf	??_printf& (0+255),b
  8787  000666  0EFF               	movlw	255
  8788  000668  0100               	movlb	0	; () banked
  8789  00066A  6FB8               	movwf	(??_printf+1)& (0+255),b
  8790  00066C  C0AF  FFF6         	movff	printf@f,tblptrl
  8791  000670  C0B0  FFF7         	movff	printf@f+1,tblptrh
  8792  000674                     	if	0	;tblptru may be non-zero
  8793  000674                     	endif
  8794  000674                     	if	0	;tblptru may be non-zero
  8795  000674                     	endif
  8796  000674  0008               	tblrd		*
  8797  000676  50F5               	movf	tablat,w,c
  8798  000678  0100               	movlb	0	; () banked
  8799  00067A  6FB9               	movwf	(??_printf+2)& (0+255),b
  8800  00067C  6BBA               	clrf	(??_printf+3)& (0+255),b
  8801  00067E  0100               	movlb	0	; () banked
  8802  000680  51B7               	movf	??_printf& (0+255),w,b
  8803  000682  0100               	movlb	0	; () banked
  8804  000684  27B9               	addwf	(??_printf+2)& (0+255),f,b
  8805  000686  0100               	movlb	0	; () banked
  8806  000688  51B8               	movf	(??_printf+1)& (0+255),w,b
  8807  00068A  0100               	movlb	0	; () banked
  8808  00068C  23BA               	addwfc	(??_printf+3)& (0+255),f,b
  8809  00068E  0100               	movlb	0	; () banked
  8810  000690  51B9               	movf	(??_printf+2)& (0+255),w,b
  8811  000692  0100               	movlb	0	; () banked
  8812  000694  27C2               	addwf	printf@width& (0+255),f,b
  8813  000696  0100               	movlb	0	; () banked
  8814  000698  51BA               	movf	(??_printf+3)& (0+255),w,b
  8815  00069A  0100               	movlb	0	; () banked
  8816  00069C  23C3               	addwfc	(printf@width+1)& (0+255),f,b
  8817                           
  8818                           ; BSR set to: 0
  8819  00069E  0100               	movlb	0	; () banked
  8820  0006A0  4BAF               	infsnz	printf@f& (0+255),f,b
  8821  0006A2  2BB0               	incf	(printf@f+1)& (0+255),f,b
  8822                           
  8823                           ; BSR set to: 0
  8824                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8825  0006A4  C0AF  FFF6         	movff	printf@f,tblptrl
  8826  0006A8  C0B0  FFF7         	movff	printf@f+1,tblptrh
  8827  0006AC                     	if	0	;tblptru may be non-zero
  8828  0006AC                     	endif
  8829  0006AC                     	if	0	;tblptru may be non-zero
  8830  0006AC                     	endif
  8831  0006AC  0008               	tblrd		*
  8832  0006AE  50F5               	movf	tablat,w,c
  8833  0006B0  EC8B  F014         	call	_isdigit
  8834  0006B4  A0D8               	btfss	status,0,c
  8835  0006B6  D008               	goto	l3562
  8836  0006B8  D7C5               	goto	l3548
  8837  0006BA                     l3556:
  8838                           
  8839                           ;doprnt.c: 721: flag |= 0x80;
  8840  0006BA  0100               	movlb	0	; () banked
  8841  0006BC  8FC1               	bsf	printf@flag& (0+255),7,b
  8842                           
  8843                           ;doprnt.c: 723: break;
  8844  0006BE  D020               	goto	l3564
  8845  0006C0                     l3558:
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;doprnt.c: 818: flag |= 0xC0;
  8849  0006C0  0EC0               	movlw	192
  8850  0006C2  0100               	movlb	0	; () banked
  8851  0006C4  13C1               	iorwf	printf@flag& (0+255),f,b
  8852                           
  8853                           ; BSR set to: 0
  8854                           ;doprnt.c: 822: }
  8855                           
  8856                           ;doprnt.c: 819: break;
  8857  0006C6  D01C               	goto	l3564
  8858  0006C8                     l3562:
  8859  0006C8  C0AF  FFF6         	movff	printf@f,tblptrl
  8860  0006CC  C0B0  FFF7         	movff	printf@f+1,tblptrh
  8861  0006D0  0100               	movlb	0	; () banked
  8862  0006D2  4BAF               	infsnz	printf@f& (0+255),f,b
  8863  0006D4  2BB0               	incf	(printf@f+1)& (0+255),f,b
  8864  0006D6                     	if	0	;tblptru may be non-zero
  8865  0006D6                     	endif
  8866  0006D6                     	if	0	;tblptru may be non-zero
  8867  0006D6                     	endif
  8868  0006D6  0008               	tblrd		*
  8869  0006D8  CFF5 F0C4          	movff	tablat,printf@c
  8870  0006DC  0100               	movlb	0	; () banked
  8871  0006DE  51C4               	movf	printf@c& (0+255),w,b
  8872                           
  8873                           ; Switch size 1, requested type "space"
  8874                           ; Number of cases is 5, Range of values is 0 to 120
  8875                           ; switch strategies available:
  8876                           ; Name         Instructions Cycles
  8877                           ; simple_byte           16     9 (average)
  8878                           ;	Chosen strategy is simple_byte
  8879  0006E0  0A00               	xorlw	0	; case 0
  8880  0006E2  B4D8               	btfsc	status,2,c
  8881  0006E4  0012               	return	
  8882  0006E6  0A64               	xorlw	100	; case 100
  8883  0006E8  B4D8               	btfsc	status,2,c
  8884  0006EA  D00A               	goto	l3564
  8885  0006EC  0A0D               	xorlw	13	; case 105
  8886  0006EE  B4D8               	btfsc	status,2,c
  8887  0006F0  D007               	goto	l3564
  8888  0006F2  0A1C               	xorlw	28	; case 117
  8889  0006F4  B4D8               	btfsc	status,2,c
  8890  0006F6  D7E4               	goto	l3558
  8891  0006F8  0A0D               	xorlw	13	; case 120
  8892  0006FA  B4D8               	btfsc	status,2,c
  8893  0006FC  D7DE               	goto	l3556
  8894  0006FE  D143               	goto	l3662
  8895  000700                     l3564:
  8896                           
  8897                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  8898  000700  C0C1  F0B7         	movff	printf@flag,??_printf
  8899  000704  0EC0               	movlw	192
  8900  000706  0100               	movlb	0	; () banked
  8901  000708  17B7               	andwf	??_printf& (0+255),f,b
  8902  00070A  A4D8               	btfss	status,2,c
  8903  00070C  D019               	goto	l3576
  8904                           
  8905                           ; BSR set to: 0
  8906                           ;doprnt.c: 1253: {
  8907                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8908  00070E  C0BC  FFD9         	movff	printf@ap,fsr2l
  8909  000712  C0BD  FFDA         	movff	printf@ap+1,fsr2h
  8910  000716  CFDE F0BF          	movff	postinc2,printf@val
  8911  00071A  CFDD F0C0          	movff	postdec2,printf@val+1
  8912                           
  8913                           ; BSR set to: 0
  8914  00071E  0E02               	movlw	2
  8915  000720  0100               	movlb	0	; () banked
  8916  000722  27BC               	addwf	printf@ap& (0+255),f,b
  8917  000724  0E00               	movlw	0
  8918  000726  23BD               	addwfc	(printf@ap+1)& (0+255),f,b
  8919                           
  8920                           ; BSR set to: 0
  8921                           ;doprnt.c: 1261: if((int)val < 0) {
  8922  000728  0100               	movlb	0	; () banked
  8923  00072A  AFC0               	btfss	(printf@val+1)& (0+255),7,b
  8924  00072C  D053               	goto	l3610
  8925                           
  8926                           ; BSR set to: 0
  8927                           ;doprnt.c: 1262: flag |= 0x03;
  8928  00072E  0E03               	movlw	3
  8929  000730  0100               	movlb	0	; () banked
  8930  000732  13C1               	iorwf	printf@flag& (0+255),f,b
  8931                           
  8932                           ; BSR set to: 0
  8933                           ;doprnt.c: 1263: val = -val;
  8934  000734  0100               	movlb	0	; () banked
  8935  000736  6DBF               	negf	printf@val& (0+255),b
  8936  000738  1FC0               	comf	(printf@val+1)& (0+255),f,b
  8937  00073A  B0D8               	btfsc	status,0,c
  8938  00073C  2BC0               	incf	(printf@val+1)& (0+255),f,b
  8939                           
  8940                           ; BSR set to: 0
  8941                           ;doprnt.c: 1264: }
  8942                           ;doprnt.c: 1266: }
  8943  00073E  D04A               	goto	l3610
  8944  000740                     l3576:
  8945                           
  8946                           ; BSR set to: 0
  8947                           ;doprnt.c: 1268: else
  8948                           ;doprnt.c: 1273: {
  8949                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8950  000740  C0BC  FFD9         	movff	printf@ap,fsr2l
  8951  000744  C0BD  FFDA         	movff	printf@ap+1,fsr2h
  8952  000748  CFDE F0BF          	movff	postinc2,printf@val
  8953  00074C  CFDD F0C0          	movff	postdec2,printf@val+1
  8954                           
  8955                           ; BSR set to: 0
  8956  000750  0E02               	movlw	2
  8957  000752  0100               	movlb	0	; () banked
  8958  000754  27BC               	addwf	printf@ap& (0+255),f,b
  8959  000756  0E00               	movlw	0
  8960  000758  23BD               	addwfc	(printf@ap+1)& (0+255),f,b
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;doprnt.c: 1287: }
  8964                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  8965  00075A  D03C               	goto	l3610
  8966  00075C                     l3580:
  8967                           
  8968                           ; BSR set to: 0
  8969                           ;doprnt.c: 1302: case 0xC0:
  8970                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8971  00075C  0E01               	movlw	1
  8972  00075E  0100               	movlb	0	; () banked
  8973  000760  6FC4               	movwf	printf@c& (0+255),b
  8974  000762                     l3582:
  8975                           
  8976                           ; BSR set to: 0
  8977  000762  0E05               	movlw	5
  8978  000764  0100               	movlb	0	; () banked
  8979  000766  19C4               	xorwf	printf@c& (0+255),w,b
  8980  000768  B4D8               	btfsc	status,2,c
  8981  00076A  D040               	goto	l3612
  8982                           
  8983                           ; BSR set to: 0
  8984                           ;doprnt.c: 1306: if(val < dpowers[c])
  8985                           
  8986                           ; BSR set to: 0
  8987                           
  8988                           ; BSR set to: 0
  8989  00076C  0100               	movlb	0	; () banked
  8990  00076E  51C4               	movf	printf@c& (0+255),w,b
  8991  000770  0D02               	mullw	2
  8992  000772  0E92               	movlw	low _dpowers
  8993  000774  24F3               	addwf	prodl,w,c
  8994  000776  6EF6               	movwf	tblptrl,c
  8995  000778  0EFE               	movlw	high _dpowers
  8996  00077A  20F4               	addwfc	prodh,w,c
  8997  00077C  6EF7               	movwf	tblptrh,c
  8998  00077E                     	if	0	;There are less than 3 active tblptr bytes
  8999  00077E                     	endif
  9000  00077E  0009               	tblrd		*+
  9001  000780  50F5               	movf	tablat,w,c
  9002  000782  0100               	movlb	0	; () banked
  9003  000784  5DBF               	subwf	printf@val& (0+255),w,b
  9004  000786  0009               	tblrd		*+
  9005  000788  50F5               	movf	tablat,w,c
  9006  00078A  0100               	movlb	0	; () banked
  9007  00078C  59C0               	subwfb	(printf@val+1)& (0+255),w,b
  9008  00078E  A0D8               	btfss	status,0,c
  9009  000790  D02D               	goto	l3612
  9010                           
  9011                           ; BSR set to: 0
  9012                           
  9013                           ; BSR set to: 0
  9014                           
  9015                           ; BSR set to: 0
  9016                           ;doprnt.c: 1307: break;
  9017  000792  0100               	movlb	0	; () banked
  9018  000794  2BC4               	incf	printf@c& (0+255),f,b
  9019  000796  D7E5               	goto	l3582
  9020  000798                     l3594:
  9021                           
  9022                           ; BSR set to: 0
  9023                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9024  000798  0E01               	movlw	1
  9025  00079A  0100               	movlb	0	; () banked
  9026  00079C  6FC4               	movwf	printf@c& (0+255),b
  9027  00079E                     l3596:
  9028                           
  9029                           ; BSR set to: 0
  9030  00079E  0E04               	movlw	4
  9031  0007A0  0100               	movlb	0	; () banked
  9032  0007A2  19C4               	xorwf	printf@c& (0+255),w,b
  9033  0007A4  B4D8               	btfsc	status,2,c
  9034  0007A6  D022               	goto	l3612
  9035                           
  9036                           ; BSR set to: 0
  9037                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9038                           
  9039                           ; BSR set to: 0
  9040                           
  9041                           ; BSR set to: 0
  9042  0007A8  0100               	movlb	0	; () banked
  9043  0007AA  51C4               	movf	printf@c& (0+255),w,b
  9044  0007AC  0D02               	mullw	2
  9045  0007AE  0E9C               	movlw	low _hexpowers
  9046  0007B0  24F3               	addwf	prodl,w,c
  9047  0007B2  6EF6               	movwf	tblptrl,c
  9048  0007B4  0EFE               	movlw	high _hexpowers
  9049  0007B6  20F4               	addwfc	prodh,w,c
  9050  0007B8  6EF7               	movwf	tblptrh,c
  9051  0007BA                     	if	0	;There are less than 3 active tblptr bytes
  9052  0007BA                     	endif
  9053  0007BA  0009               	tblrd		*+
  9054  0007BC  50F5               	movf	tablat,w,c
  9055  0007BE  0100               	movlb	0	; () banked
  9056  0007C0  5DBF               	subwf	printf@val& (0+255),w,b
  9057  0007C2  0009               	tblrd		*+
  9058  0007C4  50F5               	movf	tablat,w,c
  9059  0007C6  0100               	movlb	0	; () banked
  9060  0007C8  59C0               	subwfb	(printf@val+1)& (0+255),w,b
  9061  0007CA  A0D8               	btfss	status,0,c
  9062  0007CC  D00F               	goto	l3612
  9063                           
  9064                           ; BSR set to: 0
  9065                           
  9066                           ; BSR set to: 0
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;doprnt.c: 1318: break;
  9070  0007CE  0100               	movlb	0	; () banked
  9071  0007D0  2BC4               	incf	printf@c& (0+255),f,b
  9072  0007D2  D7E5               	goto	l3596
  9073  0007D4                     l3610:
  9074                           
  9075                           ; BSR set to: 0
  9076  0007D4  0100               	movlb	0	; () banked
  9077  0007D6  51C1               	movf	printf@flag& (0+255),w,b
  9078  0007D8  0BC0               	andlw	192
  9079                           
  9080                           ; Switch size 1, requested type "space"
  9081                           ; Number of cases is 3, Range of values is 0 to 192
  9082                           ; switch strategies available:
  9083                           ; Name         Instructions Cycles
  9084                           ; simple_byte           10     6 (average)
  9085                           ;	Chosen strategy is simple_byte
  9086  0007DA  0A00               	xorlw	0	; case 0
  9087  0007DC  B4D8               	btfsc	status,2,c
  9088  0007DE  D7BE               	goto	l3580
  9089  0007E0  0A80               	xorlw	128	; case 128
  9090  0007E2  B4D8               	btfsc	status,2,c
  9091  0007E4  D7D9               	goto	l3594
  9092  0007E6  0A40               	xorlw	64	; case 192
  9093  0007E8  B4D8               	btfsc	status,2,c
  9094  0007EA  D7B8               	goto	l3580
  9095  0007EC                     l3612:
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9099  0007EC  0100               	movlb	0	; () banked
  9100  0007EE  51C2               	movf	printf@width& (0+255),w,b
  9101  0007F0  0100               	movlb	0	; () banked
  9102  0007F2  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  9103  0007F4  B4D8               	btfsc	status,2,c
  9104  0007F6  D00B               	goto	l3618
  9105                           
  9106                           ; BSR set to: 0
  9107  0007F8  C0C1  F0B7         	movff	printf@flag,??_printf
  9108  0007FC  0E03               	movlw	3
  9109  0007FE  0100               	movlb	0	; () banked
  9110  000800  17B7               	andwf	??_printf& (0+255),f,b
  9111  000802  B4D8               	btfsc	status,2,c
  9112  000804  D004               	goto	l3618
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;doprnt.c: 1346: width--;
  9116  000806  0100               	movlb	0	; () banked
  9117  000808  07C2               	decf	printf@width& (0+255),f,b
  9118  00080A  A0D8               	btfss	status,0,c
  9119  00080C  07C3               	decf	(printf@width+1)& (0+255),f,b
  9120  00080E                     l3618:
  9121                           
  9122                           ; BSR set to: 0
  9123                           ;doprnt.c: 1381: if(width > c)
  9124  00080E  0E80               	movlw	128
  9125  000810  0100               	movlb	0	; () banked
  9126  000812  BFC4               	btfsc	printf@c& (0+255),7,b
  9127  000814  0E7F               	movlw	127
  9128  000816  0100               	movlb	0	; () banked
  9129  000818  6FB7               	movwf	??_printf& (0+255),b
  9130  00081A  0100               	movlb	0	; () banked
  9131  00081C  51C2               	movf	printf@width& (0+255),w,b
  9132  00081E  0100               	movlb	0	; () banked
  9133  000820  5DC4               	subwf	printf@c& (0+255),w,b
  9134  000822  0100               	movlb	0	; () banked
  9135  000824  51C3               	movf	(printf@width+1)& (0+255),w,b
  9136  000826  0A80               	xorlw	128
  9137  000828  0100               	movlb	0	; () banked
  9138  00082A  59B7               	subwfb	??_printf& (0+255),w,b
  9139  00082C  B0D8               	btfsc	status,0,c
  9140  00082E  D00B               	goto	l3622
  9141                           
  9142                           ; BSR set to: 0
  9143                           ;doprnt.c: 1382: width -= c;
  9144  000830  0100               	movlb	0	; () banked
  9145  000832  51C4               	movf	printf@c& (0+255),w,b
  9146  000834  0100               	movlb	0	; () banked
  9147  000836  5FC2               	subwf	printf@width& (0+255),f,b
  9148  000838  0E00               	movlw	0
  9149  00083A  0100               	movlb	0	; () banked
  9150  00083C  BFC4               	btfsc	printf@c& (0+255),7,b
  9151  00083E  0EFF               	movlw	255
  9152  000840  0100               	movlb	0	; () banked
  9153  000842  5BC3               	subwfb	(printf@width+1)& (0+255),f,b
  9154  000844  D005               	goto	l3624
  9155  000846                     l3622:
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;doprnt.c: 1383: else
  9159                           ;doprnt.c: 1384: width = 0;
  9160  000846  0E00               	movlw	0
  9161  000848  0100               	movlb	0	; () banked
  9162  00084A  6FC3               	movwf	(printf@width+1)& (0+255),b
  9163  00084C  0E00               	movlw	0
  9164  00084E  6FC2               	movwf	printf@width& (0+255),b
  9165  000850                     l3624:
  9166                           
  9167                           ; BSR set to: 0
  9168                           ;doprnt.c: 1387: if(flag & 0x04) {
  9169  000850  0100               	movlb	0	; () banked
  9170  000852  A5C1               	btfss	printf@flag& (0+255),2,b
  9171  000854  D018               	goto	l3636
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;doprnt.c: 1392: if(flag & 0x03)
  9175  000856  C0C1  F0B7         	movff	printf@flag,??_printf
  9176  00085A  0E03               	movlw	3
  9177  00085C  0100               	movlb	0	; () banked
  9178  00085E  17B7               	andwf	??_printf& (0+255),f,b
  9179  000860  B4D8               	btfsc	status,2,c
  9180  000862  D003               	goto	l3630
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;doprnt.c: 1393: (putch('-') );
  9184  000864  0E2D               	movlw	45
  9185  000866  ECAB  F014         	call	_putch
  9186  00086A                     l3630:
  9187                           
  9188                           ;doprnt.c: 1415: if(width)
  9189  00086A  0100               	movlb	0	; () banked
  9190  00086C  51C2               	movf	printf@width& (0+255),w,b
  9191  00086E  0100               	movlb	0	; () banked
  9192  000870  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  9193  000872  B4D8               	btfsc	status,2,c
  9194  000874  D025               	goto	l3646
  9195                           
  9196                           ; BSR set to: 0
  9197                           ;doprnt.c: 1417: (putch('0') );
  9198                           
  9199                           ; BSR set to: 0
  9200                           
  9201                           ;doprnt.c: 1416: do
  9202  000876  0E30               	movlw	48
  9203  000878  ECAB  F014         	call	_putch
  9204                           
  9205                           ;doprnt.c: 1418: while(--width);
  9206  00087C  0100               	movlb	0	; () banked
  9207  00087E  07C2               	decf	printf@width& (0+255),f,b
  9208  000880  A0D8               	btfss	status,0,c
  9209  000882  07C3               	decf	(printf@width+1)& (0+255),f,b
  9210  000884  D7F2               	goto	l3630
  9211  000886                     l3636:
  9212                           
  9213                           ; BSR set to: 0
  9214                           ;doprnt.c: 1422: {
  9215                           ;doprnt.c: 1424: if(width
  9216                           ;doprnt.c: 1428: )
  9217  000886  0100               	movlb	0	; () banked
  9218  000888  51C2               	movf	printf@width& (0+255),w,b
  9219  00088A  0100               	movlb	0	; () banked
  9220  00088C  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  9221  00088E  B4D8               	btfsc	status,2,c
  9222  000890  D00D               	goto	l3642
  9223  000892                     l3638:
  9224                           
  9225                           ; BSR set to: 0
  9226                           ;doprnt.c: 1430: (putch(' ') );
  9227  000892  0E20               	movlw	32
  9228  000894  ECAB  F014         	call	_putch
  9229                           
  9230                           ;doprnt.c: 1431: while(--width);
  9231  000898  0100               	movlb	0	; () banked
  9232  00089A  07C2               	decf	printf@width& (0+255),f,b
  9233  00089C  A0D8               	btfss	status,0,c
  9234  00089E  07C3               	decf	(printf@width+1)& (0+255),f,b
  9235  0008A0  0100               	movlb	0	; () banked
  9236  0008A2  51C2               	movf	printf@width& (0+255),w,b
  9237  0008A4  0100               	movlb	0	; () banked
  9238  0008A6  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  9239  0008A8  A4D8               	btfss	status,2,c
  9240  0008AA  D7F3               	goto	l3638
  9241  0008AC                     l3642:
  9242                           
  9243                           ; BSR set to: 0
  9244                           ;doprnt.c: 1438: if(flag & 0x03)
  9245  0008AC  C0C1  F0B7         	movff	printf@flag,??_printf
  9246  0008B0  0E03               	movlw	3
  9247  0008B2  0100               	movlb	0	; () banked
  9248  0008B4  17B7               	andwf	??_printf& (0+255),f,b
  9249  0008B6  B4D8               	btfsc	status,2,c
  9250  0008B8  D003               	goto	l3646
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;doprnt.c: 1439: (putch('-') );
  9254  0008BA  0E2D               	movlw	45
  9255  0008BC  ECAB  F014         	call	_putch
  9256  0008C0                     l3646:
  9257                           
  9258                           ;doprnt.c: 1469: }
  9259                           ;doprnt.c: 1472: prec = c;
  9260  0008C0  C0C4  F0BE         	movff	printf@c,printf@prec
  9261                           
  9262                           ;doprnt.c: 1474: while(prec--) {
  9263  0008C4  D05A               	goto	l3660
  9264  0008C6                     l3648:
  9265                           
  9266                           ;doprnt.c: 1486: case 0xC0:
  9267                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9268  0008C6  0100               	movlb	0	; () banked
  9269  0008C8  51BE               	movf	printf@prec& (0+255),w,b
  9270  0008CA  0D02               	mullw	2
  9271  0008CC  0E92               	movlw	low _dpowers
  9272  0008CE  24F3               	addwf	prodl,w,c
  9273  0008D0  6EF6               	movwf	tblptrl,c
  9274  0008D2  0EFE               	movlw	high _dpowers
  9275  0008D4  20F4               	addwfc	prodh,w,c
  9276  0008D6  6EF7               	movwf	tblptrh,c
  9277  0008D8                     	if	0	;There are less than 3 active tblptr bytes
  9278  0008D8                     	endif
  9279  0008D8  0009               	tblrd		*+
  9280  0008DA  CFF5 F013          	movff	tablat,___lwdiv@divisor
  9281  0008DE  000A               	tblrd		*-
  9282  0008E0  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  9283  0008E4  C0BF  F011         	movff	printf@val,___lwdiv@dividend
  9284  0008E8  C0C0  F012         	movff	printf@val+1,___lwdiv@dividend+1
  9285  0008EC  EC1F  F013         	call	___lwdiv	;wreg free
  9286  0008F0  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  9287  0008F4  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  9288  0008F8  0E00               	movlw	0
  9289  0008FA  6E1B               	movwf	___lwmod@divisor+1,c
  9290  0008FC  0E0A               	movlw	10
  9291  0008FE  6E1A               	movwf	___lwmod@divisor,c
  9292  000900  ECD9  F013         	call	___lwmod	;wreg free
  9293  000904  5018               	movf	?___lwmod,w,c
  9294  000906  0F30               	addlw	48
  9295  000908  0100               	movlb	0	; () banked
  9296  00090A  6FC4               	movwf	printf@c& (0+255),b
  9297                           
  9298                           ;doprnt.c: 1491: break;
  9299  00090C  D032               	goto	l3658
  9300  00090E                     l3650:
  9301                           
  9302                           ; BSR set to: 0
  9303                           ;doprnt.c: 1499: {
  9304                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9305  00090E  C0BF  F011         	movff	printf@val,___lwdiv@dividend
  9306  000912  C0C0  F012         	movff	printf@val+1,___lwdiv@dividend+1
  9307  000916  0100               	movlb	0	; () banked
  9308  000918  51BE               	movf	printf@prec& (0+255),w,b
  9309  00091A  0D02               	mullw	2
  9310  00091C  0E9C               	movlw	low _hexpowers
  9311  00091E  24F3               	addwf	prodl,w,c
  9312  000920  6EF6               	movwf	tblptrl,c
  9313  000922  0EFE               	movlw	high _hexpowers
  9314  000924  20F4               	addwfc	prodh,w,c
  9315  000926  6EF7               	movwf	tblptrh,c
  9316  000928                     	if	0	;There are less than 3 active tblptr bytes
  9317  000928                     	endif
  9318  000928  0009               	tblrd		*+
  9319  00092A  CFF5 F013          	movff	tablat,___lwdiv@divisor
  9320  00092E  000A               	tblrd		*-
  9321  000930  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  9322  000934  EC1F  F013         	call	___lwdiv	;wreg free
  9323  000938  5011               	movf	?___lwdiv,w,c
  9324  00093A  0B0F               	andlw	15
  9325  00093C  0100               	movlb	0	; () banked
  9326  00093E  6FBB               	movwf	printf@idx& (0+255),b
  9327                           
  9328                           ; BSR set to: 0
  9329                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  9330  000940  0100               	movlb	0	; () banked
  9331  000942  51BB               	movf	printf@idx& (0+255),w,b
  9332  000944  0D01               	mullw	1
  9333  000946  0E54               	movlw	low STR_20
  9334  000948  24F3               	addwf	prodl,w,c
  9335  00094A  6EF6               	movwf	tblptrl,c
  9336  00094C  0EFF               	movlw	high STR_20
  9337  00094E  20F4               	addwfc	prodh,w,c
  9338  000950  6EF7               	movwf	tblptrh,c
  9339  000952                     	if	0	;There are less than 3 active tblptr bytes
  9340  000952                     	endif
  9341  000952  0008               	tblrd		*
  9342  000954  CFF5 F0C4          	movff	tablat,printf@c
  9343                           
  9344                           ; BSR set to: 0
  9345                           ;doprnt.c: 1523: }
  9346                           
  9347                           ;doprnt.c: 1508: }
  9348                           ;doprnt.c: 1510: break;
  9349  000958  D00C               	goto	l3658
  9350  00095A                     l3656:
  9351  00095A  0100               	movlb	0	; () banked
  9352  00095C  51C1               	movf	printf@flag& (0+255),w,b
  9353  00095E  0BC0               	andlw	192
  9354                           
  9355                           ; Switch size 1, requested type "space"
  9356                           ; Number of cases is 3, Range of values is 0 to 192
  9357                           ; switch strategies available:
  9358                           ; Name         Instructions Cycles
  9359                           ; simple_byte           10     6 (average)
  9360                           ;	Chosen strategy is simple_byte
  9361  000960  0A00               	xorlw	0	; case 0
  9362  000962  B4D8               	btfsc	status,2,c
  9363  000964  D7B0               	goto	l3648
  9364  000966  0A80               	xorlw	128	; case 128
  9365  000968  B4D8               	btfsc	status,2,c
  9366  00096A  D7D1               	goto	l3650
  9367  00096C  0A40               	xorlw	64	; case 192
  9368  00096E  B4D8               	btfsc	status,2,c
  9369  000970  D7AA               	goto	l3648
  9370  000972                     l3658:
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;doprnt.c: 1524: (putch(c) );
  9374  000972  0100               	movlb	0	; () banked
  9375  000974  51C4               	movf	printf@c& (0+255),w,b
  9376  000976  ECAB  F014         	call	_putch
  9377  00097A                     l3660:
  9378  00097A  0100               	movlb	0	; () banked
  9379  00097C  07BE               	decf	printf@prec& (0+255),f,b
  9380  00097E  0100               	movlb	0	; () banked
  9381  000980  29BE               	incf	printf@prec& (0+255),w,b
  9382  000982  A4D8               	btfss	status,2,c
  9383  000984  D7EA               	goto	l3656
  9384  000986                     l3662:
  9385  000986  C0AF  FFF6         	movff	printf@f,tblptrl
  9386  00098A  C0B0  FFF7         	movff	printf@f+1,tblptrh
  9387  00098E  0100               	movlb	0	; () banked
  9388  000990  4BAF               	infsnz	printf@f& (0+255),f,b
  9389  000992  2BB0               	incf	(printf@f+1)& (0+255),f,b
  9390  000994                     	if	0	;tblptru may be non-zero
  9391  000994                     	endif
  9392  000994                     	if	0	;tblptru may be non-zero
  9393  000994                     	endif
  9394  000994  0008               	tblrd		*
  9395  000996  CFF5 F0C4          	movff	tablat,printf@c
  9396  00099A  0100               	movlb	0	; () banked
  9397  00099C  51C4               	movf	printf@c& (0+255),w,b
  9398  00099E  B4D8               	btfsc	status,2,c
  9399  0009A0  0012               	return	
  9400  0009A2  D620               	goto	l3532
  9401  0009A4                     __end_of_printf:
  9402                           	opt stack 0
  9403                           tblptru	equ	0xFF8
  9404                           tblptrh	equ	0xFF7
  9405                           tblptrl	equ	0xFF6
  9406                           tablat	equ	0xFF5
  9407                           prodh	equ	0xFF4
  9408                           prodl	equ	0xFF3
  9409                           intcon	equ	0xFF2
  9410                           intcon2	equ	0xFF1
  9411                           intcon3	equ	0xFF0
  9412                           postinc0	equ	0xFEE
  9413                           wreg	equ	0xFE8
  9414                           postdec1	equ	0xFE5
  9415                           fsr1l	equ	0xFE1
  9416                           indf2	equ	0xFDF
  9417                           postinc2	equ	0xFDE
  9418                           postdec2	equ	0xFDD
  9419                           fsr2h	equ	0xFDA
  9420                           fsr2l	equ	0xFD9
  9421                           status	equ	0xFD8
  9422                           
  9423 ;; *************** function _putch *****************
  9424 ;; Defined at:
  9425 ;;		line 30 in file "lcd.c"
  9426 ;; Parameters:    Size  Location     Type
  9427 ;;  data            1    wreg     unsigned char 
  9428 ;; Auto vars:     Size  Location     Type
  9429 ;;  data            1   18[COMRAM] unsigned char 
  9430 ;; Return value:  Size  Location     Type
  9431 ;;                  1    wreg      void 
  9432 ;; Registers used:
  9433 ;;		wreg, status,2, status,0, cstack
  9434 ;; Tracked objects:
  9435 ;;		On entry : 0/0
  9436 ;;		On exit  : 0/0
  9437 ;;		Unchanged: 0/0
  9438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9442 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9443 ;;Total ram usage:        1 bytes
  9444 ;; Hardware stack levels used:    1
  9445 ;; Hardware stack levels required when called:    2
  9446 ;; This function calls:
  9447 ;;		_lcdNibble
  9448 ;; This function is called by:
  9449 ;;		_printf
  9450 ;; This function uses a non-reentrant model
  9451 ;;
  9452                           
  9453                           	psect	text41
  9454  002956                     __ptext41:
  9455                           	opt stack 0
  9456  002956                     _putch:
  9457                           	opt stack 26
  9458                           
  9459                           ;incstack = 0
  9460                           ;putch@data stored from wreg
  9461  002956  6E13               	movwf	putch@data,c
  9462                           
  9463                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  9464  002958  848C               	bsf	3980,2,c	;volatile
  9465                           
  9466                           ;lcd.c: 32: lcdNibble(data);
  9467  00295A  5013               	movf	putch@data,w,c
  9468  00295C  EC48  F013         	call	_lcdNibble
  9469  002960  0012               	return		;funcret
  9470  002962                     __end_of_putch:
  9471                           	opt stack 0
  9472                           tblptru	equ	0xFF8
  9473                           tblptrh	equ	0xFF7
  9474                           tblptrl	equ	0xFF6
  9475                           tablat	equ	0xFF5
  9476                           prodh	equ	0xFF4
  9477                           prodl	equ	0xFF3
  9478                           intcon	equ	0xFF2
  9479                           intcon2	equ	0xFF1
  9480                           intcon3	equ	0xFF0
  9481                           postinc0	equ	0xFEE
  9482                           wreg	equ	0xFE8
  9483                           postdec1	equ	0xFE5
  9484                           fsr1l	equ	0xFE1
  9485                           indf2	equ	0xFDF
  9486                           postinc2	equ	0xFDE
  9487                           postdec2	equ	0xFDD
  9488                           fsr2h	equ	0xFDA
  9489                           fsr2l	equ	0xFD9
  9490                           status	equ	0xFD8
  9491                           
  9492 ;; *************** function _isdigit *****************
  9493 ;; Defined at:
  9494 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  9495 ;; Parameters:    Size  Location     Type
  9496 ;;  c               1    wreg     unsigned char 
  9497 ;; Auto vars:     Size  Location     Type
  9498 ;;  c               1   18[COMRAM] unsigned char 
  9499 ;; Return value:  Size  Location     Type
  9500 ;;		None               void
  9501 ;; Registers used:
  9502 ;;		wreg, status,2, status,0
  9503 ;; Tracked objects:
  9504 ;;		On entry : 0/0
  9505 ;;		On exit  : 0/0
  9506 ;;		Unchanged: 0/0
  9507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9509 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9510 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9511 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9512 ;;Total ram usage:        3 bytes
  9513 ;; Hardware stack levels used:    1
  9514 ;; Hardware stack levels required when called:    1
  9515 ;; This function calls:
  9516 ;;		Nothing
  9517 ;; This function is called by:
  9518 ;;		_printf
  9519 ;; This function uses a non-reentrant model
  9520 ;;
  9521                           
  9522                           	psect	text42
  9523  002916                     __ptext42:
  9524                           	opt stack 0
  9525  002916                     _isdigit:
  9526                           	opt stack 27
  9527                           
  9528                           ;incstack = 0
  9529                           ;isdigit@c stored from wreg
  9530  002916  6E13               	movwf	isdigit@c,c
  9531  002918  0E00               	movlw	0
  9532  00291A  6E12               	movwf	_isdigit$1026,c
  9533  00291C  0E3A               	movlw	58
  9534  00291E  6013               	cpfslt	isdigit@c,c
  9535  002920  D005               	goto	l3474
  9536  002922  0E2F               	movlw	47
  9537  002924  6413               	cpfsgt	isdigit@c,c
  9538  002926  D002               	goto	l3474
  9539  002928  0E01               	movlw	1
  9540  00292A  6E12               	movwf	_isdigit$1026,c
  9541  00292C                     l3474:
  9542  00292C  C012  F011         	movff	_isdigit$1026,??_isdigit
  9543  002930  3011               	rrcf	??_isdigit,w,c
  9544  002932  0012               	return	
  9545  002934                     __end_of_isdigit:
  9546                           	opt stack 0
  9547                           tblptru	equ	0xFF8
  9548                           tblptrh	equ	0xFF7
  9549                           tblptrl	equ	0xFF6
  9550                           tablat	equ	0xFF5
  9551                           prodh	equ	0xFF4
  9552                           prodl	equ	0xFF3
  9553                           intcon	equ	0xFF2
  9554                           intcon2	equ	0xFF1
  9555                           intcon3	equ	0xFF0
  9556                           postinc0	equ	0xFEE
  9557                           wreg	equ	0xFE8
  9558                           postdec1	equ	0xFE5
  9559                           fsr1l	equ	0xFE1
  9560                           indf2	equ	0xFDF
  9561                           postinc2	equ	0xFDE
  9562                           postdec2	equ	0xFDD
  9563                           fsr2h	equ	0xFDA
  9564                           fsr2l	equ	0xFD9
  9565                           status	equ	0xFD8
  9566                           
  9567 ;; *************** function ___wmul *****************
  9568 ;; Defined at:
  9569 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;  multiplier      2   16[COMRAM] unsigned int 
  9572 ;;  multiplicand    2   18[COMRAM] unsigned int 
  9573 ;; Auto vars:     Size  Location     Type
  9574 ;;  product         2   20[COMRAM] unsigned int 
  9575 ;; Return value:  Size  Location     Type
  9576 ;;                  2   16[COMRAM] unsigned int 
  9577 ;; Registers used:
  9578 ;;		wreg, status,2, status,0, prodl, prodh
  9579 ;; Tracked objects:
  9580 ;;		On entry : 0/0
  9581 ;;		On exit  : 0/0
  9582 ;;		Unchanged: 0/0
  9583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9584 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9585 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9587 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9588 ;;Total ram usage:        6 bytes
  9589 ;; Hardware stack levels used:    1
  9590 ;; Hardware stack levels required when called:    1
  9591 ;; This function calls:
  9592 ;;		Nothing
  9593 ;; This function is called by:
  9594 ;;		_time_difference
  9595 ;;		_printf
  9596 ;;		_eval_poly
  9597 ;;		_servo_rotate
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text43
  9602  0028CC                     __ptext43:
  9603                           	opt stack 0
  9604  0028CC                     ___wmul:
  9605                           	opt stack 23
  9606                           
  9607                           ;incstack = 0
  9608  0028CC  5011               	movf	___wmul@multiplier,w,c
  9609  0028CE  0213               	mulwf	___wmul@multiplicand,c
  9610  0028D0  CFF3 F015          	movff	prodl,___wmul@product
  9611  0028D4  CFF4 F016          	movff	prodh,___wmul@product+1
  9612  0028D8  5011               	movf	___wmul@multiplier,w,c
  9613  0028DA  0214               	mulwf	___wmul@multiplicand+1,c
  9614  0028DC  50F3               	movf	prodl,w,c
  9615  0028DE  2616               	addwf	___wmul@product+1,f,c
  9616  0028E0  5012               	movf	___wmul@multiplier+1,w,c
  9617  0028E2  0213               	mulwf	___wmul@multiplicand,c
  9618  0028E4  50F3               	movf	prodl,w,c
  9619  0028E6  2616               	addwf	___wmul@product+1,f,c
  9620  0028E8  C015  F011         	movff	___wmul@product,?___wmul
  9621  0028EC  C016  F012         	movff	___wmul@product+1,?___wmul+1
  9622  0028F0  0012               	return	
  9623  0028F2                     __end_of___wmul:
  9624                           	opt stack 0
  9625                           tblptru	equ	0xFF8
  9626                           tblptrh	equ	0xFF7
  9627                           tblptrl	equ	0xFF6
  9628                           tablat	equ	0xFF5
  9629                           prodh	equ	0xFF4
  9630                           prodl	equ	0xFF3
  9631                           intcon	equ	0xFF2
  9632                           intcon2	equ	0xFF1
  9633                           intcon3	equ	0xFF0
  9634                           postinc0	equ	0xFEE
  9635                           wreg	equ	0xFE8
  9636                           postdec1	equ	0xFE5
  9637                           fsr1l	equ	0xFE1
  9638                           indf2	equ	0xFDF
  9639                           postinc2	equ	0xFDE
  9640                           postdec2	equ	0xFDD
  9641                           fsr2h	equ	0xFDA
  9642                           fsr2l	equ	0xFD9
  9643                           status	equ	0xFD8
  9644                           
  9645 ;; *************** function ___lwmod *****************
  9646 ;; Defined at:
  9647 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;  dividend        2   23[COMRAM] unsigned int 
  9650 ;;  divisor         2   25[COMRAM] unsigned int 
  9651 ;; Auto vars:     Size  Location     Type
  9652 ;;  counter         1   27[COMRAM] unsigned char 
  9653 ;; Return value:  Size  Location     Type
  9654 ;;                  2   23[COMRAM] unsigned int 
  9655 ;; Registers used:
  9656 ;;		wreg, status,2, status,0
  9657 ;; Tracked objects:
  9658 ;;		On entry : 0/0
  9659 ;;		On exit  : 0/0
  9660 ;;		Unchanged: 0/0
  9661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9662 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9666 ;;Total ram usage:        5 bytes
  9667 ;; Hardware stack levels used:    1
  9668 ;; Hardware stack levels required when called:    1
  9669 ;; This function calls:
  9670 ;;		Nothing
  9671 ;; This function is called by:
  9672 ;;		_printf
  9673 ;; This function uses a non-reentrant model
  9674 ;;
  9675                           
  9676                           	psect	text44
  9677  0027B2                     __ptext44:
  9678                           	opt stack 0
  9679  0027B2                     ___lwmod:
  9680                           	opt stack 27
  9681                           
  9682                           ;incstack = 0
  9683  0027B2  501A               	movf	___lwmod@divisor,w,c
  9684  0027B4  101B               	iorwf	___lwmod@divisor+1,w,c
  9685  0027B6  B4D8               	btfsc	status,2,c
  9686  0027B8  D018               	goto	l892
  9687  0027BA  0E01               	movlw	1
  9688  0027BC  6E1C               	movwf	___lwmod@counter,c
  9689  0027BE  D004               	goto	l3506
  9690  0027C0                     l3504:
  9691  0027C0  90D8               	bcf	status,0,c
  9692  0027C2  361A               	rlcf	___lwmod@divisor,f,c
  9693  0027C4  361B               	rlcf	___lwmod@divisor+1,f,c
  9694  0027C6  2A1C               	incf	___lwmod@counter,f,c
  9695  0027C8                     l3506:
  9696  0027C8  AE1B               	btfss	___lwmod@divisor+1,7,c
  9697  0027CA  D7FA               	goto	l3504
  9698  0027CC                     l3508:
  9699  0027CC  501A               	movf	___lwmod@divisor,w,c
  9700  0027CE  5C18               	subwf	___lwmod@dividend,w,c
  9701  0027D0  501B               	movf	___lwmod@divisor+1,w,c
  9702  0027D2  5819               	subwfb	___lwmod@dividend+1,w,c
  9703  0027D4  A0D8               	btfss	status,0,c
  9704  0027D6  D004               	goto	l3512
  9705  0027D8  501A               	movf	___lwmod@divisor,w,c
  9706  0027DA  5E18               	subwf	___lwmod@dividend,f,c
  9707  0027DC  501B               	movf	___lwmod@divisor+1,w,c
  9708  0027DE  5A19               	subwfb	___lwmod@dividend+1,f,c
  9709  0027E0                     l3512:
  9710  0027E0  90D8               	bcf	status,0,c
  9711  0027E2  321B               	rrcf	___lwmod@divisor+1,f,c
  9712  0027E4  321A               	rrcf	___lwmod@divisor,f,c
  9713  0027E6  2E1C               	decfsz	___lwmod@counter,f,c
  9714  0027E8  D7F1               	goto	l3508
  9715  0027EA                     l892:
  9716  0027EA  C018  F018         	movff	___lwmod@dividend,?___lwmod
  9717  0027EE  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  9718  0027F2  0012               	return		;funcret
  9719  0027F4                     __end_of___lwmod:
  9720                           	opt stack 0
  9721                           tblptru	equ	0xFF8
  9722                           tblptrh	equ	0xFF7
  9723                           tblptrl	equ	0xFF6
  9724                           tablat	equ	0xFF5
  9725                           prodh	equ	0xFF4
  9726                           prodl	equ	0xFF3
  9727                           intcon	equ	0xFF2
  9728                           intcon2	equ	0xFF1
  9729                           intcon3	equ	0xFF0
  9730                           postinc0	equ	0xFEE
  9731                           wreg	equ	0xFE8
  9732                           postdec1	equ	0xFE5
  9733                           fsr1l	equ	0xFE1
  9734                           indf2	equ	0xFDF
  9735                           postinc2	equ	0xFDE
  9736                           postdec2	equ	0xFDD
  9737                           fsr2h	equ	0xFDA
  9738                           fsr2l	equ	0xFD9
  9739                           status	equ	0xFD8
  9740                           
  9741 ;; *************** function ___lwdiv *****************
  9742 ;; Defined at:
  9743 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9744 ;; Parameters:    Size  Location     Type
  9745 ;;  dividend        2   16[COMRAM] unsigned int 
  9746 ;;  divisor         2   18[COMRAM] unsigned int 
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;  quotient        2   20[COMRAM] unsigned int 
  9749 ;;  counter         1   22[COMRAM] unsigned char 
  9750 ;; Return value:  Size  Location     Type
  9751 ;;                  2   16[COMRAM] unsigned int 
  9752 ;; Registers used:
  9753 ;;		wreg, status,2, status,0
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/0
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9759 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9760 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9762 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9763 ;;Total ram usage:        7 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; Hardware stack levels required when called:    1
  9766 ;; This function calls:
  9767 ;;		Nothing
  9768 ;; This function is called by:
  9769 ;;		_printf
  9770 ;; This function uses a non-reentrant model
  9771 ;;
  9772                           
  9773                           	psect	text45
  9774  00263E                     __ptext45:
  9775                           	opt stack 0
  9776  00263E                     ___lwdiv:
  9777                           	opt stack 27
  9778                           
  9779                           ;incstack = 0
  9780  00263E  0E00               	movlw	0
  9781  002640  6E16               	movwf	___lwdiv@quotient+1,c
  9782  002642  0E00               	movlw	0
  9783  002644  6E15               	movwf	___lwdiv@quotient,c
  9784  002646  5013               	movf	___lwdiv@divisor,w,c
  9785  002648  1014               	iorwf	___lwdiv@divisor+1,w,c
  9786  00264A  B4D8               	btfsc	status,2,c
  9787  00264C  D01C               	goto	l882
  9788  00264E  0E01               	movlw	1
  9789  002650  6E17               	movwf	___lwdiv@counter,c
  9790  002652  D004               	goto	l3486
  9791  002654                     l3484:
  9792  002654  90D8               	bcf	status,0,c
  9793  002656  3613               	rlcf	___lwdiv@divisor,f,c
  9794  002658  3614               	rlcf	___lwdiv@divisor+1,f,c
  9795  00265A  2A17               	incf	___lwdiv@counter,f,c
  9796  00265C                     l3486:
  9797  00265C  AE14               	btfss	___lwdiv@divisor+1,7,c
  9798  00265E  D7FA               	goto	l3484
  9799  002660                     l3488:
  9800  002660  90D8               	bcf	status,0,c
  9801  002662  3615               	rlcf	___lwdiv@quotient,f,c
  9802  002664  3616               	rlcf	___lwdiv@quotient+1,f,c
  9803  002666  5013               	movf	___lwdiv@divisor,w,c
  9804  002668  5C11               	subwf	___lwdiv@dividend,w,c
  9805  00266A  5014               	movf	___lwdiv@divisor+1,w,c
  9806  00266C  5812               	subwfb	___lwdiv@dividend+1,w,c
  9807  00266E  A0D8               	btfss	status,0,c
  9808  002670  D005               	goto	l3496
  9809  002672  5013               	movf	___lwdiv@divisor,w,c
  9810  002674  5E11               	subwf	___lwdiv@dividend,f,c
  9811  002676  5014               	movf	___lwdiv@divisor+1,w,c
  9812  002678  5A12               	subwfb	___lwdiv@dividend+1,f,c
  9813  00267A  8015               	bsf	___lwdiv@quotient,0,c
  9814  00267C                     l3496:
  9815  00267C  90D8               	bcf	status,0,c
  9816  00267E  3214               	rrcf	___lwdiv@divisor+1,f,c
  9817  002680  3213               	rrcf	___lwdiv@divisor,f,c
  9818  002682  2E17               	decfsz	___lwdiv@counter,f,c
  9819  002684  D7ED               	goto	l3488
  9820  002686                     l882:
  9821  002686  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
  9822  00268A  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9823  00268E  0012               	return		;funcret
  9824  002690                     __end_of___lwdiv:
  9825                           	opt stack 0
  9826                           tblptru	equ	0xFF8
  9827                           tblptrh	equ	0xFF7
  9828                           tblptrl	equ	0xFF6
  9829                           tablat	equ	0xFF5
  9830                           prodh	equ	0xFF4
  9831                           prodl	equ	0xFF3
  9832                           intcon	equ	0xFF2
  9833                           intcon2	equ	0xFF1
  9834                           intcon3	equ	0xFF0
  9835                           postinc0	equ	0xFEE
  9836                           wreg	equ	0xFE8
  9837                           postdec1	equ	0xFE5
  9838                           fsr1l	equ	0xFE1
  9839                           indf2	equ	0xFDF
  9840                           postinc2	equ	0xFDE
  9841                           postdec2	equ	0xFDD
  9842                           fsr2h	equ	0xFDA
  9843                           fsr2l	equ	0xFD9
  9844                           status	equ	0xFD8
  9845                           
  9846 ;; *************** function _lcdInst *****************
  9847 ;; Defined at:
  9848 ;;		line 25 in file "lcd.c"
  9849 ;; Parameters:    Size  Location     Type
  9850 ;;  data            1    wreg     unsigned char 
  9851 ;; Auto vars:     Size  Location     Type
  9852 ;;  data            1   18[COMRAM] unsigned char 
  9853 ;; Return value:  Size  Location     Type
  9854 ;;                  1    wreg      void 
  9855 ;; Registers used:
  9856 ;;		wreg, status,2, status,0, cstack
  9857 ;; Tracked objects:
  9858 ;;		On entry : 0/0
  9859 ;;		On exit  : 0/0
  9860 ;;		Unchanged: 0/0
  9861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9863 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9865 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9866 ;;Total ram usage:        1 bytes
  9867 ;; Hardware stack levels used:    1
  9868 ;; Hardware stack levels required when called:    2
  9869 ;; This function calls:
  9870 ;;		_lcdNibble
  9871 ;; This function is called by:
  9872 ;;		_main
  9873 ;;		_init_operation
  9874 ;;		_runtime
  9875 ;;		_bottle_count
  9876 ;;		_operation_end
  9877 ;;		_date_time
  9878 ;;		_initLCD
  9879 ;; This function uses a non-reentrant model
  9880 ;;
  9881                           
  9882                           	psect	text46
  9883  002962                     __ptext46:
  9884                           	opt stack 0
  9885  002962                     _lcdInst:
  9886                           	opt stack 27
  9887                           
  9888                           ;incstack = 0
  9889                           ;lcdInst@data stored from wreg
  9890  002962  6E13               	movwf	lcdInst@data,c
  9891                           
  9892                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  9893  002964  948C               	bcf	3980,2,c	;volatile
  9894                           
  9895                           ;lcd.c: 27: lcdNibble(data);
  9896  002966  5013               	movf	lcdInst@data,w,c
  9897  002968  EC48  F013         	call	_lcdNibble
  9898  00296C  0012               	return		;funcret
  9899  00296E                     __end_of_lcdInst:
  9900                           	opt stack 0
  9901                           tblptru	equ	0xFF8
  9902                           tblptrh	equ	0xFF7
  9903                           tblptrl	equ	0xFF6
  9904                           tablat	equ	0xFF5
  9905                           prodh	equ	0xFF4
  9906                           prodl	equ	0xFF3
  9907                           intcon	equ	0xFF2
  9908                           intcon2	equ	0xFF1
  9909                           intcon3	equ	0xFF0
  9910                           postinc0	equ	0xFEE
  9911                           wreg	equ	0xFE8
  9912                           postdec1	equ	0xFE5
  9913                           fsr1l	equ	0xFE1
  9914                           indf2	equ	0xFDF
  9915                           postinc2	equ	0xFDE
  9916                           postdec2	equ	0xFDD
  9917                           fsr2h	equ	0xFDA
  9918                           fsr2l	equ	0xFD9
  9919                           status	equ	0xFD8
  9920                           
  9921 ;; *************** function _lcdNibble *****************
  9922 ;; Defined at:
  9923 ;;		line 35 in file "lcd.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;  data            1    wreg     unsigned char 
  9926 ;; Auto vars:     Size  Location     Type
  9927 ;;  data            1   17[COMRAM] unsigned char 
  9928 ;;  temp            1   16[COMRAM] unsigned char 
  9929 ;; Return value:  Size  Location     Type
  9930 ;;                  1    wreg      void 
  9931 ;; Registers used:
  9932 ;;		wreg, status,2, status,0
  9933 ;; Tracked objects:
  9934 ;;		On entry : 0/0
  9935 ;;		On exit  : 0/0
  9936 ;;		Unchanged: 0/0
  9937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9941 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9942 ;;Total ram usage:        2 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; Hardware stack levels required when called:    1
  9945 ;; This function calls:
  9946 ;;		Nothing
  9947 ;; This function is called by:
  9948 ;;		_lcdInst
  9949 ;;		_putch
  9950 ;; This function uses a non-reentrant model
  9951 ;;
  9952                           
  9953                           	psect	text47
  9954  002690                     __ptext47:
  9955                           	opt stack 0
  9956  002690                     _lcdNibble:
  9957                           	opt stack 26
  9958                           
  9959                           ;incstack = 0
  9960                           ;lcdNibble@data stored from wreg
  9961  002690  6E12               	movwf	lcdNibble@data,c
  9962                           
  9963                           ;lcd.c: 37: char temp = data & 0xF0;
  9964  002692  5012               	movf	lcdNibble@data,w,c
  9965  002694  0BF0               	andlw	240
  9966  002696  6E11               	movwf	lcdNibble@temp,c
  9967                           
  9968                           ;lcd.c: 38: LATD = LATD & 0x0F;
  9969  002698  508C               	movf	3980,w,c	;volatile
  9970  00269A  0B0F               	andlw	15
  9971  00269C  6E8C               	movwf	3980,c	;volatile
  9972                           
  9973                           ;lcd.c: 39: LATD = temp | LATD;
  9974  00269E  5011               	movf	lcdNibble@temp,w,c
  9975  0026A0  108C               	iorwf	3980,w,c	;volatile
  9976  0026A2  6E8C               	movwf	3980,c	;volatile
  9977                           
  9978                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  9979  0026A4  968C               	bcf	3980,3,c	;volatile
  9980                           
  9981                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9982  0026A6  0E19               	movlw	25
  9983  0026A8                     u3777:
  9984  0026A8  2EE8               	decfsz	wreg,f,c
  9985  0026AA  D7FE               	bra	u3777
  9986                           
  9987                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  9988  0026AC  868C               	bsf	3980,3,c	;volatile
  9989                           
  9990                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9991  0026AE  0E19               	movlw	25
  9992  0026B0                     u3787:
  9993  0026B0  2EE8               	decfsz	wreg,f,c
  9994  0026B2  D7FE               	bra	u3787
  9995                           
  9996                           ;lcd.c: 46: data = data << 4;
  9997  0026B4  3812               	swapf	lcdNibble@data,w,c
  9998  0026B6  0BF0               	andlw	240
  9999  0026B8  6E12               	movwf	lcdNibble@data,c
 10000                           
 10001                           ;lcd.c: 48: temp = data & 0xF0;
 10002  0026BA  5012               	movf	lcdNibble@data,w,c
 10003  0026BC  0BF0               	andlw	240
 10004  0026BE  6E11               	movwf	lcdNibble@temp,c
 10005                           
 10006                           ;lcd.c: 49: LATD = LATD & 0x0F;
 10007  0026C0  508C               	movf	3980,w,c	;volatile
 10008  0026C2  0B0F               	andlw	15
 10009  0026C4  6E8C               	movwf	3980,c	;volatile
 10010                           
 10011                           ;lcd.c: 50: LATD = temp | LATD;
 10012  0026C6  5011               	movf	lcdNibble@temp,w,c
 10013  0026C8  108C               	iorwf	3980,w,c	;volatile
 10014  0026CA  6E8C               	movwf	3980,c	;volatile
 10015                           
 10016                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 10017  0026CC  968C               	bcf	3980,3,c	;volatile
 10018                           
 10019                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10020  0026CE  0E19               	movlw	25
 10021  0026D0                     u3797:
 10022  0026D0  2EE8               	decfsz	wreg,f,c
 10023  0026D2  D7FE               	bra	u3797
 10024                           
 10025                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 10026  0026D4  868C               	bsf	3980,3,c	;volatile
 10027                           
 10028                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10029  0026D6  0E19               	movlw	25
 10030  0026D8                     u3807:
 10031  0026D8  2EE8               	decfsz	wreg,f,c
 10032  0026DA  D7FE               	bra	u3807
 10033  0026DC  0012               	return		;funcret
 10034  0026DE                     __end_of_lcdNibble:
 10035                           	opt stack 0
 10036                           tblptru	equ	0xFF8
 10037                           tblptrh	equ	0xFF7
 10038                           tblptrl	equ	0xFF6
 10039                           tablat	equ	0xFF5
 10040                           prodh	equ	0xFF4
 10041                           prodl	equ	0xFF3
 10042                           intcon	equ	0xFF2
 10043                           intcon2	equ	0xFF1
 10044                           intcon3	equ	0xFF0
 10045                           postinc0	equ	0xFEE
 10046                           wreg	equ	0xFE8
 10047                           postdec1	equ	0xFE5
 10048                           fsr1l	equ	0xFE1
 10049                           indf2	equ	0xFDF
 10050                           postinc2	equ	0xFDE
 10051                           postdec2	equ	0xFDD
 10052                           fsr2h	equ	0xFDA
 10053                           fsr2l	equ	0xFD9
 10054                           status	equ	0xFD8
 10055                           
 10056 ;; *************** function _I2C_Master_Init *****************
 10057 ;; Defined at:
 10058 ;;		line 13 in file "I2C.c"
 10059 ;; Parameters:    Size  Location     Type
 10060 ;;  c               4   29[COMRAM] const unsigned long 
 10061 ;; Auto vars:     Size  Location     Type
 10062 ;;		None
 10063 ;; Return value:  Size  Location     Type
 10064 ;;                  1    wreg      void 
 10065 ;; Registers used:
 10066 ;;		wreg, status,2, status,0, cstack
 10067 ;; Tracked objects:
 10068 ;;		On entry : 0/0
 10069 ;;		On exit  : 0/0
 10070 ;;		Unchanged: 0/0
 10071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10072 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10074 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10075 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10076 ;;Total ram usage:        8 bytes
 10077 ;; Hardware stack levels used:    1
 10078 ;; Hardware stack levels required when called:    2
 10079 ;; This function calls:
 10080 ;;		___lldiv
 10081 ;; This function is called by:
 10082 ;;		_main
 10083 ;; This function uses a non-reentrant model
 10084 ;;
 10085                           
 10086                           	psect	text48
 10087  0025E4                     __ptext48:
 10088                           	opt stack 0
 10089  0025E4                     _I2C_Master_Init:
 10090                           	opt stack 28
 10091                           
 10092                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 10093                           
 10094                           ;incstack = 0
 10095  0025E4  0E00               	movlw	0
 10096  0025E6  6EC7               	movwf	4039,c	;volatile
 10097                           
 10098                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 10099  0025E8  0E28               	movlw	40
 10100  0025EA  6EC6               	movwf	4038,c	;volatile
 10101                           
 10102                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 10103  0025EC  0E00               	movlw	0
 10104  0025EE  6EC5               	movwf	4037,c	;volatile
 10105                           
 10106                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
 10107  0025F0  0E80               	movlw	128
 10108  0025F2  6E11               	movwf	___lldiv@dividend,c
 10109  0025F4  0E96               	movlw	150
 10110  0025F6  6E12               	movwf	___lldiv@dividend+1,c
 10111  0025F8  0E98               	movlw	152
 10112  0025FA  6E13               	movwf	___lldiv@dividend+2,c
 10113  0025FC  0E00               	movlw	0
 10114  0025FE  6E14               	movwf	___lldiv@dividend+3,c
 10115  002600  C01E  F022         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10116  002604  C01F  F023         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10117  002608  C020  F024         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10118  00260C  C021  F025         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10119  002610  0E02               	movlw	2
 10120  002612                     u3155:
 10121  002612  90D8               	bcf	status,0,c
 10122  002614  3622               	rlcf	??_I2C_Master_Init,f,c
 10123  002616  3623               	rlcf	??_I2C_Master_Init+1,f,c
 10124  002618  3624               	rlcf	??_I2C_Master_Init+2,f,c
 10125  00261A  3625               	rlcf	??_I2C_Master_Init+3,f,c
 10126  00261C  2EE8               	decfsz	wreg,f,c
 10127  00261E  D7F9               	goto	u3155
 10128  002620  C022  F015         	movff	??_I2C_Master_Init,___lldiv@divisor
 10129  002624  C023  F016         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10130  002628  C024  F017         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10131  00262C  C025  F018         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10132  002630  ECDE  F011         	call	___lldiv	;wreg free
 10133  002634  0411               	decf	?___lldiv,w,c
 10134  002636  6EC8               	movwf	4040,c	;volatile
 10135                           
 10136                           ;I2C.c: 20: TRISC3 = 1;
 10137  002638  8694               	bsf	3988,3,c	;volatile
 10138                           
 10139                           ;I2C.c: 21: TRISC4 = 1;
 10140  00263A  8894               	bsf	3988,4,c	;volatile
 10141  00263C  0012               	return		;funcret
 10142  00263E                     __end_of_I2C_Master_Init:
 10143                           	opt stack 0
 10144                           tblptru	equ	0xFF8
 10145                           tblptrh	equ	0xFF7
 10146                           tblptrl	equ	0xFF6
 10147                           tablat	equ	0xFF5
 10148                           prodh	equ	0xFF4
 10149                           prodl	equ	0xFF3
 10150                           intcon	equ	0xFF2
 10151                           intcon2	equ	0xFF1
 10152                           intcon3	equ	0xFF0
 10153                           postinc0	equ	0xFEE
 10154                           wreg	equ	0xFE8
 10155                           postdec1	equ	0xFE5
 10156                           fsr1l	equ	0xFE1
 10157                           indf2	equ	0xFDF
 10158                           postinc2	equ	0xFDE
 10159                           postdec2	equ	0xFDD
 10160                           fsr2h	equ	0xFDA
 10161                           fsr2l	equ	0xFD9
 10162                           status	equ	0xFD8
 10163                           
 10164 ;; *************** function ___lldiv *****************
 10165 ;; Defined at:
 10166 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 10167 ;; Parameters:    Size  Location     Type
 10168 ;;  dividend        4   16[COMRAM] unsigned long 
 10169 ;;  divisor         4   20[COMRAM] unsigned long 
 10170 ;; Auto vars:     Size  Location     Type
 10171 ;;  quotient        4   24[COMRAM] unsigned long 
 10172 ;;  counter         1   28[COMRAM] unsigned char 
 10173 ;; Return value:  Size  Location     Type
 10174 ;;                  4   16[COMRAM] unsigned long 
 10175 ;; Registers used:
 10176 ;;		wreg, status,2, status,0
 10177 ;; Tracked objects:
 10178 ;;		On entry : 0/0
 10179 ;;		On exit  : 0/0
 10180 ;;		Unchanged: 0/0
 10181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10182 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10183 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10185 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10186 ;;Total ram usage:       13 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; Hardware stack levels required when called:    1
 10189 ;; This function calls:
 10190 ;;		Nothing
 10191 ;; This function is called by:
 10192 ;;		_I2C_Master_Init
 10193 ;; This function uses a non-reentrant model
 10194 ;;
 10195                           
 10196                           	psect	text49
 10197  0023BC                     __ptext49:
 10198                           	opt stack 0
 10199  0023BC                     ___lldiv:
 10200                           	opt stack 28
 10201                           
 10202                           ;incstack = 0
 10203  0023BC  0E00               	movlw	0
 10204  0023BE  6E19               	movwf	___lldiv@quotient,c
 10205  0023C0  0E00               	movlw	0
 10206  0023C2  6E1A               	movwf	___lldiv@quotient+1,c
 10207  0023C4  0E00               	movlw	0
 10208  0023C6  6E1B               	movwf	___lldiv@quotient+2,c
 10209  0023C8  0E00               	movlw	0
 10210  0023CA  6E1C               	movwf	___lldiv@quotient+3,c
 10211  0023CC  5015               	movf	___lldiv@divisor,w,c
 10212  0023CE  1016               	iorwf	___lldiv@divisor+1,w,c
 10213  0023D0  1017               	iorwf	___lldiv@divisor+2,w,c
 10214  0023D2  1018               	iorwf	___lldiv@divisor+3,w,c
 10215  0023D4  B4D8               	btfsc	status,2,c
 10216  0023D6  D02A               	goto	l829
 10217  0023D8  0E01               	movlw	1
 10218  0023DA  6E1D               	movwf	___lldiv@counter,c
 10219  0023DC  D006               	goto	l3822
 10220  0023DE                     l3820:
 10221  0023DE  90D8               	bcf	status,0,c
 10222  0023E0  3615               	rlcf	___lldiv@divisor,f,c
 10223  0023E2  3616               	rlcf	___lldiv@divisor+1,f,c
 10224  0023E4  3617               	rlcf	___lldiv@divisor+2,f,c
 10225  0023E6  3618               	rlcf	___lldiv@divisor+3,f,c
 10226  0023E8  2A1D               	incf	___lldiv@counter,f,c
 10227  0023EA                     l3822:
 10228  0023EA  AE18               	btfss	___lldiv@divisor+3,7,c
 10229  0023EC  D7F8               	goto	l3820
 10230  0023EE                     l3824:
 10231  0023EE  90D8               	bcf	status,0,c
 10232  0023F0  3619               	rlcf	___lldiv@quotient,f,c
 10233  0023F2  361A               	rlcf	___lldiv@quotient+1,f,c
 10234  0023F4  361B               	rlcf	___lldiv@quotient+2,f,c
 10235  0023F6  361C               	rlcf	___lldiv@quotient+3,f,c
 10236  0023F8  5015               	movf	___lldiv@divisor,w,c
 10237  0023FA  5C11               	subwf	___lldiv@dividend,w,c
 10238  0023FC  5016               	movf	___lldiv@divisor+1,w,c
 10239  0023FE  5812               	subwfb	___lldiv@dividend+1,w,c
 10240  002400  5017               	movf	___lldiv@divisor+2,w,c
 10241  002402  5813               	subwfb	___lldiv@dividend+2,w,c
 10242  002404  5018               	movf	___lldiv@divisor+3,w,c
 10243  002406  5814               	subwfb	___lldiv@dividend+3,w,c
 10244  002408  A0D8               	btfss	status,0,c
 10245  00240A  D009               	goto	l3832
 10246  00240C  5015               	movf	___lldiv@divisor,w,c
 10247  00240E  5E11               	subwf	___lldiv@dividend,f,c
 10248  002410  5016               	movf	___lldiv@divisor+1,w,c
 10249  002412  5A12               	subwfb	___lldiv@dividend+1,f,c
 10250  002414  5017               	movf	___lldiv@divisor+2,w,c
 10251  002416  5A13               	subwfb	___lldiv@dividend+2,f,c
 10252  002418  5018               	movf	___lldiv@divisor+3,w,c
 10253  00241A  5A14               	subwfb	___lldiv@dividend+3,f,c
 10254  00241C  8019               	bsf	___lldiv@quotient,0,c
 10255  00241E                     l3832:
 10256  00241E  90D8               	bcf	status,0,c
 10257  002420  3218               	rrcf	___lldiv@divisor+3,f,c
 10258  002422  3217               	rrcf	___lldiv@divisor+2,f,c
 10259  002424  3216               	rrcf	___lldiv@divisor+1,f,c
 10260  002426  3215               	rrcf	___lldiv@divisor,f,c
 10261  002428  2E1D               	decfsz	___lldiv@counter,f,c
 10262  00242A  D7E1               	goto	l3824
 10263  00242C                     l829:
 10264  00242C  C019  F011         	movff	___lldiv@quotient,?___lldiv
 10265  002430  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
 10266  002434  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
 10267  002438  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
 10268  00243C  0012               	return		;funcret
 10269  00243E                     __end_of___lldiv:
 10270                           	opt stack 0
 10271                           tblptru	equ	0xFF8
 10272                           tblptrh	equ	0xFF7
 10273                           tblptrl	equ	0xFF6
 10274                           tablat	equ	0xFF5
 10275                           prodh	equ	0xFF4
 10276                           prodl	equ	0xFF3
 10277                           intcon	equ	0xFF2
 10278                           intcon2	equ	0xFF1
 10279                           intcon3	equ	0xFF0
 10280                           postinc0	equ	0xFEE
 10281                           wreg	equ	0xFE8
 10282                           postdec1	equ	0xFE5
 10283                           fsr1l	equ	0xFE1
 10284                           indf2	equ	0xFDF
 10285                           postinc2	equ	0xFDE
 10286                           postdec2	equ	0xFDD
 10287                           fsr2h	equ	0xFDA
 10288                           fsr2l	equ	0xFD9
 10289                           status	equ	0xFD8
 10290                           
 10291 ;; *************** function _keypressed *****************
 10292 ;; Defined at:
 10293 ;;		line 136 in file "main.c"
 10294 ;; Parameters:    Size  Location     Type
 10295 ;;		None
 10296 ;; Auto vars:     Size  Location     Type
 10297 ;;		None
 10298 ;; Return value:  Size  Location     Type
 10299 ;;                  1    wreg      void 
 10300 ;; Registers used:
 10301 ;;		wreg, status,2, status,0
 10302 ;; Tracked objects:
 10303 ;;		On entry : 0/0
 10304 ;;		On exit  : 0/0
 10305 ;;		Unchanged: 0/0
 10306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10309 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10310 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10311 ;;Total ram usage:       16 bytes
 10312 ;; Hardware stack levels used:    1
 10313 ;; This function calls:
 10314 ;;		Nothing
 10315 ;; This function is called by:
 10316 ;;		Interrupt level 2
 10317 ;; This function uses a non-reentrant model
 10318 ;;
 10319                           
 10320                           	psect	intcode
 10321  000008                     __pintcode:
 10322                           	opt stack 0
 10323  000008                     _keypressed:
 10324                           	opt stack 22
 10325                           
 10326                           ;incstack = 0
 10327  000008  826F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10328  00000A  ED9B  F00C         	call	int_func,f	;refresh shadow registers
 10329                           tblptru	equ	0xFF8
 10330                           tblptrh	equ	0xFF7
 10331                           tblptrl	equ	0xFF6
 10332                           tablat	equ	0xFF5
 10333                           prodh	equ	0xFF4
 10334                           prodl	equ	0xFF3
 10335                           intcon	equ	0xFF2
 10336                           intcon2	equ	0xFF1
 10337                           intcon3	equ	0xFF0
 10338                           postinc0	equ	0xFEE
 10339                           wreg	equ	0xFE8
 10340                           postdec1	equ	0xFE5
 10341                           fsr1l	equ	0xFE1
 10342                           indf2	equ	0xFDF
 10343                           postinc2	equ	0xFDE
 10344                           postdec2	equ	0xFDD
 10345                           fsr2h	equ	0xFDA
 10346                           fsr2l	equ	0xFD9
 10347                           status	equ	0xFD8
 10348                           
 10349                           	psect	intcode_body
 10350  001936                     __pintcode_body:
 10351                           	opt stack 22
 10352  001936                     int_func:
 10353                           	opt stack 22
 10354  001936  0006               	pop		; remove dummy address from shadow register refresh
 10355  001938  CFFA F003          	movff	pclath,??_keypressed+2
 10356  00193C  CFFB F004          	movff	pclatu,??_keypressed+3
 10357  001940  CFE9 F005          	movff	fsr0l,??_keypressed+4
 10358  001944  CFEA F006          	movff	fsr0h,??_keypressed+5
 10359  001948  CFE1 F007          	movff	fsr1l,??_keypressed+6
 10360  00194C  CFE2 F008          	movff	fsr1h,??_keypressed+7
 10361  001950  CFD9 F009          	movff	fsr2l,??_keypressed+8
 10362  001954  CFDA F00A          	movff	fsr2h,??_keypressed+9
 10363  001958  CFF3 F00B          	movff	prodl,??_keypressed+10
 10364  00195C  CFF4 F00C          	movff	prodh,??_keypressed+11
 10365  001960  CFF6 F00D          	movff	tblptrl,??_keypressed+12
 10366  001964  CFF7 F00E          	movff	tblptrh,??_keypressed+13
 10367  001968  CFF8 F00F          	movff	tblptru,??_keypressed+14
 10368  00196C  CFF5 F010          	movff	tablat,??_keypressed+15
 10369                           
 10370                           ;main.c: 137: if(INT1IF){
 10371  001970  B0F0               	btfsc	intcon3,0,c	;volatile
 10372  001972  D01B               	goto	i2l4146
 10373  001974  D03F               	goto	i2l112
 10374  001976                     i2l4126:
 10375                           
 10376                           ;main.c: 140: curr_state = OPERATION_END;
 10377  001976  0E02               	movlw	2
 10378  001978  D012               	goto	L11
 10379  00197A                     i2l4128:
 10380                           
 10381                           ;main.c: 144: curr_state = OPERATION;
 10382  00197A  0E01               	movlw	1
 10383  00197C  D010               	goto	L11
 10384  00197E                     i2l4130:
 10385                           
 10386                           ;main.c: 148: curr_state = RUNTIME;
 10387  00197E  0E05               	movlw	5
 10388  001980  D00E               	goto	L11
 10389  001982                     i2l4132:
 10390                           
 10391                           ;main.c: 152: curr_state = BOTTLECOUNT;
 10392  001982  0E04               	movlw	4
 10393  001984  0101               	movlb	1	; () banked
 10394  001986  6F2B               	movwf	_curr_state& (0+255),b
 10395                           
 10396                           ;main.c: 153: bot_type = TOTAL;
 10397  001988  0E00               	movlw	0
 10398  00198A  D00C               	goto	L10
 10399  00198C                     i2l4134:
 10400                           
 10401                           ;main.c: 156: bot_type = A;
 10402  00198C  0E01               	movlw	1
 10403  00198E  D00A               	goto	L10
 10404  001990                     i2l4136:
 10405                           
 10406                           ;main.c: 159: bot_type = B;
 10407  001990  0E02               	movlw	2
 10408  001992  D008               	goto	L10
 10409  001994                     i2l4138:
 10410                           
 10411                           ;main.c: 162: bot_type = C;
 10412  001994  0E03               	movlw	3
 10413  001996  D006               	goto	L10
 10414  001998                     i2l4140:
 10415                           
 10416                           ;main.c: 165: bot_type = D;
 10417  001998  0E04               	movlw	4
 10418  00199A  D004               	goto	L10
 10419  00199C                     i2l4142:
 10420                           
 10421                           ;main.c: 168: curr_state = DATETIME;
 10422  00199C  0E03               	movlw	3
 10423  00199E                     L11:
 10424  00199E  0101               	movlb	1	; () banked
 10425  0019A0  6F2B               	movwf	_curr_state& (0+255),b
 10426                           
 10427                           ;main.c: 169: bot_type = O;
 10428  0019A2  0E05               	movlw	5
 10429  0019A4                     L10:
 10430  0019A4  0100               	movlb	0	; () banked
 10431  0019A6  6FF7               	movwf	_bot_type& (0+255),b
 10432                           
 10433                           ; BSR set to: 0
 10434                           ;main.c: 173: }
 10435                           
 10436                           ; BSR set to: 0
 10437                           ;main.c: 172: break;
 10438                           
 10439                           ;main.c: 171: default:
 10440                           
 10441                           ;main.c: 170: break;
 10442  0019A8  D025               	goto	i2l112
 10443  0019AA                     i2l4146:
 10444  0019AA  3881               	swapf	3969,w,c	;volatile
 10445  0019AC  0B0F               	andlw	15
 10446  0019AE  0B0F               	andlw	15
 10447  0019B0  6E01               	movwf	??_keypressed& (0+255),c
 10448  0019B2  6A02               	clrf	(??_keypressed+1)& (0+255),c
 10449                           
 10450                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10451                           ; Switch size 1, requested type "space"
 10452                           ; Number of cases is 1, Range of values is 0 to 0
 10453                           ; switch strategies available:
 10454                           ; Name         Instructions Cycles
 10455                           ; simple_byte            4     3 (average)
 10456                           ;	Chosen strategy is simple_byte
 10457  0019B4  5002               	movf	??_keypressed+1,w,c
 10458  0019B6  0A00               	xorlw	0	; case 0
 10459  0019B8  A4D8               	btfss	status,2,c
 10460  0019BA  D01C               	goto	i2l112
 10461                           
 10462                           ; Switch size 1, requested type "space"
 10463                           ; Number of cases is 9, Range of values is 0 to 15
 10464                           ; switch strategies available:
 10465                           ; Name         Instructions Cycles
 10466                           ; simple_byte           28    15 (average)
 10467                           ;	Chosen strategy is simple_byte
 10468  0019BC  5001               	movf	??_keypressed,w,c
 10469  0019BE  0A00               	xorlw	0	; case 0
 10470  0019C0  B4D8               	btfsc	status,2,c
 10471  0019C2  D7DB               	goto	i2l4128
 10472  0019C4  0A01               	xorlw	1	; case 1
 10473  0019C6  B4D8               	btfsc	status,2,c
 10474  0019C8  D7DA               	goto	i2l4130
 10475  0019CA  0A03               	xorlw	3	; case 2
 10476  0019CC  B4D8               	btfsc	status,2,c
 10477  0019CE  D7D9               	goto	i2l4132
 10478  0019D0  0A01               	xorlw	1	; case 3
 10479  0019D2  B4D8               	btfsc	status,2,c
 10480  0019D4  D7DB               	goto	i2l4134
 10481  0019D6  0A07               	xorlw	7	; case 4
 10482  0019D8  B4D8               	btfsc	status,2,c
 10483  0019DA  D7E0               	goto	i2l4142
 10484  0019DC  0A03               	xorlw	3	; case 7
 10485  0019DE  B4D8               	btfsc	status,2,c
 10486  0019E0  D7D7               	goto	i2l4136
 10487  0019E2  0A0C               	xorlw	12	; case 11
 10488  0019E4  B4D8               	btfsc	status,2,c
 10489  0019E6  D7D6               	goto	i2l4138
 10490  0019E8  0A07               	xorlw	7	; case 12
 10491  0019EA  B4D8               	btfsc	status,2,c
 10492  0019EC  D7C4               	goto	i2l4126
 10493  0019EE  0A03               	xorlw	3	; case 15
 10494  0019F0  B4D8               	btfsc	status,2,c
 10495  0019F2  D7D2               	goto	i2l4140
 10496  0019F4                     i2l112:
 10497                           
 10498                           ;main.c: 174: }
 10499                           ;main.c: 175: INT1IF = 0;
 10500  0019F4  90F0               	bcf	intcon3,0,c	;volatile
 10501                           
 10502                           ;main.c: 176: return;
 10503  0019F6  C010  FFF5         	movff	??_keypressed+15,tablat
 10504  0019FA  C00F  FFF8         	movff	??_keypressed+14,tblptru
 10505  0019FE  C00E  FFF7         	movff	??_keypressed+13,tblptrh
 10506  001A02  C00D  FFF6         	movff	??_keypressed+12,tblptrl
 10507  001A06  C00C  FFF4         	movff	??_keypressed+11,prodh
 10508  001A0A  C00B  FFF3         	movff	??_keypressed+10,prodl
 10509  001A0E  C00A  FFDA         	movff	??_keypressed+9,fsr2h
 10510  001A12  C009  FFD9         	movff	??_keypressed+8,fsr2l
 10511  001A16  C008  FFE2         	movff	??_keypressed+7,fsr1h
 10512  001A1A  C007  FFE1         	movff	??_keypressed+6,fsr1l
 10513  001A1E  C006  FFEA         	movff	??_keypressed+5,fsr0h
 10514  001A22  C005  FFE9         	movff	??_keypressed+4,fsr0l
 10515  001A26  C004  FFFB         	movff	??_keypressed+3,pclatu
 10516  001A2A  C003  FFFA         	movff	??_keypressed+2,pclath
 10517  001A2E  926F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10518  001A30  0011               	retfie		f
 10519  001A32                     __end_of_keypressed:
 10520                           	opt stack 0
 10521                           pclatu	equ	0xFFB
 10522                           pclath	equ	0xFFA
 10523                           tblptru	equ	0xFF8
 10524                           tblptrh	equ	0xFF7
 10525                           tblptrl	equ	0xFF6
 10526                           tablat	equ	0xFF5
 10527                           prodh	equ	0xFF4
 10528                           prodl	equ	0xFF3
 10529                           intcon	equ	0xFF2
 10530                           intcon2	equ	0xFF1
 10531                           intcon3	equ	0xFF0
 10532                           postinc0	equ	0xFEE
 10533                           fsr0h	equ	0xFEA
 10534                           fsr0l	equ	0xFE9
 10535                           wreg	equ	0xFE8
 10536                           postdec1	equ	0xFE5
 10537                           fsr1h	equ	0xFE2
 10538                           fsr1l	equ	0xFE1
 10539                           indf2	equ	0xFDF
 10540                           postinc2	equ	0xFDE
 10541                           postdec2	equ	0xFDD
 10542                           fsr2h	equ	0xFDA
 10543                           fsr2l	equ	0xFD9
 10544                           status	equ	0xFD8
 10545                           pclatu	equ	0xFFB
 10546                           pclath	equ	0xFFA
 10547                           tblptru	equ	0xFF8
 10548                           tblptrh	equ	0xFF7
 10549                           tblptrl	equ	0xFF6
 10550                           tablat	equ	0xFF5
 10551                           prodh	equ	0xFF4
 10552                           prodl	equ	0xFF3
 10553                           intcon	equ	0xFF2
 10554                           intcon2	equ	0xFF1
 10555                           intcon3	equ	0xFF0
 10556                           postinc0	equ	0xFEE
 10557                           fsr0h	equ	0xFEA
 10558                           fsr0l	equ	0xFE9
 10559                           wreg	equ	0xFE8
 10560                           postdec1	equ	0xFE5
 10561                           fsr1h	equ	0xFE2
 10562                           fsr1l	equ	0xFE1
 10563                           indf2	equ	0xFDF
 10564                           postinc2	equ	0xFDE
 10565                           postdec2	equ	0xFDD
 10566                           fsr2h	equ	0xFDA
 10567                           fsr2l	equ	0xFD9
 10568                           status	equ	0xFD8
 10569                           
 10570                           	psect	rparam
 10571  0000                     pclatu	equ	0xFFB
 10572                           pclath	equ	0xFFA
 10573                           tblptru	equ	0xFF8
 10574                           tblptrh	equ	0xFF7
 10575                           tblptrl	equ	0xFF6
 10576                           tablat	equ	0xFF5
 10577                           prodh	equ	0xFF4
 10578                           prodl	equ	0xFF3
 10579                           intcon	equ	0xFF2
 10580                           intcon2	equ	0xFF1
 10581                           intcon3	equ	0xFF0
 10582                           postinc0	equ	0xFEE
 10583                           fsr0h	equ	0xFEA
 10584                           fsr0l	equ	0xFE9
 10585                           wreg	equ	0xFE8
 10586                           postdec1	equ	0xFE5
 10587                           fsr1h	equ	0xFE2
 10588                           fsr1l	equ	0xFE1
 10589                           indf2	equ	0xFDF
 10590                           postinc2	equ	0xFDE
 10591                           postdec2	equ	0xFDD
 10592                           fsr2h	equ	0xFDA
 10593                           fsr2l	equ	0xFD9
 10594                           status	equ	0xFD8
 10595                           
 10596                           	psect	temp
 10597  00006F                     btemp:
 10598                           	opt stack 0
 10599  00006F                     	ds	1
 10600  0000                     int$flags	set	btemp
 10601                           pclatu	equ	0xFFB
 10602                           pclath	equ	0xFFA
 10603                           tblptru	equ	0xFF8
 10604                           tblptrh	equ	0xFF7
 10605                           tblptrl	equ	0xFF6
 10606                           tablat	equ	0xFF5
 10607                           prodh	equ	0xFF4
 10608                           prodl	equ	0xFF3
 10609                           intcon	equ	0xFF2
 10610                           intcon2	equ	0xFF1
 10611                           intcon3	equ	0xFF0
 10612                           postinc0	equ	0xFEE
 10613                           fsr0h	equ	0xFEA
 10614                           fsr0l	equ	0xFE9
 10615                           wreg	equ	0xFE8
 10616                           postdec1	equ	0xFE5
 10617                           fsr1h	equ	0xFE2
 10618                           fsr1l	equ	0xFE1
 10619                           indf2	equ	0xFDF
 10620                           postinc2	equ	0xFDE
 10621                           postdec2	equ	0xFDD
 10622                           fsr2h	equ	0xFDA
 10623                           fsr2l	equ	0xFD9
 10624                           status	equ	0xFD8


Data Sizes:
    Strings     282
    Constant    99
    Data        16
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    108     110
    BANK0           128    119     120
    BANK1           256     27      44
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_19(CODE[23]), STR_18(CODE[23]), STR_17(CODE[17]), STR_16(CODE[17]), 
		 -> STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[19]), STR_4(CODE[17]), 
		 -> STR_3(CODE[20]), STR_2(CODE[20]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    read_colorsensor2@blue	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@blue(BANK0[2]), 

    read_colorsensor2@green	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@green(BANK0[2]), 

    read_colorsensor2@red	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@red(BANK0[2]), 

    read_colorsensor2@clear	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@clear(BANK0[2]), 

    read_colorsensor1@blue	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@blue(BANK0[2]), 

    read_colorsensor1@green	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@green(BANK0[2]), 

    read_colorsensor1@red	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@red(BANK0[2]), 

    read_colorsensor1@clear	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@clear(BANK0[2]), 

    stepper_state@step_state	PTR unsigned char  size(2) Largest target is 2
		 -> main@step_state(BANK1[2]), 

    date_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK1[7]), 

    operation_end@step_state	PTR unsigned char  size(2) Largest target is 2
		 -> main@step_state(BANK1[2]), 

    bottle_count@bot_count	PTR unsigned char  size(2) Largest target is 4
		 -> main@bot_count(BANK1[4]), 

    runtime@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK1[7]), 

    runtime@end_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK1[7]), 

    init_operation@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK1[7]), 

    init_operation@bot_count	PTR unsigned char  size(2) Largest target is 4
		 -> main@bot_count(BANK1[4]), 

    init_operation@step_state	PTR unsigned char  size(2) Largest target is 2
		 -> main@step_state(BANK1[2]), 

    init_operation@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK1[7]), 

    time_difference@time2	PTR unsigned char  size(2) Largest target is 7
		 -> init_operation@detection_time(BANK0[7]), main@start_time(BANK1[7]), 

    time_difference@time1	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK1[7]), main@time(BANK1[7]), 

    update_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> init_operation@detection_time(BANK0[7]), main@end_time(BANK1[7]), main@time(BANK1[7]), main@start_time(BANK1[7]), 


Critical Paths under _main in COMRAM

    _main->_date_time
    _runtime->_time_difference
    _init_operation->_time_difference
    _update_time->_I2C_Master_Read
    _update_time->_I2C_Master_Write
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _stepper_state->_stepper
    _stepper_state->_stepper_rev
    _read_colorsensor2->_I2C_Master_Read
    _read_colorsensor2->_I2C_Master_Write
    _read_colorsensor1->_I2C_Master_Read
    _read_colorsensor1->_I2C_Master_Write
    _initLCD->_lcdInst
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _printf->_time_difference
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_init_operation
    _runtime->_printf
    _operation_end->_printf
    _init_operation->_printf
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _date_time->_printf
    _bottle_count->_printf
    _printf->_time_difference

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0  215117
                                            117 BANK0      2     2      0
                                              0 BANK1     27    27      0
                    _I2C_Master_Init
                       _bottle_count
                          _date_time
                            _initLCD
                     _init_operation
                            _lcdInst
                      _operation_end
                             _printf
                            _runtime
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _runtime                                              4     0      4   83714
                                             69 BANK0      4     0      4
                            _lcdInst
                             _printf
                    _time_difference
 ---------------------------------------------------------------------------------
 (1) _operation_end                                        2     0      2    6026
                                             69 BANK0      2     0      2
                              _delay
                            _lcdInst
                             _printf
                      _stepper_state
 ---------------------------------------------------------------------------------
 (2) _delay                                                6     4      2     156
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _init_operation                                      48    40      8  106979
                                             69 BANK0     48    40      8
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                            _initLCD
                            _lcdInst
                             _printf
                  _read_colorsensor1
                  _read_colorsensor2
                      _stepper_state
                    _time_difference
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _update_time                                          3     1      2    2419
                                             19 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _time_difference                                     24    20      4   79314
                                            105 COMRAM     2     2      0
                                             25 BANK0     22    18      4
                             ___wmul
                         _dec_to_hex
 ---------------------------------------------------------------------------------
 (3) _dec_to_hex                                          16    14      2   77587
                                            103 COMRAM     2     0      2
                                             11 BANK0     14    14      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   64703
                                             97 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   21528
                                             67 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   34800
                                             88 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     376
                                             67 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3    8735
                                             80 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     480
                                             16 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     636
                                             55 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     648
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    2414
                                             70 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7    9689
                                             55 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3958
                                             28 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4539
                                             55 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    4242
                                             43 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     237
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    2658
                                             24 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    2879
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2281
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2148
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     556
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _stepper_state                                        8     6      2    1578
                                             21 COMRAM     8     6      2
                            _stepper
                        _stepper_rev
 ---------------------------------------------------------------------------------
 (3) _stepper_rev                                          5     3      2     302
                                             16 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _stepper                                              5     3      2     558
                                             16 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor2                                    8     0      8    2227
                                             19 COMRAM     8     0      8
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor1                                    8     0      8    2227
                                             19 COMRAM     8     0      8
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                             19 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _date_time                                            6     4      2    6287
                                            107 COMRAM     1     1      0
                                             69 BANK0      5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1750
                                             17 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             17 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         7     5      2    4402
                                             69 BANK0      7     5      2
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4049
                                             47 BANK0     22    14      8
                            ___awdiv (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                    _time_difference (ARG)
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     927
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _keypressed                                          16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _initLCD
     _lcdInst
       _lcdNibble
   _init_operation
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _read_colorsensor1
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _read_colorsensor2
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _stepper_state
       _stepper
       _stepper_rev
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
     _update_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _lcdInst
     _lcdNibble
   _operation_end
     _delay
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _stepper_state
       _stepper
       _stepper_rev
   _printf
     ___awdiv (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     ___wmul (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
     _time_difference (ARG)
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _runtime
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _update_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1B      2C       7       17.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     77      78       5       93.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6C      6E       1       87.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     112      34        0.0%
DATA                 0      0     112       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 10 03:47:01 2017

                 _update_time 24B6                  ___altoft@exp 004F                 ___altoft@sign 0050  
                ___awdiv@sign 0016           ___wmul@multiplicand 0013                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000                  ___ftadd@exp1 0037  
                ___ftadd@exp2 0036                  ___ftadd@sign 0035                           l223 2322  
                         l224 22BE                           l217 23A6                           l218 2342  
                         l166 009E                           l329 2934                           l722 0DCE  
                         l726 0DF8                           l737 0EA8                           l746 0EC4  
                         l914 10F4                           l829 242C                           l757 1DBE  
                         l919 122A                           l882 2686                           l699 20F0  
                         l779 2908                           l892 27EA                  __CFG_CPB$OFF 000000  
                         _PEN 007E2A                  __CFG_CPD$OFF 000000                           _SEN 007E28  
            ??_init_operation 00CD                           _exp 0BA6                           _log 14DC  
                         _pow 10BC                           wreg 000FE8                   _stepper_rev 22B4  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0022                  ___ftdiv@sign 0027  
                __CFG_WDT$OFF 000000                          l3012 1B14                          l3004 1AEC  
                        l1077 0C58                          l3006 1AF8                          l1078 0D7C  
                        l3008 1AFE                          l3024 2138                          l1088 1EC0  
                        l3120 1E2C                          l3042 1D32                          l3210 0BBE  
                        l4004 13BE                          l3132 1F0E                          l3124 1E46  
                        l3116 1E1E                          l4030 09A6                          l4014 13E6  
                        l3134 1F8A                          l3150 1FFC                          l3142 1FB8  
                        l3222 0C2A                          l4008 13C6                          l3048 1D5A  
                        l3216 0BF4                          l3400 1920                          l4042 0A96  
                        l3330 226A                          l3162 201E                          l4036 0A50  
                        l3332 2272                          l3324 2254                          l3068 1D98  
                        l3244 0D52                          l4054 0B2E                          l4062 0B5C  
                        l3350 22AA                          l3342 2292                          l3334 2276  
                        l3318 2244                          l3174 258E                          l3086 280A  
                        l3166 202A                          l3512 27E0                          l3504 27C0  
                        l4048 0AE2                          l4064 0B7E                          l3176 259A  
                        l3272 117C                          l3264 111A                          l4400 0498  
                        l4320 0072                          l3506 27C8                          l3610 07D4  
                        l4066 0B9A                          l3346 229C                          l3098 2882  
                        l3194 1516                          l3258 1102                          l3508 27CC  
                        l3612 07EC                          l3532 05E4                          l2900 0F10  
                        l3188 14F6                          l3276 11A2                          l3630 086A  
                        l3622 0846                          l3542 0614                          l2910 1B4E  
                        l4414 04F4                          l4326 00A4                          l3624 0850  
                        l3536 05F8                          l4432 057A                          l3474 292C  
                        l3650 090E                          l3642 08AC                          l3618 080E  
                        l3562 06C8                          l3538 060A                          l3378 28C6  
                        l2842 0DDC                          l2930 1BA8                          l2826 2460  
                        l4418 0520                          l4434 0596                          l3820 23DE  
                        l3484 2654                          l3660 097A                          l3636 0886  
                        l3580 075C                          l3556 06BA                          l3564 0700  
                        l3548 0644                          l2780 2072                          l2940 1BD0  
                        l2916 1B76                          l2828 246C                          l3388 1848  
                        l4364 0378                          l3822 23EA                          l3486 265C  
                        l3638 0892                          l3646 08C0                          l3582 0762  
                        l3558 06C0                          l3662 0986                          l3750 1C36  
                        l2870 0E58                          l2934 1BB8                          l4438 05CE  
                        l3832 241E                          l3824 23EE                          l3496 267C  
                        l3488 2660                          l3648 08C6                          l3656 095A  
                        l3576 0740                          l3808 1CDE                          l2792 20BE  
                        l2784 2080                          l2872 0E62                          l2864 0E36  
                        l2848 0E06                          l2944 1BE0                          l2960 2200  
                        l3672 24F2                          l4376 03CE                          l3658 0972  
                        l3594 0798                          l2794 20DC                          l2786 208A  
                        l2890 0EE0                          l2882 0E96                          l2874 0E6C  
                        l3690 2784                          l4482 1308                          l4490 134A  
                        l3596 079E                          l3764 1C60                          l2796 20E6  
                        l2788 20A8                          l2884 0EA0                          l2876 0E74  
                        l2956 21D0                          l3668 24EA                          l4396 046C  
                        l3684 2778                          l4484 131A                          l4492 136C  
                        l4476 12B4                          l2966 222C                          l3678 250E  
                        l3694 2798                          l3686 277C                          l4486 132C  
                        l4478 12C6                          l3792 1CB4                          l2976 1A5E  
                        l3696 279C                          l3778 1C8A                          l2994 1AC4  
                        ?_exp 0059                          ?_log 0044                          l2998 1AD4  
                        ?_pow 0062                          STR_1 FEE4                          STR_2 FF2D  
                        STR_3 FF2D                          STR_4 FFCB                          STR_5 FF41  
                        STR_6 FF87                          STR_7 FF76                          STR_8 FF98  
                        STR_9 FF76                          u2111 1B5E                          u2200 1A7C  
                        u2301 1D42                          u2205 1A74                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u2091 1B36                          u2420 1FD8  
                        u2181 1A42                          u2270 2160                          u2520 0C32  
                        u2281 1D1A                          u2530 0C34                          u2610 1166  
                        u3155 2612                          u2380 1E38                          u2428 1FDA  
                        u2710 28C4                          u2278 2162                          u3470 009E  
                        u3607 278A                          u1881 0D9A                          u3617 0392  
                        u3707 2350                          u1891 0DAE                          u3627 0430  
                        u3717 2368                          u3637 04B8                          u3807 26D8  
                        u3727 2380                          u3647 0540                          u3737 2398  
                        u3657 0588                          u3747 272E                          u3667 22CC  
                        _RCEN 007E2B                          u3757 2762                          u3677 22E4  
                        u3597 137A                          u3767 0B8C                          u3687 22FC  
                        u3777 26A8                          u3697 2314                          u3787 26B0  
                        u3797 26D0                          _RSEN 007E29                          _main 1238  
                ___ftpack@arg 0011                          _keys FE81                  ___ftpack@exp 0014  
                        fsr0h 000FEA                          fsr1h 000FE2                          fsr2h 000FDA  
                        fsr0l 000FE9                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          btemp 006F        __size_of_stepper_state 00F0  
                        exp@x 0059                          log@x 0044                          pow@x 0062  
                        pow@y 0065                          prodh 000FF4                          prodl 000FF3  
                        start 000E                 __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000  
                ___ftmul@cntr 002A                  ___param_bank 000000                  ___ftmul@sign 002B  
               ?_bottle_count 00C5        read_colorsensor1@clear 001A                  ___fttol@exp1 0046  
      read_colorsensor2@clear 001A                         ??_exp 005C                         ??_log 0047  
                ___fttol@lval 0042        read_colorsensor1@green 0016                         ??_pow 0068  
      read_colorsensor2@green 0016              ?_I2C_Master_Init 001E              ?_I2C_Master_Read 0001  
            ?_I2C_Master_Wait 0001                  main@end_time 0107              ?_I2C_Master_Stop 0001  
                       ?_main 0001                         _ACKEN 007E2C                         _ACKDT 007E2D  
             __end_of___awdiv 22B4                         _EEADR 000FA9               __end_of___ftadd 0F36  
                       STR_10 FFDC                         STR_11 FF76                         STR_12 FFA9  
                       STR_20 FF54                         STR_13 FF76                         STR_14 FFED  
                       STR_15 FF76                         STR_16 FFBA                         STR_17 FF65  
                       STR_18 FEFF                         STR_19 FF16               __end_of___ftdiv 1DF0  
             __end_of___ftneg 2916               __end_of___lldiv 243E               __end_of___ftmul 1C1A  
             ___awdiv@divisor 0013               __end_of___ftsub 2834               __end_of___fttol 1B26  
             __end_of___lwdiv 2690                         i2l112 19F4               __end_of___lwmod 27F4  
             ___awdiv@counter 0015                         _PORTB 000F81                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
                ___lltoft@exp 0021               __end_of_lcdInst 296E                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                         _nRBPU 007F8F                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000               __end_of_initLCD 276E  
              __CFG_EBTRB$OFF 000000                 ___awtoft@sign 001C                         _delay 276E  
             __end_of_dpowers FE9C                         _floor 1DF0                         _ldexp 1FA0  
                       _frexp 2110                         _errno 006D               __end_of_isdigit 2934  
               ___ftpack@sign 0015                         _putch 2956                         pclath 000FFA  
                       tablat 000FF5                         pow@yi 0087                         status 000FD8  
             __end_of_stepper 23BC               __end_of_runtime 2728                __CFG_PBADEN$ON 000000  
                 exp@exponent 005F                   ldexp@newexp 0047               __initialization 2834  
                 log@exponent 0047      init_operation@start_time 00C5                ??_bottle_count 00C7  
                __end_of_main 138A      init_operation@step_state 00CB                  __end_of_keys FE92  
                update_time@i 0016                        ??_main 00F5                 ___fttol@sign1 0041  
             runtime@end_time 00C7                 _stepper_state 1C1A                 __activetblptr 000002  
           time_difference@d1 00A9             time_difference@d2 00AB             time_difference@d3 00AD  
              stepper_state@i 001A             time_difference@s1 00A5             time_difference@s2 00A7  
           ?_I2C_Master_Start 0001             ?_I2C_Master_Write 0012                 main@bot_count 0115  
     stepper_state@curr_state 001C                        ?_delay 0011            ??_I2C_Master_Start 0012  
                      _ADCON0 000FC2                        _ADCON1 000FC1            ??_I2C_Master_Write 0014  
                      ?_floor 0051                        ?_ldexp 0044                        ?_frexp 0011  
            __end_of___altoft 24B6                        _EEADRH 000FAA                        _EEDATA 000FA8  
                      _EECON2 000FA7              ___awdiv@dividend 0011              __end_of___awtoft 28A6  
                      ?_putch 0001              __end_of___ftpack 2110              __end_of___lltoft 25E4  
                      _INT1IE 007F83                        _INT1IF 007F80                        i2l4130 197E  
                      i2l4140 1998                        i2l4132 1982                        i2l4142 199C  
                      i2l4134 198C                        i2l4126 1976                        i2l4136 1990  
                      i2l4128 197A                        i2l4138 1994                        i2l4146 19AA  
init_operation@detection_time 00D9                        _SSPADD 000FC8                        _TRISC3 007CA3  
                      _TRISC4 007CA4                        _SSPBUF 000FC9               update_time@time 0014  
              __CFG_XINST$OFF 000000                        ___ftge 21A0                        ___wmul 28CC  
                   ??___awdiv 0015                     ??___ftadd 0032                __CFG_STVREN$ON 000000  
                   ??___ftdiv 001F                     ??___ftneg 0014                     ??___lldiv 0019  
                   ??___ftmul 0023                     ??___ftsub 003E                     ??___fttol 003C  
                   ??___lwdiv 0015                     ??___lwmod 001C                 dec_to_hex@num 0068  
                      delay@i 0014              ___awdiv@quotient 0017                ?_stepper_state 0016  
                   ??_lcdInst 0013                        _printf 05D6                        floor@i 0054  
                      floor@x 0051         ___ftmul@f3_as_product 0027                     ??_initLCD 0014  
                   ??_isdigit 0011               _time_difference 0F36                  __mediumconst FE80  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_stepper 0013                     ??_runtime 006C              __end_ofexp@coeff FEC9  
            __end_oflog@coeff FEE4                    __accesstop 0080       __end_of__initialization 2860  
                  ___altoft@c 0047                    ___ftadd@f1 002C                    ___ftadd@f2 002F  
                  ___ftge@ff1 0011                    ___ftge@ff2 0014         __end_of_operation_end 2588  
                eval_poly@res 0041                 ___rparam_used 000001                    ___ftdiv@f1 0019  
                  ___ftdiv@f2 001C                    ___ftdiv@f3 0023                    ___ftneg@f1 0011  
        time_difference@time1 0099          time_difference@time2 009B                    ___awtoft@c 0019  
                  ___ftmul@f1 001D                    ___ftmul@f2 0020                    ___ftsub@f1 0038  
                  ___ftsub@f2 003B                    ___fttol@f1 0038          __end_of_happynewyear FEAB  
              __pcstackCOMRAM 0001                  ?_update_time 0014                  __pidataBANK1 2946  
     stepper_state@step_state 0016                 __end_of_delay 27B2                    ___lltoft@c 0019  
               __end_of_floor 1ECE                 __end_of_ldexp 2062                 __end_of_frexp 21A0  
               __end_of_putch 2962            __size_of_date_time 0152                  stepper_rev@i 0014  
                stepper_rev@r 0011            __size_of_lcdNibble 004E         bottle_count@bot_count 00C5  
                ?_stepper_rev 0011                       ??_delay 0013                       ??_floor 0054  
                     ??_ldexp 0049                       ??_frexp 0016          __end_of_bottle_count 0BA6  
                  _dec_to_hex 182A                       ??_putch 0013                    __pbssBANK0 00F7  
                  __pbssBANK1 012B            time_difference@hr1 009D            time_difference@hr2 009F  
          __size_of_eval_poly 00D2                       ?___ftge 0011                       ?___wmul 0011  
             ??_stepper_state 0018                     ?___altoft 0047              init_operation@b1 00D3  
            init_operation@b2 00F3              init_operation@c1 00D5              init_operation@c2 00E3  
            init_operation@g1 00D1              init_operation@g2 00E5       __end_of_time_difference 10BC  
            init_operation@r1 00CF              init_operation@r2 00F1                     ?___awtoft 0019  
                   ?___ftpack 0011                       ?_printf 00AF                     ?___lltoft 0019  
                     _SSPCON1 000FC6                       _SSPCON2 000FC5                       _SSPSTAT 000FC7  
           __end_of_date_time 14DC             _read_colorsensor1 1710             _read_colorsensor2 15F6  
          init_operation@blue 00ED            init_operation@time 00C7             __end_of_lcdNibble 26DE  
          ?_read_colorsensor1 0014            ?_read_colorsensor2 0014                       __Hparam 0000  
                     __Lparam 0000               __size_of___ftge 0090                       ___awdiv 2230  
                     ___ftadd 0D8A                       ___ftdiv 1D0A                       ___ftneg 28F2  
                     ___lldiv 23BC               __size_of___wmul 0026                       ___ftmul 1B26  
                     ___ftsub 27F4                       ___fttol 1A32                       ___lwdiv 263E  
                     ___lwmod 27B2           ??_read_colorsensor1 001C           ??_read_colorsensor2 001C  
                  _curr_state 012B                    ??___altoft 004B                       __pcinit 2834  
                  ??___awtoft 001C                    ??___ftpack 0016             __end_of_eval_poly 1FA0  
                     __ramtop 1000                       _lcdInst 2962                    ??___lltoft 001D  
                     __ptext0 1238                       __ptext1 26DE                       __ptext2 2528  
                     __ptext3 276E                       __ptext4 0012                       __ptext5 24B6  
                     __ptext6 0F36                       __ptext7 182A                       __ptext8 10BC  
                     __ptext9 14DC                    delay@i_460 0016               __size_of_printf 03CE  
              dec_to_hex@temp 0091                       _initLCD 2728             __end_of_hexpowers FEA4  
                     _dpowers FE92                  __size_of_exp 01E4                  __size_of_log 011A  
                     _isdigit 2916                  __size_of_pow 017C                    _keypressed 0008  
    __size_of_I2C_Master_Init 005A      __size_of_I2C_Master_Read 0026      __size_of_I2C_Master_Wait 0012  
                  date_time@i 006C      __size_of_I2C_Master_Stop 0008                       _stepper 2338  
                     _runtime 26DE                   ?_dec_to_hex 0068                __pintcode_body 1936  
        end_of_initialization 2860                       exp@sign 0061     __end_of_read_colorsensor1 182A  
   __end_of_read_colorsensor2 1710       __size_of_init_operation 05C4       operation_end@step_state 00C5  
               __Lmediumconst FE80                       int_func 1936     __size_of_I2C_Master_Start 0008  
   __size_of_I2C_Master_Write 000A               ___lldiv@divisor 0015                       pow@sign 0086  
             ___lldiv@counter 001D                       printf@c 00C4                       printf@f 00AF  
            I2C_Master_Init@c 001E              I2C_Master_Read@a 0012                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
               date_time@time 00C5          __size_of_update_time 0072                main@start_time 0100  
              main@step_state 0119              ?_time_difference 0099                     _PORTCbits 000F82  
                   _PORTEbits 000F84         __size_of_bottle_count 0202       init_operation@bot_count 00C9  
                _happynewyear FEA4          __size_of_stepper_rev 0084                   ___ftdiv@exp 0026  
                 printf@width 00C2                   ___ftmul@exp 0026         read_colorsensor1@blue 0018  
       read_colorsensor2@blue 0018                  _bottle_count 09A4                __end_of___ftge 2230  
              __end_of___wmul 28F2           __size_of_dec_to_hex 010C                    floor@expon 0057  
              __end_of_printf 09A4           start_initialization 2834                    eval_poly@d 003B  
                  eval_poly@n 003D                    eval_poly@x 0038                   ?_keypressed 0001  
                  ldexp@value 0044                   __end_of_exp 0D8A                   __end_of_log 15F6  
                 __end_of_pow 1238    __size_of_read_colorsensor1 011A    __size_of_read_colorsensor2 011A  
                  frexp@value 0011             ??_I2C_Master_Init 0022             ??_I2C_Master_Read 0012  
           ??_I2C_Master_Wait 0011             ??_I2C_Master_Stop 0012                      ??___ftge 0017  
                    ??___wmul 0015                   __pdataBANK1 011B              __CFG_LPT1OSC$OFF 000000  
                    ??_printf 00B7             __size_of___altoft 0078             __size_of___awtoft 0038  
           __size_of___ftpack 00AE             __size_of___lltoft 005C                   __pbssCOMRAM 006D  
      __size_of_operation_end 0060           time_difference@min1 00A1           time_difference@min2 00A3  
               __pcstackBANK0 0080                 __pcstackBANK1 0100                  _isdigit$1026 0012  
              _init_operation 0012              _I2C_Master_Start 2980              _I2C_Master_Write 296E  
                   _date_time 138A              ___lwdiv@dividend 0011             __CFG_CCP2MX$PORTC 000000  
         __size_of_keypressed 1A2A                     __pintcode 0008                 __pmediumconst FE80  
                   _lcdNibble 2690                      ?___awdiv 0011                      ?___ftadd 002C  
             init_operation@i 00E7                      ?___ftdiv 0019                      ?___ftneg 0011  
                    ?___lldiv 0011                      ?___ftmul 001D                      ?___ftsub 0038  
                    ?___fttol 0038                      ?___lwdiv 0011                      ?___lwmod 0018  
       __end_of_stepper_state 1D0A                      ?_lcdInst 0001              dec_to_hex@hexnum 0095  
                    ?_initLCD 0001                      ?_isdigit 0001                     _eval_poly 1ECE  
           init_operation@red 00E9                     _hexpowers FE9C              ___lwdiv@quotient 0015  
              __size_of_delay 0044                      ?_stepper 0011        __end_of_init_operation 05D6  
              __size_of_floor 00DE                __size_of_ldexp 00C2                __size_of_frexp 0090  
                ??_dec_to_hex 006A                      ?_runtime 00C5                __size_of_putch 000C  
                delay@seconds 0011                ___wmul@product 0015                      _LATDbits 000F8C  
         _init_operation$1476 00E0                 _operation_end 2528                    ?_date_time 00C5  
                    _PIR2bits 000FA1              __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001  
          __end_of_dec_to_hex 1936             ___wmul@multiplier 0011                 lcdNibble@data 0012  
                  printf@flag 00C1                 lcdNibble@temp 0011                    printf@prec 00BE  
                  ?_eval_poly 0038          read_colorsensor1@red 0014          read_colorsensor2@red 0014  
           runtime@start_time 00C5           I2C_Master_Read@temp 0013               ?_init_operation 00C5  
                   copy_data0 2848            dec_to_hex@quotient 0097           init_operation@clear 00EF  
         init_operation@green 00EB     init_operation@luminosity1 00D7                     frexp@eptr 0014  
                  _EECON1bits 000FA6                ?_operation_end 00C5               hex_to_dec@F3223 011B  
                    __Hrparam 0000                      __Lrparam 0000                 ??_update_time 0016  
          __CFG_BOREN$SBORDIS 000000                   dec_to_hex@i 0093              __size_of___awdiv 0084  
            __size_of___ftadd 01AC              __size_of___ftdiv 00E6              __size_of___ftneg 0024  
            __size_of___lldiv 0082                      ___altoft 243E              __size_of___ftmul 00F4  
            __size_of___ftsub 0040              __size_of___fttol 00F4              __size_of___lwdiv 0052  
            __size_of___lwmod 0042                      ___awtoft 286E                      ___ftpack 2062  
                    ___lltoft 2588              __size_of_lcdInst 000C                      _exp$1479 005C  
             _I2C_Master_Init 25E4               _I2C_Master_Read 28A6              __size_of_initLCD 0046  
             _I2C_Master_Wait 2934               _I2C_Master_Stop 2978                  ??_keypressed 0001  
            __size_of_isdigit 001E               ___lwdiv@divisor 0013      __size_of_time_difference 0186  
               ??_stepper_rev 0013               ___lwdiv@counter 0017                      __ptext10 0BA6  
                    __ptext11 1FA0                      __ptext20 0D8A                      __ptext12 1DF0  
                    __ptext21 28F2                      __ptext13 2110                      __ptext30 15F6  
                    __ptext22 1D0A                      __ptext14 1A32                      __ptext31 1710  
                    __ptext23 286E                      __ptext15 21A0                      __ptext40 05D6  
                    __ptext32 2728                      __ptext24 2588                      __ptext16 243E  
                    __ptext41 2956                      __ptext33 138A                      __ptext25 2062  
                    __ptext17 1ECE                      __ptext42 2916                      __ptext34 296E  
                    __ptext26 2230                      __ptext18 1B26                      __ptext43 28CC  
                    __ptext35 2978                      __ptext27 1C1A                      __ptext19 27F4  
                    __ptext44 27B2                      __ptext36 2980                      __ptext28 22B4  
                    __ptext45 263E                      __ptext37 28A6                      __ptext29 2338  
                    __ptext46 2962                      __ptext38 2934                      __ptext47 2690  
                    __ptext39 09A4                      __ptext48 25E4                      __ptext49 23BC  
                    _pow$1477 0080                      _pow$1478 0083                      _bot_type 00F7  
            __size_of_stepper 0084              __size_of_runtime 004A                 __size_of_main 0152  
             _dec_to_hex$1472 008B               _dec_to_hex$1473 008E                   ??_date_time 00C7  
                 ??_lcdNibble 0011            __end_of_keypressed 1A32                      int$flags 006F  
                   printf@idx 00BB                     printf@val 00BF                      main@time 010E  
         __end_of_update_time 2528                      exp@coeff FEAB                      log@coeff FEC9  
                   putch@data 0013      __end_of_I2C_Master_Start 2988      __end_of_I2C_Master_Write 2978  
                  _INTCONbits 000FF2                   ??_eval_poly 003F                      isdigit@c 0013  
                    intlevel2 0000               ??_operation_end 006C              ___lwmod@dividend 0018  
            ___lldiv@dividend 0011           __end_of_stepper_rev 2338                      printf@ap 00BC  
     __end_of_I2C_Master_Init 263E       __end_of_I2C_Master_Read 28CC       __end_of_I2C_Master_Wait 2946  
     __end_of_I2C_Master_Stop 2980                   lcdInst@data 0013                      stepper@i 0014  
                    stepper@r 0011              ___lldiv@quotient 0019             I2C_Master_Write@d 0012  
             ___lwmod@divisor 001A               ___lwmod@counter 001C             ??_time_difference 006A  
