

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 27 04:07:30 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    62                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    63                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    64  0000                     
    65                           ; Version 1.40
    66                           ; Generated 01/12/2016 GMT
    67                           ; 
    68                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC18F4620 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99  0000                     
   100                           	psect	idataBANK1
   101  002300                     __pidataBANK1:
   102                           	opt stack 0
   103                           
   104                           ;initializer for hex_to_dec@F3177
   105  002300  00                 	db	0
   106  002301  01                 	db	1
   107  002302  02                 	db	2
   108  002303  03                 	db	3
   109  002304  04                 	db	4
   110  002305  05                 	db	5
   111  002306  06                 	db	6
   112  002307  07                 	db	7
   113  002308  08                 	db	8
   114  002309  09                 	db	9
   115  00230A  0A                 	db	10
   116  00230B  0B                 	db	11
   117  00230C  0C                 	db	12
   118  00230D  0D                 	db	13
   119  00230E  0E                 	db	14
   120  00230F  0F                 	db	15
   121                           
   122                           	psect	mediumconst
   123  00FE6E                     __pmediumconst:
   124                           	opt stack 0
   125  00FE6E  00                 	db	0
   126  00FE6F                     _keys:
   127                           	opt stack 0
   128  00FE6F  5A                 	db	90
   129  00FE70  32                 	db	50
   130  00FE71  33                 	db	51
   131  00FE72  41                 	db	65
   132  00FE73  34                 	db	52
   133  00FE74  35                 	db	53
   134  00FE75  36                 	db	54
   135  00FE76  42                 	db	66
   136  00FE77  37                 	db	55
   137  00FE78  38                 	db	56
   138  00FE79  39                 	db	57
   139  00FE7A  43                 	db	67
   140  00FE7B  2A                 	db	42
   141  00FE7C  30                 	db	48
   142  00FE7D  23                 	db	35
   143  00FE7E  44                 	db	68
   144  00FE7F  00                 	db	0
   145  00FE80                     __end_of_keys:
   146                           	opt stack 0
   147  00FE80                     _dpowers:
   148                           	opt stack 0
   149  00FE80  0001               	dw	1
   150  00FE82  000A               	dw	10
   151  00FE84  0064               	dw	100
   152  00FE86  03E8               	dw	1000
   153  00FE88  2710               	dw	10000
   154  00FE8A                     __end_of_dpowers:
   155                           	opt stack 0
   156  00FE8A                     _hexpowers:
   157                           	opt stack 0
   158  00FE8A  0001               	dw	1
   159  00FE8C  0010               	dw	16
   160  00FE8E  0100               	dw	256
   161  00FE90  1000               	dw	4096
   162  00FE92                     __end_of_hexpowers:
   163                           	opt stack 0
   164  00FE92                     _happynewyear:
   165                           	opt stack 0
   166  00FE92  45                 	db	69
   167  00FE93  59                 	db	89
   168  00FE94  23                 	db	35
   169  00FE95  07                 	db	7
   170  00FE96  31                 	db	49
   171  00FE97  12                 	db	18
   172  00FE98  16                 	db	22
   173  00FE99                     __end_of_happynewyear:
   174                           	opt stack 0
   175  00FE99                     exp@coeff:
   176                           	opt stack 0
   177  00FE99  00                 	db	0
   178  00FE9A  80                 	db	128
   179  00FE9B  3F                 	db	63
   180  00FE9C  72                 	db	114
   181  00FE9D  31                 	db	49
   182  00FE9E  3F                 	db	63
   183  00FE9F  FE                 	db	254
   184  00FEA0  75                 	db	117
   185  00FEA1  3E                 	db	62
   186  00FEA2  58                 	db	88
   187  00FEA3  63                 	db	99
   188  00FEA4  3D                 	db	61
   189  00FEA5  95                 	db	149
   190  00FEA6  1D                 	db	29
   191  00FEA7  3C                 	db	60
   192  00FEA8  C5                 	db	197
   193  00FEA9  AE                 	db	174
   194  00FEAA  3A                 	db	58
   195  00FEAB  79                 	db	121
   196  00FEAC  21                 	db	33
   197  00FEAD  39                 	db	57
   198  00FEAE  94                 	db	148
   199  00FEAF  80                 	db	128
   200  00FEB0  37                 	db	55
   201  00FEB1  93                 	db	147
   202  00FEB2  A7                 	db	167
   203  00FEB3  35                 	db	53
   204  00FEB4  56                 	db	86
   205  00FEB5  15                 	db	21
   206  00FEB6  34                 	db	52
   207  00FEB7                     __end_ofexp@coeff:
   208                           	opt stack 0
   209  00FEB7                     log@coeff:
   210                           	opt stack 0
   211  00FEB7  00                 	db	0
   212  00FEB8  00                 	db	0
   213  00FEB9  00                 	db	0
   214  00FEBA  00                 	db	0
   215  00FEBB  80                 	db	128
   216  00FEBC  3F                 	db	63
   217  00FEBD  F0                 	db	240
   218  00FEBE  FF                 	db	255
   219  00FEBF  BE                 	db	190
   220  00FEC0  E2                 	db	226
   221  00FEC1  A9                 	db	169
   222  00FEC2  3E                 	db	62
   223  00FEC3  83                 	db	131
   224  00FEC4  76                 	db	118
   225  00FEC5  BE                 	db	190
   226  00FEC6  AE                 	db	174
   227  00FEC7  2B                 	db	43
   228  00FEC8  3E                 	db	62
   229  00FEC9  3C                 	db	60
   230  00FECA  C3                 	db	195
   231  00FECB  BD                 	db	189
   232  00FECC  D2                 	db	210
   233  00FECD  13                 	db	19
   234  00FECE  3D                 	db	61
   235  00FECF  78                 	db	120
   236  00FED0  D3                 	db	211
   237  00FED1  BB                 	db	187
   238  00FED2                     __end_oflog@coeff:
   239                           	opt stack 0
   240  0000                     _ADCON0	set	4034
   241  0000                     _ADCON1	set	4033
   242  0000                     _INTCONbits	set	4082
   243  0000                     _LATA	set	3977
   244  0000                     _LATB	set	3978
   245  0000                     _LATC	set	3979
   246  0000                     _LATD	set	3980
   247  0000                     _LATDbits	set	3980
   248  0000                     _LATE	set	3981
   249  0000                     _PORTB	set	3969
   250  0000                     _PORTBbits	set	3969
   251  0000                     _PORTCbits	set	3970
   252  0000                     _PORTEbits	set	3972
   253  0000                     _SSPADD	set	4040
   254  0000                     _SSPBUF	set	4041
   255  0000                     _SSPCON1	set	4038
   256  0000                     _SSPCON2	set	4037
   257  0000                     _SSPSTAT	set	4039
   258  0000                     _TRISA	set	3986
   259  0000                     _TRISB	set	3987
   260  0000                     _TRISC	set	3988
   261  0000                     _TRISD	set	3989
   262  0000                     _TRISE	set	3990
   263  0000                     _ACKDT	set	32301
   264  0000                     _ACKEN	set	32300
   265  0000                     _INT1IE	set	32643
   266  0000                     _INT1IF	set	32640
   267  0000                     _PEN	set	32298
   268  0000                     _RCEN	set	32299
   269  0000                     _RSEN	set	32297
   270  0000                     _SEN	set	32296
   271  0000                     _TRISC3	set	31907
   272  0000                     _TRISC4	set	31908
   273  0000                     _nRBPU	set	32655
   274  00FED2                     STR_1:
   275  00FED2  50                 	db	80	;'P'
   276  00FED3  72                 	db	114	;'r'
   277  00FED4  65                 	db	101	;'e'
   278  00FED5  73                 	db	115	;'s'
   279  00FED6  73                 	db	115	;'s'
   280  00FED7  20                 	db	32
   281  00FED8  31                 	db	49	;'1'
   282  00FED9  20                 	db	32
   283  00FEDA  74                 	db	116	;'t'
   284  00FEDB  6F                 	db	111	;'o'
   285  00FEDC  20                 	db	32
   286  00FEDD  62                 	db	98	;'b'
   287  00FEDE  65                 	db	101	;'e'
   288  00FEDF  67                 	db	103	;'g'
   289  00FEE0  69                 	db	105	;'i'
   290  00FEE1  6E                 	db	110	;'n'
   291  00FEE2  20                 	db	32
   292  00FEE3  6F                 	db	111	;'o'
   293  00FEE4  70                 	db	112	;'p'
   294  00FEE5  65                 	db	101	;'e'
   295  00FEE6  72                 	db	114	;'r'
   296  00FEE7  61                 	db	97	;'a'
   297  00FEE8  74                 	db	116	;'t'
   298  00FEE9  69                 	db	105	;'i'
   299  00FEEA  6F                 	db	111	;'o'
   300  00FEEB  6E                 	db	110	;'n'
   301  00FEEC  00                 	db	0
   302  00FEED                     STR_20:
   303  00FEED  44                 	db	68	;'D'
   304  00FEEE  61                 	db	97	;'a'
   305  00FEEF  74                 	db	116	;'t'
   306  00FEF0  65                 	db	101	;'e'
   307  00FEF1  3A                 	db	58	;':'
   308  00FEF2  20                 	db	32
   309  00FEF3  25                 	db	37
   310  00FEF4  30                 	db	48	;'0'
   311  00FEF5  32                 	db	50	;'2'
   312  00FEF6  78                 	db	120	;'x'
   313  00FEF7  2F                 	db	47
   314  00FEF8  25                 	db	37
   315  00FEF9  30                 	db	48	;'0'
   316  00FEFA  32                 	db	50	;'2'
   317  00FEFB  78                 	db	120	;'x'
   318  00FEFC  2F                 	db	47
   319  00FEFD  25                 	db	37
   320  00FEFE  30                 	db	48	;'0'
   321  00FEFF  32                 	db	50	;'2'
   322  00FF00  78                 	db	120	;'x'
   323  00FF01  20                 	db	32
   324  00FF02  20                 	db	32
   325  00FF03  00                 	db	0
   326  00FF04                     STR_21:
   327  00FF04  54                 	db	84	;'T'
   328  00FF05  69                 	db	105	;'i'
   329  00FF06  6D                 	db	109	;'m'
   330  00FF07  65                 	db	101	;'e'
   331  00FF08  3A                 	db	58	;':'
   332  00FF09  20                 	db	32
   333  00FF0A  25                 	db	37
   334  00FF0B  30                 	db	48	;'0'
   335  00FF0C  32                 	db	50	;'2'
   336  00FF0D  78                 	db	120	;'x'
   337  00FF0E  3A                 	db	58	;':'
   338  00FF0F  25                 	db	37
   339  00FF10  30                 	db	48	;'0'
   340  00FF11  32                 	db	50	;'2'
   341  00FF12  78                 	db	120	;'x'
   342  00FF13  3A                 	db	58	;':'
   343  00FF14  25                 	db	37
   344  00FF15  30                 	db	48	;'0'
   345  00FF16  32                 	db	50	;'2'
   346  00FF17  78                 	db	120	;'x'
   347  00FF18  20                 	db	32
   348  00FF19  20                 	db	32
   349  00FF1A  00                 	db	0
   350  00FF1B                     STR_4:
   351  00FF1B  25                 	db	37
   352  00FF1C  69                 	db	105	;'i'
   353  00FF1D  20                 	db	32
   354  00FF1E  20                 	db	32
   355  00FF1F  20                 	db	32
   356  00FF20  20                 	db	32
   357  00FF21  20                 	db	32
   358  00FF22  20                 	db	32
   359  00FF23  20                 	db	32
   360  00FF24  20                 	db	32
   361  00FF25  20                 	db	32
   362  00FF26  20                 	db	32
   363  00FF27  20                 	db	32
   364  00FF28  20                 	db	32
   365  00FF29  20                 	db	32
   366  00FF2A  20                 	db	32
   367  00FF2B  20                 	db	32
   368  00FF2C  20                 	db	32
   369  00FF2D  00                 	db	0
   370  00FF2E                     STR_7:
   371  00FF2E  54                 	db	84	;'T'
   372  00FF2F  69                 	db	105	;'i'
   373  00FF30  6D                 	db	109	;'m'
   374  00FF31  65                 	db	101	;'e'
   375  00FF32  3A                 	db	58	;':'
   376  00FF33  20                 	db	32
   377  00FF34  25                 	db	37
   378  00FF35  69                 	db	105	;'i'
   379  00FF36  73                 	db	115	;'s'
   380  00FF37  20                 	db	32
   381  00FF38  20                 	db	32
   382  00FF39  20                 	db	32
   383  00FF3A  20                 	db	32
   384  00FF3B  20                 	db	32
   385  00FF3C  20                 	db	32
   386  00FF3D  20                 	db	32
   387  00FF3E  20                 	db	32
   388  00FF3F  20                 	db	32
   389  00FF40  00                 	db	0
   390  00FF41                     STR_3:
   391  00FF41  45                 	db	69	;'E'
   392  00FF42  6C                 	db	108	;'l'
   393  00FF43  61                 	db	97	;'a'
   394  00FF44  70                 	db	112	;'p'
   395  00FF45  73                 	db	115	;'s'
   396  00FF46  65                 	db	101	;'e'
   397  00FF47  64                 	db	100	;'d'
   398  00FF48  3A                 	db	58	;':'
   399  00FF49  20                 	db	32
   400  00FF4A  25                 	db	37
   401  00FF4B  69                 	db	105	;'i'
   402  00FF4C  73                 	db	115	;'s'
   403  00FF4D  20                 	db	32
   404  00FF4E  20                 	db	32
   405  00FF4F  20                 	db	32
   406  00FF50  20                 	db	32
   407  00FF51  20                 	db	32
   408  00FF52  20                 	db	32
   409  00FF53  00                 	db	0
   410  00FF54                     STR_22:
   411  00FF54  30                 	db	48	;'0'
   412  00FF55  31                 	db	49	;'1'
   413  00FF56  32                 	db	50	;'2'
   414  00FF57  33                 	db	51	;'3'
   415  00FF58  34                 	db	52	;'4'
   416  00FF59  35                 	db	53	;'5'
   417  00FF5A  36                 	db	54	;'6'
   418  00FF5B  37                 	db	55	;'7'
   419  00FF5C  38                 	db	56	;'8'
   420  00FF5D  39                 	db	57	;'9'
   421  00FF5E  61                 	db	97	;'a'
   422  00FF5F  62                 	db	98	;'b'
   423  00FF60  63                 	db	99	;'c'
   424  00FF61  64                 	db	100	;'d'
   425  00FF62  65                 	db	101	;'e'
   426  00FF63  66                 	db	102	;'f'
   427  00FF64  00                 	db	0
   428  00FF65                     STR_9:
   429  00FF65  43                 	db	67	;'C'
   430  00FF66  6F                 	db	111	;'o'
   431  00FF67  75                 	db	117	;'u'
   432  00FF68  6E                 	db	110	;'n'
   433  00FF69  74                 	db	116	;'t'
   434  00FF6A  3A                 	db	58	;':'
   435  00FF6B  20                 	db	32
   436  00FF6C  25                 	db	37
   437  00FF6D  69                 	db	105	;'i'
   438  00FF6E  20                 	db	32
   439  00FF6F  20                 	db	32
   440  00FF70  20                 	db	32
   441  00FF71  20                 	db	32
   442  00FF72  20                 	db	32
   443  00FF73  20                 	db	32
   444  00FF74  20                 	db	32
   445  00FF75  00                 	db	0
   446  00FF76                     STR_8:
   447  00FF76  54                 	db	84	;'T'
   448  00FF77  6F                 	db	111	;'o'
   449  00FF78  74                 	db	116	;'t'
   450  00FF79  61                 	db	97	;'a'
   451  00FF7A  6C                 	db	108	;'l'
   452  00FF7B  20                 	db	32
   453  00FF7C  42                 	db	66	;'B'
   454  00FF7D  6F                 	db	111	;'o'
   455  00FF7E  74                 	db	116	;'t'
   456  00FF7F  74                 	db	116	;'t'
   457  00FF80  6C                 	db	108	;'l'
   458  00FF81  65                 	db	101	;'e'
   459  00FF82  20                 	db	32
   460  00FF83  20                 	db	32
   461  00FF84  20                 	db	32
   462  00FF85  20                 	db	32
   463  00FF86  00                 	db	0
   464  00FF87                     STR_10:
   465  00FF87  59                 	db	89	;'Y'
   466  00FF88  4F                 	db	79	;'O'
   467  00FF89  50                 	db	80	;'P'
   468  00FF8A  20                 	db	32
   469  00FF8B  57                 	db	87	;'W'
   470  00FF8C  69                 	db	105	;'i'
   471  00FF8D  74                 	db	116	;'t'
   472  00FF8E  68                 	db	104	;'h'
   473  00FF8F  20                 	db	32
   474  00FF90  43                 	db	67	;'C'
   475  00FF91  61                 	db	97	;'a'
   476  00FF92  70                 	db	112	;'p'
   477  00FF93  20                 	db	32
   478  00FF94  20                 	db	32
   479  00FF95  20                 	db	32
   480  00FF96  20                 	db	32
   481  00FF97  00                 	db	0
   482  00FF98                     STR_14:
   483  00FF98  45                 	db	69	;'E'
   484  00FF99  53                 	db	83	;'S'
   485  00FF9A  4B                 	db	75	;'K'
   486  00FF9B  41                 	db	65	;'A'
   487  00FF9C  20                 	db	32
   488  00FF9D  57                 	db	87	;'W'
   489  00FF9E  69                 	db	105	;'i'
   490  00FF9F  74                 	db	116	;'t'
   491  00FFA0  68                 	db	104	;'h'
   492  00FFA1  20                 	db	32
   493  00FFA2  43                 	db	67	;'C'
   494  00FFA3  61                 	db	97	;'a'
   495  00FFA4  70                 	db	112	;'p'
   496  00FFA5  20                 	db	32
   497  00FFA6  20                 	db	32
   498  00FFA7  20                 	db	32
   499  00FFA8  00                 	db	0
   500  00FFA9                     STR_18:
   501  00FFA9  4F                 	db	79	;'O'
   502  00FFAA  70                 	db	112	;'p'
   503  00FFAB  65                 	db	101	;'e'
   504  00FFAC  72                 	db	114	;'r'
   505  00FFAD  61                 	db	97	;'a'
   506  00FFAE  74                 	db	116	;'t'
   507  00FFAF  69                 	db	105	;'i'
   508  00FFB0  6F                 	db	111	;'o'
   509  00FFB1  6E                 	db	110	;'n'
   510  00FFB2  20                 	db	32
   511  00FFB3  44                 	db	68	;'D'
   512  00FFB4  6F                 	db	111	;'o'
   513  00FFB5  6E                 	db	110	;'n'
   514  00FFB6  65                 	db	101	;'e'
   515  00FFB7  21                 	db	33
   516  00FFB8  20                 	db	32
   517  00FFB9  00                 	db	0
   518  00FFBA                     STR_6:
   519  00FFBA  54                 	db	84	;'T'
   520  00FFBB  6F                 	db	111	;'o'
   521  00FFBC  74                 	db	116	;'t'
   522  00FFBD  61                 	db	97	;'a'
   523  00FFBE  6C                 	db	108	;'l'
   524  00FFBF  20                 	db	32
   525  00FFC0  4F                 	db	79	;'O'
   526  00FFC1  70                 	db	112	;'p'
   527  00FFC2  65                 	db	101	;'e'
   528  00FFC3  72                 	db	114	;'r'
   529  00FFC4  61                 	db	97	;'a'
   530  00FFC5  74                 	db	116	;'t'
   531  00FFC6  69                 	db	105	;'i'
   532  00FFC7  6F                 	db	111	;'o'
   533  00FFC8  6E                 	db	110	;'n'
   534  00FFC9  20                 	db	32
   535  00FFCA  00                 	db	0
   536  00FFCB                     STR_12:
   537  00FFCB  59                 	db	89	;'Y'
   538  00FFCC  4F                 	db	79	;'O'
   539  00FFCD  50                 	db	80	;'P'
   540  00FFCE  20                 	db	32
   541  00FFCF  57                 	db	87	;'W'
   542  00FFD0  69                 	db	105	;'i'
   543  00FFD1  74                 	db	116	;'t'
   544  00FFD2  68                 	db	104	;'h'
   545  00FFD3  20                 	db	32
   546  00FFD4  4E                 	db	78	;'N'
   547  00FFD5  6F                 	db	111	;'o'
   548  00FFD6  20                 	db	32
   549  00FFD7  43                 	db	67	;'C'
   550  00FFD8  61                 	db	97	;'a'
   551  00FFD9  70                 	db	112	;'p'
   552  00FFDA  20                 	db	32
   553  00FFDB  00                 	db	0
   554  00FFDC                     STR_2:
   555  00FFDC  50                 	db	80	;'P'
   556  00FFDD  72                 	db	114	;'r'
   557  00FFDE  65                 	db	101	;'e'
   558  00FFDF  73                 	db	115	;'s'
   559  00FFE0  73                 	db	115	;'s'
   560  00FFE1  20                 	db	32
   561  00FFE2  2A                 	db	42
   562  00FFE3  20                 	db	32
   563  00FFE4  54                 	db	84	;'T'
   564  00FFE5  6F                 	db	111	;'o'
   565  00FFE6  20                 	db	32
   566  00FFE7  53                 	db	83	;'S'
   567  00FFE8  74                 	db	116	;'t'
   568  00FFE9  6F                 	db	111	;'o'
   569  00FFEA  70                 	db	112	;'p'
   570  00FFEB  20                 	db	32
   571  00FFEC  00                 	db	0
   572  00FFED                     STR_16:
   573  00FFED  45                 	db	69	;'E'
   574  00FFEE  53                 	db	83	;'S'
   575  00FFEF  4B                 	db	75	;'K'
   576  00FFF0  41                 	db	65	;'A'
   577  00FFF1  20                 	db	32
   578  00FFF2  57                 	db	87	;'W'
   579  00FFF3  69                 	db	105	;'i'
   580  00FFF4  74                 	db	116	;'t'
   581  00FFF5  68                 	db	104	;'h'
   582  00FFF6  20                 	db	32
   583  00FFF7  4E                 	db	78	;'N'
   584  00FFF8  6F                 	db	111	;'o'
   585  00FFF9  20                 	db	32
   586  00FFFA  43                 	db	67	;'C'
   587  00FFFB  61                 	db	97	;'a'
   588  00FFFC  70                 	db	112	;'p'
   589  00FFFD  00                 	db	0
   590  0000                     
   591                           ; #config settings
   592  00FFFE  00                 	db	0	; dummy byte at the end
   593  0000                     
   594                           	psect	cinit
   595  0021F0                     __pcinit:
   596                           	opt stack 0
   597  0021F0                     start_initialization:
   598                           	opt stack 0
   599  0021F0                     __initialization:
   600                           	opt stack 0
   601                           
   602                           ; Initialize objects allocated to BANK1 (16 bytes)
   603                           ; load TBLPTR registers with __pidataBANK1
   604  0021F0  0E00               	movlw	low __pidataBANK1
   605  0021F2  6EF6               	movwf	tblptrl,c
   606  0021F4  0E23               	movlw	high __pidataBANK1
   607  0021F6  6EF7               	movwf	tblptrh,c
   608  0021F8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   609  0021FA  6EF8               	movwf	tblptru,c
   610  0021FC  EE01  F000         	lfsr	0,__pdataBANK1
   611  002200  EE10 F010          	lfsr	1,16
   612  002204                     copy_data0:
   613  002204  0009               	tblrd		*+
   614  002206  CFF5 FFEE          	movff	tablat,postinc0
   615  00220A  50E5               	movf	postdec1,w,c
   616  00220C  50E1               	movf	fsr1l,w,c
   617  00220E  E1FA               	bnz	copy_data0
   618                           
   619                           ; Clear objects allocated to BANK0 (2 bytes)
   620  002210  0100               	movlb	0
   621  002212  6BFB               	clrf	(__pbssBANK0+1)& (0+255),b
   622  002214  6BFA               	clrf	__pbssBANK0& (0+255),b
   623                           
   624                           ; Clear objects allocated to COMRAM (2 bytes)
   625  002216  6A6E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   626  002218  6A6D               	clrf	__pbssCOMRAM& (0+255),c
   627  00221A                     end_of_initialization:
   628                           	opt stack 0
   629  00221A                     __end_of__initialization:
   630                           	opt stack 0
   631  00221A  906F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   632  00221C  926F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   633  00221E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   634  002220  6EF8               	movwf	tblptru,c
   635  002222  0100               	movlb	0
   636  002224  EF5D  F008         	goto	_main	;jump to C main() function
   637                           tblptru	equ	0xFF8
   638                           tblptrh	equ	0xFF7
   639                           tblptrl	equ	0xFF6
   640                           tablat	equ	0xFF5
   641                           postinc0	equ	0xFEE
   642                           postdec1	equ	0xFE5
   643                           fsr1l	equ	0xFE1
   644                           
   645                           	psect	bssCOMRAM
   646  00006D                     __pbssCOMRAM:
   647                           	opt stack 0
   648  00006D                     _errno:
   649                           	opt stack 0
   650  00006D                     	ds	2
   651                           tblptru	equ	0xFF8
   652                           tblptrh	equ	0xFF7
   653                           tblptrl	equ	0xFF6
   654                           tablat	equ	0xFF5
   655                           postinc0	equ	0xFEE
   656                           postdec1	equ	0xFE5
   657                           fsr1l	equ	0xFE1
   658                           
   659                           	psect	bssBANK0
   660  0000FA                     __pbssBANK0:
   661                           	opt stack 0
   662  0000FA                     _bot_type:
   663                           	opt stack 0
   664  0000FA                     	ds	1
   665  0000FB                     _curr_state:
   666                           	opt stack 0
   667  0000FB                     	ds	1
   668                           tblptru	equ	0xFF8
   669                           tblptrh	equ	0xFF7
   670                           tblptrl	equ	0xFF6
   671                           tablat	equ	0xFF5
   672                           postinc0	equ	0xFEE
   673                           postdec1	equ	0xFE5
   674                           fsr1l	equ	0xFE1
   675                           
   676                           	psect	dataBANK1
   677  000100                     __pdataBANK1:
   678                           	opt stack 0
   679  000100                     hex_to_dec@F3177:
   680                           	opt stack 0
   681  000100                     	ds	16
   682                           tblptru	equ	0xFF8
   683                           tblptrh	equ	0xFF7
   684                           tblptrl	equ	0xFF6
   685                           tablat	equ	0xFF5
   686                           postinc0	equ	0xFEE
   687                           postdec1	equ	0xFE5
   688                           fsr1l	equ	0xFE1
   689                           
   690                           	psect	cstackBANK0
   691  000080                     __pcstackBANK0:
   692                           	opt stack 0
   693  000080                     _pow$1424:
   694                           	opt stack 0
   695                           
   696                           ; 3 bytes @ 0x0
   697  000080                     	ds	3
   698  000083                     _pow$1425:
   699                           	opt stack 0
   700                           
   701                           ; 3 bytes @ 0x3
   702  000083                     	ds	3
   703  000086                     pow@sign:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x6
   707  000086                     	ds	1
   708  000087                     pow@yi:
   709                           	opt stack 0
   710                           
   711                           ; 4 bytes @ 0x7
   712  000087                     	ds	4
   713  00008B                     _dec_to_hex$1420:
   714                           	opt stack 0
   715                           
   716                           ; 3 bytes @ 0xB
   717  00008B                     	ds	3
   718  00008E                     _dec_to_hex$1421:
   719                           	opt stack 0
   720                           
   721                           ; 3 bytes @ 0xE
   722  00008E                     	ds	3
   723  000091                     dec_to_hex@temp:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x11
   727  000091                     	ds	2
   728  000093                     dec_to_hex@i:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x13
   732  000093                     	ds	2
   733  000095                     dec_to_hex@hexnum:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x15
   737  000095                     	ds	2
   738  000097                     dec_to_hex@quotient:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x17
   742  000097                     	ds	2
   743  000099                     ?_time_difference:
   744                           	opt stack 0
   745  000099                     time_difference@time1:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x19
   749  000099                     	ds	2
   750  00009B                     time_difference@time2:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x1B
   754  00009B                     	ds	2
   755  00009D                     time_difference@hr1:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x1D
   759  00009D                     	ds	2
   760  00009F                     time_difference@hr2:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x1F
   764  00009F                     	ds	2
   765  0000A1                     time_difference@min1:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x21
   769  0000A1                     	ds	2
   770  0000A3                     time_difference@min2:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x23
   774  0000A3                     	ds	2
   775  0000A5                     time_difference@s1:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x25
   779  0000A5                     	ds	2
   780  0000A7                     time_difference@s2:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x27
   784  0000A7                     	ds	2
   785  0000A9                     time_difference@d1:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x29
   789  0000A9                     	ds	2
   790  0000AB                     time_difference@d2:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x2B
   794  0000AB                     	ds	2
   795  0000AD                     time_difference@d3:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x2D
   799  0000AD                     	ds	2
   800  0000AF                     ?_printf:
   801                           	opt stack 0
   802  0000AF                     printf@f:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x2F
   806  0000AF                     	ds	8
   807  0000B7                     ??_printf:
   808                           
   809                           ; 1 bytes @ 0x37
   810  0000B7                     	ds	4
   811  0000BB                     printf@idx:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x3B
   815  0000BB                     	ds	1
   816  0000BC                     printf@ap:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x3C
   820  0000BC                     	ds	2
   821  0000BE                     printf@prec:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x3E
   825  0000BE                     	ds	1
   826  0000BF                     printf@val:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x3F
   830  0000BF                     	ds	2
   831  0000C1                     printf@flag:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x41
   835  0000C1                     	ds	1
   836  0000C2                     printf@width:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x42
   840  0000C2                     	ds	2
   841  0000C4                     printf@c:
   842                           	opt stack 0
   843                           
   844                           ; 1 bytes @ 0x44
   845  0000C4                     	ds	1
   846  0000C5                     init_operation@start_time:
   847                           	opt stack 0
   848  0000C5                     runtime@start_time:
   849                           	opt stack 0
   850  0000C5                     bottle_count@bot_count:
   851                           	opt stack 0
   852  0000C5                     date_time@time:
   853                           	opt stack 0
   854                           
   855                           ; 2 bytes @ 0x45
   856  0000C5                     	ds	2
   857  0000C7                     ??_date_time:
   858  0000C7                     ??_bottle_count:
   859  0000C7                     init_operation@time:
   860                           	opt stack 0
   861  0000C7                     runtime@end_time:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x47
   865  0000C7                     	ds	2
   866  0000C9                     init_operation@bot_count:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x49
   870  0000C9                     	ds	2
   871  0000CB                     ??_init_operation:
   872                           
   873                           ; 1 bytes @ 0x4B
   874  0000CB                     	ds	2
   875  0000CD                     init_operation@g:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x4D
   879  0000CD                     	ds	2
   880  0000CF                     init_operation@red:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x4F
   884  0000CF                     	ds	2
   885  0000D1                     init_operation@green:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x51
   889  0000D1                     	ds	2
   890  0000D3                     init_operation@blue:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x53
   894  0000D3                     	ds	2
   895  0000D5                     init_operation@clear:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x55
   899  0000D5                     	ds	2
   900  0000D7                     init_operation@b:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x57
   904  0000D7                     	ds	2
   905  0000D9                     init_operation@c:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x59
   909  0000D9                     	ds	2
   910  0000DB                     init_operation@i:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x5B
   914  0000DB                     	ds	2
   915  0000DD                     init_operation@r:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x5D
   919  0000DD                     	ds	2
   920  0000DF                     ??_main:
   921                           
   922                           ; 1 bytes @ 0x5F
   923  0000DF                     	ds	2
   924  0000E1                     main@start_time:
   925                           	opt stack 0
   926                           
   927                           ; 7 bytes @ 0x61
   928  0000E1                     	ds	7
   929  0000E8                     main@end_time:
   930                           	opt stack 0
   931                           
   932                           ; 7 bytes @ 0x68
   933  0000E8                     	ds	7
   934  0000EF                     main@time:
   935                           	opt stack 0
   936                           
   937                           ; 7 bytes @ 0x6F
   938  0000EF                     	ds	7
   939  0000F6                     main@bot_count:
   940                           	opt stack 0
   941                           
   942                           ; 4 bytes @ 0x76
   943  0000F6                     	ds	4
   944                           tblptru	equ	0xFF8
   945                           tblptrh	equ	0xFF7
   946                           tblptrl	equ	0xFF6
   947                           tablat	equ	0xFF5
   948                           postinc0	equ	0xFEE
   949                           postdec1	equ	0xFE5
   950                           fsr1l	equ	0xFE1
   951                           
   952                           	psect	cstackCOMRAM
   953  000001                     __pcstackCOMRAM:
   954                           	opt stack 0
   955  000001                     ??_keypressed:
   956  000001                     
   957                           ; 2 bytes @ 0x0
   958  000001                     	ds	16
   959  000011                     ??_isdigit:
   960  000011                     ??_I2C_Master_Wait:
   961  000011                     ?___wmul:
   962                           	opt stack 0
   963  000011                     ?___awdiv:
   964                           	opt stack 0
   965  000011                     ?___lwdiv:
   966                           	opt stack 0
   967  000011                     ?___ftpack:
   968                           	opt stack 0
   969  000011                     ?_frexp:
   970                           	opt stack 0
   971  000011                     ?___ftneg:
   972                           	opt stack 0
   973  000011                     ?___lldiv:
   974                           	opt stack 0
   975  000011                     lcdNibble@temp:
   976                           	opt stack 0
   977  000011                     delay@seconds:
   978                           	opt stack 0
   979  000011                     ___wmul@multiplier:
   980                           	opt stack 0
   981  000011                     ___awdiv@dividend:
   982                           	opt stack 0
   983  000011                     ___lwdiv@dividend:
   984                           	opt stack 0
   985  000011                     ___ftpack@arg:
   986                           	opt stack 0
   987  000011                     ___ftge@ff1:
   988                           	opt stack 0
   989  000011                     ___ftneg@f1:
   990                           	opt stack 0
   991  000011                     frexp@value:
   992                           	opt stack 0
   993  000011                     ___lldiv@dividend:
   994                           	opt stack 0
   995                           
   996                           ; 4 bytes @ 0x10
   997  000011                     	ds	1
   998  000012                     lcdNibble@data:
   999                           	opt stack 0
  1000  000012                     I2C_Master_Read@a:
  1001                           	opt stack 0
  1002  000012                     _isdigit$981:
  1003                           	opt stack 0
  1004  000012                     I2C_Master_Write@d:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0x11
  1008  000012                     	ds	1
  1009  000013                     ??_delay:
  1010  000013                     lcdInst@data:
  1011                           	opt stack 0
  1012  000013                     putch@data:
  1013                           	opt stack 0
  1014  000013                     I2C_Master_Read@temp:
  1015                           	opt stack 0
  1016  000013                     isdigit@c:
  1017                           	opt stack 0
  1018  000013                     ___wmul@multiplicand:
  1019                           	opt stack 0
  1020  000013                     ___awdiv@divisor:
  1021                           	opt stack 0
  1022  000013                     ___lwdiv@divisor:
  1023                           	opt stack 0
  1024                           
  1025                           ; 2 bytes @ 0x12
  1026  000013                     	ds	1
  1027  000014                     ??_initLCD:
  1028  000014                     ___ftpack@exp:
  1029                           	opt stack 0
  1030  000014                     update_time@time:
  1031                           	opt stack 0
  1032  000014                     delay@i:
  1033                           	opt stack 0
  1034  000014                     read_colorsensor@red:
  1035                           	opt stack 0
  1036  000014                     frexp@eptr:
  1037                           	opt stack 0
  1038  000014                     ___ftge@ff2:
  1039                           	opt stack 0
  1040                           
  1041                           ; 3 bytes @ 0x13
  1042  000014                     	ds	1
  1043  000015                     ___awdiv@counter:
  1044                           	opt stack 0
  1045  000015                     ___ftpack@sign:
  1046                           	opt stack 0
  1047  000015                     ___wmul@product:
  1048                           	opt stack 0
  1049  000015                     ___lwdiv@quotient:
  1050                           	opt stack 0
  1051  000015                     ___lldiv@divisor:
  1052                           	opt stack 0
  1053                           
  1054                           ; 4 bytes @ 0x14
  1055  000015                     	ds	1
  1056  000016                     ??___ftpack:
  1057  000016                     ??_frexp:
  1058  000016                     update_time@i:
  1059                           	opt stack 0
  1060  000016                     delay@i_450:
  1061                           	opt stack 0
  1062  000016                     ___awdiv@sign:
  1063                           	opt stack 0
  1064  000016                     read_colorsensor@green:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x15
  1068  000016                     	ds	1
  1069  000017                     ??___ftge:
  1070  000017                     ___lwdiv@counter:
  1071                           	opt stack 0
  1072  000017                     ___awdiv@quotient:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x16
  1076  000017                     	ds	1
  1077  000018                     ?___lwmod:
  1078                           	opt stack 0
  1079  000018                     read_colorsensor@blue:
  1080                           	opt stack 0
  1081  000018                     ___lwmod@dividend:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x17
  1085  000018                     	ds	1
  1086  000019                     ?___ftdiv:
  1087                           	opt stack 0
  1088  000019                     ?___awtoft:
  1089                           	opt stack 0
  1090  000019                     ?___lltoft:
  1091                           	opt stack 0
  1092  000019                     ___awtoft@c:
  1093                           	opt stack 0
  1094  000019                     ___ftdiv@f1:
  1095                           	opt stack 0
  1096  000019                     ___lldiv@quotient:
  1097                           	opt stack 0
  1098  000019                     ___lltoft@c:
  1099                           	opt stack 0
  1100                           
  1101                           ; 4 bytes @ 0x18
  1102  000019                     	ds	1
  1103  00001A                     read_colorsensor@clear:
  1104                           	opt stack 0
  1105  00001A                     ___lwmod@divisor:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x19
  1109  00001A                     	ds	2
  1110  00001C                     ___awtoft@sign:
  1111                           	opt stack 0
  1112  00001C                     ___lwmod@counter:
  1113                           	opt stack 0
  1114  00001C                     ___ftdiv@f2:
  1115                           	opt stack 0
  1116                           
  1117                           ; 3 bytes @ 0x1B
  1118  00001C                     	ds	1
  1119  00001D                     ??___lltoft:
  1120  00001D                     ?___ftmul:
  1121                           	opt stack 0
  1122  00001D                     ___lldiv@counter:
  1123                           	opt stack 0
  1124  00001D                     ___ftmul@f1:
  1125                           	opt stack 0
  1126                           
  1127                           ; 3 bytes @ 0x1C
  1128  00001D                     	ds	1
  1129  00001E                     I2C_Master_Init@c:
  1130                           	opt stack 0
  1131                           
  1132                           ; 4 bytes @ 0x1D
  1133  00001E                     	ds	1
  1134  00001F                     ??___ftdiv:
  1135                           
  1136                           ; 1 bytes @ 0x1E
  1137  00001F                     	ds	1
  1138  000020                     ___ftmul@f2:
  1139                           	opt stack 0
  1140                           
  1141                           ; 3 bytes @ 0x1F
  1142  000020                     	ds	1
  1143  000021                     ___lltoft@exp:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x20
  1147  000021                     	ds	1
  1148  000022                     ??_I2C_Master_Init:
  1149  000022                     ___ftdiv@cntr:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x21
  1153  000022                     	ds	1
  1154  000023                     ??___ftmul:
  1155  000023                     ___ftdiv@f3:
  1156                           	opt stack 0
  1157                           
  1158                           ; 3 bytes @ 0x22
  1159  000023                     	ds	3
  1160  000026                     ___ftdiv@exp:
  1161                           	opt stack 0
  1162  000026                     ___ftmul@exp:
  1163                           	opt stack 0
  1164                           
  1165                           ; 1 bytes @ 0x25
  1166  000026                     	ds	1
  1167  000027                     ___ftdiv@sign:
  1168                           	opt stack 0
  1169  000027                     ___ftmul@f3_as_product:
  1170                           	opt stack 0
  1171                           
  1172                           ; 3 bytes @ 0x26
  1173  000027                     	ds	3
  1174  00002A                     ___ftmul@cntr:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x29
  1178  00002A                     	ds	1
  1179  00002B                     ___ftmul@sign:
  1180                           	opt stack 0
  1181                           
  1182                           ; 1 bytes @ 0x2A
  1183  00002B                     	ds	1
  1184  00002C                     ?___ftadd:
  1185                           	opt stack 0
  1186  00002C                     ___ftadd@f1:
  1187                           	opt stack 0
  1188                           
  1189                           ; 3 bytes @ 0x2B
  1190  00002C                     	ds	3
  1191  00002F                     ___ftadd@f2:
  1192                           	opt stack 0
  1193                           
  1194                           ; 3 bytes @ 0x2E
  1195  00002F                     	ds	3
  1196  000032                     ??___ftadd:
  1197                           
  1198                           ; 1 bytes @ 0x31
  1199  000032                     	ds	3
  1200  000035                     ___ftadd@sign:
  1201                           	opt stack 0
  1202                           
  1203                           ; 1 bytes @ 0x34
  1204  000035                     	ds	1
  1205  000036                     ___ftadd@exp2:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0x35
  1209  000036                     	ds	1
  1210  000037                     ___ftadd@exp1:
  1211                           	opt stack 0
  1212                           
  1213                           ; 1 bytes @ 0x36
  1214  000037                     	ds	1
  1215  000038                     ?___ftsub:
  1216                           	opt stack 0
  1217  000038                     ?_eval_poly:
  1218                           	opt stack 0
  1219  000038                     ?___fttol:
  1220                           	opt stack 0
  1221  000038                     ___ftsub@f1:
  1222                           	opt stack 0
  1223  000038                     ___fttol@f1:
  1224                           	opt stack 0
  1225  000038                     eval_poly@x:
  1226                           	opt stack 0
  1227                           
  1228                           ; 3 bytes @ 0x37
  1229  000038                     	ds	3
  1230  00003B                     eval_poly@d:
  1231                           	opt stack 0
  1232  00003B                     ___ftsub@f2:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x3A
  1236  00003B                     	ds	1
  1237  00003C                     ??___fttol:
  1238                           
  1239                           ; 1 bytes @ 0x3B
  1240  00003C                     	ds	1
  1241  00003D                     eval_poly@n:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x3C
  1245  00003D                     	ds	1
  1246  00003E                     
  1247                           ; 1 bytes @ 0x3D
  1248  00003E                     	ds	1
  1249  00003F                     ??_eval_poly:
  1250                           
  1251                           ; 1 bytes @ 0x3E
  1252  00003F                     	ds	2
  1253  000041                     ___fttol@sign1:
  1254                           	opt stack 0
  1255  000041                     eval_poly@res:
  1256                           	opt stack 0
  1257                           
  1258                           ; 3 bytes @ 0x40
  1259  000041                     	ds	1
  1260  000042                     ___fttol@lval:
  1261                           	opt stack 0
  1262                           
  1263                           ; 4 bytes @ 0x41
  1264  000042                     	ds	2
  1265  000044                     ?_log:
  1266                           	opt stack 0
  1267  000044                     ?_ldexp:
  1268                           	opt stack 0
  1269  000044                     ldexp@value:
  1270                           	opt stack 0
  1271  000044                     log@x:
  1272                           	opt stack 0
  1273                           
  1274                           ; 3 bytes @ 0x43
  1275  000044                     	ds	2
  1276  000046                     ___fttol@exp1:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x45
  1280  000046                     	ds	1
  1281  000047                     ?___altoft:
  1282                           	opt stack 0
  1283  000047                     ldexp@newexp:
  1284                           	opt stack 0
  1285  000047                     log@exponent:
  1286                           	opt stack 0
  1287  000047                     ___altoft@c:
  1288                           	opt stack 0
  1289                           
  1290                           ; 4 bytes @ 0x46
  1291  000047                     	ds	2
  1292  000049                     ??_ldexp:
  1293                           
  1294                           ; 1 bytes @ 0x48
  1295  000049                     	ds	2
  1296  00004B                     ??___altoft:
  1297                           
  1298                           ; 1 bytes @ 0x4A
  1299  00004B                     	ds	4
  1300  00004F                     ___altoft@exp:
  1301                           	opt stack 0
  1302                           
  1303                           ; 1 bytes @ 0x4E
  1304  00004F                     	ds	1
  1305  000050                     ___altoft@sign:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x4F
  1309  000050                     	ds	1
  1310  000051                     ?_floor:
  1311                           	opt stack 0
  1312  000051                     floor@x:
  1313                           	opt stack 0
  1314                           
  1315                           ; 3 bytes @ 0x50
  1316  000051                     	ds	3
  1317  000054                     floor@i:
  1318                           	opt stack 0
  1319                           
  1320                           ; 3 bytes @ 0x53
  1321  000054                     	ds	3
  1322  000057                     floor@expon:
  1323                           	opt stack 0
  1324                           
  1325                           ; 2 bytes @ 0x56
  1326  000057                     	ds	2
  1327  000059                     ?_exp:
  1328                           	opt stack 0
  1329  000059                     exp@x:
  1330                           	opt stack 0
  1331                           
  1332                           ; 3 bytes @ 0x58
  1333  000059                     	ds	3
  1334  00005C                     _exp$1426:
  1335                           	opt stack 0
  1336                           
  1337                           ; 3 bytes @ 0x5B
  1338  00005C                     	ds	3
  1339  00005F                     exp@exponent:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x5E
  1343  00005F                     	ds	2
  1344  000061                     exp@sign:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x60
  1348  000061                     	ds	1
  1349  000062                     ?_pow:
  1350                           	opt stack 0
  1351  000062                     pow@x:
  1352                           	opt stack 0
  1353                           
  1354                           ; 3 bytes @ 0x61
  1355  000062                     	ds	3
  1356  000065                     pow@y:
  1357                           	opt stack 0
  1358                           
  1359                           ; 3 bytes @ 0x64
  1360  000065                     	ds	3
  1361  000068                     ?_dec_to_hex:
  1362                           	opt stack 0
  1363  000068                     dec_to_hex@num:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x67
  1367  000068                     	ds	2
  1368  00006A                     ??_time_difference:
  1369                           
  1370                           ; 1 bytes @ 0x69
  1371  00006A                     	ds	2
  1372  00006C                     date_time@i:
  1373                           	opt stack 0
  1374                           
  1375                           ; 1 bytes @ 0x6B
  1376  00006C                     	ds	1
  1377                           tblptru	equ	0xFF8
  1378                           tblptrh	equ	0xFF7
  1379                           tblptrl	equ	0xFF6
  1380                           tablat	equ	0xFF5
  1381                           postinc0	equ	0xFEE
  1382                           postdec1	equ	0xFE5
  1383                           fsr1l	equ	0xFE1
  1384                           
  1385 ;;
  1386 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1387 ;;
  1388 ;; *************** function _main *****************
  1389 ;; Defined at:
  1390 ;;		line 59 in file "main.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;		None
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  time            7  111[BANK0 ] unsigned char [7]
  1395 ;;  end_time        7  104[BANK0 ] unsigned char [7]
  1396 ;;  start_time      7   97[BANK0 ] unsigned char [7]
  1397 ;;  bot_count       4  118[BANK0 ] unsigned char [4]
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  1    wreg      void 
  1400 ;; Registers used:
  1401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1402 ;; Tracked objects:
  1403 ;;		On entry : 0/0
  1404 ;;		On exit  : 0/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1408 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1409 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1410 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1411 ;;Total ram usage:       27 bytes
  1412 ;; Hardware stack levels required when called:    9
  1413 ;; This function calls:
  1414 ;;		_I2C_Master_Init
  1415 ;;		_bottle_count
  1416 ;;		_date_time
  1417 ;;		_initLCD
  1418 ;;		_init_operation
  1419 ;;		_lcdInst
  1420 ;;		_operation_end
  1421 ;;		_printf
  1422 ;;		_runtime
  1423 ;;		_update_time
  1424 ;; This function is called by:
  1425 ;;		Startup code after reset
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text0
  1430  0010BA                     __ptext0:
  1431                           	opt stack 0
  1432  0010BA                     _main:
  1433                           	opt stack 22
  1434                           
  1435                           ;main.c: 63: TRISA = 0xFF;
  1436                           
  1437                           ;incstack = 0
  1438  0010BA  6892               	setf	3986,c	;volatile
  1439                           
  1440                           ;main.c: 64: TRISB = 0xFF;
  1441  0010BC  6893               	setf	3987,c	;volatile
  1442                           
  1443                           ;main.c: 65: TRISC = 0x00;
  1444  0010BE  0E00               	movlw	0
  1445  0010C0  6E94               	movwf	3988,c	;volatile
  1446                           
  1447                           ;main.c: 66: TRISD = 0x00;
  1448  0010C2  0E00               	movlw	0
  1449  0010C4  6E95               	movwf	3989,c	;volatile
  1450                           
  1451                           ;main.c: 67: TRISE = 0x00;
  1452  0010C6  0E00               	movlw	0
  1453  0010C8  6E96               	movwf	3990,c	;volatile
  1454                           
  1455                           ;main.c: 69: LATA = 0x00;
  1456  0010CA  0E00               	movlw	0
  1457  0010CC  6E89               	movwf	3977,c	;volatile
  1458                           
  1459                           ;main.c: 70: LATB = 0x00;
  1460  0010CE  0E00               	movlw	0
  1461  0010D0  6E8A               	movwf	3978,c	;volatile
  1462                           
  1463                           ;main.c: 71: LATC = 0x00;
  1464  0010D2  0E00               	movlw	0
  1465  0010D4  6E8B               	movwf	3979,c	;volatile
  1466                           
  1467                           ;main.c: 72: LATD = 0x00;
  1468  0010D6  0E00               	movlw	0
  1469  0010D8  6E8C               	movwf	3980,c	;volatile
  1470                           
  1471                           ;main.c: 73: LATE = 0x00;
  1472  0010DA  0E00               	movlw	0
  1473  0010DC  6E8D               	movwf	3981,c	;volatile
  1474                           
  1475                           ;main.c: 75: ADCON0 = 0x00;
  1476  0010DE  0E00               	movlw	0
  1477  0010E0  6EC2               	movwf	4034,c	;volatile
  1478                           
  1479                           ;main.c: 76: ADCON1 = 0xFF;
  1480  0010E2  68C1               	setf	4033,c	;volatile
  1481                           
  1482                           ;main.c: 78: INT1IE = 1;
  1483  0010E4  86F0               	bsf	intcon3,3,c	;volatile
  1484                           
  1485                           ;main.c: 79: (INTCONbits.GIE = 1);
  1486  0010E6  8EF2               	bsf	intcon,7,c	;volatile
  1487                           
  1488                           ;main.c: 81: nRBPU = 0;
  1489  0010E8  9EF1               	bcf	intcon2,7,c	;volatile
  1490                           
  1491                           ;main.c: 85: lcdInst(0b00000001);;
  1492  0010EA  0E01               	movlw	1
  1493  0010EC  EC8E  F011         	call	_lcdInst
  1494                           
  1495                           ;main.c: 86: initLCD();
  1496  0010F0  EC51  F010         	call	_initLCD	;wreg free
  1497                           
  1498                           ;main.c: 87: unsigned char time[7];
  1499                           ;main.c: 88: unsigned char start_time[7];
  1500                           ;main.c: 89: unsigned char end_time[7];
  1501                           ;main.c: 90: unsigned char bot_count[4];
  1502                           ;main.c: 93: I2C_Master_Init(10000);
  1503  0010F4  0E10               	movlw	16
  1504  0010F6  6E1E               	movwf	I2C_Master_Init@c,c
  1505  0010F8  0E27               	movlw	39
  1506  0010FA  6E1F               	movwf	I2C_Master_Init@c+1,c
  1507  0010FC  0E00               	movlw	0
  1508  0010FE  6E20               	movwf	I2C_Master_Init@c+2,c
  1509  001100  0E00               	movlw	0
  1510  001102  6E21               	movwf	I2C_Master_Init@c+3,c
  1511  001104  ECAF  F00F         	call	_I2C_Master_Init	;wreg free
  1512                           
  1513                           ;main.c: 96: lcdInst(0b00000001);;
  1514  001108  0E01               	movlw	1
  1515  00110A  EC8E  F011         	call	_lcdInst
  1516                           
  1517                           ;main.c: 97: initLCD();
  1518  00110E  EC51  F010         	call	_initLCD	;wreg free
  1519                           
  1520                           ;main.c: 98: lcdInst(0b10000000);;
  1521  001112  0E80               	movlw	128
  1522  001114  EC8E  F011         	call	_lcdInst
  1523                           
  1524                           ;main.c: 100: printf("Press 1 to begin operation");
  1525  001118  0ED2               	movlw	low STR_1
  1526  00111A  0100               	movlb	0	; () banked
  1527  00111C  6FAF               	movwf	printf@f& (0+255),b
  1528  00111E  0EFE               	movlw	high STR_1
  1529  001120  0100               	movlb	0	; () banked
  1530  001122  6FB0               	movwf	(printf@f+1)& (0+255),b
  1531  001124  EC09  F000         	call	_printf	;wreg free
  1532                           
  1533                           ;main.c: 101: curr_state = STANDBY;
  1534  001128  0E00               	movlw	0
  1535  00112A  0100               	movlb	0	; () banked
  1536  00112C  6FFB               	movwf	_curr_state& (0+255),b
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;main.c: 102: bot_type = O;
  1540  00112E  0E05               	movlw	5
  1541  001130  0100               	movlb	0	; () banked
  1542  001132  6FFA               	movwf	_bot_type& (0+255),b
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;main.c: 104: switch(curr_state){
  1546                           
  1547                           ;main.c: 103: while (1){
  1548  001134  D03F               	goto	l3970
  1549  001136                     l3956:
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;main.c: 106: operation_end();
  1553  001136  EC96  F010         	call	_operation_end	;wreg free
  1554                           
  1555                           ;main.c: 107: break;
  1556  00113A  D04D               	goto	l3972
  1557  00113C                     l3958:
  1558                           
  1559                           ;main.c: 109: init_operation(start_time, time, bot_count);
  1560  00113C  0EE1               	movlw	low main@start_time
  1561  00113E  0100               	movlb	0	; () banked
  1562  001140  6FC5               	movwf	init_operation@start_time& (0+255),b
  1563  001142  0E00               	movlw	high main@start_time
  1564  001144  0100               	movlb	0	; () banked
  1565  001146  6FC6               	movwf	(init_operation@start_time+1)& (0+255),b
  1566  001148  0EEF               	movlw	low main@time
  1567  00114A  0100               	movlb	0	; () banked
  1568  00114C  6FC7               	movwf	init_operation@time& (0+255),b
  1569  00114E  0E00               	movlw	high main@time
  1570  001150  0100               	movlb	0	; () banked
  1571  001152  6FC8               	movwf	(init_operation@time+1)& (0+255),b
  1572  001154  0EF6               	movlw	low main@bot_count
  1573  001156  0100               	movlb	0	; () banked
  1574  001158  6FC9               	movwf	init_operation@bot_count& (0+255),b
  1575  00115A  0E00               	movlw	high main@bot_count
  1576  00115C  0100               	movlb	0	; () banked
  1577  00115E  6FCA               	movwf	(init_operation@bot_count+1)& (0+255),b
  1578  001160  ECDF  F001         	call	_init_operation	;wreg free
  1579                           
  1580                           ;main.c: 110: update_time(end_time);
  1581  001164  0EE8               	movlw	low main@end_time
  1582  001166  6E14               	movwf	update_time@time,c
  1583  001168  0E00               	movlw	high main@end_time
  1584  00116A  6E15               	movwf	update_time@time+1,c
  1585  00116C  EC48  F00F         	call	_update_time	;wreg free
  1586                           
  1587                           ;main.c: 111: break;
  1588  001170  D032               	goto	l3972
  1589  001172                     l3962:
  1590                           
  1591                           ;main.c: 113: date_time(time);
  1592  001172  0EEF               	movlw	low main@time
  1593  001174  0100               	movlb	0	; () banked
  1594  001176  6FC5               	movwf	date_time@time& (0+255),b
  1595  001178  0E00               	movlw	high main@time
  1596  00117A  0100               	movlb	0	; () banked
  1597  00117C  6FC6               	movwf	(date_time@time+1)& (0+255),b
  1598  00117E  ECB4  F007         	call	_date_time	;wreg free
  1599                           
  1600                           ;main.c: 114: break;
  1601  001182  D029               	goto	l3972
  1602  001184                     l3964:
  1603                           
  1604                           ;main.c: 116: bottle_count(bot_count);
  1605  001184  0EF6               	movlw	low main@bot_count
  1606  001186  0100               	movlb	0	; () banked
  1607  001188  6FC5               	movwf	bottle_count@bot_count& (0+255),b
  1608  00118A  0E00               	movlw	high main@bot_count
  1609  00118C  0100               	movlb	0	; () banked
  1610  00118E  6FC6               	movwf	(bottle_count@bot_count+1)& (0+255),b
  1611  001190  EC64  F005         	call	_bottle_count	;wreg free
  1612                           
  1613                           ;main.c: 117: break;
  1614  001194  D020               	goto	l3972
  1615  001196                     l3966:
  1616                           
  1617                           ;main.c: 119: runtime(start_time, end_time);
  1618  001196  0EE1               	movlw	low main@start_time
  1619  001198  0100               	movlb	0	; () banked
  1620  00119A  6FC5               	movwf	runtime@start_time& (0+255),b
  1621  00119C  0E00               	movlw	high main@start_time
  1622  00119E  0100               	movlb	0	; () banked
  1623  0011A0  6FC6               	movwf	(runtime@start_time+1)& (0+255),b
  1624  0011A2  0EE8               	movlw	low main@end_time
  1625  0011A4  0100               	movlb	0	; () banked
  1626  0011A6  6FC7               	movwf	runtime@end_time& (0+255),b
  1627  0011A8  0E00               	movlw	high main@end_time
  1628  0011AA  0100               	movlb	0	; () banked
  1629  0011AC  6FC8               	movwf	(runtime@end_time+1)& (0+255),b
  1630  0011AE  EC2C  F010         	call	_runtime	;wreg free
  1631                           
  1632                           ;main.c: 121: }
  1633                           
  1634                           ;main.c: 120: break;
  1635  0011B2  D011               	goto	l3972
  1636  0011B4                     l3970:
  1637  0011B4  0100               	movlb	0	; () banked
  1638  0011B6  51FB               	movf	_curr_state& (0+255),w,b
  1639                           
  1640                           ; Switch size 1, requested type "space"
  1641                           ; Number of cases is 5, Range of values is 1 to 5
  1642                           ; switch strategies available:
  1643                           ; Name         Instructions Cycles
  1644                           ; simple_byte           16     9 (average)
  1645                           ;	Chosen strategy is simple_byte
  1646  0011B8  0A01               	xorlw	1	; case 1
  1647  0011BA  B4D8               	btfsc	status,2,c
  1648  0011BC  D7BF               	goto	l3958
  1649  0011BE  0A03               	xorlw	3	; case 2
  1650  0011C0  B4D8               	btfsc	status,2,c
  1651  0011C2  D7B9               	goto	l3956
  1652  0011C4  0A01               	xorlw	1	; case 3
  1653  0011C6  B4D8               	btfsc	status,2,c
  1654  0011C8  D7D4               	goto	l3962
  1655  0011CA  0A07               	xorlw	7	; case 4
  1656  0011CC  B4D8               	btfsc	status,2,c
  1657  0011CE  D7DA               	goto	l3964
  1658  0011D0  0A01               	xorlw	1	; case 5
  1659  0011D2  B4D8               	btfsc	status,2,c
  1660  0011D4  D7E0               	goto	l3966
  1661  0011D6                     l3972:
  1662                           
  1663                           ;main.c: 122: _delay((unsigned long)((100)*(10000000/4000.0)));
  1664  0011D6  0E02               	movlw	2
  1665  0011D8  0100               	movlb	0	; () banked
  1666  0011DA  6FE0               	movwf	(??_main+1)& (0+255),b
  1667  0011DC  0E45               	movlw	69
  1668  0011DE  0100               	movlb	0	; () banked
  1669  0011E0  6FDF               	movwf	??_main& (0+255),b
  1670  0011E2  0EA9               	movlw	169
  1671  0011E4                     u3537:
  1672  0011E4  2EE8               	decfsz	wreg,f,c
  1673  0011E6  D7FE               	bra	u3537
  1674  0011E8  2FDF               	decfsz	??_main& (0+255),f,b
  1675  0011EA  D7FC               	bra	u3537
  1676  0011EC  2FE0               	decfsz	(??_main+1)& (0+255),f,b
  1677  0011EE  D7FA               	bra	u3537
  1678  0011F0  D000               	nop2	
  1679  0011F2  D7E0               	goto	l3970
  1680  0011F4                     __end_of_main:
  1681                           	opt stack 0
  1682                           tblptru	equ	0xFF8
  1683                           tblptrh	equ	0xFF7
  1684                           tblptrl	equ	0xFF6
  1685                           tablat	equ	0xFF5
  1686                           intcon	equ	0xFF2
  1687                           intcon2	equ	0xFF1
  1688                           intcon3	equ	0xFF0
  1689                           postinc0	equ	0xFEE
  1690                           wreg	equ	0xFE8
  1691                           postdec1	equ	0xFE5
  1692                           fsr1l	equ	0xFE1
  1693                           status	equ	0xFD8
  1694                           
  1695 ;; *************** function _runtime *****************
  1696 ;; Defined at:
  1697 ;;		line 316 in file "main.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;  start_time      2   69[BANK0 ] PTR unsigned char 
  1700 ;;		 -> main@start_time(7), 
  1701 ;;  end_time        2   71[BANK0 ] PTR unsigned char 
  1702 ;;		 -> main@end_time(7), 
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;		None
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  1    wreg      void 
  1707 ;; Registers used:
  1708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1714 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1717 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1718 ;;Total ram usage:        4 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    8
  1721 ;; This function calls:
  1722 ;;		_lcdInst
  1723 ;;		_printf
  1724 ;;		_time_difference
  1725 ;; This function is called by:
  1726 ;;		_main
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           	psect	text1
  1731  002058                     __ptext1:
  1732                           	opt stack 0
  1733  002058                     _runtime:
  1734                           	opt stack 22
  1735                           
  1736                           ;main.c: 317: lcdInst(0b10000000);;
  1737                           
  1738                           ;incstack = 0
  1739  002058  0E80               	movlw	128
  1740  00205A  EC8E  F011         	call	_lcdInst
  1741                           
  1742                           ;main.c: 318: printf("Total Operation ");
  1743  00205E  0EBA               	movlw	low STR_6
  1744  002060  0100               	movlb	0	; () banked
  1745  002062  6FAF               	movwf	printf@f& (0+255),b
  1746  002064  0EFF               	movlw	high STR_6
  1747  002066  0100               	movlb	0	; () banked
  1748  002068  6FB0               	movwf	(printf@f+1)& (0+255),b
  1749  00206A  EC09  F000         	call	_printf	;wreg free
  1750                           
  1751                           ;main.c: 319: lcdInst(0b11000000);;
  1752  00206E  0EC0               	movlw	192
  1753  002070  EC8E  F011         	call	_lcdInst
  1754                           
  1755                           ;main.c: 320: printf("Time: %is         ", time_difference(end_time, start_time));
  1756  002074  0E2E               	movlw	low STR_7
  1757  002076  0100               	movlb	0	; () banked
  1758  002078  6FAF               	movwf	printf@f& (0+255),b
  1759  00207A  0EFF               	movlw	high STR_7
  1760  00207C  0100               	movlb	0	; () banked
  1761  00207E  6FB0               	movwf	(printf@f+1)& (0+255),b
  1762  002080  C0C7  F099         	movff	runtime@end_time,time_difference@time1
  1763  002084  C0C8  F09A         	movff	runtime@end_time+1,time_difference@time1+1
  1764  002088  C0C5  F09B         	movff	runtime@start_time,time_difference@time2
  1765  00208C  C0C6  F09C         	movff	runtime@start_time+1,time_difference@time2+1
  1766  002090  EC33  F006         	call	_time_difference	;wreg free
  1767  002094  C099  F0B1         	movff	?_time_difference,?_printf+2
  1768  002098  C09A  F0B2         	movff	?_time_difference+1,?_printf+3
  1769  00209C  EC09  F000         	call	_printf	;wreg free
  1770  0020A0  0012               	return		;funcret
  1771  0020A2                     __end_of_runtime:
  1772                           	opt stack 0
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           intcon	equ	0xFF2
  1778                           intcon2	equ	0xFF1
  1779                           intcon3	equ	0xFF0
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1l	equ	0xFE1
  1784                           status	equ	0xFD8
  1785                           
  1786 ;; *************** function _operation_end *****************
  1787 ;; Defined at:
  1788 ;;		line 362 in file "main.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      void 
  1795 ;; Registers used:
  1796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;Total ram usage:        0 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    4
  1809 ;; This function calls:
  1810 ;;		_delay
  1811 ;;		_lcdInst
  1812 ;;		_printf
  1813 ;; This function is called by:
  1814 ;;		_main
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           	psect	text2
  1819  00212C                     __ptext2:
  1820                           	opt stack 0
  1821  00212C                     _operation_end:
  1822                           	opt stack 26
  1823                           
  1824                           ;main.c: 363: PORTEbits.RE1 = 0;
  1825                           
  1826                           ;incstack = 0
  1827  00212C  9284               	bcf	3972,1,c	;volatile
  1828                           
  1829                           ;main.c: 364: lcdInst(0b10000000);;
  1830  00212E  0E80               	movlw	128
  1831  002130  EC8E  F011         	call	_lcdInst
  1832                           
  1833                           ;main.c: 365: printf("Operation Done! ");
  1834  002134  0EA9               	movlw	low STR_18
  1835  002136  0100               	movlb	0	; () banked
  1836  002138  6FAF               	movwf	printf@f& (0+255),b
  1837  00213A  0EFF               	movlw	high STR_18
  1838  00213C  0100               	movlb	0	; () banked
  1839  00213E  6FB0               	movwf	(printf@f+1)& (0+255),b
  1840  002140  EC09  F000         	call	_printf	;wreg free
  1841                           
  1842                           ;main.c: 366: lcdInst(0b11000000);;
  1843  002144  0EC0               	movlw	192
  1844  002146  EC8E  F011         	call	_lcdInst
  1845                           
  1846                           ;main.c: 367: printf("                ");
  1847  00214A  0E1D               	movlw	low (STR_4+2)
  1848  00214C  0100               	movlb	0	; () banked
  1849  00214E  6FAF               	movwf	printf@f& (0+255),b
  1850  002150  0EFF               	movlw	high (STR_4+2)
  1851  002152  0100               	movlb	0	; () banked
  1852  002154  6FB0               	movwf	(printf@f+1)& (0+255),b
  1853  002156  EC09  F000         	call	_printf	;wreg free
  1854                           
  1855                           ;main.c: 368: curr_state = RUNTIME;
  1856  00215A  0E05               	movlw	5
  1857  00215C  0100               	movlb	0	; () banked
  1858  00215E  6FFB               	movwf	_curr_state& (0+255),b
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;main.c: 369: delay(1);
  1862  002160  0E00               	movlw	0
  1863  002162  6E12               	movwf	delay@seconds+1,c
  1864  002164  0E01               	movlw	1
  1865  002166  6E11               	movwf	delay@seconds,c
  1866  002168  EC74  F010         	call	_delay	;wreg free
  1867  00216C  0012               	return	
  1868  00216E                     __end_of_operation_end:
  1869                           	opt stack 0
  1870                           tblptru	equ	0xFF8
  1871                           tblptrh	equ	0xFF7
  1872                           tblptrl	equ	0xFF6
  1873                           tablat	equ	0xFF5
  1874                           intcon	equ	0xFF2
  1875                           intcon2	equ	0xFF1
  1876                           intcon3	equ	0xFF0
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           postdec1	equ	0xFE5
  1880                           fsr1l	equ	0xFE1
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _init_operation *****************
  1884 ;; Defined at:
  1885 ;;		line 247 in file "main.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  start_time      2   69[BANK0 ] PTR unsigned char 
  1888 ;;		 -> main@start_time(7), 
  1889 ;;  time            2   71[BANK0 ] PTR unsigned char 
  1890 ;;		 -> main@time(7), 
  1891 ;;  bot_count       2   73[BANK0 ] PTR unsigned char 
  1892 ;;		 -> main@bot_count(4), 
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;  r               2   93[BANK0 ] int 
  1895 ;;  c               2   89[BANK0 ] int 
  1896 ;;  b               2   87[BANK0 ] int 
  1897 ;;  g               2   77[BANK0 ] int 
  1898 ;;  i               2   91[BANK0 ] int 
  1899 ;;  clear           2   85[BANK0 ] unsigned char [2]
  1900 ;;  blue            2   83[BANK0 ] unsigned char [2]
  1901 ;;  green           2   81[BANK0 ] unsigned char [2]
  1902 ;;  red             2   79[BANK0 ] unsigned char [2]
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1912 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;Total ram usage:       26 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    8
  1919 ;; This function calls:
  1920 ;;		_delay
  1921 ;;		_initLCD
  1922 ;;		_lcdInst
  1923 ;;		_printf
  1924 ;;		_read_colorsensor
  1925 ;;		_time_difference
  1926 ;;		_update_time
  1927 ;; This function is called by:
  1928 ;;		_main
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text3
  1933  0003BE                     __ptext3:
  1934                           	opt stack 0
  1935  0003BE                     _init_operation:
  1936                           	opt stack 22
  1937                           
  1938                           ;main.c: 248: update_time(start_time);
  1939                           
  1940                           ;incstack = 0
  1941  0003BE  C0C5  F014         	movff	init_operation@start_time,update_time@time
  1942  0003C2  C0C6  F015         	movff	init_operation@start_time+1,update_time@time+1
  1943  0003C6  EC48  F00F         	call	_update_time	;wreg free
  1944                           
  1945                           ;main.c: 249: lcdInst(0b00000001);;
  1946  0003CA  0E01               	movlw	1
  1947  0003CC  EC8E  F011         	call	_lcdInst
  1948                           
  1949                           ;main.c: 250: initLCD();
  1950  0003D0  EC51  F010         	call	_initLCD	;wreg free
  1951                           
  1952                           ;main.c: 252: for (int i = 0; i<4; i++){
  1953  0003D4  0E00               	movlw	0
  1954  0003D6  0100               	movlb	0	; () banked
  1955  0003D8  6FDC               	movwf	(init_operation@i+1)& (0+255),b
  1956  0003DA  0E00               	movlw	0
  1957  0003DC  6FDB               	movwf	init_operation@i& (0+255),b
  1958                           
  1959                           ; BSR set to: 0
  1960  0003DE  0100               	movlb	0	; () banked
  1961  0003E0  BFDC               	btfsc	(init_operation@i+1)& (0+255),7,b
  1962  0003E2  D008               	goto	l3828
  1963  0003E4  0100               	movlb	0	; () banked
  1964  0003E6  51DC               	movf	(init_operation@i+1)& (0+255),w,b
  1965  0003E8  E11B               	bnz	l152
  1966  0003EA  0E04               	movlw	4
  1967  0003EC  0100               	movlb	0	; () banked
  1968  0003EE  5DDB               	subwf	init_operation@i& (0+255),w,b
  1969  0003F0  B0D8               	btfsc	status,0,c
  1970  0003F2  D016               	goto	l152
  1971  0003F4                     l3828:
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;main.c: 253: bot_count[i] = 0;
  1975  0003F4  0100               	movlb	0	; () banked
  1976  0003F6  51DB               	movf	init_operation@i& (0+255),w,b
  1977  0003F8  0100               	movlb	0	; () banked
  1978  0003FA  25C9               	addwf	init_operation@bot_count& (0+255),w,b
  1979  0003FC  6ED9               	movwf	fsr2l,c
  1980  0003FE  0100               	movlb	0	; () banked
  1981  000400  51DC               	movf	(init_operation@i+1)& (0+255),w,b
  1982  000402  0100               	movlb	0	; () banked
  1983  000404  21CA               	addwfc	(init_operation@bot_count+1)& (0+255),w,b
  1984  000406  6EDA               	movwf	fsr2h,c
  1985  000408  0E00               	movlw	0
  1986  00040A  6EDF               	movwf	indf2,c
  1987                           
  1988                           ; BSR set to: 0
  1989  00040C  0100               	movlb	0	; () banked
  1990  00040E  4BDB               	infsnz	init_operation@i& (0+255),f,b
  1991  000410  2BDC               	incf	(init_operation@i+1)& (0+255),f,b
  1992                           
  1993                           ; BSR set to: 0
  1994  000412  0100               	movlb	0	; () banked
  1995  000414  BFDC               	btfsc	(init_operation@i+1)& (0+255),7,b
  1996  000416  D7EE               	goto	l3828
  1997  000418  0100               	movlb	0	; () banked
  1998  00041A  51DC               	movf	(init_operation@i+1)& (0+255),w,b
  1999  00041C  E101               	bnz	u3410
  2000  00041E  D7E5               	goto	L1
  2001  000420                     u3410:
  2002  000420                     l152:
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;main.c: 254: }
  2006                           ;main.c: 256: unsigned char red[2];
  2007                           ;main.c: 257: unsigned char green[2];
  2008                           ;main.c: 258: unsigned char blue[2];
  2009                           ;main.c: 259: unsigned char clear[2];
  2010                           ;main.c: 261: PORTEbits.RE1 = 1;
  2011  000420  8284               	bsf	3972,1,c	;volatile
  2012                           
  2013                           ;main.c: 263: while(PORTBbits.RB1 == 0 && keys[(PORTB & 0xF0)>>4] != '*'){
  2014  000422  D175               	goto	l3916
  2015  000424                     l3834:
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;main.c: 264: update_time(time);
  2019  000424  C0C7  F014         	movff	init_operation@time,update_time@time
  2020  000428  C0C8  F015         	movff	init_operation@time+1,update_time@time+1
  2021  00042C  EC48  F00F         	call	_update_time	;wreg free
  2022                           
  2023                           ;main.c: 265: lcdInst(0b10000000);;
  2024  000430  0E80               	movlw	128
  2025  000432  EC8E  F011         	call	_lcdInst
  2026                           
  2027                           ;main.c: 266: printf("Press * To Stop ");
  2028  000436  0EDC               	movlw	low STR_2
  2029  000438  0100               	movlb	0	; () banked
  2030  00043A  6FAF               	movwf	printf@f& (0+255),b
  2031  00043C  0EFF               	movlw	high STR_2
  2032  00043E  0100               	movlb	0	; () banked
  2033  000440  6FB0               	movwf	(printf@f+1)& (0+255),b
  2034  000442  EC09  F000         	call	_printf	;wreg free
  2035                           
  2036                           ;main.c: 267: lcdInst(0b11000000);;
  2037  000446  0EC0               	movlw	192
  2038  000448  EC8E  F011         	call	_lcdInst
  2039                           
  2040                           ;main.c: 268: printf("Elapsed: %is      ", time_difference(time, start_time));
  2041  00044C  0E41               	movlw	low STR_3
  2042  00044E  0100               	movlb	0	; () banked
  2043  000450  6FAF               	movwf	printf@f& (0+255),b
  2044  000452  0EFF               	movlw	high STR_3
  2045  000454  0100               	movlb	0	; () banked
  2046  000456  6FB0               	movwf	(printf@f+1)& (0+255),b
  2047  000458  C0C7  F099         	movff	init_operation@time,time_difference@time1
  2048  00045C  C0C8  F09A         	movff	init_operation@time+1,time_difference@time1+1
  2049  000460  C0C5  F09B         	movff	init_operation@start_time,time_difference@time2
  2050  000464  C0C6  F09C         	movff	init_operation@start_time+1,time_difference@time2+1
  2051  000468  EC33  F006         	call	_time_difference	;wreg free
  2052  00046C  C099  F0B1         	movff	?_time_difference,?_printf+2
  2053  000470  C09A  F0B2         	movff	?_time_difference+1,?_printf+3
  2054  000474  EC09  F000         	call	_printf	;wreg free
  2055                           
  2056                           ;main.c: 269: _delay((unsigned long)((500)*(10000000/4000.0)));
  2057  000478  0E07               	movlw	7
  2058  00047A  0100               	movlb	0	; () banked
  2059  00047C  6FCC               	movwf	(??_init_operation+1)& (0+255),b
  2060  00047E  0E58               	movlw	88
  2061  000480  0100               	movlb	0	; () banked
  2062  000482  6FCB               	movwf	??_init_operation& (0+255),b
  2063  000484  0E59               	movlw	89
  2064  000486                     u3547:
  2065  000486  2EE8               	decfsz	wreg,f,c
  2066  000488  D7FE               	bra	u3547
  2067  00048A  2FCB               	decfsz	??_init_operation& (0+255),f,b
  2068  00048C  D7FC               	bra	u3547
  2069  00048E  2FCC               	decfsz	(??_init_operation+1)& (0+255),f,b
  2070  000490  D7FA               	bra	u3547
  2071  000492  D000               	nop2	
  2072                           
  2073                           ;main.c: 270: read_colorsensor(red, green, blue, clear);
  2074  000494  0ECF               	movlw	low init_operation@red
  2075  000496  6E14               	movwf	read_colorsensor@red,c
  2076  000498  0E00               	movlw	high init_operation@red
  2077  00049A  6E15               	movwf	read_colorsensor@red+1,c
  2078  00049C  0ED1               	movlw	low init_operation@green
  2079  00049E  6E16               	movwf	read_colorsensor@green,c
  2080  0004A0  0E00               	movlw	high init_operation@green
  2081  0004A2  6E17               	movwf	read_colorsensor@green+1,c
  2082  0004A4  0ED3               	movlw	low init_operation@blue
  2083  0004A6  6E18               	movwf	read_colorsensor@blue,c
  2084  0004A8  0E00               	movlw	high init_operation@blue
  2085  0004AA  6E19               	movwf	read_colorsensor@blue+1,c
  2086  0004AC  0ED5               	movlw	low init_operation@clear
  2087  0004AE  6E1A               	movwf	read_colorsensor@clear,c
  2088  0004B0  0E00               	movlw	high init_operation@clear
  2089  0004B2  6E1B               	movwf	read_colorsensor@clear+1,c
  2090  0004B4  EC7F  F00B         	call	_read_colorsensor	;wreg free
  2091                           
  2092                           ;main.c: 271: int r = (red[0]<<8) | red[1];
  2093  0004B8  0100               	movlb	0	; () banked
  2094  0004BA  51D0               	movf	(init_operation@red+1)& (0+255),w,b
  2095  0004BC  C0CF  F0CB         	movff	init_operation@red,??_init_operation
  2096  0004C0  0100               	movlb	0	; () banked
  2097  0004C2  6BCC               	clrf	(??_init_operation+1)& (0+255),b
  2098  0004C4  C0CB  F0CC         	movff	??_init_operation,??_init_operation+1
  2099  0004C8  0100               	movlb	0	; () banked
  2100  0004CA  6BCB               	clrf	??_init_operation& (0+255),b
  2101  0004CC  0100               	movlb	0	; () banked
  2102  0004CE  11CB               	iorwf	??_init_operation& (0+255),w,b
  2103  0004D0  0100               	movlb	0	; () banked
  2104  0004D2  6FDD               	movwf	init_operation@r& (0+255),b
  2105  0004D4  0100               	movlb	0	; () banked
  2106  0004D6  51CC               	movf	(??_init_operation+1)& (0+255),w,b
  2107  0004D8  0100               	movlb	0	; () banked
  2108  0004DA  6FDE               	movwf	(init_operation@r+1)& (0+255),b
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;main.c: 272: int g = (green[0]<<8) | green[1];
  2112  0004DC  0100               	movlb	0	; () banked
  2113  0004DE  51D2               	movf	(init_operation@green+1)& (0+255),w,b
  2114  0004E0  C0D1  F0CB         	movff	init_operation@green,??_init_operation
  2115  0004E4  0100               	movlb	0	; () banked
  2116  0004E6  6BCC               	clrf	(??_init_operation+1)& (0+255),b
  2117  0004E8  C0CB  F0CC         	movff	??_init_operation,??_init_operation+1
  2118  0004EC  0100               	movlb	0	; () banked
  2119  0004EE  6BCB               	clrf	??_init_operation& (0+255),b
  2120  0004F0  0100               	movlb	0	; () banked
  2121  0004F2  11CB               	iorwf	??_init_operation& (0+255),w,b
  2122  0004F4  0100               	movlb	0	; () banked
  2123  0004F6  6FCD               	movwf	init_operation@g& (0+255),b
  2124  0004F8  0100               	movlb	0	; () banked
  2125  0004FA  51CC               	movf	(??_init_operation+1)& (0+255),w,b
  2126  0004FC  0100               	movlb	0	; () banked
  2127  0004FE  6FCE               	movwf	(init_operation@g+1)& (0+255),b
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;main.c: 273: int b = (blue[0]<<8) | blue[1];
  2131  000500  0100               	movlb	0	; () banked
  2132  000502  51D4               	movf	(init_operation@blue+1)& (0+255),w,b
  2133  000504  C0D3  F0CB         	movff	init_operation@blue,??_init_operation
  2134  000508  0100               	movlb	0	; () banked
  2135  00050A  6BCC               	clrf	(??_init_operation+1)& (0+255),b
  2136  00050C  C0CB  F0CC         	movff	??_init_operation,??_init_operation+1
  2137  000510  0100               	movlb	0	; () banked
  2138  000512  6BCB               	clrf	??_init_operation& (0+255),b
  2139  000514  0100               	movlb	0	; () banked
  2140  000516  11CB               	iorwf	??_init_operation& (0+255),w,b
  2141  000518  0100               	movlb	0	; () banked
  2142  00051A  6FD7               	movwf	init_operation@b& (0+255),b
  2143  00051C  0100               	movlb	0	; () banked
  2144  00051E  51CC               	movf	(??_init_operation+1)& (0+255),w,b
  2145  000520  0100               	movlb	0	; () banked
  2146  000522  6FD8               	movwf	(init_operation@b+1)& (0+255),b
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;main.c: 274: int c = (clear[0]<<8) | clear[1];
  2150  000524  0100               	movlb	0	; () banked
  2151  000526  51D6               	movf	(init_operation@clear+1)& (0+255),w,b
  2152  000528  C0D5  F0CB         	movff	init_operation@clear,??_init_operation
  2153  00052C  0100               	movlb	0	; () banked
  2154  00052E  6BCC               	clrf	(??_init_operation+1)& (0+255),b
  2155  000530  C0CB  F0CC         	movff	??_init_operation,??_init_operation+1
  2156  000534  0100               	movlb	0	; () banked
  2157  000536  6BCB               	clrf	??_init_operation& (0+255),b
  2158  000538  0100               	movlb	0	; () banked
  2159  00053A  11CB               	iorwf	??_init_operation& (0+255),w,b
  2160  00053C  0100               	movlb	0	; () banked
  2161  00053E  6FD9               	movwf	init_operation@c& (0+255),b
  2162  000540  0100               	movlb	0	; () banked
  2163  000542  51CC               	movf	(??_init_operation+1)& (0+255),w,b
  2164  000544  0100               	movlb	0	; () banked
  2165  000546  6FDA               	movwf	(init_operation@c+1)& (0+255),b
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;main.c: 276: lcdInst(0b10000000);;
  2169  000548  0E80               	movlw	128
  2170  00054A  EC8E  F011         	call	_lcdInst
  2171                           
  2172                           ;main.c: 277: printf("%i                ", r);
  2173  00054E  0E1B               	movlw	low STR_4
  2174  000550  0100               	movlb	0	; () banked
  2175  000552  6FAF               	movwf	printf@f& (0+255),b
  2176  000554  0EFF               	movlw	high STR_4
  2177  000556  0100               	movlb	0	; () banked
  2178  000558  6FB0               	movwf	(printf@f+1)& (0+255),b
  2179  00055A  C0DD  F0B1         	movff	init_operation@r,?_printf+2
  2180  00055E  C0DE  F0B2         	movff	init_operation@r+1,?_printf+3
  2181  000562  EC09  F000         	call	_printf	;wreg free
  2182                           
  2183                           ;main.c: 278: lcdInst(0b11000000);;
  2184  000566  0EC0               	movlw	192
  2185  000568  EC8E  F011         	call	_lcdInst
  2186                           
  2187                           ;main.c: 279: printf("%i                ", c);
  2188  00056C  0E1B               	movlw	low STR_4
  2189  00056E  0100               	movlb	0	; () banked
  2190  000570  6FAF               	movwf	printf@f& (0+255),b
  2191  000572  0EFF               	movlw	high STR_4
  2192  000574  0100               	movlb	0	; () banked
  2193  000576  6FB0               	movwf	(printf@f+1)& (0+255),b
  2194  000578  C0D9  F0B1         	movff	init_operation@c,?_printf+2
  2195  00057C  C0DA  F0B2         	movff	init_operation@c+1,?_printf+3
  2196  000580  EC09  F000         	call	_printf	;wreg free
  2197                           
  2198                           ;main.c: 281: if (r > 4000 && b < 2000){
  2199  000584  0100               	movlb	0	; () banked
  2200  000586  BFDE               	btfsc	(init_operation@r+1)& (0+255),7,b
  2201  000588  D029               	goto	l3876
  2202  00058A  0EA1               	movlw	161
  2203  00058C  0100               	movlb	0	; () banked
  2204  00058E  5DDD               	subwf	init_operation@r& (0+255),w,b
  2205  000590  0E0F               	movlw	15
  2206  000592  0100               	movlb	0	; () banked
  2207  000594  59DE               	subwfb	(init_operation@r+1)& (0+255),w,b
  2208  000596  A0D8               	btfss	status,0,c
  2209  000598  D021               	goto	l3876
  2210                           
  2211                           ; BSR set to: 0
  2212  00059A  0100               	movlb	0	; () banked
  2213  00059C  BFD8               	btfsc	(init_operation@b+1)& (0+255),7,b
  2214  00059E  D008               	goto	l3868
  2215  0005A0  0ED0               	movlw	208
  2216  0005A2  0100               	movlb	0	; () banked
  2217  0005A4  5DD7               	subwf	init_operation@b& (0+255),w,b
  2218  0005A6  0E07               	movlw	7
  2219  0005A8  0100               	movlb	0	; () banked
  2220  0005AA  59D8               	subwfb	(init_operation@b+1)& (0+255),w,b
  2221  0005AC  B0D8               	btfsc	status,0,c
  2222  0005AE  D016               	goto	l3876
  2223  0005B0                     l3868:
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;main.c: 282: PORTEbits.RE0 = 0;
  2227  0005B0  9084               	bcf	3972,0,c	;volatile
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;main.c: 283: bot_count[0] ++;
  2231  0005B2  C0C9  FFD9         	movff	init_operation@bot_count,fsr2l
  2232  0005B6  C0CA  FFDA         	movff	init_operation@bot_count+1,fsr2h
  2233  0005BA  2ADF               	incf	indf2,f,c
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;main.c: 284: _delay((unsigned long)((500)*(10000000/4000.0)));
  2237  0005BC  0E07               	movlw	7
  2238  0005BE  0100               	movlb	0	; () banked
  2239  0005C0  6FCC               	movwf	(??_init_operation+1)& (0+255),b
  2240  0005C2  0E58               	movlw	88
  2241  0005C4  0100               	movlb	0	; () banked
  2242  0005C6  6FCB               	movwf	??_init_operation& (0+255),b
  2243  0005C8  0E59               	movlw	89
  2244  0005CA                     u3557:
  2245  0005CA  2EE8               	decfsz	wreg,f,c
  2246  0005CC  D7FE               	bra	u3557
  2247  0005CE  2FCB               	decfsz	??_init_operation& (0+255),f,b
  2248  0005D0  D7FC               	bra	u3557
  2249  0005D2  2FCC               	decfsz	(??_init_operation+1)& (0+255),f,b
  2250  0005D4  D7FA               	bra	u3557
  2251  0005D6  D093               	goto	L4
  2252  0005D8                     l3874:
  2253                           
  2254                           ;main.c: 285: PORTEbits.RE0 = 1;
  2255  0005D8  8084               	bsf	3972,0,c	;volatile
  2256                           
  2257                           ;main.c: 286: }
  2258  0005DA  D093               	goto	l3914
  2259  0005DC                     l3876:
  2260                           
  2261                           ;main.c: 287: else if (r > 3000 && g < 3000 & b < 3000){
  2262  0005DC  0100               	movlb	0	; () banked
  2263  0005DE  BFDE               	btfsc	(init_operation@r+1)& (0+255),7,b
  2264  0005E0  D035               	goto	l3890
  2265  0005E2  0EB9               	movlw	185
  2266  0005E4  0100               	movlb	0	; () banked
  2267  0005E6  5DDD               	subwf	init_operation@r& (0+255),w,b
  2268  0005E8  0E0B               	movlw	11
  2269  0005EA  0100               	movlb	0	; () banked
  2270  0005EC  59DE               	subwfb	(init_operation@r+1)& (0+255),w,b
  2271  0005EE  A0D8               	btfss	status,0,c
  2272  0005F0  D02D               	goto	l3890
  2273                           
  2274                           ; BSR set to: 0
  2275  0005F2  0100               	movlb	0	; () banked
  2276  0005F4  BFCE               	btfsc	(init_operation@g+1)& (0+255),7,b
  2277  0005F6  D008               	goto	l3880
  2278  0005F8  0EB8               	movlw	184
  2279  0005FA  0100               	movlb	0	; () banked
  2280  0005FC  5DCD               	subwf	init_operation@g& (0+255),w,b
  2281  0005FE  0E0B               	movlw	11
  2282  000600  0100               	movlb	0	; () banked
  2283  000602  59CE               	subwfb	(init_operation@g+1)& (0+255),w,b
  2284  000604  B0D8               	btfsc	status,0,c
  2285  000606  D022               	goto	l3890
  2286  000608                     l3880:
  2287                           
  2288                           ; BSR set to: 0
  2289  000608  0100               	movlb	0	; () banked
  2290  00060A  BFD8               	btfsc	(init_operation@b+1)& (0+255),7,b
  2291  00060C  D008               	goto	l3882
  2292  00060E  0EB8               	movlw	184
  2293  000610  0100               	movlb	0	; () banked
  2294  000612  5DD7               	subwf	init_operation@b& (0+255),w,b
  2295  000614  0E0B               	movlw	11
  2296  000616  0100               	movlb	0	; () banked
  2297  000618  59D8               	subwfb	(init_operation@b+1)& (0+255),w,b
  2298  00061A  B0D8               	btfsc	status,0,c
  2299  00061C  D017               	goto	l3890
  2300  00061E                     l3882:
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;main.c: 288: PORTEbits.RE0 = 0;
  2304  00061E  9084               	bcf	3972,0,c	;volatile
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;main.c: 289: bot_count[1] ++;
  2308  000620  0100               	movlb	0	; () banked
  2309  000622  EE20 F001          	lfsr	2,1
  2310  000626  51C9               	movf	init_operation@bot_count& (0+255),w,b
  2311  000628  26D9               	addwf	fsr2l,f,c
  2312  00062A  51CA               	movf	(init_operation@bot_count+1)& (0+255),w,b
  2313  00062C  22DA               	addwfc	fsr2h,f,c
  2314  00062E  2ADF               	incf	indf2,f,c
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;main.c: 290: _delay((unsigned long)((500)*(10000000/4000.0)));
  2318  000630  0E07               	movlw	7
  2319  000632  0100               	movlb	0	; () banked
  2320  000634  6FCC               	movwf	(??_init_operation+1)& (0+255),b
  2321  000636  0E58               	movlw	88
  2322  000638  0100               	movlb	0	; () banked
  2323  00063A  6FCB               	movwf	??_init_operation& (0+255),b
  2324  00063C  0E59               	movlw	89
  2325  00063E                     u3567:
  2326  00063E  2EE8               	decfsz	wreg,f,c
  2327  000640  D7FE               	bra	u3567
  2328  000642  2FCB               	decfsz	??_init_operation& (0+255),f,b
  2329  000644  D7FC               	bra	u3567
  2330  000646  2FCC               	decfsz	(??_init_operation+1)& (0+255),f,b
  2331  000648  D7FA               	bra	u3567
  2332  00064A  D059               	goto	L4
  2333  00064C                     l3890:
  2334                           
  2335                           ;main.c: 294: else if (b > 4000 && r < 2500){
  2336  00064C  0100               	movlb	0	; () banked
  2337  00064E  BFD8               	btfsc	(init_operation@b+1)& (0+255),7,b
  2338  000650  D02A               	goto	l3902
  2339  000652  0EA1               	movlw	161
  2340  000654  0100               	movlb	0	; () banked
  2341  000656  5DD7               	subwf	init_operation@b& (0+255),w,b
  2342  000658  0E0F               	movlw	15
  2343  00065A  0100               	movlb	0	; () banked
  2344  00065C  59D8               	subwfb	(init_operation@b+1)& (0+255),w,b
  2345  00065E  A0D8               	btfss	status,0,c
  2346  000660  D022               	goto	l3902
  2347                           
  2348                           ; BSR set to: 0
  2349  000662  0100               	movlb	0	; () banked
  2350  000664  BFDE               	btfsc	(init_operation@r+1)& (0+255),7,b
  2351  000666  D008               	goto	l3894
  2352  000668  0EC4               	movlw	196
  2353  00066A  0100               	movlb	0	; () banked
  2354  00066C  5DDD               	subwf	init_operation@r& (0+255),w,b
  2355  00066E  0E09               	movlw	9
  2356  000670  0100               	movlb	0	; () banked
  2357  000672  59DE               	subwfb	(init_operation@r+1)& (0+255),w,b
  2358  000674  B0D8               	btfsc	status,0,c
  2359  000676  D017               	goto	l3902
  2360  000678                     l3894:
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;main.c: 295: PORTEbits.RE0 = 0;
  2364  000678  9084               	bcf	3972,0,c	;volatile
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;main.c: 296: bot_count[2] ++;
  2368  00067A  0100               	movlb	0	; () banked
  2369  00067C  EE20 F002          	lfsr	2,2
  2370  000680  51C9               	movf	init_operation@bot_count& (0+255),w,b
  2371  000682  26D9               	addwf	fsr2l,f,c
  2372  000684  51CA               	movf	(init_operation@bot_count+1)& (0+255),w,b
  2373  000686  22DA               	addwfc	fsr2h,f,c
  2374  000688  2ADF               	incf	indf2,f,c
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;main.c: 297: _delay((unsigned long)((500)*(10000000/4000.0)));
  2378  00068A  0E07               	movlw	7
  2379  00068C  0100               	movlb	0	; () banked
  2380  00068E  6FCC               	movwf	(??_init_operation+1)& (0+255),b
  2381  000690  0E58               	movlw	88
  2382  000692  0100               	movlb	0	; () banked
  2383  000694  6FCB               	movwf	??_init_operation& (0+255),b
  2384  000696  0E59               	movlw	89
  2385  000698                     u3577:
  2386  000698  2EE8               	decfsz	wreg,f,c
  2387  00069A  D7FE               	bra	u3577
  2388  00069C  2FCB               	decfsz	??_init_operation& (0+255),f,b
  2389  00069E  D7FC               	bra	u3577
  2390  0006A0  2FCC               	decfsz	(??_init_operation+1)& (0+255),f,b
  2391  0006A2  D7FA               	bra	u3577
  2392  0006A4  D02C               	goto	L4
  2393  0006A6                     l3902:
  2394                           
  2395                           ;main.c: 301: else if (c > 2000 && c < 2500){
  2396  0006A6  0100               	movlb	0	; () banked
  2397  0006A8  BFDA               	btfsc	(init_operation@c+1)& (0+255),7,b
  2398  0006AA  D02B               	goto	l3914
  2399  0006AC  0ED1               	movlw	209
  2400  0006AE  0100               	movlb	0	; () banked
  2401  0006B0  5DD9               	subwf	init_operation@c& (0+255),w,b
  2402  0006B2  0E07               	movlw	7
  2403  0006B4  0100               	movlb	0	; () banked
  2404  0006B6  59DA               	subwfb	(init_operation@c+1)& (0+255),w,b
  2405  0006B8  A0D8               	btfss	status,0,c
  2406  0006BA  D023               	goto	l3914
  2407                           
  2408                           ; BSR set to: 0
  2409  0006BC  0100               	movlb	0	; () banked
  2410  0006BE  BFDA               	btfsc	(init_operation@c+1)& (0+255),7,b
  2411  0006C0  D008               	goto	l3906
  2412  0006C2  0EC4               	movlw	196
  2413  0006C4  0100               	movlb	0	; () banked
  2414  0006C6  5DD9               	subwf	init_operation@c& (0+255),w,b
  2415  0006C8  0E09               	movlw	9
  2416  0006CA  0100               	movlb	0	; () banked
  2417  0006CC  59DA               	subwfb	(init_operation@c+1)& (0+255),w,b
  2418  0006CE  B0D8               	btfsc	status,0,c
  2419  0006D0  D018               	goto	l3914
  2420  0006D2                     l3906:
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;main.c: 302: PORTEbits.RE0 = 0;
  2424  0006D2  9084               	bcf	3972,0,c	;volatile
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;main.c: 303: bot_count[3] ++;
  2428  0006D4  0100               	movlb	0	; () banked
  2429  0006D6  EE20 F003          	lfsr	2,3
  2430  0006DA  51C9               	movf	init_operation@bot_count& (0+255),w,b
  2431  0006DC  26D9               	addwf	fsr2l,f,c
  2432  0006DE  51CA               	movf	(init_operation@bot_count+1)& (0+255),w,b
  2433  0006E0  22DA               	addwfc	fsr2h,f,c
  2434  0006E2  2ADF               	incf	indf2,f,c
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;main.c: 304: _delay((unsigned long)((500)*(10000000/4000.0)));
  2438  0006E4  0E07               	movlw	7
  2439  0006E6  0100               	movlb	0	; () banked
  2440  0006E8  6FCC               	movwf	(??_init_operation+1)& (0+255),b
  2441  0006EA  0E58               	movlw	88
  2442  0006EC  0100               	movlb	0	; () banked
  2443  0006EE  6FCB               	movwf	??_init_operation& (0+255),b
  2444  0006F0  0E59               	movlw	89
  2445  0006F2                     u3587:
  2446  0006F2  2EE8               	decfsz	wreg,f,c
  2447  0006F4  D7FE               	bra	u3587
  2448  0006F6  2FCB               	decfsz	??_init_operation& (0+255),f,b
  2449  0006F8  D7FC               	bra	u3587
  2450  0006FA  2FCC               	decfsz	(??_init_operation+1)& (0+255),f,b
  2451  0006FC  D7FA               	bra	u3587
  2452  0006FE                     L4:
  2453  0006FE  D000               	nop2	
  2454  000700  D76B               	goto	l3874
  2455  000702                     l3914:
  2456                           
  2457                           ;main.c: 306: }
  2458                           ;main.c: 308: delay(1);
  2459  000702  0E00               	movlw	0
  2460  000704  6E12               	movwf	delay@seconds+1,c
  2461  000706  0E01               	movlw	1
  2462  000708  6E11               	movwf	delay@seconds,c
  2463  00070A  EC74  F010         	call	_delay	;wreg free
  2464  00070E                     l3916:
  2465  00070E  B281               	btfsc	3969,1,c	;volatile
  2466  000710  0012               	return	
  2467  000712  3881               	swapf	3969,w,c	;volatile
  2468  000714  0B0F               	andlw	15
  2469  000716  0B0F               	andlw	15
  2470  000718  0100               	movlb	0	; () banked
  2471  00071A  6FCB               	movwf	??_init_operation& (0+255),b
  2472  00071C  6BCC               	clrf	(??_init_operation+1)& (0+255),b
  2473  00071E  0E6F               	movlw	low _keys
  2474  000720  0100               	movlb	0	; () banked
  2475  000722  25CB               	addwf	??_init_operation& (0+255),w,b
  2476  000724  6EF6               	movwf	tblptrl,c
  2477  000726  0EFE               	movlw	high _keys
  2478  000728  21CC               	addwfc	(??_init_operation+1)& (0+255),w,b
  2479  00072A  6EF7               	movwf	tblptrh,c
  2480  00072C                     	if	0	;There are less than 3 active tblptr bytes
  2481  00072C                     	endif
  2482  00072C  0008               	tblrd		*
  2483  00072E  50F5               	movf	tablat,w,c
  2484  000730  0A2A               	xorlw	42
  2485  000732  B4D8               	btfsc	status,2,c
  2486  000734  0012               	return	
  2487  000736  D676               	goto	l3834
  2488  000738                     __end_of_init_operation:
  2489                           	opt stack 0
  2490                           tblptru	equ	0xFF8
  2491                           tblptrh	equ	0xFF7
  2492                           tblptrl	equ	0xFF6
  2493                           tablat	equ	0xFF5
  2494                           intcon	equ	0xFF2
  2495                           intcon2	equ	0xFF1
  2496                           intcon3	equ	0xFF0
  2497                           postinc0	equ	0xFEE
  2498                           wreg	equ	0xFE8
  2499                           postdec1	equ	0xFE5
  2500                           fsr1l	equ	0xFE1
  2501                           indf2	equ	0xFDF
  2502                           fsr2h	equ	0xFDA
  2503                           fsr2l	equ	0xFD9
  2504                           status	equ	0xFD8
  2505                           
  2506 ;; *************** function _update_time *****************
  2507 ;; Defined at:
  2508 ;;		line 180 in file "main.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  time            2   19[COMRAM] PTR unsigned char 
  2511 ;;		 -> main@end_time(7), main@time(7), main@start_time(7), 
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;  i               1   21[COMRAM] unsigned char 
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  1    wreg      void 
  2516 ;; Registers used:
  2517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2523 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2526 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2527 ;;Total ram usage:        3 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    3
  2530 ;; This function calls:
  2531 ;;		_I2C_Master_Read
  2532 ;;		_I2C_Master_Start
  2533 ;;		_I2C_Master_Stop
  2534 ;;		_I2C_Master_Write
  2535 ;; This function is called by:
  2536 ;;		_main
  2537 ;;		_init_operation
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           	psect	text4
  2542  001E90                     __ptext4:
  2543                           	opt stack 0
  2544  001E90                     _update_time:
  2545                           	opt stack 27
  2546                           
  2547                           ;main.c: 181: I2C_Master_Start();
  2548                           
  2549                           ;incstack = 0
  2550  001E90  EC9D  F011         	call	_I2C_Master_Start	;wreg free
  2551                           
  2552                           ;main.c: 182: I2C_Master_Write(0b11010000);
  2553  001E94  0E00               	movlw	0
  2554  001E96  6E13               	movwf	I2C_Master_Write@d+1,c
  2555  001E98  0ED0               	movlw	208
  2556  001E9A  6E12               	movwf	I2C_Master_Write@d,c
  2557  001E9C  EC94  F011         	call	_I2C_Master_Write	;wreg free
  2558                           
  2559                           ;main.c: 183: I2C_Master_Write(0x00);
  2560  001EA0  0E00               	movlw	0
  2561  001EA2  6E13               	movwf	I2C_Master_Write@d+1,c
  2562  001EA4  0E00               	movlw	0
  2563  001EA6  6E12               	movwf	I2C_Master_Write@d,c
  2564  001EA8  EC94  F011         	call	_I2C_Master_Write	;wreg free
  2565                           
  2566                           ;main.c: 184: I2C_Master_Stop();
  2567  001EAC  EC99  F011         	call	_I2C_Master_Stop	;wreg free
  2568                           
  2569                           ;main.c: 187: I2C_Master_Start();
  2570  001EB0  EC9D  F011         	call	_I2C_Master_Start	;wreg free
  2571                           
  2572                           ;main.c: 188: I2C_Master_Write(0b11010001);
  2573  001EB4  0E00               	movlw	0
  2574  001EB6  6E13               	movwf	I2C_Master_Write@d+1,c
  2575  001EB8  0ED1               	movlw	209
  2576  001EBA  6E12               	movwf	I2C_Master_Write@d,c
  2577  001EBC  EC94  F011         	call	_I2C_Master_Write	;wreg free
  2578                           
  2579                           ;main.c: 189: for(unsigned char i=0;i<0x06;i++){
  2580  001EC0  0E00               	movlw	0
  2581  001EC2  6E16               	movwf	update_time@i,c
  2582  001EC4                     l3326:
  2583  001EC4  0E05               	movlw	5
  2584  001EC6  6416               	cpfsgt	update_time@i,c
  2585  001EC8  D001               	goto	l3330
  2586  001ECA  D00E               	goto	l3336
  2587  001ECC                     l3330:
  2588                           
  2589                           ;main.c: 190: time[i] = I2C_Master_Read(1);
  2590  001ECC  5016               	movf	update_time@i,w,c
  2591  001ECE  0D01               	mullw	1
  2592  001ED0  50F3               	movf	prodl,w,c
  2593  001ED2  2414               	addwf	update_time@time,w,c
  2594  001ED4  6ED9               	movwf	fsr2l,c
  2595  001ED6  50F4               	movf	prodh,w,c
  2596  001ED8  2015               	addwfc	update_time@time+1,w,c
  2597  001EDA  6EDA               	movwf	fsr2h,c
  2598  001EDC  0E01               	movlw	1
  2599  001EDE  EC30  F011         	call	_I2C_Master_Read
  2600  001EE2  6EDF               	movwf	indf2,c
  2601  001EE4  2A16               	incf	update_time@i,f,c
  2602  001EE6  D7EE               	goto	l3326
  2603  001EE8                     l3336:
  2604                           
  2605                           ;main.c: 191: }
  2606                           ;main.c: 192: time[6] = I2C_Master_Read(0);
  2607  001EE8  EE20 F006          	lfsr	2,6
  2608  001EEC  5014               	movf	update_time@time,w,c
  2609  001EEE  26D9               	addwf	fsr2l,f,c
  2610  001EF0  5015               	movf	update_time@time+1,w,c
  2611  001EF2  22DA               	addwfc	fsr2h,f,c
  2612  001EF4  0E00               	movlw	0
  2613  001EF6  EC30  F011         	call	_I2C_Master_Read
  2614  001EFA  6EDF               	movwf	indf2,c
  2615                           
  2616                           ;main.c: 193: I2C_Master_Stop();
  2617  001EFC  EC99  F011         	call	_I2C_Master_Stop	;wreg free
  2618  001F00  0012               	return		;funcret
  2619  001F02                     __end_of_update_time:
  2620                           	opt stack 0
  2621                           tblptru	equ	0xFF8
  2622                           tblptrh	equ	0xFF7
  2623                           tblptrl	equ	0xFF6
  2624                           tablat	equ	0xFF5
  2625                           prodh	equ	0xFF4
  2626                           prodl	equ	0xFF3
  2627                           intcon	equ	0xFF2
  2628                           intcon2	equ	0xFF1
  2629                           intcon3	equ	0xFF0
  2630                           postinc0	equ	0xFEE
  2631                           wreg	equ	0xFE8
  2632                           postdec1	equ	0xFE5
  2633                           fsr1l	equ	0xFE1
  2634                           indf2	equ	0xFDF
  2635                           fsr2h	equ	0xFDA
  2636                           fsr2l	equ	0xFD9
  2637                           status	equ	0xFD8
  2638                           
  2639 ;; *************** function _time_difference *****************
  2640 ;; Defined at:
  2641 ;;		line 235 in file "main.c"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;  time1           2   25[BANK0 ] PTR unsigned char 
  2644 ;;		 -> main@end_time(7), main@time(7), 
  2645 ;;  time2           2   27[BANK0 ] PTR unsigned char 
  2646 ;;		 -> main@start_time(7), 
  2647 ;; Auto vars:     Size  Location     Type
  2648 ;;  d3              2   45[BANK0 ] int 
  2649 ;;  d2              2   43[BANK0 ] int 
  2650 ;;  d1              2   41[BANK0 ] int 
  2651 ;;  s2              2   39[BANK0 ] int 
  2652 ;;  s1              2   37[BANK0 ] int 
  2653 ;;  min2            2   35[BANK0 ] int 
  2654 ;;  min1            2   33[BANK0 ] int 
  2655 ;;  hr2             2   31[BANK0 ] int 
  2656 ;;  hr1             2   29[BANK0 ] int 
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  2   25[BANK0 ] int 
  2659 ;; Registers used:
  2660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2666 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2667 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Totals:         2      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;Total ram usage:       24 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; Hardware stack levels required when called:    7
  2673 ;; This function calls:
  2674 ;;		___wmul
  2675 ;;		_dec_to_hex
  2676 ;; This function is called by:
  2677 ;;		_init_operation
  2678 ;;		_runtime
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text5
  2683  000C66                     __ptext5:
  2684                           	opt stack 0
  2685  000C66                     _time_difference:
  2686                           	opt stack 22
  2687                           
  2688                           ;main.c: 236: int hr1, hr2, min1, min2, s1, s2;
  2689                           ;main.c: 237: int d1, d2, d3;
  2690                           ;main.c: 238: hr1 = time1[2]; hr2 = time2[2]; min1 = time1[1]; min2 = time2[1];
  2691                           
  2692                           ;incstack = 0
  2693  000C66  0100               	movlb	0	; () banked
  2694  000C68  EE20 F002          	lfsr	2,2
  2695  000C6C  5199               	movf	time_difference@time1& (0+255),w,b
  2696  000C6E  26D9               	addwf	fsr2l,f,c
  2697  000C70  519A               	movf	(time_difference@time1+1)& (0+255),w,b
  2698  000C72  22DA               	addwfc	fsr2h,f,c
  2699  000C74  50DF               	movf	indf2,w,c
  2700  000C76  6E6A               	movwf	??_time_difference& (0+255),c
  2701  000C78  506A               	movf	??_time_difference,w,c
  2702  000C7A  0100               	movlb	0	; () banked
  2703  000C7C  6F9D               	movwf	time_difference@hr1& (0+255),b
  2704  000C7E  6B9E               	clrf	(time_difference@hr1+1)& (0+255),b
  2705  000C80  0100               	movlb	0	; () banked
  2706  000C82  EE20 F002          	lfsr	2,2
  2707  000C86  519B               	movf	time_difference@time2& (0+255),w,b
  2708  000C88  26D9               	addwf	fsr2l,f,c
  2709  000C8A  519C               	movf	(time_difference@time2+1)& (0+255),w,b
  2710  000C8C  22DA               	addwfc	fsr2h,f,c
  2711  000C8E  50DF               	movf	indf2,w,c
  2712  000C90  6E6A               	movwf	??_time_difference& (0+255),c
  2713  000C92  506A               	movf	??_time_difference,w,c
  2714  000C94  0100               	movlb	0	; () banked
  2715  000C96  6F9F               	movwf	time_difference@hr2& (0+255),b
  2716  000C98  6BA0               	clrf	(time_difference@hr2+1)& (0+255),b
  2717  000C9A  0100               	movlb	0	; () banked
  2718  000C9C  EE20 F001          	lfsr	2,1
  2719  000CA0  5199               	movf	time_difference@time1& (0+255),w,b
  2720  000CA2  26D9               	addwf	fsr2l,f,c
  2721  000CA4  519A               	movf	(time_difference@time1+1)& (0+255),w,b
  2722  000CA6  22DA               	addwfc	fsr2h,f,c
  2723  000CA8  50DF               	movf	indf2,w,c
  2724  000CAA  6E6A               	movwf	??_time_difference& (0+255),c
  2725  000CAC  506A               	movf	??_time_difference,w,c
  2726  000CAE  0100               	movlb	0	; () banked
  2727  000CB0  6FA1               	movwf	time_difference@min1& (0+255),b
  2728  000CB2  6BA2               	clrf	(time_difference@min1+1)& (0+255),b
  2729  000CB4  0100               	movlb	0	; () banked
  2730  000CB6  EE20 F001          	lfsr	2,1
  2731  000CBA  519B               	movf	time_difference@time2& (0+255),w,b
  2732  000CBC  26D9               	addwf	fsr2l,f,c
  2733  000CBE  519C               	movf	(time_difference@time2+1)& (0+255),w,b
  2734  000CC0  22DA               	addwfc	fsr2h,f,c
  2735  000CC2  50DF               	movf	indf2,w,c
  2736  000CC4  6E6A               	movwf	??_time_difference& (0+255),c
  2737  000CC6  506A               	movf	??_time_difference,w,c
  2738  000CC8  0100               	movlb	0	; () banked
  2739  000CCA  6FA3               	movwf	time_difference@min2& (0+255),b
  2740  000CCC  6BA4               	clrf	(time_difference@min2+1)& (0+255),b
  2741                           
  2742                           ;main.c: 239: s1 = time1[0]; s2 = time2[0];
  2743  000CCE  C099  FFD9         	movff	time_difference@time1,fsr2l
  2744  000CD2  C09A  FFDA         	movff	time_difference@time1+1,fsr2h
  2745  000CD6  50DF               	movf	indf2,w,c
  2746  000CD8  6E6A               	movwf	??_time_difference& (0+255),c
  2747  000CDA  506A               	movf	??_time_difference,w,c
  2748  000CDC  0100               	movlb	0	; () banked
  2749  000CDE  6FA5               	movwf	time_difference@s1& (0+255),b
  2750  000CE0  6BA6               	clrf	(time_difference@s1+1)& (0+255),b
  2751  000CE2  C09B  FFD9         	movff	time_difference@time2,fsr2l
  2752  000CE6  C09C  FFDA         	movff	time_difference@time2+1,fsr2h
  2753  000CEA  50DF               	movf	indf2,w,c
  2754  000CEC  6E6A               	movwf	??_time_difference& (0+255),c
  2755  000CEE  506A               	movf	??_time_difference,w,c
  2756  000CF0  0100               	movlb	0	; () banked
  2757  000CF2  6FA7               	movwf	time_difference@s2& (0+255),b
  2758  000CF4  6BA8               	clrf	(time_difference@s2+1)& (0+255),b
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;main.c: 241: d1 = dec_to_hex(hr1) - dec_to_hex(hr2);
  2762  000CF6  C09D  F068         	movff	time_difference@hr1,dec_to_hex@num
  2763  000CFA  C09E  F069         	movff	time_difference@hr1+1,dec_to_hex@num+1
  2764  000CFE  EC87  F009         	call	_dec_to_hex	;wreg free
  2765  000D02  C068  F06A         	movff	?_dec_to_hex,??_time_difference
  2766  000D06  C069  F06B         	movff	?_dec_to_hex+1,??_time_difference+1
  2767  000D0A  C09F  F068         	movff	time_difference@hr2,dec_to_hex@num
  2768  000D0E  C0A0  F069         	movff	time_difference@hr2+1,dec_to_hex@num+1
  2769  000D12  EC87  F009         	call	_dec_to_hex	;wreg free
  2770  000D16  1E68               	comf	?_dec_to_hex,f,c
  2771  000D18  1E69               	comf	?_dec_to_hex+1,f,c
  2772  000D1A  4A68               	infsnz	?_dec_to_hex,f,c
  2773  000D1C  2A69               	incf	?_dec_to_hex+1,f,c
  2774  000D1E  5068               	movf	?_dec_to_hex,w,c
  2775  000D20  246A               	addwf	??_time_difference,w,c
  2776  000D22  0100               	movlb	0	; () banked
  2777  000D24  6FA9               	movwf	time_difference@d1& (0+255),b
  2778  000D26  5069               	movf	?_dec_to_hex+1,w,c
  2779  000D28  206B               	addwfc	??_time_difference+1,w,c
  2780  000D2A  0100               	movlb	0	; () banked
  2781  000D2C  6FAA               	movwf	(time_difference@d1+1)& (0+255),b
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;main.c: 242: d2 = dec_to_hex(min1) - dec_to_hex(min2);
  2785  000D2E  C0A1  F068         	movff	time_difference@min1,dec_to_hex@num
  2786  000D32  C0A2  F069         	movff	time_difference@min1+1,dec_to_hex@num+1
  2787  000D36  EC87  F009         	call	_dec_to_hex	;wreg free
  2788  000D3A  C068  F06A         	movff	?_dec_to_hex,??_time_difference
  2789  000D3E  C069  F06B         	movff	?_dec_to_hex+1,??_time_difference+1
  2790  000D42  C0A3  F068         	movff	time_difference@min2,dec_to_hex@num
  2791  000D46  C0A4  F069         	movff	time_difference@min2+1,dec_to_hex@num+1
  2792  000D4A  EC87  F009         	call	_dec_to_hex	;wreg free
  2793  000D4E  1E68               	comf	?_dec_to_hex,f,c
  2794  000D50  1E69               	comf	?_dec_to_hex+1,f,c
  2795  000D52  4A68               	infsnz	?_dec_to_hex,f,c
  2796  000D54  2A69               	incf	?_dec_to_hex+1,f,c
  2797  000D56  5068               	movf	?_dec_to_hex,w,c
  2798  000D58  246A               	addwf	??_time_difference,w,c
  2799  000D5A  0100               	movlb	0	; () banked
  2800  000D5C  6FAB               	movwf	time_difference@d2& (0+255),b
  2801  000D5E  5069               	movf	?_dec_to_hex+1,w,c
  2802  000D60  206B               	addwfc	??_time_difference+1,w,c
  2803  000D62  0100               	movlb	0	; () banked
  2804  000D64  6FAC               	movwf	(time_difference@d2+1)& (0+255),b
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;main.c: 243: d3 = dec_to_hex(s1) - dec_to_hex(s2);
  2808  000D66  C0A5  F068         	movff	time_difference@s1,dec_to_hex@num
  2809  000D6A  C0A6  F069         	movff	time_difference@s1+1,dec_to_hex@num+1
  2810  000D6E  EC87  F009         	call	_dec_to_hex	;wreg free
  2811  000D72  C068  F06A         	movff	?_dec_to_hex,??_time_difference
  2812  000D76  C069  F06B         	movff	?_dec_to_hex+1,??_time_difference+1
  2813  000D7A  C0A7  F068         	movff	time_difference@s2,dec_to_hex@num
  2814  000D7E  C0A8  F069         	movff	time_difference@s2+1,dec_to_hex@num+1
  2815  000D82  EC87  F009         	call	_dec_to_hex	;wreg free
  2816  000D86  1E68               	comf	?_dec_to_hex,f,c
  2817  000D88  1E69               	comf	?_dec_to_hex+1,f,c
  2818  000D8A  4A68               	infsnz	?_dec_to_hex,f,c
  2819  000D8C  2A69               	incf	?_dec_to_hex+1,f,c
  2820  000D8E  5068               	movf	?_dec_to_hex,w,c
  2821  000D90  246A               	addwf	??_time_difference,w,c
  2822  000D92  0100               	movlb	0	; () banked
  2823  000D94  6FAD               	movwf	time_difference@d3& (0+255),b
  2824  000D96  5069               	movf	?_dec_to_hex+1,w,c
  2825  000D98  206B               	addwfc	??_time_difference+1,w,c
  2826  000D9A  0100               	movlb	0	; () banked
  2827  000D9C  6FAE               	movwf	(time_difference@d3+1)& (0+255),b
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;main.c: 244: return 3600*d1 + 60*d2 + d3;
  2831  000D9E  C0A9  F011         	movff	time_difference@d1,___wmul@multiplier
  2832  000DA2  C0AA  F012         	movff	time_difference@d1+1,___wmul@multiplier+1
  2833  000DA6  0E0E               	movlw	14
  2834  000DA8  6E14               	movwf	___wmul@multiplicand+1,c
  2835  000DAA  0E10               	movlw	16
  2836  000DAC  6E13               	movwf	___wmul@multiplicand,c
  2837  000DAE  EC43  F011         	call	___wmul	;wreg free
  2838  000DB2  C011  F06A         	movff	?___wmul,??_time_difference
  2839  000DB6  C012  F06B         	movff	?___wmul+1,??_time_difference+1
  2840  000DBA  C0AB  F011         	movff	time_difference@d2,___wmul@multiplier
  2841  000DBE  C0AC  F012         	movff	time_difference@d2+1,___wmul@multiplier+1
  2842  000DC2  0E00               	movlw	0
  2843  000DC4  6E14               	movwf	___wmul@multiplicand+1,c
  2844  000DC6  0E3C               	movlw	60
  2845  000DC8  6E13               	movwf	___wmul@multiplicand,c
  2846  000DCA  EC43  F011         	call	___wmul	;wreg free
  2847  000DCE  5011               	movf	?___wmul,w,c
  2848  000DD0  266A               	addwf	??_time_difference,f,c
  2849  000DD2  5012               	movf	?___wmul+1,w,c
  2850  000DD4  226B               	addwfc	??_time_difference+1,f,c
  2851  000DD6  0100               	movlb	0	; () banked
  2852  000DD8  51AD               	movf	time_difference@d3& (0+255),w,b
  2853  000DDA  246A               	addwf	??_time_difference,w,c
  2854  000DDC  0100               	movlb	0	; () banked
  2855  000DDE  6F99               	movwf	?_time_difference& (0+255),b
  2856  000DE0  0100               	movlb	0	; () banked
  2857  000DE2  51AE               	movf	(time_difference@d3+1)& (0+255),w,b
  2858  000DE4  206B               	addwfc	??_time_difference+1,w,c
  2859  000DE6  0100               	movlb	0	; () banked
  2860  000DE8  6F9A               	movwf	(?_time_difference+1)& (0+255),b
  2861  000DEA  0012               	return	
  2862  000DEC                     __end_of_time_difference:
  2863                           	opt stack 0
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           prodh	equ	0xFF4
  2869                           prodl	equ	0xFF3
  2870                           intcon	equ	0xFF2
  2871                           intcon2	equ	0xFF1
  2872                           intcon3	equ	0xFF0
  2873                           postinc0	equ	0xFEE
  2874                           wreg	equ	0xFE8
  2875                           postdec1	equ	0xFE5
  2876                           fsr1l	equ	0xFE1
  2877                           indf2	equ	0xFDF
  2878                           fsr2h	equ	0xFDA
  2879                           fsr2l	equ	0xFD9
  2880                           status	equ	0xFD8
  2881                           
  2882 ;; *************** function _dec_to_hex *****************
  2883 ;; Defined at:
  2884 ;;		line 202 in file "main.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;  num             2  103[COMRAM] int 
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;  quotient        2   23[BANK0 ] int 
  2889 ;;  hexnum          2   21[BANK0 ] int 
  2890 ;;  i               2   19[BANK0 ] int 
  2891 ;;  temp            2   17[BANK0 ] int 
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  2  103[COMRAM] int 
  2894 ;; Registers used:
  2895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2901 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;      Totals:         2      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;Total ram usage:       16 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:    6
  2908 ;; This function calls:
  2909 ;;		___awdiv
  2910 ;;		___awtoft
  2911 ;;		___ftadd
  2912 ;;		___ftmul
  2913 ;;		___fttol
  2914 ;;		_pow
  2915 ;; This function is called by:
  2916 ;;		_time_difference
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text6
  2921  00130E                     __ptext6:
  2922                           	opt stack 0
  2923  00130E                     _dec_to_hex:
  2924                           	opt stack 22
  2925                           
  2926                           ;main.c: 203: int i = 0, quotient = num, temp, hexnum = 0;
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;incstack = 0
  2930  00130E  0E00               	movlw	0
  2931  001310  0100               	movlb	0	; () banked
  2932  001312  6F94               	movwf	(dec_to_hex@i+1)& (0+255),b
  2933  001314  0E00               	movlw	0
  2934  001316  6F93               	movwf	dec_to_hex@i& (0+255),b
  2935                           
  2936                           ; BSR set to: 0
  2937  001318  C068  F097         	movff	dec_to_hex@num,dec_to_hex@quotient
  2938  00131C  C069  F098         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  2939  001320  0E00               	movlw	0
  2940  001322  0100               	movlb	0	; () banked
  2941  001324  6F96               	movwf	(dec_to_hex@hexnum+1)& (0+255),b
  2942  001326  0E00               	movlw	0
  2943  001328  6F95               	movwf	dec_to_hex@hexnum& (0+255),b
  2944                           
  2945                           ;main.c: 205: while (quotient != 0) {
  2946  00132A  D06C               	goto	l3122
  2947  00132C                     l3110:
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;main.c: 206: temp = quotient % 16;
  2951  00132C  0E0F               	movlw	15
  2952  00132E  0100               	movlb	0	; () banked
  2953  001330  1597               	andwf	dec_to_hex@quotient& (0+255),w,b
  2954  001332  0100               	movlb	0	; () banked
  2955  001334  6F91               	movwf	dec_to_hex@temp& (0+255),b
  2956  001336  0100               	movlb	0	; () banked
  2957  001338  6B92               	clrf	(dec_to_hex@temp+1)& (0+255),b
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;main.c: 208: hexnum += temp*pow(10,i);
  2961  00133A  C093  F019         	movff	dec_to_hex@i,___awtoft@c
  2962  00133E  C094  F01A         	movff	dec_to_hex@i+1,___awtoft@c+1
  2963  001342  EC14  F011         	call	___awtoft	;wreg free
  2964  001346  C019  F08B         	movff	?___awtoft,_dec_to_hex$1420
  2965  00134A  C01A  F08C         	movff	?___awtoft+1,_dec_to_hex$1420+1
  2966  00134E  C01B  F08D         	movff	?___awtoft+2,_dec_to_hex$1420+2
  2967                           
  2968                           ;main.c: 208: hexnum += temp*pow(10,i);
  2969  001352  C08B  F065         	movff	_dec_to_hex$1420,pow@y
  2970  001356  C08C  F066         	movff	_dec_to_hex$1420+1,pow@y+1
  2971  00135A  C08D  F067         	movff	_dec_to_hex$1420+2,pow@y+2
  2972  00135E  0E00               	movlw	0
  2973  001360  6E62               	movwf	pow@x,c
  2974  001362  0E20               	movlw	32
  2975  001364  6E63               	movwf	pow@x+1,c
  2976  001366  0E41               	movlw	65
  2977  001368  6E64               	movwf	pow@x+2,c
  2978  00136A  ECF6  F006         	call	_pow	;wreg free
  2979  00136E  C062  F08E         	movff	?_pow,_dec_to_hex$1421
  2980  001372  C063  F08F         	movff	?_pow+1,_dec_to_hex$1421+1
  2981  001376  C064  F090         	movff	?_pow+2,_dec_to_hex$1421+2
  2982                           
  2983                           ;main.c: 208: hexnum += temp*pow(10,i);
  2984  00137A  C08E  F020         	movff	_dec_to_hex$1421,___ftmul@f2
  2985  00137E  C08F  F021         	movff	_dec_to_hex$1421+1,___ftmul@f2+1
  2986  001382  C090  F022         	movff	_dec_to_hex$1421+2,___ftmul@f2+2
  2987  001386  C091  F019         	movff	dec_to_hex@temp,___awtoft@c
  2988  00138A  C092  F01A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  2989  00138E  EC14  F011         	call	___awtoft	;wreg free
  2990  001392  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2991  001396  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2992  00139A  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2993  00139E  EC05  F00B         	call	___ftmul	;wreg free
  2994  0013A2  C01D  F02F         	movff	?___ftmul,___ftadd@f2
  2995  0013A6  C01E  F030         	movff	?___ftmul+1,___ftadd@f2+1
  2996  0013AA  C01F  F031         	movff	?___ftmul+2,___ftadd@f2+2
  2997  0013AE  C095  F019         	movff	dec_to_hex@hexnum,___awtoft@c
  2998  0013B2  C096  F01A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  2999  0013B6  EC14  F011         	call	___awtoft	;wreg free
  3000  0013BA  C019  F02C         	movff	?___awtoft,___ftadd@f1
  3001  0013BE  C01A  F02D         	movff	?___awtoft+1,___ftadd@f1+1
  3002  0013C2  C01B  F02E         	movff	?___awtoft+2,___ftadd@f1+2
  3003  0013C6  EC8E  F004         	call	___ftadd	;wreg free
  3004  0013CA  C02C  F038         	movff	?___ftadd,___fttol@f1
  3005  0013CE  C02D  F039         	movff	?___ftadd+1,___fttol@f1+1
  3006  0013D2  C02E  F03A         	movff	?___ftadd+2,___fttol@f1+2
  3007  0013D6  EC8B  F00A         	call	___fttol	;wreg free
  3008  0013DA  C038  F095         	movff	?___fttol,dec_to_hex@hexnum
  3009  0013DE  C039  F096         	movff	?___fttol+1,dec_to_hex@hexnum+1
  3010                           
  3011                           ;main.c: 210: quotient = quotient / 16;
  3012  0013E2  C097  F011         	movff	dec_to_hex@quotient,___awdiv@dividend
  3013  0013E6  C098  F012         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  3014  0013EA  0E00               	movlw	0
  3015  0013EC  6E14               	movwf	___awdiv@divisor+1,c
  3016  0013EE  0E10               	movlw	16
  3017  0013F0  6E13               	movwf	___awdiv@divisor,c
  3018  0013F2  EC89  F00E         	call	___awdiv	;wreg free
  3019  0013F6  C011  F097         	movff	?___awdiv,dec_to_hex@quotient
  3020  0013FA  C012  F098         	movff	?___awdiv+1,dec_to_hex@quotient+1
  3021                           
  3022                           ;main.c: 211: i += 1;
  3023  0013FE  0100               	movlb	0	; () banked
  3024  001400  4B93               	infsnz	dec_to_hex@i& (0+255),f,b
  3025  001402  2B94               	incf	(dec_to_hex@i+1)& (0+255),f,b
  3026  001404                     l3122:
  3027                           
  3028                           ; BSR set to: 0
  3029  001404  0100               	movlb	0	; () banked
  3030  001406  5197               	movf	dec_to_hex@quotient& (0+255),w,b
  3031  001408  0100               	movlb	0	; () banked
  3032  00140A  1198               	iorwf	(dec_to_hex@quotient+1)& (0+255),w,b
  3033  00140C  A4D8               	btfss	status,2,c
  3034  00140E  D78E               	goto	l3110
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;main.c: 212: }
  3038                           ;main.c: 213: return hexnum;
  3039  001410  C095  F068         	movff	dec_to_hex@hexnum,?_dec_to_hex
  3040  001414  C096  F069         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  3041                           
  3042                           ; BSR set to: 0
  3043  001418  0012               	return		;funcret
  3044  00141A                     __end_of_dec_to_hex:
  3045                           	opt stack 0
  3046                           tblptru	equ	0xFF8
  3047                           tblptrh	equ	0xFF7
  3048                           tblptrl	equ	0xFF6
  3049                           tablat	equ	0xFF5
  3050                           prodh	equ	0xFF4
  3051                           prodl	equ	0xFF3
  3052                           intcon	equ	0xFF2
  3053                           intcon2	equ	0xFF1
  3054                           intcon3	equ	0xFF0
  3055                           postinc0	equ	0xFEE
  3056                           wreg	equ	0xFE8
  3057                           postdec1	equ	0xFE5
  3058                           fsr1l	equ	0xFE1
  3059                           indf2	equ	0xFDF
  3060                           fsr2h	equ	0xFDA
  3061                           fsr2l	equ	0xFD9
  3062                           status	equ	0xFD8
  3063                           
  3064 ;; *************** function _pow *****************
  3065 ;; Defined at:
  3066 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;  x               3   97[COMRAM] int 
  3069 ;;  y               3  100[COMRAM] int 
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  yi              4    7[BANK0 ] unsigned long 
  3072 ;;  sign            1    6[BANK0 ] unsigned char 
  3073 ;; Return value:  Size  Location     Type
  3074 ;;                  3   97[COMRAM] unsigned char 
  3075 ;; Registers used:
  3076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3082 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;Total ram usage:       17 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; Hardware stack levels required when called:    5
  3089 ;; This function calls:
  3090 ;;		___ftge
  3091 ;;		___ftmul
  3092 ;;		___ftneg
  3093 ;;		___fttol
  3094 ;;		___lltoft
  3095 ;;		_exp
  3096 ;;		_log
  3097 ;; This function is called by:
  3098 ;;		_dec_to_hex
  3099 ;;		_hex_to_dec
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text7
  3104  000DEC                     __ptext7:
  3105                           	opt stack 0
  3106  000DEC                     _pow:
  3107                           	opt stack 22
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;incstack = 0
  3111  000DEC  0E00               	movlw	0
  3112  000DEE  0100               	movlb	0	; () banked
  3113  000DF0  6F86               	movwf	pow@sign& (0+255),b
  3114                           
  3115                           ; BSR set to: 0
  3116  000DF2  5062               	movf	pow@x,w,c
  3117  000DF4  1063               	iorwf	pow@x+1,w,c
  3118  000DF6  1064               	iorwf	pow@x+2,w,c
  3119  000DF8  A4D8               	btfss	status,2,c
  3120  000DFA  D01B               	goto	l2980
  3121                           
  3122                           ; BSR set to: 0
  3123  000DFC  0E00               	movlw	0
  3124  000DFE  6E11               	movwf	___ftge@ff1,c
  3125  000E00  0E00               	movlw	0
  3126  000E02  6E12               	movwf	___ftge@ff1+1,c
  3127  000E04  0E00               	movlw	0
  3128  000E06  6E13               	movwf	___ftge@ff1+2,c
  3129  000E08  C065  F014         	movff	pow@y,___ftge@ff2
  3130  000E0C  C066  F015         	movff	pow@y+1,___ftge@ff2+1
  3131  000E10  C067  F016         	movff	pow@y+2,___ftge@ff2+2
  3132  000E14  EC41  F00E         	call	___ftge	;wreg free
  3133  000E18  A0D8               	btfss	status,0,c
  3134  000E1A  D004               	goto	l844
  3135  000E1C  0E00               	movlw	0
  3136  000E1E  6E6E               	movwf	_errno+1,c
  3137  000E20  0E21               	movlw	33
  3138  000E22  6E6D               	movwf	_errno,c
  3139  000E24                     l844:
  3140  000E24  0E00               	movlw	0
  3141  000E26  6E62               	movwf	?_pow,c
  3142  000E28  0E00               	movlw	0
  3143  000E2A  6E63               	movwf	?_pow+1,c
  3144  000E2C  0E00               	movlw	0
  3145  000E2E  6E64               	movwf	?_pow+2,c
  3146  000E30  0012               	return	
  3147  000E32                     l2980:
  3148  000E32  5065               	movf	pow@y,w,c
  3149  000E34  1066               	iorwf	pow@y+1,w,c
  3150  000E36  1067               	iorwf	pow@y+2,w,c
  3151  000E38  A4D8               	btfss	status,2,c
  3152  000E3A  D007               	goto	l2986
  3153  000E3C  0E00               	movlw	0
  3154  000E3E  6E62               	movwf	?_pow,c
  3155  000E40  0E80               	movlw	128
  3156  000E42  6E63               	movwf	?_pow+1,c
  3157  000E44  0E3F               	movlw	63
  3158  000E46  6E64               	movwf	?_pow+2,c
  3159  000E48  0012               	return	
  3160  000E4A                     l2986:
  3161  000E4A  AE64               	btfss	pow@x+2,7,c
  3162  000E4C  D042               	goto	l2998
  3163  000E4E  C065  F038         	movff	pow@y,___fttol@f1
  3164  000E52  C066  F039         	movff	pow@y+1,___fttol@f1+1
  3165  000E56  C067  F03A         	movff	pow@y+2,___fttol@f1+2
  3166  000E5A  EC8B  F00A         	call	___fttol	;wreg free
  3167  000E5E  C038  F087         	movff	?___fttol,pow@yi
  3168  000E62  C039  F088         	movff	?___fttol+1,pow@yi+1
  3169  000E66  C03A  F089         	movff	?___fttol+2,pow@yi+2
  3170  000E6A  C03B  F08A         	movff	?___fttol+3,pow@yi+3
  3171  000E6E  C087  F019         	movff	pow@yi,___lltoft@c
  3172  000E72  C088  F01A         	movff	pow@yi+1,___lltoft@c+1
  3173  000E76  C089  F01B         	movff	pow@yi+2,___lltoft@c+2
  3174  000E7A  C08A  F01C         	movff	pow@yi+3,___lltoft@c+3
  3175  000E7E  EC81  F00F         	call	___lltoft	;wreg free
  3176  000E82  5065               	movf	pow@y,w,c
  3177  000E84  1819               	xorwf	?___lltoft,w,c
  3178  000E86  E107               	bnz	u2570
  3179  000E88  5066               	movf	pow@y+1,w,c
  3180  000E8A  181A               	xorwf	?___lltoft+1,w,c
  3181  000E8C  E104               	bnz	u2570
  3182  000E8E  5067               	movf	pow@y+2,w,c
  3183  000E90  181B               	xorwf	?___lltoft+2,w,c
  3184  000E92  B4D8               	btfsc	status,2,c
  3185  000E94  D00B               	goto	l2994
  3186  000E96                     u2570:
  3187  000E96  0E00               	movlw	0
  3188  000E98  6E6E               	movwf	_errno+1,c
  3189  000E9A  0E21               	movlw	33
  3190  000E9C  6E6D               	movwf	_errno,c
  3191  000E9E  0E00               	movlw	0
  3192  000EA0  6E62               	movwf	?_pow,c
  3193  000EA2  0E00               	movlw	0
  3194  000EA4  6E63               	movwf	?_pow+1,c
  3195  000EA6  0E00               	movlw	0
  3196  000EA8  6E64               	movwf	?_pow+2,c
  3197  000EAA  0012               	return	
  3198  000EAC                     l2994:
  3199  000EAC  0100               	movlb	0	; () banked
  3200  000EAE  5187               	movf	pow@yi& (0+255),w,b
  3201  000EB0  0B01               	andlw	1
  3202  000EB2  0100               	movlb	0	; () banked
  3203  000EB4  6F86               	movwf	pow@sign& (0+255),b
  3204                           
  3205                           ; BSR set to: 0
  3206  000EB6  C062  F011         	movff	pow@x,___ftneg@f1
  3207  000EBA  C063  F012         	movff	pow@x+1,___ftneg@f1+1
  3208  000EBE  C064  F013         	movff	pow@x+2,___ftneg@f1+2
  3209  000EC2  EC56  F011         	call	___ftneg	;wreg free
  3210  000EC6  C011  F062         	movff	?___ftneg,pow@x
  3211  000ECA  C012  F063         	movff	?___ftneg+1,pow@x+1
  3212  000ECE  C013  F064         	movff	?___ftneg+2,pow@x+2
  3213  000ED2                     l2998:
  3214  000ED2  C062  F044         	movff	pow@x,log@x
  3215  000ED6  C063  F045         	movff	pow@x+1,log@x+1
  3216  000EDA  C064  F046         	movff	pow@x+2,log@x+2
  3217  000EDE  ECFA  F008         	call	_log	;wreg free
  3218  000EE2  C044  F080         	movff	?_log,_pow$1424
  3219  000EE6  C045  F081         	movff	?_log+1,_pow$1424+1
  3220  000EEA  C046  F082         	movff	?_log+2,_pow$1424+2
  3221  000EEE  C080  F01D         	movff	_pow$1424,___ftmul@f1
  3222  000EF2  C081  F01E         	movff	_pow$1424+1,___ftmul@f1+1
  3223  000EF6  C082  F01F         	movff	_pow$1424+2,___ftmul@f1+2
  3224  000EFA  C065  F020         	movff	pow@y,___ftmul@f2
  3225  000EFE  C066  F021         	movff	pow@y+1,___ftmul@f2+1
  3226  000F02  C067  F022         	movff	pow@y+2,___ftmul@f2+2
  3227  000F06  EC05  F00B         	call	___ftmul	;wreg free
  3228  000F0A  C01D  F083         	movff	?___ftmul,_pow$1425
  3229  000F0E  C01E  F084         	movff	?___ftmul+1,_pow$1425+1
  3230  000F12  C01F  F085         	movff	?___ftmul+2,_pow$1425+2
  3231  000F16  C083  F059         	movff	_pow$1425,exp@x
  3232  000F1A  C084  F05A         	movff	_pow$1425+1,exp@x+1
  3233  000F1E  C085  F05B         	movff	_pow$1425+2,exp@x+2
  3234  000F22  EC9C  F003         	call	_exp	;wreg free
  3235  000F26  C059  F062         	movff	?_exp,pow@x
  3236  000F2A  C05A  F063         	movff	?_exp+1,pow@x+1
  3237  000F2E  C05B  F064         	movff	?_exp+2,pow@x+2
  3238  000F32  0100               	movlb	0	; () banked
  3239  000F34  5186               	movf	pow@sign& (0+255),w,b
  3240  000F36  0100               	movlb	0	; () banked
  3241  000F38  B4D8               	btfsc	status,2,c
  3242  000F3A  D00F               	goto	l849
  3243                           
  3244                           ; BSR set to: 0
  3245  000F3C  C062  F011         	movff	pow@x,___ftneg@f1
  3246  000F40  C063  F012         	movff	pow@x+1,___ftneg@f1+1
  3247  000F44  C064  F013         	movff	pow@x+2,___ftneg@f1+2
  3248  000F48  EC56  F011         	call	___ftneg	;wreg free
  3249  000F4C  C011  F062         	movff	?___ftneg,?_pow
  3250  000F50  C012  F063         	movff	?___ftneg+1,?_pow+1
  3251  000F54  C013  F064         	movff	?___ftneg+2,?_pow+2
  3252  000F58  0012               	return	
  3253  000F5A                     l849:
  3254                           
  3255                           ; BSR set to: 0
  3256  000F5A  C062  F062         	movff	pow@x,?_pow
  3257  000F5E  C063  F063         	movff	pow@x+1,?_pow+1
  3258  000F62  C064  F064         	movff	pow@x+2,?_pow+2
  3259  000F66  0012               	return		;funcret
  3260  000F68                     __end_of_pow:
  3261                           	opt stack 0
  3262                           tblptru	equ	0xFF8
  3263                           tblptrh	equ	0xFF7
  3264                           tblptrl	equ	0xFF6
  3265                           tablat	equ	0xFF5
  3266                           prodh	equ	0xFF4
  3267                           prodl	equ	0xFF3
  3268                           intcon	equ	0xFF2
  3269                           intcon2	equ	0xFF1
  3270                           intcon3	equ	0xFF0
  3271                           postinc0	equ	0xFEE
  3272                           wreg	equ	0xFE8
  3273                           postdec1	equ	0xFE5
  3274                           fsr1l	equ	0xFE1
  3275                           indf2	equ	0xFDF
  3276                           fsr2h	equ	0xFDA
  3277                           fsr2l	equ	0xFD9
  3278                           status	equ	0xFD8
  3279                           
  3280 ;; *************** function _log *****************
  3281 ;; Defined at:
  3282 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;  x               3   67[COMRAM] unsigned char 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  exponent        2   70[COMRAM] int 
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  3   67[COMRAM] int 
  3289 ;; Registers used:
  3290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3296 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3297 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3299 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3300 ;;Total ram usage:        5 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    4
  3303 ;; This function calls:
  3304 ;;		___awtoft
  3305 ;;		___ftadd
  3306 ;;		___ftmul
  3307 ;;		_eval_poly
  3308 ;;		_frexp
  3309 ;; This function is called by:
  3310 ;;		_pow
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text8
  3315  0011F4                     __ptext8:
  3316                           	opt stack 0
  3317  0011F4                     _log:
  3318                           	opt stack 22
  3319                           
  3320                           ;incstack = 0
  3321  0011F4  AE46               	btfss	log@x+2,7,c
  3322  0011F6  D00B               	goto	l2910
  3323  0011F8  0E00               	movlw	0
  3324  0011FA  6E6E               	movwf	_errno+1,c
  3325  0011FC  0E21               	movlw	33
  3326  0011FE  6E6D               	movwf	_errno,c
  3327  001200  0E00               	movlw	0
  3328  001202  6E44               	movwf	?_log,c
  3329  001204  0E00               	movlw	0
  3330  001206  6E45               	movwf	?_log+1,c
  3331  001208  0E00               	movlw	0
  3332  00120A  6E46               	movwf	?_log+2,c
  3333  00120C  0012               	return	
  3334  00120E                     l2910:
  3335  00120E  5044               	movf	log@x,w,c
  3336  001210  1045               	iorwf	log@x+1,w,c
  3337  001212  1046               	iorwf	log@x+2,w,c
  3338  001214  A4D8               	btfss	status,2,c
  3339  001216  D00B               	goto	l2916
  3340  001218  0E00               	movlw	0
  3341  00121A  6E6E               	movwf	_errno+1,c
  3342  00121C  0E22               	movlw	34
  3343  00121E  6E6D               	movwf	_errno,c
  3344  001220  0E00               	movlw	0
  3345  001222  6E44               	movwf	?_log,c
  3346  001224  0E00               	movlw	0
  3347  001226  6E45               	movwf	?_log+1,c
  3348  001228  0E00               	movlw	0
  3349  00122A  6E46               	movwf	?_log+2,c
  3350  00122C  0012               	return	
  3351  00122E                     l2916:
  3352  00122E  0E00               	movlw	0
  3353  001230  6E20               	movwf	___ftmul@f2,c
  3354  001232  0E00               	movlw	0
  3355  001234  6E21               	movwf	___ftmul@f2+1,c
  3356  001236  0E40               	movlw	64
  3357  001238  6E22               	movwf	___ftmul@f2+2,c
  3358  00123A  0E47               	movlw	low log@exponent
  3359  00123C  6E14               	movwf	frexp@eptr,c
  3360  00123E  0E00               	movlw	high log@exponent
  3361  001240  6E15               	movwf	frexp@eptr+1,c
  3362  001242  C044  F011         	movff	log@x,frexp@value
  3363  001246  C045  F012         	movff	log@x+1,frexp@value+1
  3364  00124A  C046  F013         	movff	log@x+2,frexp@value+2
  3365  00124E  ECF9  F00D         	call	_frexp	;wreg free
  3366  001252  C011  F01D         	movff	?_frexp,___ftmul@f1
  3367  001256  C012  F01E         	movff	?_frexp+1,___ftmul@f1+1
  3368  00125A  C013  F01F         	movff	?_frexp+2,___ftmul@f1+2
  3369  00125E  EC05  F00B         	call	___ftmul	;wreg free
  3370  001262  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  3371  001266  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  3372  00126A  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  3373  00126E  0E00               	movlw	0
  3374  001270  6E2F               	movwf	___ftadd@f2,c
  3375  001272  0E80               	movlw	128
  3376  001274  6E30               	movwf	___ftadd@f2+1,c
  3377  001276  0EBF               	movlw	191
  3378  001278  6E31               	movwf	___ftadd@f2+2,c
  3379  00127A  EC8E  F004         	call	___ftadd	;wreg free
  3380  00127E  C02C  F044         	movff	?___ftadd,log@x
  3381  001282  C02D  F045         	movff	?___ftadd+1,log@x+1
  3382  001286  C02E  F046         	movff	?___ftadd+2,log@x+2
  3383  00128A  0647               	decf	log@exponent,f,c
  3384  00128C  A0D8               	btfss	status,0,c
  3385  00128E  0648               	decf	log@exponent+1,f,c
  3386  001290  C044  F038         	movff	log@x,eval_poly@x
  3387  001294  C045  F039         	movff	log@x+1,eval_poly@x+1
  3388  001298  C046  F03A         	movff	log@x+2,eval_poly@x+2
  3389  00129C  0EB7               	movlw	low log@coeff
  3390  00129E  6E3B               	movwf	eval_poly@d,c
  3391  0012A0  0EFE               	movlw	high log@coeff
  3392  0012A2  6E3C               	movwf	eval_poly@d+1,c
  3393  0012A4  0E00               	movlw	0
  3394  0012A6  6E3E               	movwf	eval_poly@n+1,c
  3395  0012A8  0E08               	movlw	8
  3396  0012AA  6E3D               	movwf	eval_poly@n,c
  3397  0012AC  ECD8  F00C         	call	_eval_poly	;wreg free
  3398  0012B0  C038  F044         	movff	?_eval_poly,log@x
  3399  0012B4  C039  F045         	movff	?_eval_poly+1,log@x+1
  3400  0012B8  C03A  F046         	movff	?_eval_poly+2,log@x+2
  3401  0012BC  0E72               	movlw	114
  3402  0012BE  6E20               	movwf	___ftmul@f2,c
  3403  0012C0  0E31               	movlw	49
  3404  0012C2  6E21               	movwf	___ftmul@f2+1,c
  3405  0012C4  0E3F               	movlw	63
  3406  0012C6  6E22               	movwf	___ftmul@f2+2,c
  3407  0012C8  C047  F019         	movff	log@exponent,___awtoft@c
  3408  0012CC  C048  F01A         	movff	log@exponent+1,___awtoft@c+1
  3409  0012D0  EC14  F011         	call	___awtoft	;wreg free
  3410  0012D4  C019  F01D         	movff	?___awtoft,___ftmul@f1
  3411  0012D8  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  3412  0012DC  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  3413  0012E0  EC05  F00B         	call	___ftmul	;wreg free
  3414  0012E4  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  3415  0012E8  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  3416  0012EC  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  3417  0012F0  C044  F02F         	movff	log@x,___ftadd@f2
  3418  0012F4  C045  F030         	movff	log@x+1,___ftadd@f2+1
  3419  0012F8  C046  F031         	movff	log@x+2,___ftadd@f2+2
  3420  0012FC  EC8E  F004         	call	___ftadd	;wreg free
  3421  001300  C02C  F044         	movff	?___ftadd,?_log
  3422  001304  C02D  F045         	movff	?___ftadd+1,?_log+1
  3423  001308  C02E  F046         	movff	?___ftadd+2,?_log+2
  3424  00130C  0012               	return	
  3425  00130E                     __end_of_log:
  3426                           	opt stack 0
  3427                           tblptru	equ	0xFF8
  3428                           tblptrh	equ	0xFF7
  3429                           tblptrl	equ	0xFF6
  3430                           tablat	equ	0xFF5
  3431                           prodh	equ	0xFF4
  3432                           prodl	equ	0xFF3
  3433                           intcon	equ	0xFF2
  3434                           intcon2	equ	0xFF1
  3435                           intcon3	equ	0xFF0
  3436                           postinc0	equ	0xFEE
  3437                           wreg	equ	0xFE8
  3438                           postdec1	equ	0xFE5
  3439                           fsr1l	equ	0xFE1
  3440                           indf2	equ	0xFDF
  3441                           fsr2h	equ	0xFDA
  3442                           fsr2l	equ	0xFD9
  3443                           status	equ	0xFD8
  3444                           
  3445 ;; *************** function _exp *****************
  3446 ;; Defined at:
  3447 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  x               3   88[COMRAM] int 
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;  exponent        2   94[COMRAM] int 
  3452 ;;  sign            1   96[COMRAM] unsigned char 
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  3   88[COMRAM] unsigned char 
  3455 ;; Registers used:
  3456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3462 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3463 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;Total ram usage:        9 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    4
  3469 ;; This function calls:
  3470 ;;		___awtoft
  3471 ;;		___ftdiv
  3472 ;;		___ftge
  3473 ;;		___ftmul
  3474 ;;		___ftneg
  3475 ;;		___ftsub
  3476 ;;		___fttol
  3477 ;;		_eval_poly
  3478 ;;		_floor
  3479 ;;		_ldexp
  3480 ;; This function is called by:
  3481 ;;		_pow
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           	psect	text9
  3486  000738                     __ptext9:
  3487                           	opt stack 0
  3488  000738                     _exp:
  3489                           	opt stack 22
  3490                           
  3491                           ;incstack = 0
  3492  000738  5059               	movf	exp@x,w,c
  3493  00073A  105A               	iorwf	exp@x+1,w,c
  3494  00073C  105B               	iorwf	exp@x+2,w,c
  3495  00073E  A4D8               	btfss	status,2,c
  3496  000740  D007               	goto	l2932
  3497  000742  0E00               	movlw	0
  3498  000744  6E59               	movwf	?_exp,c
  3499  000746  0E80               	movlw	128
  3500  000748  6E5A               	movwf	?_exp+1,c
  3501  00074A  0E3F               	movlw	63
  3502  00074C  6E5B               	movwf	?_exp+2,c
  3503  00074E  0012               	return	
  3504  000750                     l2932:
  3505  000750  0E72               	movlw	114
  3506  000752  6E11               	movwf	___ftge@ff1,c
  3507  000754  0E31               	movlw	49
  3508  000756  6E12               	movwf	___ftge@ff1+1,c
  3509  000758  0E44               	movlw	68
  3510  00075A  6E13               	movwf	___ftge@ff1+2,c
  3511  00075C  C059  F014         	movff	exp@x,___ftge@ff2
  3512  000760  C05A  F015         	movff	exp@x+1,___ftge@ff2+1
  3513  000764  C05B  F016         	movff	exp@x+2,___ftge@ff2+2
  3514  000768  EC41  F00E         	call	___ftge	;wreg free
  3515  00076C  B0D8               	btfsc	status,0,c
  3516  00076E  D00B               	goto	l2938
  3517  000770  0E00               	movlw	0
  3518  000772  6E6E               	movwf	_errno+1,c
  3519  000774  0E22               	movlw	34
  3520  000776  6E6D               	movwf	_errno,c
  3521  000778  0EFF               	movlw	255
  3522  00077A  6E59               	movwf	?_exp,c
  3523  00077C  0E7F               	movlw	127
  3524  00077E  6E5A               	movwf	?_exp+1,c
  3525  000780  0E7F               	movlw	127
  3526  000782  6E5B               	movwf	?_exp+2,c
  3527  000784  0012               	return	
  3528  000786                     l2938:
  3529  000786  C059  F011         	movff	exp@x,___ftge@ff1
  3530  00078A  C05A  F012         	movff	exp@x+1,___ftge@ff1+1
  3531  00078E  C05B  F013         	movff	exp@x+2,___ftge@ff1+2
  3532  000792  0E49               	movlw	73
  3533  000794  6E14               	movwf	___ftge@ff2,c
  3534  000796  0E3A               	movlw	58
  3535  000798  6E15               	movwf	___ftge@ff2+1,c
  3536  00079A  0EC4               	movlw	196
  3537  00079C  6E16               	movwf	___ftge@ff2+2,c
  3538  00079E  EC41  F00E         	call	___ftge	;wreg free
  3539  0007A2  B0D8               	btfsc	status,0,c
  3540  0007A4  D00B               	goto	l2944
  3541  0007A6  0E00               	movlw	0
  3542  0007A8  6E6E               	movwf	_errno+1,c
  3543  0007AA  0E22               	movlw	34
  3544  0007AC  6E6D               	movwf	_errno,c
  3545  0007AE  0E00               	movlw	0
  3546  0007B0  6E59               	movwf	?_exp,c
  3547  0007B2  0E00               	movlw	0
  3548  0007B4  6E5A               	movwf	?_exp+1,c
  3549  0007B6  0E00               	movlw	0
  3550  0007B8  6E5B               	movwf	?_exp+2,c
  3551  0007BA  0012               	return	
  3552  0007BC                     l2944:
  3553  0007BC  AE5B               	btfss	exp@x+2,7,c
  3554  0007BE  D002               	goto	u2480
  3555  0007C0  0E01               	movlw	1
  3556  0007C2  D001               	goto	u2490
  3557  0007C4                     u2480:
  3558  0007C4  0E00               	movlw	0
  3559  0007C6                     u2490:
  3560  0007C6  6E61               	movwf	exp@sign,c
  3561  0007C8  5061               	movf	exp@sign,w,c
  3562  0007CA  B4D8               	btfsc	status,2,c
  3563  0007CC  D00E               	goto	l1007
  3564  0007CE  C059  F011         	movff	exp@x,___ftneg@f1
  3565  0007D2  C05A  F012         	movff	exp@x+1,___ftneg@f1+1
  3566  0007D6  C05B  F013         	movff	exp@x+2,___ftneg@f1+2
  3567  0007DA  EC56  F011         	call	___ftneg	;wreg free
  3568  0007DE  C011  F059         	movff	?___ftneg,exp@x
  3569  0007E2  C012  F05A         	movff	?___ftneg+1,exp@x+1
  3570  0007E6  C013  F05B         	movff	?___ftneg+2,exp@x+2
  3571  0007EA                     l1007:
  3572  0007EA  C059  F01D         	movff	exp@x,___ftmul@f1
  3573  0007EE  C05A  F01E         	movff	exp@x+1,___ftmul@f1+1
  3574  0007F2  C05B  F01F         	movff	exp@x+2,___ftmul@f1+2
  3575  0007F6  0EAA               	movlw	170
  3576  0007F8  6E20               	movwf	___ftmul@f2,c
  3577  0007FA  0EB8               	movlw	184
  3578  0007FC  6E21               	movwf	___ftmul@f2+1,c
  3579  0007FE  0E3F               	movlw	63
  3580  000800  6E22               	movwf	___ftmul@f2+2,c
  3581  000802  EC05  F00B         	call	___ftmul	;wreg free
  3582  000806  C01D  F059         	movff	?___ftmul,exp@x
  3583  00080A  C01E  F05A         	movff	?___ftmul+1,exp@x+1
  3584  00080E  C01F  F05B         	movff	?___ftmul+2,exp@x+2
  3585  000812  C059  F051         	movff	exp@x,floor@x
  3586  000816  C05A  F052         	movff	exp@x+1,floor@x+1
  3587  00081A  C05B  F053         	movff	exp@x+2,floor@x+2
  3588  00081E  EC69  F00C         	call	_floor	;wreg free
  3589  000822  C051  F05C         	movff	?_floor,_exp$1426
  3590  000826  C052  F05D         	movff	?_floor+1,_exp$1426+1
  3591  00082A  C053  F05E         	movff	?_floor+2,_exp$1426+2
  3592  00082E  C05C  F038         	movff	_exp$1426,___fttol@f1
  3593  000832  C05D  F039         	movff	_exp$1426+1,___fttol@f1+1
  3594  000836  C05E  F03A         	movff	_exp$1426+2,___fttol@f1+2
  3595  00083A  EC8B  F00A         	call	___fttol	;wreg free
  3596  00083E  C038  F05F         	movff	?___fttol,exp@exponent
  3597  000842  C039  F060         	movff	?___fttol+1,exp@exponent+1
  3598  000846  C059  F038         	movff	exp@x,___ftsub@f1
  3599  00084A  C05A  F039         	movff	exp@x+1,___ftsub@f1+1
  3600  00084E  C05B  F03A         	movff	exp@x+2,___ftsub@f1+2
  3601  000852  C05F  F019         	movff	exp@exponent,___awtoft@c
  3602  000856  C060  F01A         	movff	exp@exponent+1,___awtoft@c+1
  3603  00085A  EC14  F011         	call	___awtoft	;wreg free
  3604  00085E  C019  F03B         	movff	?___awtoft,___ftsub@f2
  3605  000862  C01A  F03C         	movff	?___awtoft+1,___ftsub@f2+1
  3606  000866  C01B  F03D         	movff	?___awtoft+2,___ftsub@f2+2
  3607  00086A  ECD8  F010         	call	___ftsub	;wreg free
  3608  00086E  C038  F059         	movff	?___ftsub,exp@x
  3609  000872  C039  F05A         	movff	?___ftsub+1,exp@x+1
  3610  000876  C03A  F05B         	movff	?___ftsub+2,exp@x+2
  3611  00087A  C059  F038         	movff	exp@x,eval_poly@x
  3612  00087E  C05A  F039         	movff	exp@x+1,eval_poly@x+1
  3613  000882  C05B  F03A         	movff	exp@x+2,eval_poly@x+2
  3614  000886  0E99               	movlw	low exp@coeff
  3615  000888  6E3B               	movwf	eval_poly@d,c
  3616  00088A  0EFE               	movlw	high exp@coeff
  3617  00088C  6E3C               	movwf	eval_poly@d+1,c
  3618  00088E  0E00               	movlw	0
  3619  000890  6E3E               	movwf	eval_poly@n+1,c
  3620  000892  0E09               	movlw	9
  3621  000894  6E3D               	movwf	eval_poly@n,c
  3622  000896  ECD8  F00C         	call	_eval_poly	;wreg free
  3623  00089A  C038  F044         	movff	?_eval_poly,ldexp@value
  3624  00089E  C039  F045         	movff	?_eval_poly+1,ldexp@value+1
  3625  0008A2  C03A  F046         	movff	?_eval_poly+2,ldexp@value+2
  3626  0008A6  C05F  F047         	movff	exp@exponent,ldexp@newexp
  3627  0008AA  C060  F048         	movff	exp@exponent+1,ldexp@newexp+1
  3628  0008AE  EC41  F00D         	call	_ldexp	;wreg free
  3629  0008B2  C044  F059         	movff	?_ldexp,exp@x
  3630  0008B6  C045  F05A         	movff	?_ldexp+1,exp@x+1
  3631  0008BA  C046  F05B         	movff	?_ldexp+2,exp@x+2
  3632  0008BE  5061               	movf	exp@sign,w,c
  3633  0008C0  B4D8               	btfsc	status,2,c
  3634  0008C2  D025               	goto	l1008
  3635  0008C4  2859               	incf	exp@x,w,c
  3636  0008C6  E10E               	bnz	l2966
  3637  0008C8  0E7F               	movlw	127
  3638  0008CA  185A               	xorwf	exp@x+1,w,c
  3639  0008CC  E10B               	bnz	l2966
  3640  0008CE  0E7F               	movlw	127
  3641  0008D0  185B               	xorwf	exp@x+2,w,c
  3642  0008D2  A4D8               	btfss	status,2,c
  3643  0008D4  D007               	goto	l2966
  3644  0008D6  0E00               	movlw	0
  3645  0008D8  6E59               	movwf	?_exp,c
  3646  0008DA  0E00               	movlw	0
  3647  0008DC  6E5A               	movwf	?_exp+1,c
  3648  0008DE  0E00               	movlw	0
  3649  0008E0  6E5B               	movwf	?_exp+2,c
  3650  0008E2  0012               	return	
  3651  0008E4                     l2966:
  3652  0008E4  0E00               	movlw	0
  3653  0008E6  6E19               	movwf	___ftdiv@f1,c
  3654  0008E8  0E80               	movlw	128
  3655  0008EA  6E1A               	movwf	___ftdiv@f1+1,c
  3656  0008EC  0E3F               	movlw	63
  3657  0008EE  6E1B               	movwf	___ftdiv@f1+2,c
  3658  0008F0  C059  F01C         	movff	exp@x,___ftdiv@f2
  3659  0008F4  C05A  F01D         	movff	exp@x+1,___ftdiv@f2+1
  3660  0008F8  C05B  F01E         	movff	exp@x+2,___ftdiv@f2+2
  3661  0008FC  ECF6  F00B         	call	___ftdiv	;wreg free
  3662  000900  C019  F059         	movff	?___ftdiv,?_exp
  3663  000904  C01A  F05A         	movff	?___ftdiv+1,?_exp+1
  3664  000908  C01B  F05B         	movff	?___ftdiv+2,?_exp+2
  3665  00090C  0012               	return	
  3666  00090E                     l1008:
  3667  00090E  C059  F059         	movff	exp@x,?_exp
  3668  000912  C05A  F05A         	movff	exp@x+1,?_exp+1
  3669  000916  C05B  F05B         	movff	exp@x+2,?_exp+2
  3670  00091A  0012               	return		;funcret
  3671  00091C                     __end_of_exp:
  3672                           	opt stack 0
  3673                           tblptru	equ	0xFF8
  3674                           tblptrh	equ	0xFF7
  3675                           tblptrl	equ	0xFF6
  3676                           tablat	equ	0xFF5
  3677                           prodh	equ	0xFF4
  3678                           prodl	equ	0xFF3
  3679                           intcon	equ	0xFF2
  3680                           intcon2	equ	0xFF1
  3681                           intcon3	equ	0xFF0
  3682                           postinc0	equ	0xFEE
  3683                           wreg	equ	0xFE8
  3684                           postdec1	equ	0xFE5
  3685                           fsr1l	equ	0xFE1
  3686                           indf2	equ	0xFDF
  3687                           fsr2h	equ	0xFDA
  3688                           fsr2l	equ	0xFD9
  3689                           status	equ	0xFD8
  3690                           
  3691 ;; *************** function _ldexp *****************
  3692 ;; Defined at:
  3693 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;  value           3   67[COMRAM] unsigned char 
  3696 ;;  newexp          2   70[COMRAM] int 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;		None
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  3   67[COMRAM] int 
  3701 ;; Registers used:
  3702 ;;		wreg, status,2, status,0
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3708 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3711 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;Total ram usage:        7 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    1
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_exp
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text10
  3723  001A82                     __ptext10:
  3724                           	opt stack 0
  3725  001A82                     _ldexp:
  3726                           	opt stack 24
  3727                           
  3728                           ;incstack = 0
  3729  001A82  5044               	movf	ldexp@value,w,c
  3730  001A84  1045               	iorwf	ldexp@value+1,w,c
  3731  001A86  1046               	iorwf	ldexp@value+2,w,c
  3732  001A88  A4D8               	btfss	status,2,c
  3733  001A8A  D007               	goto	l2864
  3734  001A8C  0E00               	movlw	0
  3735  001A8E  6E44               	movwf	?_ldexp,c
  3736  001A90  0E00               	movlw	0
  3737  001A92  6E45               	movwf	?_ldexp+1,c
  3738  001A94  0E00               	movlw	0
  3739  001A96  6E46               	movwf	?_ldexp+2,c
  3740  001A98  0012               	return	
  3741  001A9A                     l2864:
  3742  001A9A  5046               	movf	ldexp@value+2,w,c
  3743  001A9C  0B7F               	andlw	127
  3744  001A9E  6E49               	movwf	??_ldexp& (0+255),c
  3745  001AA0  6A4A               	clrf	(??_ldexp+1)& (0+255),c
  3746  001AA2  90D8               	bcf	status,0,c
  3747  001AA4  3649               	rlcf	??_ldexp,f,c
  3748  001AA6  364A               	rlcf	??_ldexp+1,f,c
  3749  001AA8  5049               	movf	??_ldexp,w,c
  3750  001AAA  2647               	addwf	ldexp@newexp,f,c
  3751  001AAC  504A               	movf	??_ldexp+1,w,c
  3752  001AAE  2248               	addwfc	ldexp@newexp+1,f,c
  3753  001AB0  AE45               	btfss	ldexp@value+1,7,c
  3754  001AB2  D003               	goto	u2380
  3755  001AB4  6A49               	clrf	??_ldexp& (0+255),c
  3756  001AB6  2A49               	incf	??_ldexp& (0+255),f,c
  3757  001AB8  D001               	goto	u2388
  3758  001ABA                     u2380:
  3759  001ABA  6A49               	clrf	??_ldexp& (0+255),c
  3760  001ABC                     u2388:
  3761  001ABC  5049               	movf	??_ldexp,w,c
  3762  001ABE  2647               	addwf	ldexp@newexp,f,c
  3763  001AC0  0E00               	movlw	0
  3764  001AC2  2248               	addwfc	ldexp@newexp+1,f,c
  3765  001AC4  AE48               	btfss	ldexp@newexp+1,7,c
  3766  001AC6  D00B               	goto	l2872
  3767  001AC8  0E00               	movlw	0
  3768  001ACA  6E6E               	movwf	_errno+1,c
  3769  001ACC  0E22               	movlw	34
  3770  001ACE  6E6D               	movwf	_errno,c
  3771  001AD0  0E00               	movlw	0
  3772  001AD2  6E44               	movwf	?_ldexp,c
  3773  001AD4  0E00               	movlw	0
  3774  001AD6  6E45               	movwf	?_ldexp+1,c
  3775  001AD8  0E00               	movlw	0
  3776  001ADA                     L5:
  3777  001ADA  6E46               	movwf	?_ldexp+2,c
  3778  001ADC  0012               	return	
  3779  001ADE                     l2872:
  3780  001ADE  BE48               	btfsc	ldexp@newexp+1,7,c
  3781  001AE0  D015               	goto	l2888
  3782  001AE2  0448               	decf	ldexp@newexp+1,w,c
  3783  001AE4  A0D8               	btfss	status,0,c
  3784  001AE6  D012               	goto	l2888
  3785  001AE8  0E00               	movlw	0
  3786  001AEA  6E6E               	movwf	_errno+1,c
  3787  001AEC  0E22               	movlw	34
  3788  001AEE  6E6D               	movwf	_errno,c
  3789  001AF0  AE46               	btfss	ldexp@value+2,7,c
  3790  001AF2  D006               	goto	l2884
  3791  001AF4  0EFF               	movlw	255
  3792  001AF6  6E44               	movwf	?_ldexp,c
  3793  001AF8  0E7F               	movlw	127
  3794  001AFA  6E45               	movwf	?_ldexp+1,c
  3795  001AFC  0EFF               	movlw	255
  3796  001AFE  D7ED               	goto	L5
  3797  001B00                     l2884:
  3798  001B00  0EFF               	movlw	255
  3799  001B02  6E44               	movwf	?_ldexp,c
  3800  001B04  0E7F               	movlw	127
  3801  001B06  6E45               	movwf	?_ldexp+1,c
  3802  001B08  0E7F               	movlw	127
  3803  001B0A  D7E7               	goto	L5
  3804  001B0C                     l2888:
  3805  001B0C  3448               	rlcf	ldexp@newexp+1,w,c
  3806  001B0E  3048               	rrcf	ldexp@newexp+1,w,c
  3807  001B10  6E4A               	movwf	(??_ldexp+1)& (0+255),c
  3808  001B12  3047               	rrcf	ldexp@newexp,w,c
  3809  001B14  6E49               	movwf	??_ldexp& (0+255),c
  3810  001B16  5046               	movf	ldexp@value+2,w,c
  3811  001B18  1849               	xorwf	??_ldexp,w,c
  3812  001B1A  0B80               	andlw	-128
  3813  001B1C  1849               	xorwf	??_ldexp,w,c
  3814  001B1E  6E46               	movwf	ldexp@value+2,c
  3815  001B20  C047  F049         	movff	ldexp@newexp,??_ldexp
  3816  001B24  0E01               	movlw	1
  3817  001B26  1649               	andwf	??_ldexp,f,c
  3818  001B28  3249               	rrcf	??_ldexp,f,c
  3819  001B2A  3249               	rrcf	??_ldexp,f,c
  3820  001B2C  5045               	movf	ldexp@value+1,w,c
  3821  001B2E  1849               	xorwf	??_ldexp,w,c
  3822  001B30  0B7F               	andlw	-129
  3823  001B32  1849               	xorwf	??_ldexp,w,c
  3824  001B34  6E45               	movwf	ldexp@value+1,c
  3825  001B36  C044  F044         	movff	ldexp@value,?_ldexp
  3826  001B3A  C045  F045         	movff	ldexp@value+1,?_ldexp+1
  3827  001B3E  C046  F046         	movff	ldexp@value+2,?_ldexp+2
  3828  001B42  0012               	return	
  3829  001B44                     __end_of_ldexp:
  3830                           	opt stack 0
  3831                           tblptru	equ	0xFF8
  3832                           tblptrh	equ	0xFF7
  3833                           tblptrl	equ	0xFF6
  3834                           tablat	equ	0xFF5
  3835                           prodh	equ	0xFF4
  3836                           prodl	equ	0xFF3
  3837                           intcon	equ	0xFF2
  3838                           intcon2	equ	0xFF1
  3839                           intcon3	equ	0xFF0
  3840                           postinc0	equ	0xFEE
  3841                           wreg	equ	0xFE8
  3842                           postdec1	equ	0xFE5
  3843                           fsr1l	equ	0xFE1
  3844                           indf2	equ	0xFDF
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _floor *****************
  3850 ;; Defined at:
  3851 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  x               3   80[COMRAM] int 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  i               3   83[COMRAM] int 
  3856 ;;  expon           2   86[COMRAM] int 
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  3   80[COMRAM] int 
  3859 ;; Registers used:
  3860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3866 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;Total ram usage:        8 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    3
  3873 ;; This function calls:
  3874 ;;		___altoft
  3875 ;;		___ftadd
  3876 ;;		___ftge
  3877 ;;		___fttol
  3878 ;;		_frexp
  3879 ;; This function is called by:
  3880 ;;		_exp
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           	psect	text11
  3885  0018D2                     __ptext11:
  3886                           	opt stack 0
  3887  0018D2                     _floor:
  3888                           	opt stack 22
  3889                           
  3890                           ;incstack = 0
  3891  0018D2  C051  F011         	movff	floor@x,frexp@value
  3892  0018D6  C052  F012         	movff	floor@x+1,frexp@value+1
  3893  0018DA  C053  F013         	movff	floor@x+2,frexp@value+2
  3894  0018DE  0E57               	movlw	low floor@expon
  3895  0018E0  6E14               	movwf	frexp@eptr,c
  3896  0018E2  0E00               	movlw	high floor@expon
  3897  0018E4  6E15               	movwf	frexp@eptr+1,c
  3898  0018E6  ECF9  F00D         	call	_frexp	;wreg free
  3899  0018EA  AE58               	btfss	floor@expon+1,7,c
  3900  0018EC  D010               	goto	l2842
  3901  0018EE  AE53               	btfss	floor@x+2,7,c
  3902  0018F0  D007               	goto	l2838
  3903  0018F2  0E00               	movlw	0
  3904  0018F4  6E51               	movwf	?_floor,c
  3905  0018F6  0E80               	movlw	128
  3906  0018F8  6E52               	movwf	?_floor+1,c
  3907  0018FA  0EBF               	movlw	191
  3908  0018FC  6E53               	movwf	?_floor+2,c
  3909  0018FE  0012               	return	
  3910  001900                     l2838:
  3911  001900  0E00               	movlw	0
  3912  001902  6E51               	movwf	?_floor,c
  3913  001904  0E00               	movlw	0
  3914  001906  6E52               	movwf	?_floor+1,c
  3915  001908  0E00               	movlw	0
  3916  00190A  6E53               	movwf	?_floor+2,c
  3917  00190C  0012               	return	
  3918  00190E                     l2842:
  3919  00190E  5058               	movf	floor@expon+1,w,c
  3920  001910  E104               	bnz	u2340
  3921  001912  0E15               	movlw	21
  3922  001914  5C57               	subwf	floor@expon,w,c
  3923  001916  A0D8               	btfss	status,0,c
  3924  001918  D007               	goto	l2846
  3925  00191A                     u2340:
  3926  00191A  C051  F051         	movff	floor@x,?_floor
  3927  00191E  C052  F052         	movff	floor@x+1,?_floor+1
  3928  001922  C053  F053         	movff	floor@x+2,?_floor+2
  3929  001926  0012               	return	
  3930  001928                     l2846:
  3931  001928  C051  F038         	movff	floor@x,___fttol@f1
  3932  00192C  C052  F039         	movff	floor@x+1,___fttol@f1+1
  3933  001930  C053  F03A         	movff	floor@x+2,___fttol@f1+2
  3934  001934  EC8B  F00A         	call	___fttol	;wreg free
  3935  001938  C038  F047         	movff	?___fttol,___altoft@c
  3936  00193C  C039  F048         	movff	?___fttol+1,___altoft@c+1
  3937  001940  C03A  F049         	movff	?___fttol+2,___altoft@c+2
  3938  001944  C03B  F04A         	movff	?___fttol+3,___altoft@c+3
  3939  001948  EC0C  F00F         	call	___altoft	;wreg free
  3940  00194C  C047  F054         	movff	?___altoft,floor@i
  3941  001950  C048  F055         	movff	?___altoft+1,floor@i+1
  3942  001954  C049  F056         	movff	?___altoft+2,floor@i+2
  3943  001958  C051  F011         	movff	floor@x,___ftge@ff1
  3944  00195C  C052  F012         	movff	floor@x+1,___ftge@ff1+1
  3945  001960  C053  F013         	movff	floor@x+2,___ftge@ff1+2
  3946  001964  C054  F014         	movff	floor@i,___ftge@ff2
  3947  001968  C055  F015         	movff	floor@i+1,___ftge@ff2+1
  3948  00196C  C056  F016         	movff	floor@i+2,___ftge@ff2+2
  3949  001970  EC41  F00E         	call	___ftge	;wreg free
  3950  001974  B0D8               	btfsc	status,0,c
  3951  001976  D015               	goto	l1018
  3952  001978  C054  F02C         	movff	floor@i,___ftadd@f1
  3953  00197C  C055  F02D         	movff	floor@i+1,___ftadd@f1+1
  3954  001980  C056  F02E         	movff	floor@i+2,___ftadd@f1+2
  3955  001984  0E00               	movlw	0
  3956  001986  6E2F               	movwf	___ftadd@f2,c
  3957  001988  0E80               	movlw	128
  3958  00198A  6E30               	movwf	___ftadd@f2+1,c
  3959  00198C  0EBF               	movlw	191
  3960  00198E  6E31               	movwf	___ftadd@f2+2,c
  3961  001990  EC8E  F004         	call	___ftadd	;wreg free
  3962  001994  C02C  F051         	movff	?___ftadd,?_floor
  3963  001998  C02D  F052         	movff	?___ftadd+1,?_floor+1
  3964  00199C  C02E  F053         	movff	?___ftadd+2,?_floor+2
  3965  0019A0  0012               	return	
  3966  0019A2                     l1018:
  3967  0019A2  C054  F051         	movff	floor@i,?_floor
  3968  0019A6  C055  F052         	movff	floor@i+1,?_floor+1
  3969  0019AA  C056  F053         	movff	floor@i+2,?_floor+2
  3970  0019AE  0012               	return		;funcret
  3971  0019B0                     __end_of_floor:
  3972                           	opt stack 0
  3973                           tblptru	equ	0xFF8
  3974                           tblptrh	equ	0xFF7
  3975                           tblptrl	equ	0xFF6
  3976                           tablat	equ	0xFF5
  3977                           prodh	equ	0xFF4
  3978                           prodl	equ	0xFF3
  3979                           intcon	equ	0xFF2
  3980                           intcon2	equ	0xFF1
  3981                           intcon3	equ	0xFF0
  3982                           postinc0	equ	0xFEE
  3983                           wreg	equ	0xFE8
  3984                           postdec1	equ	0xFE5
  3985                           fsr1l	equ	0xFE1
  3986                           indf2	equ	0xFDF
  3987                           fsr2h	equ	0xFDA
  3988                           fsr2l	equ	0xFD9
  3989                           status	equ	0xFD8
  3990                           
  3991 ;; *************** function _frexp *****************
  3992 ;; Defined at:
  3993 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;  value           3   16[COMRAM] int 
  3996 ;;  eptr            2   19[COMRAM] PTR int 
  3997 ;;		 -> log@exponent(2), floor@expon(2), 
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;		None
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  3   16[COMRAM] PTR int 
  4002 ;; Registers used:
  4003 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4009 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4011 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4012 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;Total ram usage:        7 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:    1
  4016 ;; This function calls:
  4017 ;;		Nothing
  4018 ;; This function is called by:
  4019 ;;		_floor
  4020 ;;		_log
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           	psect	text12
  4025  001BF2                     __ptext12:
  4026                           	opt stack 0
  4027  001BF2                     _frexp:
  4028                           	opt stack 24
  4029                           
  4030                           ;incstack = 0
  4031  001BF2  5011               	movf	frexp@value,w,c
  4032  001BF4  1012               	iorwf	frexp@value+1,w,c
  4033  001BF6  1013               	iorwf	frexp@value+2,w,c
  4034  001BF8  A4D8               	btfss	status,2,c
  4035  001BFA  D00F               	goto	l2746
  4036  001BFC  C014  FFD9         	movff	frexp@eptr,fsr2l
  4037  001C00  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4038  001C04  0E00               	movlw	0
  4039  001C06  6EDE               	movwf	postinc2,c
  4040  001C08  0E00               	movlw	0
  4041  001C0A  6EDD               	movwf	postdec2,c
  4042  001C0C  0E00               	movlw	0
  4043  001C0E  6E11               	movwf	?_frexp,c
  4044  001C10  0E00               	movlw	0
  4045  001C12  6E12               	movwf	?_frexp+1,c
  4046  001C14  0E00               	movlw	0
  4047  001C16  6E13               	movwf	?_frexp+2,c
  4048  001C18  0012               	return	
  4049  001C1A                     l2746:
  4050  001C1A  5013               	movf	frexp@value+2,w,c
  4051  001C1C  0B7F               	andlw	127
  4052  001C1E  6E16               	movwf	??_frexp& (0+255),c
  4053  001C20  6A17               	clrf	(??_frexp+1)& (0+255),c
  4054  001C22  90D8               	bcf	status,0,c
  4055  001C24  3616               	rlcf	??_frexp,f,c
  4056  001C26  3617               	rlcf	??_frexp+1,f,c
  4057  001C28  C014  FFD9         	movff	frexp@eptr,fsr2l
  4058  001C2C  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4059  001C30  C016  FFDE         	movff	??_frexp,postinc2
  4060  001C34  C017  FFDD         	movff	??_frexp+1,postdec2
  4061  001C38  AE12               	btfss	frexp@value+1,7,c
  4062  001C3A  D003               	goto	u2230
  4063  001C3C  6A16               	clrf	??_frexp& (0+255),c
  4064  001C3E  2A16               	incf	??_frexp& (0+255),f,c
  4065  001C40  D001               	goto	u2238
  4066  001C42                     u2230:
  4067  001C42  6A16               	clrf	??_frexp& (0+255),c
  4068  001C44                     u2238:
  4069  001C44  5016               	movf	??_frexp,w,c
  4070  001C46  C014  FFD9         	movff	frexp@eptr,fsr2l
  4071  001C4A  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4072  001C4E  12DE               	iorwf	postinc2,f,c
  4073  001C50  0E00               	movlw	0
  4074  001C52  12DD               	iorwf	postdec2,f,c
  4075  001C54  C014  FFD9         	movff	frexp@eptr,fsr2l
  4076  001C58  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4077  001C5C  0E82               	movlw	130
  4078  001C5E  26DE               	addwf	postinc2,f,c
  4079  001C60  0EFF               	movlw	255
  4080  001C62  22DD               	addwfc	postdec2,f,c
  4081  001C64  8013               	bsf	frexp@value+2,0,c
  4082  001C66  8213               	bsf	frexp@value+2,1,c
  4083  001C68  8413               	bsf	frexp@value+2,2,c
  4084  001C6A  8613               	bsf	frexp@value+2,3,c
  4085  001C6C  8813               	bsf	frexp@value+2,4,c
  4086  001C6E  8A13               	bsf	frexp@value+2,5,c
  4087  001C70  9C13               	bcf	frexp@value+2,6,c
  4088  001C72  9E12               	bcf	frexp@value+1,7,c
  4089  001C74  C011  F011         	movff	frexp@value,?_frexp
  4090  001C78  C012  F012         	movff	frexp@value+1,?_frexp+1
  4091  001C7C  C013  F013         	movff	frexp@value+2,?_frexp+2
  4092  001C80  0012               	return	
  4093  001C82                     __end_of_frexp:
  4094                           	opt stack 0
  4095                           tblptru	equ	0xFF8
  4096                           tblptrh	equ	0xFF7
  4097                           tblptrl	equ	0xFF6
  4098                           tablat	equ	0xFF5
  4099                           prodh	equ	0xFF4
  4100                           prodl	equ	0xFF3
  4101                           intcon	equ	0xFF2
  4102                           intcon2	equ	0xFF1
  4103                           intcon3	equ	0xFF0
  4104                           postinc0	equ	0xFEE
  4105                           wreg	equ	0xFE8
  4106                           postdec1	equ	0xFE5
  4107                           fsr1l	equ	0xFE1
  4108                           indf2	equ	0xFDF
  4109                           postinc2	equ	0xFDE
  4110                           postdec2	equ	0xFDD
  4111                           fsr2h	equ	0xFDA
  4112                           fsr2l	equ	0xFD9
  4113                           status	equ	0xFD8
  4114                           
  4115 ;; *************** function ___fttol *****************
  4116 ;; Defined at:
  4117 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;  f1              3   55[COMRAM] float 
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;  lval            4   65[COMRAM] unsigned long 
  4122 ;;  exp1            1   69[COMRAM] unsigned char 
  4123 ;;  sign1           1   64[COMRAM] unsigned char 
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  4   55[COMRAM] long 
  4126 ;; Registers used:
  4127 ;;		wreg, status,2, status,0
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4133 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;Total ram usage:       15 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:    1
  4140 ;; This function calls:
  4141 ;;		Nothing
  4142 ;; This function is called by:
  4143 ;;		_dec_to_hex
  4144 ;;		_pow
  4145 ;;		_exp
  4146 ;;		_floor
  4147 ;;		_hex_to_dec
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           	psect	text13
  4152  001516                     __ptext13:
  4153                           	opt stack 0
  4154  001516                     ___fttol:
  4155                           	opt stack 23
  4156                           
  4157                           ;incstack = 0
  4158  001516  C03A  F03C         	movff	___fttol@f1+2,??___fttol
  4159  00151A  6A3D               	clrf	(??___fttol+1)& (0+255),c
  4160  00151C  6A3E               	clrf	(??___fttol+2)& (0+255),c
  4161  00151E  3439               	rlcf	___fttol@f1+1,w,c
  4162  001520  363C               	rlcf	??___fttol& (0+255),f,c
  4163  001522  E301               	bnc	u2141
  4164  001524  803D               	bsf	(??___fttol+1)& (0+255),0,c
  4165  001526                     u2141:
  4166  001526  503C               	movf	??___fttol,w,c
  4167  001528  6E46               	movwf	___fttol@exp1,c
  4168  00152A  5046               	movf	___fttol@exp1,w,c
  4169  00152C  A4D8               	btfss	status,2,c
  4170  00152E  D009               	goto	l2698
  4171  001530  0E00               	movlw	0
  4172  001532  6E38               	movwf	?___fttol,c
  4173  001534  0E00               	movlw	0
  4174  001536  6E39               	movwf	?___fttol+1,c
  4175  001538  0E00               	movlw	0
  4176  00153A  6E3A               	movwf	?___fttol+2,c
  4177  00153C  0E00               	movlw	0
  4178  00153E  6E3B               	movwf	?___fttol+3,c
  4179  001540  0012               	return	
  4180  001542                     l2698:
  4181  001542  0E17               	movlw	23
  4182  001544  6E3C               	movwf	??___fttol& (0+255),c
  4183  001546  C038  F03D         	movff	___fttol@f1,??___fttol+1
  4184  00154A  C039  F03E         	movff	___fttol@f1+1,??___fttol+2
  4185  00154E  C03A  F03F         	movff	___fttol@f1+2,??___fttol+3
  4186  001552  283C               	incf	??___fttol,w,c
  4187  001554  6E40               	movwf	(??___fttol+4)& (0+255),c
  4188  001556  D004               	goto	u2160
  4189  001558                     u2165:
  4190  001558  90D8               	bcf	status,0,c
  4191  00155A  323F               	rrcf	??___fttol+3,f,c
  4192  00155C  323E               	rrcf	??___fttol+2,f,c
  4193  00155E  323D               	rrcf	??___fttol+1,f,c
  4194  001560                     u2160:
  4195  001560  2E40               	decfsz	(??___fttol+4)& (0+255),f,c
  4196  001562  D7FA               	goto	u2165
  4197  001564  503D               	movf	??___fttol+1,w,c
  4198  001566  6E41               	movwf	___fttol@sign1,c
  4199  001568  8E39               	bsf	___fttol@f1+1,7,c
  4200  00156A  0EFF               	movlw	255
  4201  00156C  1638               	andwf	___fttol@f1,f,c
  4202  00156E  0EFF               	movlw	255
  4203  001570  1639               	andwf	___fttol@f1+1,f,c
  4204  001572  0E00               	movlw	0
  4205  001574  163A               	andwf	___fttol@f1+2,f,c
  4206  001576  5038               	movf	___fttol@f1,w,c
  4207  001578  6E42               	movwf	___fttol@lval,c
  4208  00157A  5039               	movf	___fttol@f1+1,w,c
  4209  00157C  6E43               	movwf	___fttol@lval+1,c
  4210  00157E  503A               	movf	___fttol@f1+2,w,c
  4211  001580  6E44               	movwf	___fttol@lval+2,c
  4212  001582  6A45               	clrf	___fttol@lval+3,c
  4213  001584  0E8E               	movlw	142
  4214  001586  5E46               	subwf	___fttol@exp1,f,c
  4215  001588  AE46               	btfss	___fttol@exp1,7,c
  4216  00158A  D016               	goto	l2720
  4217  00158C  5046               	movf	___fttol@exp1,w,c
  4218  00158E  0A80               	xorlw	128
  4219  001590  0F8F               	addlw	143
  4220  001592  B0D8               	btfsc	status,0,c
  4221  001594  D009               	goto	l2716
  4222  001596  0E00               	movlw	0
  4223  001598  6E38               	movwf	?___fttol,c
  4224  00159A  0E00               	movlw	0
  4225  00159C  6E39               	movwf	?___fttol+1,c
  4226  00159E  0E00               	movlw	0
  4227  0015A0  6E3A               	movwf	?___fttol+2,c
  4228  0015A2  0E00               	movlw	0
  4229  0015A4  6E3B               	movwf	?___fttol+3,c
  4230  0015A6  0012               	return	
  4231  0015A8                     l2716:
  4232  0015A8  90D8               	bcf	status,0,c
  4233  0015AA  3245               	rrcf	___fttol@lval+3,f,c
  4234  0015AC  3244               	rrcf	___fttol@lval+2,f,c
  4235  0015AE  3243               	rrcf	___fttol@lval+1,f,c
  4236  0015B0  3242               	rrcf	___fttol@lval,f,c
  4237  0015B2  3E46               	incfsz	___fttol@exp1,f,c
  4238  0015B4  D7F9               	goto	l2716
  4239  0015B6  D015               	goto	l2730
  4240  0015B8                     l2720:
  4241  0015B8  0E17               	movlw	23
  4242  0015BA  6446               	cpfsgt	___fttol@exp1,c
  4243  0015BC  D00F               	goto	l2728
  4244  0015BE  0E00               	movlw	0
  4245  0015C0  6E38               	movwf	?___fttol,c
  4246  0015C2  0E00               	movlw	0
  4247  0015C4  6E39               	movwf	?___fttol+1,c
  4248  0015C6  0E00               	movlw	0
  4249  0015C8  6E3A               	movwf	?___fttol+2,c
  4250  0015CA  0E00               	movlw	0
  4251  0015CC  6E3B               	movwf	?___fttol+3,c
  4252  0015CE  0012               	return	
  4253  0015D0                     l2726:
  4254  0015D0  90D8               	bcf	status,0,c
  4255  0015D2  3642               	rlcf	___fttol@lval,f,c
  4256  0015D4  3643               	rlcf	___fttol@lval+1,f,c
  4257  0015D6  3644               	rlcf	___fttol@lval+2,f,c
  4258  0015D8  3645               	rlcf	___fttol@lval+3,f,c
  4259  0015DA  0646               	decf	___fttol@exp1,f,c
  4260  0015DC                     l2728:
  4261  0015DC  5046               	movf	___fttol@exp1,w,c
  4262  0015DE  A4D8               	btfss	status,2,c
  4263  0015E0  D7F7               	goto	l2726
  4264  0015E2                     l2730:
  4265  0015E2  5041               	movf	___fttol@sign1,w,c
  4266  0015E4  B4D8               	btfsc	status,2,c
  4267  0015E6  D008               	goto	l2734
  4268  0015E8  1E45               	comf	___fttol@lval+3,f,c
  4269  0015EA  1E44               	comf	___fttol@lval+2,f,c
  4270  0015EC  1E43               	comf	___fttol@lval+1,f,c
  4271  0015EE  6C42               	negf	___fttol@lval,c
  4272  0015F0  0E00               	movlw	0
  4273  0015F2  2243               	addwfc	___fttol@lval+1,f,c
  4274  0015F4  2244               	addwfc	___fttol@lval+2,f,c
  4275  0015F6  2245               	addwfc	___fttol@lval+3,f,c
  4276  0015F8                     l2734:
  4277  0015F8  C042  F038         	movff	___fttol@lval,?___fttol
  4278  0015FC  C043  F039         	movff	___fttol@lval+1,?___fttol+1
  4279  001600  C044  F03A         	movff	___fttol@lval+2,?___fttol+2
  4280  001604  C045  F03B         	movff	___fttol@lval+3,?___fttol+3
  4281  001608  0012               	return	
  4282  00160A                     __end_of___fttol:
  4283                           	opt stack 0
  4284                           tblptru	equ	0xFF8
  4285                           tblptrh	equ	0xFF7
  4286                           tblptrl	equ	0xFF6
  4287                           tablat	equ	0xFF5
  4288                           prodh	equ	0xFF4
  4289                           prodl	equ	0xFF3
  4290                           intcon	equ	0xFF2
  4291                           intcon2	equ	0xFF1
  4292                           intcon3	equ	0xFF0
  4293                           postinc0	equ	0xFEE
  4294                           wreg	equ	0xFE8
  4295                           postdec1	equ	0xFE5
  4296                           fsr1l	equ	0xFE1
  4297                           indf2	equ	0xFDF
  4298                           postinc2	equ	0xFDE
  4299                           postdec2	equ	0xFDD
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function ___ftge *****************
  4305 ;; Defined at:
  4306 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  ff1             3   16[COMRAM] float 
  4309 ;;  ff2             3   19[COMRAM] float 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;		None
  4312 ;; Return value:  Size  Location     Type
  4313 ;;		None               void
  4314 ;; Registers used:
  4315 ;;		wreg, status,2, status,0
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4321 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;Total ram usage:        9 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    1
  4328 ;; This function calls:
  4329 ;;		Nothing
  4330 ;; This function is called by:
  4331 ;;		_pow
  4332 ;;		_exp
  4333 ;;		_floor
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           	psect	text14
  4338  001C82                     __ptext14:
  4339                           	opt stack 0
  4340  001C82                     ___ftge:
  4341                           	opt stack 23
  4342                           
  4343                           ;incstack = 0
  4344  001C82  AE13               	btfss	___ftge@ff1+2,7,c
  4345  001C84  D016               	goto	l2678
  4346  001C86  C011  F017         	movff	___ftge@ff1,??___ftge
  4347  001C8A  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
  4348  001C8E  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
  4349  001C92  1E17               	comf	??___ftge,f,c
  4350  001C94  1E18               	comf	??___ftge+1,f,c
  4351  001C96  1E19               	comf	??___ftge+2,f,c
  4352  001C98  2A17               	incf	??___ftge,f,c
  4353  001C9A  0E00               	movlw	0
  4354  001C9C  2218               	addwfc	??___ftge+1,f,c
  4355  001C9E  2219               	addwfc	??___ftge+2,f,c
  4356  001CA0  0E00               	movlw	0
  4357  001CA2  2417               	addwf	??___ftge,w,c
  4358  001CA4  6E11               	movwf	___ftge@ff1,c
  4359  001CA6  0E00               	movlw	0
  4360  001CA8  2018               	addwfc	??___ftge+1,w,c
  4361  001CAA  6E12               	movwf	___ftge@ff1+1,c
  4362  001CAC  0E80               	movlw	128
  4363  001CAE  2019               	addwfc	??___ftge+2,w,c
  4364  001CB0  6E13               	movwf	___ftge@ff1+2,c
  4365  001CB2                     l2678:
  4366  001CB2  AE16               	btfss	___ftge@ff2+2,7,c
  4367  001CB4  D016               	goto	l2682
  4368  001CB6  C014  F017         	movff	___ftge@ff2,??___ftge
  4369  001CBA  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
  4370  001CBE  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
  4371  001CC2  1E17               	comf	??___ftge,f,c
  4372  001CC4  1E18               	comf	??___ftge+1,f,c
  4373  001CC6  1E19               	comf	??___ftge+2,f,c
  4374  001CC8  2A17               	incf	??___ftge,f,c
  4375  001CCA  0E00               	movlw	0
  4376  001CCC  2218               	addwfc	??___ftge+1,f,c
  4377  001CCE  2219               	addwfc	??___ftge+2,f,c
  4378  001CD0  0E00               	movlw	0
  4379  001CD2  2417               	addwf	??___ftge,w,c
  4380  001CD4  6E14               	movwf	___ftge@ff2,c
  4381  001CD6  0E00               	movlw	0
  4382  001CD8  2018               	addwfc	??___ftge+1,w,c
  4383  001CDA  6E15               	movwf	___ftge@ff2+1,c
  4384  001CDC  0E80               	movlw	128
  4385  001CDE  2019               	addwfc	??___ftge+2,w,c
  4386  001CE0  6E16               	movwf	___ftge@ff2+2,c
  4387  001CE2                     l2682:
  4388  001CE2  0E00               	movlw	0
  4389  001CE4  1A11               	xorwf	___ftge@ff1,f,c
  4390  001CE6  0E00               	movlw	0
  4391  001CE8  1A12               	xorwf	___ftge@ff1+1,f,c
  4392  001CEA  0E80               	movlw	128
  4393  001CEC  1A13               	xorwf	___ftge@ff1+2,f,c
  4394  001CEE  0E00               	movlw	0
  4395  001CF0  1A14               	xorwf	___ftge@ff2,f,c
  4396  001CF2  0E00               	movlw	0
  4397  001CF4  1A15               	xorwf	___ftge@ff2+1,f,c
  4398  001CF6  0E80               	movlw	128
  4399  001CF8  1A16               	xorwf	___ftge@ff2+2,f,c
  4400  001CFA  5014               	movf	___ftge@ff2,w,c
  4401  001CFC  5C11               	subwf	___ftge@ff1,w,c
  4402  001CFE  5015               	movf	___ftge@ff2+1,w,c
  4403  001D00  5812               	subwfb	___ftge@ff1+1,w,c
  4404  001D02  5016               	movf	___ftge@ff2+2,w,c
  4405  001D04  5813               	subwfb	___ftge@ff1+2,w,c
  4406  001D06  B0D8               	btfsc	status,0,c
  4407  001D08  D002               	goto	l2688
  4408  001D0A  90D8               	bcf	status,0,c
  4409  001D0C  0012               	return	
  4410  001D0E                     l2688:
  4411  001D0E  80D8               	bsf	status,0,c
  4412  001D10  0012               	return	
  4413  001D12                     __end_of___ftge:
  4414                           	opt stack 0
  4415                           tblptru	equ	0xFF8
  4416                           tblptrh	equ	0xFF7
  4417                           tblptrl	equ	0xFF6
  4418                           tablat	equ	0xFF5
  4419                           prodh	equ	0xFF4
  4420                           prodl	equ	0xFF3
  4421                           intcon	equ	0xFF2
  4422                           intcon2	equ	0xFF1
  4423                           intcon3	equ	0xFF0
  4424                           postinc0	equ	0xFEE
  4425                           wreg	equ	0xFE8
  4426                           postdec1	equ	0xFE5
  4427                           fsr1l	equ	0xFE1
  4428                           indf2	equ	0xFDF
  4429                           postinc2	equ	0xFDE
  4430                           postdec2	equ	0xFDD
  4431                           fsr2h	equ	0xFDA
  4432                           fsr2l	equ	0xFD9
  4433                           status	equ	0xFD8
  4434                           
  4435 ;; *************** function ___altoft *****************
  4436 ;; Defined at:
  4437 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;  c               4   70[COMRAM] long 
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;  sign            1   79[COMRAM] unsigned char 
  4442 ;;  exp             1   78[COMRAM] unsigned char 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  3   70[COMRAM] float 
  4445 ;; Registers used:
  4446 ;;		wreg, status,2, status,0, cstack
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4452 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;Total ram usage:       10 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; Hardware stack levels required when called:    2
  4459 ;; This function calls:
  4460 ;;		___ftpack
  4461 ;; This function is called by:
  4462 ;;		_floor
  4463 ;;		_hex_to_dec
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           	psect	text15
  4468  001E18                     __ptext15:
  4469                           	opt stack 0
  4470  001E18                     ___altoft:
  4471                           	opt stack 22
  4472                           
  4473                           ;incstack = 0
  4474  001E18  0E00               	movlw	0
  4475  001E1A  6E50               	movwf	___altoft@sign,c
  4476  001E1C  0E8E               	movlw	142
  4477  001E1E  6E4F               	movwf	___altoft@exp,c
  4478  001E20  AE4A               	btfss	___altoft@c+3,7,c
  4479  001E22  D011               	goto	l2550
  4480  001E24  1E4A               	comf	___altoft@c+3,f,c
  4481  001E26  1E49               	comf	___altoft@c+2,f,c
  4482  001E28  1E48               	comf	___altoft@c+1,f,c
  4483  001E2A  6C47               	negf	___altoft@c,c
  4484  001E2C  0E00               	movlw	0
  4485  001E2E  2248               	addwfc	___altoft@c+1,f,c
  4486  001E30  2249               	addwfc	___altoft@c+2,f,c
  4487  001E32  224A               	addwfc	___altoft@c+3,f,c
  4488  001E34  0E01               	movlw	1
  4489  001E36  6E50               	movwf	___altoft@sign,c
  4490  001E38  D006               	goto	l2550
  4491  001E3A                     l2548:
  4492  001E3A  90D8               	bcf	status,0,c
  4493  001E3C  324A               	rrcf	___altoft@c+3,f,c
  4494  001E3E  3249               	rrcf	___altoft@c+2,f,c
  4495  001E40  3248               	rrcf	___altoft@c+1,f,c
  4496  001E42  3247               	rrcf	___altoft@c,f,c
  4497  001E44  2A4F               	incf	___altoft@exp,f,c
  4498  001E46                     l2550:
  4499  001E46  0E00               	movlw	0
  4500  001E48  1447               	andwf	___altoft@c,w,c
  4501  001E4A  6E4B               	movwf	??___altoft& (0+255),c
  4502  001E4C  0E00               	movlw	0
  4503  001E4E  1448               	andwf	___altoft@c+1,w,c
  4504  001E50  6E4C               	movwf	(??___altoft+1)& (0+255),c
  4505  001E52  0E00               	movlw	0
  4506  001E54  1449               	andwf	___altoft@c+2,w,c
  4507  001E56  6E4D               	movwf	(??___altoft+2)& (0+255),c
  4508  001E58  0EFF               	movlw	255
  4509  001E5A  144A               	andwf	___altoft@c+3,w,c
  4510  001E5C  6E4E               	movwf	(??___altoft+3)& (0+255),c
  4511  001E5E  504B               	movf	??___altoft,w,c
  4512  001E60  104C               	iorwf	??___altoft+1,w,c
  4513  001E62  104D               	iorwf	??___altoft+2,w,c
  4514  001E64  104E               	iorwf	??___altoft+3,w,c
  4515  001E66  A4D8               	btfss	status,2,c
  4516  001E68  D7E8               	goto	l2548
  4517  001E6A  C047  F011         	movff	___altoft@c,___ftpack@arg
  4518  001E6E  C048  F012         	movff	___altoft@c+1,___ftpack@arg+1
  4519  001E72  C049  F013         	movff	___altoft@c+2,___ftpack@arg+2
  4520  001E76  C04F  F014         	movff	___altoft@exp,___ftpack@exp
  4521  001E7A  C050  F015         	movff	___altoft@sign,___ftpack@sign
  4522  001E7E  ECA2  F00D         	call	___ftpack	;wreg free
  4523  001E82  C011  F047         	movff	?___ftpack,?___altoft
  4524  001E86  C012  F048         	movff	?___ftpack+1,?___altoft+1
  4525  001E8A  C013  F049         	movff	?___ftpack+2,?___altoft+2
  4526  001E8E  0012               	return	
  4527  001E90                     __end_of___altoft:
  4528                           	opt stack 0
  4529                           tblptru	equ	0xFF8
  4530                           tblptrh	equ	0xFF7
  4531                           tblptrl	equ	0xFF6
  4532                           tablat	equ	0xFF5
  4533                           prodh	equ	0xFF4
  4534                           prodl	equ	0xFF3
  4535                           intcon	equ	0xFF2
  4536                           intcon2	equ	0xFF1
  4537                           intcon3	equ	0xFF0
  4538                           postinc0	equ	0xFEE
  4539                           wreg	equ	0xFE8
  4540                           postdec1	equ	0xFE5
  4541                           fsr1l	equ	0xFE1
  4542                           indf2	equ	0xFDF
  4543                           postinc2	equ	0xFDE
  4544                           postdec2	equ	0xFDD
  4545                           fsr2h	equ	0xFDA
  4546                           fsr2l	equ	0xFD9
  4547                           status	equ	0xFD8
  4548                           
  4549 ;; *************** function _eval_poly *****************
  4550 ;; Defined at:
  4551 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  4552 ;; Parameters:    Size  Location     Type
  4553 ;;  x               3   55[COMRAM] float 
  4554 ;;  d               2   58[COMRAM] PTR const 
  4555 ;;		 -> log@coeff(27), exp@coeff(30), 
  4556 ;;  n               2   60[COMRAM] int 
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;  res             3   64[COMRAM] int 
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  3   55[COMRAM] int 
  4561 ;; Registers used:
  4562 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4568 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4569 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;Total ram usage:       12 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; Hardware stack levels required when called:    3
  4575 ;; This function calls:
  4576 ;;		___ftadd
  4577 ;;		___ftmul
  4578 ;;		___wmul
  4579 ;; This function is called by:
  4580 ;;		_exp
  4581 ;;		_log
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           	psect	text16
  4586  0019B0                     __ptext16:
  4587                           	opt stack 0
  4588  0019B0                     _eval_poly:
  4589                           	opt stack 22
  4590                           
  4591                           ;incstack = 0
  4592  0019B0  C03D  F011         	movff	eval_poly@n,___wmul@multiplier
  4593  0019B4  C03E  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  4594  0019B8  0E00               	movlw	0
  4595  0019BA  6E14               	movwf	___wmul@multiplicand+1,c
  4596  0019BC  0E03               	movlw	3
  4597  0019BE  6E13               	movwf	___wmul@multiplicand,c
  4598  0019C0  EC43  F011         	call	___wmul	;wreg free
  4599  0019C4  C03B  F03F         	movff	eval_poly@d,??_eval_poly
  4600  0019C8  C03C  F040         	movff	eval_poly@d+1,??_eval_poly+1
  4601  0019CC  5011               	movf	?___wmul,w,c
  4602  0019CE  263F               	addwf	??_eval_poly,f,c
  4603  0019D0  5012               	movf	?___wmul+1,w,c
  4604  0019D2  2240               	addwfc	??_eval_poly+1,f,c
  4605  0019D4  C03F  FFF6         	movff	??_eval_poly,tblptrl
  4606  0019D8  C040  FFF7         	movff	??_eval_poly+1,tblptrh
  4607  0019DC                     	if	0	;tblptru may be non-zero
  4608  0019DC                     	endif
  4609  0019DC                     	if	0	;tblptru may be non-zero
  4610  0019DC                     	endif
  4611  0019DC  0009               	tblrd		*+
  4612  0019DE  CFF5 F041          	movff	tablat,eval_poly@res
  4613  0019E2  0009               	tblrd		*+
  4614  0019E4  CFF5 F042          	movff	tablat,eval_poly@res+1
  4615  0019E8  000A               	tblrd		*-
  4616  0019EA  CFF5 F043          	movff	tablat,eval_poly@res+2
  4617  0019EE  D03E               	goto	l2856
  4618  0019F0                     l2854:
  4619  0019F0  C041  F020         	movff	eval_poly@res,___ftmul@f2
  4620  0019F4  C042  F021         	movff	eval_poly@res+1,___ftmul@f2+1
  4621  0019F8  C043  F022         	movff	eval_poly@res+2,___ftmul@f2+2
  4622  0019FC  C038  F01D         	movff	eval_poly@x,___ftmul@f1
  4623  001A00  C039  F01E         	movff	eval_poly@x+1,___ftmul@f1+1
  4624  001A04  C03A  F01F         	movff	eval_poly@x+2,___ftmul@f1+2
  4625  001A08  EC05  F00B         	call	___ftmul	;wreg free
  4626  001A0C  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  4627  001A10  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  4628  001A14  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  4629  001A18  0E00               	movlw	0
  4630  001A1A  6E14               	movwf	___wmul@multiplicand+1,c
  4631  001A1C  0E03               	movlw	3
  4632  001A1E  6E13               	movwf	___wmul@multiplicand,c
  4633  001A20  063D               	decf	eval_poly@n,f,c
  4634  001A22  A0D8               	btfss	status,0,c
  4635  001A24  063E               	decf	eval_poly@n+1,f,c
  4636  001A26  C03D  F011         	movff	eval_poly@n,___wmul@multiplier
  4637  001A2A  C03E  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  4638  001A2E  EC43  F011         	call	___wmul	;wreg free
  4639  001A32  C03B  F03F         	movff	eval_poly@d,??_eval_poly
  4640  001A36  C03C  F040         	movff	eval_poly@d+1,??_eval_poly+1
  4641  001A3A  5011               	movf	?___wmul,w,c
  4642  001A3C  263F               	addwf	??_eval_poly,f,c
  4643  001A3E  5012               	movf	?___wmul+1,w,c
  4644  001A40  2240               	addwfc	??_eval_poly+1,f,c
  4645  001A42  C03F  FFF6         	movff	??_eval_poly,tblptrl
  4646  001A46  C040  FFF7         	movff	??_eval_poly+1,tblptrh
  4647  001A4A                     	if	0	;tblptru may be non-zero
  4648  001A4A                     	endif
  4649  001A4A                     	if	0	;tblptru may be non-zero
  4650  001A4A                     	endif
  4651  001A4A  0009               	tblrd		*+
  4652  001A4C  CFF5 F02F          	movff	tablat,___ftadd@f2
  4653  001A50  0009               	tblrd		*+
  4654  001A52  CFF5 F030          	movff	tablat,___ftadd@f2+1
  4655  001A56  000A               	tblrd		*-
  4656  001A58  CFF5 F031          	movff	tablat,___ftadd@f2+2
  4657  001A5C  EC8E  F004         	call	___ftadd	;wreg free
  4658  001A60  C02C  F041         	movff	?___ftadd,eval_poly@res
  4659  001A64  C02D  F042         	movff	?___ftadd+1,eval_poly@res+1
  4660  001A68  C02E  F043         	movff	?___ftadd+2,eval_poly@res+2
  4661  001A6C                     l2856:
  4662  001A6C  503D               	movf	eval_poly@n,w,c
  4663  001A6E  103E               	iorwf	eval_poly@n+1,w,c
  4664  001A70  A4D8               	btfss	status,2,c
  4665  001A72  D7BE               	goto	l2854
  4666  001A74  C041  F038         	movff	eval_poly@res,?_eval_poly
  4667  001A78  C042  F039         	movff	eval_poly@res+1,?_eval_poly+1
  4668  001A7C  C043  F03A         	movff	eval_poly@res+2,?_eval_poly+2
  4669  001A80  0012               	return		;funcret
  4670  001A82                     __end_of_eval_poly:
  4671                           	opt stack 0
  4672                           tblptru	equ	0xFF8
  4673                           tblptrh	equ	0xFF7
  4674                           tblptrl	equ	0xFF6
  4675                           tablat	equ	0xFF5
  4676                           prodh	equ	0xFF4
  4677                           prodl	equ	0xFF3
  4678                           intcon	equ	0xFF2
  4679                           intcon2	equ	0xFF1
  4680                           intcon3	equ	0xFF0
  4681                           postinc0	equ	0xFEE
  4682                           wreg	equ	0xFE8
  4683                           postdec1	equ	0xFE5
  4684                           fsr1l	equ	0xFE1
  4685                           indf2	equ	0xFDF
  4686                           postinc2	equ	0xFDE
  4687                           postdec2	equ	0xFDD
  4688                           fsr2h	equ	0xFDA
  4689                           fsr2l	equ	0xFD9
  4690                           status	equ	0xFD8
  4691                           
  4692 ;; *************** function ___ftmul *****************
  4693 ;; Defined at:
  4694 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;  f1              3   28[COMRAM] float 
  4697 ;;  f2              3   31[COMRAM] float 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  4700 ;;  sign            1   42[COMRAM] unsigned char 
  4701 ;;  cntr            1   41[COMRAM] unsigned char 
  4702 ;;  exp             1   37[COMRAM] unsigned char 
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  3   28[COMRAM] float 
  4705 ;; Registers used:
  4706 ;;		wreg, status,2, status,0, cstack
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4712 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;Total ram usage:       15 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    2
  4719 ;; This function calls:
  4720 ;;		___ftpack
  4721 ;; This function is called by:
  4722 ;;		_dec_to_hex
  4723 ;;		_pow
  4724 ;;		_exp
  4725 ;;		_log
  4726 ;;		_eval_poly
  4727 ;;		_hex_to_dec
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           	psect	text17
  4732  00160A                     __ptext17:
  4733                           	opt stack 0
  4734  00160A                     ___ftmul:
  4735                           	opt stack 22
  4736                           
  4737                           ;incstack = 0
  4738  00160A  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  4739  00160E  6A24               	clrf	(??___ftmul+1)& (0+255),c
  4740  001610  6A25               	clrf	(??___ftmul+2)& (0+255),c
  4741  001612  341E               	rlcf	___ftmul@f1+1,w,c
  4742  001614  3623               	rlcf	??___ftmul& (0+255),f,c
  4743  001616  E301               	bnc	u2051
  4744  001618  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  4745  00161A                     u2051:
  4746  00161A  5023               	movf	??___ftmul,w,c
  4747  00161C  6E26               	movwf	___ftmul@exp,c
  4748  00161E  5026               	movf	___ftmul@exp,w,c
  4749  001620  A4D8               	btfss	status,2,c
  4750  001622  D007               	goto	l2632
  4751  001624  0E00               	movlw	0
  4752  001626  6E1D               	movwf	?___ftmul,c
  4753  001628  0E00               	movlw	0
  4754  00162A  6E1E               	movwf	?___ftmul+1,c
  4755  00162C  0E00               	movlw	0
  4756  00162E  6E1F               	movwf	?___ftmul+2,c
  4757  001630  0012               	return	
  4758  001632                     l2632:
  4759  001632  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  4760  001636  6A24               	clrf	(??___ftmul+1)& (0+255),c
  4761  001638  6A25               	clrf	(??___ftmul+2)& (0+255),c
  4762  00163A  3421               	rlcf	___ftmul@f2+1,w,c
  4763  00163C  3623               	rlcf	??___ftmul& (0+255),f,c
  4764  00163E  E301               	bnc	u2071
  4765  001640  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  4766  001642                     u2071:
  4767  001642  5023               	movf	??___ftmul,w,c
  4768  001644  6E2B               	movwf	___ftmul@sign,c
  4769  001646  502B               	movf	___ftmul@sign,w,c
  4770  001648  A4D8               	btfss	status,2,c
  4771  00164A  D007               	goto	l2638
  4772  00164C  0E00               	movlw	0
  4773  00164E  6E1D               	movwf	?___ftmul,c
  4774  001650  0E00               	movlw	0
  4775  001652  6E1E               	movwf	?___ftmul+1,c
  4776  001654  0E00               	movlw	0
  4777  001656  6E1F               	movwf	?___ftmul+2,c
  4778  001658  0012               	return	
  4779  00165A                     l2638:
  4780  00165A  502B               	movf	___ftmul@sign,w,c
  4781  00165C  0F7B               	addlw	123
  4782  00165E  2626               	addwf	___ftmul@exp,f,c
  4783  001660  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  4784  001664  5022               	movf	___ftmul@f2+2,w,c
  4785  001666  1A2B               	xorwf	___ftmul@sign,f,c
  4786  001668  0E80               	movlw	128
  4787  00166A  162B               	andwf	___ftmul@sign,f,c
  4788  00166C  8E1E               	bsf	___ftmul@f1+1,7,c
  4789  00166E  8E21               	bsf	___ftmul@f2+1,7,c
  4790  001670  0EFF               	movlw	255
  4791  001672  1620               	andwf	___ftmul@f2,f,c
  4792  001674  0EFF               	movlw	255
  4793  001676  1621               	andwf	___ftmul@f2+1,f,c
  4794  001678  0E00               	movlw	0
  4795  00167A  1622               	andwf	___ftmul@f2+2,f,c
  4796  00167C  0E00               	movlw	0
  4797  00167E  6E27               	movwf	___ftmul@f3_as_product,c
  4798  001680  0E00               	movlw	0
  4799  001682  6E28               	movwf	___ftmul@f3_as_product+1,c
  4800  001684  0E00               	movlw	0
  4801  001686  6E29               	movwf	___ftmul@f3_as_product+2,c
  4802  001688  0E07               	movlw	7
  4803  00168A  6E2A               	movwf	___ftmul@cntr,c
  4804  00168C                     l2652:
  4805  00168C  A01D               	btfss	___ftmul@f1,0,c
  4806  00168E  D006               	goto	l2656
  4807  001690  5020               	movf	___ftmul@f2,w,c
  4808  001692  2627               	addwf	___ftmul@f3_as_product,f,c
  4809  001694  5021               	movf	___ftmul@f2+1,w,c
  4810  001696  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  4811  001698  5022               	movf	___ftmul@f2+2,w,c
  4812  00169A  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  4813  00169C                     l2656:
  4814  00169C  90D8               	bcf	status,0,c
  4815  00169E  321F               	rrcf	___ftmul@f1+2,f,c
  4816  0016A0  321E               	rrcf	___ftmul@f1+1,f,c
  4817  0016A2  321D               	rrcf	___ftmul@f1,f,c
  4818  0016A4  90D8               	bcf	status,0,c
  4819  0016A6  3620               	rlcf	___ftmul@f2,f,c
  4820  0016A8  3621               	rlcf	___ftmul@f2+1,f,c
  4821  0016AA  3622               	rlcf	___ftmul@f2+2,f,c
  4822  0016AC  2E2A               	decfsz	___ftmul@cntr,f,c
  4823  0016AE  D7EE               	goto	l2652
  4824  0016B0  0E09               	movlw	9
  4825  0016B2  6E2A               	movwf	___ftmul@cntr,c
  4826  0016B4                     l2662:
  4827  0016B4  A01D               	btfss	___ftmul@f1,0,c
  4828  0016B6  D006               	goto	l2666
  4829  0016B8  5020               	movf	___ftmul@f2,w,c
  4830  0016BA  2627               	addwf	___ftmul@f3_as_product,f,c
  4831  0016BC  5021               	movf	___ftmul@f2+1,w,c
  4832  0016BE  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  4833  0016C0  5022               	movf	___ftmul@f2+2,w,c
  4834  0016C2  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  4835  0016C4                     l2666:
  4836  0016C4  90D8               	bcf	status,0,c
  4837  0016C6  321F               	rrcf	___ftmul@f1+2,f,c
  4838  0016C8  321E               	rrcf	___ftmul@f1+1,f,c
  4839  0016CA  321D               	rrcf	___ftmul@f1,f,c
  4840  0016CC  90D8               	bcf	status,0,c
  4841  0016CE  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  4842  0016D0  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  4843  0016D2  3227               	rrcf	___ftmul@f3_as_product,f,c
  4844  0016D4  2E2A               	decfsz	___ftmul@cntr,f,c
  4845  0016D6  D7EE               	goto	l2662
  4846  0016D8  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  4847  0016DC  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4848  0016E0  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4849  0016E4  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  4850  0016E8  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  4851  0016EC  ECA2  F00D         	call	___ftpack	;wreg free
  4852  0016F0  C011  F01D         	movff	?___ftpack,?___ftmul
  4853  0016F4  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  4854  0016F8  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  4855  0016FC  0012               	return	
  4856  0016FE                     __end_of___ftmul:
  4857                           	opt stack 0
  4858                           tblptru	equ	0xFF8
  4859                           tblptrh	equ	0xFF7
  4860                           tblptrl	equ	0xFF6
  4861                           tablat	equ	0xFF5
  4862                           prodh	equ	0xFF4
  4863                           prodl	equ	0xFF3
  4864                           intcon	equ	0xFF2
  4865                           intcon2	equ	0xFF1
  4866                           intcon3	equ	0xFF0
  4867                           postinc0	equ	0xFEE
  4868                           wreg	equ	0xFE8
  4869                           postdec1	equ	0xFE5
  4870                           fsr1l	equ	0xFE1
  4871                           indf2	equ	0xFDF
  4872                           postinc2	equ	0xFDE
  4873                           postdec2	equ	0xFDD
  4874                           fsr2h	equ	0xFDA
  4875                           fsr2l	equ	0xFD9
  4876                           status	equ	0xFD8
  4877                           
  4878 ;; *************** function ___ftsub *****************
  4879 ;; Defined at:
  4880 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  f1              3   55[COMRAM] float 
  4883 ;;  f2              3   58[COMRAM] float 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;		None
  4886 ;; Return value:  Size  Location     Type
  4887 ;;                  3   55[COMRAM] float 
  4888 ;; Registers used:
  4889 ;;		wreg, status,2, status,0, cstack
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4895 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;Total ram usage:        6 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    3
  4902 ;; This function calls:
  4903 ;;		___ftadd
  4904 ;; This function is called by:
  4905 ;;		_exp
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           	psect	text18
  4910  0021B0                     __ptext18:
  4911                           	opt stack 0
  4912  0021B0                     ___ftsub:
  4913                           	opt stack 22
  4914                           
  4915                           ;incstack = 0
  4916  0021B0  503B               	movf	___ftsub@f2,w,c
  4917  0021B2  103C               	iorwf	___ftsub@f2+1,w,c
  4918  0021B4  103D               	iorwf	___ftsub@f2+2,w,c
  4919  0021B6  B4D8               	btfsc	status,2,c
  4920  0021B8  D006               	goto	l2808
  4921  0021BA  0E00               	movlw	0
  4922  0021BC  1A3B               	xorwf	___ftsub@f2,f,c
  4923  0021BE  0E00               	movlw	0
  4924  0021C0  1A3C               	xorwf	___ftsub@f2+1,f,c
  4925  0021C2  0E80               	movlw	128
  4926  0021C4  1A3D               	xorwf	___ftsub@f2+2,f,c
  4927  0021C6                     l2808:
  4928  0021C6  C038  F02C         	movff	___ftsub@f1,___ftadd@f1
  4929  0021CA  C039  F02D         	movff	___ftsub@f1+1,___ftadd@f1+1
  4930  0021CE  C03A  F02E         	movff	___ftsub@f1+2,___ftadd@f1+2
  4931  0021D2  C03B  F02F         	movff	___ftsub@f2,___ftadd@f2
  4932  0021D6  C03C  F030         	movff	___ftsub@f2+1,___ftadd@f2+1
  4933  0021DA  C03D  F031         	movff	___ftsub@f2+2,___ftadd@f2+2
  4934  0021DE  EC8E  F004         	call	___ftadd	;wreg free
  4935  0021E2  C02C  F038         	movff	?___ftadd,?___ftsub
  4936  0021E6  C02D  F039         	movff	?___ftadd+1,?___ftsub+1
  4937  0021EA  C02E  F03A         	movff	?___ftadd+2,?___ftsub+2
  4938  0021EE  0012               	return	
  4939  0021F0                     __end_of___ftsub:
  4940                           	opt stack 0
  4941                           tblptru	equ	0xFF8
  4942                           tblptrh	equ	0xFF7
  4943                           tblptrl	equ	0xFF6
  4944                           tablat	equ	0xFF5
  4945                           prodh	equ	0xFF4
  4946                           prodl	equ	0xFF3
  4947                           intcon	equ	0xFF2
  4948                           intcon2	equ	0xFF1
  4949                           intcon3	equ	0xFF0
  4950                           postinc0	equ	0xFEE
  4951                           wreg	equ	0xFE8
  4952                           postdec1	equ	0xFE5
  4953                           fsr1l	equ	0xFE1
  4954                           indf2	equ	0xFDF
  4955                           postinc2	equ	0xFDE
  4956                           postdec2	equ	0xFDD
  4957                           fsr2h	equ	0xFDA
  4958                           fsr2l	equ	0xFD9
  4959                           status	equ	0xFD8
  4960                           
  4961 ;; *************** function ___ftadd *****************
  4962 ;; Defined at:
  4963 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;  f1              3   43[COMRAM] float 
  4966 ;;  f2              3   46[COMRAM] float 
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;  exp1            1   54[COMRAM] unsigned char 
  4969 ;;  exp2            1   53[COMRAM] unsigned char 
  4970 ;;  sign            1   52[COMRAM] unsigned char 
  4971 ;; Return value:  Size  Location     Type
  4972 ;;                  3   43[COMRAM] float 
  4973 ;; Registers used:
  4974 ;;		wreg, status,2, status,0, cstack
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4980 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;Total ram usage:       12 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; Hardware stack levels required when called:    2
  4987 ;; This function calls:
  4988 ;;		___ftpack
  4989 ;; This function is called by:
  4990 ;;		_dec_to_hex
  4991 ;;		___ftsub
  4992 ;;		_floor
  4993 ;;		_log
  4994 ;;		_eval_poly
  4995 ;;		_hex_to_dec
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           	psect	text19
  5000  00091C                     __ptext19:
  5001                           	opt stack 0
  5002  00091C                     ___ftadd:
  5003                           	opt stack 22
  5004                           
  5005                           ;incstack = 0
  5006  00091C  C02E  F032         	movff	___ftadd@f1+2,??___ftadd
  5007  000920  6A33               	clrf	(??___ftadd+1)& (0+255),c
  5008  000922  6A34               	clrf	(??___ftadd+2)& (0+255),c
  5009  000924  342D               	rlcf	___ftadd@f1+1,w,c
  5010  000926  3632               	rlcf	??___ftadd& (0+255),f,c
  5011  000928  E301               	bnc	u1841
  5012  00092A  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  5013  00092C                     u1841:
  5014  00092C  5032               	movf	??___ftadd,w,c
  5015  00092E  6E37               	movwf	___ftadd@exp1,c
  5016  000930  C031  F032         	movff	___ftadd@f2+2,??___ftadd
  5017  000934  6A33               	clrf	(??___ftadd+1)& (0+255),c
  5018  000936  6A34               	clrf	(??___ftadd+2)& (0+255),c
  5019  000938  3430               	rlcf	___ftadd@f2+1,w,c
  5020  00093A  3632               	rlcf	??___ftadd& (0+255),f,c
  5021  00093C  E301               	bnc	u1851
  5022  00093E  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  5023  000940                     u1851:
  5024  000940  5032               	movf	??___ftadd,w,c
  5025  000942  6E36               	movwf	___ftadd@exp2,c
  5026  000944  5037               	movf	___ftadd@exp1,w,c
  5027  000946  B4D8               	btfsc	status,2,c
  5028  000948  D00B               	goto	l652
  5029  00094A  5036               	movf	___ftadd@exp2,w,c
  5030  00094C  5C37               	subwf	___ftadd@exp1,w,c
  5031  00094E  B0D8               	btfsc	status,0,c
  5032  000950  D00E               	goto	l2564
  5033  000952  5037               	movf	___ftadd@exp1,w,c
  5034  000954  0800               	sublw	0
  5035  000956  2436               	addwf	___ftadd@exp2,w,c
  5036  000958  6E32               	movwf	??___ftadd& (0+255),c
  5037  00095A  0E18               	movlw	24
  5038  00095C  6432               	cpfsgt	??___ftadd,c
  5039  00095E  D007               	goto	l2564
  5040  000960                     l652:
  5041  000960  C02F  F02C         	movff	___ftadd@f2,?___ftadd
  5042  000964  C030  F02D         	movff	___ftadd@f2+1,?___ftadd+1
  5043  000968  C031  F02E         	movff	___ftadd@f2+2,?___ftadd+2
  5044  00096C  0012               	return	
  5045  00096E                     l2564:
  5046  00096E  5036               	movf	___ftadd@exp2,w,c
  5047  000970  B4D8               	btfsc	status,2,c
  5048  000972  D00B               	goto	l656
  5049  000974  5037               	movf	___ftadd@exp1,w,c
  5050  000976  5C36               	subwf	___ftadd@exp2,w,c
  5051  000978  B0D8               	btfsc	status,0,c
  5052  00097A  D00E               	goto	l2570
  5053  00097C  5036               	movf	___ftadd@exp2,w,c
  5054  00097E  0800               	sublw	0
  5055  000980  2437               	addwf	___ftadd@exp1,w,c
  5056  000982  6E32               	movwf	??___ftadd& (0+255),c
  5057  000984  0E18               	movlw	24
  5058  000986  6432               	cpfsgt	??___ftadd,c
  5059  000988  D007               	goto	l2570
  5060  00098A                     l656:
  5061  00098A  C02C  F02C         	movff	___ftadd@f1,?___ftadd
  5062  00098E  C02D  F02D         	movff	___ftadd@f1+1,?___ftadd+1
  5063  000992  C02E  F02E         	movff	___ftadd@f1+2,?___ftadd+2
  5064  000996  0012               	return	
  5065  000998                     l2570:
  5066  000998  0E06               	movlw	6
  5067  00099A  6E35               	movwf	___ftadd@sign,c
  5068  00099C  BE2E               	btfsc	___ftadd@f1+2,7,c
  5069  00099E  8E35               	bsf	___ftadd@sign,7,c
  5070  0009A0  BE31               	btfsc	___ftadd@f2+2,7,c
  5071  0009A2  8C35               	bsf	___ftadd@sign,6,c
  5072  0009A4  8E2D               	bsf	___ftadd@f1+1,7,c
  5073  0009A6  0EFF               	movlw	255
  5074  0009A8  162C               	andwf	___ftadd@f1,f,c
  5075  0009AA  0EFF               	movlw	255
  5076  0009AC  162D               	andwf	___ftadd@f1+1,f,c
  5077  0009AE  0E00               	movlw	0
  5078  0009B0  162E               	andwf	___ftadd@f1+2,f,c
  5079  0009B2  8E30               	bsf	___ftadd@f2+1,7,c
  5080  0009B4  0EFF               	movlw	255
  5081  0009B6  162F               	andwf	___ftadd@f2,f,c
  5082  0009B8  0EFF               	movlw	255
  5083  0009BA  1630               	andwf	___ftadd@f2+1,f,c
  5084  0009BC  0E00               	movlw	0
  5085  0009BE  1631               	andwf	___ftadd@f2+2,f,c
  5086  0009C0  5036               	movf	___ftadd@exp2,w,c
  5087  0009C2  5C37               	subwf	___ftadd@exp1,w,c
  5088  0009C4  B0D8               	btfsc	status,0,c
  5089  0009C6  D01B               	goto	l2596
  5090  0009C8                     l2586:
  5091  0009C8  90D8               	bcf	status,0,c
  5092  0009CA  362F               	rlcf	___ftadd@f2,f,c
  5093  0009CC  3630               	rlcf	___ftadd@f2+1,f,c
  5094  0009CE  3631               	rlcf	___ftadd@f2+2,f,c
  5095  0009D0  0636               	decf	___ftadd@exp2,f,c
  5096  0009D2  5037               	movf	___ftadd@exp1,w,c
  5097  0009D4  1836               	xorwf	___ftadd@exp2,w,c
  5098  0009D6  B4D8               	btfsc	status,2,c
  5099  0009D8  D00D               	goto	l2594
  5100  0009DA  0635               	decf	___ftadd@sign,f,c
  5101  0009DC  C035  F032         	movff	___ftadd@sign,??___ftadd
  5102  0009E0  0E07               	movlw	7
  5103  0009E2  1632               	andwf	??___ftadd,f,c
  5104  0009E4  B4D8               	btfsc	status,2,c
  5105  0009E6  D006               	goto	l2594
  5106  0009E8  D7EF               	goto	l2586
  5107  0009EA                     l2592:
  5108  0009EA  90D8               	bcf	status,0,c
  5109  0009EC  322E               	rrcf	___ftadd@f1+2,f,c
  5110  0009EE  322D               	rrcf	___ftadd@f1+1,f,c
  5111  0009F0  322C               	rrcf	___ftadd@f1,f,c
  5112  0009F2  2A37               	incf	___ftadd@exp1,f,c
  5113  0009F4                     l2594:
  5114  0009F4  5036               	movf	___ftadd@exp2,w,c
  5115  0009F6  1837               	xorwf	___ftadd@exp1,w,c
  5116  0009F8  B4D8               	btfsc	status,2,c
  5117  0009FA  D01F               	goto	l667
  5118  0009FC  D7F6               	goto	l2592
  5119  0009FE                     l2596:
  5120  0009FE  5037               	movf	___ftadd@exp1,w,c
  5121  000A00  5C36               	subwf	___ftadd@exp2,w,c
  5122  000A02  B0D8               	btfsc	status,0,c
  5123  000A04  D01A               	goto	l667
  5124  000A06                     l2598:
  5125  000A06  90D8               	bcf	status,0,c
  5126  000A08  362C               	rlcf	___ftadd@f1,f,c
  5127  000A0A  362D               	rlcf	___ftadd@f1+1,f,c
  5128  000A0C  362E               	rlcf	___ftadd@f1+2,f,c
  5129  000A0E  0637               	decf	___ftadd@exp1,f,c
  5130  000A10  5037               	movf	___ftadd@exp1,w,c
  5131  000A12  1836               	xorwf	___ftadd@exp2,w,c
  5132  000A14  B4D8               	btfsc	status,2,c
  5133  000A16  D00D               	goto	l2606
  5134  000A18  0635               	decf	___ftadd@sign,f,c
  5135  000A1A  C035  F032         	movff	___ftadd@sign,??___ftadd
  5136  000A1E  0E07               	movlw	7
  5137  000A20  1632               	andwf	??___ftadd,f,c
  5138  000A22  B4D8               	btfsc	status,2,c
  5139  000A24  D006               	goto	l2606
  5140  000A26  D7EF               	goto	l2598
  5141  000A28                     l2604:
  5142  000A28  90D8               	bcf	status,0,c
  5143  000A2A  3231               	rrcf	___ftadd@f2+2,f,c
  5144  000A2C  3230               	rrcf	___ftadd@f2+1,f,c
  5145  000A2E  322F               	rrcf	___ftadd@f2,f,c
  5146  000A30  2A36               	incf	___ftadd@exp2,f,c
  5147  000A32                     l2606:
  5148  000A32  5036               	movf	___ftadd@exp2,w,c
  5149  000A34  1837               	xorwf	___ftadd@exp1,w,c
  5150  000A36  A4D8               	btfss	status,2,c
  5151  000A38  D7F7               	goto	l2604
  5152  000A3A                     l667:
  5153  000A3A  AE35               	btfss	___ftadd@sign,7,c
  5154  000A3C  D00C               	goto	l676
  5155  000A3E  0EFF               	movlw	255
  5156  000A40  1A2C               	xorwf	___ftadd@f1,f,c
  5157  000A42  0EFF               	movlw	255
  5158  000A44  1A2D               	xorwf	___ftadd@f1+1,f,c
  5159  000A46  0EFF               	movlw	255
  5160  000A48  1A2E               	xorwf	___ftadd@f1+2,f,c
  5161  000A4A  0E01               	movlw	1
  5162  000A4C  262C               	addwf	___ftadd@f1,f,c
  5163  000A4E  0E00               	movlw	0
  5164  000A50  222D               	addwfc	___ftadd@f1+1,f,c
  5165  000A52  0E00               	movlw	0
  5166  000A54  222E               	addwfc	___ftadd@f1+2,f,c
  5167  000A56                     l676:
  5168  000A56  AC35               	btfss	___ftadd@sign,6,c
  5169  000A58  D00C               	goto	l2612
  5170  000A5A  0EFF               	movlw	255
  5171  000A5C  1A2F               	xorwf	___ftadd@f2,f,c
  5172  000A5E  0EFF               	movlw	255
  5173  000A60  1A30               	xorwf	___ftadd@f2+1,f,c
  5174  000A62  0EFF               	movlw	255
  5175  000A64  1A31               	xorwf	___ftadd@f2+2,f,c
  5176  000A66  0E01               	movlw	1
  5177  000A68  262F               	addwf	___ftadd@f2,f,c
  5178  000A6A  0E00               	movlw	0
  5179  000A6C  2230               	addwfc	___ftadd@f2+1,f,c
  5180  000A6E  0E00               	movlw	0
  5181  000A70  2231               	addwfc	___ftadd@f2+2,f,c
  5182  000A72                     l2612:
  5183  000A72  0E00               	movlw	0
  5184  000A74  6E35               	movwf	___ftadd@sign,c
  5185  000A76  502C               	movf	___ftadd@f1,w,c
  5186  000A78  262F               	addwf	___ftadd@f2,f,c
  5187  000A7A  502D               	movf	___ftadd@f1+1,w,c
  5188  000A7C  2230               	addwfc	___ftadd@f2+1,f,c
  5189  000A7E  502E               	movf	___ftadd@f1+2,w,c
  5190  000A80  2231               	addwfc	___ftadd@f2+2,f,c
  5191  000A82  AE31               	btfss	___ftadd@f2+2,7,c
  5192  000A84  D00E               	goto	l2622
  5193  000A86  0EFF               	movlw	255
  5194  000A88  1A2F               	xorwf	___ftadd@f2,f,c
  5195  000A8A  0EFF               	movlw	255
  5196  000A8C  1A30               	xorwf	___ftadd@f2+1,f,c
  5197  000A8E  0EFF               	movlw	255
  5198  000A90  1A31               	xorwf	___ftadd@f2+2,f,c
  5199  000A92  0E01               	movlw	1
  5200  000A94  262F               	addwf	___ftadd@f2,f,c
  5201  000A96  0E00               	movlw	0
  5202  000A98  2230               	addwfc	___ftadd@f2+1,f,c
  5203  000A9A  0E00               	movlw	0
  5204  000A9C  2231               	addwfc	___ftadd@f2+2,f,c
  5205  000A9E  0E01               	movlw	1
  5206  000AA0  6E35               	movwf	___ftadd@sign,c
  5207  000AA2                     l2622:
  5208  000AA2  C02F  F011         	movff	___ftadd@f2,___ftpack@arg
  5209  000AA6  C030  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
  5210  000AAA  C031  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
  5211  000AAE  C037  F014         	movff	___ftadd@exp1,___ftpack@exp
  5212  000AB2  C035  F015         	movff	___ftadd@sign,___ftpack@sign
  5213  000AB6  ECA2  F00D         	call	___ftpack	;wreg free
  5214  000ABA  C011  F02C         	movff	?___ftpack,?___ftadd
  5215  000ABE  C012  F02D         	movff	?___ftpack+1,?___ftadd+1
  5216  000AC2  C013  F02E         	movff	?___ftpack+2,?___ftadd+2
  5217  000AC6  0012               	return	
  5218  000AC8                     __end_of___ftadd:
  5219                           	opt stack 0
  5220                           tblptru	equ	0xFF8
  5221                           tblptrh	equ	0xFF7
  5222                           tblptrl	equ	0xFF6
  5223                           tablat	equ	0xFF5
  5224                           prodh	equ	0xFF4
  5225                           prodl	equ	0xFF3
  5226                           intcon	equ	0xFF2
  5227                           intcon2	equ	0xFF1
  5228                           intcon3	equ	0xFF0
  5229                           postinc0	equ	0xFEE
  5230                           wreg	equ	0xFE8
  5231                           postdec1	equ	0xFE5
  5232                           fsr1l	equ	0xFE1
  5233                           indf2	equ	0xFDF
  5234                           postinc2	equ	0xFDE
  5235                           postdec2	equ	0xFDD
  5236                           fsr2h	equ	0xFDA
  5237                           fsr2l	equ	0xFD9
  5238                           status	equ	0xFD8
  5239                           
  5240 ;; *************** function ___ftneg *****************
  5241 ;; Defined at:
  5242 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  f1              3   16[COMRAM] float 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;		None
  5247 ;; Return value:  Size  Location     Type
  5248 ;;                  3   16[COMRAM] float 
  5249 ;; Registers used:
  5250 ;;		wreg, status,2, status,0
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5256 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;Total ram usage:        3 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    1
  5263 ;; This function calls:
  5264 ;;		Nothing
  5265 ;; This function is called by:
  5266 ;;		_pow
  5267 ;;		_exp
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           	psect	text20
  5272  0022AC                     __ptext20:
  5273                           	opt stack 0
  5274  0022AC                     ___ftneg:
  5275                           	opt stack 24
  5276                           
  5277                           ;incstack = 0
  5278  0022AC  5011               	movf	___ftneg@f1,w,c
  5279  0022AE  1012               	iorwf	___ftneg@f1+1,w,c
  5280  0022B0  1013               	iorwf	___ftneg@f1+2,w,c
  5281  0022B2  B4D8               	btfsc	status,2,c
  5282  0022B4  D006               	goto	l709
  5283  0022B6  0E00               	movlw	0
  5284  0022B8  1A11               	xorwf	___ftneg@f1,f,c
  5285  0022BA  0E00               	movlw	0
  5286  0022BC  1A12               	xorwf	___ftneg@f1+1,f,c
  5287  0022BE  0E80               	movlw	128
  5288  0022C0  1A13               	xorwf	___ftneg@f1+2,f,c
  5289  0022C2                     l709:
  5290  0022C2  C011  F011         	movff	___ftneg@f1,?___ftneg
  5291  0022C6  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
  5292  0022CA  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
  5293  0022CE  0012               	return		;funcret
  5294  0022D0                     __end_of___ftneg:
  5295                           	opt stack 0
  5296                           tblptru	equ	0xFF8
  5297                           tblptrh	equ	0xFF7
  5298                           tblptrl	equ	0xFF6
  5299                           tablat	equ	0xFF5
  5300                           prodh	equ	0xFF4
  5301                           prodl	equ	0xFF3
  5302                           intcon	equ	0xFF2
  5303                           intcon2	equ	0xFF1
  5304                           intcon3	equ	0xFF0
  5305                           postinc0	equ	0xFEE
  5306                           wreg	equ	0xFE8
  5307                           postdec1	equ	0xFE5
  5308                           fsr1l	equ	0xFE1
  5309                           indf2	equ	0xFDF
  5310                           postinc2	equ	0xFDE
  5311                           postdec2	equ	0xFDD
  5312                           fsr2h	equ	0xFDA
  5313                           fsr2l	equ	0xFD9
  5314                           status	equ	0xFD8
  5315                           
  5316 ;; *************** function ___ftdiv *****************
  5317 ;; Defined at:
  5318 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;  f1              3   24[COMRAM] float 
  5321 ;;  f2              3   27[COMRAM] float 
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;  f3              3   34[COMRAM] float 
  5324 ;;  sign            1   38[COMRAM] unsigned char 
  5325 ;;  exp             1   37[COMRAM] unsigned char 
  5326 ;;  cntr            1   33[COMRAM] unsigned char 
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  3   24[COMRAM] float 
  5329 ;; Registers used:
  5330 ;;		wreg, status,2, status,0, cstack
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5336 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;Total ram usage:       15 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    2
  5343 ;; This function calls:
  5344 ;;		___ftpack
  5345 ;; This function is called by:
  5346 ;;		_exp
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text21
  5351  0017EC                     __ptext21:
  5352                           	opt stack 0
  5353  0017EC                     ___ftdiv:
  5354                           	opt stack 23
  5355                           
  5356                           ;incstack = 0
  5357  0017EC  C01B  F01F         	movff	___ftdiv@f1+2,??___ftdiv
  5358  0017F0  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  5359  0017F2  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  5360  0017F4  341A               	rlcf	___ftdiv@f1+1,w,c
  5361  0017F6  361F               	rlcf	??___ftdiv& (0+255),f,c
  5362  0017F8  E301               	bnc	u2241
  5363  0017FA  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  5364  0017FC                     u2241:
  5365  0017FC  501F               	movf	??___ftdiv,w,c
  5366  0017FE  6E26               	movwf	___ftdiv@exp,c
  5367  001800  5026               	movf	___ftdiv@exp,w,c
  5368  001802  A4D8               	btfss	status,2,c
  5369  001804  D007               	goto	l2764
  5370  001806  0E00               	movlw	0
  5371  001808  6E19               	movwf	?___ftdiv,c
  5372  00180A  0E00               	movlw	0
  5373  00180C  6E1A               	movwf	?___ftdiv+1,c
  5374  00180E  0E00               	movlw	0
  5375  001810  6E1B               	movwf	?___ftdiv+2,c
  5376  001812  0012               	return	
  5377  001814                     l2764:
  5378  001814  C01E  F01F         	movff	___ftdiv@f2+2,??___ftdiv
  5379  001818  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  5380  00181A  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  5381  00181C  341D               	rlcf	___ftdiv@f2+1,w,c
  5382  00181E  361F               	rlcf	??___ftdiv& (0+255),f,c
  5383  001820  E301               	bnc	u2261
  5384  001822  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  5385  001824                     u2261:
  5386  001824  501F               	movf	??___ftdiv,w,c
  5387  001826  6E27               	movwf	___ftdiv@sign,c
  5388  001828  5027               	movf	___ftdiv@sign,w,c
  5389  00182A  A4D8               	btfss	status,2,c
  5390  00182C  D007               	goto	l2770
  5391  00182E  0E00               	movlw	0
  5392  001830  6E19               	movwf	?___ftdiv,c
  5393  001832  0E00               	movlw	0
  5394  001834  6E1A               	movwf	?___ftdiv+1,c
  5395  001836  0E00               	movlw	0
  5396  001838  6E1B               	movwf	?___ftdiv+2,c
  5397  00183A  0012               	return	
  5398  00183C                     l2770:
  5399  00183C  0E00               	movlw	0
  5400  00183E  6E23               	movwf	___ftdiv@f3,c
  5401  001840  0E00               	movlw	0
  5402  001842  6E24               	movwf	___ftdiv@f3+1,c
  5403  001844  0E00               	movlw	0
  5404  001846  6E25               	movwf	___ftdiv@f3+2,c
  5405  001848  5027               	movf	___ftdiv@sign,w,c
  5406  00184A  0F89               	addlw	137
  5407  00184C  5E26               	subwf	___ftdiv@exp,f,c
  5408  00184E  C01B  F027         	movff	___ftdiv@f1+2,___ftdiv@sign
  5409  001852  501E               	movf	___ftdiv@f2+2,w,c
  5410  001854  1A27               	xorwf	___ftdiv@sign,f,c
  5411  001856  0E80               	movlw	128
  5412  001858  1627               	andwf	___ftdiv@sign,f,c
  5413  00185A  8E1A               	bsf	___ftdiv@f1+1,7,c
  5414  00185C  0EFF               	movlw	255
  5415  00185E  1619               	andwf	___ftdiv@f1,f,c
  5416  001860  0EFF               	movlw	255
  5417  001862  161A               	andwf	___ftdiv@f1+1,f,c
  5418  001864  0E00               	movlw	0
  5419  001866  161B               	andwf	___ftdiv@f1+2,f,c
  5420  001868  8E1D               	bsf	___ftdiv@f2+1,7,c
  5421  00186A  0EFF               	movlw	255
  5422  00186C  161C               	andwf	___ftdiv@f2,f,c
  5423  00186E  0EFF               	movlw	255
  5424  001870  161D               	andwf	___ftdiv@f2+1,f,c
  5425  001872  0E00               	movlw	0
  5426  001874  161E               	andwf	___ftdiv@f2+2,f,c
  5427  001876  0E18               	movlw	24
  5428  001878  6E22               	movwf	___ftdiv@cntr,c
  5429  00187A                     l2790:
  5430  00187A  90D8               	bcf	status,0,c
  5431  00187C  3623               	rlcf	___ftdiv@f3,f,c
  5432  00187E  3624               	rlcf	___ftdiv@f3+1,f,c
  5433  001880  3625               	rlcf	___ftdiv@f3+2,f,c
  5434  001882  501C               	movf	___ftdiv@f2,w,c
  5435  001884  5C19               	subwf	___ftdiv@f1,w,c
  5436  001886  501D               	movf	___ftdiv@f2+1,w,c
  5437  001888  581A               	subwfb	___ftdiv@f1+1,w,c
  5438  00188A  501E               	movf	___ftdiv@f2+2,w,c
  5439  00188C  581B               	subwfb	___ftdiv@f1+2,w,c
  5440  00188E  A0D8               	btfss	status,0,c
  5441  001890  D007               	goto	l687
  5442  001892  501C               	movf	___ftdiv@f2,w,c
  5443  001894  5E19               	subwf	___ftdiv@f1,f,c
  5444  001896  501D               	movf	___ftdiv@f2+1,w,c
  5445  001898  5A1A               	subwfb	___ftdiv@f1+1,f,c
  5446  00189A  501E               	movf	___ftdiv@f2+2,w,c
  5447  00189C  5A1B               	subwfb	___ftdiv@f1+2,f,c
  5448  00189E  8023               	bsf	___ftdiv@f3,0,c
  5449  0018A0                     l687:
  5450  0018A0  90D8               	bcf	status,0,c
  5451  0018A2  3619               	rlcf	___ftdiv@f1,f,c
  5452  0018A4  361A               	rlcf	___ftdiv@f1+1,f,c
  5453  0018A6  361B               	rlcf	___ftdiv@f1+2,f,c
  5454  0018A8  2E22               	decfsz	___ftdiv@cntr,f,c
  5455  0018AA  D7E7               	goto	l2790
  5456  0018AC  C023  F011         	movff	___ftdiv@f3,___ftpack@arg
  5457  0018B0  C024  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5458  0018B4  C025  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5459  0018B8  C026  F014         	movff	___ftdiv@exp,___ftpack@exp
  5460  0018BC  C027  F015         	movff	___ftdiv@sign,___ftpack@sign
  5461  0018C0  ECA2  F00D         	call	___ftpack	;wreg free
  5462  0018C4  C011  F019         	movff	?___ftpack,?___ftdiv
  5463  0018C8  C012  F01A         	movff	?___ftpack+1,?___ftdiv+1
  5464  0018CC  C013  F01B         	movff	?___ftpack+2,?___ftdiv+2
  5465  0018D0  0012               	return	
  5466  0018D2                     __end_of___ftdiv:
  5467                           	opt stack 0
  5468                           tblptru	equ	0xFF8
  5469                           tblptrh	equ	0xFF7
  5470                           tblptrl	equ	0xFF6
  5471                           tablat	equ	0xFF5
  5472                           prodh	equ	0xFF4
  5473                           prodl	equ	0xFF3
  5474                           intcon	equ	0xFF2
  5475                           intcon2	equ	0xFF1
  5476                           intcon3	equ	0xFF0
  5477                           postinc0	equ	0xFEE
  5478                           wreg	equ	0xFE8
  5479                           postdec1	equ	0xFE5
  5480                           fsr1l	equ	0xFE1
  5481                           indf2	equ	0xFDF
  5482                           postinc2	equ	0xFDE
  5483                           postdec2	equ	0xFDD
  5484                           fsr2h	equ	0xFDA
  5485                           fsr2l	equ	0xFD9
  5486                           status	equ	0xFD8
  5487                           
  5488 ;; *************** function ___awtoft *****************
  5489 ;; Defined at:
  5490 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;  c               2   24[COMRAM] int 
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;  sign            1   27[COMRAM] unsigned char 
  5495 ;; Return value:  Size  Location     Type
  5496 ;;                  3   24[COMRAM] float 
  5497 ;; Registers used:
  5498 ;;		wreg, status,2, status,0, cstack
  5499 ;; Tracked objects:
  5500 ;;		On entry : 0/0
  5501 ;;		On exit  : 0/0
  5502 ;;		Unchanged: 0/0
  5503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5504 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5505 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;Total ram usage:        4 bytes
  5509 ;; Hardware stack levels used:    1
  5510 ;; Hardware stack levels required when called:    2
  5511 ;; This function calls:
  5512 ;;		___ftpack
  5513 ;; This function is called by:
  5514 ;;		_dec_to_hex
  5515 ;;		_exp
  5516 ;;		_log
  5517 ;;		_hex_to_dec
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           	psect	text22
  5522  002228                     __ptext22:
  5523                           	opt stack 0
  5524  002228                     ___awtoft:
  5525                           	opt stack 23
  5526                           
  5527                           ;incstack = 0
  5528  002228  0E00               	movlw	0
  5529  00222A  6E1C               	movwf	___awtoft@sign,c
  5530  00222C  AE1A               	btfss	___awtoft@c+1,7,c
  5531  00222E  D006               	goto	l2820
  5532  002230  6C19               	negf	___awtoft@c,c
  5533  002232  1E1A               	comf	___awtoft@c+1,f,c
  5534  002234  B0D8               	btfsc	status,0,c
  5535  002236  2A1A               	incf	___awtoft@c+1,f,c
  5536  002238  0E01               	movlw	1
  5537  00223A  6E1C               	movwf	___awtoft@sign,c
  5538  00223C                     l2820:
  5539  00223C  C019  F011         	movff	___awtoft@c,___ftpack@arg
  5540  002240  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  5541  002244  6A13               	clrf	___ftpack@arg+2,c
  5542  002246  0E8E               	movlw	142
  5543  002248  6E14               	movwf	___ftpack@exp,c
  5544  00224A  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  5545  00224E  ECA2  F00D         	call	___ftpack	;wreg free
  5546  002252  C011  F019         	movff	?___ftpack,?___awtoft
  5547  002256  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  5548  00225A  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  5549  00225E  0012               	return	
  5550  002260                     __end_of___awtoft:
  5551                           	opt stack 0
  5552                           tblptru	equ	0xFF8
  5553                           tblptrh	equ	0xFF7
  5554                           tblptrl	equ	0xFF6
  5555                           tablat	equ	0xFF5
  5556                           prodh	equ	0xFF4
  5557                           prodl	equ	0xFF3
  5558                           intcon	equ	0xFF2
  5559                           intcon2	equ	0xFF1
  5560                           intcon3	equ	0xFF0
  5561                           postinc0	equ	0xFEE
  5562                           wreg	equ	0xFE8
  5563                           postdec1	equ	0xFE5
  5564                           fsr1l	equ	0xFE1
  5565                           indf2	equ	0xFDF
  5566                           postinc2	equ	0xFDE
  5567                           postdec2	equ	0xFDD
  5568                           fsr2h	equ	0xFDA
  5569                           fsr2l	equ	0xFD9
  5570                           status	equ	0xFD8
  5571                           
  5572 ;; *************** function ___lltoft *****************
  5573 ;; Defined at:
  5574 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;  c               4   24[COMRAM] unsigned long 
  5577 ;; Auto vars:     Size  Location     Type
  5578 ;;  exp             1   32[COMRAM] unsigned char 
  5579 ;; Return value:  Size  Location     Type
  5580 ;;                  3   24[COMRAM] float 
  5581 ;; Registers used:
  5582 ;;		wreg, status,2, status,0, cstack
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5588 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5592 ;;Total ram usage:        9 bytes
  5593 ;; Hardware stack levels used:    1
  5594 ;; Hardware stack levels required when called:    2
  5595 ;; This function calls:
  5596 ;;		___ftpack
  5597 ;; This function is called by:
  5598 ;;		_pow
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text23
  5603  001F02                     __ptext23:
  5604                           	opt stack 0
  5605  001F02                     ___lltoft:
  5606                           	opt stack 24
  5607                           
  5608                           ;incstack = 0
  5609  001F02  0E8E               	movlw	142
  5610  001F04  6E21               	movwf	___lltoft@exp,c
  5611  001F06  D006               	goto	l2898
  5612  001F08                     l2896:
  5613  001F08  90D8               	bcf	status,0,c
  5614  001F0A  321C               	rrcf	___lltoft@c+3,f,c
  5615  001F0C  321B               	rrcf	___lltoft@c+2,f,c
  5616  001F0E  321A               	rrcf	___lltoft@c+1,f,c
  5617  001F10  3219               	rrcf	___lltoft@c,f,c
  5618  001F12  2A21               	incf	___lltoft@exp,f,c
  5619  001F14                     l2898:
  5620  001F14  0E00               	movlw	0
  5621  001F16  1419               	andwf	___lltoft@c,w,c
  5622  001F18  6E1D               	movwf	??___lltoft& (0+255),c
  5623  001F1A  0E00               	movlw	0
  5624  001F1C  141A               	andwf	___lltoft@c+1,w,c
  5625  001F1E  6E1E               	movwf	(??___lltoft+1)& (0+255),c
  5626  001F20  0E00               	movlw	0
  5627  001F22  141B               	andwf	___lltoft@c+2,w,c
  5628  001F24  6E1F               	movwf	(??___lltoft+2)& (0+255),c
  5629  001F26  0EFF               	movlw	255
  5630  001F28  141C               	andwf	___lltoft@c+3,w,c
  5631  001F2A  6E20               	movwf	(??___lltoft+3)& (0+255),c
  5632  001F2C  501D               	movf	??___lltoft,w,c
  5633  001F2E  101E               	iorwf	??___lltoft+1,w,c
  5634  001F30  101F               	iorwf	??___lltoft+2,w,c
  5635  001F32  1020               	iorwf	??___lltoft+3,w,c
  5636  001F34  A4D8               	btfss	status,2,c
  5637  001F36  D7E8               	goto	l2896
  5638  001F38  C019  F011         	movff	___lltoft@c,___ftpack@arg
  5639  001F3C  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
  5640  001F40  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
  5641  001F44  C021  F014         	movff	___lltoft@exp,___ftpack@exp
  5642  001F48  0E00               	movlw	0
  5643  001F4A  6E15               	movwf	___ftpack@sign,c
  5644  001F4C  ECA2  F00D         	call	___ftpack	;wreg free
  5645  001F50  C011  F019         	movff	?___ftpack,?___lltoft
  5646  001F54  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
  5647  001F58  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
  5648  001F5C  0012               	return	
  5649  001F5E                     __end_of___lltoft:
  5650                           	opt stack 0
  5651                           tblptru	equ	0xFF8
  5652                           tblptrh	equ	0xFF7
  5653                           tblptrl	equ	0xFF6
  5654                           tablat	equ	0xFF5
  5655                           prodh	equ	0xFF4
  5656                           prodl	equ	0xFF3
  5657                           intcon	equ	0xFF2
  5658                           intcon2	equ	0xFF1
  5659                           intcon3	equ	0xFF0
  5660                           postinc0	equ	0xFEE
  5661                           wreg	equ	0xFE8
  5662                           postdec1	equ	0xFE5
  5663                           fsr1l	equ	0xFE1
  5664                           indf2	equ	0xFDF
  5665                           postinc2	equ	0xFDE
  5666                           postdec2	equ	0xFDD
  5667                           fsr2h	equ	0xFDA
  5668                           fsr2l	equ	0xFD9
  5669                           status	equ	0xFD8
  5670                           
  5671 ;; *************** function ___ftpack *****************
  5672 ;; Defined at:
  5673 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;  arg             3   16[COMRAM] unsigned um
  5676 ;;  exp             1   19[COMRAM] unsigned char 
  5677 ;;  sign            1   20[COMRAM] unsigned char 
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;		None
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  3   16[COMRAM] float 
  5682 ;; Registers used:
  5683 ;;		wreg, status,2, status,0
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5689 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;Total ram usage:        8 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:    1
  5696 ;; This function calls:
  5697 ;;		Nothing
  5698 ;; This function is called by:
  5699 ;;		___altoft
  5700 ;;		___awtoft
  5701 ;;		___ftadd
  5702 ;;		___ftdiv
  5703 ;;		___ftmul
  5704 ;;		___lltoft
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           	psect	text24
  5709  001B44                     __ptext24:
  5710                           	opt stack 0
  5711  001B44                     ___ftpack:
  5712                           	opt stack 22
  5713                           
  5714                           ;incstack = 0
  5715  001B44  5014               	movf	___ftpack@exp,w,c
  5716  001B46  B4D8               	btfsc	status,2,c
  5717  001B48  D005               	goto	l2502
  5718  001B4A  5011               	movf	___ftpack@arg,w,c
  5719  001B4C  1012               	iorwf	___ftpack@arg+1,w,c
  5720  001B4E  1013               	iorwf	___ftpack@arg+2,w,c
  5721  001B50  A4D8               	btfss	status,2,c
  5722  001B52  D00C               	goto	l2508
  5723  001B54                     l2502:
  5724  001B54  0E00               	movlw	0
  5725  001B56  6E11               	movwf	?___ftpack,c
  5726  001B58  0E00               	movlw	0
  5727  001B5A  6E12               	movwf	?___ftpack+1,c
  5728  001B5C  0E00               	movlw	0
  5729  001B5E  6E13               	movwf	?___ftpack+2,c
  5730  001B60  0012               	return	
  5731  001B62                     l2506:
  5732  001B62  2A14               	incf	___ftpack@exp,f,c
  5733  001B64  90D8               	bcf	status,0,c
  5734  001B66  3213               	rrcf	___ftpack@arg+2,f,c
  5735  001B68  3212               	rrcf	___ftpack@arg+1,f,c
  5736  001B6A  3211               	rrcf	___ftpack@arg,f,c
  5737  001B6C                     l2508:
  5738  001B6C  0E00               	movlw	0
  5739  001B6E  1411               	andwf	___ftpack@arg,w,c
  5740  001B70  6E16               	movwf	??___ftpack& (0+255),c
  5741  001B72  0E00               	movlw	0
  5742  001B74  1412               	andwf	___ftpack@arg+1,w,c
  5743  001B76  6E17               	movwf	(??___ftpack+1)& (0+255),c
  5744  001B78  0EFE               	movlw	254
  5745  001B7A  1413               	andwf	___ftpack@arg+2,w,c
  5746  001B7C  6E18               	movwf	(??___ftpack+2)& (0+255),c
  5747  001B7E  5016               	movf	??___ftpack,w,c
  5748  001B80  1017               	iorwf	??___ftpack+1,w,c
  5749  001B82  1018               	iorwf	??___ftpack+2,w,c
  5750  001B84  B4D8               	btfsc	status,2,c
  5751  001B86  D00C               	goto	l2514
  5752  001B88  D7EC               	goto	l2506
  5753  001B8A                     l2510:
  5754  001B8A  2A14               	incf	___ftpack@exp,f,c
  5755  001B8C  0E01               	movlw	1
  5756  001B8E  2611               	addwf	___ftpack@arg,f,c
  5757  001B90  0E00               	movlw	0
  5758  001B92  2212               	addwfc	___ftpack@arg+1,f,c
  5759  001B94  0E00               	movlw	0
  5760  001B96  2213               	addwfc	___ftpack@arg+2,f,c
  5761  001B98  90D8               	bcf	status,0,c
  5762  001B9A  3213               	rrcf	___ftpack@arg+2,f,c
  5763  001B9C  3212               	rrcf	___ftpack@arg+1,f,c
  5764  001B9E  3211               	rrcf	___ftpack@arg,f,c
  5765  001BA0                     l2514:
  5766  001BA0  0E00               	movlw	0
  5767  001BA2  1411               	andwf	___ftpack@arg,w,c
  5768  001BA4  6E16               	movwf	??___ftpack& (0+255),c
  5769  001BA6  0E00               	movlw	0
  5770  001BA8  1412               	andwf	___ftpack@arg+1,w,c
  5771  001BAA  6E17               	movwf	(??___ftpack+1)& (0+255),c
  5772  001BAC  0EFF               	movlw	255
  5773  001BAE  1413               	andwf	___ftpack@arg+2,w,c
  5774  001BB0  6E18               	movwf	(??___ftpack+2)& (0+255),c
  5775  001BB2  5016               	movf	??___ftpack,w,c
  5776  001BB4  1017               	iorwf	??___ftpack+1,w,c
  5777  001BB6  1018               	iorwf	??___ftpack+2,w,c
  5778  001BB8  B4D8               	btfsc	status,2,c
  5779  001BBA  D006               	goto	l2518
  5780  001BBC  D7E6               	goto	l2510
  5781  001BBE                     l2516:
  5782  001BBE  0614               	decf	___ftpack@exp,f,c
  5783  001BC0  90D8               	bcf	status,0,c
  5784  001BC2  3611               	rlcf	___ftpack@arg,f,c
  5785  001BC4  3612               	rlcf	___ftpack@arg+1,f,c
  5786  001BC6  3613               	rlcf	___ftpack@arg+2,f,c
  5787  001BC8                     l2518:
  5788  001BC8  BE12               	btfsc	___ftpack@arg+1,7,c
  5789  001BCA  D003               	goto	l629
  5790  001BCC  0E02               	movlw	2
  5791  001BCE  6014               	cpfslt	___ftpack@exp,c
  5792  001BD0  D7F6               	goto	l2516
  5793  001BD2                     l629:
  5794  001BD2  A014               	btfss	___ftpack@exp,0,c
  5795  001BD4  9E12               	bcf	___ftpack@arg+1,7,c
  5796  001BD6  90D8               	bcf	status,0,c
  5797  001BD8  3214               	rrcf	___ftpack@exp,f,c
  5798  001BDA  5014               	movf	___ftpack@exp,w,c
  5799  001BDC  1213               	iorwf	___ftpack@arg+2,f,c
  5800  001BDE  5015               	movf	___ftpack@sign,w,c
  5801  001BE0  A4D8               	btfss	status,2,c
  5802  001BE2  8E13               	bsf	___ftpack@arg+2,7,c
  5803  001BE4  C011  F011         	movff	___ftpack@arg,?___ftpack
  5804  001BE8  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  5805  001BEC  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  5806  001BF0  0012               	return	
  5807  001BF2                     __end_of___ftpack:
  5808                           	opt stack 0
  5809                           tblptru	equ	0xFF8
  5810                           tblptrh	equ	0xFF7
  5811                           tblptrl	equ	0xFF6
  5812                           tablat	equ	0xFF5
  5813                           prodh	equ	0xFF4
  5814                           prodl	equ	0xFF3
  5815                           intcon	equ	0xFF2
  5816                           intcon2	equ	0xFF1
  5817                           intcon3	equ	0xFF0
  5818                           postinc0	equ	0xFEE
  5819                           wreg	equ	0xFE8
  5820                           postdec1	equ	0xFE5
  5821                           fsr1l	equ	0xFE1
  5822                           indf2	equ	0xFDF
  5823                           postinc2	equ	0xFDE
  5824                           postdec2	equ	0xFDD
  5825                           fsr2h	equ	0xFDA
  5826                           fsr2l	equ	0xFD9
  5827                           status	equ	0xFD8
  5828                           
  5829 ;; *************** function ___awdiv *****************
  5830 ;; Defined at:
  5831 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;  dividend        2   16[COMRAM] int 
  5834 ;;  divisor         2   18[COMRAM] int 
  5835 ;; Auto vars:     Size  Location     Type
  5836 ;;  quotient        2   22[COMRAM] int 
  5837 ;;  sign            1   21[COMRAM] unsigned char 
  5838 ;;  counter         1   20[COMRAM] unsigned char 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  2   16[COMRAM] int 
  5841 ;; Registers used:
  5842 ;;		wreg, status,2, status,0
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5848 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5851 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5852 ;;Total ram usage:        8 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    1
  5855 ;; This function calls:
  5856 ;;		Nothing
  5857 ;; This function is called by:
  5858 ;;		_dec_to_hex
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           	psect	text25
  5863  001D12                     __ptext25:
  5864                           	opt stack 0
  5865  001D12                     ___awdiv:
  5866                           	opt stack 26
  5867                           
  5868                           ;incstack = 0
  5869  001D12  0E00               	movlw	0
  5870  001D14  6E16               	movwf	___awdiv@sign,c
  5871  001D16  AE14               	btfss	___awdiv@divisor+1,7,c
  5872  001D18  D006               	goto	l3040
  5873  001D1A  6C13               	negf	___awdiv@divisor,c
  5874  001D1C  1E14               	comf	___awdiv@divisor+1,f,c
  5875  001D1E  B0D8               	btfsc	status,0,c
  5876  001D20  2A14               	incf	___awdiv@divisor+1,f,c
  5877  001D22  0E01               	movlw	1
  5878  001D24  6E16               	movwf	___awdiv@sign,c
  5879  001D26                     l3040:
  5880  001D26  AE12               	btfss	___awdiv@dividend+1,7,c
  5881  001D28  D006               	goto	l3046
  5882  001D2A  6C11               	negf	___awdiv@dividend,c
  5883  001D2C  1E12               	comf	___awdiv@dividend+1,f,c
  5884  001D2E  B0D8               	btfsc	status,0,c
  5885  001D30  2A12               	incf	___awdiv@dividend+1,f,c
  5886  001D32  0E01               	movlw	1
  5887  001D34  1A16               	xorwf	___awdiv@sign,f,c
  5888  001D36                     l3046:
  5889  001D36  0E00               	movlw	0
  5890  001D38  6E18               	movwf	___awdiv@quotient+1,c
  5891  001D3A  0E00               	movlw	0
  5892  001D3C  6E17               	movwf	___awdiv@quotient,c
  5893  001D3E  5013               	movf	___awdiv@divisor,w,c
  5894  001D40  1014               	iorwf	___awdiv@divisor+1,w,c
  5895  001D42  B4D8               	btfsc	status,2,c
  5896  001D44  D01C               	goto	l3068
  5897  001D46  0E01               	movlw	1
  5898  001D48  6E15               	movwf	___awdiv@counter,c
  5899  001D4A  D004               	goto	l3054
  5900  001D4C                     l3052:
  5901  001D4C  90D8               	bcf	status,0,c
  5902  001D4E  3613               	rlcf	___awdiv@divisor,f,c
  5903  001D50  3614               	rlcf	___awdiv@divisor+1,f,c
  5904  001D52  2A15               	incf	___awdiv@counter,f,c
  5905  001D54                     l3054:
  5906  001D54  AE14               	btfss	___awdiv@divisor+1,7,c
  5907  001D56  D7FA               	goto	l3052
  5908  001D58                     l3056:
  5909  001D58  90D8               	bcf	status,0,c
  5910  001D5A  3617               	rlcf	___awdiv@quotient,f,c
  5911  001D5C  3618               	rlcf	___awdiv@quotient+1,f,c
  5912  001D5E  5013               	movf	___awdiv@divisor,w,c
  5913  001D60  5C11               	subwf	___awdiv@dividend,w,c
  5914  001D62  5014               	movf	___awdiv@divisor+1,w,c
  5915  001D64  5812               	subwfb	___awdiv@dividend+1,w,c
  5916  001D66  A0D8               	btfss	status,0,c
  5917  001D68  D005               	goto	l3064
  5918  001D6A  5013               	movf	___awdiv@divisor,w,c
  5919  001D6C  5E11               	subwf	___awdiv@dividend,f,c
  5920  001D6E  5014               	movf	___awdiv@divisor+1,w,c
  5921  001D70  5A12               	subwfb	___awdiv@dividend+1,f,c
  5922  001D72  8017               	bsf	___awdiv@quotient,0,c
  5923  001D74                     l3064:
  5924  001D74  90D8               	bcf	status,0,c
  5925  001D76  3214               	rrcf	___awdiv@divisor+1,f,c
  5926  001D78  3213               	rrcf	___awdiv@divisor,f,c
  5927  001D7A  2E15               	decfsz	___awdiv@counter,f,c
  5928  001D7C  D7ED               	goto	l3056
  5929  001D7E                     l3068:
  5930  001D7E  5016               	movf	___awdiv@sign,w,c
  5931  001D80  B4D8               	btfsc	status,2,c
  5932  001D82  D004               	goto	l3072
  5933  001D84  6C17               	negf	___awdiv@quotient,c
  5934  001D86  1E18               	comf	___awdiv@quotient+1,f,c
  5935  001D88  B0D8               	btfsc	status,0,c
  5936  001D8A  2A18               	incf	___awdiv@quotient+1,f,c
  5937  001D8C                     l3072:
  5938  001D8C  C017  F011         	movff	___awdiv@quotient,?___awdiv
  5939  001D90  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  5940  001D94  0012               	return	
  5941  001D96                     __end_of___awdiv:
  5942                           	opt stack 0
  5943                           tblptru	equ	0xFF8
  5944                           tblptrh	equ	0xFF7
  5945                           tblptrl	equ	0xFF6
  5946                           tablat	equ	0xFF5
  5947                           prodh	equ	0xFF4
  5948                           prodl	equ	0xFF3
  5949                           intcon	equ	0xFF2
  5950                           intcon2	equ	0xFF1
  5951                           intcon3	equ	0xFF0
  5952                           postinc0	equ	0xFEE
  5953                           wreg	equ	0xFE8
  5954                           postdec1	equ	0xFE5
  5955                           fsr1l	equ	0xFE1
  5956                           indf2	equ	0xFDF
  5957                           postinc2	equ	0xFDE
  5958                           postdec2	equ	0xFDD
  5959                           fsr2h	equ	0xFDA
  5960                           fsr2l	equ	0xFD9
  5961                           status	equ	0xFD8
  5962                           
  5963 ;; *************** function _read_colorsensor *****************
  5964 ;; Defined at:
  5965 ;;		line 437 in file "main.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;  red             2   19[COMRAM] PTR unsigned char 
  5968 ;;		 -> init_operation@red(2), 
  5969 ;;  green           2   21[COMRAM] PTR unsigned char 
  5970 ;;		 -> init_operation@green(2), 
  5971 ;;  blue            2   23[COMRAM] PTR unsigned char 
  5972 ;;		 -> init_operation@blue(2), 
  5973 ;;  clear           2   25[COMRAM] PTR unsigned char 
  5974 ;;		 -> init_operation@clear(2), 
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;		None
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  1    wreg      void 
  5979 ;; Registers used:
  5980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5986 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;Total ram usage:        8 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:    3
  5993 ;; This function calls:
  5994 ;;		_I2C_Master_Read
  5995 ;;		_I2C_Master_Start
  5996 ;;		_I2C_Master_Stop
  5997 ;;		_I2C_Master_Write
  5998 ;; This function is called by:
  5999 ;;		_init_operation
  6000 ;; This function uses a non-reentrant model
  6001 ;;
  6002                           
  6003                           	psect	text26
  6004  0016FE                     __ptext26:
  6005                           	opt stack 0
  6006  0016FE                     _read_colorsensor:
  6007                           	opt stack 26
  6008                           
  6009                           ;main.c: 439: I2C_Master_Start();
  6010                           
  6011                           ;incstack = 0
  6012  0016FE  EC9D  F011         	call	_I2C_Master_Start	;wreg free
  6013                           
  6014                           ;main.c: 440: I2C_Master_Write(0b01010010);
  6015  001702  0E00               	movlw	0
  6016  001704  6E13               	movwf	I2C_Master_Write@d+1,c
  6017  001706  0E52               	movlw	82
  6018  001708  6E12               	movwf	I2C_Master_Write@d,c
  6019  00170A  EC94  F011         	call	_I2C_Master_Write	;wreg free
  6020                           
  6021                           ;main.c: 441: I2C_Master_Write(0b10000000);
  6022  00170E  0E00               	movlw	0
  6023  001710  6E13               	movwf	I2C_Master_Write@d+1,c
  6024  001712  0E80               	movlw	128
  6025  001714  6E12               	movwf	I2C_Master_Write@d,c
  6026  001716  EC94  F011         	call	_I2C_Master_Write	;wreg free
  6027                           
  6028                           ;main.c: 442: I2C_Master_Write(0b00000011);
  6029  00171A  0E00               	movlw	0
  6030  00171C  6E13               	movwf	I2C_Master_Write@d+1,c
  6031  00171E  0E03               	movlw	3
  6032  001720  6E12               	movwf	I2C_Master_Write@d,c
  6033  001722  EC94  F011         	call	_I2C_Master_Write	;wreg free
  6034                           
  6035                           ;main.c: 443: I2C_Master_Stop();
  6036  001726  EC99  F011         	call	_I2C_Master_Stop	;wreg free
  6037                           
  6038                           ;main.c: 446: I2C_Master_Start();
  6039  00172A  EC9D  F011         	call	_I2C_Master_Start	;wreg free
  6040                           
  6041                           ;main.c: 447: I2C_Master_Write(0b01010010);
  6042  00172E  0E00               	movlw	0
  6043  001730  6E13               	movwf	I2C_Master_Write@d+1,c
  6044  001732  0E52               	movlw	82
  6045  001734  6E12               	movwf	I2C_Master_Write@d,c
  6046  001736  EC94  F011         	call	_I2C_Master_Write	;wreg free
  6047                           
  6048                           ;main.c: 448: I2C_Master_Write(0b10110100);
  6049  00173A  0E00               	movlw	0
  6050  00173C  6E13               	movwf	I2C_Master_Write@d+1,c
  6051  00173E  0EB4               	movlw	180
  6052  001740  6E12               	movwf	I2C_Master_Write@d,c
  6053  001742  EC94  F011         	call	_I2C_Master_Write	;wreg free
  6054                           
  6055                           ;main.c: 449: I2C_Master_Start();
  6056  001746  EC9D  F011         	call	_I2C_Master_Start	;wreg free
  6057                           
  6058                           ;main.c: 450: I2C_Master_Write(0b01010011);
  6059  00174A  0E00               	movlw	0
  6060  00174C  6E13               	movwf	I2C_Master_Write@d+1,c
  6061  00174E  0E53               	movlw	83
  6062  001750  6E12               	movwf	I2C_Master_Write@d,c
  6063  001752  EC94  F011         	call	_I2C_Master_Write	;wreg free
  6064                           
  6065                           ;main.c: 452: clear[1] = I2C_Master_Read(1);
  6066  001756  EE20 F001          	lfsr	2,1
  6067  00175A  501A               	movf	read_colorsensor@clear,w,c
  6068  00175C  26D9               	addwf	fsr2l,f,c
  6069  00175E  501B               	movf	read_colorsensor@clear+1,w,c
  6070  001760  22DA               	addwfc	fsr2h,f,c
  6071  001762  0E01               	movlw	1
  6072  001764  EC30  F011         	call	_I2C_Master_Read
  6073  001768  6EDF               	movwf	indf2,c
  6074                           
  6075                           ;main.c: 453: clear[0] = I2C_Master_Read(1);
  6076  00176A  0E01               	movlw	1
  6077  00176C  EC30  F011         	call	_I2C_Master_Read
  6078  001770  C01A  FFD9         	movff	read_colorsensor@clear,fsr2l
  6079  001774  C01B  FFDA         	movff	read_colorsensor@clear+1,fsr2h
  6080  001778  6EDF               	movwf	indf2,c
  6081                           
  6082                           ;main.c: 455: red[1] = I2C_Master_Read(1);
  6083  00177A  EE20 F001          	lfsr	2,1
  6084  00177E  5014               	movf	read_colorsensor@red,w,c
  6085  001780  26D9               	addwf	fsr2l,f,c
  6086  001782  5015               	movf	read_colorsensor@red+1,w,c
  6087  001784  22DA               	addwfc	fsr2h,f,c
  6088  001786  0E01               	movlw	1
  6089  001788  EC30  F011         	call	_I2C_Master_Read
  6090  00178C  6EDF               	movwf	indf2,c
  6091                           
  6092                           ;main.c: 456: red[0] = I2C_Master_Read(1);
  6093  00178E  0E01               	movlw	1
  6094  001790  EC30  F011         	call	_I2C_Master_Read
  6095  001794  C014  FFD9         	movff	read_colorsensor@red,fsr2l
  6096  001798  C015  FFDA         	movff	read_colorsensor@red+1,fsr2h
  6097  00179C  6EDF               	movwf	indf2,c
  6098                           
  6099                           ;main.c: 458: green[1] = I2C_Master_Read(1);
  6100  00179E  EE20 F001          	lfsr	2,1
  6101  0017A2  5016               	movf	read_colorsensor@green,w,c
  6102  0017A4  26D9               	addwf	fsr2l,f,c
  6103  0017A6  5017               	movf	read_colorsensor@green+1,w,c
  6104  0017A8  22DA               	addwfc	fsr2h,f,c
  6105  0017AA  0E01               	movlw	1
  6106  0017AC  EC30  F011         	call	_I2C_Master_Read
  6107  0017B0  6EDF               	movwf	indf2,c
  6108                           
  6109                           ;main.c: 459: green[0] = I2C_Master_Read(1);
  6110  0017B2  0E01               	movlw	1
  6111  0017B4  EC30  F011         	call	_I2C_Master_Read
  6112  0017B8  C016  FFD9         	movff	read_colorsensor@green,fsr2l
  6113  0017BC  C017  FFDA         	movff	read_colorsensor@green+1,fsr2h
  6114  0017C0  6EDF               	movwf	indf2,c
  6115                           
  6116                           ;main.c: 461: blue[1] = I2C_Master_Read(1);
  6117  0017C2  EE20 F001          	lfsr	2,1
  6118  0017C6  5018               	movf	read_colorsensor@blue,w,c
  6119  0017C8  26D9               	addwf	fsr2l,f,c
  6120  0017CA  5019               	movf	read_colorsensor@blue+1,w,c
  6121  0017CC  22DA               	addwfc	fsr2h,f,c
  6122  0017CE  0E01               	movlw	1
  6123  0017D0  EC30  F011         	call	_I2C_Master_Read
  6124  0017D4  6EDF               	movwf	indf2,c
  6125                           
  6126                           ;main.c: 462: blue[0] = I2C_Master_Read(0);
  6127  0017D6  0E00               	movlw	0
  6128  0017D8  EC30  F011         	call	_I2C_Master_Read
  6129  0017DC  C018  FFD9         	movff	read_colorsensor@blue,fsr2l
  6130  0017E0  C019  FFDA         	movff	read_colorsensor@blue+1,fsr2h
  6131  0017E4  6EDF               	movwf	indf2,c
  6132                           
  6133                           ;main.c: 464: I2C_Master_Stop();
  6134  0017E6  EC99  F011         	call	_I2C_Master_Stop	;wreg free
  6135  0017EA  0012               	return		;funcret
  6136  0017EC                     __end_of_read_colorsensor:
  6137                           	opt stack 0
  6138                           tblptru	equ	0xFF8
  6139                           tblptrh	equ	0xFF7
  6140                           tblptrl	equ	0xFF6
  6141                           tablat	equ	0xFF5
  6142                           prodh	equ	0xFF4
  6143                           prodl	equ	0xFF3
  6144                           intcon	equ	0xFF2
  6145                           intcon2	equ	0xFF1
  6146                           intcon3	equ	0xFF0
  6147                           postinc0	equ	0xFEE
  6148                           wreg	equ	0xFE8
  6149                           postdec1	equ	0xFE5
  6150                           fsr1l	equ	0xFE1
  6151                           indf2	equ	0xFDF
  6152                           postinc2	equ	0xFDE
  6153                           postdec2	equ	0xFDD
  6154                           fsr2h	equ	0xFDA
  6155                           fsr2l	equ	0xFD9
  6156                           status	equ	0xFD8
  6157                           
  6158 ;; *************** function _initLCD *****************
  6159 ;; Defined at:
  6160 ;;		line 14 in file "lcd.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;		None
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;		None
  6165 ;; Return value:  Size  Location     Type
  6166 ;;                  1    wreg      void 
  6167 ;; Registers used:
  6168 ;;		wreg, status,2, status,0, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 0/0
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6176 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;Total ram usage:        1 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:    3
  6181 ;; This function calls:
  6182 ;;		_lcdInst
  6183 ;; This function is called by:
  6184 ;;		_main
  6185 ;;		_init_operation
  6186 ;;		_Motors
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text27
  6191  0020A2                     __ptext27:
  6192                           	opt stack 0
  6193  0020A2                     _initLCD:
  6194                           	opt stack 26
  6195                           
  6196                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  6197                           
  6198                           ;incstack = 0
  6199  0020A2  0E31               	movlw	49
  6200  0020A4  6E14               	movwf	??_initLCD& (0+255),c
  6201  0020A6  0EB2               	movlw	178
  6202  0020A8                     u3597:
  6203  0020A8  2EE8               	decfsz	wreg,f,c
  6204  0020AA  D7FE               	bra	u3597
  6205  0020AC  2E14               	decfsz	??_initLCD& (0+255),f,c
  6206  0020AE  D7FC               	bra	u3597
  6207  0020B0  D000               	nop2	
  6208                           
  6209                           ;lcd.c: 16: lcdInst(0b00110011);
  6210  0020B2  0E33               	movlw	51
  6211  0020B4  EC8E  F011         	call	_lcdInst
  6212                           
  6213                           ;lcd.c: 17: lcdInst(0b00110010);
  6214  0020B8  0E32               	movlw	50
  6215  0020BA  EC8E  F011         	call	_lcdInst
  6216                           
  6217                           ;lcd.c: 18: lcdInst(0b00101000);
  6218  0020BE  0E28               	movlw	40
  6219  0020C0  EC8E  F011         	call	_lcdInst
  6220                           
  6221                           ;lcd.c: 19: lcdInst(0b00001111);
  6222  0020C4  0E0F               	movlw	15
  6223  0020C6  EC8E  F011         	call	_lcdInst
  6224                           
  6225                           ;lcd.c: 20: lcdInst(0b00000110);
  6226  0020CA  0E06               	movlw	6
  6227  0020CC  EC8E  F011         	call	_lcdInst
  6228                           
  6229                           ;lcd.c: 21: lcdInst(0b00000001);
  6230  0020D0  0E01               	movlw	1
  6231  0020D2  EC8E  F011         	call	_lcdInst
  6232                           
  6233                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  6234  0020D6  0E31               	movlw	49
  6235  0020D8  6E14               	movwf	??_initLCD& (0+255),c
  6236  0020DA  0EB2               	movlw	178
  6237  0020DC                     u3607:
  6238  0020DC  2EE8               	decfsz	wreg,f,c
  6239  0020DE  D7FE               	bra	u3607
  6240  0020E0  2E14               	decfsz	??_initLCD& (0+255),f,c
  6241  0020E2  D7FC               	bra	u3607
  6242  0020E4  D000               	nop2	
  6243  0020E6  0012               	return		;funcret
  6244  0020E8                     __end_of_initLCD:
  6245                           	opt stack 0
  6246                           tblptru	equ	0xFF8
  6247                           tblptrh	equ	0xFF7
  6248                           tblptrl	equ	0xFF6
  6249                           tablat	equ	0xFF5
  6250                           prodh	equ	0xFF4
  6251                           prodl	equ	0xFF3
  6252                           intcon	equ	0xFF2
  6253                           intcon2	equ	0xFF1
  6254                           intcon3	equ	0xFF0
  6255                           postinc0	equ	0xFEE
  6256                           wreg	equ	0xFE8
  6257                           postdec1	equ	0xFE5
  6258                           fsr1l	equ	0xFE1
  6259                           indf2	equ	0xFDF
  6260                           postinc2	equ	0xFDE
  6261                           postdec2	equ	0xFDD
  6262                           fsr2h	equ	0xFDA
  6263                           fsr2l	equ	0xFD9
  6264                           status	equ	0xFD8
  6265                           
  6266 ;; *************** function _delay *****************
  6267 ;; Defined at:
  6268 ;;		line 196 in file "main.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;  seconds         2   16[COMRAM] int 
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;  i               1   21[COMRAM] unsigned char 
  6273 ;;  i               2   19[COMRAM] int 
  6274 ;; Return value:  Size  Location     Type
  6275 ;;                  1    wreg      void 
  6276 ;; Registers used:
  6277 ;;		wreg, status,2, status,0
  6278 ;; Tracked objects:
  6279 ;;		On entry : 0/0
  6280 ;;		On exit  : 0/0
  6281 ;;		Unchanged: 0/0
  6282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6283 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6284 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6285 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6286 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;Total ram usage:        6 bytes
  6288 ;; Hardware stack levels used:    1
  6289 ;; Hardware stack levels required when called:    1
  6290 ;; This function calls:
  6291 ;;		Nothing
  6292 ;; This function is called by:
  6293 ;;		_init_operation
  6294 ;;		_operation_end
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           	psect	text28
  6299  0020E8                     __ptext28:
  6300                           	opt stack 0
  6301  0020E8                     _delay:
  6302                           	opt stack 28
  6303                           
  6304                           ;main.c: 197: for (int i = 0; i <= seconds; i ++) {
  6305                           
  6306                           ;incstack = 0
  6307  0020E8  0E00               	movlw	0
  6308  0020EA  6E15               	movwf	delay@i+1,c
  6309  0020EC  0E00               	movlw	0
  6310  0020EE  6E14               	movwf	delay@i,c
  6311  0020F0  D012               	goto	l3354
  6312  0020F2                     l3342:
  6313                           
  6314                           ;main.c: 198: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  6315  0020F2  0E00               	movlw	0
  6316  0020F4  6E16               	movwf	delay@i_450,c
  6317  0020F6                     l3344:
  6318  0020F6  0E63               	movlw	99
  6319  0020F8  6416               	cpfsgt	delay@i_450,c
  6320  0020FA  D001               	goto	l3348
  6321  0020FC  D00A               	goto	l3352
  6322  0020FE                     l3348:
  6323  0020FE  0E21               	movlw	33
  6324  002100  6E13               	movwf	??_delay& (0+255),c
  6325  002102  0E76               	movlw	118
  6326  002104                     u3617:
  6327  002104  2EE8               	decfsz	wreg,f,c
  6328  002106  D7FE               	bra	u3617
  6329  002108  2E13               	decfsz	??_delay& (0+255),f,c
  6330  00210A  D7FC               	bra	u3617
  6331  00210C  D000               	nop2	
  6332  00210E  2A16               	incf	delay@i_450,f,c
  6333  002110  D7F2               	goto	l3344
  6334  002112                     l3352:
  6335  002112  4A14               	infsnz	delay@i,f,c
  6336  002114  2A15               	incf	delay@i+1,f,c
  6337  002116                     l3354:
  6338  002116  5014               	movf	delay@i,w,c
  6339  002118  5C11               	subwf	delay@seconds,w,c
  6340  00211A  5012               	movf	delay@seconds+1,w,c
  6341  00211C  0A80               	xorlw	128
  6342  00211E  6E13               	movwf	??_delay& (0+255),c
  6343  002120  5015               	movf	delay@i+1,w,c
  6344  002122  0A80               	xorlw	128
  6345  002124  5813               	subwfb	??_delay& (0+255),w,c
  6346  002126  A0D8               	btfss	status,0,c
  6347  002128  0012               	return	
  6348  00212A  D7E3               	goto	l3342
  6349  00212C                     __end_of_delay:
  6350                           	opt stack 0
  6351                           tblptru	equ	0xFF8
  6352                           tblptrh	equ	0xFF7
  6353                           tblptrl	equ	0xFF6
  6354                           tablat	equ	0xFF5
  6355                           prodh	equ	0xFF4
  6356                           prodl	equ	0xFF3
  6357                           intcon	equ	0xFF2
  6358                           intcon2	equ	0xFF1
  6359                           intcon3	equ	0xFF0
  6360                           postinc0	equ	0xFEE
  6361                           wreg	equ	0xFE8
  6362                           postdec1	equ	0xFE5
  6363                           fsr1l	equ	0xFE1
  6364                           indf2	equ	0xFDF
  6365                           postinc2	equ	0xFDE
  6366                           postdec2	equ	0xFDD
  6367                           fsr2h	equ	0xFDA
  6368                           fsr2l	equ	0xFD9
  6369                           status	equ	0xFD8
  6370                           
  6371 ;; *************** function _date_time *****************
  6372 ;; Defined at:
  6373 ;;		line 373 in file "main.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;  time            2   69[BANK0 ] PTR unsigned char 
  6376 ;;		 -> main@time(7), 
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;  i               1  107[COMRAM] unsigned char 
  6379 ;; Return value:  Size  Location     Type
  6380 ;;                  1    wreg      void 
  6381 ;; Registers used:
  6382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6383 ;; Tracked objects:
  6384 ;;		On entry : 0/0
  6385 ;;		On exit  : 0/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6388 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;Total ram usage:        6 bytes
  6393 ;; Hardware stack levels used:    1
  6394 ;; Hardware stack levels required when called:    4
  6395 ;; This function calls:
  6396 ;;		_I2C_Master_Read
  6397 ;;		_I2C_Master_Start
  6398 ;;		_I2C_Master_Stop
  6399 ;;		_I2C_Master_Write
  6400 ;;		_lcdInst
  6401 ;;		_printf
  6402 ;; This function is called by:
  6403 ;;		_main
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text29
  6408  000F68                     __ptext29:
  6409                           	opt stack 0
  6410  000F68                     _date_time:
  6411                           	opt stack 26
  6412                           
  6413                           ;main.c: 375: I2C_Master_Start();
  6414                           
  6415                           ;incstack = 0
  6416  000F68  EC9D  F011         	call	_I2C_Master_Start	;wreg free
  6417                           
  6418                           ;main.c: 376: I2C_Master_Write(0b11010000);
  6419  000F6C  0E00               	movlw	0
  6420  000F6E  6E13               	movwf	I2C_Master_Write@d+1,c
  6421  000F70  0ED0               	movlw	208
  6422  000F72  6E12               	movwf	I2C_Master_Write@d,c
  6423  000F74  EC94  F011         	call	_I2C_Master_Write	;wreg free
  6424                           
  6425                           ;main.c: 377: I2C_Master_Write(0x00);
  6426  000F78  0E00               	movlw	0
  6427  000F7A  6E13               	movwf	I2C_Master_Write@d+1,c
  6428  000F7C  0E00               	movlw	0
  6429  000F7E  6E12               	movwf	I2C_Master_Write@d,c
  6430  000F80  EC94  F011         	call	_I2C_Master_Write	;wreg free
  6431                           
  6432                           ;main.c: 378: I2C_Master_Stop();
  6433  000F84  EC99  F011         	call	_I2C_Master_Stop	;wreg free
  6434                           
  6435                           ;main.c: 381: I2C_Master_Start();
  6436  000F88  EC9D  F011         	call	_I2C_Master_Start	;wreg free
  6437                           
  6438                           ;main.c: 382: I2C_Master_Write(0b11010001);
  6439  000F8C  0E00               	movlw	0
  6440  000F8E  6E13               	movwf	I2C_Master_Write@d+1,c
  6441  000F90  0ED1               	movlw	209
  6442  000F92  6E12               	movwf	I2C_Master_Write@d,c
  6443  000F94  EC94  F011         	call	_I2C_Master_Write	;wreg free
  6444                           
  6445                           ;main.c: 383: for(unsigned char i=0;i<0x06;i++){
  6446  000F98  0E00               	movlw	0
  6447  000F9A  6E6C               	movwf	date_time@i,c
  6448  000F9C                     l3538:
  6449  000F9C  0E05               	movlw	5
  6450  000F9E  646C               	cpfsgt	date_time@i,c
  6451  000FA0  D001               	goto	l3542
  6452  000FA2  D010               	goto	l3548
  6453  000FA4                     l3542:
  6454                           
  6455                           ;main.c: 384: time[i] = I2C_Master_Read(1);
  6456  000FA4  506C               	movf	date_time@i,w,c
  6457  000FA6  0D01               	mullw	1
  6458  000FA8  50F3               	movf	prodl,w,c
  6459  000FAA  0100               	movlb	0	; () banked
  6460  000FAC  25C5               	addwf	date_time@time& (0+255),w,b
  6461  000FAE  6ED9               	movwf	fsr2l,c
  6462  000FB0  50F4               	movf	prodh,w,c
  6463  000FB2  0100               	movlb	0	; () banked
  6464  000FB4  21C6               	addwfc	(date_time@time+1)& (0+255),w,b
  6465  000FB6  6EDA               	movwf	fsr2h,c
  6466  000FB8  0E01               	movlw	1
  6467  000FBA  EC30  F011         	call	_I2C_Master_Read
  6468  000FBE  6EDF               	movwf	indf2,c
  6469  000FC0  2A6C               	incf	date_time@i,f,c
  6470  000FC2  D7EC               	goto	l3538
  6471  000FC4                     l3548:
  6472                           
  6473                           ;main.c: 385: }
  6474                           ;main.c: 386: time[6] = I2C_Master_Read(0);
  6475  000FC4  0100               	movlb	0	; () banked
  6476  000FC6  EE20 F006          	lfsr	2,6
  6477  000FCA  51C5               	movf	date_time@time& (0+255),w,b
  6478  000FCC  26D9               	addwf	fsr2l,f,c
  6479  000FCE  51C6               	movf	(date_time@time+1)& (0+255),w,b
  6480  000FD0  22DA               	addwfc	fsr2h,f,c
  6481  000FD2  0E00               	movlw	0
  6482  000FD4  EC30  F011         	call	_I2C_Master_Read
  6483  000FD8  6EDF               	movwf	indf2,c
  6484                           
  6485                           ;main.c: 387: I2C_Master_Stop();
  6486  000FDA  EC99  F011         	call	_I2C_Master_Stop	;wreg free
  6487                           
  6488                           ;main.c: 390: lcdInst(0b10000000);;
  6489  000FDE  0E80               	movlw	128
  6490  000FE0  EC8E  F011         	call	_lcdInst
  6491                           
  6492                           ;main.c: 391: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  6493  000FE4  0EED               	movlw	low STR_20
  6494  000FE6  0100               	movlb	0	; () banked
  6495  000FE8  6FAF               	movwf	printf@f& (0+255),b
  6496  000FEA  0EFE               	movlw	high STR_20
  6497  000FEC  0100               	movlb	0	; () banked
  6498  000FEE  6FB0               	movwf	(printf@f+1)& (0+255),b
  6499  000FF0  0100               	movlb	0	; () banked
  6500  000FF2  EE20 F005          	lfsr	2,5
  6501  000FF6  51C5               	movf	date_time@time& (0+255),w,b
  6502  000FF8  26D9               	addwf	fsr2l,f,c
  6503  000FFA  51C6               	movf	(date_time@time+1)& (0+255),w,b
  6504  000FFC  22DA               	addwfc	fsr2h,f,c
  6505  000FFE  50DF               	movf	indf2,w,c
  6506  001000  0100               	movlb	0	; () banked
  6507  001002  6FC7               	movwf	??_date_time& (0+255),b
  6508  001004  0100               	movlb	0	; () banked
  6509  001006  51C7               	movf	??_date_time& (0+255),w,b
  6510  001008  0100               	movlb	0	; () banked
  6511  00100A  6FB1               	movwf	(?_printf+2)& (0+255),b
  6512  00100C  6BB2               	clrf	(?_printf+3)& (0+255),b
  6513  00100E  0100               	movlb	0	; () banked
  6514  001010  EE20 F004          	lfsr	2,4
  6515  001014  51C5               	movf	date_time@time& (0+255),w,b
  6516  001016  26D9               	addwf	fsr2l,f,c
  6517  001018  51C6               	movf	(date_time@time+1)& (0+255),w,b
  6518  00101A  22DA               	addwfc	fsr2h,f,c
  6519  00101C  50DF               	movf	indf2,w,c
  6520  00101E  0100               	movlb	0	; () banked
  6521  001020  6FC8               	movwf	(??_date_time+1)& (0+255),b
  6522  001022  0100               	movlb	0	; () banked
  6523  001024  51C8               	movf	(??_date_time+1)& (0+255),w,b
  6524  001026  0100               	movlb	0	; () banked
  6525  001028  6FB3               	movwf	(?_printf+4)& (0+255),b
  6526  00102A  6BB4               	clrf	(?_printf+5)& (0+255),b
  6527  00102C  0100               	movlb	0	; () banked
  6528  00102E  EE20 F006          	lfsr	2,6
  6529  001032  51C5               	movf	date_time@time& (0+255),w,b
  6530  001034  26D9               	addwf	fsr2l,f,c
  6531  001036  51C6               	movf	(date_time@time+1)& (0+255),w,b
  6532  001038  22DA               	addwfc	fsr2h,f,c
  6533  00103A  50DF               	movf	indf2,w,c
  6534  00103C  0100               	movlb	0	; () banked
  6535  00103E  6FC9               	movwf	(??_date_time+2)& (0+255),b
  6536  001040  0100               	movlb	0	; () banked
  6537  001042  51C9               	movf	(??_date_time+2)& (0+255),w,b
  6538  001044  0100               	movlb	0	; () banked
  6539  001046  6FB5               	movwf	(?_printf+6)& (0+255),b
  6540  001048  6BB6               	clrf	(?_printf+7)& (0+255),b
  6541  00104A  EC09  F000         	call	_printf	;wreg free
  6542                           
  6543                           ;main.c: 392: lcdInst(0b11000000);;
  6544  00104E  0EC0               	movlw	192
  6545  001050  EC8E  F011         	call	_lcdInst
  6546                           
  6547                           ;main.c: 393: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  6548  001054  0E04               	movlw	low STR_21
  6549  001056  0100               	movlb	0	; () banked
  6550  001058  6FAF               	movwf	printf@f& (0+255),b
  6551  00105A  0EFF               	movlw	high STR_21
  6552  00105C  0100               	movlb	0	; () banked
  6553  00105E  6FB0               	movwf	(printf@f+1)& (0+255),b
  6554  001060  0100               	movlb	0	; () banked
  6555  001062  EE20 F002          	lfsr	2,2
  6556  001066  51C5               	movf	date_time@time& (0+255),w,b
  6557  001068  26D9               	addwf	fsr2l,f,c
  6558  00106A  51C6               	movf	(date_time@time+1)& (0+255),w,b
  6559  00106C  22DA               	addwfc	fsr2h,f,c
  6560  00106E  50DF               	movf	indf2,w,c
  6561  001070  0100               	movlb	0	; () banked
  6562  001072  6FC7               	movwf	??_date_time& (0+255),b
  6563  001074  0100               	movlb	0	; () banked
  6564  001076  51C7               	movf	??_date_time& (0+255),w,b
  6565  001078  0100               	movlb	0	; () banked
  6566  00107A  6FB1               	movwf	(?_printf+2)& (0+255),b
  6567  00107C  6BB2               	clrf	(?_printf+3)& (0+255),b
  6568  00107E  0100               	movlb	0	; () banked
  6569  001080  EE20 F001          	lfsr	2,1
  6570  001084  51C5               	movf	date_time@time& (0+255),w,b
  6571  001086  26D9               	addwf	fsr2l,f,c
  6572  001088  51C6               	movf	(date_time@time+1)& (0+255),w,b
  6573  00108A  22DA               	addwfc	fsr2h,f,c
  6574  00108C  50DF               	movf	indf2,w,c
  6575  00108E  0100               	movlb	0	; () banked
  6576  001090  6FC8               	movwf	(??_date_time+1)& (0+255),b
  6577  001092  0100               	movlb	0	; () banked
  6578  001094  51C8               	movf	(??_date_time+1)& (0+255),w,b
  6579  001096  0100               	movlb	0	; () banked
  6580  001098  6FB3               	movwf	(?_printf+4)& (0+255),b
  6581  00109A  6BB4               	clrf	(?_printf+5)& (0+255),b
  6582  00109C  C0C5  FFD9         	movff	date_time@time,fsr2l
  6583  0010A0  C0C6  FFDA         	movff	date_time@time+1,fsr2h
  6584  0010A4  50DF               	movf	indf2,w,c
  6585  0010A6  0100               	movlb	0	; () banked
  6586  0010A8  6FC9               	movwf	(??_date_time+2)& (0+255),b
  6587  0010AA  0100               	movlb	0	; () banked
  6588  0010AC  51C9               	movf	(??_date_time+2)& (0+255),w,b
  6589  0010AE  0100               	movlb	0	; () banked
  6590  0010B0  6FB5               	movwf	(?_printf+6)& (0+255),b
  6591  0010B2  6BB6               	clrf	(?_printf+7)& (0+255),b
  6592  0010B4  EC09  F000         	call	_printf	;wreg free
  6593  0010B8  0012               	return	
  6594  0010BA                     __end_of_date_time:
  6595                           	opt stack 0
  6596                           tblptru	equ	0xFF8
  6597                           tblptrh	equ	0xFF7
  6598                           tblptrl	equ	0xFF6
  6599                           tablat	equ	0xFF5
  6600                           prodh	equ	0xFF4
  6601                           prodl	equ	0xFF3
  6602                           intcon	equ	0xFF2
  6603                           intcon2	equ	0xFF1
  6604                           intcon3	equ	0xFF0
  6605                           postinc0	equ	0xFEE
  6606                           wreg	equ	0xFE8
  6607                           postdec1	equ	0xFE5
  6608                           fsr1l	equ	0xFE1
  6609                           indf2	equ	0xFDF
  6610                           postinc2	equ	0xFDE
  6611                           postdec2	equ	0xFDD
  6612                           fsr2h	equ	0xFDA
  6613                           fsr2l	equ	0xFD9
  6614                           status	equ	0xFD8
  6615                           
  6616 ;; *************** function _I2C_Master_Write *****************
  6617 ;; Defined at:
  6618 ;;		line 47 in file "I2C.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;  d               2   17[COMRAM] unsigned int 
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;		None
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      void 
  6625 ;; Registers used:
  6626 ;;		wreg, status,2, status,0, cstack
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6632 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6635 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6636 ;;Total ram usage:        2 bytes
  6637 ;; Hardware stack levels used:    1
  6638 ;; Hardware stack levels required when called:    2
  6639 ;; This function calls:
  6640 ;;		_I2C_Master_Wait
  6641 ;; This function is called by:
  6642 ;;		_update_time
  6643 ;;		_date_time
  6644 ;;		_read_colorsensor
  6645 ;;		_set_time
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text30
  6650  002328                     __ptext30:
  6651                           	opt stack 0
  6652  002328                     _I2C_Master_Write:
  6653                           	opt stack 27
  6654                           
  6655                           ;I2C.c: 49: I2C_Master_Wait();
  6656                           
  6657                           ;incstack = 0
  6658  002328  EC77  F011         	call	_I2C_Master_Wait	;wreg free
  6659                           
  6660                           ;I2C.c: 50: SSPBUF = d;
  6661  00232C  C012  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6662  002330  0012               	return		;funcret
  6663  002332                     __end_of_I2C_Master_Write:
  6664                           	opt stack 0
  6665                           tblptru	equ	0xFF8
  6666                           tblptrh	equ	0xFF7
  6667                           tblptrl	equ	0xFF6
  6668                           tablat	equ	0xFF5
  6669                           prodh	equ	0xFF4
  6670                           prodl	equ	0xFF3
  6671                           intcon	equ	0xFF2
  6672                           intcon2	equ	0xFF1
  6673                           intcon3	equ	0xFF0
  6674                           postinc0	equ	0xFEE
  6675                           wreg	equ	0xFE8
  6676                           postdec1	equ	0xFE5
  6677                           fsr1l	equ	0xFE1
  6678                           indf2	equ	0xFDF
  6679                           postinc2	equ	0xFDE
  6680                           postdec2	equ	0xFDD
  6681                           fsr2h	equ	0xFDA
  6682                           fsr2l	equ	0xFD9
  6683                           status	equ	0xFD8
  6684                           
  6685 ;; *************** function _I2C_Master_Stop *****************
  6686 ;; Defined at:
  6687 ;;		line 41 in file "I2C.c"
  6688 ;; Parameters:    Size  Location     Type
  6689 ;;		None
  6690 ;; Auto vars:     Size  Location     Type
  6691 ;;		None
  6692 ;; Return value:  Size  Location     Type
  6693 ;;                  2   62[None  ] int 
  6694 ;; Registers used:
  6695 ;;		wreg, status,2, status,0, cstack
  6696 ;; Tracked objects:
  6697 ;;		On entry : 0/0
  6698 ;;		On exit  : 0/0
  6699 ;;		Unchanged: 0/0
  6700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6705 ;;Total ram usage:        0 bytes
  6706 ;; Hardware stack levels used:    1
  6707 ;; Hardware stack levels required when called:    2
  6708 ;; This function calls:
  6709 ;;		_I2C_Master_Wait
  6710 ;; This function is called by:
  6711 ;;		_update_time
  6712 ;;		_date_time
  6713 ;;		_read_colorsensor
  6714 ;;		_set_time
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           	psect	text31
  6719  002332                     __ptext31:
  6720                           	opt stack 0
  6721  002332                     _I2C_Master_Stop:
  6722                           	opt stack 27
  6723                           
  6724                           ;I2C.c: 43: I2C_Master_Wait();
  6725                           
  6726                           ;incstack = 0
  6727  002332  EC77  F011         	call	_I2C_Master_Wait	;wreg free
  6728                           
  6729                           ;I2C.c: 44: PEN = 1;
  6730  002336  84C5               	bsf	4037,2,c	;volatile
  6731  002338  0012               	return		;funcret
  6732  00233A                     __end_of_I2C_Master_Stop:
  6733                           	opt stack 0
  6734                           tblptru	equ	0xFF8
  6735                           tblptrh	equ	0xFF7
  6736                           tblptrl	equ	0xFF6
  6737                           tablat	equ	0xFF5
  6738                           prodh	equ	0xFF4
  6739                           prodl	equ	0xFF3
  6740                           intcon	equ	0xFF2
  6741                           intcon2	equ	0xFF1
  6742                           intcon3	equ	0xFF0
  6743                           postinc0	equ	0xFEE
  6744                           wreg	equ	0xFE8
  6745                           postdec1	equ	0xFE5
  6746                           fsr1l	equ	0xFE1
  6747                           indf2	equ	0xFDF
  6748                           postinc2	equ	0xFDE
  6749                           postdec2	equ	0xFDD
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function _I2C_Master_Start *****************
  6755 ;; Defined at:
  6756 ;;		line 29 in file "I2C.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;		None
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;		None
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  2   58[None  ] int 
  6763 ;; Registers used:
  6764 ;;		wreg, status,2, status,0, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;Total ram usage:        0 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    2
  6777 ;; This function calls:
  6778 ;;		_I2C_Master_Wait
  6779 ;; This function is called by:
  6780 ;;		_update_time
  6781 ;;		_date_time
  6782 ;;		_read_colorsensor
  6783 ;;		_set_time
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text32
  6788  00233A                     __ptext32:
  6789                           	opt stack 0
  6790  00233A                     _I2C_Master_Start:
  6791                           	opt stack 27
  6792                           
  6793                           ;I2C.c: 31: I2C_Master_Wait();
  6794                           
  6795                           ;incstack = 0
  6796  00233A  EC77  F011         	call	_I2C_Master_Wait	;wreg free
  6797                           
  6798                           ;I2C.c: 32: SEN = 1;
  6799  00233E  80C5               	bsf	4037,0,c	;volatile
  6800  002340  0012               	return		;funcret
  6801  002342                     __end_of_I2C_Master_Start:
  6802                           	opt stack 0
  6803                           tblptru	equ	0xFF8
  6804                           tblptrh	equ	0xFF7
  6805                           tblptrl	equ	0xFF6
  6806                           tablat	equ	0xFF5
  6807                           prodh	equ	0xFF4
  6808                           prodl	equ	0xFF3
  6809                           intcon	equ	0xFF2
  6810                           intcon2	equ	0xFF1
  6811                           intcon3	equ	0xFF0
  6812                           postinc0	equ	0xFEE
  6813                           wreg	equ	0xFE8
  6814                           postdec1	equ	0xFE5
  6815                           fsr1l	equ	0xFE1
  6816                           indf2	equ	0xFDF
  6817                           postinc2	equ	0xFDE
  6818                           postdec2	equ	0xFDD
  6819                           fsr2h	equ	0xFDA
  6820                           fsr2l	equ	0xFD9
  6821                           status	equ	0xFD8
  6822                           
  6823 ;; *************** function _I2C_Master_Read *****************
  6824 ;; Defined at:
  6825 ;;		line 53 in file "I2C.c"
  6826 ;; Parameters:    Size  Location     Type
  6827 ;;  a               1    wreg     unsigned char 
  6828 ;; Auto vars:     Size  Location     Type
  6829 ;;  a               1   17[COMRAM] unsigned char 
  6830 ;;  temp            1   18[COMRAM] unsigned char 
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  1    wreg      unsigned char 
  6833 ;; Registers used:
  6834 ;;		wreg, status,2, status,0, cstack
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6841 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6843 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;Total ram usage:        2 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; Hardware stack levels required when called:    2
  6847 ;; This function calls:
  6848 ;;		_I2C_Master_Wait
  6849 ;; This function is called by:
  6850 ;;		_update_time
  6851 ;;		_date_time
  6852 ;;		_read_colorsensor
  6853 ;; This function uses a non-reentrant model
  6854 ;;
  6855                           
  6856                           	psect	text33
  6857  002260                     __ptext33:
  6858                           	opt stack 0
  6859  002260                     _I2C_Master_Read:
  6860                           	opt stack 27
  6861                           
  6862                           ;incstack = 0
  6863                           ;I2C_Master_Read@a stored from wreg
  6864  002260  6E12               	movwf	I2C_Master_Read@a,c
  6865                           
  6866                           ;I2C.c: 55: unsigned char temp;
  6867                           ;I2C.c: 56: I2C_Master_Wait();
  6868  002262  EC77  F011         	call	_I2C_Master_Wait	;wreg free
  6869                           
  6870                           ;I2C.c: 57: RCEN = 1;
  6871  002266  86C5               	bsf	4037,3,c	;volatile
  6872                           
  6873                           ;I2C.c: 58: I2C_Master_Wait();
  6874  002268  EC77  F011         	call	_I2C_Master_Wait	;wreg free
  6875                           
  6876                           ;I2C.c: 59: temp = SSPBUF;
  6877  00226C  CFC9 F013          	movff	4041,I2C_Master_Read@temp	;volatile
  6878                           
  6879                           ;I2C.c: 60: I2C_Master_Wait();
  6880  002270  EC77  F011         	call	_I2C_Master_Wait	;wreg free
  6881                           
  6882                           ;I2C.c: 61: ACKDT = (a)?0:1;
  6883  002274  5012               	movf	I2C_Master_Read@a,w,c
  6884  002276  A4D8               	btfss	status,2,c
  6885  002278  D002               	goto	u2670
  6886  00227A  8AC5               	bsf	4037,5,c	;volatile
  6887  00227C  D001               	goto	l3100
  6888  00227E                     u2670:
  6889  00227E  9AC5               	bcf	4037,5,c	;volatile
  6890  002280                     l3100:
  6891                           
  6892                           ;I2C.c: 62: ACKEN = 1;
  6893  002280  88C5               	bsf	4037,4,c	;volatile
  6894                           
  6895                           ;I2C.c: 63: return temp;
  6896  002282  5013               	movf	I2C_Master_Read@temp,w,c
  6897  002284  0012               	return	
  6898  002286                     __end_of_I2C_Master_Read:
  6899                           	opt stack 0
  6900                           tblptru	equ	0xFF8
  6901                           tblptrh	equ	0xFF7
  6902                           tblptrl	equ	0xFF6
  6903                           tablat	equ	0xFF5
  6904                           prodh	equ	0xFF4
  6905                           prodl	equ	0xFF3
  6906                           intcon	equ	0xFF2
  6907                           intcon2	equ	0xFF1
  6908                           intcon3	equ	0xFF0
  6909                           postinc0	equ	0xFEE
  6910                           wreg	equ	0xFE8
  6911                           postdec1	equ	0xFE5
  6912                           fsr1l	equ	0xFE1
  6913                           indf2	equ	0xFDF
  6914                           postinc2	equ	0xFDE
  6915                           postdec2	equ	0xFDD
  6916                           fsr2h	equ	0xFDA
  6917                           fsr2l	equ	0xFD9
  6918                           status	equ	0xFD8
  6919                           
  6920 ;; *************** function _I2C_Master_Wait *****************
  6921 ;; Defined at:
  6922 ;;		line 24 in file "I2C.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;		None
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;		None
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  1    wreg      void 
  6929 ;; Registers used:
  6930 ;;		wreg, status,2, status,0
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6938 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6939 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6940 ;;Total ram usage:        1 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    1
  6943 ;; This function calls:
  6944 ;;		Nothing
  6945 ;; This function is called by:
  6946 ;;		_I2C_Master_Start
  6947 ;;		_I2C_Master_Stop
  6948 ;;		_I2C_Master_Write
  6949 ;;		_I2C_Master_Read
  6950 ;;		_I2C_Master_RepeatedStart
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           	psect	text34
  6955  0022EE                     __ptext34:
  6956                           	opt stack 0
  6957  0022EE                     _I2C_Master_Wait:
  6958                           	opt stack 27
  6959  0022EE                     l262:
  6960  0022EE  B4C7               	btfsc	4039,2,c	;volatile
  6961  0022F0  D7FE               	goto	l262
  6962  0022F2  CFC5 F011          	movff	4037,??_I2C_Master_Wait	;volatile
  6963  0022F6  0E1F               	movlw	31
  6964  0022F8  1611               	andwf	??_I2C_Master_Wait,f,c
  6965  0022FA  B4D8               	btfsc	status,2,c
  6966  0022FC  0012               	return	
  6967  0022FE  D7F7               	goto	l262
  6968  002300                     __end_of_I2C_Master_Wait:
  6969                           	opt stack 0
  6970                           tblptru	equ	0xFF8
  6971                           tblptrh	equ	0xFF7
  6972                           tblptrl	equ	0xFF6
  6973                           tablat	equ	0xFF5
  6974                           prodh	equ	0xFF4
  6975                           prodl	equ	0xFF3
  6976                           intcon	equ	0xFF2
  6977                           intcon2	equ	0xFF1
  6978                           intcon3	equ	0xFF0
  6979                           postinc0	equ	0xFEE
  6980                           wreg	equ	0xFE8
  6981                           postdec1	equ	0xFE5
  6982                           fsr1l	equ	0xFE1
  6983                           indf2	equ	0xFDF
  6984                           postinc2	equ	0xFDE
  6985                           postdec2	equ	0xFDD
  6986                           fsr2h	equ	0xFDA
  6987                           fsr2l	equ	0xFD9
  6988                           status	equ	0xFD8
  6989                           
  6990 ;; *************** function _bottle_count *****************
  6991 ;; Defined at:
  6992 ;;		line 323 in file "main.c"
  6993 ;; Parameters:    Size  Location     Type
  6994 ;;  bot_count       2   69[BANK0 ] PTR unsigned char 
  6995 ;;		 -> main@bot_count(4), 
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;		None
  6998 ;; Return value:  Size  Location     Type
  6999 ;;                  1    wreg      void 
  7000 ;; Registers used:
  7001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7007 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;Total ram usage:        4 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:    4
  7014 ;; This function calls:
  7015 ;;		_lcdInst
  7016 ;;		_printf
  7017 ;; This function is called by:
  7018 ;;		_main
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           	psect	text35
  7023  000AC8                     __ptext35:
  7024                           	opt stack 0
  7025  000AC8                     _bottle_count:
  7026                           	opt stack 26
  7027                           
  7028                           ;main.c: 324: while (bot_type != O){
  7029                           
  7030                           ;incstack = 0
  7031  000AC8  D0C8               	goto	l3600
  7032  000ACA                     l3564:
  7033                           
  7034                           ;main.c: 327: lcdInst(0b10000000);;
  7035  000ACA  0E80               	movlw	128
  7036  000ACC  EC8E  F011         	call	_lcdInst
  7037                           
  7038                           ;main.c: 328: printf("Total Bottle    ");
  7039  000AD0  0E76               	movlw	low STR_8
  7040  000AD2  0100               	movlb	0	; () banked
  7041  000AD4  6FAF               	movwf	printf@f& (0+255),b
  7042  000AD6  0EFF               	movlw	high STR_8
  7043  000AD8  0100               	movlb	0	; () banked
  7044  000ADA  6FB0               	movwf	(printf@f+1)& (0+255),b
  7045  000ADC  EC09  F000         	call	_printf	;wreg free
  7046                           
  7047                           ;main.c: 329: lcdInst(0b11000000);;
  7048  000AE0  0EC0               	movlw	192
  7049  000AE2  EC8E  F011         	call	_lcdInst
  7050                           
  7051                           ;main.c: 330: printf("Count: %i       ", bot_count[0]);
  7052  000AE6  0E65               	movlw	low STR_9
  7053  000AE8  0100               	movlb	0	; () banked
  7054  000AEA  6FAF               	movwf	printf@f& (0+255),b
  7055  000AEC  0EFF               	movlw	high STR_9
  7056  000AEE  0100               	movlb	0	; () banked
  7057  000AF0  6FB0               	movwf	(printf@f+1)& (0+255),b
  7058  000AF2  C0C5  FFD9         	movff	bottle_count@bot_count,fsr2l
  7059  000AF6  C0C6  FFDA         	movff	bottle_count@bot_count+1,fsr2h
  7060  000AFA  50DF               	movf	indf2,w,c
  7061  000AFC  0100               	movlb	0	; () banked
  7062  000AFE  6FC7               	movwf	??_bottle_count& (0+255),b
  7063  000B00  0100               	movlb	0	; () banked
  7064  000B02  51C7               	movf	??_bottle_count& (0+255),w,b
  7065  000B04  0100               	movlb	0	; () banked
  7066  000B06  6FB1               	movwf	(?_printf+2)& (0+255),b
  7067  000B08  6BB2               	clrf	(?_printf+3)& (0+255),b
  7068  000B0A  EC09  F000         	call	_printf	;wreg free
  7069                           
  7070                           ;main.c: 331: break;
  7071  000B0E  D097               	goto	l3598
  7072  000B10                     l3570:
  7073                           
  7074                           ;main.c: 333: lcdInst(0b10000000);;
  7075  000B10  0E80               	movlw	128
  7076  000B12  EC8E  F011         	call	_lcdInst
  7077                           
  7078                           ;main.c: 334: printf("YOP With Cap    ");
  7079  000B16  0E87               	movlw	low STR_10
  7080  000B18  0100               	movlb	0	; () banked
  7081  000B1A  6FAF               	movwf	printf@f& (0+255),b
  7082  000B1C  0EFF               	movlw	high STR_10
  7083  000B1E  0100               	movlb	0	; () banked
  7084  000B20  6FB0               	movwf	(printf@f+1)& (0+255),b
  7085  000B22  EC09  F000         	call	_printf	;wreg free
  7086                           
  7087                           ;main.c: 335: lcdInst(0b11000000);;
  7088  000B26  0EC0               	movlw	192
  7089  000B28  EC8E  F011         	call	_lcdInst
  7090                           
  7091                           ;main.c: 336: printf("Count: %i       ", bot_count[0]);
  7092  000B2C  0E65               	movlw	low STR_9
  7093  000B2E  0100               	movlb	0	; () banked
  7094  000B30  6FAF               	movwf	printf@f& (0+255),b
  7095  000B32  0EFF               	movlw	high STR_9
  7096  000B34  0100               	movlb	0	; () banked
  7097  000B36  6FB0               	movwf	(printf@f+1)& (0+255),b
  7098  000B38  C0C5  FFD9         	movff	bottle_count@bot_count,fsr2l
  7099  000B3C  C0C6  FFDA         	movff	bottle_count@bot_count+1,fsr2h
  7100  000B40  50DF               	movf	indf2,w,c
  7101  000B42  0100               	movlb	0	; () banked
  7102  000B44  6FC7               	movwf	??_bottle_count& (0+255),b
  7103  000B46  0100               	movlb	0	; () banked
  7104  000B48  51C7               	movf	??_bottle_count& (0+255),w,b
  7105  000B4A  0100               	movlb	0	; () banked
  7106  000B4C  6FB1               	movwf	(?_printf+2)& (0+255),b
  7107  000B4E  6BB2               	clrf	(?_printf+3)& (0+255),b
  7108  000B50  EC09  F000         	call	_printf	;wreg free
  7109                           
  7110                           ;main.c: 337: break;
  7111  000B54  D074               	goto	l3598
  7112  000B56                     l3576:
  7113                           
  7114                           ;main.c: 339: lcdInst(0b10000000);;
  7115  000B56  0E80               	movlw	128
  7116  000B58  EC8E  F011         	call	_lcdInst
  7117                           
  7118                           ;main.c: 340: printf("YOP With No Cap ");
  7119  000B5C  0ECB               	movlw	low STR_12
  7120  000B5E  0100               	movlb	0	; () banked
  7121  000B60  6FAF               	movwf	printf@f& (0+255),b
  7122  000B62  0EFF               	movlw	high STR_12
  7123  000B64  0100               	movlb	0	; () banked
  7124  000B66  6FB0               	movwf	(printf@f+1)& (0+255),b
  7125  000B68  EC09  F000         	call	_printf	;wreg free
  7126                           
  7127                           ;main.c: 341: lcdInst(0b11000000);;
  7128  000B6C  0EC0               	movlw	192
  7129  000B6E  EC8E  F011         	call	_lcdInst
  7130                           
  7131                           ;main.c: 342: printf("Count: %i       ", bot_count[1]);
  7132  000B72  0E65               	movlw	low STR_9
  7133  000B74  0100               	movlb	0	; () banked
  7134  000B76  6FAF               	movwf	printf@f& (0+255),b
  7135  000B78  0EFF               	movlw	high STR_9
  7136  000B7A  0100               	movlb	0	; () banked
  7137  000B7C  6FB0               	movwf	(printf@f+1)& (0+255),b
  7138  000B7E  0100               	movlb	0	; () banked
  7139  000B80  EE20 F001          	lfsr	2,1
  7140  000B84  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  7141  000B86  26D9               	addwf	fsr2l,f,c
  7142  000B88  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  7143  000B8A  22DA               	addwfc	fsr2h,f,c
  7144  000B8C  50DF               	movf	indf2,w,c
  7145  000B8E  0100               	movlb	0	; () banked
  7146  000B90  6FC7               	movwf	??_bottle_count& (0+255),b
  7147  000B92  0100               	movlb	0	; () banked
  7148  000B94  51C7               	movf	??_bottle_count& (0+255),w,b
  7149  000B96  0100               	movlb	0	; () banked
  7150  000B98  6FB1               	movwf	(?_printf+2)& (0+255),b
  7151  000B9A  6BB2               	clrf	(?_printf+3)& (0+255),b
  7152  000B9C  EC09  F000         	call	_printf	;wreg free
  7153                           
  7154                           ;main.c: 343: break;
  7155  000BA0  D04E               	goto	l3598
  7156  000BA2                     l3582:
  7157                           
  7158                           ;main.c: 345: lcdInst(0b10000000);;
  7159  000BA2  0E80               	movlw	128
  7160  000BA4  EC8E  F011         	call	_lcdInst
  7161                           
  7162                           ;main.c: 346: printf("ESKA With Cap   ");
  7163  000BA8  0E98               	movlw	low STR_14
  7164  000BAA  0100               	movlb	0	; () banked
  7165  000BAC  6FAF               	movwf	printf@f& (0+255),b
  7166  000BAE  0EFF               	movlw	high STR_14
  7167  000BB0  0100               	movlb	0	; () banked
  7168  000BB2  6FB0               	movwf	(printf@f+1)& (0+255),b
  7169  000BB4  EC09  F000         	call	_printf	;wreg free
  7170                           
  7171                           ;main.c: 347: lcdInst(0b11000000);;
  7172  000BB8  0EC0               	movlw	192
  7173  000BBA  EC8E  F011         	call	_lcdInst
  7174                           
  7175                           ;main.c: 348: printf("Count: %i       ", bot_count[2]);
  7176  000BBE  0E65               	movlw	low STR_9
  7177  000BC0  0100               	movlb	0	; () banked
  7178  000BC2  6FAF               	movwf	printf@f& (0+255),b
  7179  000BC4  0EFF               	movlw	high STR_9
  7180  000BC6  0100               	movlb	0	; () banked
  7181  000BC8  6FB0               	movwf	(printf@f+1)& (0+255),b
  7182  000BCA  0100               	movlb	0	; () banked
  7183  000BCC  EE20 F002          	lfsr	2,2
  7184  000BD0  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  7185  000BD2  26D9               	addwf	fsr2l,f,c
  7186  000BD4  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  7187  000BD6  22DA               	addwfc	fsr2h,f,c
  7188  000BD8  50DF               	movf	indf2,w,c
  7189  000BDA  0100               	movlb	0	; () banked
  7190  000BDC  6FC7               	movwf	??_bottle_count& (0+255),b
  7191  000BDE  0100               	movlb	0	; () banked
  7192  000BE0  51C7               	movf	??_bottle_count& (0+255),w,b
  7193  000BE2  0100               	movlb	0	; () banked
  7194  000BE4  6FB1               	movwf	(?_printf+2)& (0+255),b
  7195  000BE6  6BB2               	clrf	(?_printf+3)& (0+255),b
  7196  000BE8  EC09  F000         	call	_printf	;wreg free
  7197                           
  7198                           ;main.c: 349: break;
  7199  000BEC  D028               	goto	l3598
  7200  000BEE                     l3588:
  7201                           
  7202                           ;main.c: 351: lcdInst(0b10000000);;
  7203  000BEE  0E80               	movlw	128
  7204  000BF0  EC8E  F011         	call	_lcdInst
  7205                           
  7206                           ;main.c: 352: printf("ESKA With No Cap");
  7207  000BF4  0EED               	movlw	low STR_16
  7208  000BF6  0100               	movlb	0	; () banked
  7209  000BF8  6FAF               	movwf	printf@f& (0+255),b
  7210  000BFA  0EFF               	movlw	high STR_16
  7211  000BFC  0100               	movlb	0	; () banked
  7212  000BFE  6FB0               	movwf	(printf@f+1)& (0+255),b
  7213  000C00  EC09  F000         	call	_printf	;wreg free
  7214                           
  7215                           ;main.c: 353: lcdInst(0b11000000);;
  7216  000C04  0EC0               	movlw	192
  7217  000C06  EC8E  F011         	call	_lcdInst
  7218                           
  7219                           ;main.c: 354: printf("Count: %i       "), bot_count[3];
  7220  000C0A  0E65               	movlw	low STR_9
  7221  000C0C  0100               	movlb	0	; () banked
  7222  000C0E  6FAF               	movwf	printf@f& (0+255),b
  7223  000C10  0EFF               	movlw	high STR_9
  7224  000C12  0100               	movlb	0	; () banked
  7225  000C14  6FB0               	movwf	(printf@f+1)& (0+255),b
  7226  000C16  EC09  F000         	call	_printf	;wreg free
  7227                           
  7228                           ;main.c: 356: }
  7229                           
  7230                           ;main.c: 355: break;
  7231  000C1A  D011               	goto	l3598
  7232  000C1C                     l3596:
  7233  000C1C  0100               	movlb	0	; () banked
  7234  000C1E  51FA               	movf	_bot_type& (0+255),w,b
  7235                           
  7236                           ; Switch size 1, requested type "space"
  7237                           ; Number of cases is 5, Range of values is 0 to 4
  7238                           ; switch strategies available:
  7239                           ; Name         Instructions Cycles
  7240                           ; simple_byte           16     9 (average)
  7241                           ;	Chosen strategy is simple_byte
  7242  000C20  0A00               	xorlw	0	; case 0
  7243  000C22  B4D8               	btfsc	status,2,c
  7244  000C24  D752               	goto	l3564
  7245  000C26  0A01               	xorlw	1	; case 1
  7246  000C28  B4D8               	btfsc	status,2,c
  7247  000C2A  D772               	goto	l3570
  7248  000C2C  0A03               	xorlw	3	; case 2
  7249  000C2E  B4D8               	btfsc	status,2,c
  7250  000C30  D792               	goto	l3576
  7251  000C32  0A01               	xorlw	1	; case 3
  7252  000C34  B4D8               	btfsc	status,2,c
  7253  000C36  D7B5               	goto	l3582
  7254  000C38  0A07               	xorlw	7	; case 4
  7255  000C3A  B4D8               	btfsc	status,2,c
  7256  000C3C  D7D8               	goto	l3588
  7257  000C3E                     l3598:
  7258                           
  7259                           ;main.c: 357: _delay((unsigned long)((100)*(10000000/4000.0)));
  7260  000C3E  0E02               	movlw	2
  7261  000C40  0100               	movlb	0	; () banked
  7262  000C42  6FC8               	movwf	(??_bottle_count+1)& (0+255),b
  7263  000C44  0E45               	movlw	69
  7264  000C46  0100               	movlb	0	; () banked
  7265  000C48  6FC7               	movwf	??_bottle_count& (0+255),b
  7266  000C4A  0EA9               	movlw	169
  7267  000C4C                     u3627:
  7268  000C4C  2EE8               	decfsz	wreg,f,c
  7269  000C4E  D7FE               	bra	u3627
  7270  000C50  2FC7               	decfsz	??_bottle_count& (0+255),f,b
  7271  000C52  D7FC               	bra	u3627
  7272  000C54  2FC8               	decfsz	(??_bottle_count+1)& (0+255),f,b
  7273  000C56  D7FA               	bra	u3627
  7274  000C58  D000               	nop2	
  7275  000C5A                     l3600:
  7276  000C5A  0E05               	movlw	5
  7277  000C5C  0100               	movlb	0	; () banked
  7278  000C5E  19FA               	xorwf	_bot_type& (0+255),w,b
  7279  000C60  B4D8               	btfsc	status,2,c
  7280  000C62  0012               	return	
  7281  000C64  D7DB               	goto	l3596
  7282  000C66                     __end_of_bottle_count:
  7283                           	opt stack 0
  7284                           tblptru	equ	0xFF8
  7285                           tblptrh	equ	0xFF7
  7286                           tblptrl	equ	0xFF6
  7287                           tablat	equ	0xFF5
  7288                           prodh	equ	0xFF4
  7289                           prodl	equ	0xFF3
  7290                           intcon	equ	0xFF2
  7291                           intcon2	equ	0xFF1
  7292                           intcon3	equ	0xFF0
  7293                           postinc0	equ	0xFEE
  7294                           wreg	equ	0xFE8
  7295                           postdec1	equ	0xFE5
  7296                           fsr1l	equ	0xFE1
  7297                           indf2	equ	0xFDF
  7298                           postinc2	equ	0xFDE
  7299                           postdec2	equ	0xFDD
  7300                           fsr2h	equ	0xFDA
  7301                           fsr2l	equ	0xFD9
  7302                           status	equ	0xFD8
  7303                           
  7304 ;; *************** function _printf *****************
  7305 ;; Defined at:
  7306 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;  f               2   47[BANK0 ] PTR const unsigned char 
  7309 ;;		 -> STR_21(23), STR_20(23), STR_19(17), STR_18(17), 
  7310 ;;		 -> STR_17(17), STR_16(17), STR_15(17), STR_14(17), 
  7311 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  7312 ;;		 -> STR_9(17), STR_8(17), STR_7(19), STR_6(17), 
  7313 ;;		 -> STR_5(19), STR_4(19), STR_3(19), STR_2(17), 
  7314 ;;		 -> STR_1(27), 
  7315 ;; Auto vars:     Size  Location     Type
  7316 ;;  idx             1   59[BANK0 ] unsigned char 
  7317 ;;  tmpval          4    0        struct .
  7318 ;;  cp              3    0        PTR const unsigned char 
  7319 ;;  width           2   66[BANK0 ] int 
  7320 ;;  val             2   63[BANK0 ] unsigned int 
  7321 ;;  ap              2   60[BANK0 ] PTR void [1]
  7322 ;;		 -> ?_printf(2), 
  7323 ;;  len             2    0        unsigned int 
  7324 ;;  c               1   68[BANK0 ] char 
  7325 ;;  flag            1   65[BANK0 ] unsigned char 
  7326 ;;  prec            1   62[BANK0 ] char 
  7327 ;; Return value:  Size  Location     Type
  7328 ;;                  2   47[BANK0 ] int 
  7329 ;; Registers used:
  7330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7331 ;; Tracked objects:
  7332 ;;		On entry : 0/0
  7333 ;;		On exit  : 0/0
  7334 ;;		Unchanged: 0/0
  7335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7336 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7337 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7338 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7339 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7340 ;;Total ram usage:       22 bytes
  7341 ;; Hardware stack levels used:    1
  7342 ;; Hardware stack levels required when called:    3
  7343 ;; This function calls:
  7344 ;;		___lwdiv
  7345 ;;		___lwmod
  7346 ;;		___wmul
  7347 ;;		_isdigit
  7348 ;;		_putch
  7349 ;; This function is called by:
  7350 ;;		_main
  7351 ;;		_init_operation
  7352 ;;		_runtime
  7353 ;;		_bottle_count
  7354 ;;		_operation_end
  7355 ;;		_date_time
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           	psect	text36
  7360  000012                     __ptext36:
  7361                           	opt stack 0
  7362  000012                     _printf:
  7363                           	opt stack 26
  7364                           
  7365                           ;doprnt.c: 466: va_list ap;
  7366                           ;doprnt.c: 499: signed char c;
  7367                           ;doprnt.c: 501: int width;
  7368                           ;doprnt.c: 506: signed char prec;
  7369                           ;doprnt.c: 508: unsigned char flag;
  7370                           ;doprnt.c: 523: union {
  7371                           ;doprnt.c: 524: unsigned long vd;
  7372                           ;doprnt.c: 525: double integ;
  7373                           ;doprnt.c: 526: } tmpval;
  7374                           ;doprnt.c: 528: unsigned int val;
  7375                           ;doprnt.c: 529: unsigned len;
  7376                           ;doprnt.c: 530: const char * cp;
  7377                           ;doprnt.c: 533: *ap = __va_start();
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;incstack = 0
  7381  000012  0EB1               	movlw	low (?_printf+2)
  7382  000014  0100               	movlb	0	; () banked
  7383  000016  6FBC               	movwf	printf@ap& (0+255),b
  7384  000018  0E00               	movlw	high (?_printf+2)
  7385  00001A  0100               	movlb	0	; () banked
  7386  00001C  6FBD               	movwf	(printf@ap+1)& (0+255),b
  7387                           
  7388                           ;doprnt.c: 536: while(c = *f++) {
  7389  00001E  D1C0               	goto	l3320
  7390  000020                     l3194:
  7391                           
  7392                           ; BSR set to: 0
  7393                           ;doprnt.c: 538: if(c != '%')
  7394  000020  0E25               	movlw	37
  7395  000022  0100               	movlb	0	; () banked
  7396  000024  19C4               	xorwf	printf@c& (0+255),w,b
  7397  000026  B4D8               	btfsc	status,2,c
  7398  000028  D005               	goto	l3198
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;doprnt.c: 540: {
  7402                           ;doprnt.c: 541: (putch(c) );
  7403  00002A  0100               	movlb	0	; () banked
  7404  00002C  51C4               	movf	printf@c& (0+255),w,b
  7405  00002E  EC88  F011         	call	_putch
  7406                           
  7407                           ;doprnt.c: 542: continue;
  7408  000032  D1B6               	goto	l3320
  7409  000034                     l3198:
  7410                           
  7411                           ;doprnt.c: 543: }
  7412                           ;doprnt.c: 546: width = 0;
  7413  000034  0E00               	movlw	0
  7414  000036  0100               	movlb	0	; () banked
  7415  000038  6FC3               	movwf	(printf@width+1)& (0+255),b
  7416  00003A  0E00               	movlw	0
  7417  00003C  6FC2               	movwf	printf@width& (0+255),b
  7418                           
  7419                           ;doprnt.c: 548: flag = 0;
  7420  00003E  0E00               	movlw	0
  7421  000040  0100               	movlb	0	; () banked
  7422  000042  6FC1               	movwf	printf@flag& (0+255),b
  7423                           
  7424                           ; BSR set to: 0
  7425                           ;doprnt.c: 551: switch(*f) {
  7426                           
  7427                           ;doprnt.c: 550: for(;;) {
  7428  000044  D005               	goto	l3204
  7429  000046                     l3200:
  7430                           
  7431                           ;doprnt.c: 580: flag |= 0x04;
  7432  000046  0100               	movlb	0	; () banked
  7433  000048  85C1               	bsf	printf@flag& (0+255),2,b
  7434                           
  7435                           ;doprnt.c: 581: f++;
  7436  00004A  0100               	movlb	0	; () banked
  7437  00004C  4BAF               	infsnz	printf@f& (0+255),f,b
  7438  00004E  2BB0               	incf	(printf@f+1)& (0+255),f,b
  7439  000050                     l3204:
  7440  000050  C0AF  FFF6         	movff	printf@f,tblptrl
  7441  000054  C0B0  FFF7         	movff	printf@f+1,tblptrh
  7442  000058                     	if	0	;tblptru may be non-zero
  7443  000058                     	endif
  7444  000058                     	if	0	;tblptru may be non-zero
  7445  000058                     	endif
  7446  000058  0008               	tblrd		*
  7447  00005A  50F5               	movf	tablat,w,c
  7448                           
  7449                           ; Switch size 1, requested type "space"
  7450                           ; Number of cases is 1, Range of values is 48 to 48
  7451                           ; switch strategies available:
  7452                           ; Name         Instructions Cycles
  7453                           ; simple_byte            4     3 (average)
  7454                           ;	Chosen strategy is simple_byte
  7455  00005C  0A30               	xorlw	48	; case 48
  7456  00005E  B4D8               	btfsc	status,2,c
  7457  000060  D7F2               	goto	l3200
  7458                           
  7459                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7460                           
  7461                           ;doprnt.c: 586: }
  7462                           
  7463                           ;doprnt.c: 585: break;
  7464  000062  C0AF  FFF6         	movff	printf@f,tblptrl
  7465  000066  C0B0  FFF7         	movff	printf@f+1,tblptrh
  7466  00006A                     	if	0	;tblptru may be non-zero
  7467  00006A                     	endif
  7468  00006A                     	if	0	;tblptru may be non-zero
  7469  00006A                     	endif
  7470  00006A  0008               	tblrd		*
  7471  00006C  50F5               	movf	tablat,w,c
  7472  00006E  EC68  F011         	call	_isdigit
  7473  000072  A0D8               	btfss	status,0,c
  7474  000074  D043               	goto	l3222
  7475                           
  7476                           ;doprnt.c: 598: width = 0;
  7477  000076  0E00               	movlw	0
  7478  000078  0100               	movlb	0	; () banked
  7479  00007A  6FC3               	movwf	(printf@width+1)& (0+255),b
  7480  00007C  0E00               	movlw	0
  7481  00007E  6FC2               	movwf	printf@width& (0+255),b
  7482  000080                     l3210:
  7483                           
  7484                           ;doprnt.c: 600: width *= 10;
  7485  000080  C0C2  F011         	movff	printf@width,___wmul@multiplier
  7486  000084  C0C3  F012         	movff	printf@width+1,___wmul@multiplier+1
  7487  000088  0E00               	movlw	0
  7488  00008A  6E14               	movwf	___wmul@multiplicand+1,c
  7489  00008C  0E0A               	movlw	10
  7490  00008E  6E13               	movwf	___wmul@multiplicand,c
  7491  000090  EC43  F011         	call	___wmul	;wreg free
  7492  000094  C011  F0C2         	movff	?___wmul,printf@width
  7493  000098  C012  F0C3         	movff	?___wmul+1,printf@width+1
  7494                           
  7495                           ;doprnt.c: 601: width += *f++ - '0';
  7496  00009C  0ED0               	movlw	208
  7497  00009E  0100               	movlb	0	; () banked
  7498  0000A0  6FB7               	movwf	??_printf& (0+255),b
  7499  0000A2  0EFF               	movlw	255
  7500  0000A4  0100               	movlb	0	; () banked
  7501  0000A6  6FB8               	movwf	(??_printf+1)& (0+255),b
  7502  0000A8  C0AF  FFF6         	movff	printf@f,tblptrl
  7503  0000AC  C0B0  FFF7         	movff	printf@f+1,tblptrh
  7504  0000B0                     	if	0	;tblptru may be non-zero
  7505  0000B0                     	endif
  7506  0000B0                     	if	0	;tblptru may be non-zero
  7507  0000B0                     	endif
  7508  0000B0  0008               	tblrd		*
  7509  0000B2  50F5               	movf	tablat,w,c
  7510  0000B4  0100               	movlb	0	; () banked
  7511  0000B6  6FB9               	movwf	(??_printf+2)& (0+255),b
  7512  0000B8  6BBA               	clrf	(??_printf+3)& (0+255),b
  7513  0000BA  0100               	movlb	0	; () banked
  7514  0000BC  51B7               	movf	??_printf& (0+255),w,b
  7515  0000BE  0100               	movlb	0	; () banked
  7516  0000C0  27B9               	addwf	(??_printf+2)& (0+255),f,b
  7517  0000C2  0100               	movlb	0	; () banked
  7518  0000C4  51B8               	movf	(??_printf+1)& (0+255),w,b
  7519  0000C6  0100               	movlb	0	; () banked
  7520  0000C8  23BA               	addwfc	(??_printf+3)& (0+255),f,b
  7521  0000CA  0100               	movlb	0	; () banked
  7522  0000CC  51B9               	movf	(??_printf+2)& (0+255),w,b
  7523  0000CE  0100               	movlb	0	; () banked
  7524  0000D0  27C2               	addwf	printf@width& (0+255),f,b
  7525  0000D2  0100               	movlb	0	; () banked
  7526  0000D4  51BA               	movf	(??_printf+3)& (0+255),w,b
  7527  0000D6  0100               	movlb	0	; () banked
  7528  0000D8  23C3               	addwfc	(printf@width+1)& (0+255),f,b
  7529                           
  7530                           ; BSR set to: 0
  7531  0000DA  0100               	movlb	0	; () banked
  7532  0000DC  4BAF               	infsnz	printf@f& (0+255),f,b
  7533  0000DE  2BB0               	incf	(printf@f+1)& (0+255),f,b
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7537  0000E0  C0AF  FFF6         	movff	printf@f,tblptrl
  7538  0000E4  C0B0  FFF7         	movff	printf@f+1,tblptrh
  7539  0000E8                     	if	0	;tblptru may be non-zero
  7540  0000E8                     	endif
  7541  0000E8                     	if	0	;tblptru may be non-zero
  7542  0000E8                     	endif
  7543  0000E8  0008               	tblrd		*
  7544  0000EA  50F5               	movf	tablat,w,c
  7545  0000EC  EC68  F011         	call	_isdigit
  7546  0000F0  A0D8               	btfss	status,0,c
  7547  0000F2  D004               	goto	l3222
  7548  0000F4  D7C5               	goto	l3210
  7549  0000F6                     l3218:
  7550                           
  7551                           ;doprnt.c: 721: flag |= 0x80;
  7552  0000F6  0100               	movlb	0	; () banked
  7553  0000F8  8FC1               	bsf	printf@flag& (0+255),7,b
  7554                           
  7555                           ;doprnt.c: 723: break;
  7556  0000FA  D019               	goto	l367
  7557  0000FC                     l3222:
  7558  0000FC  C0AF  FFF6         	movff	printf@f,tblptrl
  7559  000100  C0B0  FFF7         	movff	printf@f+1,tblptrh
  7560  000104  0100               	movlb	0	; () banked
  7561  000106  4BAF               	infsnz	printf@f& (0+255),f,b
  7562  000108  2BB0               	incf	(printf@f+1)& (0+255),f,b
  7563  00010A                     	if	0	;tblptru may be non-zero
  7564  00010A                     	endif
  7565  00010A                     	if	0	;tblptru may be non-zero
  7566  00010A                     	endif
  7567  00010A  0008               	tblrd		*
  7568  00010C  CFF5 F0C4          	movff	tablat,printf@c
  7569  000110  0100               	movlb	0	; () banked
  7570  000112  51C4               	movf	printf@c& (0+255),w,b
  7571                           
  7572                           ; Switch size 1, requested type "space"
  7573                           ; Number of cases is 4, Range of values is 0 to 120
  7574                           ; switch strategies available:
  7575                           ; Name         Instructions Cycles
  7576                           ; simple_byte           13     7 (average)
  7577                           ;	Chosen strategy is simple_byte
  7578  000114  0A00               	xorlw	0	; case 0
  7579  000116  B4D8               	btfsc	status,2,c
  7580  000118  0012               	return	
  7581  00011A  0A64               	xorlw	100	; case 100
  7582  00011C  B4D8               	btfsc	status,2,c
  7583  00011E  D007               	goto	l367
  7584  000120  0A0D               	xorlw	13	; case 105
  7585  000122  B4D8               	btfsc	status,2,c
  7586  000124  D004               	goto	l367
  7587  000126  0A11               	xorlw	17	; case 120
  7588  000128  B4D8               	btfsc	status,2,c
  7589  00012A  D7E5               	goto	l3218
  7590  00012C  D139               	goto	l3320
  7591  00012E                     l367:
  7592                           
  7593                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7594  00012E  0100               	movlb	0	; () banked
  7595  000130  BFC1               	btfsc	printf@flag& (0+255),7,b
  7596  000132  D019               	goto	l3234
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;doprnt.c: 1253: {
  7600                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7601  000134  C0BC  FFD9         	movff	printf@ap,fsr2l
  7602  000138  C0BD  FFDA         	movff	printf@ap+1,fsr2h
  7603  00013C  CFDE F0BF          	movff	postinc2,printf@val
  7604  000140  CFDD F0C0          	movff	postdec2,printf@val+1
  7605                           
  7606                           ; BSR set to: 0
  7607  000144  0E02               	movlw	2
  7608  000146  0100               	movlb	0	; () banked
  7609  000148  27BC               	addwf	printf@ap& (0+255),f,b
  7610  00014A  0E00               	movlw	0
  7611  00014C  23BD               	addwfc	(printf@ap+1)& (0+255),f,b
  7612                           
  7613                           ; BSR set to: 0
  7614                           ;doprnt.c: 1261: if((int)val < 0) {
  7615  00014E  0100               	movlb	0	; () banked
  7616  000150  AFC0               	btfss	(printf@val+1)& (0+255),7,b
  7617  000152  D053               	goto	l3268
  7618                           
  7619                           ; BSR set to: 0
  7620                           ;doprnt.c: 1262: flag |= 0x03;
  7621  000154  0E03               	movlw	3
  7622  000156  0100               	movlb	0	; () banked
  7623  000158  13C1               	iorwf	printf@flag& (0+255),f,b
  7624                           
  7625                           ; BSR set to: 0
  7626                           ;doprnt.c: 1263: val = -val;
  7627  00015A  0100               	movlb	0	; () banked
  7628  00015C  6DBF               	negf	printf@val& (0+255),b
  7629  00015E  1FC0               	comf	(printf@val+1)& (0+255),f,b
  7630  000160  B0D8               	btfsc	status,0,c
  7631  000162  2BC0               	incf	(printf@val+1)& (0+255),f,b
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;doprnt.c: 1264: }
  7635                           ;doprnt.c: 1266: }
  7636  000164  D04A               	goto	l3268
  7637  000166                     l3234:
  7638                           
  7639                           ; BSR set to: 0
  7640                           ;doprnt.c: 1268: else
  7641                           ;doprnt.c: 1273: {
  7642                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7643  000166  C0BC  FFD9         	movff	printf@ap,fsr2l
  7644  00016A  C0BD  FFDA         	movff	printf@ap+1,fsr2h
  7645  00016E  CFDE F0BF          	movff	postinc2,printf@val
  7646  000172  CFDD F0C0          	movff	postdec2,printf@val+1
  7647                           
  7648                           ; BSR set to: 0
  7649  000176  0E02               	movlw	2
  7650  000178  0100               	movlb	0	; () banked
  7651  00017A  27BC               	addwf	printf@ap& (0+255),f,b
  7652  00017C  0E00               	movlw	0
  7653  00017E  23BD               	addwfc	(printf@ap+1)& (0+255),f,b
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;doprnt.c: 1287: }
  7657                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7658  000180  D03C               	goto	l3268
  7659  000182                     l3238:
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7663  000182  0E01               	movlw	1
  7664  000184  0100               	movlb	0	; () banked
  7665  000186  6FC4               	movwf	printf@c& (0+255),b
  7666  000188                     l3240:
  7667                           
  7668                           ; BSR set to: 0
  7669  000188  0E05               	movlw	5
  7670  00018A  0100               	movlb	0	; () banked
  7671  00018C  19C4               	xorwf	printf@c& (0+255),w,b
  7672  00018E  B4D8               	btfsc	status,2,c
  7673  000190  D03D               	goto	l3270
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;doprnt.c: 1306: if(val < dpowers[c])
  7677                           
  7678                           ; BSR set to: 0
  7679                           
  7680                           ; BSR set to: 0
  7681  000192  0100               	movlb	0	; () banked
  7682  000194  51C4               	movf	printf@c& (0+255),w,b
  7683  000196  0D02               	mullw	2
  7684  000198  0E80               	movlw	low _dpowers
  7685  00019A  24F3               	addwf	prodl,w,c
  7686  00019C  6EF6               	movwf	tblptrl,c
  7687  00019E  0EFE               	movlw	high _dpowers
  7688  0001A0  20F4               	addwfc	prodh,w,c
  7689  0001A2  6EF7               	movwf	tblptrh,c
  7690  0001A4                     	if	0	;There are less than 3 active tblptr bytes
  7691  0001A4                     	endif
  7692  0001A4  0009               	tblrd		*+
  7693  0001A6  50F5               	movf	tablat,w,c
  7694  0001A8  0100               	movlb	0	; () banked
  7695  0001AA  5DBF               	subwf	printf@val& (0+255),w,b
  7696  0001AC  0009               	tblrd		*+
  7697  0001AE  50F5               	movf	tablat,w,c
  7698  0001B0  0100               	movlb	0	; () banked
  7699  0001B2  59C0               	subwfb	(printf@val+1)& (0+255),w,b
  7700  0001B4  A0D8               	btfss	status,0,c
  7701  0001B6  D02A               	goto	l3270
  7702                           
  7703                           ; BSR set to: 0
  7704                           
  7705                           ; BSR set to: 0
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;doprnt.c: 1307: break;
  7709  0001B8  0100               	movlb	0	; () banked
  7710  0001BA  2BC4               	incf	printf@c& (0+255),f,b
  7711  0001BC  D7E5               	goto	l3240
  7712  0001BE                     l3252:
  7713                           
  7714                           ; BSR set to: 0
  7715                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7716  0001BE  0E01               	movlw	1
  7717  0001C0  0100               	movlb	0	; () banked
  7718  0001C2  6FC4               	movwf	printf@c& (0+255),b
  7719  0001C4                     l3254:
  7720                           
  7721                           ; BSR set to: 0
  7722  0001C4  0E04               	movlw	4
  7723  0001C6  0100               	movlb	0	; () banked
  7724  0001C8  19C4               	xorwf	printf@c& (0+255),w,b
  7725  0001CA  B4D8               	btfsc	status,2,c
  7726  0001CC  D01F               	goto	l3270
  7727                           
  7728                           ; BSR set to: 0
  7729                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7730                           
  7731                           ; BSR set to: 0
  7732                           
  7733                           ; BSR set to: 0
  7734  0001CE  0100               	movlb	0	; () banked
  7735  0001D0  51C4               	movf	printf@c& (0+255),w,b
  7736  0001D2  0D02               	mullw	2
  7737  0001D4  0E8A               	movlw	low _hexpowers
  7738  0001D6  24F3               	addwf	prodl,w,c
  7739  0001D8  6EF6               	movwf	tblptrl,c
  7740  0001DA  0EFE               	movlw	high _hexpowers
  7741  0001DC  20F4               	addwfc	prodh,w,c
  7742  0001DE  6EF7               	movwf	tblptrh,c
  7743  0001E0                     	if	0	;There are less than 3 active tblptr bytes
  7744  0001E0                     	endif
  7745  0001E0  0009               	tblrd		*+
  7746  0001E2  50F5               	movf	tablat,w,c
  7747  0001E4  0100               	movlb	0	; () banked
  7748  0001E6  5DBF               	subwf	printf@val& (0+255),w,b
  7749  0001E8  0009               	tblrd		*+
  7750  0001EA  50F5               	movf	tablat,w,c
  7751  0001EC  0100               	movlb	0	; () banked
  7752  0001EE  59C0               	subwfb	(printf@val+1)& (0+255),w,b
  7753  0001F0  A0D8               	btfss	status,0,c
  7754  0001F2  D00C               	goto	l3270
  7755                           
  7756                           ; BSR set to: 0
  7757                           
  7758                           ; BSR set to: 0
  7759                           
  7760                           ; BSR set to: 0
  7761                           ;doprnt.c: 1318: break;
  7762  0001F4  0100               	movlb	0	; () banked
  7763  0001F6  2BC4               	incf	printf@c& (0+255),f,b
  7764  0001F8  D7E5               	goto	l3254
  7765  0001FA                     l3268:
  7766                           
  7767                           ; BSR set to: 0
  7768  0001FA  0100               	movlb	0	; () banked
  7769  0001FC  51C1               	movf	printf@flag& (0+255),w,b
  7770  0001FE  0B80               	andlw	128
  7771                           
  7772                           ; Switch size 1, requested type "space"
  7773                           ; Number of cases is 2, Range of values is 0 to 128
  7774                           ; switch strategies available:
  7775                           ; Name         Instructions Cycles
  7776                           ; simple_byte            7     4 (average)
  7777                           ;	Chosen strategy is simple_byte
  7778  000200  0A00               	xorlw	0	; case 0
  7779  000202  B4D8               	btfsc	status,2,c
  7780  000204  D7BE               	goto	l3238
  7781  000206  0A80               	xorlw	128	; case 128
  7782  000208  B4D8               	btfsc	status,2,c
  7783  00020A  D7D9               	goto	l3252
  7784  00020C                     l3270:
  7785                           
  7786                           ; BSR set to: 0
  7787                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7788  00020C  0100               	movlb	0	; () banked
  7789  00020E  51C2               	movf	printf@width& (0+255),w,b
  7790  000210  0100               	movlb	0	; () banked
  7791  000212  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  7792  000214  B4D8               	btfsc	status,2,c
  7793  000216  D00B               	goto	l3276
  7794                           
  7795                           ; BSR set to: 0
  7796  000218  C0C1  F0B7         	movff	printf@flag,??_printf
  7797  00021C  0E03               	movlw	3
  7798  00021E  0100               	movlb	0	; () banked
  7799  000220  17B7               	andwf	??_printf& (0+255),f,b
  7800  000222  B4D8               	btfsc	status,2,c
  7801  000224  D004               	goto	l3276
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;doprnt.c: 1346: width--;
  7805  000226  0100               	movlb	0	; () banked
  7806  000228  07C2               	decf	printf@width& (0+255),f,b
  7807  00022A  A0D8               	btfss	status,0,c
  7808  00022C  07C3               	decf	(printf@width+1)& (0+255),f,b
  7809  00022E                     l3276:
  7810                           
  7811                           ; BSR set to: 0
  7812                           ;doprnt.c: 1381: if(width > c)
  7813  00022E  0E80               	movlw	128
  7814  000230  0100               	movlb	0	; () banked
  7815  000232  BFC4               	btfsc	printf@c& (0+255),7,b
  7816  000234  0E7F               	movlw	127
  7817  000236  0100               	movlb	0	; () banked
  7818  000238  6FB7               	movwf	??_printf& (0+255),b
  7819  00023A  0100               	movlb	0	; () banked
  7820  00023C  51C2               	movf	printf@width& (0+255),w,b
  7821  00023E  0100               	movlb	0	; () banked
  7822  000240  5DC4               	subwf	printf@c& (0+255),w,b
  7823  000242  0100               	movlb	0	; () banked
  7824  000244  51C3               	movf	(printf@width+1)& (0+255),w,b
  7825  000246  0A80               	xorlw	128
  7826  000248  0100               	movlb	0	; () banked
  7827  00024A  59B7               	subwfb	??_printf& (0+255),w,b
  7828  00024C  B0D8               	btfsc	status,0,c
  7829  00024E  D00B               	goto	l3280
  7830                           
  7831                           ; BSR set to: 0
  7832                           ;doprnt.c: 1382: width -= c;
  7833  000250  0100               	movlb	0	; () banked
  7834  000252  51C4               	movf	printf@c& (0+255),w,b
  7835  000254  0100               	movlb	0	; () banked
  7836  000256  5FC2               	subwf	printf@width& (0+255),f,b
  7837  000258  0E00               	movlw	0
  7838  00025A  0100               	movlb	0	; () banked
  7839  00025C  BFC4               	btfsc	printf@c& (0+255),7,b
  7840  00025E  0EFF               	movlw	255
  7841  000260  0100               	movlb	0	; () banked
  7842  000262  5BC3               	subwfb	(printf@width+1)& (0+255),f,b
  7843  000264  D005               	goto	l3282
  7844  000266                     l3280:
  7845                           
  7846                           ; BSR set to: 0
  7847                           ;doprnt.c: 1383: else
  7848                           ;doprnt.c: 1384: width = 0;
  7849  000266  0E00               	movlw	0
  7850  000268  0100               	movlb	0	; () banked
  7851  00026A  6FC3               	movwf	(printf@width+1)& (0+255),b
  7852  00026C  0E00               	movlw	0
  7853  00026E  6FC2               	movwf	printf@width& (0+255),b
  7854  000270                     l3282:
  7855                           
  7856                           ; BSR set to: 0
  7857                           ;doprnt.c: 1387: if(flag & 0x04) {
  7858  000270  0100               	movlb	0	; () banked
  7859  000272  A5C1               	btfss	printf@flag& (0+255),2,b
  7860  000274  D018               	goto	l3294
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;doprnt.c: 1392: if(flag & 0x03)
  7864  000276  C0C1  F0B7         	movff	printf@flag,??_printf
  7865  00027A  0E03               	movlw	3
  7866  00027C  0100               	movlb	0	; () banked
  7867  00027E  17B7               	andwf	??_printf& (0+255),f,b
  7868  000280  B4D8               	btfsc	status,2,c
  7869  000282  D003               	goto	l3288
  7870                           
  7871                           ; BSR set to: 0
  7872                           ;doprnt.c: 1393: (putch('-') );
  7873  000284  0E2D               	movlw	45
  7874  000286  EC88  F011         	call	_putch
  7875  00028A                     l3288:
  7876                           
  7877                           ;doprnt.c: 1415: if(width)
  7878  00028A  0100               	movlb	0	; () banked
  7879  00028C  51C2               	movf	printf@width& (0+255),w,b
  7880  00028E  0100               	movlb	0	; () banked
  7881  000290  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  7882  000292  B4D8               	btfsc	status,2,c
  7883  000294  D025               	goto	l3304
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;doprnt.c: 1417: (putch('0') );
  7887                           
  7888                           ; BSR set to: 0
  7889                           
  7890                           ;doprnt.c: 1416: do
  7891  000296  0E30               	movlw	48
  7892  000298  EC88  F011         	call	_putch
  7893                           
  7894                           ;doprnt.c: 1418: while(--width);
  7895  00029C  0100               	movlb	0	; () banked
  7896  00029E  07C2               	decf	printf@width& (0+255),f,b
  7897  0002A0  A0D8               	btfss	status,0,c
  7898  0002A2  07C3               	decf	(printf@width+1)& (0+255),f,b
  7899  0002A4  D7F2               	goto	l3288
  7900  0002A6                     l3294:
  7901                           
  7902                           ; BSR set to: 0
  7903                           ;doprnt.c: 1422: {
  7904                           ;doprnt.c: 1424: if(width
  7905                           ;doprnt.c: 1428: )
  7906  0002A6  0100               	movlb	0	; () banked
  7907  0002A8  51C2               	movf	printf@width& (0+255),w,b
  7908  0002AA  0100               	movlb	0	; () banked
  7909  0002AC  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  7910  0002AE  B4D8               	btfsc	status,2,c
  7911  0002B0  D00D               	goto	l3300
  7912  0002B2                     l3296:
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;doprnt.c: 1430: (putch(' ') );
  7916  0002B2  0E20               	movlw	32
  7917  0002B4  EC88  F011         	call	_putch
  7918                           
  7919                           ;doprnt.c: 1431: while(--width);
  7920  0002B8  0100               	movlb	0	; () banked
  7921  0002BA  07C2               	decf	printf@width& (0+255),f,b
  7922  0002BC  A0D8               	btfss	status,0,c
  7923  0002BE  07C3               	decf	(printf@width+1)& (0+255),f,b
  7924  0002C0  0100               	movlb	0	; () banked
  7925  0002C2  51C2               	movf	printf@width& (0+255),w,b
  7926  0002C4  0100               	movlb	0	; () banked
  7927  0002C6  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  7928  0002C8  A4D8               	btfss	status,2,c
  7929  0002CA  D7F3               	goto	l3296
  7930  0002CC                     l3300:
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;doprnt.c: 1438: if(flag & 0x03)
  7934  0002CC  C0C1  F0B7         	movff	printf@flag,??_printf
  7935  0002D0  0E03               	movlw	3
  7936  0002D2  0100               	movlb	0	; () banked
  7937  0002D4  17B7               	andwf	??_printf& (0+255),f,b
  7938  0002D6  B4D8               	btfsc	status,2,c
  7939  0002D8  D003               	goto	l3304
  7940                           
  7941                           ; BSR set to: 0
  7942                           ;doprnt.c: 1439: (putch('-') );
  7943  0002DA  0E2D               	movlw	45
  7944  0002DC  EC88  F011         	call	_putch
  7945  0002E0                     l3304:
  7946                           
  7947                           ;doprnt.c: 1469: }
  7948                           ;doprnt.c: 1472: prec = c;
  7949  0002E0  C0C4  F0BE         	movff	printf@c,printf@prec
  7950                           
  7951                           ;doprnt.c: 1474: while(prec--) {
  7952  0002E4  D057               	goto	l3318
  7953  0002E6                     l3306:
  7954                           
  7955                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7956  0002E6  0100               	movlb	0	; () banked
  7957  0002E8  51BE               	movf	printf@prec& (0+255),w,b
  7958  0002EA  0D02               	mullw	2
  7959  0002EC  0E80               	movlw	low _dpowers
  7960  0002EE  24F3               	addwf	prodl,w,c
  7961  0002F0  6EF6               	movwf	tblptrl,c
  7962  0002F2  0EFE               	movlw	high _dpowers
  7963  0002F4  20F4               	addwfc	prodh,w,c
  7964  0002F6  6EF7               	movwf	tblptrh,c
  7965  0002F8                     	if	0	;There are less than 3 active tblptr bytes
  7966  0002F8                     	endif
  7967  0002F8  0009               	tblrd		*+
  7968  0002FA  CFF5 F013          	movff	tablat,___lwdiv@divisor
  7969  0002FE  000A               	tblrd		*-
  7970  000300  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  7971  000304  C0BF  F011         	movff	printf@val,___lwdiv@dividend
  7972  000308  C0C0  F012         	movff	printf@val+1,___lwdiv@dividend+1
  7973  00030C  ECDC  F00F         	call	___lwdiv	;wreg free
  7974  000310  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  7975  000314  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  7976  000318  0E00               	movlw	0
  7977  00031A  6E1B               	movwf	___lwmod@divisor+1,c
  7978  00031C  0E0A               	movlw	10
  7979  00031E  6E1A               	movwf	___lwmod@divisor,c
  7980  000320  ECB7  F010         	call	___lwmod	;wreg free
  7981  000324  5018               	movf	?___lwmod,w,c
  7982  000326  0F30               	addlw	48
  7983  000328  0100               	movlb	0	; () banked
  7984  00032A  6FC4               	movwf	printf@c& (0+255),b
  7985                           
  7986                           ;doprnt.c: 1491: break;
  7987  00032C  D02F               	goto	l3316
  7988  00032E                     l3308:
  7989                           
  7990                           ; BSR set to: 0
  7991                           ;doprnt.c: 1499: {
  7992                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7993  00032E  C0BF  F011         	movff	printf@val,___lwdiv@dividend
  7994  000332  C0C0  F012         	movff	printf@val+1,___lwdiv@dividend+1
  7995  000336  0100               	movlb	0	; () banked
  7996  000338  51BE               	movf	printf@prec& (0+255),w,b
  7997  00033A  0D02               	mullw	2
  7998  00033C  0E8A               	movlw	low _hexpowers
  7999  00033E  24F3               	addwf	prodl,w,c
  8000  000340  6EF6               	movwf	tblptrl,c
  8001  000342  0EFE               	movlw	high _hexpowers
  8002  000344  20F4               	addwfc	prodh,w,c
  8003  000346  6EF7               	movwf	tblptrh,c
  8004  000348                     	if	0	;There are less than 3 active tblptr bytes
  8005  000348                     	endif
  8006  000348  0009               	tblrd		*+
  8007  00034A  CFF5 F013          	movff	tablat,___lwdiv@divisor
  8008  00034E  000A               	tblrd		*-
  8009  000350  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  8010  000354  ECDC  F00F         	call	___lwdiv	;wreg free
  8011  000358  5011               	movf	?___lwdiv,w,c
  8012  00035A  0B0F               	andlw	15
  8013  00035C  0100               	movlb	0	; () banked
  8014  00035E  6FBB               	movwf	printf@idx& (0+255),b
  8015                           
  8016                           ; BSR set to: 0
  8017                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8018  000360  0100               	movlb	0	; () banked
  8019  000362  51BB               	movf	printf@idx& (0+255),w,b
  8020  000364  0D01               	mullw	1
  8021  000366  0E54               	movlw	low STR_22
  8022  000368  24F3               	addwf	prodl,w,c
  8023  00036A  6EF6               	movwf	tblptrl,c
  8024  00036C  0EFF               	movlw	high STR_22
  8025  00036E  20F4               	addwfc	prodh,w,c
  8026  000370  6EF7               	movwf	tblptrh,c
  8027  000372                     	if	0	;There are less than 3 active tblptr bytes
  8028  000372                     	endif
  8029  000372  0008               	tblrd		*
  8030  000374  CFF5 F0C4          	movff	tablat,printf@c
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;doprnt.c: 1523: }
  8034                           
  8035                           ;doprnt.c: 1508: }
  8036                           ;doprnt.c: 1510: break;
  8037  000378  D009               	goto	l3316
  8038  00037A                     l3314:
  8039  00037A  0100               	movlb	0	; () banked
  8040  00037C  51C1               	movf	printf@flag& (0+255),w,b
  8041  00037E  0B80               	andlw	128
  8042                           
  8043                           ; Switch size 1, requested type "space"
  8044                           ; Number of cases is 2, Range of values is 0 to 128
  8045                           ; switch strategies available:
  8046                           ; Name         Instructions Cycles
  8047                           ; simple_byte            7     4 (average)
  8048                           ;	Chosen strategy is simple_byte
  8049  000380  0A00               	xorlw	0	; case 0
  8050  000382  B4D8               	btfsc	status,2,c
  8051  000384  D7B0               	goto	l3306
  8052  000386  0A80               	xorlw	128	; case 128
  8053  000388  B4D8               	btfsc	status,2,c
  8054  00038A  D7D1               	goto	l3308
  8055  00038C                     l3316:
  8056                           
  8057                           ; BSR set to: 0
  8058                           ;doprnt.c: 1524: (putch(c) );
  8059  00038C  0100               	movlb	0	; () banked
  8060  00038E  51C4               	movf	printf@c& (0+255),w,b
  8061  000390  EC88  F011         	call	_putch
  8062  000394                     l3318:
  8063  000394  0100               	movlb	0	; () banked
  8064  000396  07BE               	decf	printf@prec& (0+255),f,b
  8065  000398  0100               	movlb	0	; () banked
  8066  00039A  29BE               	incf	printf@prec& (0+255),w,b
  8067  00039C  A4D8               	btfss	status,2,c
  8068  00039E  D7ED               	goto	l3314
  8069  0003A0                     l3320:
  8070  0003A0  C0AF  FFF6         	movff	printf@f,tblptrl
  8071  0003A4  C0B0  FFF7         	movff	printf@f+1,tblptrh
  8072  0003A8  0100               	movlb	0	; () banked
  8073  0003AA  4BAF               	infsnz	printf@f& (0+255),f,b
  8074  0003AC  2BB0               	incf	(printf@f+1)& (0+255),f,b
  8075  0003AE                     	if	0	;tblptru may be non-zero
  8076  0003AE                     	endif
  8077  0003AE                     	if	0	;tblptru may be non-zero
  8078  0003AE                     	endif
  8079  0003AE  0008               	tblrd		*
  8080  0003B0  CFF5 F0C4          	movff	tablat,printf@c
  8081  0003B4  0100               	movlb	0	; () banked
  8082  0003B6  51C4               	movf	printf@c& (0+255),w,b
  8083  0003B8  B4D8               	btfsc	status,2,c
  8084  0003BA  0012               	return	
  8085  0003BC  D631               	goto	l3194
  8086  0003BE                     __end_of_printf:
  8087                           	opt stack 0
  8088                           tblptru	equ	0xFF8
  8089                           tblptrh	equ	0xFF7
  8090                           tblptrl	equ	0xFF6
  8091                           tablat	equ	0xFF5
  8092                           prodh	equ	0xFF4
  8093                           prodl	equ	0xFF3
  8094                           intcon	equ	0xFF2
  8095                           intcon2	equ	0xFF1
  8096                           intcon3	equ	0xFF0
  8097                           postinc0	equ	0xFEE
  8098                           wreg	equ	0xFE8
  8099                           postdec1	equ	0xFE5
  8100                           fsr1l	equ	0xFE1
  8101                           indf2	equ	0xFDF
  8102                           postinc2	equ	0xFDE
  8103                           postdec2	equ	0xFDD
  8104                           fsr2h	equ	0xFDA
  8105                           fsr2l	equ	0xFD9
  8106                           status	equ	0xFD8
  8107                           
  8108 ;; *************** function _putch *****************
  8109 ;; Defined at:
  8110 ;;		line 30 in file "lcd.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;  data            1    wreg     unsigned char 
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;  data            1   18[COMRAM] unsigned char 
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  1    wreg      void 
  8117 ;; Registers used:
  8118 ;;		wreg, status,2, status,0, cstack
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;Total ram usage:        1 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    2
  8131 ;; This function calls:
  8132 ;;		_lcdNibble
  8133 ;; This function is called by:
  8134 ;;		_printf
  8135 ;; This function uses a non-reentrant model
  8136 ;;
  8137                           
  8138                           	psect	text37
  8139  002310                     __ptext37:
  8140                           	opt stack 0
  8141  002310                     _putch:
  8142                           	opt stack 26
  8143                           
  8144                           ;incstack = 0
  8145                           ;putch@data stored from wreg
  8146  002310  6E13               	movwf	putch@data,c
  8147                           
  8148                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  8149  002312  848C               	bsf	3980,2,c	;volatile
  8150                           
  8151                           ;lcd.c: 32: lcdNibble(data);
  8152  002314  5013               	movf	putch@data,w,c
  8153  002316  EC05  F010         	call	_lcdNibble
  8154  00231A  0012               	return		;funcret
  8155  00231C                     __end_of_putch:
  8156                           	opt stack 0
  8157                           tblptru	equ	0xFF8
  8158                           tblptrh	equ	0xFF7
  8159                           tblptrl	equ	0xFF6
  8160                           tablat	equ	0xFF5
  8161                           prodh	equ	0xFF4
  8162                           prodl	equ	0xFF3
  8163                           intcon	equ	0xFF2
  8164                           intcon2	equ	0xFF1
  8165                           intcon3	equ	0xFF0
  8166                           postinc0	equ	0xFEE
  8167                           wreg	equ	0xFE8
  8168                           postdec1	equ	0xFE5
  8169                           fsr1l	equ	0xFE1
  8170                           indf2	equ	0xFDF
  8171                           postinc2	equ	0xFDE
  8172                           postdec2	equ	0xFDD
  8173                           fsr2h	equ	0xFDA
  8174                           fsr2l	equ	0xFD9
  8175                           status	equ	0xFD8
  8176                           
  8177 ;; *************** function _isdigit *****************
  8178 ;; Defined at:
  8179 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;  c               1    wreg     unsigned char 
  8182 ;; Auto vars:     Size  Location     Type
  8183 ;;  c               1   18[COMRAM] unsigned char 
  8184 ;; Return value:  Size  Location     Type
  8185 ;;		None               void
  8186 ;; Registers used:
  8187 ;;		wreg, status,2, status,0
  8188 ;; Tracked objects:
  8189 ;;		On entry : 0/0
  8190 ;;		On exit  : 0/0
  8191 ;;		Unchanged: 0/0
  8192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8194 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8195 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8196 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8197 ;;Total ram usage:        3 bytes
  8198 ;; Hardware stack levels used:    1
  8199 ;; Hardware stack levels required when called:    1
  8200 ;; This function calls:
  8201 ;;		Nothing
  8202 ;; This function is called by:
  8203 ;;		_printf
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207                           	psect	text38
  8208  0022D0                     __ptext38:
  8209                           	opt stack 0
  8210  0022D0                     _isdigit:
  8211                           	opt stack 27
  8212                           
  8213                           ;incstack = 0
  8214                           ;isdigit@c stored from wreg
  8215  0022D0  6E13               	movwf	isdigit@c,c
  8216  0022D2  0E00               	movlw	0
  8217  0022D4  6E12               	movwf	_isdigit$981,c
  8218  0022D6  0E3A               	movlw	58
  8219  0022D8  6013               	cpfslt	isdigit@c,c
  8220  0022DA  D005               	goto	l3136
  8221  0022DC  0E2F               	movlw	47
  8222  0022DE  6413               	cpfsgt	isdigit@c,c
  8223  0022E0  D002               	goto	l3136
  8224  0022E2  0E01               	movlw	1
  8225  0022E4  6E12               	movwf	_isdigit$981,c
  8226  0022E6                     l3136:
  8227  0022E6  C012  F011         	movff	_isdigit$981,??_isdigit
  8228  0022EA  3011               	rrcf	??_isdigit,w,c
  8229  0022EC  0012               	return	
  8230  0022EE                     __end_of_isdigit:
  8231                           	opt stack 0
  8232                           tblptru	equ	0xFF8
  8233                           tblptrh	equ	0xFF7
  8234                           tblptrl	equ	0xFF6
  8235                           tablat	equ	0xFF5
  8236                           prodh	equ	0xFF4
  8237                           prodl	equ	0xFF3
  8238                           intcon	equ	0xFF2
  8239                           intcon2	equ	0xFF1
  8240                           intcon3	equ	0xFF0
  8241                           postinc0	equ	0xFEE
  8242                           wreg	equ	0xFE8
  8243                           postdec1	equ	0xFE5
  8244                           fsr1l	equ	0xFE1
  8245                           indf2	equ	0xFDF
  8246                           postinc2	equ	0xFDE
  8247                           postdec2	equ	0xFDD
  8248                           fsr2h	equ	0xFDA
  8249                           fsr2l	equ	0xFD9
  8250                           status	equ	0xFD8
  8251                           
  8252 ;; *************** function ___wmul *****************
  8253 ;; Defined at:
  8254 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  8255 ;; Parameters:    Size  Location     Type
  8256 ;;  multiplier      2   16[COMRAM] unsigned int 
  8257 ;;  multiplicand    2   18[COMRAM] unsigned int 
  8258 ;; Auto vars:     Size  Location     Type
  8259 ;;  product         2   20[COMRAM] unsigned int 
  8260 ;; Return value:  Size  Location     Type
  8261 ;;                  2   16[COMRAM] unsigned int 
  8262 ;; Registers used:
  8263 ;;		wreg, status,2, status,0, prodl, prodh
  8264 ;; Tracked objects:
  8265 ;;		On entry : 0/0
  8266 ;;		On exit  : 0/0
  8267 ;;		Unchanged: 0/0
  8268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8269 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8270 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8272 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8273 ;;Total ram usage:        6 bytes
  8274 ;; Hardware stack levels used:    1
  8275 ;; Hardware stack levels required when called:    1
  8276 ;; This function calls:
  8277 ;;		Nothing
  8278 ;; This function is called by:
  8279 ;;		_time_difference
  8280 ;;		_printf
  8281 ;;		_eval_poly
  8282 ;;		_servo_rotate
  8283 ;; This function uses a non-reentrant model
  8284 ;;
  8285                           
  8286                           	psect	text39
  8287  002286                     __ptext39:
  8288                           	opt stack 0
  8289  002286                     ___wmul:
  8290                           	opt stack 23
  8291                           
  8292                           ;incstack = 0
  8293  002286  5011               	movf	___wmul@multiplier,w,c
  8294  002288  0213               	mulwf	___wmul@multiplicand,c
  8295  00228A  CFF3 F015          	movff	prodl,___wmul@product
  8296  00228E  CFF4 F016          	movff	prodh,___wmul@product+1
  8297  002292  5011               	movf	___wmul@multiplier,w,c
  8298  002294  0214               	mulwf	___wmul@multiplicand+1,c
  8299  002296  50F3               	movf	prodl,w,c
  8300  002298  2616               	addwf	___wmul@product+1,f,c
  8301  00229A  5012               	movf	___wmul@multiplier+1,w,c
  8302  00229C  0213               	mulwf	___wmul@multiplicand,c
  8303  00229E  50F3               	movf	prodl,w,c
  8304  0022A0  2616               	addwf	___wmul@product+1,f,c
  8305  0022A2  C015  F011         	movff	___wmul@product,?___wmul
  8306  0022A6  C016  F012         	movff	___wmul@product+1,?___wmul+1
  8307  0022AA  0012               	return	
  8308  0022AC                     __end_of___wmul:
  8309                           	opt stack 0
  8310                           tblptru	equ	0xFF8
  8311                           tblptrh	equ	0xFF7
  8312                           tblptrl	equ	0xFF6
  8313                           tablat	equ	0xFF5
  8314                           prodh	equ	0xFF4
  8315                           prodl	equ	0xFF3
  8316                           intcon	equ	0xFF2
  8317                           intcon2	equ	0xFF1
  8318                           intcon3	equ	0xFF0
  8319                           postinc0	equ	0xFEE
  8320                           wreg	equ	0xFE8
  8321                           postdec1	equ	0xFE5
  8322                           fsr1l	equ	0xFE1
  8323                           indf2	equ	0xFDF
  8324                           postinc2	equ	0xFDE
  8325                           postdec2	equ	0xFDD
  8326                           fsr2h	equ	0xFDA
  8327                           fsr2l	equ	0xFD9
  8328                           status	equ	0xFD8
  8329                           
  8330 ;; *************** function ___lwmod *****************
  8331 ;; Defined at:
  8332 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  dividend        2   23[COMRAM] unsigned int 
  8335 ;;  divisor         2   25[COMRAM] unsigned int 
  8336 ;; Auto vars:     Size  Location     Type
  8337 ;;  counter         1   27[COMRAM] unsigned char 
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  2   23[COMRAM] unsigned int 
  8340 ;; Registers used:
  8341 ;;		wreg, status,2, status,0
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8347 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;Total ram usage:        5 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    1
  8354 ;; This function calls:
  8355 ;;		Nothing
  8356 ;; This function is called by:
  8357 ;;		_printf
  8358 ;; This function uses a non-reentrant model
  8359 ;;
  8360                           
  8361                           	psect	text40
  8362  00216E                     __ptext40:
  8363                           	opt stack 0
  8364  00216E                     ___lwmod:
  8365                           	opt stack 27
  8366                           
  8367                           ;incstack = 0
  8368  00216E  501A               	movf	___lwmod@divisor,w,c
  8369  002170  101B               	iorwf	___lwmod@divisor+1,w,c
  8370  002172  B4D8               	btfsc	status,2,c
  8371  002174  D018               	goto	l822
  8372  002176  0E01               	movlw	1
  8373  002178  6E1C               	movwf	___lwmod@counter,c
  8374  00217A  D004               	goto	l3168
  8375  00217C                     l3166:
  8376  00217C  90D8               	bcf	status,0,c
  8377  00217E  361A               	rlcf	___lwmod@divisor,f,c
  8378  002180  361B               	rlcf	___lwmod@divisor+1,f,c
  8379  002182  2A1C               	incf	___lwmod@counter,f,c
  8380  002184                     l3168:
  8381  002184  AE1B               	btfss	___lwmod@divisor+1,7,c
  8382  002186  D7FA               	goto	l3166
  8383  002188                     l3170:
  8384  002188  501A               	movf	___lwmod@divisor,w,c
  8385  00218A  5C18               	subwf	___lwmod@dividend,w,c
  8386  00218C  501B               	movf	___lwmod@divisor+1,w,c
  8387  00218E  5819               	subwfb	___lwmod@dividend+1,w,c
  8388  002190  A0D8               	btfss	status,0,c
  8389  002192  D004               	goto	l3174
  8390  002194  501A               	movf	___lwmod@divisor,w,c
  8391  002196  5E18               	subwf	___lwmod@dividend,f,c
  8392  002198  501B               	movf	___lwmod@divisor+1,w,c
  8393  00219A  5A19               	subwfb	___lwmod@dividend+1,f,c
  8394  00219C                     l3174:
  8395  00219C  90D8               	bcf	status,0,c
  8396  00219E  321B               	rrcf	___lwmod@divisor+1,f,c
  8397  0021A0  321A               	rrcf	___lwmod@divisor,f,c
  8398  0021A2  2E1C               	decfsz	___lwmod@counter,f,c
  8399  0021A4  D7F1               	goto	l3170
  8400  0021A6                     l822:
  8401  0021A6  C018  F018         	movff	___lwmod@dividend,?___lwmod
  8402  0021AA  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  8403  0021AE  0012               	return		;funcret
  8404  0021B0                     __end_of___lwmod:
  8405                           	opt stack 0
  8406                           tblptru	equ	0xFF8
  8407                           tblptrh	equ	0xFF7
  8408                           tblptrl	equ	0xFF6
  8409                           tablat	equ	0xFF5
  8410                           prodh	equ	0xFF4
  8411                           prodl	equ	0xFF3
  8412                           intcon	equ	0xFF2
  8413                           intcon2	equ	0xFF1
  8414                           intcon3	equ	0xFF0
  8415                           postinc0	equ	0xFEE
  8416                           wreg	equ	0xFE8
  8417                           postdec1	equ	0xFE5
  8418                           fsr1l	equ	0xFE1
  8419                           indf2	equ	0xFDF
  8420                           postinc2	equ	0xFDE
  8421                           postdec2	equ	0xFDD
  8422                           fsr2h	equ	0xFDA
  8423                           fsr2l	equ	0xFD9
  8424                           status	equ	0xFD8
  8425                           
  8426 ;; *************** function ___lwdiv *****************
  8427 ;; Defined at:
  8428 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;  dividend        2   16[COMRAM] unsigned int 
  8431 ;;  divisor         2   18[COMRAM] unsigned int 
  8432 ;; Auto vars:     Size  Location     Type
  8433 ;;  quotient        2   20[COMRAM] unsigned int 
  8434 ;;  counter         1   22[COMRAM] unsigned char 
  8435 ;; Return value:  Size  Location     Type
  8436 ;;                  2   16[COMRAM] unsigned int 
  8437 ;; Registers used:
  8438 ;;		wreg, status,2, status,0
  8439 ;; Tracked objects:
  8440 ;;		On entry : 0/0
  8441 ;;		On exit  : 0/0
  8442 ;;		Unchanged: 0/0
  8443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8444 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8447 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8448 ;;Total ram usage:        7 bytes
  8449 ;; Hardware stack levels used:    1
  8450 ;; Hardware stack levels required when called:    1
  8451 ;; This function calls:
  8452 ;;		Nothing
  8453 ;; This function is called by:
  8454 ;;		_printf
  8455 ;; This function uses a non-reentrant model
  8456 ;;
  8457                           
  8458                           	psect	text41
  8459  001FB8                     __ptext41:
  8460                           	opt stack 0
  8461  001FB8                     ___lwdiv:
  8462                           	opt stack 27
  8463                           
  8464                           ;incstack = 0
  8465  001FB8  0E00               	movlw	0
  8466  001FBA  6E16               	movwf	___lwdiv@quotient+1,c
  8467  001FBC  0E00               	movlw	0
  8468  001FBE  6E15               	movwf	___lwdiv@quotient,c
  8469  001FC0  5013               	movf	___lwdiv@divisor,w,c
  8470  001FC2  1014               	iorwf	___lwdiv@divisor+1,w,c
  8471  001FC4  B4D8               	btfsc	status,2,c
  8472  001FC6  D01C               	goto	l812
  8473  001FC8  0E01               	movlw	1
  8474  001FCA  6E17               	movwf	___lwdiv@counter,c
  8475  001FCC  D004               	goto	l3148
  8476  001FCE                     l3146:
  8477  001FCE  90D8               	bcf	status,0,c
  8478  001FD0  3613               	rlcf	___lwdiv@divisor,f,c
  8479  001FD2  3614               	rlcf	___lwdiv@divisor+1,f,c
  8480  001FD4  2A17               	incf	___lwdiv@counter,f,c
  8481  001FD6                     l3148:
  8482  001FD6  AE14               	btfss	___lwdiv@divisor+1,7,c
  8483  001FD8  D7FA               	goto	l3146
  8484  001FDA                     l3150:
  8485  001FDA  90D8               	bcf	status,0,c
  8486  001FDC  3615               	rlcf	___lwdiv@quotient,f,c
  8487  001FDE  3616               	rlcf	___lwdiv@quotient+1,f,c
  8488  001FE0  5013               	movf	___lwdiv@divisor,w,c
  8489  001FE2  5C11               	subwf	___lwdiv@dividend,w,c
  8490  001FE4  5014               	movf	___lwdiv@divisor+1,w,c
  8491  001FE6  5812               	subwfb	___lwdiv@dividend+1,w,c
  8492  001FE8  A0D8               	btfss	status,0,c
  8493  001FEA  D005               	goto	l3158
  8494  001FEC  5013               	movf	___lwdiv@divisor,w,c
  8495  001FEE  5E11               	subwf	___lwdiv@dividend,f,c
  8496  001FF0  5014               	movf	___lwdiv@divisor+1,w,c
  8497  001FF2  5A12               	subwfb	___lwdiv@dividend+1,f,c
  8498  001FF4  8015               	bsf	___lwdiv@quotient,0,c
  8499  001FF6                     l3158:
  8500  001FF6  90D8               	bcf	status,0,c
  8501  001FF8  3214               	rrcf	___lwdiv@divisor+1,f,c
  8502  001FFA  3213               	rrcf	___lwdiv@divisor,f,c
  8503  001FFC  2E17               	decfsz	___lwdiv@counter,f,c
  8504  001FFE  D7ED               	goto	l3150
  8505  002000                     l812:
  8506  002000  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
  8507  002004  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8508  002008  0012               	return		;funcret
  8509  00200A                     __end_of___lwdiv:
  8510                           	opt stack 0
  8511                           tblptru	equ	0xFF8
  8512                           tblptrh	equ	0xFF7
  8513                           tblptrl	equ	0xFF6
  8514                           tablat	equ	0xFF5
  8515                           prodh	equ	0xFF4
  8516                           prodl	equ	0xFF3
  8517                           intcon	equ	0xFF2
  8518                           intcon2	equ	0xFF1
  8519                           intcon3	equ	0xFF0
  8520                           postinc0	equ	0xFEE
  8521                           wreg	equ	0xFE8
  8522                           postdec1	equ	0xFE5
  8523                           fsr1l	equ	0xFE1
  8524                           indf2	equ	0xFDF
  8525                           postinc2	equ	0xFDE
  8526                           postdec2	equ	0xFDD
  8527                           fsr2h	equ	0xFDA
  8528                           fsr2l	equ	0xFD9
  8529                           status	equ	0xFD8
  8530                           
  8531 ;; *************** function _lcdInst *****************
  8532 ;; Defined at:
  8533 ;;		line 25 in file "lcd.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;  data            1    wreg     unsigned char 
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;  data            1   18[COMRAM] unsigned char 
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  1    wreg      void 
  8540 ;; Registers used:
  8541 ;;		wreg, status,2, status,0, cstack
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8550 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8551 ;;Total ram usage:        1 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    2
  8554 ;; This function calls:
  8555 ;;		_lcdNibble
  8556 ;; This function is called by:
  8557 ;;		_main
  8558 ;;		_init_operation
  8559 ;;		_runtime
  8560 ;;		_bottle_count
  8561 ;;		_operation_end
  8562 ;;		_date_time
  8563 ;;		_initLCD
  8564 ;; This function uses a non-reentrant model
  8565 ;;
  8566                           
  8567                           	psect	text42
  8568  00231C                     __ptext42:
  8569                           	opt stack 0
  8570  00231C                     _lcdInst:
  8571                           	opt stack 27
  8572                           
  8573                           ;incstack = 0
  8574                           ;lcdInst@data stored from wreg
  8575  00231C  6E13               	movwf	lcdInst@data,c
  8576                           
  8577                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  8578  00231E  948C               	bcf	3980,2,c	;volatile
  8579                           
  8580                           ;lcd.c: 27: lcdNibble(data);
  8581  002320  5013               	movf	lcdInst@data,w,c
  8582  002322  EC05  F010         	call	_lcdNibble
  8583  002326  0012               	return		;funcret
  8584  002328                     __end_of_lcdInst:
  8585                           	opt stack 0
  8586                           tblptru	equ	0xFF8
  8587                           tblptrh	equ	0xFF7
  8588                           tblptrl	equ	0xFF6
  8589                           tablat	equ	0xFF5
  8590                           prodh	equ	0xFF4
  8591                           prodl	equ	0xFF3
  8592                           intcon	equ	0xFF2
  8593                           intcon2	equ	0xFF1
  8594                           intcon3	equ	0xFF0
  8595                           postinc0	equ	0xFEE
  8596                           wreg	equ	0xFE8
  8597                           postdec1	equ	0xFE5
  8598                           fsr1l	equ	0xFE1
  8599                           indf2	equ	0xFDF
  8600                           postinc2	equ	0xFDE
  8601                           postdec2	equ	0xFDD
  8602                           fsr2h	equ	0xFDA
  8603                           fsr2l	equ	0xFD9
  8604                           status	equ	0xFD8
  8605                           
  8606 ;; *************** function _lcdNibble *****************
  8607 ;; Defined at:
  8608 ;;		line 35 in file "lcd.c"
  8609 ;; Parameters:    Size  Location     Type
  8610 ;;  data            1    wreg     unsigned char 
  8611 ;; Auto vars:     Size  Location     Type
  8612 ;;  data            1   17[COMRAM] unsigned char 
  8613 ;;  temp            1   16[COMRAM] unsigned char 
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  1    wreg      void 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2, status,0
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8624 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;Total ram usage:        2 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    1
  8630 ;; This function calls:
  8631 ;;		Nothing
  8632 ;; This function is called by:
  8633 ;;		_lcdInst
  8634 ;;		_putch
  8635 ;; This function uses a non-reentrant model
  8636 ;;
  8637                           
  8638                           	psect	text43
  8639  00200A                     __ptext43:
  8640                           	opt stack 0
  8641  00200A                     _lcdNibble:
  8642                           	opt stack 26
  8643                           
  8644                           ;incstack = 0
  8645                           ;lcdNibble@data stored from wreg
  8646  00200A  6E12               	movwf	lcdNibble@data,c
  8647                           
  8648                           ;lcd.c: 37: char temp = data & 0xF0;
  8649  00200C  5012               	movf	lcdNibble@data,w,c
  8650  00200E  0BF0               	andlw	240
  8651  002010  6E11               	movwf	lcdNibble@temp,c
  8652                           
  8653                           ;lcd.c: 38: LATD = LATD & 0x0F;
  8654  002012  508C               	movf	3980,w,c	;volatile
  8655  002014  0B0F               	andlw	15
  8656  002016  6E8C               	movwf	3980,c	;volatile
  8657                           
  8658                           ;lcd.c: 39: LATD = temp | LATD;
  8659  002018  5011               	movf	lcdNibble@temp,w,c
  8660  00201A  108C               	iorwf	3980,w,c	;volatile
  8661  00201C  6E8C               	movwf	3980,c	;volatile
  8662                           
  8663                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  8664  00201E  968C               	bcf	3980,3,c	;volatile
  8665                           
  8666                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8667  002020  0E19               	movlw	25
  8668  002022                     u3637:
  8669  002022  2EE8               	decfsz	wreg,f,c
  8670  002024  D7FE               	bra	u3637
  8671                           
  8672                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  8673  002026  868C               	bsf	3980,3,c	;volatile
  8674                           
  8675                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8676  002028  0E19               	movlw	25
  8677  00202A                     u3647:
  8678  00202A  2EE8               	decfsz	wreg,f,c
  8679  00202C  D7FE               	bra	u3647
  8680                           
  8681                           ;lcd.c: 46: data = data << 4;
  8682  00202E  3812               	swapf	lcdNibble@data,w,c
  8683  002030  0BF0               	andlw	240
  8684  002032  6E12               	movwf	lcdNibble@data,c
  8685                           
  8686                           ;lcd.c: 48: temp = data & 0xF0;
  8687  002034  5012               	movf	lcdNibble@data,w,c
  8688  002036  0BF0               	andlw	240
  8689  002038  6E11               	movwf	lcdNibble@temp,c
  8690                           
  8691                           ;lcd.c: 49: LATD = LATD & 0x0F;
  8692  00203A  508C               	movf	3980,w,c	;volatile
  8693  00203C  0B0F               	andlw	15
  8694  00203E  6E8C               	movwf	3980,c	;volatile
  8695                           
  8696                           ;lcd.c: 50: LATD = temp | LATD;
  8697  002040  5011               	movf	lcdNibble@temp,w,c
  8698  002042  108C               	iorwf	3980,w,c	;volatile
  8699  002044  6E8C               	movwf	3980,c	;volatile
  8700                           
  8701                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  8702  002046  968C               	bcf	3980,3,c	;volatile
  8703                           
  8704                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8705  002048  0E19               	movlw	25
  8706  00204A                     u3657:
  8707  00204A  2EE8               	decfsz	wreg,f,c
  8708  00204C  D7FE               	bra	u3657
  8709                           
  8710                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  8711  00204E  868C               	bsf	3980,3,c	;volatile
  8712                           
  8713                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8714  002050  0E19               	movlw	25
  8715  002052                     u3667:
  8716  002052  2EE8               	decfsz	wreg,f,c
  8717  002054  D7FE               	bra	u3667
  8718  002056  0012               	return		;funcret
  8719  002058                     __end_of_lcdNibble:
  8720                           	opt stack 0
  8721                           tblptru	equ	0xFF8
  8722                           tblptrh	equ	0xFF7
  8723                           tblptrl	equ	0xFF6
  8724                           tablat	equ	0xFF5
  8725                           prodh	equ	0xFF4
  8726                           prodl	equ	0xFF3
  8727                           intcon	equ	0xFF2
  8728                           intcon2	equ	0xFF1
  8729                           intcon3	equ	0xFF0
  8730                           postinc0	equ	0xFEE
  8731                           wreg	equ	0xFE8
  8732                           postdec1	equ	0xFE5
  8733                           fsr1l	equ	0xFE1
  8734                           indf2	equ	0xFDF
  8735                           postinc2	equ	0xFDE
  8736                           postdec2	equ	0xFDD
  8737                           fsr2h	equ	0xFDA
  8738                           fsr2l	equ	0xFD9
  8739                           status	equ	0xFD8
  8740                           
  8741 ;; *************** function _I2C_Master_Init *****************
  8742 ;; Defined at:
  8743 ;;		line 13 in file "I2C.c"
  8744 ;; Parameters:    Size  Location     Type
  8745 ;;  c               4   29[COMRAM] const unsigned long 
  8746 ;; Auto vars:     Size  Location     Type
  8747 ;;		None
  8748 ;; Return value:  Size  Location     Type
  8749 ;;                  1    wreg      void 
  8750 ;; Registers used:
  8751 ;;		wreg, status,2, status,0, cstack
  8752 ;; Tracked objects:
  8753 ;;		On entry : 0/0
  8754 ;;		On exit  : 0/0
  8755 ;;		Unchanged: 0/0
  8756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8757 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8759 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8760 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8761 ;;Total ram usage:        8 bytes
  8762 ;; Hardware stack levels used:    1
  8763 ;; Hardware stack levels required when called:    2
  8764 ;; This function calls:
  8765 ;;		___lldiv
  8766 ;; This function is called by:
  8767 ;;		_main
  8768 ;; This function uses a non-reentrant model
  8769 ;;
  8770                           
  8771                           	psect	text44
  8772  001F5E                     __ptext44:
  8773                           	opt stack 0
  8774  001F5E                     _I2C_Master_Init:
  8775                           	opt stack 28
  8776                           
  8777                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  8778                           
  8779                           ;incstack = 0
  8780  001F5E  0E00               	movlw	0
  8781  001F60  6EC7               	movwf	4039,c	;volatile
  8782                           
  8783                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  8784  001F62  0E28               	movlw	40
  8785  001F64  6EC6               	movwf	4038,c	;volatile
  8786                           
  8787                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  8788  001F66  0E00               	movlw	0
  8789  001F68  6EC5               	movwf	4037,c	;volatile
  8790                           
  8791                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  8792  001F6A  0E80               	movlw	128
  8793  001F6C  6E11               	movwf	___lldiv@dividend,c
  8794  001F6E  0E96               	movlw	150
  8795  001F70  6E12               	movwf	___lldiv@dividend+1,c
  8796  001F72  0E98               	movlw	152
  8797  001F74  6E13               	movwf	___lldiv@dividend+2,c
  8798  001F76  0E00               	movlw	0
  8799  001F78  6E14               	movwf	___lldiv@dividend+3,c
  8800  001F7A  C01E  F022         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  8801  001F7E  C01F  F023         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  8802  001F82  C020  F024         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  8803  001F86  C021  F025         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  8804  001F8A  0E02               	movlw	2
  8805  001F8C                     u3095:
  8806  001F8C  90D8               	bcf	status,0,c
  8807  001F8E  3622               	rlcf	??_I2C_Master_Init,f,c
  8808  001F90  3623               	rlcf	??_I2C_Master_Init+1,f,c
  8809  001F92  3624               	rlcf	??_I2C_Master_Init+2,f,c
  8810  001F94  3625               	rlcf	??_I2C_Master_Init+3,f,c
  8811  001F96  2EE8               	decfsz	wreg,f,c
  8812  001F98  D7F9               	goto	u3095
  8813  001F9A  C022  F015         	movff	??_I2C_Master_Init,___lldiv@divisor
  8814  001F9E  C023  F016         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8815  001FA2  C024  F017         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8816  001FA6  C025  F018         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8817  001FAA  ECCB  F00E         	call	___lldiv	;wreg free
  8818  001FAE  0411               	decf	?___lldiv,w,c
  8819  001FB0  6EC8               	movwf	4040,c	;volatile
  8820                           
  8821                           ;I2C.c: 20: TRISC3 = 1;
  8822  001FB2  8694               	bsf	3988,3,c	;volatile
  8823                           
  8824                           ;I2C.c: 21: TRISC4 = 1;
  8825  001FB4  8894               	bsf	3988,4,c	;volatile
  8826  001FB6  0012               	return		;funcret
  8827  001FB8                     __end_of_I2C_Master_Init:
  8828                           	opt stack 0
  8829                           tblptru	equ	0xFF8
  8830                           tblptrh	equ	0xFF7
  8831                           tblptrl	equ	0xFF6
  8832                           tablat	equ	0xFF5
  8833                           prodh	equ	0xFF4
  8834                           prodl	equ	0xFF3
  8835                           intcon	equ	0xFF2
  8836                           intcon2	equ	0xFF1
  8837                           intcon3	equ	0xFF0
  8838                           postinc0	equ	0xFEE
  8839                           wreg	equ	0xFE8
  8840                           postdec1	equ	0xFE5
  8841                           fsr1l	equ	0xFE1
  8842                           indf2	equ	0xFDF
  8843                           postinc2	equ	0xFDE
  8844                           postdec2	equ	0xFDD
  8845                           fsr2h	equ	0xFDA
  8846                           fsr2l	equ	0xFD9
  8847                           status	equ	0xFD8
  8848                           
  8849 ;; *************** function ___lldiv *****************
  8850 ;; Defined at:
  8851 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;  dividend        4   16[COMRAM] unsigned long 
  8854 ;;  divisor         4   20[COMRAM] unsigned long 
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;  quotient        4   24[COMRAM] unsigned long 
  8857 ;;  counter         1   28[COMRAM] unsigned char 
  8858 ;; Return value:  Size  Location     Type
  8859 ;;                  4   16[COMRAM] unsigned long 
  8860 ;; Registers used:
  8861 ;;		wreg, status,2, status,0
  8862 ;; Tracked objects:
  8863 ;;		On entry : 0/0
  8864 ;;		On exit  : 0/0
  8865 ;;		Unchanged: 0/0
  8866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8867 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8868 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8870 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8871 ;;Total ram usage:       13 bytes
  8872 ;; Hardware stack levels used:    1
  8873 ;; Hardware stack levels required when called:    1
  8874 ;; This function calls:
  8875 ;;		Nothing
  8876 ;; This function is called by:
  8877 ;;		_I2C_Master_Init
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           	psect	text45
  8882  001D96                     __ptext45:
  8883                           	opt stack 0
  8884  001D96                     ___lldiv:
  8885                           	opt stack 28
  8886                           
  8887                           ;incstack = 0
  8888  001D96  0E00               	movlw	0
  8889  001D98  6E19               	movwf	___lldiv@quotient,c
  8890  001D9A  0E00               	movlw	0
  8891  001D9C  6E1A               	movwf	___lldiv@quotient+1,c
  8892  001D9E  0E00               	movlw	0
  8893  001DA0  6E1B               	movwf	___lldiv@quotient+2,c
  8894  001DA2  0E00               	movlw	0
  8895  001DA4  6E1C               	movwf	___lldiv@quotient+3,c
  8896  001DA6  5015               	movf	___lldiv@divisor,w,c
  8897  001DA8  1016               	iorwf	___lldiv@divisor+1,w,c
  8898  001DAA  1017               	iorwf	___lldiv@divisor+2,w,c
  8899  001DAC  1018               	iorwf	___lldiv@divisor+3,w,c
  8900  001DAE  B4D8               	btfsc	status,2,c
  8901  001DB0  D02A               	goto	l759
  8902  001DB2  0E01               	movlw	1
  8903  001DB4  6E1D               	movwf	___lldiv@counter,c
  8904  001DB6  D006               	goto	l3394
  8905  001DB8                     l3392:
  8906  001DB8  90D8               	bcf	status,0,c
  8907  001DBA  3615               	rlcf	___lldiv@divisor,f,c
  8908  001DBC  3616               	rlcf	___lldiv@divisor+1,f,c
  8909  001DBE  3617               	rlcf	___lldiv@divisor+2,f,c
  8910  001DC0  3618               	rlcf	___lldiv@divisor+3,f,c
  8911  001DC2  2A1D               	incf	___lldiv@counter,f,c
  8912  001DC4                     l3394:
  8913  001DC4  AE18               	btfss	___lldiv@divisor+3,7,c
  8914  001DC6  D7F8               	goto	l3392
  8915  001DC8                     l3396:
  8916  001DC8  90D8               	bcf	status,0,c
  8917  001DCA  3619               	rlcf	___lldiv@quotient,f,c
  8918  001DCC  361A               	rlcf	___lldiv@quotient+1,f,c
  8919  001DCE  361B               	rlcf	___lldiv@quotient+2,f,c
  8920  001DD0  361C               	rlcf	___lldiv@quotient+3,f,c
  8921  001DD2  5015               	movf	___lldiv@divisor,w,c
  8922  001DD4  5C11               	subwf	___lldiv@dividend,w,c
  8923  001DD6  5016               	movf	___lldiv@divisor+1,w,c
  8924  001DD8  5812               	subwfb	___lldiv@dividend+1,w,c
  8925  001DDA  5017               	movf	___lldiv@divisor+2,w,c
  8926  001DDC  5813               	subwfb	___lldiv@dividend+2,w,c
  8927  001DDE  5018               	movf	___lldiv@divisor+3,w,c
  8928  001DE0  5814               	subwfb	___lldiv@dividend+3,w,c
  8929  001DE2  A0D8               	btfss	status,0,c
  8930  001DE4  D009               	goto	l3404
  8931  001DE6  5015               	movf	___lldiv@divisor,w,c
  8932  001DE8  5E11               	subwf	___lldiv@dividend,f,c
  8933  001DEA  5016               	movf	___lldiv@divisor+1,w,c
  8934  001DEC  5A12               	subwfb	___lldiv@dividend+1,f,c
  8935  001DEE  5017               	movf	___lldiv@divisor+2,w,c
  8936  001DF0  5A13               	subwfb	___lldiv@dividend+2,f,c
  8937  001DF2  5018               	movf	___lldiv@divisor+3,w,c
  8938  001DF4  5A14               	subwfb	___lldiv@dividend+3,f,c
  8939  001DF6  8019               	bsf	___lldiv@quotient,0,c
  8940  001DF8                     l3404:
  8941  001DF8  90D8               	bcf	status,0,c
  8942  001DFA  3218               	rrcf	___lldiv@divisor+3,f,c
  8943  001DFC  3217               	rrcf	___lldiv@divisor+2,f,c
  8944  001DFE  3216               	rrcf	___lldiv@divisor+1,f,c
  8945  001E00  3215               	rrcf	___lldiv@divisor,f,c
  8946  001E02  2E1D               	decfsz	___lldiv@counter,f,c
  8947  001E04  D7E1               	goto	l3396
  8948  001E06                     l759:
  8949  001E06  C019  F011         	movff	___lldiv@quotient,?___lldiv
  8950  001E0A  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  8951  001E0E  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  8952  001E12  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  8953  001E16  0012               	return		;funcret
  8954  001E18                     __end_of___lldiv:
  8955                           	opt stack 0
  8956                           tblptru	equ	0xFF8
  8957                           tblptrh	equ	0xFF7
  8958                           tblptrl	equ	0xFF6
  8959                           tablat	equ	0xFF5
  8960                           prodh	equ	0xFF4
  8961                           prodl	equ	0xFF3
  8962                           intcon	equ	0xFF2
  8963                           intcon2	equ	0xFF1
  8964                           intcon3	equ	0xFF0
  8965                           postinc0	equ	0xFEE
  8966                           wreg	equ	0xFE8
  8967                           postdec1	equ	0xFE5
  8968                           fsr1l	equ	0xFE1
  8969                           indf2	equ	0xFDF
  8970                           postinc2	equ	0xFDE
  8971                           postdec2	equ	0xFDD
  8972                           fsr2h	equ	0xFDA
  8973                           fsr2l	equ	0xFD9
  8974                           status	equ	0xFD8
  8975                           
  8976 ;; *************** function _keypressed *****************
  8977 ;; Defined at:
  8978 ;;		line 127 in file "main.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;		None
  8981 ;; Auto vars:     Size  Location     Type
  8982 ;;		None
  8983 ;; Return value:  Size  Location     Type
  8984 ;;                  1    wreg      void 
  8985 ;; Registers used:
  8986 ;;		wreg, status,2, status,0
  8987 ;; Tracked objects:
  8988 ;;		On entry : 0/0
  8989 ;;		On exit  : 0/0
  8990 ;;		Unchanged: 0/0
  8991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8994 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8995 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8996 ;;Total ram usage:       16 bytes
  8997 ;; Hardware stack levels used:    1
  8998 ;; This function calls:
  8999 ;;		Nothing
  9000 ;; This function is called by:
  9001 ;;		Interrupt level 2
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           	psect	intcode
  9006  000008                     __pintcode:
  9007                           	opt stack 0
  9008  000008                     _keypressed:
  9009                           	opt stack 22
  9010                           
  9011                           ;incstack = 0
  9012  000008  826F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9013  00000A  ED0D  F00A         	call	int_func,f	;refresh shadow registers
  9014                           tblptru	equ	0xFF8
  9015                           tblptrh	equ	0xFF7
  9016                           tblptrl	equ	0xFF6
  9017                           tablat	equ	0xFF5
  9018                           prodh	equ	0xFF4
  9019                           prodl	equ	0xFF3
  9020                           intcon	equ	0xFF2
  9021                           intcon2	equ	0xFF1
  9022                           intcon3	equ	0xFF0
  9023                           postinc0	equ	0xFEE
  9024                           wreg	equ	0xFE8
  9025                           postdec1	equ	0xFE5
  9026                           fsr1l	equ	0xFE1
  9027                           indf2	equ	0xFDF
  9028                           postinc2	equ	0xFDE
  9029                           postdec2	equ	0xFDD
  9030                           fsr2h	equ	0xFDA
  9031                           fsr2l	equ	0xFD9
  9032                           status	equ	0xFD8
  9033                           
  9034                           	psect	intcode_body
  9035  00141A                     __pintcode_body:
  9036                           	opt stack 22
  9037  00141A                     int_func:
  9038                           	opt stack 22
  9039  00141A  0006               	pop		; remove dummy address from shadow register refresh
  9040  00141C  CFFA F003          	movff	pclath,??_keypressed+2
  9041  001420  CFFB F004          	movff	pclatu,??_keypressed+3
  9042  001424  CFE9 F005          	movff	fsr0l,??_keypressed+4
  9043  001428  CFEA F006          	movff	fsr0h,??_keypressed+5
  9044  00142C  CFE1 F007          	movff	fsr1l,??_keypressed+6
  9045  001430  CFE2 F008          	movff	fsr1h,??_keypressed+7
  9046  001434  CFD9 F009          	movff	fsr2l,??_keypressed+8
  9047  001438  CFDA F00A          	movff	fsr2h,??_keypressed+9
  9048  00143C  CFF3 F00B          	movff	prodl,??_keypressed+10
  9049  001440  CFF4 F00C          	movff	prodh,??_keypressed+11
  9050  001444  CFF6 F00D          	movff	tblptrl,??_keypressed+12
  9051  001448  CFF7 F00E          	movff	tblptrh,??_keypressed+13
  9052  00144C  CFF8 F00F          	movff	tblptru,??_keypressed+14
  9053  001450  CFF5 F010          	movff	tablat,??_keypressed+15
  9054                           
  9055                           ;main.c: 128: if(INT1IF){
  9056  001454  B0F0               	btfsc	intcon3,0,c	;volatile
  9057  001456  D01B               	goto	i2l3680
  9058  001458  D03F               	goto	i2l98
  9059  00145A                     i2l3660:
  9060                           
  9061                           ;main.c: 131: curr_state = OPERATION_END;
  9062  00145A  0E02               	movlw	2
  9063  00145C  D012               	goto	L14
  9064  00145E                     i2l3662:
  9065                           
  9066                           ;main.c: 135: curr_state = OPERATION;
  9067  00145E  0E01               	movlw	1
  9068  001460  D010               	goto	L14
  9069  001462                     i2l3664:
  9070                           
  9071                           ;main.c: 139: curr_state = RUNTIME;
  9072  001462  0E05               	movlw	5
  9073  001464  D00E               	goto	L14
  9074  001466                     i2l3666:
  9075                           
  9076                           ;main.c: 143: curr_state = BOTTLECOUNT;
  9077  001466  0E04               	movlw	4
  9078  001468  0100               	movlb	0	; () banked
  9079  00146A  6FFB               	movwf	_curr_state& (0+255),b
  9080                           
  9081                           ;main.c: 144: bot_type = TOTAL;
  9082  00146C  0E00               	movlw	0
  9083  00146E  D00C               	goto	L13
  9084  001470                     i2l3668:
  9085                           
  9086                           ;main.c: 147: bot_type = A;
  9087  001470  0E01               	movlw	1
  9088  001472  D00A               	goto	L13
  9089  001474                     i2l3670:
  9090                           
  9091                           ;main.c: 150: bot_type = B;
  9092  001474  0E02               	movlw	2
  9093  001476  D008               	goto	L13
  9094  001478                     i2l3672:
  9095                           
  9096                           ;main.c: 153: bot_type = C;
  9097  001478  0E03               	movlw	3
  9098  00147A  D006               	goto	L13
  9099  00147C                     i2l3674:
  9100                           
  9101                           ;main.c: 156: bot_type = D;
  9102  00147C  0E04               	movlw	4
  9103  00147E  D004               	goto	L13
  9104  001480                     i2l3676:
  9105                           
  9106                           ;main.c: 159: curr_state = DATETIME;
  9107  001480  0E03               	movlw	3
  9108  001482                     L14:
  9109  001482  0100               	movlb	0	; () banked
  9110  001484  6FFB               	movwf	_curr_state& (0+255),b
  9111                           
  9112                           ;main.c: 160: bot_type = O;
  9113  001486  0E05               	movlw	5
  9114  001488                     L13:
  9115  001488  0100               	movlb	0	; () banked
  9116  00148A  6FFA               	movwf	_bot_type& (0+255),b
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;main.c: 164: }
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;main.c: 163: break;
  9123                           
  9124                           ;main.c: 162: default:
  9125                           
  9126                           ;main.c: 161: break;
  9127  00148C  D025               	goto	i2l98
  9128  00148E                     i2l3680:
  9129  00148E  3881               	swapf	3969,w,c	;volatile
  9130  001490  0B0F               	andlw	15
  9131  001492  0B0F               	andlw	15
  9132  001494  6E01               	movwf	??_keypressed& (0+255),c
  9133  001496  6A02               	clrf	(??_keypressed+1)& (0+255),c
  9134                           
  9135                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9136                           ; Switch size 1, requested type "space"
  9137                           ; Number of cases is 1, Range of values is 0 to 0
  9138                           ; switch strategies available:
  9139                           ; Name         Instructions Cycles
  9140                           ; simple_byte            4     3 (average)
  9141                           ;	Chosen strategy is simple_byte
  9142  001498  5002               	movf	??_keypressed+1,w,c
  9143  00149A  0A00               	xorlw	0	; case 0
  9144  00149C  A4D8               	btfss	status,2,c
  9145  00149E  D01C               	goto	i2l98
  9146                           
  9147                           ; Switch size 1, requested type "space"
  9148                           ; Number of cases is 9, Range of values is 0 to 15
  9149                           ; switch strategies available:
  9150                           ; Name         Instructions Cycles
  9151                           ; simple_byte           28    15 (average)
  9152                           ;	Chosen strategy is simple_byte
  9153  0014A0  5001               	movf	??_keypressed,w,c
  9154  0014A2  0A00               	xorlw	0	; case 0
  9155  0014A4  B4D8               	btfsc	status,2,c
  9156  0014A6  D7DB               	goto	i2l3662
  9157  0014A8  0A01               	xorlw	1	; case 1
  9158  0014AA  B4D8               	btfsc	status,2,c
  9159  0014AC  D7DA               	goto	i2l3664
  9160  0014AE  0A03               	xorlw	3	; case 2
  9161  0014B0  B4D8               	btfsc	status,2,c
  9162  0014B2  D7D9               	goto	i2l3666
  9163  0014B4  0A01               	xorlw	1	; case 3
  9164  0014B6  B4D8               	btfsc	status,2,c
  9165  0014B8  D7DB               	goto	i2l3668
  9166  0014BA  0A07               	xorlw	7	; case 4
  9167  0014BC  B4D8               	btfsc	status,2,c
  9168  0014BE  D7E0               	goto	i2l3676
  9169  0014C0  0A03               	xorlw	3	; case 7
  9170  0014C2  B4D8               	btfsc	status,2,c
  9171  0014C4  D7D7               	goto	i2l3670
  9172  0014C6  0A0C               	xorlw	12	; case 11
  9173  0014C8  B4D8               	btfsc	status,2,c
  9174  0014CA  D7D6               	goto	i2l3672
  9175  0014CC  0A07               	xorlw	7	; case 12
  9176  0014CE  B4D8               	btfsc	status,2,c
  9177  0014D0  D7C4               	goto	i2l3660
  9178  0014D2  0A03               	xorlw	3	; case 15
  9179  0014D4  B4D8               	btfsc	status,2,c
  9180  0014D6  D7D2               	goto	i2l3674
  9181  0014D8                     i2l98:
  9182                           
  9183                           ;main.c: 165: }
  9184                           ;main.c: 166: INT1IF = 0;
  9185  0014D8  90F0               	bcf	intcon3,0,c	;volatile
  9186                           
  9187                           ;main.c: 167: return;
  9188  0014DA  C010  FFF5         	movff	??_keypressed+15,tablat
  9189  0014DE  C00F  FFF8         	movff	??_keypressed+14,tblptru
  9190  0014E2  C00E  FFF7         	movff	??_keypressed+13,tblptrh
  9191  0014E6  C00D  FFF6         	movff	??_keypressed+12,tblptrl
  9192  0014EA  C00C  FFF4         	movff	??_keypressed+11,prodh
  9193  0014EE  C00B  FFF3         	movff	??_keypressed+10,prodl
  9194  0014F2  C00A  FFDA         	movff	??_keypressed+9,fsr2h
  9195  0014F6  C009  FFD9         	movff	??_keypressed+8,fsr2l
  9196  0014FA  C008  FFE2         	movff	??_keypressed+7,fsr1h
  9197  0014FE  C007  FFE1         	movff	??_keypressed+6,fsr1l
  9198  001502  C006  FFEA         	movff	??_keypressed+5,fsr0h
  9199  001506  C005  FFE9         	movff	??_keypressed+4,fsr0l
  9200  00150A  C004  FFFB         	movff	??_keypressed+3,pclatu
  9201  00150E  C003  FFFA         	movff	??_keypressed+2,pclath
  9202  001512  926F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9203  001514  0011               	retfie		f
  9204  001516                     __end_of_keypressed:
  9205                           	opt stack 0
  9206                           pclatu	equ	0xFFB
  9207                           pclath	equ	0xFFA
  9208                           tblptru	equ	0xFF8
  9209                           tblptrh	equ	0xFF7
  9210                           tblptrl	equ	0xFF6
  9211                           tablat	equ	0xFF5
  9212                           prodh	equ	0xFF4
  9213                           prodl	equ	0xFF3
  9214                           intcon	equ	0xFF2
  9215                           intcon2	equ	0xFF1
  9216                           intcon3	equ	0xFF0
  9217                           postinc0	equ	0xFEE
  9218                           fsr0h	equ	0xFEA
  9219                           fsr0l	equ	0xFE9
  9220                           wreg	equ	0xFE8
  9221                           postdec1	equ	0xFE5
  9222                           fsr1h	equ	0xFE2
  9223                           fsr1l	equ	0xFE1
  9224                           indf2	equ	0xFDF
  9225                           postinc2	equ	0xFDE
  9226                           postdec2	equ	0xFDD
  9227                           fsr2h	equ	0xFDA
  9228                           fsr2l	equ	0xFD9
  9229                           status	equ	0xFD8
  9230                           pclatu	equ	0xFFB
  9231                           pclath	equ	0xFFA
  9232                           tblptru	equ	0xFF8
  9233                           tblptrh	equ	0xFF7
  9234                           tblptrl	equ	0xFF6
  9235                           tablat	equ	0xFF5
  9236                           prodh	equ	0xFF4
  9237                           prodl	equ	0xFF3
  9238                           intcon	equ	0xFF2
  9239                           intcon2	equ	0xFF1
  9240                           intcon3	equ	0xFF0
  9241                           postinc0	equ	0xFEE
  9242                           fsr0h	equ	0xFEA
  9243                           fsr0l	equ	0xFE9
  9244                           wreg	equ	0xFE8
  9245                           postdec1	equ	0xFE5
  9246                           fsr1h	equ	0xFE2
  9247                           fsr1l	equ	0xFE1
  9248                           indf2	equ	0xFDF
  9249                           postinc2	equ	0xFDE
  9250                           postdec2	equ	0xFDD
  9251                           fsr2h	equ	0xFDA
  9252                           fsr2l	equ	0xFD9
  9253                           status	equ	0xFD8
  9254                           
  9255                           	psect	rparam
  9256  0000                     pclatu	equ	0xFFB
  9257                           pclath	equ	0xFFA
  9258                           tblptru	equ	0xFF8
  9259                           tblptrh	equ	0xFF7
  9260                           tblptrl	equ	0xFF6
  9261                           tablat	equ	0xFF5
  9262                           prodh	equ	0xFF4
  9263                           prodl	equ	0xFF3
  9264                           intcon	equ	0xFF2
  9265                           intcon2	equ	0xFF1
  9266                           intcon3	equ	0xFF0
  9267                           postinc0	equ	0xFEE
  9268                           fsr0h	equ	0xFEA
  9269                           fsr0l	equ	0xFE9
  9270                           wreg	equ	0xFE8
  9271                           postdec1	equ	0xFE5
  9272                           fsr1h	equ	0xFE2
  9273                           fsr1l	equ	0xFE1
  9274                           indf2	equ	0xFDF
  9275                           postinc2	equ	0xFDE
  9276                           postdec2	equ	0xFDD
  9277                           fsr2h	equ	0xFDA
  9278                           fsr2l	equ	0xFD9
  9279                           status	equ	0xFD8
  9280                           
  9281                           	psect	temp
  9282  00006F                     btemp:
  9283                           	opt stack 0
  9284  00006F                     	ds	1
  9285  0000                     int$flags	set	btemp
  9286                           pclatu	equ	0xFFB
  9287                           pclath	equ	0xFFA
  9288                           tblptru	equ	0xFF8
  9289                           tblptrh	equ	0xFF7
  9290                           tblptrl	equ	0xFF6
  9291                           tablat	equ	0xFF5
  9292                           prodh	equ	0xFF4
  9293                           prodl	equ	0xFF3
  9294                           intcon	equ	0xFF2
  9295                           intcon2	equ	0xFF1
  9296                           intcon3	equ	0xFF0
  9297                           postinc0	equ	0xFEE
  9298                           fsr0h	equ	0xFEA
  9299                           fsr0l	equ	0xFE9
  9300                           wreg	equ	0xFE8
  9301                           postdec1	equ	0xFE5
  9302                           fsr1h	equ	0xFE2
  9303                           fsr1l	equ	0xFE1
  9304                           indf2	equ	0xFDF
  9305                           postinc2	equ	0xFDE
  9306                           postdec2	equ	0xFDD
  9307                           fsr2h	equ	0xFDA
  9308                           fsr2l	equ	0xFD9
  9309                           status	equ	0xFD8


Data Sizes:
    Strings     300
    Constant    99
    Data        16
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    108     110
    BANK0           128    122     124
    BANK1           256      0      16
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_21(CODE[23]), STR_20(CODE[23]), STR_19(CODE[17]), STR_18(CODE[17]), 
		 -> STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), STR_14(CODE[17]), 
		 -> STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), 
		 -> STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[19]), STR_6(CODE[17]), 
		 -> STR_5(CODE[19]), STR_4(CODE[19]), STR_3(CODE[19]), STR_2(CODE[17]), 
		 -> STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    read_colorsensor@blue	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@blue(BANK0[2]), 

    read_colorsensor@green	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@green(BANK0[2]), 

    read_colorsensor@red	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@red(BANK0[2]), 

    read_colorsensor@clear	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@clear(BANK0[2]), 

    date_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK0[7]), 

    bottle_count@bot_count	PTR unsigned char  size(2) Largest target is 4
		 -> main@bot_count(BANK0[4]), 

    runtime@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK0[7]), 

    runtime@end_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK0[7]), 

    init_operation@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK0[7]), 

    init_operation@bot_count	PTR unsigned char  size(2) Largest target is 4
		 -> main@bot_count(BANK0[4]), 

    init_operation@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK0[7]), 

    time_difference@time2	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK0[7]), 

    time_difference@time1	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK0[7]), main@time(BANK0[7]), 

    update_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK0[7]), main@time(BANK0[7]), main@start_time(BANK0[7]), 


Critical Paths under _main in COMRAM

    _main->_date_time
    _runtime->_time_difference
    _init_operation->_time_difference
    _update_time->_I2C_Master_Read
    _update_time->_I2C_Master_Write
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    _initLCD->_lcdInst
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _printf->_time_difference
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_init_operation
    _runtime->_printf
    _operation_end->_printf
    _init_operation->_printf
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _date_time->_printf
    _bottle_count->_printf
    _printf->_time_difference

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0  183581
                                             95 BANK0     27    27      0
                    _I2C_Master_Init
                       _bottle_count
                          _date_time
                            _initLCD
                     _init_operation
                            _lcdInst
                      _operation_end
                             _printf
                            _runtime
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _runtime                                              4     0      4   79041
                                             69 BANK0      4     0      4
                            _lcdInst
                             _printf
                    _time_difference
 ---------------------------------------------------------------------------------
 (1) _operation_end                                        0     0      0    4531
                              _delay
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _init_operation                                      26    20      6   83364
                                             69 BANK0     26    20      6
                              _delay
                            _initLCD
                            _lcdInst
                             _printf
                   _read_colorsensor
                    _time_difference
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _update_time                                          3     1      2    1331
                                             19 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _time_difference                                     24    20      4   74514
                                            105 COMRAM     2     2      0
                                             25 BANK0     22    18      4
                             ___wmul
                         _dec_to_hex
 ---------------------------------------------------------------------------------
 (3) _dec_to_hex                                          16    14      2   72787
                                            103 COMRAM     2     0      2
                                             11 BANK0     14    14      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   60927
                                             97 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   20056
                                             67 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   32944
                                             88 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     376
                                             67 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3    8415
                                             80 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     480
                                             16 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     572
                                             55 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     648
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    2414
                                             70 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7    9049
                                             55 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3574
                                             28 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4283
                                             55 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    3986
                                             43 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     237
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    2658
                                             24 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    2687
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2281
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2148
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                     8     0      8    1459
                                             19 COMRAM     8     0      8
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                             19 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _delay                                                6     4      2     220
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _date_time                                            6     4      2    5646
                                            107 COMRAM     1     1      0
                                             69 BANK0      5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     982
                                             17 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             17 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         4     2      2    4463
                                             69 BANK0      4     2      2
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4176
                                             47 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                    _time_difference (ARG)
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     927
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _keypressed                                          16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _initLCD
     _lcdInst
       _lcdNibble
   _init_operation
     _delay
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
     _update_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _lcdInst
     _lcdNibble
   _operation_end
     _delay
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
     _time_difference (ARG)
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _runtime
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _update_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      10       7        6.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7A      7C       5       96.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6C      6E       1       87.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FA      34        0.0%
DATA                 0      0      FA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 27 04:07:30 2017

              _update_time 1E90               ___altoft@exp 004F              ___altoft@sign 0050  
             ___awdiv@sign 0016        ___wmul@multiplicand 0013                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000               ___ftadd@exp1 0037  
             ___ftadd@exp2 0036               ___ftadd@sign 0035                        l152 0420  
                      l262 22EE                        l367 012E                        l812 2000  
                      l652 0960                        l629 1BD2                        l709 22C2  
                      l822 21A6                        l656 098A                        l667 0A3A  
                      l676 0A56                        l844 0E24                        l759 1E06  
                      l687 18A0                        l849 0F5A               __CFG_CPB$OFF 000000  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
         ??_init_operation 00CB                        _exp 0738                        _log 11F4  
                      _pow 0DEC                        wreg 000FE8               __CFG_LVP$OFF 000000  
             ___ftdiv@cntr 0022               ___ftdiv@sign 0027               __CFG_WDT$OFF 000000  
                     l1007 07EA                       l1008 090E                       l1018 19A2  
                     l3100 2280                       l3110 132C                       l3200 0046  
                     l3040 1D26                       l3210 0080                       l3122 1404  
                     l3300 02CC                       l3204 0050                       l3052 1D4C  
                     l3150 1FDA                       l3222 00FC                       l3054 1D54  
                     l3046 1D36                       l2510 1B8A                       l2502 1B54  
                     l3136 22E6                       l3304 02E0                       l3240 0188  
                     l3320 03A0                       l3072 1D8C                       l3064 1D74  
                     l3056 1D58                       l3146 1FCE                       l3170 2188  
                     l3306 02E6                       l3314 037A                       l3234 0166  
                     l3218 00F6                       l2514 1BA0                       l2506 1B62  
                     l3330 1ECC                       l3404 1DF8                       l3148 1FD6  
                     l3308 032E                       l3316 038C                       l3252 01BE  
                     l3068 1D7E                       l2516 1BBE                       l2508 1B6C  
                     l2612 0A72                       l2604 0A28                       l3158 1FF6  
                     l3174 219C                       l3166 217C                       l3318 0394  
                     l3254 01C4                       l3270 020C                       l3238 0182  
                     l3342 20F2                       l2518 1BC8                       l2622 0AA2  
                     l2606 0A32                       l2550 1E46                       l3326 1EC4  
                     l3168 2184                       l3280 0266                       l3600 0C5A  
                     l3352 2112                       l3344 20F6                       l2632 1632  
                     l2720 15B8                       l3336 1EE8                       l3282 0270  
                     l3194 0020                       l3354 2116                       l2570 0998  
                     l2730 15E2                       l3276 022E                       l3268 01FA  
                     l3348 20FE                       l2820 223C                       l2564 096E  
                     l2652 168C                       l2548 1E3A                       l2716 15A8  
                     l3294 02A6                       l3198 0034                       l3542 0FA4  
                     l2662 16B4                       l2638 165A                       l2734 15F8  
                     l2726 15D0                       l2910 120E                       l3392 1DB8  
                     l3296 02B2                       l3288 028A                       l2592 09EA  
                     l2808 21C6                       l2656 169C                       l2728 15DC  
                     l3394 1DC4                       l3570 0B10                       l3538 0F9C  
                     l2770 183C                       l2594 09F4                       l2586 09C8  
                     l2666 16C4                       l2682 1CE2                       l2746 1C1A  
                     l2842 190E                       l3396 1DC8                       l3564 0ACA  
                     l3548 0FC4                       l2764 1814                       l2596 09FE  
                     l2932 0750                       l2916 122E                       l3582 0BA2  
                     l2790 187A                       l2598 0A06                       l2854 19F0  
                     l2678 1CB2                       l2846 1928                       l2838 1900  
                     l3902 06A6                       l3576 0B56                       l2856 1A6C  
                     l2688 1D0E                       l2872 1ADE                       l2864 1A9A  
                     l2944 07BC                       l2698 1542                       l2938 0786  
                     l3906 06D2                       l3914 0702                       l3834 0424  
                     l3588 0BEE                       l3596 0C1C                       l2884 1B00  
                     l2980 0E32                       l3916 070E                       l3828 03F4  
                     l3598 0C3E                       l2966 08E4                       l2896 1F08  
                     l2888 1B0C                       l3880 0608                       l2898 1F14  
                     l2994 0EAC                       l2986 0E4A                       l3882 061E  
                     l3890 064C                       l3874 05D8                       l3962 1172  
                     l3970 11B4                       l3868 05B0                       l3876 05DC  
                     l3964 1184                       l3972 11D6                       l3956 1136  
                     ?_exp 0059                       ?_log 0044                       l2998 0ED2  
                     l3894 0678                       l3966 1196                       l3958 113C  
                     ?_pow 0062                       STR_1 FED2                       STR_2 FFDC  
                     STR_3 FF41                       STR_4 FF1B                       STR_5 FF1B  
                     STR_6 FFBA                       STR_7 FF2E                       STR_8 FF76  
                     STR_9 FF65                       u2051 161A                       u2141 1526  
                     _LATA 000F89                       u2230 1C42                       _LATB 000F8A  
                     u2071 1642                       _LATC 000F8B                       u2160 1560  
                     _LATD 000F8C                       u2241 17FC                       _LATE 000F8D  
                     u2340 191A                       u2261 1824                       u2165 1558  
                     u2238 1C44                       u3410 0420                       u2380 1ABA  
                     u3095 1F8C                       u2480 07C4                       u1841 092C  
                     u2490 07C6                       u2570 0E96                       u1851 0940  
                     u2388 1ABC                       u2670 227E                       u3607 20DC  
                     u3617 2104                       u3537 11E4                       u3627 0C4C  
                     u3547 0486                       u3637 2022                       u3557 05CA  
                     u3647 202A                       u3567 063E                       u3657 204A  
                     u3577 0698                       u3667 2052                       u3587 06F2  
                     _RCEN 007E2B                       u3597 20A8                       i2l98 14D8  
                     _RSEN 007E29                       _main 10BA               ___ftpack@arg 0011  
                     _keys FE6F               ___ftpack@exp 0014                       fsr0h 000FEA  
                     fsr1h 000FE2                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 006F                       exp@x 0059                       log@x 0044  
                     pow@x 0062                       pow@y 0065                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___ftmul@cntr 002A               ___param_bank 000000  
             ___ftmul@sign 002B              ?_bottle_count 00C5               ___fttol@exp1 0046  
                    ??_exp 005C                      ??_log 0047               ___fttol@lval 0042  
                    ??_pow 0068           ?_I2C_Master_Init 001E           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001               main@end_time 00E8           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
          __end_of___awdiv 1D96            __end_of___ftadd 0AC8                      STR_10 FF87  
                    STR_11 FF65                      STR_12 FFCB                      STR_20 FEED  
                    STR_13 FF65                      STR_21 FF04                      STR_14 FF98  
                    STR_22 FF54                      STR_15 FF65                      STR_16 FFED  
                    STR_17 FF65                      STR_18 FFA9                      STR_19 FF1D  
          __end_of___ftdiv 18D2            __end_of___ftneg 22D0            __end_of___lldiv 1E18  
          __end_of___ftmul 16FE            ___awdiv@divisor 0013            __end_of___ftsub 21F0  
          __end_of___fttol 160A            __end_of___lwdiv 200A            __end_of___lwmod 21B0  
          ___awdiv@counter 0015                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
             ___lltoft@exp 0021            __end_of_lcdInst 2328             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_initLCD 20E8  
           __CFG_EBTRB$OFF 000000              ___awtoft@sign 001C                      _delay 20E8  
          __end_of_dpowers FE8A                      _floor 18D2                      _ldexp 1A82  
                    _frexp 1BF2                      _errno 006D            __end_of_isdigit 22EE  
            ___ftpack@sign 0015                      _putch 2310                      pclath 000FFA  
                    tablat 000FF5                      pow@yi 0087                      status 000FD8  
          __end_of_runtime 20A2             __CFG_PBADEN$ON 000000                exp@exponent 005F  
              ldexp@newexp 0047            __initialization 21F0                log@exponent 0047  
 init_operation@start_time 00C5             ??_bottle_count 00C7               __end_of_main 11F4  
             __end_of_keys FE80               update_time@i 0016                     ??_main 00DF  
            ___fttol@sign1 0041            runtime@end_time 00C7              __activetblptr 000002  
        time_difference@d1 00A9          time_difference@d2 00AB          time_difference@d3 00AD  
        time_difference@s1 00A5          time_difference@s2 00A7          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 0012              main@bot_count 00F6                     ?_delay 0011  
       ??_I2C_Master_Start 0012                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0014                     ?_floor 0051                     ?_ldexp 0044  
                   ?_frexp 0011           __end_of___altoft 1E90           ___awdiv@dividend 0011  
         __end_of___awtoft 2260                     ?_putch 0001           __end_of___ftpack 1BF2  
         __end_of___lltoft 1F5E                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l3660 145A                     i2l3670 1474                     i2l3662 145E  
                   i2l3672 1478                     i2l3664 1462                     i2l3680 148E  
                   i2l3674 147C                     i2l3666 1466                     i2l3676 1480  
                   i2l3668 1470                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9            update_time@time 0014  
           __CFG_XINST$OFF 000000          ?_read_colorsensor 0014                     ___ftge 1C82  
                   ___wmul 2286         ??_read_colorsensor 001C                  ??___awdiv 0015  
                ??___ftadd 0032             __CFG_STVREN$ON 000000                  ??___ftdiv 001F  
                ??___ftneg 0014                  ??___lldiv 0019                  ??___ftmul 0023  
                ??___ftsub 003E                  ??___fttol 003C                  ??___lwdiv 0015  
                ??___lwmod 001C              dec_to_hex@num 0068                     delay@i 0014  
         ___awdiv@quotient 0017                  ??_lcdInst 0013                     _printf 0012  
                   floor@i 0054                     floor@x 0051      ___ftmul@f3_as_product 0027  
                ??_initLCD 0014                  ??_isdigit 0011            _time_difference 0C66  
             __mediumconst FE6E                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_runtime 006C           __end_ofexp@coeff FEB7  
         __end_oflog@coeff FED2                 __accesstop 0080    __end_of__initialization 221A  
               ___altoft@c 0047                 ___ftadd@f1 002C                 ___ftadd@f2 002F  
               ___ftge@ff1 0011                 ___ftge@ff2 0014      __end_of_operation_end 216E  
             eval_poly@res 0041              ___rparam_used 000001                 ___ftdiv@f1 0019  
               ___ftdiv@f2 001C                 ___ftdiv@f3 0023                 ___ftneg@f1 0011  
     time_difference@time1 0099       time_difference@time2 009B                 ___awtoft@c 0019  
               ___ftmul@f1 001D                 ___ftmul@f2 0020                 ___ftsub@f1 0038  
               ___ftsub@f2 003B                 ___fttol@f1 0038       __end_of_happynewyear FE99  
           __pcstackCOMRAM 0001               ?_update_time 0014               __pidataBANK1 2300  
            __end_of_delay 212C                 ___lltoft@c 0019              __end_of_floor 19B0  
            __end_of_ldexp 1B44              __end_of_frexp 1C82              __end_of_putch 231C  
       __size_of_date_time 0152         __size_of_lcdNibble 004E      bottle_count@bot_count 00C5  
                  ??_delay 0013                    ??_floor 0054                    ??_ldexp 0049  
                  ??_frexp 0016       __end_of_bottle_count 0C66                 _dec_to_hex 130E  
                  ??_putch 0013                 __pbssBANK0 00FA         time_difference@hr1 009D  
       time_difference@hr2 009F         __size_of_eval_poly 00D2                    ?___ftge 0011  
                  ?___wmul 0011                  ?___altoft 0047    __end_of_time_difference 0DEC  
                ?___awtoft 0019                  ?___ftpack 0011                    ?_printf 00AF  
                ?___lltoft 0019                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7          __end_of_date_time 10BA        read_colorsensor@red 0014  
       init_operation@blue 00D3         init_operation@time 00C7          __end_of_lcdNibble 2058  
                  __Hparam 0000                    __Lparam 0000            __size_of___ftge 0090  
                  ___awdiv 1D12                    ___ftadd 091C                    ___ftdiv 17EC  
                  ___ftneg 22AC                    ___lldiv 1D96            __size_of___wmul 0026  
                  ___ftmul 160A                    ___ftsub 21B0                    ___fttol 1516  
                  ___lwdiv 1FB8                    ___lwmod 216E                 _curr_state 00FB  
               ??___altoft 004B                    __pcinit 21F0                 ??___awtoft 001C  
               ??___ftpack 0016          __end_of_eval_poly 1A82                    __ramtop 1000  
                  _lcdInst 231C                 ??___lltoft 001D                    __ptext0 10BA  
                  __ptext1 2058                    __ptext2 212C                    __ptext3 03BE  
                  __ptext4 1E90                    __ptext5 0C66                    __ptext6 130E  
                  __ptext7 0DEC                    __ptext8 11F4                    __ptext9 0738  
               delay@i_450 0016            __size_of_printf 03AC             dec_to_hex@temp 0091  
                  _initLCD 20A2          __end_of_hexpowers FE92                    _dpowers FE80  
             __size_of_exp 01E4               __size_of_log 011A                    _isdigit 22D0  
             __size_of_pow 017C                 _keypressed 0008   __size_of_I2C_Master_Init 005A  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012                 date_time@i 006C  
 __size_of_I2C_Master_Stop 0008                    _runtime 2058                ?_dec_to_hex 0068  
           __pintcode_body 141A       end_of_initialization 221A                    exp@sign 0061  
  __size_of_init_operation 037A              __Lmediumconst FE6E                    int_func 141A  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0015  
                  pow@sign 0086            ___lldiv@counter 001D                    printf@c 00C4  
                  printf@f 00AF           I2C_Master_Init@c 001E           I2C_Master_Read@a 0012  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE              date_time@time 00C5       __size_of_update_time 0072  
           main@start_time 00E1           ?_time_difference 0099                  _PORTBbits 000F81  
                _PORTCbits 000F82                  _PORTEbits 000F84      __size_of_bottle_count 019E  
  init_operation@bot_count 00C9  __size_of_read_colorsensor 00EE               _happynewyear FE92  
              ___ftdiv@exp 0026                printf@width 00C2                ___ftmul@exp 0026  
             _bottle_count 0AC8             __end_of___ftge 1D12             __end_of___wmul 22AC  
      __size_of_dec_to_hex 010C      read_colorsensor@clear 001A                 floor@expon 0057  
    read_colorsensor@green 0016             __end_of_printf 03BE        start_initialization 21F0  
               eval_poly@d 003B                 eval_poly@n 003D                 eval_poly@x 0038  
              ?_keypressed 0001                 ldexp@value 0044                __end_of_exp 091C  
              __end_of_log 130E                __end_of_pow 0F68                 frexp@value 0011  
        ??_I2C_Master_Init 0022          ??_I2C_Master_Read 0012          ??_I2C_Master_Wait 0011  
        ??_I2C_Master_Stop 0012                   ??___ftge 0017                   ??___wmul 0015  
              __pdataBANK1 0100           __CFG_LPT1OSC$OFF 000000                   ??_printf 00B7  
        __size_of___altoft 0078          __size_of___awtoft 0038          __size_of___ftpack 00AE  
        __size_of___lltoft 005C                __pbssCOMRAM 006D     __size_of_operation_end 0042  
      time_difference@min1 00A1        time_difference@min2 00A3              __pcstackBANK0 0080  
           _init_operation 03BE           _I2C_Master_Start 233A           _I2C_Master_Write 2328  
                _date_time 0F68           ___lwdiv@dividend 0011          __CFG_CCP2MX$PORTC 000000  
      __size_of_keypressed 150E                  __pintcode 0008              __pmediumconst FE6E  
                _lcdNibble 200A                   ?___awdiv 0011            init_operation@b 00D7  
          init_operation@c 00D9                   ?___ftadd 002C            init_operation@g 00CD  
          init_operation@i 00DB            init_operation@r 00DD                   ?___ftdiv 0019  
                 ?___ftneg 0011                   ?___lldiv 0011                   ?___ftmul 001D  
                 ?___ftsub 0038                   ?___fttol 0038                   ?___lwdiv 0011  
                 ?___lwmod 0018                   ?_lcdInst 0001           dec_to_hex@hexnum 0095  
                 ?_initLCD 0001                   ?_isdigit 0001           _read_colorsensor 16FE  
                _eval_poly 19B0          init_operation@red 00CF                  _hexpowers FE8A  
         ___lwdiv@quotient 0015             __size_of_delay 0044     __end_of_init_operation 0738  
           __size_of_floor 00DE             __size_of_ldexp 00C2             __size_of_frexp 0090  
             ??_dec_to_hex 006A                   ?_runtime 00C5             __size_of_putch 000C  
             delay@seconds 0011             ___wmul@product 0015                   _LATDbits 000F8C  
            _operation_end 212C                 ?_date_time 00C5           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001         __end_of_dec_to_hex 141A          ___wmul@multiplier 0011  
            lcdNibble@data 0012                 printf@flag 00C1              lcdNibble@temp 0011  
               printf@prec 00BE                 ?_eval_poly 0038          runtime@start_time 00C5  
      I2C_Master_Read@temp 0013            ?_init_operation 00C5                  copy_data0 2204  
       dec_to_hex@quotient 0097       read_colorsensor@blue 0018        init_operation@clear 00D5  
      init_operation@green 00D1                  frexp@eptr 0014             ?_operation_end 0001  
          hex_to_dec@F3177 0100                   __Hrparam 0000                   __Lrparam 0000  
            ??_update_time 0016         __CFG_BOREN$SBORDIS 000000                dec_to_hex@i 0093  
         __size_of___awdiv 0084           __size_of___ftadd 01AC           __size_of___ftdiv 00E6  
         __size_of___ftneg 0024           __size_of___lldiv 0082                   ___altoft 1E18  
         __size_of___ftmul 00F4           __size_of___ftsub 0040           __size_of___fttol 00F4  
         __size_of___lwdiv 0052           __size_of___lwmod 0042                   ___awtoft 2228  
                 ___ftpack 1B44                   ___lltoft 1F02                _isdigit$981 0012  
         __size_of_lcdInst 000C                   _exp$1426 005C            _I2C_Master_Init 1F5E  
          _I2C_Master_Read 2260           __size_of_initLCD 0046            _I2C_Master_Wait 22EE  
          _I2C_Master_Stop 2332               ??_keypressed 0001           __size_of_isdigit 001E  
          ___lwdiv@divisor 0013   __size_of_time_difference 0186            ___lwdiv@counter 0017  
                 __ptext10 1A82                   __ptext11 18D2                   __ptext20 22AC  
                 __ptext12 1BF2                   __ptext21 17EC                   __ptext13 1516  
                 __ptext30 2328                   __ptext22 2228                   __ptext14 1C82  
                 __ptext31 2332                   __ptext23 1F02                   __ptext15 1E18  
                 __ptext40 216E                   __ptext32 233A                   __ptext24 1B44  
                 __ptext16 19B0                   __ptext41 1FB8                   __ptext33 2260  
                 __ptext25 1D12                   __ptext17 160A                   __ptext42 231C  
                 __ptext34 22EE                   __ptext26 16FE                   __ptext18 21B0  
                 __ptext43 200A                   __ptext35 0AC8                   __ptext27 20A2  
                 __ptext19 091C                   __ptext44 1F5E                   __ptext36 0012  
                 __ptext28 20E8                   __ptext45 1D96                   __ptext37 2310  
                 __ptext29 0F68                   __ptext38 22D0                   __ptext39 2286  
                 _pow$1424 0080                   _pow$1425 0083                   _bot_type 00FA  
         __size_of_runtime 004A              __size_of_main 013A            _dec_to_hex$1420 008B  
          _dec_to_hex$1421 008E                ??_date_time 00C7                ??_lcdNibble 0011  
       __end_of_keypressed 1516                   int$flags 006F                  printf@idx 00BB  
                printf@val 00BF                   main@time 00EF        __end_of_update_time 1F02  
                 exp@coeff FE99                   log@coeff FEB7                  putch@data 0013  
 __end_of_I2C_Master_Start 2342   __end_of_I2C_Master_Write 2332                 _INTCONbits 000FF2  
              ??_eval_poly 003F                   isdigit@c 0013                   intlevel2 0000  
          ??_operation_end 006C           ___lwmod@dividend 0018           ___lldiv@dividend 0011  
 __end_of_read_colorsensor 17EC                   printf@ap 00BC    __end_of_I2C_Master_Init 1FB8  
  __end_of_I2C_Master_Read 2286    __end_of_I2C_Master_Wait 2300    __end_of_I2C_Master_Stop 233A  
              lcdInst@data 0013           ___lldiv@quotient 0019          I2C_Master_Write@d 0012  
          ___lwmod@divisor 001A            ___lwmod@counter 001C          ??_time_difference 006A  
