

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 07 11:32:32 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    60                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           ; Version 1.40
    63                           ; Generated 01/12/2016 GMT
    64                           ; 
    65                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F4620 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96  0000                     
    97                           	psect	mediumconst
    98  00FE70                     __pmediumconst:
    99                           	opt stack 0
   100  00FE70  00                 	db	0
   101  00FE71                     _keys:
   102                           	opt stack 0
   103  00FE71  31                 	db	49
   104  00FE72  32                 	db	50
   105  00FE73  33                 	db	51
   106  00FE74  41                 	db	65
   107  00FE75  34                 	db	52
   108  00FE76  35                 	db	53
   109  00FE77  36                 	db	54
   110  00FE78  42                 	db	66
   111  00FE79  37                 	db	55
   112  00FE7A  38                 	db	56
   113  00FE7B  39                 	db	57
   114  00FE7C  43                 	db	67
   115  00FE7D  2A                 	db	42
   116  00FE7E  30                 	db	48
   117  00FE7F  23                 	db	35
   118  00FE80  44                 	db	68
   119  00FE81  00                 	db	0
   120  00FE82                     __end_of_keys:
   121                           	opt stack 0
   122  00FE82                     _dpowers:
   123                           	opt stack 0
   124  00FE82  0001               	dw	1
   125  00FE84  000A               	dw	10
   126  00FE86  0064               	dw	100
   127  00FE88  03E8               	dw	1000
   128  00FE8A  2710               	dw	10000
   129  00FE8C                     __end_of_dpowers:
   130                           	opt stack 0
   131  00FE8C                     _hexpowers:
   132                           	opt stack 0
   133  00FE8C  0001               	dw	1
   134  00FE8E  0010               	dw	16
   135  00FE90  0100               	dw	256
   136  00FE92  1000               	dw	4096
   137  00FE94                     __end_of_hexpowers:
   138                           	opt stack 0
   139  00FE94                     _happynewyear:
   140                           	opt stack 0
   141  00FE94  45                 	db	69
   142  00FE95  59                 	db	89
   143  00FE96  23                 	db	35
   144  00FE97  07                 	db	7
   145  00FE98  31                 	db	49
   146  00FE99  12                 	db	18
   147  00FE9A  16                 	db	22
   148  00FE9B                     __end_of_happynewyear:
   149                           	opt stack 0
   150  00FE9B                     exp@coeff:
   151                           	opt stack 0
   152  00FE9B  00                 	db	0
   153  00FE9C  80                 	db	128
   154  00FE9D  3F                 	db	63
   155  00FE9E  72                 	db	114
   156  00FE9F  31                 	db	49
   157  00FEA0  3F                 	db	63
   158  00FEA1  FE                 	db	254
   159  00FEA2  75                 	db	117
   160  00FEA3  3E                 	db	62
   161  00FEA4  58                 	db	88
   162  00FEA5  63                 	db	99
   163  00FEA6  3D                 	db	61
   164  00FEA7  95                 	db	149
   165  00FEA8  1D                 	db	29
   166  00FEA9  3C                 	db	60
   167  00FEAA  C5                 	db	197
   168  00FEAB  AE                 	db	174
   169  00FEAC  3A                 	db	58
   170  00FEAD  79                 	db	121
   171  00FEAE  21                 	db	33
   172  00FEAF  39                 	db	57
   173  00FEB0  94                 	db	148
   174  00FEB1  80                 	db	128
   175  00FEB2  37                 	db	55
   176  00FEB3  93                 	db	147
   177  00FEB4  A7                 	db	167
   178  00FEB5  35                 	db	53
   179  00FEB6  56                 	db	86
   180  00FEB7  15                 	db	21
   181  00FEB8  34                 	db	52
   182  00FEB9                     __end_ofexp@coeff:
   183                           	opt stack 0
   184  00FEB9                     log@coeff:
   185                           	opt stack 0
   186  00FEB9  00                 	db	0
   187  00FEBA  00                 	db	0
   188  00FEBB  00                 	db	0
   189  00FEBC  00                 	db	0
   190  00FEBD  80                 	db	128
   191  00FEBE  3F                 	db	63
   192  00FEBF  F0                 	db	240
   193  00FEC0  FF                 	db	255
   194  00FEC1  BE                 	db	190
   195  00FEC2  E2                 	db	226
   196  00FEC3  A9                 	db	169
   197  00FEC4  3E                 	db	62
   198  00FEC5  83                 	db	131
   199  00FEC6  76                 	db	118
   200  00FEC7  BE                 	db	190
   201  00FEC8  AE                 	db	174
   202  00FEC9  2B                 	db	43
   203  00FECA  3E                 	db	62
   204  00FECB  3C                 	db	60
   205  00FECC  C3                 	db	195
   206  00FECD  BD                 	db	189
   207  00FECE  D2                 	db	210
   208  00FECF  13                 	db	19
   209  00FED0  3D                 	db	61
   210  00FED1  78                 	db	120
   211  00FED2  D3                 	db	211
   212  00FED3  BB                 	db	187
   213  00FED4                     __end_oflog@coeff:
   214                           	opt stack 0
   215  0000                     _ADCON0	set	4034
   216  0000                     _ADCON1	set	4033
   217  0000                     _INTCONbits	set	4082
   218  0000                     _LATA	set	3977
   219  0000                     _LATB	set	3978
   220  0000                     _LATC	set	3979
   221  0000                     _LATD	set	3980
   222  0000                     _LATDbits	set	3980
   223  0000                     _LATE	set	3981
   224  0000                     _PORTB	set	3969
   225  0000                     _PORTBbits	set	3969
   226  0000                     _SSPADD	set	4040
   227  0000                     _SSPBUF	set	4041
   228  0000                     _SSPCON1	set	4038
   229  0000                     _SSPCON2	set	4037
   230  0000                     _SSPSTAT	set	4039
   231  0000                     _TRISA	set	3986
   232  0000                     _TRISB	set	3987
   233  0000                     _TRISC	set	3988
   234  0000                     _TRISD	set	3989
   235  0000                     _TRISE	set	3990
   236  0000                     _ACKDT	set	32301
   237  0000                     _ACKEN	set	32300
   238  0000                     _INT1IE	set	32643
   239  0000                     _INT1IF	set	32640
   240  0000                     _PEN	set	32298
   241  0000                     _RCEN	set	32299
   242  0000                     _RSEN	set	32297
   243  0000                     _SEN	set	32296
   244  0000                     _TRISC3	set	31907
   245  0000                     _TRISC4	set	31908
   246  0000                     _nRBPU	set	32655
   247  00FED4                     STR_1:
   248  00FED4  50                 	db	80	;'P'
   249  00FED5  72                 	db	114	;'r'
   250  00FED6  65                 	db	101	;'e'
   251  00FED7  73                 	db	115	;'s'
   252  00FED8  73                 	db	115	;'s'
   253  00FED9  20                 	db	32
   254  00FEDA  31                 	db	49	;'1'
   255  00FEDB  20                 	db	32
   256  00FEDC  74                 	db	116	;'t'
   257  00FEDD  6F                 	db	111	;'o'
   258  00FEDE  20                 	db	32
   259  00FEDF  62                 	db	98	;'b'
   260  00FEE0  65                 	db	101	;'e'
   261  00FEE1  67                 	db	103	;'g'
   262  00FEE2  69                 	db	105	;'i'
   263  00FEE3  6E                 	db	110	;'n'
   264  00FEE4  20                 	db	32
   265  00FEE5  6F                 	db	111	;'o'
   266  00FEE6  70                 	db	112	;'p'
   267  00FEE7  65                 	db	101	;'e'
   268  00FEE8  72                 	db	114	;'r'
   269  00FEE9  61                 	db	97	;'a'
   270  00FEEA  74                 	db	116	;'t'
   271  00FEEB  69                 	db	105	;'i'
   272  00FEEC  6F                 	db	111	;'o'
   273  00FEED  6E                 	db	110	;'n'
   274  00FEEE  00                 	db	0
   275  00FEEF                     STR_18:
   276  00FEEF  44                 	db	68	;'D'
   277  00FEF0  61                 	db	97	;'a'
   278  00FEF1  74                 	db	116	;'t'
   279  00FEF2  65                 	db	101	;'e'
   280  00FEF3  3A                 	db	58	;':'
   281  00FEF4  20                 	db	32
   282  00FEF5  25                 	db	37
   283  00FEF6  30                 	db	48	;'0'
   284  00FEF7  32                 	db	50	;'2'
   285  00FEF8  78                 	db	120	;'x'
   286  00FEF9  2F                 	db	47
   287  00FEFA  25                 	db	37
   288  00FEFB  30                 	db	48	;'0'
   289  00FEFC  32                 	db	50	;'2'
   290  00FEFD  78                 	db	120	;'x'
   291  00FEFE  2F                 	db	47
   292  00FEFF  25                 	db	37
   293  00FF00  30                 	db	48	;'0'
   294  00FF01  32                 	db	50	;'2'
   295  00FF02  78                 	db	120	;'x'
   296  00FF03  20                 	db	32
   297  00FF04  20                 	db	32
   298  00FF05  00                 	db	0
   299  00FF06                     STR_19:
   300  00FF06  54                 	db	84	;'T'
   301  00FF07  69                 	db	105	;'i'
   302  00FF08  6D                 	db	109	;'m'
   303  00FF09  65                 	db	101	;'e'
   304  00FF0A  3A                 	db	58	;':'
   305  00FF0B  20                 	db	32
   306  00FF0C  25                 	db	37
   307  00FF0D  30                 	db	48	;'0'
   308  00FF0E  32                 	db	50	;'2'
   309  00FF0F  78                 	db	120	;'x'
   310  00FF10  3A                 	db	58	;':'
   311  00FF11  25                 	db	37
   312  00FF12  30                 	db	48	;'0'
   313  00FF13  32                 	db	50	;'2'
   314  00FF14  78                 	db	120	;'x'
   315  00FF15  3A                 	db	58	;':'
   316  00FF16  25                 	db	37
   317  00FF17  30                 	db	48	;'0'
   318  00FF18  32                 	db	50	;'2'
   319  00FF19  78                 	db	120	;'x'
   320  00FF1A  20                 	db	32
   321  00FF1B  20                 	db	32
   322  00FF1C  00                 	db	0
   323  00FF1D                     STR_5:
   324  00FF1D  54                 	db	84	;'T'
   325  00FF1E  69                 	db	105	;'i'
   326  00FF1F  6D                 	db	109	;'m'
   327  00FF20  65                 	db	101	;'e'
   328  00FF21  3A                 	db	58	;':'
   329  00FF22  20                 	db	32
   330  00FF23  25                 	db	37
   331  00FF24  69                 	db	105	;'i'
   332  00FF25  73                 	db	115	;'s'
   333  00FF26  20                 	db	32
   334  00FF27  20                 	db	32
   335  00FF28  20                 	db	32
   336  00FF29  20                 	db	32
   337  00FF2A  20                 	db	32
   338  00FF2B  20                 	db	32
   339  00FF2C  20                 	db	32
   340  00FF2D  20                 	db	32
   341  00FF2E  20                 	db	32
   342  00FF2F  00                 	db	0
   343  00FF30                     STR_3:
   344  00FF30  45                 	db	69	;'E'
   345  00FF31  6C                 	db	108	;'l'
   346  00FF32  61                 	db	97	;'a'
   347  00FF33  70                 	db	112	;'p'
   348  00FF34  73                 	db	115	;'s'
   349  00FF35  65                 	db	101	;'e'
   350  00FF36  64                 	db	100	;'d'
   351  00FF37  3A                 	db	58	;':'
   352  00FF38  20                 	db	32
   353  00FF39  25                 	db	37
   354  00FF3A  69                 	db	105	;'i'
   355  00FF3B  73                 	db	115	;'s'
   356  00FF3C  20                 	db	32
   357  00FF3D  20                 	db	32
   358  00FF3E  20                 	db	32
   359  00FF3F  20                 	db	32
   360  00FF40  20                 	db	32
   361  00FF41  20                 	db	32
   362  00FF42  00                 	db	0
   363  00FF43                     STR_20:
   364  00FF43  30                 	db	48	;'0'
   365  00FF44  31                 	db	49	;'1'
   366  00FF45  32                 	db	50	;'2'
   367  00FF46  33                 	db	51	;'3'
   368  00FF47  34                 	db	52	;'4'
   369  00FF48  35                 	db	53	;'5'
   370  00FF49  36                 	db	54	;'6'
   371  00FF4A  37                 	db	55	;'7'
   372  00FF4B  38                 	db	56	;'8'
   373  00FF4C  39                 	db	57	;'9'
   374  00FF4D  61                 	db	97	;'a'
   375  00FF4E  62                 	db	98	;'b'
   376  00FF4F  63                 	db	99	;'c'
   377  00FF50  64                 	db	100	;'d'
   378  00FF51  65                 	db	101	;'e'
   379  00FF52  66                 	db	102	;'f'
   380  00FF53  00                 	db	0
   381  00FF54                     STR_17:
   382  00FF54  20                 	db	32
   383  00FF55  20                 	db	32
   384  00FF56  20                 	db	32
   385  00FF57  20                 	db	32
   386  00FF58  20                 	db	32
   387  00FF59  20                 	db	32
   388  00FF5A  20                 	db	32
   389  00FF5B  20                 	db	32
   390  00FF5C  20                 	db	32
   391  00FF5D  20                 	db	32
   392  00FF5E  20                 	db	32
   393  00FF5F  20                 	db	32
   394  00FF60  20                 	db	32
   395  00FF61  20                 	db	32
   396  00FF62  20                 	db	32
   397  00FF63  20                 	db	32
   398  00FF64  00                 	db	0
   399  00FF65                     STR_7:
   400  00FF65  43                 	db	67	;'C'
   401  00FF66  6F                 	db	111	;'o'
   402  00FF67  75                 	db	117	;'u'
   403  00FF68  6E                 	db	110	;'n'
   404  00FF69  74                 	db	116	;'t'
   405  00FF6A  3A                 	db	58	;':'
   406  00FF6B  20                 	db	32
   407  00FF6C  5F                 	db	95	;'_'
   408  00FF6D  5F                 	db	95	;'_'
   409  00FF6E  20                 	db	32
   410  00FF6F  20                 	db	32
   411  00FF70  20                 	db	32
   412  00FF71  20                 	db	32
   413  00FF72  20                 	db	32
   414  00FF73  20                 	db	32
   415  00FF74  20                 	db	32
   416  00FF75  00                 	db	0
   417  00FF76                     STR_6:
   418  00FF76  54                 	db	84	;'T'
   419  00FF77  6F                 	db	111	;'o'
   420  00FF78  74                 	db	116	;'t'
   421  00FF79  61                 	db	97	;'a'
   422  00FF7A  6C                 	db	108	;'l'
   423  00FF7B  20                 	db	32
   424  00FF7C  42                 	db	66	;'B'
   425  00FF7D  6F                 	db	111	;'o'
   426  00FF7E  74                 	db	116	;'t'
   427  00FF7F  74                 	db	116	;'t'
   428  00FF80  6C                 	db	108	;'l'
   429  00FF81  65                 	db	101	;'e'
   430  00FF82  20                 	db	32
   431  00FF83  20                 	db	32
   432  00FF84  20                 	db	32
   433  00FF85  20                 	db	32
   434  00FF86  00                 	db	0
   435  00FF87                     STR_8:
   436  00FF87  59                 	db	89	;'Y'
   437  00FF88  4F                 	db	79	;'O'
   438  00FF89  50                 	db	80	;'P'
   439  00FF8A  20                 	db	32
   440  00FF8B  57                 	db	87	;'W'
   441  00FF8C  69                 	db	105	;'i'
   442  00FF8D  74                 	db	116	;'t'
   443  00FF8E  68                 	db	104	;'h'
   444  00FF8F  20                 	db	32
   445  00FF90  43                 	db	67	;'C'
   446  00FF91  61                 	db	97	;'a'
   447  00FF92  70                 	db	112	;'p'
   448  00FF93  20                 	db	32
   449  00FF94  20                 	db	32
   450  00FF95  20                 	db	32
   451  00FF96  20                 	db	32
   452  00FF97  00                 	db	0
   453  00FF98                     STR_12:
   454  00FF98  45                 	db	69	;'E'
   455  00FF99  53                 	db	83	;'S'
   456  00FF9A  4B                 	db	75	;'K'
   457  00FF9B  41                 	db	65	;'A'
   458  00FF9C  20                 	db	32
   459  00FF9D  57                 	db	87	;'W'
   460  00FF9E  69                 	db	105	;'i'
   461  00FF9F  74                 	db	116	;'t'
   462  00FFA0  68                 	db	104	;'h'
   463  00FFA1  20                 	db	32
   464  00FFA2  43                 	db	67	;'C'
   465  00FFA3  61                 	db	97	;'a'
   466  00FFA4  70                 	db	112	;'p'
   467  00FFA5  20                 	db	32
   468  00FFA6  20                 	db	32
   469  00FFA7  20                 	db	32
   470  00FFA8  00                 	db	0
   471  00FFA9                     STR_16:
   472  00FFA9  4F                 	db	79	;'O'
   473  00FFAA  70                 	db	112	;'p'
   474  00FFAB  65                 	db	101	;'e'
   475  00FFAC  72                 	db	114	;'r'
   476  00FFAD  61                 	db	97	;'a'
   477  00FFAE  74                 	db	116	;'t'
   478  00FFAF  69                 	db	105	;'i'
   479  00FFB0  6F                 	db	111	;'o'
   480  00FFB1  6E                 	db	110	;'n'
   481  00FFB2  20                 	db	32
   482  00FFB3  44                 	db	68	;'D'
   483  00FFB4  6F                 	db	111	;'o'
   484  00FFB5  6E                 	db	110	;'n'
   485  00FFB6  65                 	db	101	;'e'
   486  00FFB7  21                 	db	33
   487  00FFB8  20                 	db	32
   488  00FFB9  00                 	db	0
   489  00FFBA                     STR_4:
   490  00FFBA  54                 	db	84	;'T'
   491  00FFBB  6F                 	db	111	;'o'
   492  00FFBC  74                 	db	116	;'t'
   493  00FFBD  61                 	db	97	;'a'
   494  00FFBE  6C                 	db	108	;'l'
   495  00FFBF  20                 	db	32
   496  00FFC0  4F                 	db	79	;'O'
   497  00FFC1  70                 	db	112	;'p'
   498  00FFC2  65                 	db	101	;'e'
   499  00FFC3  72                 	db	114	;'r'
   500  00FFC4  61                 	db	97	;'a'
   501  00FFC5  74                 	db	116	;'t'
   502  00FFC6  69                 	db	105	;'i'
   503  00FFC7  6F                 	db	111	;'o'
   504  00FFC8  6E                 	db	110	;'n'
   505  00FFC9  20                 	db	32
   506  00FFCA  00                 	db	0
   507  00FFCB                     STR_10:
   508  00FFCB  59                 	db	89	;'Y'
   509  00FFCC  4F                 	db	79	;'O'
   510  00FFCD  50                 	db	80	;'P'
   511  00FFCE  20                 	db	32
   512  00FFCF  57                 	db	87	;'W'
   513  00FFD0  69                 	db	105	;'i'
   514  00FFD1  74                 	db	116	;'t'
   515  00FFD2  68                 	db	104	;'h'
   516  00FFD3  20                 	db	32
   517  00FFD4  4E                 	db	78	;'N'
   518  00FFD5  6F                 	db	111	;'o'
   519  00FFD6  20                 	db	32
   520  00FFD7  43                 	db	67	;'C'
   521  00FFD8  61                 	db	97	;'a'
   522  00FFD9  70                 	db	112	;'p'
   523  00FFDA  20                 	db	32
   524  00FFDB  00                 	db	0
   525  00FFDC                     STR_2:
   526  00FFDC  50                 	db	80	;'P'
   527  00FFDD  72                 	db	114	;'r'
   528  00FFDE  65                 	db	101	;'e'
   529  00FFDF  73                 	db	115	;'s'
   530  00FFE0  73                 	db	115	;'s'
   531  00FFE1  20                 	db	32
   532  00FFE2  2A                 	db	42
   533  00FFE3  20                 	db	32
   534  00FFE4  54                 	db	84	;'T'
   535  00FFE5  6F                 	db	111	;'o'
   536  00FFE6  20                 	db	32
   537  00FFE7  53                 	db	83	;'S'
   538  00FFE8  74                 	db	116	;'t'
   539  00FFE9  6F                 	db	111	;'o'
   540  00FFEA  70                 	db	112	;'p'
   541  00FFEB  20                 	db	32
   542  00FFEC  00                 	db	0
   543  00FFED                     STR_14:
   544  00FFED  45                 	db	69	;'E'
   545  00FFEE  53                 	db	83	;'S'
   546  00FFEF  4B                 	db	75	;'K'
   547  00FFF0  41                 	db	65	;'A'
   548  00FFF1  20                 	db	32
   549  00FFF2  57                 	db	87	;'W'
   550  00FFF3  69                 	db	105	;'i'
   551  00FFF4  74                 	db	116	;'t'
   552  00FFF5  68                 	db	104	;'h'
   553  00FFF6  20                 	db	32
   554  00FFF7  4E                 	db	78	;'N'
   555  00FFF8  6F                 	db	111	;'o'
   556  00FFF9  20                 	db	32
   557  00FFFA  43                 	db	67	;'C'
   558  00FFFB  61                 	db	97	;'a'
   559  00FFFC  70                 	db	112	;'p'
   560  00FFFD  00                 	db	0
   561  0000                     
   562                           ; #config settings
   563  00FFFE  00                 	db	0	; dummy byte at the end
   564  0000                     
   565                           	psect	cinit
   566  001E1C                     __pcinit:
   567                           	opt stack 0
   568  001E1C                     start_initialization:
   569                           	opt stack 0
   570  001E1C                     __initialization:
   571                           	opt stack 0
   572                           
   573                           ; Clear objects allocated to BANK0 (2 bytes)
   574  001E1C  0100               	movlb	0
   575  001E1E  6BDF               	clrf	(__pbssBANK0+1)& (0+255),b
   576  001E20  6BDE               	clrf	__pbssBANK0& (0+255),b
   577                           
   578                           ; Clear objects allocated to COMRAM (2 bytes)
   579  001E22  6A6E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   580  001E24  6A6D               	clrf	__pbssCOMRAM& (0+255),c
   581  001E26                     end_of_initialization:
   582                           	opt stack 0
   583  001E26                     __end_of__initialization:
   584                           	opt stack 0
   585  001E26  906F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   586  001E28  926F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   587  001E2A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   588  001E2C  6EF8               	movwf	tblptru,c
   589  001E2E  0100               	movlb	0
   590  001E30  EF40  F006         	goto	_main	;jump to C main() function
   591                           tblptru	equ	0xFF8
   592                           
   593                           	psect	bssCOMRAM
   594  00006D                     __pbssCOMRAM:
   595                           	opt stack 0
   596  00006D                     _errno:
   597                           	opt stack 0
   598  00006D                     	ds	2
   599                           tblptru	equ	0xFF8
   600                           
   601                           	psect	bssBANK0
   602  0000DE                     __pbssBANK0:
   603                           	opt stack 0
   604  0000DE                     _bot_type:
   605                           	opt stack 0
   606  0000DE                     	ds	1
   607  0000DF                     _curr_state:
   608                           	opt stack 0
   609  0000DF                     	ds	1
   610                           tblptru	equ	0xFF8
   611                           
   612                           	psect	cstackBANK0
   613  000080                     __pcstackBANK0:
   614                           	opt stack 0
   615  000080                     _pow$1103:
   616                           	opt stack 0
   617                           
   618                           ; 3 bytes @ 0x0
   619  000080                     	ds	3
   620  000083                     _pow$1104:
   621                           	opt stack 0
   622                           
   623                           ; 3 bytes @ 0x3
   624  000083                     	ds	3
   625  000086                     pow@sign:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x6
   629  000086                     	ds	1
   630  000087                     pow@yi:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x7
   634  000087                     	ds	4
   635  00008B                     _dec_to_hex$1101:
   636                           	opt stack 0
   637                           
   638                           ; 3 bytes @ 0xB
   639  00008B                     	ds	3
   640  00008E                     _dec_to_hex$1102:
   641                           	opt stack 0
   642                           
   643                           ; 3 bytes @ 0xE
   644  00008E                     	ds	3
   645  000091                     dec_to_hex@temp:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x11
   649  000091                     	ds	2
   650  000093                     dec_to_hex@i:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x13
   654  000093                     	ds	2
   655  000095                     dec_to_hex@hexnum:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x15
   659  000095                     	ds	2
   660  000097                     dec_to_hex@quotient:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x17
   664  000097                     	ds	2
   665  000099                     ?_time_difference:
   666                           	opt stack 0
   667  000099                     time_difference@time1:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x19
   671  000099                     	ds	2
   672  00009B                     time_difference@time2:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x1B
   676  00009B                     	ds	2
   677  00009D                     time_difference@hr1:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x1D
   681  00009D                     	ds	2
   682  00009F                     time_difference@hr2:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x1F
   686  00009F                     	ds	2
   687  0000A1                     time_difference@min1:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x21
   691  0000A1                     	ds	2
   692  0000A3                     time_difference@min2:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x23
   696  0000A3                     	ds	2
   697  0000A5                     time_difference@s1:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x25
   701  0000A5                     	ds	2
   702  0000A7                     time_difference@s2:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x27
   706  0000A7                     	ds	2
   707  0000A9                     time_difference@d1:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x29
   711  0000A9                     	ds	1
   712  0000AA                     time_difference@d2:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x2A
   716  0000AA                     	ds	1
   717  0000AB                     time_difference@d3:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x2B
   721  0000AB                     	ds	1
   722  0000AC                     ?_printf:
   723                           	opt stack 0
   724  0000AC                     printf@f:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x2C
   728  0000AC                     	ds	8
   729  0000B4                     ??_printf:
   730                           
   731                           ; 1 bytes @ 0x34
   732  0000B4                     	ds	4
   733  0000B8                     printf@idx:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x38
   737  0000B8                     	ds	1
   738  0000B9                     printf@ap:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x39
   742  0000B9                     	ds	2
   743  0000BB                     printf@prec:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x3B
   747  0000BB                     	ds	1
   748  0000BC                     printf@val:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x3C
   752  0000BC                     	ds	2
   753  0000BE                     printf@flag:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x3E
   757  0000BE                     	ds	1
   758  0000BF                     printf@width:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x3F
   762  0000BF                     	ds	2
   763  0000C1                     printf@c:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x41
   767  0000C1                     	ds	1
   768  0000C2                     init_operation@start_time:
   769                           	opt stack 0
   770  0000C2                     runtime@start_time:
   771                           	opt stack 0
   772  0000C2                     date_time@time:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x42
   776  0000C2                     	ds	2
   777  0000C4                     ??_date_time:
   778  0000C4                     init_operation@time:
   779                           	opt stack 0
   780  0000C4                     runtime@end_time:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x44
   784  0000C4                     	ds	3
   785  0000C7                     ??_main:
   786                           
   787                           ; 1 bytes @ 0x47
   788  0000C7                     	ds	2
   789  0000C9                     main@start_time:
   790                           	opt stack 0
   791                           
   792                           ; 7 bytes @ 0x49
   793  0000C9                     	ds	7
   794  0000D0                     main@end_time:
   795                           	opt stack 0
   796                           
   797                           ; 7 bytes @ 0x50
   798  0000D0                     	ds	7
   799  0000D7                     main@time:
   800                           	opt stack 0
   801                           
   802                           ; 7 bytes @ 0x57
   803  0000D7                     	ds	7
   804                           tblptru	equ	0xFF8
   805                           
   806                           	psect	cstackCOMRAM
   807  000001                     __pcstackCOMRAM:
   808                           	opt stack 0
   809  000001                     ??_keypressed:
   810  000001                     
   811                           ; 2 bytes @ 0x0
   812  000001                     	ds	16
   813  000011                     ??_isdigit:
   814  000011                     ??_I2C_Master_Wait:
   815  000011                     ?___wmul:
   816                           	opt stack 0
   817  000011                     ?___awdiv:
   818                           	opt stack 0
   819  000011                     ?___lwdiv:
   820                           	opt stack 0
   821  000011                     ?___ftpack:
   822                           	opt stack 0
   823  000011                     ?_frexp:
   824                           	opt stack 0
   825  000011                     ?___ftneg:
   826                           	opt stack 0
   827  000011                     ?___lldiv:
   828                           	opt stack 0
   829  000011                     lcdNibble@temp:
   830                           	opt stack 0
   831  000011                     delay@seconds:
   832                           	opt stack 0
   833  000011                     ___wmul@multiplier:
   834                           	opt stack 0
   835  000011                     ___awdiv@dividend:
   836                           	opt stack 0
   837  000011                     ___lwdiv@dividend:
   838                           	opt stack 0
   839  000011                     ___ftpack@arg:
   840                           	opt stack 0
   841  000011                     ___ftge@ff1:
   842                           	opt stack 0
   843  000011                     ___ftneg@f1:
   844                           	opt stack 0
   845  000011                     frexp@value:
   846                           	opt stack 0
   847  000011                     ___lldiv@dividend:
   848                           	opt stack 0
   849                           
   850                           ; 4 bytes @ 0x10
   851  000011                     	ds	1
   852  000012                     lcdNibble@data:
   853                           	opt stack 0
   854  000012                     I2C_Master_Read@a:
   855                           	opt stack 0
   856  000012                     _isdigit$674:
   857                           	opt stack 0
   858  000012                     I2C_Master_Write@d:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x11
   862  000012                     	ds	1
   863  000013                     ??_delay:
   864  000013                     lcdInst@data:
   865                           	opt stack 0
   866  000013                     putch@data:
   867                           	opt stack 0
   868  000013                     I2C_Master_Read@temp:
   869                           	opt stack 0
   870  000013                     isdigit@c:
   871                           	opt stack 0
   872  000013                     ___wmul@multiplicand:
   873                           	opt stack 0
   874  000013                     ___awdiv@divisor:
   875                           	opt stack 0
   876  000013                     ___lwdiv@divisor:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x12
   880  000013                     	ds	1
   881  000014                     ??_initLCD:
   882  000014                     ___ftpack@exp:
   883                           	opt stack 0
   884  000014                     update_time@time:
   885                           	opt stack 0
   886  000014                     delay@i:
   887                           	opt stack 0
   888  000014                     frexp@eptr:
   889                           	opt stack 0
   890  000014                     ___ftge@ff2:
   891                           	opt stack 0
   892                           
   893                           ; 3 bytes @ 0x13
   894  000014                     	ds	1
   895  000015                     ___awdiv@counter:
   896                           	opt stack 0
   897  000015                     ___ftpack@sign:
   898                           	opt stack 0
   899  000015                     ___lwdiv@counter:
   900                           	opt stack 0
   901  000015                     ___wmul@product:
   902                           	opt stack 0
   903  000015                     ___lldiv@divisor:
   904                           	opt stack 0
   905                           
   906                           ; 4 bytes @ 0x14
   907  000015                     	ds	1
   908  000016                     ??___ftpack:
   909  000016                     ??_frexp:
   910  000016                     update_time@i:
   911                           	opt stack 0
   912  000016                     delay@i_272:
   913                           	opt stack 0
   914  000016                     ___awdiv@sign:
   915                           	opt stack 0
   916  000016                     ___lwdiv@quotient:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x15
   920  000016                     	ds	1
   921  000017                     ??___ftge:
   922  000017                     ___awdiv@quotient:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x16
   926  000017                     	ds	1
   927  000018                     ?___lwmod:
   928                           	opt stack 0
   929  000018                     ___lwmod@dividend:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x17
   933  000018                     	ds	1
   934  000019                     ?___ftdiv:
   935                           	opt stack 0
   936  000019                     ?___awtoft:
   937                           	opt stack 0
   938  000019                     ?___lltoft:
   939                           	opt stack 0
   940  000019                     ___awtoft@c:
   941                           	opt stack 0
   942  000019                     ___ftdiv@f1:
   943                           	opt stack 0
   944  000019                     ___lldiv@quotient:
   945                           	opt stack 0
   946  000019                     ___lltoft@c:
   947                           	opt stack 0
   948                           
   949                           ; 4 bytes @ 0x18
   950  000019                     	ds	1
   951  00001A                     ___lwmod@divisor:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x19
   955  00001A                     	ds	2
   956  00001C                     ___awtoft@sign:
   957                           	opt stack 0
   958  00001C                     ___lwmod@counter:
   959                           	opt stack 0
   960  00001C                     ___ftdiv@f2:
   961                           	opt stack 0
   962                           
   963                           ; 3 bytes @ 0x1B
   964  00001C                     	ds	1
   965  00001D                     ??___lltoft:
   966  00001D                     ?___ftmul:
   967                           	opt stack 0
   968  00001D                     ___lldiv@counter:
   969                           	opt stack 0
   970  00001D                     ___ftmul@f1:
   971                           	opt stack 0
   972                           
   973                           ; 3 bytes @ 0x1C
   974  00001D                     	ds	1
   975  00001E                     I2C_Master_Init@c:
   976                           	opt stack 0
   977                           
   978                           ; 4 bytes @ 0x1D
   979  00001E                     	ds	1
   980  00001F                     ??___ftdiv:
   981                           
   982                           ; 1 bytes @ 0x1E
   983  00001F                     	ds	1
   984  000020                     ___ftmul@f2:
   985                           	opt stack 0
   986                           
   987                           ; 3 bytes @ 0x1F
   988  000020                     	ds	1
   989  000021                     ___lltoft@exp:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x20
   993  000021                     	ds	1
   994  000022                     ??_I2C_Master_Init:
   995  000022                     ___ftdiv@cntr:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x21
   999  000022                     	ds	1
  1000  000023                     ??___ftmul:
  1001  000023                     ___ftdiv@f3:
  1002                           	opt stack 0
  1003                           
  1004                           ; 3 bytes @ 0x22
  1005  000023                     	ds	3
  1006  000026                     ___ftdiv@exp:
  1007                           	opt stack 0
  1008  000026                     ___ftmul@exp:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x25
  1012  000026                     	ds	1
  1013  000027                     ___ftdiv@sign:
  1014                           	opt stack 0
  1015  000027                     ___ftmul@f3_as_product:
  1016                           	opt stack 0
  1017                           
  1018                           ; 3 bytes @ 0x26
  1019  000027                     	ds	3
  1020  00002A                     ___ftmul@cntr:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x29
  1024  00002A                     	ds	1
  1025  00002B                     ___ftmul@sign:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x2A
  1029  00002B                     	ds	1
  1030  00002C                     ?___ftadd:
  1031                           	opt stack 0
  1032  00002C                     ___ftadd@f1:
  1033                           	opt stack 0
  1034                           
  1035                           ; 3 bytes @ 0x2B
  1036  00002C                     	ds	3
  1037  00002F                     ___ftadd@f2:
  1038                           	opt stack 0
  1039                           
  1040                           ; 3 bytes @ 0x2E
  1041  00002F                     	ds	3
  1042  000032                     ??___ftadd:
  1043                           
  1044                           ; 1 bytes @ 0x31
  1045  000032                     	ds	3
  1046  000035                     ___ftadd@sign:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x34
  1050  000035                     	ds	1
  1051  000036                     ___ftadd@exp2:
  1052                           	opt stack 0
  1053                           
  1054                           ; 1 bytes @ 0x35
  1055  000036                     	ds	1
  1056  000037                     ___ftadd@exp1:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x36
  1060  000037                     	ds	1
  1061  000038                     ?___ftsub:
  1062                           	opt stack 0
  1063  000038                     ?_eval_poly:
  1064                           	opt stack 0
  1065  000038                     ?___fttol:
  1066                           	opt stack 0
  1067  000038                     ___ftsub@f1:
  1068                           	opt stack 0
  1069  000038                     ___fttol@f1:
  1070                           	opt stack 0
  1071  000038                     eval_poly@x:
  1072                           	opt stack 0
  1073                           
  1074                           ; 3 bytes @ 0x37
  1075  000038                     	ds	3
  1076  00003B                     eval_poly@d:
  1077                           	opt stack 0
  1078  00003B                     ___ftsub@f2:
  1079                           	opt stack 0
  1080                           
  1081                           ; 3 bytes @ 0x3A
  1082  00003B                     	ds	1
  1083  00003C                     ??___fttol:
  1084                           
  1085                           ; 1 bytes @ 0x3B
  1086  00003C                     	ds	1
  1087  00003D                     eval_poly@n:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x3C
  1091  00003D                     	ds	1
  1092  00003E                     
  1093                           ; 1 bytes @ 0x3D
  1094  00003E                     	ds	1
  1095  00003F                     ??_eval_poly:
  1096                           
  1097                           ; 1 bytes @ 0x3E
  1098  00003F                     	ds	2
  1099  000041                     ___fttol@sign1:
  1100                           	opt stack 0
  1101  000041                     eval_poly@res:
  1102                           	opt stack 0
  1103                           
  1104                           ; 3 bytes @ 0x40
  1105  000041                     	ds	1
  1106  000042                     ___fttol@lval:
  1107                           	opt stack 0
  1108                           
  1109                           ; 4 bytes @ 0x41
  1110  000042                     	ds	2
  1111  000044                     ?_log:
  1112                           	opt stack 0
  1113  000044                     ?_ldexp:
  1114                           	opt stack 0
  1115  000044                     ldexp@value:
  1116                           	opt stack 0
  1117  000044                     log@x:
  1118                           	opt stack 0
  1119                           
  1120                           ; 3 bytes @ 0x43
  1121  000044                     	ds	2
  1122  000046                     ___fttol@exp1:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x45
  1126  000046                     	ds	1
  1127  000047                     ?___altoft:
  1128                           	opt stack 0
  1129  000047                     ldexp@newexp:
  1130                           	opt stack 0
  1131  000047                     log@exponent:
  1132                           	opt stack 0
  1133  000047                     ___altoft@c:
  1134                           	opt stack 0
  1135                           
  1136                           ; 4 bytes @ 0x46
  1137  000047                     	ds	2
  1138  000049                     ??_ldexp:
  1139                           
  1140                           ; 1 bytes @ 0x48
  1141  000049                     	ds	2
  1142  00004B                     ??___altoft:
  1143                           
  1144                           ; 1 bytes @ 0x4A
  1145  00004B                     	ds	4
  1146  00004F                     ___altoft@exp:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x4E
  1150  00004F                     	ds	1
  1151  000050                     ___altoft@sign:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x4F
  1155  000050                     	ds	1
  1156  000051                     ?_floor:
  1157                           	opt stack 0
  1158  000051                     floor@x:
  1159                           	opt stack 0
  1160                           
  1161                           ; 3 bytes @ 0x50
  1162  000051                     	ds	3
  1163  000054                     floor@i:
  1164                           	opt stack 0
  1165                           
  1166                           ; 3 bytes @ 0x53
  1167  000054                     	ds	3
  1168  000057                     floor@expon:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x56
  1172  000057                     	ds	2
  1173  000059                     ?_exp:
  1174                           	opt stack 0
  1175  000059                     exp@x:
  1176                           	opt stack 0
  1177                           
  1178                           ; 3 bytes @ 0x58
  1179  000059                     	ds	3
  1180  00005C                     _exp$1105:
  1181                           	opt stack 0
  1182                           
  1183                           ; 3 bytes @ 0x5B
  1184  00005C                     	ds	3
  1185  00005F                     exp@exponent:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x5E
  1189  00005F                     	ds	2
  1190  000061                     exp@sign:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x60
  1194  000061                     	ds	1
  1195  000062                     ?_pow:
  1196                           	opt stack 0
  1197  000062                     pow@x:
  1198                           	opt stack 0
  1199                           
  1200                           ; 3 bytes @ 0x61
  1201  000062                     	ds	3
  1202  000065                     pow@y:
  1203                           	opt stack 0
  1204                           
  1205                           ; 3 bytes @ 0x64
  1206  000065                     	ds	3
  1207  000068                     ?_dec_to_hex:
  1208                           	opt stack 0
  1209  000068                     dec_to_hex@num:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x67
  1213  000068                     	ds	2
  1214  00006A                     ??_time_difference:
  1215                           
  1216                           ; 1 bytes @ 0x69
  1217  00006A                     	ds	1
  1218  00006B                     ??_init_operation:
  1219  00006B                     ??_bottle_count:
  1220  00006B                     date_time@i:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0x6A
  1224  00006B                     	ds	2
  1225                           tblptru	equ	0xFF8
  1226                           
  1227 ;;
  1228 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1229 ;;
  1230 ;; *************** function _main *****************
  1231 ;; Defined at:
  1232 ;;		line 56 in file "main.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;		None
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;  time            7   87[BANK0 ] unsigned char [7]
  1237 ;;  end_time        7   80[BANK0 ] unsigned char [7]
  1238 ;;  start_time      7   73[BANK0 ] unsigned char [7]
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;Total ram usage:       23 bytes
  1253 ;; Hardware stack levels required when called:    9
  1254 ;; This function calls:
  1255 ;;		_I2C_Master_Init
  1256 ;;		_bottle_count
  1257 ;;		_date_time
  1258 ;;		_initLCD
  1259 ;;		_init_operation
  1260 ;;		_lcdInst
  1261 ;;		_operation_end
  1262 ;;		_printf
  1263 ;;		_runtime
  1264 ;;		_update_time
  1265 ;; This function is called by:
  1266 ;;		Startup code after reset
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text0
  1271  000C80                     __ptext0:
  1272                           	opt stack 0
  1273  000C80                     _main:
  1274                           	opt stack 22
  1275                           
  1276                           ;main.c: 60: TRISA = 0xFF;
  1277                           
  1278                           ;incstack = 0
  1279  000C80  6892               	setf	3986,c	;volatile
  1280                           
  1281                           ;main.c: 61: TRISB = 0xFF;
  1282  000C82  6893               	setf	3987,c	;volatile
  1283                           
  1284                           ;main.c: 62: TRISC = 0x00;
  1285  000C84  0E00               	movlw	0
  1286  000C86  6E94               	movwf	3988,c	;volatile
  1287                           
  1288                           ;main.c: 63: TRISD = 0x00;
  1289  000C88  0E00               	movlw	0
  1290  000C8A  6E95               	movwf	3989,c	;volatile
  1291                           
  1292                           ;main.c: 64: TRISE = 0x00;
  1293  000C8C  0E00               	movlw	0
  1294  000C8E  6E96               	movwf	3990,c	;volatile
  1295                           
  1296                           ;main.c: 66: LATA = 0x00;
  1297  000C90  0E00               	movlw	0
  1298  000C92  6E89               	movwf	3977,c	;volatile
  1299                           
  1300                           ;main.c: 67: LATB = 0x00;
  1301  000C94  0E00               	movlw	0
  1302  000C96  6E8A               	movwf	3978,c	;volatile
  1303                           
  1304                           ;main.c: 68: LATC = 0x00;
  1305  000C98  0E00               	movlw	0
  1306  000C9A  6E8B               	movwf	3979,c	;volatile
  1307                           
  1308                           ;main.c: 69: LATD = 0x00;
  1309  000C9C  0E00               	movlw	0
  1310  000C9E  6E8C               	movwf	3980,c	;volatile
  1311                           
  1312                           ;main.c: 70: LATE = 0x00;
  1313  000CA0  0E00               	movlw	0
  1314  000CA2  6E8D               	movwf	3981,c	;volatile
  1315                           
  1316                           ;main.c: 72: ADCON0 = 0x00;
  1317  000CA4  0E00               	movlw	0
  1318  000CA6  6EC2               	movwf	4034,c	;volatile
  1319                           
  1320                           ;main.c: 73: ADCON1 = 0xFF;
  1321  000CA8  68C1               	setf	4033,c	;volatile
  1322                           
  1323                           ;main.c: 75: INT1IE = 1;
  1324  000CAA  86F0               	bsf	intcon3,3,c	;volatile
  1325                           
  1326                           ;main.c: 76: (INTCONbits.GIE = 1);
  1327  000CAC  8EF2               	bsf	intcon,7,c	;volatile
  1328                           
  1329                           ;main.c: 78: nRBPU = 0;
  1330  000CAE  9EF1               	bcf	intcon2,7,c	;volatile
  1331                           
  1332                           ;main.c: 82: lcdInst(0b00000001);;
  1333  000CB0  0E01               	movlw	1
  1334  000CB2  EC29  F00F         	call	_lcdInst
  1335                           
  1336                           ;main.c: 83: initLCD();
  1337  000CB6  EC05  F00E         	call	_initLCD	;wreg free
  1338                           
  1339                           ;main.c: 84: unsigned char time[7];
  1340                           ;main.c: 85: unsigned char start_time[7];
  1341                           ;main.c: 86: unsigned char end_time[7];
  1342                           ;main.c: 90: I2C_Master_Init(10000);
  1343  000CBA  0E10               	movlw	16
  1344  000CBC  6E1E               	movwf	I2C_Master_Init@c,c
  1345  000CBE  0E27               	movlw	39
  1346  000CC0  6E1F               	movwf	I2C_Master_Init@c+1,c
  1347  000CC2  0E00               	movlw	0
  1348  000CC4  6E20               	movwf	I2C_Master_Init@c+2,c
  1349  000CC6  0E00               	movlw	0
  1350  000CC8  6E21               	movwf	I2C_Master_Init@c+3,c
  1351  000CCA  EC63  F00D         	call	_I2C_Master_Init	;wreg free
  1352                           
  1353                           ;main.c: 93: lcdInst(0b00000001);;
  1354  000CCE  0E01               	movlw	1
  1355  000CD0  EC29  F00F         	call	_lcdInst
  1356                           
  1357                           ;main.c: 94: initLCD();
  1358  000CD4  EC05  F00E         	call	_initLCD	;wreg free
  1359                           
  1360                           ;main.c: 95: lcdInst(0b10000000);;
  1361  000CD8  0E80               	movlw	128
  1362  000CDA  EC29  F00F         	call	_lcdInst
  1363                           
  1364                           ;main.c: 97: printf("Press 1 to begin operation");
  1365  000CDE  0ED4               	movlw	low STR_1
  1366  000CE0  0100               	movlb	0	; () banked
  1367  000CE2  6FAC               	movwf	printf@f& (0+255),b
  1368  000CE4  0EFE               	movlw	high STR_1
  1369  000CE6  0100               	movlb	0	; () banked
  1370  000CE8  6FAD               	movwf	(printf@f+1)& (0+255),b
  1371  000CEA  EC09  F000         	call	_printf	;wreg free
  1372                           
  1373                           ;main.c: 98: curr_state = STANDBY;
  1374  000CEE  0E00               	movlw	0
  1375  000CF0  0100               	movlb	0	; () banked
  1376  000CF2  6FDF               	movwf	_curr_state& (0+255),b
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 99: bot_type = O;
  1380  000CF4  0E05               	movlw	5
  1381  000CF6  0100               	movlb	0	; () banked
  1382  000CF8  6FDE               	movwf	_bot_type& (0+255),b
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 101: switch(curr_state){
  1386                           
  1387                           ;main.c: 100: while (1){
  1388  000CFA  D033               	goto	l3857
  1389  000CFC                     l3843:
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;main.c: 103: operation_end();
  1393  000CFC  EC6B  F00E         	call	_operation_end	;wreg free
  1394                           
  1395                           ;main.c: 104: break;
  1396  000D00  D041               	goto	l3859
  1397  000D02                     l3845:
  1398                           
  1399                           ;main.c: 106: init_operation(start_time, time);
  1400  000D02  0EC9               	movlw	low main@start_time
  1401  000D04  0100               	movlb	0	; () banked
  1402  000D06  6FC2               	movwf	init_operation@start_time& (0+255),b
  1403  000D08  0E00               	movlw	high main@start_time
  1404  000D0A  0100               	movlb	0	; () banked
  1405  000D0C  6FC3               	movwf	(init_operation@start_time+1)& (0+255),b
  1406  000D0E  0ED7               	movlw	low main@time
  1407  000D10  0100               	movlb	0	; () banked
  1408  000D12  6FC4               	movwf	init_operation@time& (0+255),b
  1409  000D14  0E00               	movlw	high main@time
  1410  000D16  0100               	movlb	0	; () banked
  1411  000D18  6FC5               	movwf	(init_operation@time+1)& (0+255),b
  1412  000D1A  EC59  F00B         	call	_init_operation	;wreg free
  1413                           
  1414                           ;main.c: 107: update_time(end_time);
  1415  000D1E  0ED0               	movlw	low main@end_time
  1416  000D20  6E14               	movwf	update_time@time,c
  1417  000D22  0E00               	movlw	high main@end_time
  1418  000D24  6E15               	movwf	update_time@time+1,c
  1419  000D26  ECFC  F00C         	call	_update_time	;wreg free
  1420                           
  1421                           ;main.c: 108: break;
  1422  000D2A  D02C               	goto	l3859
  1423  000D2C                     l3849:
  1424                           
  1425                           ;main.c: 110: date_time(time);
  1426  000D2C  0ED7               	movlw	low main@time
  1427  000D2E  0100               	movlb	0	; () banked
  1428  000D30  6FC2               	movwf	date_time@time& (0+255),b
  1429  000D32  0E00               	movlw	high main@time
  1430  000D34  0100               	movlb	0	; () banked
  1431  000D36  6FC3               	movwf	(date_time@time+1)& (0+255),b
  1432  000D38  EC65  F004         	call	_date_time	;wreg free
  1433                           
  1434                           ;main.c: 111: break;
  1435  000D3C  D023               	goto	l3859
  1436  000D3E                     l3851:
  1437                           
  1438                           ;main.c: 113: bottle_count();
  1439  000D3E  ECAA  F005         	call	_bottle_count	;wreg free
  1440                           
  1441                           ;main.c: 114: break;
  1442  000D42  D020               	goto	l3859
  1443  000D44                     l3853:
  1444                           
  1445                           ;main.c: 116: runtime(start_time, end_time);
  1446  000D44  0EC9               	movlw	low main@start_time
  1447  000D46  0100               	movlb	0	; () banked
  1448  000D48  6FC2               	movwf	runtime@start_time& (0+255),b
  1449  000D4A  0E00               	movlw	high main@start_time
  1450  000D4C  0100               	movlb	0	; () banked
  1451  000D4E  6FC3               	movwf	(runtime@start_time+1)& (0+255),b
  1452  000D50  0ED0               	movlw	low main@end_time
  1453  000D52  0100               	movlb	0	; () banked
  1454  000D54  6FC4               	movwf	runtime@end_time& (0+255),b
  1455  000D56  0E00               	movlw	high main@end_time
  1456  000D58  0100               	movlb	0	; () banked
  1457  000D5A  6FC5               	movwf	(runtime@end_time+1)& (0+255),b
  1458  000D5C  ECE0  F00D         	call	_runtime	;wreg free
  1459                           
  1460                           ;main.c: 118: }
  1461                           
  1462                           ;main.c: 117: break;
  1463  000D60  D011               	goto	l3859
  1464  000D62                     l3857:
  1465  000D62  0100               	movlb	0	; () banked
  1466  000D64  51DF               	movf	_curr_state& (0+255),w,b
  1467                           
  1468                           ; Switch size 1, requested type "space"
  1469                           ; Number of cases is 5, Range of values is 1 to 5
  1470                           ; switch strategies available:
  1471                           ; Name         Instructions Cycles
  1472                           ; simple_byte           16     9 (average)
  1473                           ;	Chosen strategy is simple_byte
  1474  000D66  0A01               	xorlw	1	; case 1
  1475  000D68  B4D8               	btfsc	status,2,c
  1476  000D6A  D7CB               	goto	l3845
  1477  000D6C  0A03               	xorlw	3	; case 2
  1478  000D6E  B4D8               	btfsc	status,2,c
  1479  000D70  D7C5               	goto	l3843
  1480  000D72  0A01               	xorlw	1	; case 3
  1481  000D74  B4D8               	btfsc	status,2,c
  1482  000D76  D7DA               	goto	l3849
  1483  000D78  0A07               	xorlw	7	; case 4
  1484  000D7A  B4D8               	btfsc	status,2,c
  1485  000D7C  D7E0               	goto	l3851
  1486  000D7E  0A01               	xorlw	1	; case 5
  1487  000D80  B4D8               	btfsc	status,2,c
  1488  000D82  D7E0               	goto	l3853
  1489  000D84                     l3859:
  1490                           
  1491                           ;main.c: 119: _delay((unsigned long)((100)*(10000000/4000.0)));
  1492  000D84  0E02               	movlw	2
  1493  000D86  0100               	movlb	0	; () banked
  1494  000D88  6FC8               	movwf	(??_main+1)& (0+255),b
  1495  000D8A  0E45               	movlw	69
  1496  000D8C  0100               	movlb	0	; () banked
  1497  000D8E  6FC7               	movwf	??_main& (0+255),b
  1498  000D90  0EA9               	movlw	169
  1499  000D92                     u3527:
  1500  000D92  2EE8               	decfsz	wreg,f,c
  1501  000D94  D7FE               	bra	u3527
  1502  000D96  2FC7               	decfsz	??_main& (0+255),f,b
  1503  000D98  D7FC               	bra	u3527
  1504  000D9A  2FC8               	decfsz	(??_main+1)& (0+255),f,b
  1505  000D9C  D7FA               	bra	u3527
  1506  000D9E  D000               	nop2	
  1507  000DA0  D7E0               	goto	l3857
  1508  000DA2                     __end_of_main:
  1509                           	opt stack 0
  1510                           tblptru	equ	0xFF8
  1511                           intcon	equ	0xFF2
  1512                           intcon2	equ	0xFF1
  1513                           intcon3	equ	0xFF0
  1514                           wreg	equ	0xFE8
  1515                           status	equ	0xFD8
  1516                           
  1517 ;; *************** function _runtime *****************
  1518 ;; Defined at:
  1519 ;;		line 239 in file "main.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  start_time      2   66[BANK0 ] PTR unsigned char 
  1522 ;;		 -> main@start_time(7), 
  1523 ;;  end_time        2   68[BANK0 ] PTR unsigned char 
  1524 ;;		 -> main@end_time(7), 
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;		None
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      void 
  1529 ;; Registers used:
  1530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1536 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1539 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1540 ;;Total ram usage:        4 bytes
  1541 ;; Hardware stack levels used:    1
  1542 ;; Hardware stack levels required when called:    8
  1543 ;; This function calls:
  1544 ;;		_lcdInst
  1545 ;;		_printf
  1546 ;;		_time_difference
  1547 ;; This function is called by:
  1548 ;;		_main
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text1
  1553  001BC0                     __ptext1:
  1554                           	opt stack 0
  1555  001BC0                     _runtime:
  1556                           	opt stack 22
  1557                           
  1558                           ;main.c: 240: lcdInst(0b10000000);;
  1559                           
  1560                           ;incstack = 0
  1561  001BC0  0E80               	movlw	128
  1562  001BC2  EC29  F00F         	call	_lcdInst
  1563                           
  1564                           ;main.c: 241: printf("Total Operation ");
  1565  001BC6  0EBA               	movlw	low STR_4
  1566  001BC8  0100               	movlb	0	; () banked
  1567  001BCA  6FAC               	movwf	printf@f& (0+255),b
  1568  001BCC  0EFF               	movlw	high STR_4
  1569  001BCE  0100               	movlb	0	; () banked
  1570  001BD0  6FAD               	movwf	(printf@f+1)& (0+255),b
  1571  001BD2  EC09  F000         	call	_printf	;wreg free
  1572                           
  1573                           ;main.c: 242: lcdInst(0b11000000);;
  1574  001BD6  0EC0               	movlw	192
  1575  001BD8  EC29  F00F         	call	_lcdInst
  1576                           
  1577                           ;main.c: 243: printf("Time: %is         ", time_difference(end_time, start_time));
  1578  001BDC  0E1D               	movlw	low STR_5
  1579  001BDE  0100               	movlb	0	; () banked
  1580  001BE0  6FAC               	movwf	printf@f& (0+255),b
  1581  001BE2  0EFF               	movlw	high STR_5
  1582  001BE4  0100               	movlb	0	; () banked
  1583  001BE6  6FAD               	movwf	(printf@f+1)& (0+255),b
  1584  001BE8  C0C4  F099         	movff	runtime@end_time,time_difference@time1
  1585  001BEC  C0C5  F09A         	movff	runtime@end_time+1,time_difference@time1+1
  1586  001BF0  C0C2  F09B         	movff	runtime@start_time,time_difference@time2
  1587  001BF4  C0C3  F09C         	movff	runtime@start_time+1,time_difference@time2+1
  1588  001BF8  EC0E  F005         	call	_time_difference	;wreg free
  1589  001BFC  C099  F0AE         	movff	?_time_difference,?_printf+2
  1590  001C00  C09A  F0AF         	movff	?_time_difference+1,?_printf+3
  1591  001C04  EC09  F000         	call	_printf	;wreg free
  1592  001C08  0012               	return		;funcret
  1593  001C0A                     __end_of_runtime:
  1594                           	opt stack 0
  1595                           tblptru	equ	0xFF8
  1596                           intcon	equ	0xFF2
  1597                           intcon2	equ	0xFF1
  1598                           intcon3	equ	0xFF0
  1599                           wreg	equ	0xFE8
  1600                           status	equ	0xFD8
  1601                           
  1602 ;; *************** function _operation_end *****************
  1603 ;; Defined at:
  1604 ;;		line 285 in file "main.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;		None
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;		None
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      void 
  1611 ;; Registers used:
  1612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;Total ram usage:        0 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    4
  1625 ;; This function calls:
  1626 ;;		_delay
  1627 ;;		_lcdInst
  1628 ;;		_printf
  1629 ;; This function is called by:
  1630 ;;		_main
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text2
  1635  001CD6                     __ptext2:
  1636                           	opt stack 0
  1637  001CD6                     _operation_end:
  1638                           	opt stack 26
  1639                           
  1640                           ;main.c: 286: lcdInst(0b10000000);;
  1641                           
  1642                           ;incstack = 0
  1643  001CD6  0E80               	movlw	128
  1644  001CD8  EC29  F00F         	call	_lcdInst
  1645                           
  1646                           ;main.c: 287: printf("Operation Done! ");
  1647  001CDC  0EA9               	movlw	low STR_16
  1648  001CDE  0100               	movlb	0	; () banked
  1649  001CE0  6FAC               	movwf	printf@f& (0+255),b
  1650  001CE2  0EFF               	movlw	high STR_16
  1651  001CE4  0100               	movlb	0	; () banked
  1652  001CE6  6FAD               	movwf	(printf@f+1)& (0+255),b
  1653  001CE8  EC09  F000         	call	_printf	;wreg free
  1654                           
  1655                           ;main.c: 288: lcdInst(0b11000000);;
  1656  001CEC  0EC0               	movlw	192
  1657  001CEE  EC29  F00F         	call	_lcdInst
  1658                           
  1659                           ;main.c: 289: printf("                ");
  1660  001CF2  0E54               	movlw	low STR_17
  1661  001CF4  0100               	movlb	0	; () banked
  1662  001CF6  6FAC               	movwf	printf@f& (0+255),b
  1663  001CF8  0EFF               	movlw	high STR_17
  1664  001CFA  0100               	movlb	0	; () banked
  1665  001CFC  6FAD               	movwf	(printf@f+1)& (0+255),b
  1666  001CFE  EC09  F000         	call	_printf	;wreg free
  1667                           
  1668                           ;main.c: 290: curr_state = RUNTIME;
  1669  001D02  0E05               	movlw	5
  1670  001D04  0100               	movlb	0	; () banked
  1671  001D06  6FDF               	movwf	_curr_state& (0+255),b
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;main.c: 291: delay(1);
  1675  001D08  0E00               	movlw	0
  1676  001D0A  6E12               	movwf	delay@seconds+1,c
  1677  001D0C  0E01               	movlw	1
  1678  001D0E  6E11               	movwf	delay@seconds,c
  1679  001D10  EC28  F00E         	call	_delay	;wreg free
  1680  001D14  0012               	return	
  1681  001D16                     __end_of_operation_end:
  1682                           	opt stack 0
  1683                           tblptru	equ	0xFF8
  1684                           intcon	equ	0xFF2
  1685                           intcon2	equ	0xFF1
  1686                           intcon3	equ	0xFF0
  1687                           wreg	equ	0xFE8
  1688                           status	equ	0xFD8
  1689                           
  1690 ;; *************** function _delay *****************
  1691 ;; Defined at:
  1692 ;;		line 193 in file "main.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;  seconds         2   16[COMRAM] int 
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;  i               1   21[COMRAM] unsigned char 
  1697 ;;  i               2   19[COMRAM] int 
  1698 ;; Return value:  Size  Location     Type
  1699 ;;                  1    wreg      void 
  1700 ;; Registers used:
  1701 ;;		wreg, status,2, status,0
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1707 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1708 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1709 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1710 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;Total ram usage:        6 bytes
  1712 ;; Hardware stack levels used:    1
  1713 ;; Hardware stack levels required when called:    1
  1714 ;; This function calls:
  1715 ;;		Nothing
  1716 ;; This function is called by:
  1717 ;;		_operation_end
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721                           	psect	text3
  1722  001C50                     __ptext3:
  1723                           	opt stack 0
  1724  001C50                     _delay:
  1725                           	opt stack 28
  1726                           
  1727                           ;main.c: 194: for (int i = 0; i <= seconds; i ++) {
  1728                           
  1729                           ;incstack = 0
  1730  001C50  0E00               	movlw	0
  1731  001C52  6E15               	movwf	delay@i+1,c
  1732  001C54  0E00               	movlw	0
  1733  001C56  6E14               	movwf	delay@i,c
  1734  001C58  D012               	goto	l3019
  1735  001C5A                     l3007:
  1736                           
  1737                           ;main.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  1738  001C5A  0E00               	movlw	0
  1739  001C5C  6E16               	movwf	delay@i_272,c
  1740  001C5E                     l3009:
  1741  001C5E  0E63               	movlw	99
  1742  001C60  6416               	cpfsgt	delay@i_272,c
  1743  001C62  D001               	goto	l3013
  1744  001C64  D00A               	goto	l3017
  1745  001C66                     l3013:
  1746  001C66  0E21               	movlw	33
  1747  001C68  6E13               	movwf	??_delay& (0+255),c
  1748  001C6A  0E76               	movlw	118
  1749  001C6C                     u3537:
  1750  001C6C  2EE8               	decfsz	wreg,f,c
  1751  001C6E  D7FE               	bra	u3537
  1752  001C70  2E13               	decfsz	??_delay& (0+255),f,c
  1753  001C72  D7FC               	bra	u3537
  1754  001C74  D000               	nop2	
  1755  001C76  2A16               	incf	delay@i_272,f,c
  1756  001C78  D7F2               	goto	l3009
  1757  001C7A                     l3017:
  1758  001C7A  4A14               	infsnz	delay@i,f,c
  1759  001C7C  2A15               	incf	delay@i+1,f,c
  1760  001C7E                     l3019:
  1761  001C7E  5014               	movf	delay@i,w,c
  1762  001C80  5C11               	subwf	delay@seconds,w,c
  1763  001C82  5012               	movf	delay@seconds+1,w,c
  1764  001C84  0A80               	xorlw	128
  1765  001C86  6E13               	movwf	??_delay& (0+255),c
  1766  001C88  5015               	movf	delay@i+1,w,c
  1767  001C8A  0A80               	xorlw	128
  1768  001C8C  5813               	subwfb	??_delay& (0+255),w,c
  1769  001C8E  A0D8               	btfss	status,0,c
  1770  001C90  0012               	return	
  1771  001C92  D7E3               	goto	l3007
  1772  001C94                     __end_of_delay:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           intcon	equ	0xFF2
  1776                           intcon2	equ	0xFF1
  1777                           intcon3	equ	0xFF0
  1778                           wreg	equ	0xFE8
  1779                           status	equ	0xFD8
  1780                           
  1781 ;; *************** function _init_operation *****************
  1782 ;; Defined at:
  1783 ;;		line 225 in file "main.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;  start_time      2   66[BANK0 ] PTR unsigned char 
  1786 ;;		 -> main@start_time(7), 
  1787 ;;  time            2   68[BANK0 ] PTR unsigned char 
  1788 ;;		 -> main@time(7), 
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;		None
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  1    wreg      void 
  1793 ;; Registers used:
  1794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1800 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1802 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1803 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1804 ;;Total ram usage:        6 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    8
  1807 ;; This function calls:
  1808 ;;		_initLCD
  1809 ;;		_lcdInst
  1810 ;;		_printf
  1811 ;;		_time_difference
  1812 ;;		_update_time
  1813 ;; This function is called by:
  1814 ;;		_main
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           	psect	text4
  1819  0016B2                     __ptext4:
  1820                           	opt stack 0
  1821  0016B2                     _init_operation:
  1822                           	opt stack 22
  1823                           
  1824                           ;main.c: 226: update_time(start_time);
  1825                           
  1826                           ;incstack = 0
  1827  0016B2  C0C2  F014         	movff	init_operation@start_time,update_time@time
  1828  0016B6  C0C3  F015         	movff	init_operation@start_time+1,update_time@time+1
  1829  0016BA  ECFC  F00C         	call	_update_time	;wreg free
  1830                           
  1831                           ;main.c: 227: lcdInst(0b00000001);;
  1832  0016BE  0E01               	movlw	1
  1833  0016C0  EC29  F00F         	call	_lcdInst
  1834                           
  1835                           ;main.c: 228: initLCD();
  1836  0016C4  EC05  F00E         	call	_initLCD	;wreg free
  1837                           
  1838                           ;main.c: 229: while(PORTBbits.RB1 == 0 && keys[(PORTB & 0xF0)>>4] != '*'){
  1839  0016C8  D035               	goto	l3735
  1840  0016CA                     l3723:
  1841                           
  1842                           ;main.c: 230: update_time(time);
  1843  0016CA  C0C4  F014         	movff	init_operation@time,update_time@time
  1844  0016CE  C0C5  F015         	movff	init_operation@time+1,update_time@time+1
  1845  0016D2  ECFC  F00C         	call	_update_time	;wreg free
  1846                           
  1847                           ;main.c: 231: lcdInst(0b10000000);;
  1848  0016D6  0E80               	movlw	128
  1849  0016D8  EC29  F00F         	call	_lcdInst
  1850                           
  1851                           ;main.c: 232: printf("Press * To Stop ");
  1852  0016DC  0EDC               	movlw	low STR_2
  1853  0016DE  0100               	movlb	0	; () banked
  1854  0016E0  6FAC               	movwf	printf@f& (0+255),b
  1855  0016E2  0EFF               	movlw	high STR_2
  1856  0016E4  0100               	movlb	0	; () banked
  1857  0016E6  6FAD               	movwf	(printf@f+1)& (0+255),b
  1858  0016E8  EC09  F000         	call	_printf	;wreg free
  1859                           
  1860                           ;main.c: 233: lcdInst(0b11000000);;
  1861  0016EC  0EC0               	movlw	192
  1862  0016EE  EC29  F00F         	call	_lcdInst
  1863                           
  1864                           ;main.c: 234: printf("Elapsed: %is      ", time_difference(time, start_time));
  1865  0016F2  0E30               	movlw	low STR_3
  1866  0016F4  0100               	movlb	0	; () banked
  1867  0016F6  6FAC               	movwf	printf@f& (0+255),b
  1868  0016F8  0EFF               	movlw	high STR_3
  1869  0016FA  0100               	movlb	0	; () banked
  1870  0016FC  6FAD               	movwf	(printf@f+1)& (0+255),b
  1871  0016FE  C0C4  F099         	movff	init_operation@time,time_difference@time1
  1872  001702  C0C5  F09A         	movff	init_operation@time+1,time_difference@time1+1
  1873  001706  C0C2  F09B         	movff	init_operation@start_time,time_difference@time2
  1874  00170A  C0C3  F09C         	movff	init_operation@start_time+1,time_difference@time2+1
  1875  00170E  EC0E  F005         	call	_time_difference	;wreg free
  1876  001712  C099  F0AE         	movff	?_time_difference,?_printf+2
  1877  001716  C09A  F0AF         	movff	?_time_difference+1,?_printf+3
  1878  00171A  EC09  F000         	call	_printf	;wreg free
  1879                           
  1880                           ;main.c: 235: _delay((unsigned long)((500)*(10000000/4000.0)));
  1881  00171E  0E07               	movlw	7
  1882  001720  6E6C               	movwf	(??_init_operation+1)& (0+255),c
  1883  001722  0E58               	movlw	88
  1884  001724  6E6B               	movwf	??_init_operation& (0+255),c
  1885  001726  0E5A               	movlw	90
  1886  001728                     u3547:
  1887  001728  2EE8               	decfsz	wreg,f,c
  1888  00172A  D7FE               	bra	u3547
  1889  00172C  2E6B               	decfsz	??_init_operation& (0+255),f,c
  1890  00172E  D7FC               	bra	u3547
  1891  001730  2E6C               	decfsz	(??_init_operation+1)& (0+255),f,c
  1892  001732  D7FA               	bra	u3547
  1893  001734                     l3735:
  1894  001734  B281               	btfsc	3969,1,c	;volatile
  1895  001736  0012               	return	
  1896  001738  3881               	swapf	3969,w,c	;volatile
  1897  00173A  0B0F               	andlw	15
  1898  00173C  0B0F               	andlw	15
  1899  00173E  6E6B               	movwf	??_init_operation& (0+255),c
  1900  001740  6A6C               	clrf	(??_init_operation+1)& (0+255),c
  1901  001742  0E71               	movlw	low _keys
  1902  001744  246B               	addwf	??_init_operation,w,c
  1903  001746  6EF6               	movwf	tblptrl,c
  1904  001748  0EFE               	movlw	high _keys
  1905  00174A  206C               	addwfc	??_init_operation+1,w,c
  1906  00174C  6EF7               	movwf	tblptrh,c
  1907  00174E                     	if	0	;There are less than 3 active tblptr bytes
  1908  00174E                     	endif
  1909  00174E  0008               	tblrd		*
  1910  001750  50F5               	movf	tablat,w,c
  1911  001752  0A2A               	xorlw	42
  1912  001754  B4D8               	btfsc	status,2,c
  1913  001756  0012               	return	
  1914  001758  D7B8               	goto	l3723
  1915  00175A                     __end_of_init_operation:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           intcon	equ	0xFF2
  1922                           intcon2	equ	0xFF1
  1923                           intcon3	equ	0xFF0
  1924                           wreg	equ	0xFE8
  1925                           status	equ	0xFD8
  1926                           
  1927 ;; *************** function _update_time *****************
  1928 ;; Defined at:
  1929 ;;		line 177 in file "main.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  time            2   19[COMRAM] PTR unsigned char 
  1932 ;;		 -> main@end_time(7), main@time(7), main@start_time(7), 
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;  i               1   21[COMRAM] unsigned char 
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  1    wreg      void 
  1937 ;; Registers used:
  1938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1944 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1948 ;;Total ram usage:        3 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; Hardware stack levels required when called:    3
  1951 ;; This function calls:
  1952 ;;		_I2C_Master_Read
  1953 ;;		_I2C_Master_Start
  1954 ;;		_I2C_Master_Stop
  1955 ;;		_I2C_Master_Write
  1956 ;; This function is called by:
  1957 ;;		_main
  1958 ;;		_init_operation
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text5
  1963  0019F8                     __ptext5:
  1964                           	opt stack 0
  1965  0019F8                     _update_time:
  1966                           	opt stack 27
  1967                           
  1968                           ;main.c: 178: I2C_Master_Start();
  1969                           
  1970                           ;incstack = 0
  1971  0019F8  EC38  F00F         	call	_I2C_Master_Start	;wreg free
  1972                           
  1973                           ;main.c: 179: I2C_Master_Write(0b11010000);
  1974  0019FC  0E00               	movlw	0
  1975  0019FE  6E13               	movwf	I2C_Master_Write@d+1,c
  1976  001A00  0ED0               	movlw	208
  1977  001A02  6E12               	movwf	I2C_Master_Write@d,c
  1978  001A04  EC2F  F00F         	call	_I2C_Master_Write	;wreg free
  1979                           
  1980                           ;main.c: 180: I2C_Master_Write(0x00);
  1981  001A08  0E00               	movlw	0
  1982  001A0A  6E13               	movwf	I2C_Master_Write@d+1,c
  1983  001A0C  0E00               	movlw	0
  1984  001A0E  6E12               	movwf	I2C_Master_Write@d,c
  1985  001A10  EC2F  F00F         	call	_I2C_Master_Write	;wreg free
  1986                           
  1987                           ;main.c: 181: I2C_Master_Stop();
  1988  001A14  EC34  F00F         	call	_I2C_Master_Stop	;wreg free
  1989                           
  1990                           ;main.c: 184: I2C_Master_Start();
  1991  001A18  EC38  F00F         	call	_I2C_Master_Start	;wreg free
  1992                           
  1993                           ;main.c: 185: I2C_Master_Write(0b11010001);
  1994  001A1C  0E00               	movlw	0
  1995  001A1E  6E13               	movwf	I2C_Master_Write@d+1,c
  1996  001A20  0ED1               	movlw	209
  1997  001A22  6E12               	movwf	I2C_Master_Write@d,c
  1998  001A24  EC2F  F00F         	call	_I2C_Master_Write	;wreg free
  1999                           
  2000                           ;main.c: 186: for(unsigned char i=0;i<0x06;i++){
  2001  001A28  0E00               	movlw	0
  2002  001A2A  6E16               	movwf	update_time@i,c
  2003  001A2C                     l3679:
  2004  001A2C  0E05               	movlw	5
  2005  001A2E  6416               	cpfsgt	update_time@i,c
  2006  001A30  D001               	goto	l3683
  2007  001A32  D00E               	goto	l3689
  2008  001A34                     l3683:
  2009                           
  2010                           ;main.c: 187: time[i] = I2C_Master_Read(1);
  2011  001A34  5016               	movf	update_time@i,w,c
  2012  001A36  0D01               	mullw	1
  2013  001A38  50F3               	movf	prodl,w,c
  2014  001A3A  2414               	addwf	update_time@time,w,c
  2015  001A3C  6ED9               	movwf	fsr2l,c
  2016  001A3E  50F4               	movf	prodh,w,c
  2017  001A40  2015               	addwfc	update_time@time+1,w,c
  2018  001A42  6EDA               	movwf	fsr2h,c
  2019  001A44  0E01               	movlw	1
  2020  001A46  ECC7  F00E         	call	_I2C_Master_Read
  2021  001A4A  6EDF               	movwf	indf2,c
  2022  001A4C  2A16               	incf	update_time@i,f,c
  2023  001A4E  D7EE               	goto	l3679
  2024  001A50                     l3689:
  2025                           
  2026                           ;main.c: 188: }
  2027                           ;main.c: 189: time[6] = I2C_Master_Read(0);
  2028  001A50  EE20 F006          	lfsr	2,6
  2029  001A54  5014               	movf	update_time@time,w,c
  2030  001A56  26D9               	addwf	fsr2l,f,c
  2031  001A58  5015               	movf	update_time@time+1,w,c
  2032  001A5A  22DA               	addwfc	fsr2h,f,c
  2033  001A5C  0E00               	movlw	0
  2034  001A5E  ECC7  F00E         	call	_I2C_Master_Read
  2035  001A62  6EDF               	movwf	indf2,c
  2036                           
  2037                           ;main.c: 190: I2C_Master_Stop();
  2038  001A64  EC34  F00F         	call	_I2C_Master_Stop	;wreg free
  2039  001A68  0012               	return		;funcret
  2040  001A6A                     __end_of_update_time:
  2041                           	opt stack 0
  2042                           tblptru	equ	0xFF8
  2043                           tblptrh	equ	0xFF7
  2044                           tblptrl	equ	0xFF6
  2045                           tablat	equ	0xFF5
  2046                           prodh	equ	0xFF4
  2047                           prodl	equ	0xFF3
  2048                           intcon	equ	0xFF2
  2049                           intcon2	equ	0xFF1
  2050                           intcon3	equ	0xFF0
  2051                           wreg	equ	0xFE8
  2052                           indf2	equ	0xFDF
  2053                           fsr2h	equ	0xFDA
  2054                           fsr2l	equ	0xFD9
  2055                           status	equ	0xFD8
  2056                           
  2057 ;; *************** function _time_difference *****************
  2058 ;; Defined at:
  2059 ;;		line 213 in file "main.c"
  2060 ;; Parameters:    Size  Location     Type
  2061 ;;  time1           2   25[BANK0 ] PTR unsigned char 
  2062 ;;		 -> main@end_time(7), main@time(7), 
  2063 ;;  time2           2   27[BANK0 ] PTR unsigned char 
  2064 ;;		 -> main@start_time(7), 
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;  s2              2   39[BANK0 ] int 
  2067 ;;  s1              2   37[BANK0 ] int 
  2068 ;;  min2            2   35[BANK0 ] int 
  2069 ;;  min1            2   33[BANK0 ] int 
  2070 ;;  hr2             2   31[BANK0 ] int 
  2071 ;;  hr1             2   29[BANK0 ] int 
  2072 ;;  d3              1   43[BANK0 ] unsigned char 
  2073 ;;  d2              1   42[BANK0 ] unsigned char 
  2074 ;;  d1              1   41[BANK0 ] unsigned char 
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  2   25[BANK0 ] int 
  2077 ;; Registers used:
  2078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2084 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;      Totals:         1      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;Total ram usage:       20 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    7
  2091 ;; This function calls:
  2092 ;;		___wmul
  2093 ;;		_dec_to_hex
  2094 ;; This function is called by:
  2095 ;;		_init_operation
  2096 ;;		_runtime
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           	psect	text6
  2101  000A1C                     __ptext6:
  2102                           	opt stack 0
  2103  000A1C                     _time_difference:
  2104                           	opt stack 22
  2105                           
  2106                           ;main.c: 214: int hr1, hr2, min1, min2, s1, s2;
  2107                           ;main.c: 215: char d1, d2, d3;
  2108                           ;main.c: 216: hr1 = time1[2]; hr2 = time2[2]; min1 = time1[1]; min2 = time2[1];
  2109                           
  2110                           ;incstack = 0
  2111  000A1C  0100               	movlb	0	; () banked
  2112  000A1E  EE20 F002          	lfsr	2,2
  2113  000A22  5199               	movf	time_difference@time1& (0+255),w,b
  2114  000A24  26D9               	addwf	fsr2l,f,c
  2115  000A26  519A               	movf	(time_difference@time1+1)& (0+255),w,b
  2116  000A28  22DA               	addwfc	fsr2h,f,c
  2117  000A2A  50DF               	movf	indf2,w,c
  2118  000A2C  6E6A               	movwf	??_time_difference& (0+255),c
  2119  000A2E  506A               	movf	??_time_difference,w,c
  2120  000A30  0100               	movlb	0	; () banked
  2121  000A32  6F9D               	movwf	time_difference@hr1& (0+255),b
  2122  000A34  6B9E               	clrf	(time_difference@hr1+1)& (0+255),b
  2123  000A36  0100               	movlb	0	; () banked
  2124  000A38  EE20 F002          	lfsr	2,2
  2125  000A3C  519B               	movf	time_difference@time2& (0+255),w,b
  2126  000A3E  26D9               	addwf	fsr2l,f,c
  2127  000A40  519C               	movf	(time_difference@time2+1)& (0+255),w,b
  2128  000A42  22DA               	addwfc	fsr2h,f,c
  2129  000A44  50DF               	movf	indf2,w,c
  2130  000A46  6E6A               	movwf	??_time_difference& (0+255),c
  2131  000A48  506A               	movf	??_time_difference,w,c
  2132  000A4A  0100               	movlb	0	; () banked
  2133  000A4C  6F9F               	movwf	time_difference@hr2& (0+255),b
  2134  000A4E  6BA0               	clrf	(time_difference@hr2+1)& (0+255),b
  2135  000A50  0100               	movlb	0	; () banked
  2136  000A52  EE20 F001          	lfsr	2,1
  2137  000A56  5199               	movf	time_difference@time1& (0+255),w,b
  2138  000A58  26D9               	addwf	fsr2l,f,c
  2139  000A5A  519A               	movf	(time_difference@time1+1)& (0+255),w,b
  2140  000A5C  22DA               	addwfc	fsr2h,f,c
  2141  000A5E  50DF               	movf	indf2,w,c
  2142  000A60  6E6A               	movwf	??_time_difference& (0+255),c
  2143  000A62  506A               	movf	??_time_difference,w,c
  2144  000A64  0100               	movlb	0	; () banked
  2145  000A66  6FA1               	movwf	time_difference@min1& (0+255),b
  2146  000A68  6BA2               	clrf	(time_difference@min1+1)& (0+255),b
  2147  000A6A  0100               	movlb	0	; () banked
  2148  000A6C  EE20 F001          	lfsr	2,1
  2149  000A70  519B               	movf	time_difference@time2& (0+255),w,b
  2150  000A72  26D9               	addwf	fsr2l,f,c
  2151  000A74  519C               	movf	(time_difference@time2+1)& (0+255),w,b
  2152  000A76  22DA               	addwfc	fsr2h,f,c
  2153  000A78  50DF               	movf	indf2,w,c
  2154  000A7A  6E6A               	movwf	??_time_difference& (0+255),c
  2155  000A7C  506A               	movf	??_time_difference,w,c
  2156  000A7E  0100               	movlb	0	; () banked
  2157  000A80  6FA3               	movwf	time_difference@min2& (0+255),b
  2158  000A82  6BA4               	clrf	(time_difference@min2+1)& (0+255),b
  2159                           
  2160                           ;main.c: 217: s1 = time1[0]; s2 = time2[0];
  2161  000A84  C099  FFD9         	movff	time_difference@time1,fsr2l
  2162  000A88  C09A  FFDA         	movff	time_difference@time1+1,fsr2h
  2163  000A8C  50DF               	movf	indf2,w,c
  2164  000A8E  6E6A               	movwf	??_time_difference& (0+255),c
  2165  000A90  506A               	movf	??_time_difference,w,c
  2166  000A92  0100               	movlb	0	; () banked
  2167  000A94  6FA5               	movwf	time_difference@s1& (0+255),b
  2168  000A96  6BA6               	clrf	(time_difference@s1+1)& (0+255),b
  2169  000A98  C09B  FFD9         	movff	time_difference@time2,fsr2l
  2170  000A9C  C09C  FFDA         	movff	time_difference@time2+1,fsr2h
  2171  000AA0  50DF               	movf	indf2,w,c
  2172  000AA2  6E6A               	movwf	??_time_difference& (0+255),c
  2173  000AA4  506A               	movf	??_time_difference,w,c
  2174  000AA6  0100               	movlb	0	; () banked
  2175  000AA8  6FA7               	movwf	time_difference@s2& (0+255),b
  2176  000AAA  6BA8               	clrf	(time_difference@s2+1)& (0+255),b
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;main.c: 219: d1 = dec_to_hex(hr1) - dec_to_hex(hr2);
  2180  000AAC  C09F  F068         	movff	time_difference@hr2,dec_to_hex@num
  2181  000AB0  C0A0  F069         	movff	time_difference@hr2+1,dec_to_hex@num+1
  2182  000AB4  EC5E  F007         	call	_dec_to_hex	;wreg free
  2183  000AB8  5068               	movf	?_dec_to_hex,w,c
  2184  000ABA  0800               	sublw	0
  2185  000ABC  6E6A               	movwf	??_time_difference& (0+255),c
  2186  000ABE  C09D  F068         	movff	time_difference@hr1,dec_to_hex@num
  2187  000AC2  C09E  F069         	movff	time_difference@hr1+1,dec_to_hex@num+1
  2188  000AC6  EC5E  F007         	call	_dec_to_hex	;wreg free
  2189  000ACA  5068               	movf	?_dec_to_hex,w,c
  2190  000ACC  246A               	addwf	??_time_difference,w,c
  2191  000ACE  0100               	movlb	0	; () banked
  2192  000AD0  6FA9               	movwf	time_difference@d1& (0+255),b
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;main.c: 220: d2 = dec_to_hex(min1) - dec_to_hex(min2);
  2196  000AD2  C0A3  F068         	movff	time_difference@min2,dec_to_hex@num
  2197  000AD6  C0A4  F069         	movff	time_difference@min2+1,dec_to_hex@num+1
  2198  000ADA  EC5E  F007         	call	_dec_to_hex	;wreg free
  2199  000ADE  5068               	movf	?_dec_to_hex,w,c
  2200  000AE0  0800               	sublw	0
  2201  000AE2  6E6A               	movwf	??_time_difference& (0+255),c
  2202  000AE4  C0A1  F068         	movff	time_difference@min1,dec_to_hex@num
  2203  000AE8  C0A2  F069         	movff	time_difference@min1+1,dec_to_hex@num+1
  2204  000AEC  EC5E  F007         	call	_dec_to_hex	;wreg free
  2205  000AF0  5068               	movf	?_dec_to_hex,w,c
  2206  000AF2  246A               	addwf	??_time_difference,w,c
  2207  000AF4  0100               	movlb	0	; () banked
  2208  000AF6  6FAA               	movwf	time_difference@d2& (0+255),b
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;main.c: 221: d3 = dec_to_hex(s1) - dec_to_hex(s2);
  2212  000AF8  C0A7  F068         	movff	time_difference@s2,dec_to_hex@num
  2213  000AFC  C0A8  F069         	movff	time_difference@s2+1,dec_to_hex@num+1
  2214  000B00  EC5E  F007         	call	_dec_to_hex	;wreg free
  2215  000B04  5068               	movf	?_dec_to_hex,w,c
  2216  000B06  0800               	sublw	0
  2217  000B08  6E6A               	movwf	??_time_difference& (0+255),c
  2218  000B0A  C0A5  F068         	movff	time_difference@s1,dec_to_hex@num
  2219  000B0E  C0A6  F069         	movff	time_difference@s1+1,dec_to_hex@num+1
  2220  000B12  EC5E  F007         	call	_dec_to_hex	;wreg free
  2221  000B16  5068               	movf	?_dec_to_hex,w,c
  2222  000B18  246A               	addwf	??_time_difference,w,c
  2223  000B1A  0100               	movlb	0	; () banked
  2224  000B1C  6FAB               	movwf	time_difference@d3& (0+255),b
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;main.c: 222: return 3600*d1 + 60*d2 + d3;
  2228  000B1E  C0A9  F011         	movff	time_difference@d1,___wmul@multiplier
  2229  000B22  6A12               	clrf	___wmul@multiplier+1,c
  2230  000B24  0E0E               	movlw	14
  2231  000B26  6E14               	movwf	___wmul@multiplicand+1,c
  2232  000B28  0E10               	movlw	16
  2233  000B2A  6E13               	movwf	___wmul@multiplicand,c
  2234  000B2C  ECDA  F00E         	call	___wmul	;wreg free
  2235  000B30  0100               	movlb	0	; () banked
  2236  000B32  51AA               	movf	time_difference@d2& (0+255),w,b
  2237  000B34  0D3C               	mullw	60
  2238  000B36  50F3               	movf	prodl,w,c
  2239  000B38  2611               	addwf	?___wmul,f,c
  2240  000B3A  50F4               	movf	prodh,w,c
  2241  000B3C  2212               	addwfc	?___wmul+1,f,c
  2242  000B3E  0100               	movlb	0	; () banked
  2243  000B40  51AB               	movf	time_difference@d3& (0+255),w,b
  2244  000B42  2411               	addwf	?___wmul,w,c
  2245  000B44  0100               	movlb	0	; () banked
  2246  000B46  6F99               	movwf	?_time_difference& (0+255),b
  2247  000B48  0100               	movlb	0	; () banked
  2248  000B4A  0E00               	movlw	0
  2249  000B4C  2012               	addwfc	?___wmul+1,w,c
  2250  000B4E  0100               	movlb	0	; () banked
  2251  000B50  6F9A               	movwf	(?_time_difference+1)& (0+255),b
  2252  000B52  0012               	return	
  2253  000B54                     __end_of_time_difference:
  2254                           	opt stack 0
  2255                           tblptru	equ	0xFF8
  2256                           tblptrh	equ	0xFF7
  2257                           tblptrl	equ	0xFF6
  2258                           tablat	equ	0xFF5
  2259                           prodh	equ	0xFF4
  2260                           prodl	equ	0xFF3
  2261                           intcon	equ	0xFF2
  2262                           intcon2	equ	0xFF1
  2263                           intcon3	equ	0xFF0
  2264                           wreg	equ	0xFE8
  2265                           indf2	equ	0xFDF
  2266                           fsr2h	equ	0xFDA
  2267                           fsr2l	equ	0xFD9
  2268                           status	equ	0xFD8
  2269                           
  2270 ;; *************** function _dec_to_hex *****************
  2271 ;; Defined at:
  2272 ;;		line 199 in file "main.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  num             2  103[COMRAM] int 
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  quotient        2   23[BANK0 ] int 
  2277 ;;  hexnum          2   21[BANK0 ] int 
  2278 ;;  i               2   19[BANK0 ] int 
  2279 ;;  temp            2   17[BANK0 ] int 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  2  103[COMRAM] int 
  2282 ;; Registers used:
  2283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Totals:         2      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;Total ram usage:       16 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; Hardware stack levels required when called:    6
  2296 ;; This function calls:
  2297 ;;		___awdiv
  2298 ;;		___awtoft
  2299 ;;		___ftadd
  2300 ;;		___ftmul
  2301 ;;		___fttol
  2302 ;;		_pow
  2303 ;; This function is called by:
  2304 ;;		_time_difference
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           	psect	text7
  2309  000EBC                     __ptext7:
  2310                           	opt stack 0
  2311  000EBC                     _dec_to_hex:
  2312                           	opt stack 22
  2313                           
  2314                           ;main.c: 200: int i = 0, quotient = num, temp, hexnum = 0;
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;incstack = 0
  2318  000EBC  0E00               	movlw	0
  2319  000EBE  0100               	movlb	0	; () banked
  2320  000EC0  6F94               	movwf	(dec_to_hex@i+1)& (0+255),b
  2321  000EC2  0E00               	movlw	0
  2322  000EC4  6F93               	movwf	dec_to_hex@i& (0+255),b
  2323                           
  2324                           ; BSR set to: 0
  2325  000EC6  C068  F097         	movff	dec_to_hex@num,dec_to_hex@quotient
  2326  000ECA  C069  F098         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  2327  000ECE  0E00               	movlw	0
  2328  000ED0  0100               	movlb	0	; () banked
  2329  000ED2  6F96               	movwf	(dec_to_hex@hexnum+1)& (0+255),b
  2330  000ED4  0E00               	movlw	0
  2331  000ED6  6F95               	movwf	dec_to_hex@hexnum& (0+255),b
  2332                           
  2333                           ;main.c: 202: while (quotient != 0) {
  2334  000ED8  D06C               	goto	l3475
  2335  000EDA                     l3463:
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;main.c: 203: temp = quotient % 16;
  2339  000EDA  0E0F               	movlw	15
  2340  000EDC  0100               	movlb	0	; () banked
  2341  000EDE  1597               	andwf	dec_to_hex@quotient& (0+255),w,b
  2342  000EE0  0100               	movlb	0	; () banked
  2343  000EE2  6F91               	movwf	dec_to_hex@temp& (0+255),b
  2344  000EE4  0100               	movlb	0	; () banked
  2345  000EE6  6B92               	clrf	(dec_to_hex@temp+1)& (0+255),b
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;main.c: 205: hexnum += temp*pow(10,i);
  2349  000EE8  C093  F019         	movff	dec_to_hex@i,___awtoft@c
  2350  000EEC  C094  F01A         	movff	dec_to_hex@i+1,___awtoft@c+1
  2351  000EF0  ECAB  F00E         	call	___awtoft	;wreg free
  2352  000EF4  C019  F08B         	movff	?___awtoft,_dec_to_hex$1101
  2353  000EF8  C01A  F08C         	movff	?___awtoft+1,_dec_to_hex$1101+1
  2354  000EFC  C01B  F08D         	movff	?___awtoft+2,_dec_to_hex$1101+2
  2355                           
  2356                           ;main.c: 205: hexnum += temp*pow(10,i);
  2357  000F00  C08B  F065         	movff	_dec_to_hex$1101,pow@y
  2358  000F04  C08C  F066         	movff	_dec_to_hex$1101+1,pow@y+1
  2359  000F08  C08D  F067         	movff	_dec_to_hex$1101+2,pow@y+2
  2360  000F0C  0E00               	movlw	0
  2361  000F0E  6E62               	movwf	pow@x,c
  2362  000F10  0E20               	movlw	32
  2363  000F12  6E63               	movwf	pow@x+1,c
  2364  000F14  0E41               	movlw	65
  2365  000F16  6E64               	movwf	pow@x+2,c
  2366  000F18  ECA7  F003         	call	_pow	;wreg free
  2367  000F1C  C062  F08E         	movff	?_pow,_dec_to_hex$1102
  2368  000F20  C063  F08F         	movff	?_pow+1,_dec_to_hex$1102+1
  2369  000F24  C064  F090         	movff	?_pow+2,_dec_to_hex$1102+2
  2370                           
  2371                           ;main.c: 205: hexnum += temp*pow(10,i);
  2372  000F28  C08E  F020         	movff	_dec_to_hex$1102,___ftmul@f2
  2373  000F2C  C08F  F021         	movff	_dec_to_hex$1102+1,___ftmul@f2+1
  2374  000F30  C090  F022         	movff	_dec_to_hex$1102+2,___ftmul@f2+2
  2375  000F34  C091  F019         	movff	dec_to_hex@temp,___awtoft@c
  2376  000F38  C092  F01A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  2377  000F3C  ECAB  F00E         	call	___awtoft	;wreg free
  2378  000F40  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2379  000F44  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2380  000F48  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2381  000F4C  ECDC  F008         	call	___ftmul	;wreg free
  2382  000F50  C01D  F02F         	movff	?___ftmul,___ftadd@f2
  2383  000F54  C01E  F030         	movff	?___ftmul+1,___ftadd@f2+1
  2384  000F58  C01F  F031         	movff	?___ftmul+2,___ftadd@f2+2
  2385  000F5C  C095  F019         	movff	dec_to_hex@hexnum,___awtoft@c
  2386  000F60  C096  F01A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  2387  000F64  ECAB  F00E         	call	___awtoft	;wreg free
  2388  000F68  C019  F02C         	movff	?___awtoft,___ftadd@f1
  2389  000F6C  C01A  F02D         	movff	?___awtoft+1,___ftadd@f1+1
  2390  000F70  C01B  F02E         	movff	?___awtoft+2,___ftadd@f1+2
  2391  000F74  ECD1  F002         	call	___ftadd	;wreg free
  2392  000F78  C02C  F038         	movff	?___ftadd,___fttol@f1
  2393  000F7C  C02D  F039         	movff	?___ftadd+1,___fttol@f1+1
  2394  000F80  C02E  F03A         	movff	?___ftadd+2,___fttol@f1+2
  2395  000F84  EC62  F008         	call	___fttol	;wreg free
  2396  000F88  C038  F095         	movff	?___fttol,dec_to_hex@hexnum
  2397  000F8C  C039  F096         	movff	?___fttol+1,dec_to_hex@hexnum+1
  2398                           
  2399                           ;main.c: 207: quotient = quotient / 16;
  2400  000F90  C097  F011         	movff	dec_to_hex@quotient,___awdiv@dividend
  2401  000F94  C098  F012         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  2402  000F98  0E00               	movlw	0
  2403  000F9A  6E14               	movwf	___awdiv@divisor+1,c
  2404  000F9C  0E10               	movlw	16
  2405  000F9E  6E13               	movwf	___awdiv@divisor,c
  2406  000FA0  EC3D  F00C         	call	___awdiv	;wreg free
  2407  000FA4  C011  F097         	movff	?___awdiv,dec_to_hex@quotient
  2408  000FA8  C012  F098         	movff	?___awdiv+1,dec_to_hex@quotient+1
  2409                           
  2410                           ;main.c: 208: i += 1;
  2411  000FAC  0100               	movlb	0	; () banked
  2412  000FAE  4B93               	infsnz	dec_to_hex@i& (0+255),f,b
  2413  000FB0  2B94               	incf	(dec_to_hex@i+1)& (0+255),f,b
  2414  000FB2                     l3475:
  2415                           
  2416                           ; BSR set to: 0
  2417  000FB2  0100               	movlb	0	; () banked
  2418  000FB4  5197               	movf	dec_to_hex@quotient& (0+255),w,b
  2419  000FB6  0100               	movlb	0	; () banked
  2420  000FB8  1198               	iorwf	(dec_to_hex@quotient+1)& (0+255),w,b
  2421  000FBA  A4D8               	btfss	status,2,c
  2422  000FBC  D78E               	goto	l3463
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;main.c: 209: }
  2426                           ;main.c: 210: return hexnum;
  2427  000FBE  C095  F068         	movff	dec_to_hex@hexnum,?_dec_to_hex
  2428  000FC2  C096  F069         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  2429                           
  2430                           ; BSR set to: 0
  2431  000FC6  0012               	return		;funcret
  2432  000FC8                     __end_of_dec_to_hex:
  2433                           	opt stack 0
  2434                           tblptru	equ	0xFF8
  2435                           tblptrh	equ	0xFF7
  2436                           tblptrl	equ	0xFF6
  2437                           tablat	equ	0xFF5
  2438                           prodh	equ	0xFF4
  2439                           prodl	equ	0xFF3
  2440                           intcon	equ	0xFF2
  2441                           intcon2	equ	0xFF1
  2442                           intcon3	equ	0xFF0
  2443                           wreg	equ	0xFE8
  2444                           indf2	equ	0xFDF
  2445                           fsr2h	equ	0xFDA
  2446                           fsr2l	equ	0xFD9
  2447                           status	equ	0xFD8
  2448                           
  2449 ;; *************** function _pow *****************
  2450 ;; Defined at:
  2451 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  x               3   97[COMRAM] int 
  2454 ;;  y               3  100[COMRAM] int 
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;  yi              4    7[BANK0 ] unsigned long 
  2457 ;;  sign            1    6[BANK0 ] unsigned char 
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  3   97[COMRAM] unsigned char 
  2460 ;; Registers used:
  2461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2467 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2468 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2470 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;Total ram usage:       17 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    5
  2474 ;; This function calls:
  2475 ;;		___ftge
  2476 ;;		___ftmul
  2477 ;;		___ftneg
  2478 ;;		___fttol
  2479 ;;		___lltoft
  2480 ;;		_exp
  2481 ;;		_log
  2482 ;; This function is called by:
  2483 ;;		_dec_to_hex
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text8
  2488  00074E                     __ptext8:
  2489                           	opt stack 0
  2490  00074E                     _pow:
  2491                           	opt stack 22
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;incstack = 0
  2495  00074E  0E00               	movlw	0
  2496  000750  0100               	movlb	0	; () banked
  2497  000752  6F86               	movwf	pow@sign& (0+255),b
  2498                           
  2499                           ; BSR set to: 0
  2500  000754  5062               	movf	pow@x,w,c
  2501  000756  1063               	iorwf	pow@x+1,w,c
  2502  000758  1064               	iorwf	pow@x+2,w,c
  2503  00075A  A4D8               	btfss	status,2,c
  2504  00075C  D01B               	goto	l3377
  2505                           
  2506                           ; BSR set to: 0
  2507  00075E  0E00               	movlw	0
  2508  000760  6E11               	movwf	___ftge@ff1,c
  2509  000762  0E00               	movlw	0
  2510  000764  6E12               	movwf	___ftge@ff1+1,c
  2511  000766  0E00               	movlw	0
  2512  000768  6E13               	movwf	___ftge@ff1+2,c
  2513  00076A  C065  F014         	movff	pow@y,___ftge@ff2
  2514  00076E  C066  F015         	movff	pow@y+1,___ftge@ff2+1
  2515  000772  C067  F016         	movff	pow@y+2,___ftge@ff2+2
  2516  000776  ECF5  F00B         	call	___ftge	;wreg free
  2517  00077A  A0D8               	btfss	status,0,c
  2518  00077C  D004               	goto	l753
  2519  00077E  0E00               	movlw	0
  2520  000780  6E6E               	movwf	_errno+1,c
  2521  000782  0E21               	movlw	33
  2522  000784  6E6D               	movwf	_errno,c
  2523  000786                     l753:
  2524  000786  0E00               	movlw	0
  2525  000788  6E62               	movwf	?_pow,c
  2526  00078A  0E00               	movlw	0
  2527  00078C  6E63               	movwf	?_pow+1,c
  2528  00078E  0E00               	movlw	0
  2529  000790  6E64               	movwf	?_pow+2,c
  2530  000792  0012               	return	
  2531  000794                     l3377:
  2532  000794  5065               	movf	pow@y,w,c
  2533  000796  1066               	iorwf	pow@y+1,w,c
  2534  000798  1067               	iorwf	pow@y+2,w,c
  2535  00079A  A4D8               	btfss	status,2,c
  2536  00079C  D007               	goto	l3383
  2537  00079E  0E00               	movlw	0
  2538  0007A0  6E62               	movwf	?_pow,c
  2539  0007A2  0E80               	movlw	128
  2540  0007A4  6E63               	movwf	?_pow+1,c
  2541  0007A6  0E3F               	movlw	63
  2542  0007A8  6E64               	movwf	?_pow+2,c
  2543  0007AA  0012               	return	
  2544  0007AC                     l3383:
  2545  0007AC  AE64               	btfss	pow@x+2,7,c
  2546  0007AE  D042               	goto	l3395
  2547  0007B0  C065  F038         	movff	pow@y,___fttol@f1
  2548  0007B4  C066  F039         	movff	pow@y+1,___fttol@f1+1
  2549  0007B8  C067  F03A         	movff	pow@y+2,___fttol@f1+2
  2550  0007BC  EC62  F008         	call	___fttol	;wreg free
  2551  0007C0  C038  F087         	movff	?___fttol,pow@yi
  2552  0007C4  C039  F088         	movff	?___fttol+1,pow@yi+1
  2553  0007C8  C03A  F089         	movff	?___fttol+2,pow@yi+2
  2554  0007CC  C03B  F08A         	movff	?___fttol+3,pow@yi+3
  2555  0007D0  C087  F019         	movff	pow@yi,___lltoft@c
  2556  0007D4  C088  F01A         	movff	pow@yi+1,___lltoft@c+1
  2557  0007D8  C089  F01B         	movff	pow@yi+2,___lltoft@c+2
  2558  0007DC  C08A  F01C         	movff	pow@yi+3,___lltoft@c+3
  2559  0007E0  EC35  F00D         	call	___lltoft	;wreg free
  2560  0007E4  5065               	movf	pow@y,w,c
  2561  0007E6  1819               	xorwf	?___lltoft,w,c
  2562  0007E8  E107               	bnz	u3050
  2563  0007EA  5066               	movf	pow@y+1,w,c
  2564  0007EC  181A               	xorwf	?___lltoft+1,w,c
  2565  0007EE  E104               	bnz	u3050
  2566  0007F0  5067               	movf	pow@y+2,w,c
  2567  0007F2  181B               	xorwf	?___lltoft+2,w,c
  2568  0007F4  B4D8               	btfsc	status,2,c
  2569  0007F6  D00B               	goto	l3391
  2570  0007F8                     u3050:
  2571  0007F8  0E00               	movlw	0
  2572  0007FA  6E6E               	movwf	_errno+1,c
  2573  0007FC  0E21               	movlw	33
  2574  0007FE  6E6D               	movwf	_errno,c
  2575  000800  0E00               	movlw	0
  2576  000802  6E62               	movwf	?_pow,c
  2577  000804  0E00               	movlw	0
  2578  000806  6E63               	movwf	?_pow+1,c
  2579  000808  0E00               	movlw	0
  2580  00080A  6E64               	movwf	?_pow+2,c
  2581  00080C  0012               	return	
  2582  00080E                     l3391:
  2583  00080E  0100               	movlb	0	; () banked
  2584  000810  5187               	movf	pow@yi& (0+255),w,b
  2585  000812  0B01               	andlw	1
  2586  000814  0100               	movlb	0	; () banked
  2587  000816  6F86               	movwf	pow@sign& (0+255),b
  2588                           
  2589                           ; BSR set to: 0
  2590  000818  C062  F011         	movff	pow@x,___ftneg@f1
  2591  00081C  C063  F012         	movff	pow@x+1,___ftneg@f1+1
  2592  000820  C064  F013         	movff	pow@x+2,___ftneg@f1+2
  2593  000824  ECED  F00E         	call	___ftneg	;wreg free
  2594  000828  C011  F062         	movff	?___ftneg,pow@x
  2595  00082C  C012  F063         	movff	?___ftneg+1,pow@x+1
  2596  000830  C013  F064         	movff	?___ftneg+2,pow@x+2
  2597  000834                     l3395:
  2598  000834  C062  F044         	movff	pow@x,log@x
  2599  000838  C063  F045         	movff	pow@x+1,log@x+1
  2600  00083C  C064  F046         	movff	pow@x+2,log@x+2
  2601  000840  ECD1  F006         	call	_log	;wreg free
  2602  000844  C044  F080         	movff	?_log,_pow$1103
  2603  000848  C045  F081         	movff	?_log+1,_pow$1103+1
  2604  00084C  C046  F082         	movff	?_log+2,_pow$1103+2
  2605  000850  C080  F01D         	movff	_pow$1103,___ftmul@f1
  2606  000854  C081  F01E         	movff	_pow$1103+1,___ftmul@f1+1
  2607  000858  C082  F01F         	movff	_pow$1103+2,___ftmul@f1+2
  2608  00085C  C065  F020         	movff	pow@y,___ftmul@f2
  2609  000860  C066  F021         	movff	pow@y+1,___ftmul@f2+1
  2610  000864  C067  F022         	movff	pow@y+2,___ftmul@f2+2
  2611  000868  ECDC  F008         	call	___ftmul	;wreg free
  2612  00086C  C01D  F083         	movff	?___ftmul,_pow$1104
  2613  000870  C01E  F084         	movff	?___ftmul+1,_pow$1104+1
  2614  000874  C01F  F085         	movff	?___ftmul+2,_pow$1104+2
  2615  000878  C083  F059         	movff	_pow$1104,exp@x
  2616  00087C  C084  F05A         	movff	_pow$1104+1,exp@x+1
  2617  000880  C085  F05B         	movff	_pow$1104+2,exp@x+2
  2618  000884  ECDF  F001         	call	_exp	;wreg free
  2619  000888  C059  F062         	movff	?_exp,pow@x
  2620  00088C  C05A  F063         	movff	?_exp+1,pow@x+1
  2621  000890  C05B  F064         	movff	?_exp+2,pow@x+2
  2622  000894  0100               	movlb	0	; () banked
  2623  000896  5186               	movf	pow@sign& (0+255),w,b
  2624  000898  0100               	movlb	0	; () banked
  2625  00089A  B4D8               	btfsc	status,2,c
  2626  00089C  D00F               	goto	l758
  2627                           
  2628                           ; BSR set to: 0
  2629  00089E  C062  F011         	movff	pow@x,___ftneg@f1
  2630  0008A2  C063  F012         	movff	pow@x+1,___ftneg@f1+1
  2631  0008A6  C064  F013         	movff	pow@x+2,___ftneg@f1+2
  2632  0008AA  ECED  F00E         	call	___ftneg	;wreg free
  2633  0008AE  C011  F062         	movff	?___ftneg,?_pow
  2634  0008B2  C012  F063         	movff	?___ftneg+1,?_pow+1
  2635  0008B6  C013  F064         	movff	?___ftneg+2,?_pow+2
  2636  0008BA  0012               	return	
  2637  0008BC                     l758:
  2638                           
  2639                           ; BSR set to: 0
  2640  0008BC  C062  F062         	movff	pow@x,?_pow
  2641  0008C0  C063  F063         	movff	pow@x+1,?_pow+1
  2642  0008C4  C064  F064         	movff	pow@x+2,?_pow+2
  2643  0008C8  0012               	return		;funcret
  2644  0008CA                     __end_of_pow:
  2645                           	opt stack 0
  2646                           tblptru	equ	0xFF8
  2647                           tblptrh	equ	0xFF7
  2648                           tblptrl	equ	0xFF6
  2649                           tablat	equ	0xFF5
  2650                           prodh	equ	0xFF4
  2651                           prodl	equ	0xFF3
  2652                           intcon	equ	0xFF2
  2653                           intcon2	equ	0xFF1
  2654                           intcon3	equ	0xFF0
  2655                           wreg	equ	0xFE8
  2656                           indf2	equ	0xFDF
  2657                           fsr2h	equ	0xFDA
  2658                           fsr2l	equ	0xFD9
  2659                           status	equ	0xFD8
  2660                           
  2661 ;; *************** function _log *****************
  2662 ;; Defined at:
  2663 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;  x               3   67[COMRAM] unsigned char 
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;  exponent        2   70[COMRAM] int 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  3   67[COMRAM] int 
  2670 ;; Registers used:
  2671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2677 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2678 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;Total ram usage:        5 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    4
  2684 ;; This function calls:
  2685 ;;		___awtoft
  2686 ;;		___ftadd
  2687 ;;		___ftmul
  2688 ;;		_eval_poly
  2689 ;;		_frexp
  2690 ;; This function is called by:
  2691 ;;		_pow
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text9
  2696  000DA2                     __ptext9:
  2697                           	opt stack 0
  2698  000DA2                     _log:
  2699                           	opt stack 22
  2700                           
  2701                           ;incstack = 0
  2702  000DA2  AE46               	btfss	log@x+2,7,c
  2703  000DA4  D00B               	goto	l3307
  2704  000DA6  0E00               	movlw	0
  2705  000DA8  6E6E               	movwf	_errno+1,c
  2706  000DAA  0E21               	movlw	33
  2707  000DAC  6E6D               	movwf	_errno,c
  2708  000DAE  0E00               	movlw	0
  2709  000DB0  6E44               	movwf	?_log,c
  2710  000DB2  0E00               	movlw	0
  2711  000DB4  6E45               	movwf	?_log+1,c
  2712  000DB6  0E00               	movlw	0
  2713  000DB8  6E46               	movwf	?_log+2,c
  2714  000DBA  0012               	return	
  2715  000DBC                     l3307:
  2716  000DBC  5044               	movf	log@x,w,c
  2717  000DBE  1045               	iorwf	log@x+1,w,c
  2718  000DC0  1046               	iorwf	log@x+2,w,c
  2719  000DC2  A4D8               	btfss	status,2,c
  2720  000DC4  D00B               	goto	l3313
  2721  000DC6  0E00               	movlw	0
  2722  000DC8  6E6E               	movwf	_errno+1,c
  2723  000DCA  0E22               	movlw	34
  2724  000DCC  6E6D               	movwf	_errno,c
  2725  000DCE  0E00               	movlw	0
  2726  000DD0  6E44               	movwf	?_log,c
  2727  000DD2  0E00               	movlw	0
  2728  000DD4  6E45               	movwf	?_log+1,c
  2729  000DD6  0E00               	movlw	0
  2730  000DD8  6E46               	movwf	?_log+2,c
  2731  000DDA  0012               	return	
  2732  000DDC                     l3313:
  2733  000DDC  0E00               	movlw	0
  2734  000DDE  6E20               	movwf	___ftmul@f2,c
  2735  000DE0  0E00               	movlw	0
  2736  000DE2  6E21               	movwf	___ftmul@f2+1,c
  2737  000DE4  0E40               	movlw	64
  2738  000DE6  6E22               	movwf	___ftmul@f2+2,c
  2739  000DE8  0E47               	movlw	low log@exponent
  2740  000DEA  6E14               	movwf	frexp@eptr,c
  2741  000DEC  0E00               	movlw	high log@exponent
  2742  000DEE  6E15               	movwf	frexp@eptr+1,c
  2743  000DF0  C044  F011         	movff	log@x,frexp@value
  2744  000DF4  C045  F012         	movff	log@x+1,frexp@value+1
  2745  000DF8  C046  F013         	movff	log@x+2,frexp@value+2
  2746  000DFC  ECAD  F00B         	call	_frexp	;wreg free
  2747  000E00  C011  F01D         	movff	?_frexp,___ftmul@f1
  2748  000E04  C012  F01E         	movff	?_frexp+1,___ftmul@f1+1
  2749  000E08  C013  F01F         	movff	?_frexp+2,___ftmul@f1+2
  2750  000E0C  ECDC  F008         	call	___ftmul	;wreg free
  2751  000E10  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  2752  000E14  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  2753  000E18  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  2754  000E1C  0E00               	movlw	0
  2755  000E1E  6E2F               	movwf	___ftadd@f2,c
  2756  000E20  0E80               	movlw	128
  2757  000E22  6E30               	movwf	___ftadd@f2+1,c
  2758  000E24  0EBF               	movlw	191
  2759  000E26  6E31               	movwf	___ftadd@f2+2,c
  2760  000E28  ECD1  F002         	call	___ftadd	;wreg free
  2761  000E2C  C02C  F044         	movff	?___ftadd,log@x
  2762  000E30  C02D  F045         	movff	?___ftadd+1,log@x+1
  2763  000E34  C02E  F046         	movff	?___ftadd+2,log@x+2
  2764  000E38  0647               	decf	log@exponent,f,c
  2765  000E3A  A0D8               	btfss	status,0,c
  2766  000E3C  0648               	decf	log@exponent+1,f,c
  2767  000E3E  C044  F038         	movff	log@x,eval_poly@x
  2768  000E42  C045  F039         	movff	log@x+1,eval_poly@x+1
  2769  000E46  C046  F03A         	movff	log@x+2,eval_poly@x+2
  2770  000E4A  0EB9               	movlw	low log@coeff
  2771  000E4C  6E3B               	movwf	eval_poly@d,c
  2772  000E4E  0EFE               	movlw	high log@coeff
  2773  000E50  6E3C               	movwf	eval_poly@d+1,c
  2774  000E52  0E00               	movlw	0
  2775  000E54  6E3E               	movwf	eval_poly@n+1,c
  2776  000E56  0E08               	movlw	8
  2777  000E58  6E3D               	movwf	eval_poly@n,c
  2778  000E5A  EC38  F00A         	call	_eval_poly	;wreg free
  2779  000E5E  C038  F044         	movff	?_eval_poly,log@x
  2780  000E62  C039  F045         	movff	?_eval_poly+1,log@x+1
  2781  000E66  C03A  F046         	movff	?_eval_poly+2,log@x+2
  2782  000E6A  0E72               	movlw	114
  2783  000E6C  6E20               	movwf	___ftmul@f2,c
  2784  000E6E  0E31               	movlw	49
  2785  000E70  6E21               	movwf	___ftmul@f2+1,c
  2786  000E72  0E3F               	movlw	63
  2787  000E74  6E22               	movwf	___ftmul@f2+2,c
  2788  000E76  C047  F019         	movff	log@exponent,___awtoft@c
  2789  000E7A  C048  F01A         	movff	log@exponent+1,___awtoft@c+1
  2790  000E7E  ECAB  F00E         	call	___awtoft	;wreg free
  2791  000E82  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2792  000E86  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2793  000E8A  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2794  000E8E  ECDC  F008         	call	___ftmul	;wreg free
  2795  000E92  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  2796  000E96  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  2797  000E9A  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  2798  000E9E  C044  F02F         	movff	log@x,___ftadd@f2
  2799  000EA2  C045  F030         	movff	log@x+1,___ftadd@f2+1
  2800  000EA6  C046  F031         	movff	log@x+2,___ftadd@f2+2
  2801  000EAA  ECD1  F002         	call	___ftadd	;wreg free
  2802  000EAE  C02C  F044         	movff	?___ftadd,?_log
  2803  000EB2  C02D  F045         	movff	?___ftadd+1,?_log+1
  2804  000EB6  C02E  F046         	movff	?___ftadd+2,?_log+2
  2805  000EBA  0012               	return	
  2806  000EBC                     __end_of_log:
  2807                           	opt stack 0
  2808                           tblptru	equ	0xFF8
  2809                           tblptrh	equ	0xFF7
  2810                           tblptrl	equ	0xFF6
  2811                           tablat	equ	0xFF5
  2812                           prodh	equ	0xFF4
  2813                           prodl	equ	0xFF3
  2814                           intcon	equ	0xFF2
  2815                           intcon2	equ	0xFF1
  2816                           intcon3	equ	0xFF0
  2817                           wreg	equ	0xFE8
  2818                           indf2	equ	0xFDF
  2819                           fsr2h	equ	0xFDA
  2820                           fsr2l	equ	0xFD9
  2821                           status	equ	0xFD8
  2822                           
  2823 ;; *************** function _exp *****************
  2824 ;; Defined at:
  2825 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  x               3   88[COMRAM] int 
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;  exponent        2   94[COMRAM] int 
  2830 ;;  sign            1   96[COMRAM] unsigned char 
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  3   88[COMRAM] unsigned char 
  2833 ;; Registers used:
  2834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2840 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;Total ram usage:        9 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; Hardware stack levels required when called:    4
  2847 ;; This function calls:
  2848 ;;		___awtoft
  2849 ;;		___ftdiv
  2850 ;;		___ftge
  2851 ;;		___ftmul
  2852 ;;		___ftneg
  2853 ;;		___ftsub
  2854 ;;		___fttol
  2855 ;;		_eval_poly
  2856 ;;		_floor
  2857 ;;		_ldexp
  2858 ;; This function is called by:
  2859 ;;		_pow
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           	psect	text10
  2864  0003BE                     __ptext10:
  2865                           	opt stack 0
  2866  0003BE                     _exp:
  2867                           	opt stack 22
  2868                           
  2869                           ;incstack = 0
  2870  0003BE  5059               	movf	exp@x,w,c
  2871  0003C0  105A               	iorwf	exp@x+1,w,c
  2872  0003C2  105B               	iorwf	exp@x+2,w,c
  2873  0003C4  A4D8               	btfss	status,2,c
  2874  0003C6  D007               	goto	l3329
  2875  0003C8  0E00               	movlw	0
  2876  0003CA  6E59               	movwf	?_exp,c
  2877  0003CC  0E80               	movlw	128
  2878  0003CE  6E5A               	movwf	?_exp+1,c
  2879  0003D0  0E3F               	movlw	63
  2880  0003D2  6E5B               	movwf	?_exp+2,c
  2881  0003D4  0012               	return	
  2882  0003D6                     l3329:
  2883  0003D6  0E72               	movlw	114
  2884  0003D8  6E11               	movwf	___ftge@ff1,c
  2885  0003DA  0E31               	movlw	49
  2886  0003DC  6E12               	movwf	___ftge@ff1+1,c
  2887  0003DE  0E44               	movlw	68
  2888  0003E0  6E13               	movwf	___ftge@ff1+2,c
  2889  0003E2  C059  F014         	movff	exp@x,___ftge@ff2
  2890  0003E6  C05A  F015         	movff	exp@x+1,___ftge@ff2+1
  2891  0003EA  C05B  F016         	movff	exp@x+2,___ftge@ff2+2
  2892  0003EE  ECF5  F00B         	call	___ftge	;wreg free
  2893  0003F2  B0D8               	btfsc	status,0,c
  2894  0003F4  D00B               	goto	l3335
  2895  0003F6  0E00               	movlw	0
  2896  0003F8  6E6E               	movwf	_errno+1,c
  2897  0003FA  0E22               	movlw	34
  2898  0003FC  6E6D               	movwf	_errno,c
  2899  0003FE  0EFF               	movlw	255
  2900  000400  6E59               	movwf	?_exp,c
  2901  000402  0E7F               	movlw	127
  2902  000404  6E5A               	movwf	?_exp+1,c
  2903  000406  0E7F               	movlw	127
  2904  000408  6E5B               	movwf	?_exp+2,c
  2905  00040A  0012               	return	
  2906  00040C                     l3335:
  2907  00040C  C059  F011         	movff	exp@x,___ftge@ff1
  2908  000410  C05A  F012         	movff	exp@x+1,___ftge@ff1+1
  2909  000414  C05B  F013         	movff	exp@x+2,___ftge@ff1+2
  2910  000418  0E49               	movlw	73
  2911  00041A  6E14               	movwf	___ftge@ff2,c
  2912  00041C  0E3A               	movlw	58
  2913  00041E  6E15               	movwf	___ftge@ff2+1,c
  2914  000420  0EC4               	movlw	196
  2915  000422  6E16               	movwf	___ftge@ff2+2,c
  2916  000424  ECF5  F00B         	call	___ftge	;wreg free
  2917  000428  B0D8               	btfsc	status,0,c
  2918  00042A  D00B               	goto	l3341
  2919  00042C  0E00               	movlw	0
  2920  00042E  6E6E               	movwf	_errno+1,c
  2921  000430  0E22               	movlw	34
  2922  000432  6E6D               	movwf	_errno,c
  2923  000434  0E00               	movlw	0
  2924  000436  6E59               	movwf	?_exp,c
  2925  000438  0E00               	movlw	0
  2926  00043A  6E5A               	movwf	?_exp+1,c
  2927  00043C  0E00               	movlw	0
  2928  00043E  6E5B               	movwf	?_exp+2,c
  2929  000440  0012               	return	
  2930  000442                     l3341:
  2931  000442  AE5B               	btfss	exp@x+2,7,c
  2932  000444  D002               	goto	u2960
  2933  000446  0E01               	movlw	1
  2934  000448  D001               	goto	u2970
  2935  00044A                     u2960:
  2936  00044A  0E00               	movlw	0
  2937  00044C                     u2970:
  2938  00044C  6E61               	movwf	exp@sign,c
  2939  00044E  5061               	movf	exp@sign,w,c
  2940  000450  B4D8               	btfsc	status,2,c
  2941  000452  D00E               	goto	l916
  2942  000454  C059  F011         	movff	exp@x,___ftneg@f1
  2943  000458  C05A  F012         	movff	exp@x+1,___ftneg@f1+1
  2944  00045C  C05B  F013         	movff	exp@x+2,___ftneg@f1+2
  2945  000460  ECED  F00E         	call	___ftneg	;wreg free
  2946  000464  C011  F059         	movff	?___ftneg,exp@x
  2947  000468  C012  F05A         	movff	?___ftneg+1,exp@x+1
  2948  00046C  C013  F05B         	movff	?___ftneg+2,exp@x+2
  2949  000470                     l916:
  2950  000470  C059  F01D         	movff	exp@x,___ftmul@f1
  2951  000474  C05A  F01E         	movff	exp@x+1,___ftmul@f1+1
  2952  000478  C05B  F01F         	movff	exp@x+2,___ftmul@f1+2
  2953  00047C  0EAA               	movlw	170
  2954  00047E  6E20               	movwf	___ftmul@f2,c
  2955  000480  0EB8               	movlw	184
  2956  000482  6E21               	movwf	___ftmul@f2+1,c
  2957  000484  0E3F               	movlw	63
  2958  000486  6E22               	movwf	___ftmul@f2+2,c
  2959  000488  ECDC  F008         	call	___ftmul	;wreg free
  2960  00048C  C01D  F059         	movff	?___ftmul,exp@x
  2961  000490  C01E  F05A         	movff	?___ftmul+1,exp@x+1
  2962  000494  C01F  F05B         	movff	?___ftmul+2,exp@x+2
  2963  000498  C059  F051         	movff	exp@x,floor@x
  2964  00049C  C05A  F052         	movff	exp@x+1,floor@x+1
  2965  0004A0  C05B  F053         	movff	exp@x+2,floor@x+2
  2966  0004A4  ECC9  F009         	call	_floor	;wreg free
  2967  0004A8  C051  F05C         	movff	?_floor,_exp$1105
  2968  0004AC  C052  F05D         	movff	?_floor+1,_exp$1105+1
  2969  0004B0  C053  F05E         	movff	?_floor+2,_exp$1105+2
  2970  0004B4  C05C  F038         	movff	_exp$1105,___fttol@f1
  2971  0004B8  C05D  F039         	movff	_exp$1105+1,___fttol@f1+1
  2972  0004BC  C05E  F03A         	movff	_exp$1105+2,___fttol@f1+2
  2973  0004C0  EC62  F008         	call	___fttol	;wreg free
  2974  0004C4  C038  F05F         	movff	?___fttol,exp@exponent
  2975  0004C8  C039  F060         	movff	?___fttol+1,exp@exponent+1
  2976  0004CC  C059  F038         	movff	exp@x,___ftsub@f1
  2977  0004D0  C05A  F039         	movff	exp@x+1,___ftsub@f1+1
  2978  0004D4  C05B  F03A         	movff	exp@x+2,___ftsub@f1+2
  2979  0004D8  C05F  F019         	movff	exp@exponent,___awtoft@c
  2980  0004DC  C060  F01A         	movff	exp@exponent+1,___awtoft@c+1
  2981  0004E0  ECAB  F00E         	call	___awtoft	;wreg free
  2982  0004E4  C019  F03B         	movff	?___awtoft,___ftsub@f2
  2983  0004E8  C01A  F03C         	movff	?___awtoft+1,___ftsub@f2+1
  2984  0004EC  C01B  F03D         	movff	?___awtoft+2,___ftsub@f2+2
  2985  0004F0  EC8B  F00E         	call	___ftsub	;wreg free
  2986  0004F4  C038  F059         	movff	?___ftsub,exp@x
  2987  0004F8  C039  F05A         	movff	?___ftsub+1,exp@x+1
  2988  0004FC  C03A  F05B         	movff	?___ftsub+2,exp@x+2
  2989  000500  C059  F038         	movff	exp@x,eval_poly@x
  2990  000504  C05A  F039         	movff	exp@x+1,eval_poly@x+1
  2991  000508  C05B  F03A         	movff	exp@x+2,eval_poly@x+2
  2992  00050C  0E9B               	movlw	low exp@coeff
  2993  00050E  6E3B               	movwf	eval_poly@d,c
  2994  000510  0EFE               	movlw	high exp@coeff
  2995  000512  6E3C               	movwf	eval_poly@d+1,c
  2996  000514  0E00               	movlw	0
  2997  000516  6E3E               	movwf	eval_poly@n+1,c
  2998  000518  0E09               	movlw	9
  2999  00051A  6E3D               	movwf	eval_poly@n,c
  3000  00051C  EC38  F00A         	call	_eval_poly	;wreg free
  3001  000520  C038  F044         	movff	?_eval_poly,ldexp@value
  3002  000524  C039  F045         	movff	?_eval_poly+1,ldexp@value+1
  3003  000528  C03A  F046         	movff	?_eval_poly+2,ldexp@value+2
  3004  00052C  C05F  F047         	movff	exp@exponent,ldexp@newexp
  3005  000530  C060  F048         	movff	exp@exponent+1,ldexp@newexp+1
  3006  000534  ECA1  F00A         	call	_ldexp	;wreg free
  3007  000538  C044  F059         	movff	?_ldexp,exp@x
  3008  00053C  C045  F05A         	movff	?_ldexp+1,exp@x+1
  3009  000540  C046  F05B         	movff	?_ldexp+2,exp@x+2
  3010  000544  5061               	movf	exp@sign,w,c
  3011  000546  B4D8               	btfsc	status,2,c
  3012  000548  D025               	goto	l917
  3013  00054A  2859               	incf	exp@x,w,c
  3014  00054C  E10E               	bnz	l3363
  3015  00054E  0E7F               	movlw	127
  3016  000550  185A               	xorwf	exp@x+1,w,c
  3017  000552  E10B               	bnz	l3363
  3018  000554  0E7F               	movlw	127
  3019  000556  185B               	xorwf	exp@x+2,w,c
  3020  000558  A4D8               	btfss	status,2,c
  3021  00055A  D007               	goto	l3363
  3022  00055C  0E00               	movlw	0
  3023  00055E  6E59               	movwf	?_exp,c
  3024  000560  0E00               	movlw	0
  3025  000562  6E5A               	movwf	?_exp+1,c
  3026  000564  0E00               	movlw	0
  3027  000566  6E5B               	movwf	?_exp+2,c
  3028  000568  0012               	return	
  3029  00056A                     l3363:
  3030  00056A  0E00               	movlw	0
  3031  00056C  6E19               	movwf	___ftdiv@f1,c
  3032  00056E  0E80               	movlw	128
  3033  000570  6E1A               	movwf	___ftdiv@f1+1,c
  3034  000572  0E3F               	movlw	63
  3035  000574  6E1B               	movwf	___ftdiv@f1+2,c
  3036  000576  C059  F01C         	movff	exp@x,___ftdiv@f2
  3037  00057A  C05A  F01D         	movff	exp@x+1,___ftdiv@f2+1
  3038  00057E  C05B  F01E         	movff	exp@x+2,___ftdiv@f2+2
  3039  000582  EC56  F009         	call	___ftdiv	;wreg free
  3040  000586  C019  F059         	movff	?___ftdiv,?_exp
  3041  00058A  C01A  F05A         	movff	?___ftdiv+1,?_exp+1
  3042  00058E  C01B  F05B         	movff	?___ftdiv+2,?_exp+2
  3043  000592  0012               	return	
  3044  000594                     l917:
  3045  000594  C059  F059         	movff	exp@x,?_exp
  3046  000598  C05A  F05A         	movff	exp@x+1,?_exp+1
  3047  00059C  C05B  F05B         	movff	exp@x+2,?_exp+2
  3048  0005A0  0012               	return		;funcret
  3049  0005A2                     __end_of_exp:
  3050                           	opt stack 0
  3051                           tblptru	equ	0xFF8
  3052                           tblptrh	equ	0xFF7
  3053                           tblptrl	equ	0xFF6
  3054                           tablat	equ	0xFF5
  3055                           prodh	equ	0xFF4
  3056                           prodl	equ	0xFF3
  3057                           intcon	equ	0xFF2
  3058                           intcon2	equ	0xFF1
  3059                           intcon3	equ	0xFF0
  3060                           wreg	equ	0xFE8
  3061                           indf2	equ	0xFDF
  3062                           fsr2h	equ	0xFDA
  3063                           fsr2l	equ	0xFD9
  3064                           status	equ	0xFD8
  3065                           
  3066 ;; *************** function _ldexp *****************
  3067 ;; Defined at:
  3068 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  value           3   67[COMRAM] unsigned char 
  3071 ;;  newexp          2   70[COMRAM] int 
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;		None
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  3   67[COMRAM] int 
  3076 ;; Registers used:
  3077 ;;		wreg, status,2, status,0
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3083 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;Total ram usage:        7 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    1
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		_exp
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           	psect	text11
  3098  001542                     __ptext11:
  3099                           	opt stack 0
  3100  001542                     _ldexp:
  3101                           	opt stack 24
  3102                           
  3103                           ;incstack = 0
  3104  001542  5044               	movf	ldexp@value,w,c
  3105  001544  1045               	iorwf	ldexp@value+1,w,c
  3106  001546  1046               	iorwf	ldexp@value+2,w,c
  3107  001548  A4D8               	btfss	status,2,c
  3108  00154A  D007               	goto	l2529
  3109  00154C  0E00               	movlw	0
  3110  00154E  6E44               	movwf	?_ldexp,c
  3111  001550  0E00               	movlw	0
  3112  001552  6E45               	movwf	?_ldexp+1,c
  3113  001554  0E00               	movlw	0
  3114  001556  6E46               	movwf	?_ldexp+2,c
  3115  001558  0012               	return	
  3116  00155A                     l2529:
  3117  00155A  5046               	movf	ldexp@value+2,w,c
  3118  00155C  0B7F               	andlw	127
  3119  00155E  6E49               	movwf	??_ldexp& (0+255),c
  3120  001560  6A4A               	clrf	(??_ldexp+1)& (0+255),c
  3121  001562  90D8               	bcf	status,0,c
  3122  001564  3649               	rlcf	??_ldexp,f,c
  3123  001566  364A               	rlcf	??_ldexp+1,f,c
  3124  001568  5049               	movf	??_ldexp,w,c
  3125  00156A  2647               	addwf	ldexp@newexp,f,c
  3126  00156C  504A               	movf	??_ldexp+1,w,c
  3127  00156E  2248               	addwfc	ldexp@newexp+1,f,c
  3128  001570  AE45               	btfss	ldexp@value+1,7,c
  3129  001572  D003               	goto	u2100
  3130  001574  6A49               	clrf	??_ldexp& (0+255),c
  3131  001576  2A49               	incf	??_ldexp& (0+255),f,c
  3132  001578  D001               	goto	u2108
  3133  00157A                     u2100:
  3134  00157A  6A49               	clrf	??_ldexp& (0+255),c
  3135  00157C                     u2108:
  3136  00157C  5049               	movf	??_ldexp,w,c
  3137  00157E  2647               	addwf	ldexp@newexp,f,c
  3138  001580  0E00               	movlw	0
  3139  001582  2248               	addwfc	ldexp@newexp+1,f,c
  3140  001584  AE48               	btfss	ldexp@newexp+1,7,c
  3141  001586  D00B               	goto	l2537
  3142  001588  0E00               	movlw	0
  3143  00158A  6E6E               	movwf	_errno+1,c
  3144  00158C  0E22               	movlw	34
  3145  00158E  6E6D               	movwf	_errno,c
  3146  001590  0E00               	movlw	0
  3147  001592  6E44               	movwf	?_ldexp,c
  3148  001594  0E00               	movlw	0
  3149  001596  6E45               	movwf	?_ldexp+1,c
  3150  001598  0E00               	movlw	0
  3151  00159A                     L1:
  3152  00159A  6E46               	movwf	?_ldexp+2,c
  3153  00159C  0012               	return	
  3154  00159E                     l2537:
  3155  00159E  BE48               	btfsc	ldexp@newexp+1,7,c
  3156  0015A0  D015               	goto	l2553
  3157  0015A2  0448               	decf	ldexp@newexp+1,w,c
  3158  0015A4  A0D8               	btfss	status,0,c
  3159  0015A6  D012               	goto	l2553
  3160  0015A8  0E00               	movlw	0
  3161  0015AA  6E6E               	movwf	_errno+1,c
  3162  0015AC  0E22               	movlw	34
  3163  0015AE  6E6D               	movwf	_errno,c
  3164  0015B0  AE46               	btfss	ldexp@value+2,7,c
  3165  0015B2  D006               	goto	l2549
  3166  0015B4  0EFF               	movlw	255
  3167  0015B6  6E44               	movwf	?_ldexp,c
  3168  0015B8  0E7F               	movlw	127
  3169  0015BA  6E45               	movwf	?_ldexp+1,c
  3170  0015BC  0EFF               	movlw	255
  3171  0015BE  D7ED               	goto	L1
  3172  0015C0                     l2549:
  3173  0015C0  0EFF               	movlw	255
  3174  0015C2  6E44               	movwf	?_ldexp,c
  3175  0015C4  0E7F               	movlw	127
  3176  0015C6  6E45               	movwf	?_ldexp+1,c
  3177  0015C8  0E7F               	movlw	127
  3178  0015CA  D7E7               	goto	L1
  3179  0015CC                     l2553:
  3180  0015CC  3448               	rlcf	ldexp@newexp+1,w,c
  3181  0015CE  3048               	rrcf	ldexp@newexp+1,w,c
  3182  0015D0  6E4A               	movwf	(??_ldexp+1)& (0+255),c
  3183  0015D2  3047               	rrcf	ldexp@newexp,w,c
  3184  0015D4  6E49               	movwf	??_ldexp& (0+255),c
  3185  0015D6  5046               	movf	ldexp@value+2,w,c
  3186  0015D8  1849               	xorwf	??_ldexp,w,c
  3187  0015DA  0B80               	andlw	-128
  3188  0015DC  1849               	xorwf	??_ldexp,w,c
  3189  0015DE  6E46               	movwf	ldexp@value+2,c
  3190  0015E0  C047  F049         	movff	ldexp@newexp,??_ldexp
  3191  0015E4  0E01               	movlw	1
  3192  0015E6  1649               	andwf	??_ldexp,f,c
  3193  0015E8  3249               	rrcf	??_ldexp,f,c
  3194  0015EA  3249               	rrcf	??_ldexp,f,c
  3195  0015EC  5045               	movf	ldexp@value+1,w,c
  3196  0015EE  1849               	xorwf	??_ldexp,w,c
  3197  0015F0  0B7F               	andlw	-129
  3198  0015F2  1849               	xorwf	??_ldexp,w,c
  3199  0015F4  6E45               	movwf	ldexp@value+1,c
  3200  0015F6  C044  F044         	movff	ldexp@value,?_ldexp
  3201  0015FA  C045  F045         	movff	ldexp@value+1,?_ldexp+1
  3202  0015FE  C046  F046         	movff	ldexp@value+2,?_ldexp+2
  3203  001602  0012               	return	
  3204  001604                     __end_of_ldexp:
  3205                           	opt stack 0
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           prodh	equ	0xFF4
  3211                           prodl	equ	0xFF3
  3212                           intcon	equ	0xFF2
  3213                           intcon2	equ	0xFF1
  3214                           intcon3	equ	0xFF0
  3215                           wreg	equ	0xFE8
  3216                           indf2	equ	0xFDF
  3217                           fsr2h	equ	0xFDA
  3218                           fsr2l	equ	0xFD9
  3219                           status	equ	0xFD8
  3220                           
  3221 ;; *************** function _floor *****************
  3222 ;; Defined at:
  3223 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;  x               3   80[COMRAM] int 
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;  i               3   83[COMRAM] int 
  3228 ;;  expon           2   86[COMRAM] int 
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  3   80[COMRAM] int 
  3231 ;; Registers used:
  3232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3238 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;Total ram usage:        8 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    3
  3245 ;; This function calls:
  3246 ;;		___altoft
  3247 ;;		___ftadd
  3248 ;;		___ftge
  3249 ;;		___fttol
  3250 ;;		_frexp
  3251 ;; This function is called by:
  3252 ;;		_exp
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           	psect	text12
  3257  001392                     __ptext12:
  3258                           	opt stack 0
  3259  001392                     _floor:
  3260                           	opt stack 22
  3261                           
  3262                           ;incstack = 0
  3263  001392  C051  F011         	movff	floor@x,frexp@value
  3264  001396  C052  F012         	movff	floor@x+1,frexp@value+1
  3265  00139A  C053  F013         	movff	floor@x+2,frexp@value+2
  3266  00139E  0E57               	movlw	low floor@expon
  3267  0013A0  6E14               	movwf	frexp@eptr,c
  3268  0013A2  0E00               	movlw	high floor@expon
  3269  0013A4  6E15               	movwf	frexp@eptr+1,c
  3270  0013A6  ECAD  F00B         	call	_frexp	;wreg free
  3271  0013AA  AE58               	btfss	floor@expon+1,7,c
  3272  0013AC  D010               	goto	l2507
  3273  0013AE  AE53               	btfss	floor@x+2,7,c
  3274  0013B0  D007               	goto	l2503
  3275  0013B2  0E00               	movlw	0
  3276  0013B4  6E51               	movwf	?_floor,c
  3277  0013B6  0E80               	movlw	128
  3278  0013B8  6E52               	movwf	?_floor+1,c
  3279  0013BA  0EBF               	movlw	191
  3280  0013BC  6E53               	movwf	?_floor+2,c
  3281  0013BE  0012               	return	
  3282  0013C0                     l2503:
  3283  0013C0  0E00               	movlw	0
  3284  0013C2  6E51               	movwf	?_floor,c
  3285  0013C4  0E00               	movlw	0
  3286  0013C6  6E52               	movwf	?_floor+1,c
  3287  0013C8  0E00               	movlw	0
  3288  0013CA  6E53               	movwf	?_floor+2,c
  3289  0013CC  0012               	return	
  3290  0013CE                     l2507:
  3291  0013CE  5058               	movf	floor@expon+1,w,c
  3292  0013D0  E104               	bnz	u2060
  3293  0013D2  0E15               	movlw	21
  3294  0013D4  5C57               	subwf	floor@expon,w,c
  3295  0013D6  A0D8               	btfss	status,0,c
  3296  0013D8  D007               	goto	l2511
  3297  0013DA                     u2060:
  3298  0013DA  C051  F051         	movff	floor@x,?_floor
  3299  0013DE  C052  F052         	movff	floor@x+1,?_floor+1
  3300  0013E2  C053  F053         	movff	floor@x+2,?_floor+2
  3301  0013E6  0012               	return	
  3302  0013E8                     l2511:
  3303  0013E8  C051  F038         	movff	floor@x,___fttol@f1
  3304  0013EC  C052  F039         	movff	floor@x+1,___fttol@f1+1
  3305  0013F0  C053  F03A         	movff	floor@x+2,___fttol@f1+2
  3306  0013F4  EC62  F008         	call	___fttol	;wreg free
  3307  0013F8  C038  F047         	movff	?___fttol,___altoft@c
  3308  0013FC  C039  F048         	movff	?___fttol+1,___altoft@c+1
  3309  001400  C03A  F049         	movff	?___fttol+2,___altoft@c+2
  3310  001404  C03B  F04A         	movff	?___fttol+3,___altoft@c+3
  3311  001408  ECC0  F00C         	call	___altoft	;wreg free
  3312  00140C  C047  F054         	movff	?___altoft,floor@i
  3313  001410  C048  F055         	movff	?___altoft+1,floor@i+1
  3314  001414  C049  F056         	movff	?___altoft+2,floor@i+2
  3315  001418  C051  F011         	movff	floor@x,___ftge@ff1
  3316  00141C  C052  F012         	movff	floor@x+1,___ftge@ff1+1
  3317  001420  C053  F013         	movff	floor@x+2,___ftge@ff1+2
  3318  001424  C054  F014         	movff	floor@i,___ftge@ff2
  3319  001428  C055  F015         	movff	floor@i+1,___ftge@ff2+1
  3320  00142C  C056  F016         	movff	floor@i+2,___ftge@ff2+2
  3321  001430  ECF5  F00B         	call	___ftge	;wreg free
  3322  001434  B0D8               	btfsc	status,0,c
  3323  001436  D015               	goto	l927
  3324  001438  C054  F02C         	movff	floor@i,___ftadd@f1
  3325  00143C  C055  F02D         	movff	floor@i+1,___ftadd@f1+1
  3326  001440  C056  F02E         	movff	floor@i+2,___ftadd@f1+2
  3327  001444  0E00               	movlw	0
  3328  001446  6E2F               	movwf	___ftadd@f2,c
  3329  001448  0E80               	movlw	128
  3330  00144A  6E30               	movwf	___ftadd@f2+1,c
  3331  00144C  0EBF               	movlw	191
  3332  00144E  6E31               	movwf	___ftadd@f2+2,c
  3333  001450  ECD1  F002         	call	___ftadd	;wreg free
  3334  001454  C02C  F051         	movff	?___ftadd,?_floor
  3335  001458  C02D  F052         	movff	?___ftadd+1,?_floor+1
  3336  00145C  C02E  F053         	movff	?___ftadd+2,?_floor+2
  3337  001460  0012               	return	
  3338  001462                     l927:
  3339  001462  C054  F051         	movff	floor@i,?_floor
  3340  001466  C055  F052         	movff	floor@i+1,?_floor+1
  3341  00146A  C056  F053         	movff	floor@i+2,?_floor+2
  3342  00146E  0012               	return		;funcret
  3343  001470                     __end_of_floor:
  3344                           	opt stack 0
  3345                           tblptru	equ	0xFF8
  3346                           tblptrh	equ	0xFF7
  3347                           tblptrl	equ	0xFF6
  3348                           tablat	equ	0xFF5
  3349                           prodh	equ	0xFF4
  3350                           prodl	equ	0xFF3
  3351                           intcon	equ	0xFF2
  3352                           intcon2	equ	0xFF1
  3353                           intcon3	equ	0xFF0
  3354                           wreg	equ	0xFE8
  3355                           indf2	equ	0xFDF
  3356                           fsr2h	equ	0xFDA
  3357                           fsr2l	equ	0xFD9
  3358                           status	equ	0xFD8
  3359                           
  3360 ;; *************** function _frexp *****************
  3361 ;; Defined at:
  3362 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;  value           3   16[COMRAM] int 
  3365 ;;  eptr            2   19[COMRAM] PTR int 
  3366 ;;		 -> log@exponent(2), floor@expon(2), 
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  3   16[COMRAM] PTR int 
  3371 ;; Registers used:
  3372 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3378 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3380 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3381 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3382 ;;Total ram usage:        7 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    1
  3385 ;; This function calls:
  3386 ;;		Nothing
  3387 ;; This function is called by:
  3388 ;;		_floor
  3389 ;;		_log
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text13
  3394  00175A                     __ptext13:
  3395                           	opt stack 0
  3396  00175A                     _frexp:
  3397                           	opt stack 24
  3398                           
  3399                           ;incstack = 0
  3400  00175A  5011               	movf	frexp@value,w,c
  3401  00175C  1012               	iorwf	frexp@value+1,w,c
  3402  00175E  1013               	iorwf	frexp@value+2,w,c
  3403  001760  A4D8               	btfss	status,2,c
  3404  001762  D00F               	goto	l2411
  3405  001764  C014  FFD9         	movff	frexp@eptr,fsr2l
  3406  001768  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  3407  00176C  0E00               	movlw	0
  3408  00176E  6EDE               	movwf	postinc2,c
  3409  001770  0E00               	movlw	0
  3410  001772  6EDD               	movwf	postdec2,c
  3411  001774  0E00               	movlw	0
  3412  001776  6E11               	movwf	?_frexp,c
  3413  001778  0E00               	movlw	0
  3414  00177A  6E12               	movwf	?_frexp+1,c
  3415  00177C  0E00               	movlw	0
  3416  00177E  6E13               	movwf	?_frexp+2,c
  3417  001780  0012               	return	
  3418  001782                     l2411:
  3419  001782  5013               	movf	frexp@value+2,w,c
  3420  001784  0B7F               	andlw	127
  3421  001786  6E16               	movwf	??_frexp& (0+255),c
  3422  001788  6A17               	clrf	(??_frexp+1)& (0+255),c
  3423  00178A  90D8               	bcf	status,0,c
  3424  00178C  3616               	rlcf	??_frexp,f,c
  3425  00178E  3617               	rlcf	??_frexp+1,f,c
  3426  001790  C014  FFD9         	movff	frexp@eptr,fsr2l
  3427  001794  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  3428  001798  C016  FFDE         	movff	??_frexp,postinc2
  3429  00179C  C017  FFDD         	movff	??_frexp+1,postdec2
  3430  0017A0  AE12               	btfss	frexp@value+1,7,c
  3431  0017A2  D003               	goto	u1950
  3432  0017A4  6A16               	clrf	??_frexp& (0+255),c
  3433  0017A6  2A16               	incf	??_frexp& (0+255),f,c
  3434  0017A8  D001               	goto	u1958
  3435  0017AA                     u1950:
  3436  0017AA  6A16               	clrf	??_frexp& (0+255),c
  3437  0017AC                     u1958:
  3438  0017AC  5016               	movf	??_frexp,w,c
  3439  0017AE  C014  FFD9         	movff	frexp@eptr,fsr2l
  3440  0017B2  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  3441  0017B6  12DE               	iorwf	postinc2,f,c
  3442  0017B8  0E00               	movlw	0
  3443  0017BA  12DD               	iorwf	postdec2,f,c
  3444  0017BC  C014  FFD9         	movff	frexp@eptr,fsr2l
  3445  0017C0  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  3446  0017C4  0E82               	movlw	130
  3447  0017C6  26DE               	addwf	postinc2,f,c
  3448  0017C8  0EFF               	movlw	255
  3449  0017CA  22DD               	addwfc	postdec2,f,c
  3450  0017CC  8013               	bsf	frexp@value+2,0,c
  3451  0017CE  8213               	bsf	frexp@value+2,1,c
  3452  0017D0  8413               	bsf	frexp@value+2,2,c
  3453  0017D2  8613               	bsf	frexp@value+2,3,c
  3454  0017D4  8813               	bsf	frexp@value+2,4,c
  3455  0017D6  8A13               	bsf	frexp@value+2,5,c
  3456  0017D8  9C13               	bcf	frexp@value+2,6,c
  3457  0017DA  9E12               	bcf	frexp@value+1,7,c
  3458  0017DC  C011  F011         	movff	frexp@value,?_frexp
  3459  0017E0  C012  F012         	movff	frexp@value+1,?_frexp+1
  3460  0017E4  C013  F013         	movff	frexp@value+2,?_frexp+2
  3461  0017E8  0012               	return	
  3462  0017EA                     __end_of_frexp:
  3463                           	opt stack 0
  3464                           tblptru	equ	0xFF8
  3465                           tblptrh	equ	0xFF7
  3466                           tblptrl	equ	0xFF6
  3467                           tablat	equ	0xFF5
  3468                           prodh	equ	0xFF4
  3469                           prodl	equ	0xFF3
  3470                           intcon	equ	0xFF2
  3471                           intcon2	equ	0xFF1
  3472                           intcon3	equ	0xFF0
  3473                           wreg	equ	0xFE8
  3474                           indf2	equ	0xFDF
  3475                           postinc2	equ	0xFDE
  3476                           postdec2	equ	0xFDD
  3477                           fsr2h	equ	0xFDA
  3478                           fsr2l	equ	0xFD9
  3479                           status	equ	0xFD8
  3480                           
  3481 ;; *************** function ___fttol *****************
  3482 ;; Defined at:
  3483 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;  f1              3   55[COMRAM] float 
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;  lval            4   65[COMRAM] unsigned long 
  3488 ;;  exp1            1   69[COMRAM] unsigned char 
  3489 ;;  sign1           1   64[COMRAM] unsigned char 
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  4   55[COMRAM] long 
  3492 ;; Registers used:
  3493 ;;		wreg, status,2, status,0
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3499 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;Total ram usage:       15 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    1
  3506 ;; This function calls:
  3507 ;;		Nothing
  3508 ;; This function is called by:
  3509 ;;		_dec_to_hex
  3510 ;;		_pow
  3511 ;;		_exp
  3512 ;;		_floor
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text14
  3517  0010C4                     __ptext14:
  3518                           	opt stack 0
  3519  0010C4                     ___fttol:
  3520                           	opt stack 23
  3521                           
  3522                           ;incstack = 0
  3523  0010C4  C03A  F03C         	movff	___fttol@f1+2,??___fttol
  3524  0010C8  6A3D               	clrf	(??___fttol+1)& (0+255),c
  3525  0010CA  6A3E               	clrf	(??___fttol+2)& (0+255),c
  3526  0010CC  3439               	rlcf	___fttol@f1+1,w,c
  3527  0010CE  363C               	rlcf	??___fttol& (0+255),f,c
  3528  0010D0  E301               	bnc	u1861
  3529  0010D2  803D               	bsf	(??___fttol+1)& (0+255),0,c
  3530  0010D4                     u1861:
  3531  0010D4  503C               	movf	??___fttol,w,c
  3532  0010D6  6E46               	movwf	___fttol@exp1,c
  3533  0010D8  5046               	movf	___fttol@exp1,w,c
  3534  0010DA  A4D8               	btfss	status,2,c
  3535  0010DC  D009               	goto	l2363
  3536  0010DE  0E00               	movlw	0
  3537  0010E0  6E38               	movwf	?___fttol,c
  3538  0010E2  0E00               	movlw	0
  3539  0010E4  6E39               	movwf	?___fttol+1,c
  3540  0010E6  0E00               	movlw	0
  3541  0010E8  6E3A               	movwf	?___fttol+2,c
  3542  0010EA  0E00               	movlw	0
  3543  0010EC  6E3B               	movwf	?___fttol+3,c
  3544  0010EE  0012               	return	
  3545  0010F0                     l2363:
  3546  0010F0  0E17               	movlw	23
  3547  0010F2  6E3C               	movwf	??___fttol& (0+255),c
  3548  0010F4  C038  F03D         	movff	___fttol@f1,??___fttol+1
  3549  0010F8  C039  F03E         	movff	___fttol@f1+1,??___fttol+2
  3550  0010FC  C03A  F03F         	movff	___fttol@f1+2,??___fttol+3
  3551  001100  283C               	incf	??___fttol,w,c
  3552  001102  6E40               	movwf	(??___fttol+4)& (0+255),c
  3553  001104  D004               	goto	u1880
  3554  001106                     u1885:
  3555  001106  90D8               	bcf	status,0,c
  3556  001108  323F               	rrcf	??___fttol+3,f,c
  3557  00110A  323E               	rrcf	??___fttol+2,f,c
  3558  00110C  323D               	rrcf	??___fttol+1,f,c
  3559  00110E                     u1880:
  3560  00110E  2E40               	decfsz	(??___fttol+4)& (0+255),f,c
  3561  001110  D7FA               	goto	u1885
  3562  001112  503D               	movf	??___fttol+1,w,c
  3563  001114  6E41               	movwf	___fttol@sign1,c
  3564  001116  8E39               	bsf	___fttol@f1+1,7,c
  3565  001118  0EFF               	movlw	255
  3566  00111A  1638               	andwf	___fttol@f1,f,c
  3567  00111C  0EFF               	movlw	255
  3568  00111E  1639               	andwf	___fttol@f1+1,f,c
  3569  001120  0E00               	movlw	0
  3570  001122  163A               	andwf	___fttol@f1+2,f,c
  3571  001124  5038               	movf	___fttol@f1,w,c
  3572  001126  6E42               	movwf	___fttol@lval,c
  3573  001128  5039               	movf	___fttol@f1+1,w,c
  3574  00112A  6E43               	movwf	___fttol@lval+1,c
  3575  00112C  503A               	movf	___fttol@f1+2,w,c
  3576  00112E  6E44               	movwf	___fttol@lval+2,c
  3577  001130  6A45               	clrf	___fttol@lval+3,c
  3578  001132  0E8E               	movlw	142
  3579  001134  5E46               	subwf	___fttol@exp1,f,c
  3580  001136  AE46               	btfss	___fttol@exp1,7,c
  3581  001138  D016               	goto	l2385
  3582  00113A  5046               	movf	___fttol@exp1,w,c
  3583  00113C  0A80               	xorlw	128
  3584  00113E  0F8F               	addlw	143
  3585  001140  B0D8               	btfsc	status,0,c
  3586  001142  D009               	goto	l2381
  3587  001144  0E00               	movlw	0
  3588  001146  6E38               	movwf	?___fttol,c
  3589  001148  0E00               	movlw	0
  3590  00114A  6E39               	movwf	?___fttol+1,c
  3591  00114C  0E00               	movlw	0
  3592  00114E  6E3A               	movwf	?___fttol+2,c
  3593  001150  0E00               	movlw	0
  3594  001152  6E3B               	movwf	?___fttol+3,c
  3595  001154  0012               	return	
  3596  001156                     l2381:
  3597  001156  90D8               	bcf	status,0,c
  3598  001158  3245               	rrcf	___fttol@lval+3,f,c
  3599  00115A  3244               	rrcf	___fttol@lval+2,f,c
  3600  00115C  3243               	rrcf	___fttol@lval+1,f,c
  3601  00115E  3242               	rrcf	___fttol@lval,f,c
  3602  001160  3E46               	incfsz	___fttol@exp1,f,c
  3603  001162  D7F9               	goto	l2381
  3604  001164  D015               	goto	l2395
  3605  001166                     l2385:
  3606  001166  0E17               	movlw	23
  3607  001168  6446               	cpfsgt	___fttol@exp1,c
  3608  00116A  D00F               	goto	l2393
  3609  00116C  0E00               	movlw	0
  3610  00116E  6E38               	movwf	?___fttol,c
  3611  001170  0E00               	movlw	0
  3612  001172  6E39               	movwf	?___fttol+1,c
  3613  001174  0E00               	movlw	0
  3614  001176  6E3A               	movwf	?___fttol+2,c
  3615  001178  0E00               	movlw	0
  3616  00117A  6E3B               	movwf	?___fttol+3,c
  3617  00117C  0012               	return	
  3618  00117E                     l2391:
  3619  00117E  90D8               	bcf	status,0,c
  3620  001180  3642               	rlcf	___fttol@lval,f,c
  3621  001182  3643               	rlcf	___fttol@lval+1,f,c
  3622  001184  3644               	rlcf	___fttol@lval+2,f,c
  3623  001186  3645               	rlcf	___fttol@lval+3,f,c
  3624  001188  0646               	decf	___fttol@exp1,f,c
  3625  00118A                     l2393:
  3626  00118A  5046               	movf	___fttol@exp1,w,c
  3627  00118C  A4D8               	btfss	status,2,c
  3628  00118E  D7F7               	goto	l2391
  3629  001190                     l2395:
  3630  001190  5041               	movf	___fttol@sign1,w,c
  3631  001192  B4D8               	btfsc	status,2,c
  3632  001194  D008               	goto	l2399
  3633  001196  1E45               	comf	___fttol@lval+3,f,c
  3634  001198  1E44               	comf	___fttol@lval+2,f,c
  3635  00119A  1E43               	comf	___fttol@lval+1,f,c
  3636  00119C  6C42               	negf	___fttol@lval,c
  3637  00119E  0E00               	movlw	0
  3638  0011A0  2243               	addwfc	___fttol@lval+1,f,c
  3639  0011A2  2244               	addwfc	___fttol@lval+2,f,c
  3640  0011A4  2245               	addwfc	___fttol@lval+3,f,c
  3641  0011A6                     l2399:
  3642  0011A6  C042  F038         	movff	___fttol@lval,?___fttol
  3643  0011AA  C043  F039         	movff	___fttol@lval+1,?___fttol+1
  3644  0011AE  C044  F03A         	movff	___fttol@lval+2,?___fttol+2
  3645  0011B2  C045  F03B         	movff	___fttol@lval+3,?___fttol+3
  3646  0011B6  0012               	return	
  3647  0011B8                     __end_of___fttol:
  3648                           	opt stack 0
  3649                           tblptru	equ	0xFF8
  3650                           tblptrh	equ	0xFF7
  3651                           tblptrl	equ	0xFF6
  3652                           tablat	equ	0xFF5
  3653                           prodh	equ	0xFF4
  3654                           prodl	equ	0xFF3
  3655                           intcon	equ	0xFF2
  3656                           intcon2	equ	0xFF1
  3657                           intcon3	equ	0xFF0
  3658                           wreg	equ	0xFE8
  3659                           indf2	equ	0xFDF
  3660                           postinc2	equ	0xFDE
  3661                           postdec2	equ	0xFDD
  3662                           fsr2h	equ	0xFDA
  3663                           fsr2l	equ	0xFD9
  3664                           status	equ	0xFD8
  3665                           
  3666 ;; *************** function ___ftge *****************
  3667 ;; Defined at:
  3668 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;  ff1             3   16[COMRAM] float 
  3671 ;;  ff2             3   19[COMRAM] float 
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;		None
  3674 ;; Return value:  Size  Location     Type
  3675 ;;		None               void
  3676 ;; Registers used:
  3677 ;;		wreg, status,2, status,0
  3678 ;; Tracked objects:
  3679 ;;		On entry : 0/0
  3680 ;;		On exit  : 0/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3683 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3685 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3686 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;Total ram usage:        9 bytes
  3688 ;; Hardware stack levels used:    1
  3689 ;; Hardware stack levels required when called:    1
  3690 ;; This function calls:
  3691 ;;		Nothing
  3692 ;; This function is called by:
  3693 ;;		_pow
  3694 ;;		_exp
  3695 ;;		_floor
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text15
  3700  0017EA                     __ptext15:
  3701                           	opt stack 0
  3702  0017EA                     ___ftge:
  3703                           	opt stack 23
  3704                           
  3705                           ;incstack = 0
  3706  0017EA  AE13               	btfss	___ftge@ff1+2,7,c
  3707  0017EC  D016               	goto	l2343
  3708  0017EE  C011  F017         	movff	___ftge@ff1,??___ftge
  3709  0017F2  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
  3710  0017F6  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
  3711  0017FA  1E17               	comf	??___ftge,f,c
  3712  0017FC  1E18               	comf	??___ftge+1,f,c
  3713  0017FE  1E19               	comf	??___ftge+2,f,c
  3714  001800  2A17               	incf	??___ftge,f,c
  3715  001802  0E00               	movlw	0
  3716  001804  2218               	addwfc	??___ftge+1,f,c
  3717  001806  2219               	addwfc	??___ftge+2,f,c
  3718  001808  0E00               	movlw	0
  3719  00180A  2417               	addwf	??___ftge,w,c
  3720  00180C  6E11               	movwf	___ftge@ff1,c
  3721  00180E  0E00               	movlw	0
  3722  001810  2018               	addwfc	??___ftge+1,w,c
  3723  001812  6E12               	movwf	___ftge@ff1+1,c
  3724  001814  0E80               	movlw	128
  3725  001816  2019               	addwfc	??___ftge+2,w,c
  3726  001818  6E13               	movwf	___ftge@ff1+2,c
  3727  00181A                     l2343:
  3728  00181A  AE16               	btfss	___ftge@ff2+2,7,c
  3729  00181C  D016               	goto	l2347
  3730  00181E  C014  F017         	movff	___ftge@ff2,??___ftge
  3731  001822  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
  3732  001826  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
  3733  00182A  1E17               	comf	??___ftge,f,c
  3734  00182C  1E18               	comf	??___ftge+1,f,c
  3735  00182E  1E19               	comf	??___ftge+2,f,c
  3736  001830  2A17               	incf	??___ftge,f,c
  3737  001832  0E00               	movlw	0
  3738  001834  2218               	addwfc	??___ftge+1,f,c
  3739  001836  2219               	addwfc	??___ftge+2,f,c
  3740  001838  0E00               	movlw	0
  3741  00183A  2417               	addwf	??___ftge,w,c
  3742  00183C  6E14               	movwf	___ftge@ff2,c
  3743  00183E  0E00               	movlw	0
  3744  001840  2018               	addwfc	??___ftge+1,w,c
  3745  001842  6E15               	movwf	___ftge@ff2+1,c
  3746  001844  0E80               	movlw	128
  3747  001846  2019               	addwfc	??___ftge+2,w,c
  3748  001848  6E16               	movwf	___ftge@ff2+2,c
  3749  00184A                     l2347:
  3750  00184A  0E00               	movlw	0
  3751  00184C  1A11               	xorwf	___ftge@ff1,f,c
  3752  00184E  0E00               	movlw	0
  3753  001850  1A12               	xorwf	___ftge@ff1+1,f,c
  3754  001852  0E80               	movlw	128
  3755  001854  1A13               	xorwf	___ftge@ff1+2,f,c
  3756  001856  0E00               	movlw	0
  3757  001858  1A14               	xorwf	___ftge@ff2,f,c
  3758  00185A  0E00               	movlw	0
  3759  00185C  1A15               	xorwf	___ftge@ff2+1,f,c
  3760  00185E  0E80               	movlw	128
  3761  001860  1A16               	xorwf	___ftge@ff2+2,f,c
  3762  001862  5014               	movf	___ftge@ff2,w,c
  3763  001864  5C11               	subwf	___ftge@ff1,w,c
  3764  001866  5015               	movf	___ftge@ff2+1,w,c
  3765  001868  5812               	subwfb	___ftge@ff1+1,w,c
  3766  00186A  5016               	movf	___ftge@ff2+2,w,c
  3767  00186C  5813               	subwfb	___ftge@ff1+2,w,c
  3768  00186E  B0D8               	btfsc	status,0,c
  3769  001870  D002               	goto	l2353
  3770  001872  90D8               	bcf	status,0,c
  3771  001874  0012               	return	
  3772  001876                     l2353:
  3773  001876  80D8               	bsf	status,0,c
  3774  001878  0012               	return	
  3775  00187A                     __end_of___ftge:
  3776                           	opt stack 0
  3777                           tblptru	equ	0xFF8
  3778                           tblptrh	equ	0xFF7
  3779                           tblptrl	equ	0xFF6
  3780                           tablat	equ	0xFF5
  3781                           prodh	equ	0xFF4
  3782                           prodl	equ	0xFF3
  3783                           intcon	equ	0xFF2
  3784                           intcon2	equ	0xFF1
  3785                           intcon3	equ	0xFF0
  3786                           wreg	equ	0xFE8
  3787                           indf2	equ	0xFDF
  3788                           postinc2	equ	0xFDE
  3789                           postdec2	equ	0xFDD
  3790                           fsr2h	equ	0xFDA
  3791                           fsr2l	equ	0xFD9
  3792                           status	equ	0xFD8
  3793                           
  3794 ;; *************** function ___altoft *****************
  3795 ;; Defined at:
  3796 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;  c               4   70[COMRAM] long 
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;  sign            1   79[COMRAM] unsigned char 
  3801 ;;  exp             1   78[COMRAM] unsigned char 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  3   70[COMRAM] float 
  3804 ;; Registers used:
  3805 ;;		wreg, status,2, status,0, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3811 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;Total ram usage:       10 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    2
  3818 ;; This function calls:
  3819 ;;		___ftpack
  3820 ;; This function is called by:
  3821 ;;		_floor
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text16
  3826  001980                     __ptext16:
  3827                           	opt stack 0
  3828  001980                     ___altoft:
  3829                           	opt stack 22
  3830                           
  3831                           ;incstack = 0
  3832  001980  0E00               	movlw	0
  3833  001982  6E50               	movwf	___altoft@sign,c
  3834  001984  0E8E               	movlw	142
  3835  001986  6E4F               	movwf	___altoft@exp,c
  3836  001988  AE4A               	btfss	___altoft@c+3,7,c
  3837  00198A  D011               	goto	l2215
  3838  00198C  1E4A               	comf	___altoft@c+3,f,c
  3839  00198E  1E49               	comf	___altoft@c+2,f,c
  3840  001990  1E48               	comf	___altoft@c+1,f,c
  3841  001992  6C47               	negf	___altoft@c,c
  3842  001994  0E00               	movlw	0
  3843  001996  2248               	addwfc	___altoft@c+1,f,c
  3844  001998  2249               	addwfc	___altoft@c+2,f,c
  3845  00199A  224A               	addwfc	___altoft@c+3,f,c
  3846  00199C  0E01               	movlw	1
  3847  00199E  6E50               	movwf	___altoft@sign,c
  3848  0019A0  D006               	goto	l2215
  3849  0019A2                     l2213:
  3850  0019A2  90D8               	bcf	status,0,c
  3851  0019A4  324A               	rrcf	___altoft@c+3,f,c
  3852  0019A6  3249               	rrcf	___altoft@c+2,f,c
  3853  0019A8  3248               	rrcf	___altoft@c+1,f,c
  3854  0019AA  3247               	rrcf	___altoft@c,f,c
  3855  0019AC  2A4F               	incf	___altoft@exp,f,c
  3856  0019AE                     l2215:
  3857  0019AE  0E00               	movlw	0
  3858  0019B0  1447               	andwf	___altoft@c,w,c
  3859  0019B2  6E4B               	movwf	??___altoft& (0+255),c
  3860  0019B4  0E00               	movlw	0
  3861  0019B6  1448               	andwf	___altoft@c+1,w,c
  3862  0019B8  6E4C               	movwf	(??___altoft+1)& (0+255),c
  3863  0019BA  0E00               	movlw	0
  3864  0019BC  1449               	andwf	___altoft@c+2,w,c
  3865  0019BE  6E4D               	movwf	(??___altoft+2)& (0+255),c
  3866  0019C0  0EFF               	movlw	255
  3867  0019C2  144A               	andwf	___altoft@c+3,w,c
  3868  0019C4  6E4E               	movwf	(??___altoft+3)& (0+255),c
  3869  0019C6  504B               	movf	??___altoft,w,c
  3870  0019C8  104C               	iorwf	??___altoft+1,w,c
  3871  0019CA  104D               	iorwf	??___altoft+2,w,c
  3872  0019CC  104E               	iorwf	??___altoft+3,w,c
  3873  0019CE  A4D8               	btfss	status,2,c
  3874  0019D0  D7E8               	goto	l2213
  3875  0019D2  C047  F011         	movff	___altoft@c,___ftpack@arg
  3876  0019D6  C048  F012         	movff	___altoft@c+1,___ftpack@arg+1
  3877  0019DA  C049  F013         	movff	___altoft@c+2,___ftpack@arg+2
  3878  0019DE  C04F  F014         	movff	___altoft@exp,___ftpack@exp
  3879  0019E2  C050  F015         	movff	___altoft@sign,___ftpack@sign
  3880  0019E6  EC02  F00B         	call	___ftpack	;wreg free
  3881  0019EA  C011  F047         	movff	?___ftpack,?___altoft
  3882  0019EE  C012  F048         	movff	?___ftpack+1,?___altoft+1
  3883  0019F2  C013  F049         	movff	?___ftpack+2,?___altoft+2
  3884  0019F6  0012               	return	
  3885  0019F8                     __end_of___altoft:
  3886                           	opt stack 0
  3887                           tblptru	equ	0xFF8
  3888                           tblptrh	equ	0xFF7
  3889                           tblptrl	equ	0xFF6
  3890                           tablat	equ	0xFF5
  3891                           prodh	equ	0xFF4
  3892                           prodl	equ	0xFF3
  3893                           intcon	equ	0xFF2
  3894                           intcon2	equ	0xFF1
  3895                           intcon3	equ	0xFF0
  3896                           wreg	equ	0xFE8
  3897                           indf2	equ	0xFDF
  3898                           postinc2	equ	0xFDE
  3899                           postdec2	equ	0xFDD
  3900                           fsr2h	equ	0xFDA
  3901                           fsr2l	equ	0xFD9
  3902                           status	equ	0xFD8
  3903                           
  3904 ;; *************** function _eval_poly *****************
  3905 ;; Defined at:
  3906 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;  x               3   55[COMRAM] float 
  3909 ;;  d               2   58[COMRAM] PTR const 
  3910 ;;		 -> log@coeff(27), exp@coeff(30), 
  3911 ;;  n               2   60[COMRAM] int 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  res             3   64[COMRAM] int 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  3   55[COMRAM] int 
  3916 ;; Registers used:
  3917 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3923 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3924 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3925 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;Total ram usage:       12 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    3
  3930 ;; This function calls:
  3931 ;;		___ftadd
  3932 ;;		___ftmul
  3933 ;;		___wmul
  3934 ;; This function is called by:
  3935 ;;		_exp
  3936 ;;		_log
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           	psect	text17
  3941  001470                     __ptext17:
  3942                           	opt stack 0
  3943  001470                     _eval_poly:
  3944                           	opt stack 22
  3945                           
  3946                           ;incstack = 0
  3947  001470  C03D  F011         	movff	eval_poly@n,___wmul@multiplier
  3948  001474  C03E  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  3949  001478  0E00               	movlw	0
  3950  00147A  6E14               	movwf	___wmul@multiplicand+1,c
  3951  00147C  0E03               	movlw	3
  3952  00147E  6E13               	movwf	___wmul@multiplicand,c
  3953  001480  ECDA  F00E         	call	___wmul	;wreg free
  3954  001484  C03B  F03F         	movff	eval_poly@d,??_eval_poly
  3955  001488  C03C  F040         	movff	eval_poly@d+1,??_eval_poly+1
  3956  00148C  5011               	movf	?___wmul,w,c
  3957  00148E  263F               	addwf	??_eval_poly,f,c
  3958  001490  5012               	movf	?___wmul+1,w,c
  3959  001492  2240               	addwfc	??_eval_poly+1,f,c
  3960  001494  C03F  FFF6         	movff	??_eval_poly,tblptrl
  3961  001498  C040  FFF7         	movff	??_eval_poly+1,tblptrh
  3962  00149C                     	if	0	;tblptru may be non-zero
  3963  00149C                     	endif
  3964  00149C                     	if	0	;tblptru may be non-zero
  3965  00149C                     	endif
  3966  00149C  0009               	tblrd		*+
  3967  00149E  CFF5 F041          	movff	tablat,eval_poly@res
  3968  0014A2  0009               	tblrd		*+
  3969  0014A4  CFF5 F042          	movff	tablat,eval_poly@res+1
  3970  0014A8  000A               	tblrd		*-
  3971  0014AA  CFF5 F043          	movff	tablat,eval_poly@res+2
  3972  0014AE  D03E               	goto	l3299
  3973  0014B0                     l3297:
  3974  0014B0  C041  F020         	movff	eval_poly@res,___ftmul@f2
  3975  0014B4  C042  F021         	movff	eval_poly@res+1,___ftmul@f2+1
  3976  0014B8  C043  F022         	movff	eval_poly@res+2,___ftmul@f2+2
  3977  0014BC  C038  F01D         	movff	eval_poly@x,___ftmul@f1
  3978  0014C0  C039  F01E         	movff	eval_poly@x+1,___ftmul@f1+1
  3979  0014C4  C03A  F01F         	movff	eval_poly@x+2,___ftmul@f1+2
  3980  0014C8  ECDC  F008         	call	___ftmul	;wreg free
  3981  0014CC  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  3982  0014D0  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  3983  0014D4  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  3984  0014D8  0E00               	movlw	0
  3985  0014DA  6E14               	movwf	___wmul@multiplicand+1,c
  3986  0014DC  0E03               	movlw	3
  3987  0014DE  6E13               	movwf	___wmul@multiplicand,c
  3988  0014E0  063D               	decf	eval_poly@n,f,c
  3989  0014E2  A0D8               	btfss	status,0,c
  3990  0014E4  063E               	decf	eval_poly@n+1,f,c
  3991  0014E6  C03D  F011         	movff	eval_poly@n,___wmul@multiplier
  3992  0014EA  C03E  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  3993  0014EE  ECDA  F00E         	call	___wmul	;wreg free
  3994  0014F2  C03B  F03F         	movff	eval_poly@d,??_eval_poly
  3995  0014F6  C03C  F040         	movff	eval_poly@d+1,??_eval_poly+1
  3996  0014FA  5011               	movf	?___wmul,w,c
  3997  0014FC  263F               	addwf	??_eval_poly,f,c
  3998  0014FE  5012               	movf	?___wmul+1,w,c
  3999  001500  2240               	addwfc	??_eval_poly+1,f,c
  4000  001502  C03F  FFF6         	movff	??_eval_poly,tblptrl
  4001  001506  C040  FFF7         	movff	??_eval_poly+1,tblptrh
  4002  00150A                     	if	0	;tblptru may be non-zero
  4003  00150A                     	endif
  4004  00150A                     	if	0	;tblptru may be non-zero
  4005  00150A                     	endif
  4006  00150A  0009               	tblrd		*+
  4007  00150C  CFF5 F02F          	movff	tablat,___ftadd@f2
  4008  001510  0009               	tblrd		*+
  4009  001512  CFF5 F030          	movff	tablat,___ftadd@f2+1
  4010  001516  000A               	tblrd		*-
  4011  001518  CFF5 F031          	movff	tablat,___ftadd@f2+2
  4012  00151C  ECD1  F002         	call	___ftadd	;wreg free
  4013  001520  C02C  F041         	movff	?___ftadd,eval_poly@res
  4014  001524  C02D  F042         	movff	?___ftadd+1,eval_poly@res+1
  4015  001528  C02E  F043         	movff	?___ftadd+2,eval_poly@res+2
  4016  00152C                     l3299:
  4017  00152C  503D               	movf	eval_poly@n,w,c
  4018  00152E  103E               	iorwf	eval_poly@n+1,w,c
  4019  001530  A4D8               	btfss	status,2,c
  4020  001532  D7BE               	goto	l3297
  4021  001534  C041  F038         	movff	eval_poly@res,?_eval_poly
  4022  001538  C042  F039         	movff	eval_poly@res+1,?_eval_poly+1
  4023  00153C  C043  F03A         	movff	eval_poly@res+2,?_eval_poly+2
  4024  001540  0012               	return		;funcret
  4025  001542                     __end_of_eval_poly:
  4026                           	opt stack 0
  4027                           tblptru	equ	0xFF8
  4028                           tblptrh	equ	0xFF7
  4029                           tblptrl	equ	0xFF6
  4030                           tablat	equ	0xFF5
  4031                           prodh	equ	0xFF4
  4032                           prodl	equ	0xFF3
  4033                           intcon	equ	0xFF2
  4034                           intcon2	equ	0xFF1
  4035                           intcon3	equ	0xFF0
  4036                           wreg	equ	0xFE8
  4037                           indf2	equ	0xFDF
  4038                           postinc2	equ	0xFDE
  4039                           postdec2	equ	0xFDD
  4040                           fsr2h	equ	0xFDA
  4041                           fsr2l	equ	0xFD9
  4042                           status	equ	0xFD8
  4043                           
  4044 ;; *************** function ___ftmul *****************
  4045 ;; Defined at:
  4046 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  f1              3   28[COMRAM] float 
  4049 ;;  f2              3   31[COMRAM] float 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  4052 ;;  sign            1   42[COMRAM] unsigned char 
  4053 ;;  cntr            1   41[COMRAM] unsigned char 
  4054 ;;  exp             1   37[COMRAM] unsigned char 
  4055 ;; Return value:  Size  Location     Type
  4056 ;;                  3   28[COMRAM] float 
  4057 ;; Registers used:
  4058 ;;		wreg, status,2, status,0, cstack
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 0/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4064 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4066 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;Total ram usage:       15 bytes
  4069 ;; Hardware stack levels used:    1
  4070 ;; Hardware stack levels required when called:    2
  4071 ;; This function calls:
  4072 ;;		___ftpack
  4073 ;; This function is called by:
  4074 ;;		_dec_to_hex
  4075 ;;		_pow
  4076 ;;		_exp
  4077 ;;		_log
  4078 ;;		_eval_poly
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text18
  4083  0011B8                     __ptext18:
  4084                           	opt stack 0
  4085  0011B8                     ___ftmul:
  4086                           	opt stack 22
  4087                           
  4088                           ;incstack = 0
  4089  0011B8  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  4090  0011BC  6A24               	clrf	(??___ftmul+1)& (0+255),c
  4091  0011BE  6A25               	clrf	(??___ftmul+2)& (0+255),c
  4092  0011C0  341E               	rlcf	___ftmul@f1+1,w,c
  4093  0011C2  3623               	rlcf	??___ftmul& (0+255),f,c
  4094  0011C4  E301               	bnc	u1771
  4095  0011C6  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  4096  0011C8                     u1771:
  4097  0011C8  5023               	movf	??___ftmul,w,c
  4098  0011CA  6E26               	movwf	___ftmul@exp,c
  4099  0011CC  5026               	movf	___ftmul@exp,w,c
  4100  0011CE  A4D8               	btfss	status,2,c
  4101  0011D0  D007               	goto	l2297
  4102  0011D2  0E00               	movlw	0
  4103  0011D4  6E1D               	movwf	?___ftmul,c
  4104  0011D6  0E00               	movlw	0
  4105  0011D8  6E1E               	movwf	?___ftmul+1,c
  4106  0011DA  0E00               	movlw	0
  4107  0011DC  6E1F               	movwf	?___ftmul+2,c
  4108  0011DE  0012               	return	
  4109  0011E0                     l2297:
  4110  0011E0  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  4111  0011E4  6A24               	clrf	(??___ftmul+1)& (0+255),c
  4112  0011E6  6A25               	clrf	(??___ftmul+2)& (0+255),c
  4113  0011E8  3421               	rlcf	___ftmul@f2+1,w,c
  4114  0011EA  3623               	rlcf	??___ftmul& (0+255),f,c
  4115  0011EC  E301               	bnc	u1791
  4116  0011EE  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  4117  0011F0                     u1791:
  4118  0011F0  5023               	movf	??___ftmul,w,c
  4119  0011F2  6E2B               	movwf	___ftmul@sign,c
  4120  0011F4  502B               	movf	___ftmul@sign,w,c
  4121  0011F6  A4D8               	btfss	status,2,c
  4122  0011F8  D007               	goto	l2303
  4123  0011FA  0E00               	movlw	0
  4124  0011FC  6E1D               	movwf	?___ftmul,c
  4125  0011FE  0E00               	movlw	0
  4126  001200  6E1E               	movwf	?___ftmul+1,c
  4127  001202  0E00               	movlw	0
  4128  001204  6E1F               	movwf	?___ftmul+2,c
  4129  001206  0012               	return	
  4130  001208                     l2303:
  4131  001208  502B               	movf	___ftmul@sign,w,c
  4132  00120A  0F7B               	addlw	123
  4133  00120C  2626               	addwf	___ftmul@exp,f,c
  4134  00120E  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  4135  001212  5022               	movf	___ftmul@f2+2,w,c
  4136  001214  1A2B               	xorwf	___ftmul@sign,f,c
  4137  001216  0E80               	movlw	128
  4138  001218  162B               	andwf	___ftmul@sign,f,c
  4139  00121A  8E1E               	bsf	___ftmul@f1+1,7,c
  4140  00121C  8E21               	bsf	___ftmul@f2+1,7,c
  4141  00121E  0EFF               	movlw	255
  4142  001220  1620               	andwf	___ftmul@f2,f,c
  4143  001222  0EFF               	movlw	255
  4144  001224  1621               	andwf	___ftmul@f2+1,f,c
  4145  001226  0E00               	movlw	0
  4146  001228  1622               	andwf	___ftmul@f2+2,f,c
  4147  00122A  0E00               	movlw	0
  4148  00122C  6E27               	movwf	___ftmul@f3_as_product,c
  4149  00122E  0E00               	movlw	0
  4150  001230  6E28               	movwf	___ftmul@f3_as_product+1,c
  4151  001232  0E00               	movlw	0
  4152  001234  6E29               	movwf	___ftmul@f3_as_product+2,c
  4153  001236  0E07               	movlw	7
  4154  001238  6E2A               	movwf	___ftmul@cntr,c
  4155  00123A                     l2317:
  4156  00123A  A01D               	btfss	___ftmul@f1,0,c
  4157  00123C  D006               	goto	l2321
  4158  00123E  5020               	movf	___ftmul@f2,w,c
  4159  001240  2627               	addwf	___ftmul@f3_as_product,f,c
  4160  001242  5021               	movf	___ftmul@f2+1,w,c
  4161  001244  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  4162  001246  5022               	movf	___ftmul@f2+2,w,c
  4163  001248  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  4164  00124A                     l2321:
  4165  00124A  90D8               	bcf	status,0,c
  4166  00124C  321F               	rrcf	___ftmul@f1+2,f,c
  4167  00124E  321E               	rrcf	___ftmul@f1+1,f,c
  4168  001250  321D               	rrcf	___ftmul@f1,f,c
  4169  001252  90D8               	bcf	status,0,c
  4170  001254  3620               	rlcf	___ftmul@f2,f,c
  4171  001256  3621               	rlcf	___ftmul@f2+1,f,c
  4172  001258  3622               	rlcf	___ftmul@f2+2,f,c
  4173  00125A  2E2A               	decfsz	___ftmul@cntr,f,c
  4174  00125C  D7EE               	goto	l2317
  4175  00125E  0E09               	movlw	9
  4176  001260  6E2A               	movwf	___ftmul@cntr,c
  4177  001262                     l2327:
  4178  001262  A01D               	btfss	___ftmul@f1,0,c
  4179  001264  D006               	goto	l2331
  4180  001266  5020               	movf	___ftmul@f2,w,c
  4181  001268  2627               	addwf	___ftmul@f3_as_product,f,c
  4182  00126A  5021               	movf	___ftmul@f2+1,w,c
  4183  00126C  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  4184  00126E  5022               	movf	___ftmul@f2+2,w,c
  4185  001270  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  4186  001272                     l2331:
  4187  001272  90D8               	bcf	status,0,c
  4188  001274  321F               	rrcf	___ftmul@f1+2,f,c
  4189  001276  321E               	rrcf	___ftmul@f1+1,f,c
  4190  001278  321D               	rrcf	___ftmul@f1,f,c
  4191  00127A  90D8               	bcf	status,0,c
  4192  00127C  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  4193  00127E  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  4194  001280  3227               	rrcf	___ftmul@f3_as_product,f,c
  4195  001282  2E2A               	decfsz	___ftmul@cntr,f,c
  4196  001284  D7EE               	goto	l2327
  4197  001286  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  4198  00128A  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4199  00128E  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4200  001292  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  4201  001296  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  4202  00129A  EC02  F00B         	call	___ftpack	;wreg free
  4203  00129E  C011  F01D         	movff	?___ftpack,?___ftmul
  4204  0012A2  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  4205  0012A6  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  4206  0012AA  0012               	return	
  4207  0012AC                     __end_of___ftmul:
  4208                           	opt stack 0
  4209                           tblptru	equ	0xFF8
  4210                           tblptrh	equ	0xFF7
  4211                           tblptrl	equ	0xFF6
  4212                           tablat	equ	0xFF5
  4213                           prodh	equ	0xFF4
  4214                           prodl	equ	0xFF3
  4215                           intcon	equ	0xFF2
  4216                           intcon2	equ	0xFF1
  4217                           intcon3	equ	0xFF0
  4218                           wreg	equ	0xFE8
  4219                           indf2	equ	0xFDF
  4220                           postinc2	equ	0xFDE
  4221                           postdec2	equ	0xFDD
  4222                           fsr2h	equ	0xFDA
  4223                           fsr2l	equ	0xFD9
  4224                           status	equ	0xFD8
  4225                           
  4226 ;; *************** function ___ftsub *****************
  4227 ;; Defined at:
  4228 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  f1              3   55[COMRAM] float 
  4231 ;;  f2              3   58[COMRAM] float 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;		None
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  3   55[COMRAM] float 
  4236 ;; Registers used:
  4237 ;;		wreg, status,2, status,0, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4243 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;Total ram usage:        6 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:    3
  4250 ;; This function calls:
  4251 ;;		___ftadd
  4252 ;; This function is called by:
  4253 ;;		_exp
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	text19
  4258  001D16                     __ptext19:
  4259                           	opt stack 0
  4260  001D16                     ___ftsub:
  4261                           	opt stack 22
  4262                           
  4263                           ;incstack = 0
  4264  001D16  503B               	movf	___ftsub@f2,w,c
  4265  001D18  103C               	iorwf	___ftsub@f2+1,w,c
  4266  001D1A  103D               	iorwf	___ftsub@f2+2,w,c
  4267  001D1C  B4D8               	btfsc	status,2,c
  4268  001D1E  D006               	goto	l2473
  4269  001D20  0E00               	movlw	0
  4270  001D22  1A3B               	xorwf	___ftsub@f2,f,c
  4271  001D24  0E00               	movlw	0
  4272  001D26  1A3C               	xorwf	___ftsub@f2+1,f,c
  4273  001D28  0E80               	movlw	128
  4274  001D2A  1A3D               	xorwf	___ftsub@f2+2,f,c
  4275  001D2C                     l2473:
  4276  001D2C  C038  F02C         	movff	___ftsub@f1,___ftadd@f1
  4277  001D30  C039  F02D         	movff	___ftsub@f1+1,___ftadd@f1+1
  4278  001D34  C03A  F02E         	movff	___ftsub@f1+2,___ftadd@f1+2
  4279  001D38  C03B  F02F         	movff	___ftsub@f2,___ftadd@f2
  4280  001D3C  C03C  F030         	movff	___ftsub@f2+1,___ftadd@f2+1
  4281  001D40  C03D  F031         	movff	___ftsub@f2+2,___ftadd@f2+2
  4282  001D44  ECD1  F002         	call	___ftadd	;wreg free
  4283  001D48  C02C  F038         	movff	?___ftadd,?___ftsub
  4284  001D4C  C02D  F039         	movff	?___ftadd+1,?___ftsub+1
  4285  001D50  C02E  F03A         	movff	?___ftadd+2,?___ftsub+2
  4286  001D54  0012               	return	
  4287  001D56                     __end_of___ftsub:
  4288                           	opt stack 0
  4289                           tblptru	equ	0xFF8
  4290                           tblptrh	equ	0xFF7
  4291                           tblptrl	equ	0xFF6
  4292                           tablat	equ	0xFF5
  4293                           prodh	equ	0xFF4
  4294                           prodl	equ	0xFF3
  4295                           intcon	equ	0xFF2
  4296                           intcon2	equ	0xFF1
  4297                           intcon3	equ	0xFF0
  4298                           wreg	equ	0xFE8
  4299                           indf2	equ	0xFDF
  4300                           postinc2	equ	0xFDE
  4301                           postdec2	equ	0xFDD
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function ___ftadd *****************
  4307 ;; Defined at:
  4308 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;  f1              3   43[COMRAM] float 
  4311 ;;  f2              3   46[COMRAM] float 
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;  exp1            1   54[COMRAM] unsigned char 
  4314 ;;  exp2            1   53[COMRAM] unsigned char 
  4315 ;;  sign            1   52[COMRAM] unsigned char 
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  3   43[COMRAM] float 
  4318 ;; Registers used:
  4319 ;;		wreg, status,2, status,0, cstack
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4325 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;Total ram usage:       12 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    2
  4332 ;; This function calls:
  4333 ;;		___ftpack
  4334 ;; This function is called by:
  4335 ;;		_dec_to_hex
  4336 ;;		___ftsub
  4337 ;;		_floor
  4338 ;;		_log
  4339 ;;		_eval_poly
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           	psect	text20
  4344  0005A2                     __ptext20:
  4345                           	opt stack 0
  4346  0005A2                     ___ftadd:
  4347                           	opt stack 22
  4348                           
  4349                           ;incstack = 0
  4350  0005A2  C02E  F032         	movff	___ftadd@f1+2,??___ftadd
  4351  0005A6  6A33               	clrf	(??___ftadd+1)& (0+255),c
  4352  0005A8  6A34               	clrf	(??___ftadd+2)& (0+255),c
  4353  0005AA  342D               	rlcf	___ftadd@f1+1,w,c
  4354  0005AC  3632               	rlcf	??___ftadd& (0+255),f,c
  4355  0005AE  E301               	bnc	u1561
  4356  0005B0  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  4357  0005B2                     u1561:
  4358  0005B2  5032               	movf	??___ftadd,w,c
  4359  0005B4  6E37               	movwf	___ftadd@exp1,c
  4360  0005B6  C031  F032         	movff	___ftadd@f2+2,??___ftadd
  4361  0005BA  6A33               	clrf	(??___ftadd+1)& (0+255),c
  4362  0005BC  6A34               	clrf	(??___ftadd+2)& (0+255),c
  4363  0005BE  3430               	rlcf	___ftadd@f2+1,w,c
  4364  0005C0  3632               	rlcf	??___ftadd& (0+255),f,c
  4365  0005C2  E301               	bnc	u1571
  4366  0005C4  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  4367  0005C6                     u1571:
  4368  0005C6  5032               	movf	??___ftadd,w,c
  4369  0005C8  6E36               	movwf	___ftadd@exp2,c
  4370  0005CA  5037               	movf	___ftadd@exp1,w,c
  4371  0005CC  B4D8               	btfsc	status,2,c
  4372  0005CE  D00B               	goto	l561
  4373  0005D0  5036               	movf	___ftadd@exp2,w,c
  4374  0005D2  5C37               	subwf	___ftadd@exp1,w,c
  4375  0005D4  B0D8               	btfsc	status,0,c
  4376  0005D6  D00E               	goto	l2229
  4377  0005D8  5037               	movf	___ftadd@exp1,w,c
  4378  0005DA  0800               	sublw	0
  4379  0005DC  2436               	addwf	___ftadd@exp2,w,c
  4380  0005DE  6E32               	movwf	??___ftadd& (0+255),c
  4381  0005E0  0E18               	movlw	24
  4382  0005E2  6432               	cpfsgt	??___ftadd,c
  4383  0005E4  D007               	goto	l2229
  4384  0005E6                     l561:
  4385  0005E6  C02F  F02C         	movff	___ftadd@f2,?___ftadd
  4386  0005EA  C030  F02D         	movff	___ftadd@f2+1,?___ftadd+1
  4387  0005EE  C031  F02E         	movff	___ftadd@f2+2,?___ftadd+2
  4388  0005F2  0012               	return	
  4389  0005F4                     l2229:
  4390  0005F4  5036               	movf	___ftadd@exp2,w,c
  4391  0005F6  B4D8               	btfsc	status,2,c
  4392  0005F8  D00B               	goto	l565
  4393  0005FA  5037               	movf	___ftadd@exp1,w,c
  4394  0005FC  5C36               	subwf	___ftadd@exp2,w,c
  4395  0005FE  B0D8               	btfsc	status,0,c
  4396  000600  D00E               	goto	l2235
  4397  000602  5036               	movf	___ftadd@exp2,w,c
  4398  000604  0800               	sublw	0
  4399  000606  2437               	addwf	___ftadd@exp1,w,c
  4400  000608  6E32               	movwf	??___ftadd& (0+255),c
  4401  00060A  0E18               	movlw	24
  4402  00060C  6432               	cpfsgt	??___ftadd,c
  4403  00060E  D007               	goto	l2235
  4404  000610                     l565:
  4405  000610  C02C  F02C         	movff	___ftadd@f1,?___ftadd
  4406  000614  C02D  F02D         	movff	___ftadd@f1+1,?___ftadd+1
  4407  000618  C02E  F02E         	movff	___ftadd@f1+2,?___ftadd+2
  4408  00061C  0012               	return	
  4409  00061E                     l2235:
  4410  00061E  0E06               	movlw	6
  4411  000620  6E35               	movwf	___ftadd@sign,c
  4412  000622  BE2E               	btfsc	___ftadd@f1+2,7,c
  4413  000624  8E35               	bsf	___ftadd@sign,7,c
  4414  000626  BE31               	btfsc	___ftadd@f2+2,7,c
  4415  000628  8C35               	bsf	___ftadd@sign,6,c
  4416  00062A  8E2D               	bsf	___ftadd@f1+1,7,c
  4417  00062C  0EFF               	movlw	255
  4418  00062E  162C               	andwf	___ftadd@f1,f,c
  4419  000630  0EFF               	movlw	255
  4420  000632  162D               	andwf	___ftadd@f1+1,f,c
  4421  000634  0E00               	movlw	0
  4422  000636  162E               	andwf	___ftadd@f1+2,f,c
  4423  000638  8E30               	bsf	___ftadd@f2+1,7,c
  4424  00063A  0EFF               	movlw	255
  4425  00063C  162F               	andwf	___ftadd@f2,f,c
  4426  00063E  0EFF               	movlw	255
  4427  000640  1630               	andwf	___ftadd@f2+1,f,c
  4428  000642  0E00               	movlw	0
  4429  000644  1631               	andwf	___ftadd@f2+2,f,c
  4430  000646  5036               	movf	___ftadd@exp2,w,c
  4431  000648  5C37               	subwf	___ftadd@exp1,w,c
  4432  00064A  B0D8               	btfsc	status,0,c
  4433  00064C  D01B               	goto	l2261
  4434  00064E                     l2251:
  4435  00064E  90D8               	bcf	status,0,c
  4436  000650  362F               	rlcf	___ftadd@f2,f,c
  4437  000652  3630               	rlcf	___ftadd@f2+1,f,c
  4438  000654  3631               	rlcf	___ftadd@f2+2,f,c
  4439  000656  0636               	decf	___ftadd@exp2,f,c
  4440  000658  5037               	movf	___ftadd@exp1,w,c
  4441  00065A  1836               	xorwf	___ftadd@exp2,w,c
  4442  00065C  B4D8               	btfsc	status,2,c
  4443  00065E  D00D               	goto	l2259
  4444  000660  0635               	decf	___ftadd@sign,f,c
  4445  000662  C035  F032         	movff	___ftadd@sign,??___ftadd
  4446  000666  0E07               	movlw	7
  4447  000668  1632               	andwf	??___ftadd,f,c
  4448  00066A  B4D8               	btfsc	status,2,c
  4449  00066C  D006               	goto	l2259
  4450  00066E  D7EF               	goto	l2251
  4451  000670                     l2257:
  4452  000670  90D8               	bcf	status,0,c
  4453  000672  322E               	rrcf	___ftadd@f1+2,f,c
  4454  000674  322D               	rrcf	___ftadd@f1+1,f,c
  4455  000676  322C               	rrcf	___ftadd@f1,f,c
  4456  000678  2A37               	incf	___ftadd@exp1,f,c
  4457  00067A                     l2259:
  4458  00067A  5036               	movf	___ftadd@exp2,w,c
  4459  00067C  1837               	xorwf	___ftadd@exp1,w,c
  4460  00067E  B4D8               	btfsc	status,2,c
  4461  000680  D01F               	goto	l576
  4462  000682  D7F6               	goto	l2257
  4463  000684                     l2261:
  4464  000684  5037               	movf	___ftadd@exp1,w,c
  4465  000686  5C36               	subwf	___ftadd@exp2,w,c
  4466  000688  B0D8               	btfsc	status,0,c
  4467  00068A  D01A               	goto	l576
  4468  00068C                     l2263:
  4469  00068C  90D8               	bcf	status,0,c
  4470  00068E  362C               	rlcf	___ftadd@f1,f,c
  4471  000690  362D               	rlcf	___ftadd@f1+1,f,c
  4472  000692  362E               	rlcf	___ftadd@f1+2,f,c
  4473  000694  0637               	decf	___ftadd@exp1,f,c
  4474  000696  5037               	movf	___ftadd@exp1,w,c
  4475  000698  1836               	xorwf	___ftadd@exp2,w,c
  4476  00069A  B4D8               	btfsc	status,2,c
  4477  00069C  D00D               	goto	l2271
  4478  00069E  0635               	decf	___ftadd@sign,f,c
  4479  0006A0  C035  F032         	movff	___ftadd@sign,??___ftadd
  4480  0006A4  0E07               	movlw	7
  4481  0006A6  1632               	andwf	??___ftadd,f,c
  4482  0006A8  B4D8               	btfsc	status,2,c
  4483  0006AA  D006               	goto	l2271
  4484  0006AC  D7EF               	goto	l2263
  4485  0006AE                     l2269:
  4486  0006AE  90D8               	bcf	status,0,c
  4487  0006B0  3231               	rrcf	___ftadd@f2+2,f,c
  4488  0006B2  3230               	rrcf	___ftadd@f2+1,f,c
  4489  0006B4  322F               	rrcf	___ftadd@f2,f,c
  4490  0006B6  2A36               	incf	___ftadd@exp2,f,c
  4491  0006B8                     l2271:
  4492  0006B8  5036               	movf	___ftadd@exp2,w,c
  4493  0006BA  1837               	xorwf	___ftadd@exp1,w,c
  4494  0006BC  A4D8               	btfss	status,2,c
  4495  0006BE  D7F7               	goto	l2269
  4496  0006C0                     l576:
  4497  0006C0  AE35               	btfss	___ftadd@sign,7,c
  4498  0006C2  D00C               	goto	l585
  4499  0006C4  0EFF               	movlw	255
  4500  0006C6  1A2C               	xorwf	___ftadd@f1,f,c
  4501  0006C8  0EFF               	movlw	255
  4502  0006CA  1A2D               	xorwf	___ftadd@f1+1,f,c
  4503  0006CC  0EFF               	movlw	255
  4504  0006CE  1A2E               	xorwf	___ftadd@f1+2,f,c
  4505  0006D0  0E01               	movlw	1
  4506  0006D2  262C               	addwf	___ftadd@f1,f,c
  4507  0006D4  0E00               	movlw	0
  4508  0006D6  222D               	addwfc	___ftadd@f1+1,f,c
  4509  0006D8  0E00               	movlw	0
  4510  0006DA  222E               	addwfc	___ftadd@f1+2,f,c
  4511  0006DC                     l585:
  4512  0006DC  AC35               	btfss	___ftadd@sign,6,c
  4513  0006DE  D00C               	goto	l2277
  4514  0006E0  0EFF               	movlw	255
  4515  0006E2  1A2F               	xorwf	___ftadd@f2,f,c
  4516  0006E4  0EFF               	movlw	255
  4517  0006E6  1A30               	xorwf	___ftadd@f2+1,f,c
  4518  0006E8  0EFF               	movlw	255
  4519  0006EA  1A31               	xorwf	___ftadd@f2+2,f,c
  4520  0006EC  0E01               	movlw	1
  4521  0006EE  262F               	addwf	___ftadd@f2,f,c
  4522  0006F0  0E00               	movlw	0
  4523  0006F2  2230               	addwfc	___ftadd@f2+1,f,c
  4524  0006F4  0E00               	movlw	0
  4525  0006F6  2231               	addwfc	___ftadd@f2+2,f,c
  4526  0006F8                     l2277:
  4527  0006F8  0E00               	movlw	0
  4528  0006FA  6E35               	movwf	___ftadd@sign,c
  4529  0006FC  502C               	movf	___ftadd@f1,w,c
  4530  0006FE  262F               	addwf	___ftadd@f2,f,c
  4531  000700  502D               	movf	___ftadd@f1+1,w,c
  4532  000702  2230               	addwfc	___ftadd@f2+1,f,c
  4533  000704  502E               	movf	___ftadd@f1+2,w,c
  4534  000706  2231               	addwfc	___ftadd@f2+2,f,c
  4535  000708  AE31               	btfss	___ftadd@f2+2,7,c
  4536  00070A  D00E               	goto	l2287
  4537  00070C  0EFF               	movlw	255
  4538  00070E  1A2F               	xorwf	___ftadd@f2,f,c
  4539  000710  0EFF               	movlw	255
  4540  000712  1A30               	xorwf	___ftadd@f2+1,f,c
  4541  000714  0EFF               	movlw	255
  4542  000716  1A31               	xorwf	___ftadd@f2+2,f,c
  4543  000718  0E01               	movlw	1
  4544  00071A  262F               	addwf	___ftadd@f2,f,c
  4545  00071C  0E00               	movlw	0
  4546  00071E  2230               	addwfc	___ftadd@f2+1,f,c
  4547  000720  0E00               	movlw	0
  4548  000722  2231               	addwfc	___ftadd@f2+2,f,c
  4549  000724  0E01               	movlw	1
  4550  000726  6E35               	movwf	___ftadd@sign,c
  4551  000728                     l2287:
  4552  000728  C02F  F011         	movff	___ftadd@f2,___ftpack@arg
  4553  00072C  C030  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
  4554  000730  C031  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
  4555  000734  C037  F014         	movff	___ftadd@exp1,___ftpack@exp
  4556  000738  C035  F015         	movff	___ftadd@sign,___ftpack@sign
  4557  00073C  EC02  F00B         	call	___ftpack	;wreg free
  4558  000740  C011  F02C         	movff	?___ftpack,?___ftadd
  4559  000744  C012  F02D         	movff	?___ftpack+1,?___ftadd+1
  4560  000748  C013  F02E         	movff	?___ftpack+2,?___ftadd+2
  4561  00074C  0012               	return	
  4562  00074E                     __end_of___ftadd:
  4563                           	opt stack 0
  4564                           tblptru	equ	0xFF8
  4565                           tblptrh	equ	0xFF7
  4566                           tblptrl	equ	0xFF6
  4567                           tablat	equ	0xFF5
  4568                           prodh	equ	0xFF4
  4569                           prodl	equ	0xFF3
  4570                           intcon	equ	0xFF2
  4571                           intcon2	equ	0xFF1
  4572                           intcon3	equ	0xFF0
  4573                           wreg	equ	0xFE8
  4574                           indf2	equ	0xFDF
  4575                           postinc2	equ	0xFDE
  4576                           postdec2	equ	0xFDD
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581 ;; *************** function ___ftneg *****************
  4582 ;; Defined at:
  4583 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  f1              3   16[COMRAM] float 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;		None
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  3   16[COMRAM] float 
  4590 ;; Registers used:
  4591 ;;		wreg, status,2, status,0
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4597 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;Total ram usage:        3 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    1
  4604 ;; This function calls:
  4605 ;;		Nothing
  4606 ;; This function is called by:
  4607 ;;		_pow
  4608 ;;		_exp
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           	psect	text21
  4613  001DDA                     __ptext21:
  4614                           	opt stack 0
  4615  001DDA                     ___ftneg:
  4616                           	opt stack 24
  4617                           
  4618                           ;incstack = 0
  4619  001DDA  5011               	movf	___ftneg@f1,w,c
  4620  001DDC  1012               	iorwf	___ftneg@f1+1,w,c
  4621  001DDE  1013               	iorwf	___ftneg@f1+2,w,c
  4622  001DE0  B4D8               	btfsc	status,2,c
  4623  001DE2  D006               	goto	l618
  4624  001DE4  0E00               	movlw	0
  4625  001DE6  1A11               	xorwf	___ftneg@f1,f,c
  4626  001DE8  0E00               	movlw	0
  4627  001DEA  1A12               	xorwf	___ftneg@f1+1,f,c
  4628  001DEC  0E80               	movlw	128
  4629  001DEE  1A13               	xorwf	___ftneg@f1+2,f,c
  4630  001DF0                     l618:
  4631  001DF0  C011  F011         	movff	___ftneg@f1,?___ftneg
  4632  001DF4  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
  4633  001DF8  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
  4634  001DFC  0012               	return		;funcret
  4635  001DFE                     __end_of___ftneg:
  4636                           	opt stack 0
  4637                           tblptru	equ	0xFF8
  4638                           tblptrh	equ	0xFF7
  4639                           tblptrl	equ	0xFF6
  4640                           tablat	equ	0xFF5
  4641                           prodh	equ	0xFF4
  4642                           prodl	equ	0xFF3
  4643                           intcon	equ	0xFF2
  4644                           intcon2	equ	0xFF1
  4645                           intcon3	equ	0xFF0
  4646                           wreg	equ	0xFE8
  4647                           indf2	equ	0xFDF
  4648                           postinc2	equ	0xFDE
  4649                           postdec2	equ	0xFDD
  4650                           fsr2h	equ	0xFDA
  4651                           fsr2l	equ	0xFD9
  4652                           status	equ	0xFD8
  4653                           
  4654 ;; *************** function ___ftdiv *****************
  4655 ;; Defined at:
  4656 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;  f1              3   24[COMRAM] float 
  4659 ;;  f2              3   27[COMRAM] float 
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;  f3              3   34[COMRAM] float 
  4662 ;;  sign            1   38[COMRAM] unsigned char 
  4663 ;;  exp             1   37[COMRAM] unsigned char 
  4664 ;;  cntr            1   33[COMRAM] unsigned char 
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  3   24[COMRAM] float 
  4667 ;; Registers used:
  4668 ;;		wreg, status,2, status,0, cstack
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4674 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;Total ram usage:       15 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:    2
  4681 ;; This function calls:
  4682 ;;		___ftpack
  4683 ;; This function is called by:
  4684 ;;		_exp
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text22
  4689  0012AC                     __ptext22:
  4690                           	opt stack 0
  4691  0012AC                     ___ftdiv:
  4692                           	opt stack 23
  4693                           
  4694                           ;incstack = 0
  4695  0012AC  C01B  F01F         	movff	___ftdiv@f1+2,??___ftdiv
  4696  0012B0  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  4697  0012B2  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  4698  0012B4  341A               	rlcf	___ftdiv@f1+1,w,c
  4699  0012B6  361F               	rlcf	??___ftdiv& (0+255),f,c
  4700  0012B8  E301               	bnc	u1961
  4701  0012BA  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  4702  0012BC                     u1961:
  4703  0012BC  501F               	movf	??___ftdiv,w,c
  4704  0012BE  6E26               	movwf	___ftdiv@exp,c
  4705  0012C0  5026               	movf	___ftdiv@exp,w,c
  4706  0012C2  A4D8               	btfss	status,2,c
  4707  0012C4  D007               	goto	l2429
  4708  0012C6  0E00               	movlw	0
  4709  0012C8  6E19               	movwf	?___ftdiv,c
  4710  0012CA  0E00               	movlw	0
  4711  0012CC  6E1A               	movwf	?___ftdiv+1,c
  4712  0012CE  0E00               	movlw	0
  4713  0012D0  6E1B               	movwf	?___ftdiv+2,c
  4714  0012D2  0012               	return	
  4715  0012D4                     l2429:
  4716  0012D4  C01E  F01F         	movff	___ftdiv@f2+2,??___ftdiv
  4717  0012D8  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  4718  0012DA  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  4719  0012DC  341D               	rlcf	___ftdiv@f2+1,w,c
  4720  0012DE  361F               	rlcf	??___ftdiv& (0+255),f,c
  4721  0012E0  E301               	bnc	u1981
  4722  0012E2  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  4723  0012E4                     u1981:
  4724  0012E4  501F               	movf	??___ftdiv,w,c
  4725  0012E6  6E27               	movwf	___ftdiv@sign,c
  4726  0012E8  5027               	movf	___ftdiv@sign,w,c
  4727  0012EA  A4D8               	btfss	status,2,c
  4728  0012EC  D007               	goto	l2435
  4729  0012EE  0E00               	movlw	0
  4730  0012F0  6E19               	movwf	?___ftdiv,c
  4731  0012F2  0E00               	movlw	0
  4732  0012F4  6E1A               	movwf	?___ftdiv+1,c
  4733  0012F6  0E00               	movlw	0
  4734  0012F8  6E1B               	movwf	?___ftdiv+2,c
  4735  0012FA  0012               	return	
  4736  0012FC                     l2435:
  4737  0012FC  0E00               	movlw	0
  4738  0012FE  6E23               	movwf	___ftdiv@f3,c
  4739  001300  0E00               	movlw	0
  4740  001302  6E24               	movwf	___ftdiv@f3+1,c
  4741  001304  0E00               	movlw	0
  4742  001306  6E25               	movwf	___ftdiv@f3+2,c
  4743  001308  5027               	movf	___ftdiv@sign,w,c
  4744  00130A  0F89               	addlw	137
  4745  00130C  5E26               	subwf	___ftdiv@exp,f,c
  4746  00130E  C01B  F027         	movff	___ftdiv@f1+2,___ftdiv@sign
  4747  001312  501E               	movf	___ftdiv@f2+2,w,c
  4748  001314  1A27               	xorwf	___ftdiv@sign,f,c
  4749  001316  0E80               	movlw	128
  4750  001318  1627               	andwf	___ftdiv@sign,f,c
  4751  00131A  8E1A               	bsf	___ftdiv@f1+1,7,c
  4752  00131C  0EFF               	movlw	255
  4753  00131E  1619               	andwf	___ftdiv@f1,f,c
  4754  001320  0EFF               	movlw	255
  4755  001322  161A               	andwf	___ftdiv@f1+1,f,c
  4756  001324  0E00               	movlw	0
  4757  001326  161B               	andwf	___ftdiv@f1+2,f,c
  4758  001328  8E1D               	bsf	___ftdiv@f2+1,7,c
  4759  00132A  0EFF               	movlw	255
  4760  00132C  161C               	andwf	___ftdiv@f2,f,c
  4761  00132E  0EFF               	movlw	255
  4762  001330  161D               	andwf	___ftdiv@f2+1,f,c
  4763  001332  0E00               	movlw	0
  4764  001334  161E               	andwf	___ftdiv@f2+2,f,c
  4765  001336  0E18               	movlw	24
  4766  001338  6E22               	movwf	___ftdiv@cntr,c
  4767  00133A                     l2455:
  4768  00133A  90D8               	bcf	status,0,c
  4769  00133C  3623               	rlcf	___ftdiv@f3,f,c
  4770  00133E  3624               	rlcf	___ftdiv@f3+1,f,c
  4771  001340  3625               	rlcf	___ftdiv@f3+2,f,c
  4772  001342  501C               	movf	___ftdiv@f2,w,c
  4773  001344  5C19               	subwf	___ftdiv@f1,w,c
  4774  001346  501D               	movf	___ftdiv@f2+1,w,c
  4775  001348  581A               	subwfb	___ftdiv@f1+1,w,c
  4776  00134A  501E               	movf	___ftdiv@f2+2,w,c
  4777  00134C  581B               	subwfb	___ftdiv@f1+2,w,c
  4778  00134E  A0D8               	btfss	status,0,c
  4779  001350  D007               	goto	l596
  4780  001352  501C               	movf	___ftdiv@f2,w,c
  4781  001354  5E19               	subwf	___ftdiv@f1,f,c
  4782  001356  501D               	movf	___ftdiv@f2+1,w,c
  4783  001358  5A1A               	subwfb	___ftdiv@f1+1,f,c
  4784  00135A  501E               	movf	___ftdiv@f2+2,w,c
  4785  00135C  5A1B               	subwfb	___ftdiv@f1+2,f,c
  4786  00135E  8023               	bsf	___ftdiv@f3,0,c
  4787  001360                     l596:
  4788  001360  90D8               	bcf	status,0,c
  4789  001362  3619               	rlcf	___ftdiv@f1,f,c
  4790  001364  361A               	rlcf	___ftdiv@f1+1,f,c
  4791  001366  361B               	rlcf	___ftdiv@f1+2,f,c
  4792  001368  2E22               	decfsz	___ftdiv@cntr,f,c
  4793  00136A  D7E7               	goto	l2455
  4794  00136C  C023  F011         	movff	___ftdiv@f3,___ftpack@arg
  4795  001370  C024  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4796  001374  C025  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4797  001378  C026  F014         	movff	___ftdiv@exp,___ftpack@exp
  4798  00137C  C027  F015         	movff	___ftdiv@sign,___ftpack@sign
  4799  001380  EC02  F00B         	call	___ftpack	;wreg free
  4800  001384  C011  F019         	movff	?___ftpack,?___ftdiv
  4801  001388  C012  F01A         	movff	?___ftpack+1,?___ftdiv+1
  4802  00138C  C013  F01B         	movff	?___ftpack+2,?___ftdiv+2
  4803  001390  0012               	return	
  4804  001392                     __end_of___ftdiv:
  4805                           	opt stack 0
  4806                           tblptru	equ	0xFF8
  4807                           tblptrh	equ	0xFF7
  4808                           tblptrl	equ	0xFF6
  4809                           tablat	equ	0xFF5
  4810                           prodh	equ	0xFF4
  4811                           prodl	equ	0xFF3
  4812                           intcon	equ	0xFF2
  4813                           intcon2	equ	0xFF1
  4814                           intcon3	equ	0xFF0
  4815                           wreg	equ	0xFE8
  4816                           indf2	equ	0xFDF
  4817                           postinc2	equ	0xFDE
  4818                           postdec2	equ	0xFDD
  4819                           fsr2h	equ	0xFDA
  4820                           fsr2l	equ	0xFD9
  4821                           status	equ	0xFD8
  4822                           
  4823 ;; *************** function ___awtoft *****************
  4824 ;; Defined at:
  4825 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;  c               2   24[COMRAM] int 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  sign            1   27[COMRAM] unsigned char 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  3   24[COMRAM] float 
  4832 ;; Registers used:
  4833 ;;		wreg, status,2, status,0, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4839 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;Total ram usage:        4 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    2
  4846 ;; This function calls:
  4847 ;;		___ftpack
  4848 ;; This function is called by:
  4849 ;;		_dec_to_hex
  4850 ;;		_exp
  4851 ;;		_log
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text23
  4856  001D56                     __ptext23:
  4857                           	opt stack 0
  4858  001D56                     ___awtoft:
  4859                           	opt stack 23
  4860                           
  4861                           ;incstack = 0
  4862  001D56  0E00               	movlw	0
  4863  001D58  6E1C               	movwf	___awtoft@sign,c
  4864  001D5A  AE1A               	btfss	___awtoft@c+1,7,c
  4865  001D5C  D006               	goto	l2485
  4866  001D5E  6C19               	negf	___awtoft@c,c
  4867  001D60  1E1A               	comf	___awtoft@c+1,f,c
  4868  001D62  B0D8               	btfsc	status,0,c
  4869  001D64  2A1A               	incf	___awtoft@c+1,f,c
  4870  001D66  0E01               	movlw	1
  4871  001D68  6E1C               	movwf	___awtoft@sign,c
  4872  001D6A                     l2485:
  4873  001D6A  C019  F011         	movff	___awtoft@c,___ftpack@arg
  4874  001D6E  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  4875  001D72  6A13               	clrf	___ftpack@arg+2,c
  4876  001D74  0E8E               	movlw	142
  4877  001D76  6E14               	movwf	___ftpack@exp,c
  4878  001D78  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  4879  001D7C  EC02  F00B         	call	___ftpack	;wreg free
  4880  001D80  C011  F019         	movff	?___ftpack,?___awtoft
  4881  001D84  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  4882  001D88  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  4883  001D8C  0012               	return	
  4884  001D8E                     __end_of___awtoft:
  4885                           	opt stack 0
  4886                           tblptru	equ	0xFF8
  4887                           tblptrh	equ	0xFF7
  4888                           tblptrl	equ	0xFF6
  4889                           tablat	equ	0xFF5
  4890                           prodh	equ	0xFF4
  4891                           prodl	equ	0xFF3
  4892                           intcon	equ	0xFF2
  4893                           intcon2	equ	0xFF1
  4894                           intcon3	equ	0xFF0
  4895                           wreg	equ	0xFE8
  4896                           indf2	equ	0xFDF
  4897                           postinc2	equ	0xFDE
  4898                           postdec2	equ	0xFDD
  4899                           fsr2h	equ	0xFDA
  4900                           fsr2l	equ	0xFD9
  4901                           status	equ	0xFD8
  4902                           
  4903 ;; *************** function ___lltoft *****************
  4904 ;; Defined at:
  4905 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;  c               4   24[COMRAM] unsigned long 
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;  exp             1   32[COMRAM] unsigned char 
  4910 ;; Return value:  Size  Location     Type
  4911 ;;                  3   24[COMRAM] float 
  4912 ;; Registers used:
  4913 ;;		wreg, status,2, status,0, cstack
  4914 ;; Tracked objects:
  4915 ;;		On entry : 0/0
  4916 ;;		On exit  : 0/0
  4917 ;;		Unchanged: 0/0
  4918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4919 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;Total ram usage:        9 bytes
  4924 ;; Hardware stack levels used:    1
  4925 ;; Hardware stack levels required when called:    2
  4926 ;; This function calls:
  4927 ;;		___ftpack
  4928 ;; This function is called by:
  4929 ;;		_pow
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933                           	psect	text24
  4934  001A6A                     __ptext24:
  4935                           	opt stack 0
  4936  001A6A                     ___lltoft:
  4937                           	opt stack 24
  4938                           
  4939                           ;incstack = 0
  4940  001A6A  0E8E               	movlw	142
  4941  001A6C  6E21               	movwf	___lltoft@exp,c
  4942  001A6E  D006               	goto	l2563
  4943  001A70                     l2561:
  4944  001A70  90D8               	bcf	status,0,c
  4945  001A72  321C               	rrcf	___lltoft@c+3,f,c
  4946  001A74  321B               	rrcf	___lltoft@c+2,f,c
  4947  001A76  321A               	rrcf	___lltoft@c+1,f,c
  4948  001A78  3219               	rrcf	___lltoft@c,f,c
  4949  001A7A  2A21               	incf	___lltoft@exp,f,c
  4950  001A7C                     l2563:
  4951  001A7C  0E00               	movlw	0
  4952  001A7E  1419               	andwf	___lltoft@c,w,c
  4953  001A80  6E1D               	movwf	??___lltoft& (0+255),c
  4954  001A82  0E00               	movlw	0
  4955  001A84  141A               	andwf	___lltoft@c+1,w,c
  4956  001A86  6E1E               	movwf	(??___lltoft+1)& (0+255),c
  4957  001A88  0E00               	movlw	0
  4958  001A8A  141B               	andwf	___lltoft@c+2,w,c
  4959  001A8C  6E1F               	movwf	(??___lltoft+2)& (0+255),c
  4960  001A8E  0EFF               	movlw	255
  4961  001A90  141C               	andwf	___lltoft@c+3,w,c
  4962  001A92  6E20               	movwf	(??___lltoft+3)& (0+255),c
  4963  001A94  501D               	movf	??___lltoft,w,c
  4964  001A96  101E               	iorwf	??___lltoft+1,w,c
  4965  001A98  101F               	iorwf	??___lltoft+2,w,c
  4966  001A9A  1020               	iorwf	??___lltoft+3,w,c
  4967  001A9C  A4D8               	btfss	status,2,c
  4968  001A9E  D7E8               	goto	l2561
  4969  001AA0  C019  F011         	movff	___lltoft@c,___ftpack@arg
  4970  001AA4  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
  4971  001AA8  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
  4972  001AAC  C021  F014         	movff	___lltoft@exp,___ftpack@exp
  4973  001AB0  0E00               	movlw	0
  4974  001AB2  6E15               	movwf	___ftpack@sign,c
  4975  001AB4  EC02  F00B         	call	___ftpack	;wreg free
  4976  001AB8  C011  F019         	movff	?___ftpack,?___lltoft
  4977  001ABC  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
  4978  001AC0  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
  4979  001AC4  0012               	return	
  4980  001AC6                     __end_of___lltoft:
  4981                           	opt stack 0
  4982                           tblptru	equ	0xFF8
  4983                           tblptrh	equ	0xFF7
  4984                           tblptrl	equ	0xFF6
  4985                           tablat	equ	0xFF5
  4986                           prodh	equ	0xFF4
  4987                           prodl	equ	0xFF3
  4988                           intcon	equ	0xFF2
  4989                           intcon2	equ	0xFF1
  4990                           intcon3	equ	0xFF0
  4991                           wreg	equ	0xFE8
  4992                           indf2	equ	0xFDF
  4993                           postinc2	equ	0xFDE
  4994                           postdec2	equ	0xFDD
  4995                           fsr2h	equ	0xFDA
  4996                           fsr2l	equ	0xFD9
  4997                           status	equ	0xFD8
  4998                           
  4999 ;; *************** function ___ftpack *****************
  5000 ;; Defined at:
  5001 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;  arg             3   16[COMRAM] unsigned um
  5004 ;;  exp             1   19[COMRAM] unsigned char 
  5005 ;;  sign            1   20[COMRAM] unsigned char 
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;		None
  5008 ;; Return value:  Size  Location     Type
  5009 ;;                  3   16[COMRAM] float 
  5010 ;; Registers used:
  5011 ;;		wreg, status,2, status,0
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/0
  5014 ;;		On exit  : 0/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5017 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;Total ram usage:        8 bytes
  5022 ;; Hardware stack levels used:    1
  5023 ;; Hardware stack levels required when called:    1
  5024 ;; This function calls:
  5025 ;;		Nothing
  5026 ;; This function is called by:
  5027 ;;		___altoft
  5028 ;;		___awtoft
  5029 ;;		___ftadd
  5030 ;;		___ftdiv
  5031 ;;		___ftmul
  5032 ;;		___lltoft
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text25
  5037  001604                     __ptext25:
  5038                           	opt stack 0
  5039  001604                     ___ftpack:
  5040                           	opt stack 22
  5041                           
  5042                           ;incstack = 0
  5043  001604  5014               	movf	___ftpack@exp,w,c
  5044  001606  B4D8               	btfsc	status,2,c
  5045  001608  D005               	goto	l2167
  5046  00160A  5011               	movf	___ftpack@arg,w,c
  5047  00160C  1012               	iorwf	___ftpack@arg+1,w,c
  5048  00160E  1013               	iorwf	___ftpack@arg+2,w,c
  5049  001610  A4D8               	btfss	status,2,c
  5050  001612  D00C               	goto	l2173
  5051  001614                     l2167:
  5052  001614  0E00               	movlw	0
  5053  001616  6E11               	movwf	?___ftpack,c
  5054  001618  0E00               	movlw	0
  5055  00161A  6E12               	movwf	?___ftpack+1,c
  5056  00161C  0E00               	movlw	0
  5057  00161E  6E13               	movwf	?___ftpack+2,c
  5058  001620  0012               	return	
  5059  001622                     l2171:
  5060  001622  2A14               	incf	___ftpack@exp,f,c
  5061  001624  90D8               	bcf	status,0,c
  5062  001626  3213               	rrcf	___ftpack@arg+2,f,c
  5063  001628  3212               	rrcf	___ftpack@arg+1,f,c
  5064  00162A  3211               	rrcf	___ftpack@arg,f,c
  5065  00162C                     l2173:
  5066  00162C  0E00               	movlw	0
  5067  00162E  1411               	andwf	___ftpack@arg,w,c
  5068  001630  6E16               	movwf	??___ftpack& (0+255),c
  5069  001632  0E00               	movlw	0
  5070  001634  1412               	andwf	___ftpack@arg+1,w,c
  5071  001636  6E17               	movwf	(??___ftpack+1)& (0+255),c
  5072  001638  0EFE               	movlw	254
  5073  00163A  1413               	andwf	___ftpack@arg+2,w,c
  5074  00163C  6E18               	movwf	(??___ftpack+2)& (0+255),c
  5075  00163E  5016               	movf	??___ftpack,w,c
  5076  001640  1017               	iorwf	??___ftpack+1,w,c
  5077  001642  1018               	iorwf	??___ftpack+2,w,c
  5078  001644  B4D8               	btfsc	status,2,c
  5079  001646  D00C               	goto	l2179
  5080  001648  D7EC               	goto	l2171
  5081  00164A                     l2175:
  5082  00164A  2A14               	incf	___ftpack@exp,f,c
  5083  00164C  0E01               	movlw	1
  5084  00164E  2611               	addwf	___ftpack@arg,f,c
  5085  001650  0E00               	movlw	0
  5086  001652  2212               	addwfc	___ftpack@arg+1,f,c
  5087  001654  0E00               	movlw	0
  5088  001656  2213               	addwfc	___ftpack@arg+2,f,c
  5089  001658  90D8               	bcf	status,0,c
  5090  00165A  3213               	rrcf	___ftpack@arg+2,f,c
  5091  00165C  3212               	rrcf	___ftpack@arg+1,f,c
  5092  00165E  3211               	rrcf	___ftpack@arg,f,c
  5093  001660                     l2179:
  5094  001660  0E00               	movlw	0
  5095  001662  1411               	andwf	___ftpack@arg,w,c
  5096  001664  6E16               	movwf	??___ftpack& (0+255),c
  5097  001666  0E00               	movlw	0
  5098  001668  1412               	andwf	___ftpack@arg+1,w,c
  5099  00166A  6E17               	movwf	(??___ftpack+1)& (0+255),c
  5100  00166C  0EFF               	movlw	255
  5101  00166E  1413               	andwf	___ftpack@arg+2,w,c
  5102  001670  6E18               	movwf	(??___ftpack+2)& (0+255),c
  5103  001672  5016               	movf	??___ftpack,w,c
  5104  001674  1017               	iorwf	??___ftpack+1,w,c
  5105  001676  1018               	iorwf	??___ftpack+2,w,c
  5106  001678  B4D8               	btfsc	status,2,c
  5107  00167A  D006               	goto	l2183
  5108  00167C  D7E6               	goto	l2175
  5109  00167E                     l2181:
  5110  00167E  0614               	decf	___ftpack@exp,f,c
  5111  001680  90D8               	bcf	status,0,c
  5112  001682  3611               	rlcf	___ftpack@arg,f,c
  5113  001684  3612               	rlcf	___ftpack@arg+1,f,c
  5114  001686  3613               	rlcf	___ftpack@arg+2,f,c
  5115  001688                     l2183:
  5116  001688  BE12               	btfsc	___ftpack@arg+1,7,c
  5117  00168A  D003               	goto	l538
  5118  00168C  0E02               	movlw	2
  5119  00168E  6014               	cpfslt	___ftpack@exp,c
  5120  001690  D7F6               	goto	l2181
  5121  001692                     l538:
  5122  001692  A014               	btfss	___ftpack@exp,0,c
  5123  001694  9E12               	bcf	___ftpack@arg+1,7,c
  5124  001696  90D8               	bcf	status,0,c
  5125  001698  3214               	rrcf	___ftpack@exp,f,c
  5126  00169A  5014               	movf	___ftpack@exp,w,c
  5127  00169C  1213               	iorwf	___ftpack@arg+2,f,c
  5128  00169E  5015               	movf	___ftpack@sign,w,c
  5129  0016A0  A4D8               	btfss	status,2,c
  5130  0016A2  8E13               	bsf	___ftpack@arg+2,7,c
  5131  0016A4  C011  F011         	movff	___ftpack@arg,?___ftpack
  5132  0016A8  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  5133  0016AC  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  5134  0016B0  0012               	return	
  5135  0016B2                     __end_of___ftpack:
  5136                           	opt stack 0
  5137                           tblptru	equ	0xFF8
  5138                           tblptrh	equ	0xFF7
  5139                           tblptrl	equ	0xFF6
  5140                           tablat	equ	0xFF5
  5141                           prodh	equ	0xFF4
  5142                           prodl	equ	0xFF3
  5143                           intcon	equ	0xFF2
  5144                           intcon2	equ	0xFF1
  5145                           intcon3	equ	0xFF0
  5146                           wreg	equ	0xFE8
  5147                           indf2	equ	0xFDF
  5148                           postinc2	equ	0xFDE
  5149                           postdec2	equ	0xFDD
  5150                           fsr2h	equ	0xFDA
  5151                           fsr2l	equ	0xFD9
  5152                           status	equ	0xFD8
  5153                           
  5154 ;; *************** function ___awdiv *****************
  5155 ;; Defined at:
  5156 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;  dividend        2   16[COMRAM] int 
  5159 ;;  divisor         2   18[COMRAM] int 
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;  quotient        2   22[COMRAM] int 
  5162 ;;  sign            1   21[COMRAM] unsigned char 
  5163 ;;  counter         1   20[COMRAM] unsigned char 
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  2   16[COMRAM] int 
  5166 ;; Registers used:
  5167 ;;		wreg, status,2, status,0
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5173 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5174 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5177 ;;Total ram usage:        8 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:    1
  5180 ;; This function calls:
  5181 ;;		Nothing
  5182 ;; This function is called by:
  5183 ;;		_dec_to_hex
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           	psect	text26
  5188  00187A                     __ptext26:
  5189                           	opt stack 0
  5190  00187A                     ___awdiv:
  5191                           	opt stack 26
  5192                           
  5193                           ;incstack = 0
  5194  00187A  0E00               	movlw	0
  5195  00187C  6E16               	movwf	___awdiv@sign,c
  5196  00187E  AE14               	btfss	___awdiv@divisor+1,7,c
  5197  001880  D006               	goto	l2705
  5198  001882  6C13               	negf	___awdiv@divisor,c
  5199  001884  1E14               	comf	___awdiv@divisor+1,f,c
  5200  001886  B0D8               	btfsc	status,0,c
  5201  001888  2A14               	incf	___awdiv@divisor+1,f,c
  5202  00188A  0E01               	movlw	1
  5203  00188C  6E16               	movwf	___awdiv@sign,c
  5204  00188E                     l2705:
  5205  00188E  AE12               	btfss	___awdiv@dividend+1,7,c
  5206  001890  D006               	goto	l2711
  5207  001892  6C11               	negf	___awdiv@dividend,c
  5208  001894  1E12               	comf	___awdiv@dividend+1,f,c
  5209  001896  B0D8               	btfsc	status,0,c
  5210  001898  2A12               	incf	___awdiv@dividend+1,f,c
  5211  00189A  0E01               	movlw	1
  5212  00189C  1A16               	xorwf	___awdiv@sign,f,c
  5213  00189E                     l2711:
  5214  00189E  0E00               	movlw	0
  5215  0018A0  6E18               	movwf	___awdiv@quotient+1,c
  5216  0018A2  0E00               	movlw	0
  5217  0018A4  6E17               	movwf	___awdiv@quotient,c
  5218  0018A6  5013               	movf	___awdiv@divisor,w,c
  5219  0018A8  1014               	iorwf	___awdiv@divisor+1,w,c
  5220  0018AA  B4D8               	btfsc	status,2,c
  5221  0018AC  D01C               	goto	l2733
  5222  0018AE  0E01               	movlw	1
  5223  0018B0  6E15               	movwf	___awdiv@counter,c
  5224  0018B2  D004               	goto	l2719
  5225  0018B4                     l2717:
  5226  0018B4  90D8               	bcf	status,0,c
  5227  0018B6  3613               	rlcf	___awdiv@divisor,f,c
  5228  0018B8  3614               	rlcf	___awdiv@divisor+1,f,c
  5229  0018BA  2A15               	incf	___awdiv@counter,f,c
  5230  0018BC                     l2719:
  5231  0018BC  AE14               	btfss	___awdiv@divisor+1,7,c
  5232  0018BE  D7FA               	goto	l2717
  5233  0018C0                     l2721:
  5234  0018C0  90D8               	bcf	status,0,c
  5235  0018C2  3617               	rlcf	___awdiv@quotient,f,c
  5236  0018C4  3618               	rlcf	___awdiv@quotient+1,f,c
  5237  0018C6  5013               	movf	___awdiv@divisor,w,c
  5238  0018C8  5C11               	subwf	___awdiv@dividend,w,c
  5239  0018CA  5014               	movf	___awdiv@divisor+1,w,c
  5240  0018CC  5812               	subwfb	___awdiv@dividend+1,w,c
  5241  0018CE  A0D8               	btfss	status,0,c
  5242  0018D0  D005               	goto	l2729
  5243  0018D2  5013               	movf	___awdiv@divisor,w,c
  5244  0018D4  5E11               	subwf	___awdiv@dividend,f,c
  5245  0018D6  5014               	movf	___awdiv@divisor+1,w,c
  5246  0018D8  5A12               	subwfb	___awdiv@dividend+1,f,c
  5247  0018DA  8017               	bsf	___awdiv@quotient,0,c
  5248  0018DC                     l2729:
  5249  0018DC  90D8               	bcf	status,0,c
  5250  0018DE  3214               	rrcf	___awdiv@divisor+1,f,c
  5251  0018E0  3213               	rrcf	___awdiv@divisor,f,c
  5252  0018E2  2E15               	decfsz	___awdiv@counter,f,c
  5253  0018E4  D7ED               	goto	l2721
  5254  0018E6                     l2733:
  5255  0018E6  5016               	movf	___awdiv@sign,w,c
  5256  0018E8  B4D8               	btfsc	status,2,c
  5257  0018EA  D004               	goto	l2737
  5258  0018EC  6C17               	negf	___awdiv@quotient,c
  5259  0018EE  1E18               	comf	___awdiv@quotient+1,f,c
  5260  0018F0  B0D8               	btfsc	status,0,c
  5261  0018F2  2A18               	incf	___awdiv@quotient+1,f,c
  5262  0018F4                     l2737:
  5263  0018F4  C017  F011         	movff	___awdiv@quotient,?___awdiv
  5264  0018F8  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  5265  0018FC  0012               	return	
  5266  0018FE                     __end_of___awdiv:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           intcon	equ	0xFF2
  5275                           intcon2	equ	0xFF1
  5276                           intcon3	equ	0xFF0
  5277                           wreg	equ	0xFE8
  5278                           indf2	equ	0xFDF
  5279                           postinc2	equ	0xFDE
  5280                           postdec2	equ	0xFDD
  5281                           fsr2h	equ	0xFDA
  5282                           fsr2l	equ	0xFD9
  5283                           status	equ	0xFD8
  5284                           
  5285 ;; *************** function _initLCD *****************
  5286 ;; Defined at:
  5287 ;;		line 14 in file "lcd.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;		None
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;		None
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  1    wreg      void 
  5294 ;; Registers used:
  5295 ;;		wreg, status,2, status,0, cstack
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;Total ram usage:        1 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:    3
  5308 ;; This function calls:
  5309 ;;		_lcdInst
  5310 ;; This function is called by:
  5311 ;;		_main
  5312 ;;		_init_operation
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           	psect	text27
  5317  001C0A                     __ptext27:
  5318                           	opt stack 0
  5319  001C0A                     _initLCD:
  5320                           	opt stack 26
  5321                           
  5322                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  5323                           
  5324                           ;incstack = 0
  5325  001C0A  0E31               	movlw	49
  5326  001C0C  6E14               	movwf	??_initLCD& (0+255),c
  5327  001C0E  0EB2               	movlw	178
  5328  001C10                     u3557:
  5329  001C10  2EE8               	decfsz	wreg,f,c
  5330  001C12  D7FE               	bra	u3557
  5331  001C14  2E14               	decfsz	??_initLCD& (0+255),f,c
  5332  001C16  D7FC               	bra	u3557
  5333  001C18  D000               	nop2	
  5334                           
  5335                           ;lcd.c: 16: lcdInst(0b00110011);
  5336  001C1A  0E33               	movlw	51
  5337  001C1C  EC29  F00F         	call	_lcdInst
  5338                           
  5339                           ;lcd.c: 17: lcdInst(0b00110010);
  5340  001C20  0E32               	movlw	50
  5341  001C22  EC29  F00F         	call	_lcdInst
  5342                           
  5343                           ;lcd.c: 18: lcdInst(0b00101000);
  5344  001C26  0E28               	movlw	40
  5345  001C28  EC29  F00F         	call	_lcdInst
  5346                           
  5347                           ;lcd.c: 19: lcdInst(0b00001111);
  5348  001C2C  0E0F               	movlw	15
  5349  001C2E  EC29  F00F         	call	_lcdInst
  5350                           
  5351                           ;lcd.c: 20: lcdInst(0b00000110);
  5352  001C32  0E06               	movlw	6
  5353  001C34  EC29  F00F         	call	_lcdInst
  5354                           
  5355                           ;lcd.c: 21: lcdInst(0b00000001);
  5356  001C38  0E01               	movlw	1
  5357  001C3A  EC29  F00F         	call	_lcdInst
  5358                           
  5359                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  5360  001C3E  0E31               	movlw	49
  5361  001C40  6E14               	movwf	??_initLCD& (0+255),c
  5362  001C42  0EB2               	movlw	178
  5363  001C44                     u3567:
  5364  001C44  2EE8               	decfsz	wreg,f,c
  5365  001C46  D7FE               	bra	u3567
  5366  001C48  2E14               	decfsz	??_initLCD& (0+255),f,c
  5367  001C4A  D7FC               	bra	u3567
  5368  001C4C  D000               	nop2	
  5369  001C4E  0012               	return		;funcret
  5370  001C50                     __end_of_initLCD:
  5371                           	opt stack 0
  5372                           tblptru	equ	0xFF8
  5373                           tblptrh	equ	0xFF7
  5374                           tblptrl	equ	0xFF6
  5375                           tablat	equ	0xFF5
  5376                           prodh	equ	0xFF4
  5377                           prodl	equ	0xFF3
  5378                           intcon	equ	0xFF2
  5379                           intcon2	equ	0xFF1
  5380                           intcon3	equ	0xFF0
  5381                           wreg	equ	0xFE8
  5382                           indf2	equ	0xFDF
  5383                           postinc2	equ	0xFDE
  5384                           postdec2	equ	0xFDD
  5385                           fsr2h	equ	0xFDA
  5386                           fsr2l	equ	0xFD9
  5387                           status	equ	0xFD8
  5388                           
  5389 ;; *************** function _date_time *****************
  5390 ;; Defined at:
  5391 ;;		line 295 in file "main.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  time            2   66[BANK0 ] PTR unsigned char 
  5394 ;;		 -> main@time(7), 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  i               1  106[COMRAM] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  1    wreg      void 
  5399 ;; Registers used:
  5400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5406 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;Total ram usage:        6 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    4
  5413 ;; This function calls:
  5414 ;;		_I2C_Master_Read
  5415 ;;		_I2C_Master_Start
  5416 ;;		_I2C_Master_Stop
  5417 ;;		_I2C_Master_Write
  5418 ;;		_lcdInst
  5419 ;;		_printf
  5420 ;; This function is called by:
  5421 ;;		_main
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           	psect	text28
  5426  0008CA                     __ptext28:
  5427                           	opt stack 0
  5428  0008CA                     _date_time:
  5429                           	opt stack 26
  5430                           
  5431                           ;main.c: 297: I2C_Master_Start();
  5432                           
  5433                           ;incstack = 0
  5434  0008CA  EC38  F00F         	call	_I2C_Master_Start	;wreg free
  5435                           
  5436                           ;main.c: 298: I2C_Master_Write(0b11010000);
  5437  0008CE  0E00               	movlw	0
  5438  0008D0  6E13               	movwf	I2C_Master_Write@d+1,c
  5439  0008D2  0ED0               	movlw	208
  5440  0008D4  6E12               	movwf	I2C_Master_Write@d,c
  5441  0008D6  EC2F  F00F         	call	_I2C_Master_Write	;wreg free
  5442                           
  5443                           ;main.c: 299: I2C_Master_Write(0x00);
  5444  0008DA  0E00               	movlw	0
  5445  0008DC  6E13               	movwf	I2C_Master_Write@d+1,c
  5446  0008DE  0E00               	movlw	0
  5447  0008E0  6E12               	movwf	I2C_Master_Write@d,c
  5448  0008E2  EC2F  F00F         	call	_I2C_Master_Write	;wreg free
  5449                           
  5450                           ;main.c: 300: I2C_Master_Stop();
  5451  0008E6  EC34  F00F         	call	_I2C_Master_Stop	;wreg free
  5452                           
  5453                           ;main.c: 303: I2C_Master_Start();
  5454  0008EA  EC38  F00F         	call	_I2C_Master_Start	;wreg free
  5455                           
  5456                           ;main.c: 304: I2C_Master_Write(0b11010001);
  5457  0008EE  0E00               	movlw	0
  5458  0008F0  6E13               	movwf	I2C_Master_Write@d+1,c
  5459  0008F2  0ED1               	movlw	209
  5460  0008F4  6E12               	movwf	I2C_Master_Write@d,c
  5461  0008F6  EC2F  F00F         	call	_I2C_Master_Write	;wreg free
  5462                           
  5463                           ;main.c: 305: for(unsigned char i=0;i<0x06;i++){
  5464  0008FA  0E00               	movlw	0
  5465  0008FC  6E6B               	movwf	date_time@i,c
  5466  0008FE                     l3743:
  5467  0008FE  0E05               	movlw	5
  5468  000900  646B               	cpfsgt	date_time@i,c
  5469  000902  D001               	goto	l3747
  5470  000904  D010               	goto	l3753
  5471  000906                     l3747:
  5472                           
  5473                           ;main.c: 306: time[i] = I2C_Master_Read(1);
  5474  000906  506B               	movf	date_time@i,w,c
  5475  000908  0D01               	mullw	1
  5476  00090A  50F3               	movf	prodl,w,c
  5477  00090C  0100               	movlb	0	; () banked
  5478  00090E  25C2               	addwf	date_time@time& (0+255),w,b
  5479  000910  6ED9               	movwf	fsr2l,c
  5480  000912  50F4               	movf	prodh,w,c
  5481  000914  0100               	movlb	0	; () banked
  5482  000916  21C3               	addwfc	(date_time@time+1)& (0+255),w,b
  5483  000918  6EDA               	movwf	fsr2h,c
  5484  00091A  0E01               	movlw	1
  5485  00091C  ECC7  F00E         	call	_I2C_Master_Read
  5486  000920  6EDF               	movwf	indf2,c
  5487  000922  2A6B               	incf	date_time@i,f,c
  5488  000924  D7EC               	goto	l3743
  5489  000926                     l3753:
  5490                           
  5491                           ;main.c: 307: }
  5492                           ;main.c: 308: time[6] = I2C_Master_Read(0);
  5493  000926  0100               	movlb	0	; () banked
  5494  000928  EE20 F006          	lfsr	2,6
  5495  00092C  51C2               	movf	date_time@time& (0+255),w,b
  5496  00092E  26D9               	addwf	fsr2l,f,c
  5497  000930  51C3               	movf	(date_time@time+1)& (0+255),w,b
  5498  000932  22DA               	addwfc	fsr2h,f,c
  5499  000934  0E00               	movlw	0
  5500  000936  ECC7  F00E         	call	_I2C_Master_Read
  5501  00093A  6EDF               	movwf	indf2,c
  5502                           
  5503                           ;main.c: 309: I2C_Master_Stop();
  5504  00093C  EC34  F00F         	call	_I2C_Master_Stop	;wreg free
  5505                           
  5506                           ;main.c: 312: lcdInst(0b10000000);;
  5507  000940  0E80               	movlw	128
  5508  000942  EC29  F00F         	call	_lcdInst
  5509                           
  5510                           ;main.c: 313: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  5511  000946  0EEF               	movlw	low STR_18
  5512  000948  0100               	movlb	0	; () banked
  5513  00094A  6FAC               	movwf	printf@f& (0+255),b
  5514  00094C  0EFE               	movlw	high STR_18
  5515  00094E  0100               	movlb	0	; () banked
  5516  000950  6FAD               	movwf	(printf@f+1)& (0+255),b
  5517  000952  0100               	movlb	0	; () banked
  5518  000954  EE20 F005          	lfsr	2,5
  5519  000958  51C2               	movf	date_time@time& (0+255),w,b
  5520  00095A  26D9               	addwf	fsr2l,f,c
  5521  00095C  51C3               	movf	(date_time@time+1)& (0+255),w,b
  5522  00095E  22DA               	addwfc	fsr2h,f,c
  5523  000960  50DF               	movf	indf2,w,c
  5524  000962  0100               	movlb	0	; () banked
  5525  000964  6FC4               	movwf	??_date_time& (0+255),b
  5526  000966  0100               	movlb	0	; () banked
  5527  000968  51C4               	movf	??_date_time& (0+255),w,b
  5528  00096A  0100               	movlb	0	; () banked
  5529  00096C  6FAE               	movwf	(?_printf+2)& (0+255),b
  5530  00096E  6BAF               	clrf	(?_printf+3)& (0+255),b
  5531  000970  0100               	movlb	0	; () banked
  5532  000972  EE20 F004          	lfsr	2,4
  5533  000976  51C2               	movf	date_time@time& (0+255),w,b
  5534  000978  26D9               	addwf	fsr2l,f,c
  5535  00097A  51C3               	movf	(date_time@time+1)& (0+255),w,b
  5536  00097C  22DA               	addwfc	fsr2h,f,c
  5537  00097E  50DF               	movf	indf2,w,c
  5538  000980  0100               	movlb	0	; () banked
  5539  000982  6FC5               	movwf	(??_date_time+1)& (0+255),b
  5540  000984  0100               	movlb	0	; () banked
  5541  000986  51C5               	movf	(??_date_time+1)& (0+255),w,b
  5542  000988  0100               	movlb	0	; () banked
  5543  00098A  6FB0               	movwf	(?_printf+4)& (0+255),b
  5544  00098C  6BB1               	clrf	(?_printf+5)& (0+255),b
  5545  00098E  0100               	movlb	0	; () banked
  5546  000990  EE20 F006          	lfsr	2,6
  5547  000994  51C2               	movf	date_time@time& (0+255),w,b
  5548  000996  26D9               	addwf	fsr2l,f,c
  5549  000998  51C3               	movf	(date_time@time+1)& (0+255),w,b
  5550  00099A  22DA               	addwfc	fsr2h,f,c
  5551  00099C  50DF               	movf	indf2,w,c
  5552  00099E  0100               	movlb	0	; () banked
  5553  0009A0  6FC6               	movwf	(??_date_time+2)& (0+255),b
  5554  0009A2  0100               	movlb	0	; () banked
  5555  0009A4  51C6               	movf	(??_date_time+2)& (0+255),w,b
  5556  0009A6  0100               	movlb	0	; () banked
  5557  0009A8  6FB2               	movwf	(?_printf+6)& (0+255),b
  5558  0009AA  6BB3               	clrf	(?_printf+7)& (0+255),b
  5559  0009AC  EC09  F000         	call	_printf	;wreg free
  5560                           
  5561                           ;main.c: 314: lcdInst(0b11000000);;
  5562  0009B0  0EC0               	movlw	192
  5563  0009B2  EC29  F00F         	call	_lcdInst
  5564                           
  5565                           ;main.c: 315: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  5566  0009B6  0E06               	movlw	low STR_19
  5567  0009B8  0100               	movlb	0	; () banked
  5568  0009BA  6FAC               	movwf	printf@f& (0+255),b
  5569  0009BC  0EFF               	movlw	high STR_19
  5570  0009BE  0100               	movlb	0	; () banked
  5571  0009C0  6FAD               	movwf	(printf@f+1)& (0+255),b
  5572  0009C2  0100               	movlb	0	; () banked
  5573  0009C4  EE20 F002          	lfsr	2,2
  5574  0009C8  51C2               	movf	date_time@time& (0+255),w,b
  5575  0009CA  26D9               	addwf	fsr2l,f,c
  5576  0009CC  51C3               	movf	(date_time@time+1)& (0+255),w,b
  5577  0009CE  22DA               	addwfc	fsr2h,f,c
  5578  0009D0  50DF               	movf	indf2,w,c
  5579  0009D2  0100               	movlb	0	; () banked
  5580  0009D4  6FC4               	movwf	??_date_time& (0+255),b
  5581  0009D6  0100               	movlb	0	; () banked
  5582  0009D8  51C4               	movf	??_date_time& (0+255),w,b
  5583  0009DA  0100               	movlb	0	; () banked
  5584  0009DC  6FAE               	movwf	(?_printf+2)& (0+255),b
  5585  0009DE  6BAF               	clrf	(?_printf+3)& (0+255),b
  5586  0009E0  0100               	movlb	0	; () banked
  5587  0009E2  EE20 F001          	lfsr	2,1
  5588  0009E6  51C2               	movf	date_time@time& (0+255),w,b
  5589  0009E8  26D9               	addwf	fsr2l,f,c
  5590  0009EA  51C3               	movf	(date_time@time+1)& (0+255),w,b
  5591  0009EC  22DA               	addwfc	fsr2h,f,c
  5592  0009EE  50DF               	movf	indf2,w,c
  5593  0009F0  0100               	movlb	0	; () banked
  5594  0009F2  6FC5               	movwf	(??_date_time+1)& (0+255),b
  5595  0009F4  0100               	movlb	0	; () banked
  5596  0009F6  51C5               	movf	(??_date_time+1)& (0+255),w,b
  5597  0009F8  0100               	movlb	0	; () banked
  5598  0009FA  6FB0               	movwf	(?_printf+4)& (0+255),b
  5599  0009FC  6BB1               	clrf	(?_printf+5)& (0+255),b
  5600  0009FE  C0C2  FFD9         	movff	date_time@time,fsr2l
  5601  000A02  C0C3  FFDA         	movff	date_time@time+1,fsr2h
  5602  000A06  50DF               	movf	indf2,w,c
  5603  000A08  0100               	movlb	0	; () banked
  5604  000A0A  6FC6               	movwf	(??_date_time+2)& (0+255),b
  5605  000A0C  0100               	movlb	0	; () banked
  5606  000A0E  51C6               	movf	(??_date_time+2)& (0+255),w,b
  5607  000A10  0100               	movlb	0	; () banked
  5608  000A12  6FB2               	movwf	(?_printf+6)& (0+255),b
  5609  000A14  6BB3               	clrf	(?_printf+7)& (0+255),b
  5610  000A16  EC09  F000         	call	_printf	;wreg free
  5611  000A1A  0012               	return	
  5612  000A1C                     __end_of_date_time:
  5613                           	opt stack 0
  5614                           tblptru	equ	0xFF8
  5615                           tblptrh	equ	0xFF7
  5616                           tblptrl	equ	0xFF6
  5617                           tablat	equ	0xFF5
  5618                           prodh	equ	0xFF4
  5619                           prodl	equ	0xFF3
  5620                           intcon	equ	0xFF2
  5621                           intcon2	equ	0xFF1
  5622                           intcon3	equ	0xFF0
  5623                           wreg	equ	0xFE8
  5624                           indf2	equ	0xFDF
  5625                           postinc2	equ	0xFDE
  5626                           postdec2	equ	0xFDD
  5627                           fsr2h	equ	0xFDA
  5628                           fsr2l	equ	0xFD9
  5629                           status	equ	0xFD8
  5630                           
  5631 ;; *************** function _I2C_Master_Write *****************
  5632 ;; Defined at:
  5633 ;;		line 47 in file "I2C.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;  d               2   17[COMRAM] unsigned int 
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;		None
  5638 ;; Return value:  Size  Location     Type
  5639 ;;                  1    wreg      void 
  5640 ;; Registers used:
  5641 ;;		wreg, status,2, status,0, cstack
  5642 ;; Tracked objects:
  5643 ;;		On entry : 0/0
  5644 ;;		On exit  : 0/0
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5647 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5650 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5651 ;;Total ram usage:        2 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; Hardware stack levels required when called:    2
  5654 ;; This function calls:
  5655 ;;		_I2C_Master_Wait
  5656 ;; This function is called by:
  5657 ;;		_update_time
  5658 ;;		_date_time
  5659 ;;		_set_time
  5660 ;; This function uses a non-reentrant model
  5661 ;;
  5662                           
  5663                           	psect	text29
  5664  001E5E                     __ptext29:
  5665                           	opt stack 0
  5666  001E5E                     _I2C_Master_Write:
  5667                           	opt stack 27
  5668                           
  5669                           ;I2C.c: 49: I2C_Master_Wait();
  5670                           
  5671                           ;incstack = 0
  5672  001E5E  EC1A  F00F         	call	_I2C_Master_Wait	;wreg free
  5673                           
  5674                           ;I2C.c: 50: SSPBUF = d;
  5675  001E62  C012  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5676  001E66  0012               	return		;funcret
  5677  001E68                     __end_of_I2C_Master_Write:
  5678                           	opt stack 0
  5679                           tblptru	equ	0xFF8
  5680                           tblptrh	equ	0xFF7
  5681                           tblptrl	equ	0xFF6
  5682                           tablat	equ	0xFF5
  5683                           prodh	equ	0xFF4
  5684                           prodl	equ	0xFF3
  5685                           intcon	equ	0xFF2
  5686                           intcon2	equ	0xFF1
  5687                           intcon3	equ	0xFF0
  5688                           wreg	equ	0xFE8
  5689                           indf2	equ	0xFDF
  5690                           postinc2	equ	0xFDE
  5691                           postdec2	equ	0xFDD
  5692                           fsr2h	equ	0xFDA
  5693                           fsr2l	equ	0xFD9
  5694                           status	equ	0xFD8
  5695                           
  5696 ;; *************** function _I2C_Master_Stop *****************
  5697 ;; Defined at:
  5698 ;;		line 41 in file "I2C.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;		None
  5701 ;; Auto vars:     Size  Location     Type
  5702 ;;		None
  5703 ;; Return value:  Size  Location     Type
  5704 ;;                  2   62[None  ] int 
  5705 ;; Registers used:
  5706 ;;		wreg, status,2, status,0, cstack
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;Total ram usage:        0 bytes
  5717 ;; Hardware stack levels used:    1
  5718 ;; Hardware stack levels required when called:    2
  5719 ;; This function calls:
  5720 ;;		_I2C_Master_Wait
  5721 ;; This function is called by:
  5722 ;;		_update_time
  5723 ;;		_date_time
  5724 ;;		_set_time
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           	psect	text30
  5729  001E68                     __ptext30:
  5730                           	opt stack 0
  5731  001E68                     _I2C_Master_Stop:
  5732                           	opt stack 27
  5733                           
  5734                           ;I2C.c: 43: I2C_Master_Wait();
  5735                           
  5736                           ;incstack = 0
  5737  001E68  EC1A  F00F         	call	_I2C_Master_Wait	;wreg free
  5738                           
  5739                           ;I2C.c: 44: PEN = 1;
  5740  001E6C  84C5               	bsf	4037,2,c	;volatile
  5741  001E6E  0012               	return		;funcret
  5742  001E70                     __end_of_I2C_Master_Stop:
  5743                           	opt stack 0
  5744                           tblptru	equ	0xFF8
  5745                           tblptrh	equ	0xFF7
  5746                           tblptrl	equ	0xFF6
  5747                           tablat	equ	0xFF5
  5748                           prodh	equ	0xFF4
  5749                           prodl	equ	0xFF3
  5750                           intcon	equ	0xFF2
  5751                           intcon2	equ	0xFF1
  5752                           intcon3	equ	0xFF0
  5753                           wreg	equ	0xFE8
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           postdec2	equ	0xFDD
  5757                           fsr2h	equ	0xFDA
  5758                           fsr2l	equ	0xFD9
  5759                           status	equ	0xFD8
  5760                           
  5761 ;; *************** function _I2C_Master_Start *****************
  5762 ;; Defined at:
  5763 ;;		line 29 in file "I2C.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;		None
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  2   58[None  ] int 
  5770 ;; Registers used:
  5771 ;;		wreg, status,2, status,0, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;Total ram usage:        0 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    2
  5784 ;; This function calls:
  5785 ;;		_I2C_Master_Wait
  5786 ;; This function is called by:
  5787 ;;		_update_time
  5788 ;;		_date_time
  5789 ;;		_set_time
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           	psect	text31
  5794  001E70                     __ptext31:
  5795                           	opt stack 0
  5796  001E70                     _I2C_Master_Start:
  5797                           	opt stack 27
  5798                           
  5799                           ;I2C.c: 31: I2C_Master_Wait();
  5800                           
  5801                           ;incstack = 0
  5802  001E70  EC1A  F00F         	call	_I2C_Master_Wait	;wreg free
  5803                           
  5804                           ;I2C.c: 32: SEN = 1;
  5805  001E74  80C5               	bsf	4037,0,c	;volatile
  5806  001E76  0012               	return		;funcret
  5807  001E78                     __end_of_I2C_Master_Start:
  5808                           	opt stack 0
  5809                           tblptru	equ	0xFF8
  5810                           tblptrh	equ	0xFF7
  5811                           tblptrl	equ	0xFF6
  5812                           tablat	equ	0xFF5
  5813                           prodh	equ	0xFF4
  5814                           prodl	equ	0xFF3
  5815                           intcon	equ	0xFF2
  5816                           intcon2	equ	0xFF1
  5817                           intcon3	equ	0xFF0
  5818                           wreg	equ	0xFE8
  5819                           indf2	equ	0xFDF
  5820                           postinc2	equ	0xFDE
  5821                           postdec2	equ	0xFDD
  5822                           fsr2h	equ	0xFDA
  5823                           fsr2l	equ	0xFD9
  5824                           status	equ	0xFD8
  5825                           
  5826 ;; *************** function _I2C_Master_Read *****************
  5827 ;; Defined at:
  5828 ;;		line 53 in file "I2C.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;  a               1    wreg     unsigned char 
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;  a               1   17[COMRAM] unsigned char 
  5833 ;;  temp            1   18[COMRAM] unsigned char 
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      unsigned char 
  5836 ;; Registers used:
  5837 ;;		wreg, status,2, status,0, cstack
  5838 ;; Tracked objects:
  5839 ;;		On entry : 0/0
  5840 ;;		On exit  : 0/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5846 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5847 ;;Total ram usage:        2 bytes
  5848 ;; Hardware stack levels used:    1
  5849 ;; Hardware stack levels required when called:    2
  5850 ;; This function calls:
  5851 ;;		_I2C_Master_Wait
  5852 ;; This function is called by:
  5853 ;;		_update_time
  5854 ;;		_date_time
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           	psect	text32
  5859  001D8E                     __ptext32:
  5860                           	opt stack 0
  5861  001D8E                     _I2C_Master_Read:
  5862                           	opt stack 27
  5863                           
  5864                           ;incstack = 0
  5865                           ;I2C_Master_Read@a stored from wreg
  5866  001D8E  6E12               	movwf	I2C_Master_Read@a,c
  5867                           
  5868                           ;I2C.c: 55: unsigned char temp;
  5869                           ;I2C.c: 56: I2C_Master_Wait();
  5870  001D90  EC1A  F00F         	call	_I2C_Master_Wait	;wreg free
  5871                           
  5872                           ;I2C.c: 57: RCEN = 1;
  5873  001D94  86C5               	bsf	4037,3,c	;volatile
  5874                           
  5875                           ;I2C.c: 58: I2C_Master_Wait();
  5876  001D96  EC1A  F00F         	call	_I2C_Master_Wait	;wreg free
  5877                           
  5878                           ;I2C.c: 59: temp = SSPBUF;
  5879  001D9A  CFC9 F013          	movff	4041,I2C_Master_Read@temp	;volatile
  5880                           
  5881                           ;I2C.c: 60: I2C_Master_Wait();
  5882  001D9E  EC1A  F00F         	call	_I2C_Master_Wait	;wreg free
  5883                           
  5884                           ;I2C.c: 61: ACKDT = (a)?0:1;
  5885  001DA2  5012               	movf	I2C_Master_Read@a,w,c
  5886  001DA4  A4D8               	btfss	status,2,c
  5887  001DA6  D002               	goto	u3090
  5888  001DA8  8AC5               	bsf	4037,5,c	;volatile
  5889  001DAA  D001               	goto	l3453
  5890  001DAC                     u3090:
  5891  001DAC  9AC5               	bcf	4037,5,c	;volatile
  5892  001DAE                     l3453:
  5893                           
  5894                           ;I2C.c: 62: ACKEN = 1;
  5895  001DAE  88C5               	bsf	4037,4,c	;volatile
  5896                           
  5897                           ;I2C.c: 63: return temp;
  5898  001DB0  5013               	movf	I2C_Master_Read@temp,w,c
  5899  001DB2  0012               	return	
  5900  001DB4                     __end_of_I2C_Master_Read:
  5901                           	opt stack 0
  5902                           tblptru	equ	0xFF8
  5903                           tblptrh	equ	0xFF7
  5904                           tblptrl	equ	0xFF6
  5905                           tablat	equ	0xFF5
  5906                           prodh	equ	0xFF4
  5907                           prodl	equ	0xFF3
  5908                           intcon	equ	0xFF2
  5909                           intcon2	equ	0xFF1
  5910                           intcon3	equ	0xFF0
  5911                           wreg	equ	0xFE8
  5912                           indf2	equ	0xFDF
  5913                           postinc2	equ	0xFDE
  5914                           postdec2	equ	0xFDD
  5915                           fsr2h	equ	0xFDA
  5916                           fsr2l	equ	0xFD9
  5917                           status	equ	0xFD8
  5918                           
  5919 ;; *************** function _I2C_Master_Wait *****************
  5920 ;; Defined at:
  5921 ;;		line 24 in file "I2C.c"
  5922 ;; Parameters:    Size  Location     Type
  5923 ;;		None
  5924 ;; Auto vars:     Size  Location     Type
  5925 ;;		None
  5926 ;; Return value:  Size  Location     Type
  5927 ;;                  1    wreg      void 
  5928 ;; Registers used:
  5929 ;;		wreg, status,2, status,0
  5930 ;; Tracked objects:
  5931 ;;		On entry : 0/0
  5932 ;;		On exit  : 0/0
  5933 ;;		Unchanged: 0/0
  5934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5937 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5938 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5939 ;;Total ram usage:        1 bytes
  5940 ;; Hardware stack levels used:    1
  5941 ;; Hardware stack levels required when called:    1
  5942 ;; This function calls:
  5943 ;;		Nothing
  5944 ;; This function is called by:
  5945 ;;		_I2C_Master_Start
  5946 ;;		_I2C_Master_Stop
  5947 ;;		_I2C_Master_Write
  5948 ;;		_I2C_Master_Read
  5949 ;;		_I2C_Master_RepeatedStart
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           	psect	text33
  5954  001E34                     __ptext33:
  5955                           	opt stack 0
  5956  001E34                     _I2C_Master_Wait:
  5957                           	opt stack 27
  5958  001E34                     l220:
  5959  001E34  B4C7               	btfsc	4039,2,c	;volatile
  5960  001E36  D7FE               	goto	l220
  5961  001E38  CFC5 F011          	movff	4037,??_I2C_Master_Wait	;volatile
  5962  001E3C  0E1F               	movlw	31
  5963  001E3E  1611               	andwf	??_I2C_Master_Wait,f,c
  5964  001E40  B4D8               	btfsc	status,2,c
  5965  001E42  0012               	return	
  5966  001E44  D7F7               	goto	l220
  5967  001E46                     __end_of_I2C_Master_Wait:
  5968                           	opt stack 0
  5969                           tblptru	equ	0xFF8
  5970                           tblptrh	equ	0xFF7
  5971                           tblptrl	equ	0xFF6
  5972                           tablat	equ	0xFF5
  5973                           prodh	equ	0xFF4
  5974                           prodl	equ	0xFF3
  5975                           intcon	equ	0xFF2
  5976                           intcon2	equ	0xFF1
  5977                           intcon3	equ	0xFF0
  5978                           wreg	equ	0xFE8
  5979                           indf2	equ	0xFDF
  5980                           postinc2	equ	0xFDE
  5981                           postdec2	equ	0xFDD
  5982                           fsr2h	equ	0xFDA
  5983                           fsr2l	equ	0xFD9
  5984                           status	equ	0xFD8
  5985                           
  5986 ;; *************** function _bottle_count *****************
  5987 ;; Defined at:
  5988 ;;		line 246 in file "main.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;		None
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;		None
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  1    wreg      void 
  5995 ;; Registers used:
  5996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/0
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6005 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;Total ram usage:        2 bytes
  6007 ;; Hardware stack levels used:    1
  6008 ;; Hardware stack levels required when called:    4
  6009 ;; This function calls:
  6010 ;;		_lcdInst
  6011 ;;		_printf
  6012 ;; This function is called by:
  6013 ;;		_main
  6014 ;; This function uses a non-reentrant model
  6015 ;;
  6016                           
  6017                           	psect	text34
  6018  000B54                     __ptext34:
  6019                           	opt stack 0
  6020  000B54                     _bottle_count:
  6021                           	opt stack 26
  6022                           
  6023                           ;main.c: 247: while (bot_type != O){
  6024                           
  6025                           ;incstack = 0
  6026  000B54  D08F               	goto	l3805
  6027  000B56                     l3769:
  6028                           
  6029                           ;main.c: 250: lcdInst(0b10000000);;
  6030  000B56  0E80               	movlw	128
  6031  000B58  EC29  F00F         	call	_lcdInst
  6032                           
  6033                           ;main.c: 251: printf("Total Bottle    ");
  6034  000B5C  0E76               	movlw	low STR_6
  6035  000B5E  0100               	movlb	0	; () banked
  6036  000B60  6FAC               	movwf	printf@f& (0+255),b
  6037  000B62  0EFF               	movlw	high STR_6
  6038  000B64  0100               	movlb	0	; () banked
  6039  000B66  6FAD               	movwf	(printf@f+1)& (0+255),b
  6040  000B68  EC09  F000         	call	_printf	;wreg free
  6041                           
  6042                           ;main.c: 252: lcdInst(0b11000000);;
  6043  000B6C  0EC0               	movlw	192
  6044  000B6E  EC29  F00F         	call	_lcdInst
  6045                           
  6046                           ;main.c: 253: printf("Count: __       ");
  6047  000B72  0E65               	movlw	low STR_7
  6048  000B74  0100               	movlb	0	; () banked
  6049  000B76  6FAC               	movwf	printf@f& (0+255),b
  6050  000B78  0EFF               	movlw	high STR_7
  6051  000B7A  0100               	movlb	0	; () banked
  6052  000B7C  6FAD               	movwf	(printf@f+1)& (0+255),b
  6053  000B7E  EC09  F000         	call	_printf	;wreg free
  6054                           
  6055                           ;main.c: 254: break;
  6056  000B82  D06D               	goto	l3803
  6057  000B84                     l3775:
  6058                           
  6059                           ;main.c: 256: lcdInst(0b10000000);;
  6060  000B84  0E80               	movlw	128
  6061  000B86  EC29  F00F         	call	_lcdInst
  6062                           
  6063                           ;main.c: 257: printf("YOP With Cap    ");
  6064  000B8A  0E87               	movlw	low STR_8
  6065  000B8C  0100               	movlb	0	; () banked
  6066  000B8E  6FAC               	movwf	printf@f& (0+255),b
  6067  000B90  0EFF               	movlw	high STR_8
  6068  000B92  0100               	movlb	0	; () banked
  6069  000B94  6FAD               	movwf	(printf@f+1)& (0+255),b
  6070  000B96  EC09  F000         	call	_printf	;wreg free
  6071                           
  6072                           ;main.c: 258: lcdInst(0b11000000);;
  6073  000B9A  0EC0               	movlw	192
  6074  000B9C  EC29  F00F         	call	_lcdInst
  6075                           
  6076                           ;main.c: 259: printf("Count: __       ");
  6077  000BA0  0E65               	movlw	low STR_7
  6078  000BA2  0100               	movlb	0	; () banked
  6079  000BA4  6FAC               	movwf	printf@f& (0+255),b
  6080  000BA6  0EFF               	movlw	high STR_7
  6081  000BA8  0100               	movlb	0	; () banked
  6082  000BAA  6FAD               	movwf	(printf@f+1)& (0+255),b
  6083  000BAC  EC09  F000         	call	_printf	;wreg free
  6084                           
  6085                           ;main.c: 260: break;
  6086  000BB0  D056               	goto	l3803
  6087  000BB2                     l3781:
  6088                           
  6089                           ;main.c: 262: lcdInst(0b10000000);;
  6090  000BB2  0E80               	movlw	128
  6091  000BB4  EC29  F00F         	call	_lcdInst
  6092                           
  6093                           ;main.c: 263: printf("YOP With No Cap ");
  6094  000BB8  0ECB               	movlw	low STR_10
  6095  000BBA  0100               	movlb	0	; () banked
  6096  000BBC  6FAC               	movwf	printf@f& (0+255),b
  6097  000BBE  0EFF               	movlw	high STR_10
  6098  000BC0  0100               	movlb	0	; () banked
  6099  000BC2  6FAD               	movwf	(printf@f+1)& (0+255),b
  6100  000BC4  EC09  F000         	call	_printf	;wreg free
  6101                           
  6102                           ;main.c: 264: lcdInst(0b11000000);;
  6103  000BC8  0EC0               	movlw	192
  6104  000BCA  EC29  F00F         	call	_lcdInst
  6105                           
  6106                           ;main.c: 265: printf("Count: __       ");
  6107  000BCE  0E65               	movlw	low STR_7
  6108  000BD0  0100               	movlb	0	; () banked
  6109  000BD2  6FAC               	movwf	printf@f& (0+255),b
  6110  000BD4  0EFF               	movlw	high STR_7
  6111  000BD6  0100               	movlb	0	; () banked
  6112  000BD8  6FAD               	movwf	(printf@f+1)& (0+255),b
  6113  000BDA  EC09  F000         	call	_printf	;wreg free
  6114                           
  6115                           ;main.c: 266: break;
  6116  000BDE  D03F               	goto	l3803
  6117  000BE0                     l3787:
  6118                           
  6119                           ;main.c: 268: lcdInst(0b10000000);;
  6120  000BE0  0E80               	movlw	128
  6121  000BE2  EC29  F00F         	call	_lcdInst
  6122                           
  6123                           ;main.c: 269: printf("ESKA With Cap   ");
  6124  000BE6  0E98               	movlw	low STR_12
  6125  000BE8  0100               	movlb	0	; () banked
  6126  000BEA  6FAC               	movwf	printf@f& (0+255),b
  6127  000BEC  0EFF               	movlw	high STR_12
  6128  000BEE  0100               	movlb	0	; () banked
  6129  000BF0  6FAD               	movwf	(printf@f+1)& (0+255),b
  6130  000BF2  EC09  F000         	call	_printf	;wreg free
  6131                           
  6132                           ;main.c: 270: lcdInst(0b11000000);;
  6133  000BF6  0EC0               	movlw	192
  6134  000BF8  EC29  F00F         	call	_lcdInst
  6135                           
  6136                           ;main.c: 271: printf("Count: __       ");
  6137  000BFC  0E65               	movlw	low STR_7
  6138  000BFE  0100               	movlb	0	; () banked
  6139  000C00  6FAC               	movwf	printf@f& (0+255),b
  6140  000C02  0EFF               	movlw	high STR_7
  6141  000C04  0100               	movlb	0	; () banked
  6142  000C06  6FAD               	movwf	(printf@f+1)& (0+255),b
  6143  000C08  EC09  F000         	call	_printf	;wreg free
  6144                           
  6145                           ;main.c: 272: break;
  6146  000C0C  D028               	goto	l3803
  6147  000C0E                     l3793:
  6148                           
  6149                           ;main.c: 274: lcdInst(0b10000000);;
  6150  000C0E  0E80               	movlw	128
  6151  000C10  EC29  F00F         	call	_lcdInst
  6152                           
  6153                           ;main.c: 275: printf("ESKA With No Cap");
  6154  000C14  0EED               	movlw	low STR_14
  6155  000C16  0100               	movlb	0	; () banked
  6156  000C18  6FAC               	movwf	printf@f& (0+255),b
  6157  000C1A  0EFF               	movlw	high STR_14
  6158  000C1C  0100               	movlb	0	; () banked
  6159  000C1E  6FAD               	movwf	(printf@f+1)& (0+255),b
  6160  000C20  EC09  F000         	call	_printf	;wreg free
  6161                           
  6162                           ;main.c: 276: lcdInst(0b11000000);;
  6163  000C24  0EC0               	movlw	192
  6164  000C26  EC29  F00F         	call	_lcdInst
  6165                           
  6166                           ;main.c: 277: printf("Count: __       ");
  6167  000C2A  0E65               	movlw	low STR_7
  6168  000C2C  0100               	movlb	0	; () banked
  6169  000C2E  6FAC               	movwf	printf@f& (0+255),b
  6170  000C30  0EFF               	movlw	high STR_7
  6171  000C32  0100               	movlb	0	; () banked
  6172  000C34  6FAD               	movwf	(printf@f+1)& (0+255),b
  6173  000C36  EC09  F000         	call	_printf	;wreg free
  6174                           
  6175                           ;main.c: 279: }
  6176                           
  6177                           ;main.c: 278: break;
  6178  000C3A  D011               	goto	l3803
  6179  000C3C                     l3801:
  6180  000C3C  0100               	movlb	0	; () banked
  6181  000C3E  51DE               	movf	_bot_type& (0+255),w,b
  6182                           
  6183                           ; Switch size 1, requested type "space"
  6184                           ; Number of cases is 5, Range of values is 0 to 4
  6185                           ; switch strategies available:
  6186                           ; Name         Instructions Cycles
  6187                           ; simple_byte           16     9 (average)
  6188                           ;	Chosen strategy is simple_byte
  6189  000C40  0A00               	xorlw	0	; case 0
  6190  000C42  B4D8               	btfsc	status,2,c
  6191  000C44  D788               	goto	l3769
  6192  000C46  0A01               	xorlw	1	; case 1
  6193  000C48  B4D8               	btfsc	status,2,c
  6194  000C4A  D79C               	goto	l3775
  6195  000C4C  0A03               	xorlw	3	; case 2
  6196  000C4E  B4D8               	btfsc	status,2,c
  6197  000C50  D7B0               	goto	l3781
  6198  000C52  0A01               	xorlw	1	; case 3
  6199  000C54  B4D8               	btfsc	status,2,c
  6200  000C56  D7C4               	goto	l3787
  6201  000C58  0A07               	xorlw	7	; case 4
  6202  000C5A  B4D8               	btfsc	status,2,c
  6203  000C5C  D7D8               	goto	l3793
  6204  000C5E                     l3803:
  6205                           
  6206                           ;main.c: 280: _delay((unsigned long)((100)*(10000000/4000.0)));
  6207  000C5E  0E02               	movlw	2
  6208  000C60  6E6C               	movwf	(??_bottle_count+1)& (0+255),c
  6209  000C62  0E45               	movlw	69
  6210  000C64  6E6B               	movwf	??_bottle_count& (0+255),c
  6211  000C66  0EAA               	movlw	170
  6212  000C68                     u3577:
  6213  000C68  2EE8               	decfsz	wreg,f,c
  6214  000C6A  D7FE               	bra	u3577
  6215  000C6C  2E6B               	decfsz	??_bottle_count& (0+255),f,c
  6216  000C6E  D7FC               	bra	u3577
  6217  000C70  2E6C               	decfsz	(??_bottle_count+1)& (0+255),f,c
  6218  000C72  D7FA               	bra	u3577
  6219  000C74                     l3805:
  6220  000C74  0E05               	movlw	5
  6221  000C76  0100               	movlb	0	; () banked
  6222  000C78  19DE               	xorwf	_bot_type& (0+255),w,b
  6223  000C7A  B4D8               	btfsc	status,2,c
  6224  000C7C  0012               	return	
  6225  000C7E  D7DE               	goto	l3801
  6226  000C80                     __end_of_bottle_count:
  6227                           	opt stack 0
  6228                           tblptru	equ	0xFF8
  6229                           tblptrh	equ	0xFF7
  6230                           tblptrl	equ	0xFF6
  6231                           tablat	equ	0xFF5
  6232                           prodh	equ	0xFF4
  6233                           prodl	equ	0xFF3
  6234                           intcon	equ	0xFF2
  6235                           intcon2	equ	0xFF1
  6236                           intcon3	equ	0xFF0
  6237                           wreg	equ	0xFE8
  6238                           indf2	equ	0xFDF
  6239                           postinc2	equ	0xFDE
  6240                           postdec2	equ	0xFDD
  6241                           fsr2h	equ	0xFDA
  6242                           fsr2l	equ	0xFD9
  6243                           status	equ	0xFD8
  6244                           
  6245 ;; *************** function _printf *****************
  6246 ;; Defined at:
  6247 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;  f               2   44[BANK0 ] PTR const unsigned char 
  6250 ;;		 -> STR_19(23), STR_18(23), STR_17(17), STR_16(17), 
  6251 ;;		 -> STR_15(17), STR_14(17), STR_13(17), STR_12(17), 
  6252 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  6253 ;;		 -> STR_7(17), STR_6(17), STR_5(19), STR_4(17), 
  6254 ;;		 -> STR_3(19), STR_2(17), STR_1(27), 
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;  idx             1   56[BANK0 ] unsigned char 
  6257 ;;  tmpval          4    0        struct .
  6258 ;;  cp              3    0        PTR const unsigned char 
  6259 ;;  width           2   63[BANK0 ] int 
  6260 ;;  val             2   60[BANK0 ] unsigned int 
  6261 ;;  ap              2   57[BANK0 ] PTR void [1]
  6262 ;;		 -> ?_printf(2), 
  6263 ;;  len             2    0        unsigned int 
  6264 ;;  c               1   65[BANK0 ] char 
  6265 ;;  flag            1   62[BANK0 ] unsigned char 
  6266 ;;  prec            1   59[BANK0 ] char 
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  2   44[BANK0 ] int 
  6269 ;; Registers used:
  6270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6276 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6277 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6278 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6279 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6280 ;;Total ram usage:       22 bytes
  6281 ;; Hardware stack levels used:    1
  6282 ;; Hardware stack levels required when called:    3
  6283 ;; This function calls:
  6284 ;;		___lwdiv
  6285 ;;		___lwmod
  6286 ;;		___wmul
  6287 ;;		_isdigit
  6288 ;;		_putch
  6289 ;; This function is called by:
  6290 ;;		_main
  6291 ;;		_init_operation
  6292 ;;		_runtime
  6293 ;;		_bottle_count
  6294 ;;		_operation_end
  6295 ;;		_date_time
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text35
  6300  000012                     __ptext35:
  6301                           	opt stack 0
  6302  000012                     _printf:
  6303                           	opt stack 26
  6304                           
  6305                           ;doprnt.c: 466: va_list ap;
  6306                           ;doprnt.c: 499: signed char c;
  6307                           ;doprnt.c: 501: int width;
  6308                           ;doprnt.c: 506: signed char prec;
  6309                           ;doprnt.c: 508: unsigned char flag;
  6310                           ;doprnt.c: 523: union {
  6311                           ;doprnt.c: 524: unsigned long vd;
  6312                           ;doprnt.c: 525: double integ;
  6313                           ;doprnt.c: 526: } tmpval;
  6314                           ;doprnt.c: 528: unsigned int val;
  6315                           ;doprnt.c: 529: unsigned len;
  6316                           ;doprnt.c: 530: const char * cp;
  6317                           ;doprnt.c: 533: *ap = __va_start();
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;incstack = 0
  6321  000012  0EAE               	movlw	low (?_printf+2)
  6322  000014  0100               	movlb	0	; () banked
  6323  000016  6FB9               	movwf	printf@ap& (0+255),b
  6324  000018  0E00               	movlw	high (?_printf+2)
  6325  00001A  0100               	movlb	0	; () banked
  6326  00001C  6FBA               	movwf	(printf@ap+1)& (0+255),b
  6327                           
  6328                           ;doprnt.c: 536: while(c = *f++) {
  6329  00001E  D1C0               	goto	l3673
  6330  000020                     l3547:
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;doprnt.c: 538: if(c != '%')
  6334  000020  0E25               	movlw	37
  6335  000022  0100               	movlb	0	; () banked
  6336  000024  19C1               	xorwf	printf@c& (0+255),w,b
  6337  000026  B4D8               	btfsc	status,2,c
  6338  000028  D005               	goto	l3551
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;doprnt.c: 540: {
  6342                           ;doprnt.c: 541: (putch(c) );
  6343  00002A  0100               	movlb	0	; () banked
  6344  00002C  51C1               	movf	printf@c& (0+255),w,b
  6345  00002E  EC23  F00F         	call	_putch
  6346                           
  6347                           ;doprnt.c: 542: continue;
  6348  000032  D1B6               	goto	l3673
  6349  000034                     l3551:
  6350                           
  6351                           ;doprnt.c: 543: }
  6352                           ;doprnt.c: 546: width = 0;
  6353  000034  0E00               	movlw	0
  6354  000036  0100               	movlb	0	; () banked
  6355  000038  6FC0               	movwf	(printf@width+1)& (0+255),b
  6356  00003A  0E00               	movlw	0
  6357  00003C  6FBF               	movwf	printf@width& (0+255),b
  6358                           
  6359                           ;doprnt.c: 548: flag = 0;
  6360  00003E  0E00               	movlw	0
  6361  000040  0100               	movlb	0	; () banked
  6362  000042  6FBE               	movwf	printf@flag& (0+255),b
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;doprnt.c: 551: switch(*f) {
  6366                           
  6367                           ;doprnt.c: 550: for(;;) {
  6368  000044  D005               	goto	l3557
  6369  000046                     l3553:
  6370                           
  6371                           ;doprnt.c: 580: flag |= 0x04;
  6372  000046  0100               	movlb	0	; () banked
  6373  000048  85BE               	bsf	printf@flag& (0+255),2,b
  6374                           
  6375                           ;doprnt.c: 581: f++;
  6376  00004A  0100               	movlb	0	; () banked
  6377  00004C  4BAC               	infsnz	printf@f& (0+255),f,b
  6378  00004E  2BAD               	incf	(printf@f+1)& (0+255),f,b
  6379  000050                     l3557:
  6380  000050  C0AC  FFF6         	movff	printf@f,tblptrl
  6381  000054  C0AD  FFF7         	movff	printf@f+1,tblptrh
  6382  000058                     	if	0	;tblptru may be non-zero
  6383  000058                     	endif
  6384  000058                     	if	0	;tblptru may be non-zero
  6385  000058                     	endif
  6386  000058  0008               	tblrd		*
  6387  00005A  50F5               	movf	tablat,w,c
  6388                           
  6389                           ; Switch size 1, requested type "space"
  6390                           ; Number of cases is 1, Range of values is 48 to 48
  6391                           ; switch strategies available:
  6392                           ; Name         Instructions Cycles
  6393                           ; simple_byte            4     3 (average)
  6394                           ;	Chosen strategy is simple_byte
  6395  00005C  0A30               	xorlw	48	; case 48
  6396  00005E  B4D8               	btfsc	status,2,c
  6397  000060  D7F2               	goto	l3553
  6398                           
  6399                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6400                           
  6401                           ;doprnt.c: 586: }
  6402                           
  6403                           ;doprnt.c: 585: break;
  6404  000062  C0AC  FFF6         	movff	printf@f,tblptrl
  6405  000066  C0AD  FFF7         	movff	printf@f+1,tblptrh
  6406  00006A                     	if	0	;tblptru may be non-zero
  6407  00006A                     	endif
  6408  00006A                     	if	0	;tblptru may be non-zero
  6409  00006A                     	endif
  6410  00006A  0008               	tblrd		*
  6411  00006C  50F5               	movf	tablat,w,c
  6412  00006E  ECFF  F00E         	call	_isdigit
  6413  000072  A0D8               	btfss	status,0,c
  6414  000074  D043               	goto	l3575
  6415                           
  6416                           ;doprnt.c: 598: width = 0;
  6417  000076  0E00               	movlw	0
  6418  000078  0100               	movlb	0	; () banked
  6419  00007A  6FC0               	movwf	(printf@width+1)& (0+255),b
  6420  00007C  0E00               	movlw	0
  6421  00007E  6FBF               	movwf	printf@width& (0+255),b
  6422  000080                     l3563:
  6423                           
  6424                           ;doprnt.c: 600: width *= 10;
  6425  000080  C0BF  F011         	movff	printf@width,___wmul@multiplier
  6426  000084  C0C0  F012         	movff	printf@width+1,___wmul@multiplier+1
  6427  000088  0E00               	movlw	0
  6428  00008A  6E14               	movwf	___wmul@multiplicand+1,c
  6429  00008C  0E0A               	movlw	10
  6430  00008E  6E13               	movwf	___wmul@multiplicand,c
  6431  000090  ECDA  F00E         	call	___wmul	;wreg free
  6432  000094  C011  F0BF         	movff	?___wmul,printf@width
  6433  000098  C012  F0C0         	movff	?___wmul+1,printf@width+1
  6434                           
  6435                           ;doprnt.c: 601: width += *f++ - '0';
  6436  00009C  0ED0               	movlw	208
  6437  00009E  0100               	movlb	0	; () banked
  6438  0000A0  6FB4               	movwf	??_printf& (0+255),b
  6439  0000A2  0EFF               	movlw	255
  6440  0000A4  0100               	movlb	0	; () banked
  6441  0000A6  6FB5               	movwf	(??_printf+1)& (0+255),b
  6442  0000A8  C0AC  FFF6         	movff	printf@f,tblptrl
  6443  0000AC  C0AD  FFF7         	movff	printf@f+1,tblptrh
  6444  0000B0                     	if	0	;tblptru may be non-zero
  6445  0000B0                     	endif
  6446  0000B0                     	if	0	;tblptru may be non-zero
  6447  0000B0                     	endif
  6448  0000B0  0008               	tblrd		*
  6449  0000B2  50F5               	movf	tablat,w,c
  6450  0000B4  0100               	movlb	0	; () banked
  6451  0000B6  6FB6               	movwf	(??_printf+2)& (0+255),b
  6452  0000B8  6BB7               	clrf	(??_printf+3)& (0+255),b
  6453  0000BA  0100               	movlb	0	; () banked
  6454  0000BC  51B4               	movf	??_printf& (0+255),w,b
  6455  0000BE  0100               	movlb	0	; () banked
  6456  0000C0  27B6               	addwf	(??_printf+2)& (0+255),f,b
  6457  0000C2  0100               	movlb	0	; () banked
  6458  0000C4  51B5               	movf	(??_printf+1)& (0+255),w,b
  6459  0000C6  0100               	movlb	0	; () banked
  6460  0000C8  23B7               	addwfc	(??_printf+3)& (0+255),f,b
  6461  0000CA  0100               	movlb	0	; () banked
  6462  0000CC  51B6               	movf	(??_printf+2)& (0+255),w,b
  6463  0000CE  0100               	movlb	0	; () banked
  6464  0000D0  27BF               	addwf	printf@width& (0+255),f,b
  6465  0000D2  0100               	movlb	0	; () banked
  6466  0000D4  51B7               	movf	(??_printf+3)& (0+255),w,b
  6467  0000D6  0100               	movlb	0	; () banked
  6468  0000D8  23C0               	addwfc	(printf@width+1)& (0+255),f,b
  6469                           
  6470                           ; BSR set to: 0
  6471  0000DA  0100               	movlb	0	; () banked
  6472  0000DC  4BAC               	infsnz	printf@f& (0+255),f,b
  6473  0000DE  2BAD               	incf	(printf@f+1)& (0+255),f,b
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6477  0000E0  C0AC  FFF6         	movff	printf@f,tblptrl
  6478  0000E4  C0AD  FFF7         	movff	printf@f+1,tblptrh
  6479  0000E8                     	if	0	;tblptru may be non-zero
  6480  0000E8                     	endif
  6481  0000E8                     	if	0	;tblptru may be non-zero
  6482  0000E8                     	endif
  6483  0000E8  0008               	tblrd		*
  6484  0000EA  50F5               	movf	tablat,w,c
  6485  0000EC  ECFF  F00E         	call	_isdigit
  6486  0000F0  A0D8               	btfss	status,0,c
  6487  0000F2  D004               	goto	l3575
  6488  0000F4  D7C5               	goto	l3563
  6489  0000F6                     l3571:
  6490                           
  6491                           ;doprnt.c: 721: flag |= 0x80;
  6492  0000F6  0100               	movlb	0	; () banked
  6493  0000F8  8FBE               	bsf	printf@flag& (0+255),7,b
  6494                           
  6495                           ;doprnt.c: 723: break;
  6496  0000FA  D019               	goto	l276
  6497  0000FC                     l3575:
  6498  0000FC  C0AC  FFF6         	movff	printf@f,tblptrl
  6499  000100  C0AD  FFF7         	movff	printf@f+1,tblptrh
  6500  000104  0100               	movlb	0	; () banked
  6501  000106  4BAC               	infsnz	printf@f& (0+255),f,b
  6502  000108  2BAD               	incf	(printf@f+1)& (0+255),f,b
  6503  00010A                     	if	0	;tblptru may be non-zero
  6504  00010A                     	endif
  6505  00010A                     	if	0	;tblptru may be non-zero
  6506  00010A                     	endif
  6507  00010A  0008               	tblrd		*
  6508  00010C  CFF5 F0C1          	movff	tablat,printf@c
  6509  000110  0100               	movlb	0	; () banked
  6510  000112  51C1               	movf	printf@c& (0+255),w,b
  6511                           
  6512                           ; Switch size 1, requested type "space"
  6513                           ; Number of cases is 4, Range of values is 0 to 120
  6514                           ; switch strategies available:
  6515                           ; Name         Instructions Cycles
  6516                           ; simple_byte           13     7 (average)
  6517                           ;	Chosen strategy is simple_byte
  6518  000114  0A00               	xorlw	0	; case 0
  6519  000116  B4D8               	btfsc	status,2,c
  6520  000118  0012               	return	
  6521  00011A  0A64               	xorlw	100	; case 100
  6522  00011C  B4D8               	btfsc	status,2,c
  6523  00011E  D007               	goto	l276
  6524  000120  0A0D               	xorlw	13	; case 105
  6525  000122  B4D8               	btfsc	status,2,c
  6526  000124  D004               	goto	l276
  6527  000126  0A11               	xorlw	17	; case 120
  6528  000128  B4D8               	btfsc	status,2,c
  6529  00012A  D7E5               	goto	l3571
  6530  00012C  D139               	goto	l3673
  6531  00012E                     l276:
  6532                           
  6533                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6534  00012E  0100               	movlb	0	; () banked
  6535  000130  BFBE               	btfsc	printf@flag& (0+255),7,b
  6536  000132  D019               	goto	l3587
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;doprnt.c: 1253: {
  6540                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6541  000134  C0B9  FFD9         	movff	printf@ap,fsr2l
  6542  000138  C0BA  FFDA         	movff	printf@ap+1,fsr2h
  6543  00013C  CFDE F0BC          	movff	postinc2,printf@val
  6544  000140  CFDD F0BD          	movff	postdec2,printf@val+1
  6545                           
  6546                           ; BSR set to: 0
  6547  000144  0E02               	movlw	2
  6548  000146  0100               	movlb	0	; () banked
  6549  000148  27B9               	addwf	printf@ap& (0+255),f,b
  6550  00014A  0E00               	movlw	0
  6551  00014C  23BA               	addwfc	(printf@ap+1)& (0+255),f,b
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;doprnt.c: 1261: if((int)val < 0) {
  6555  00014E  0100               	movlb	0	; () banked
  6556  000150  AFBD               	btfss	(printf@val+1)& (0+255),7,b
  6557  000152  D053               	goto	l3621
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;doprnt.c: 1262: flag |= 0x03;
  6561  000154  0E03               	movlw	3
  6562  000156  0100               	movlb	0	; () banked
  6563  000158  13BE               	iorwf	printf@flag& (0+255),f,b
  6564                           
  6565                           ; BSR set to: 0
  6566                           ;doprnt.c: 1263: val = -val;
  6567  00015A  0100               	movlb	0	; () banked
  6568  00015C  6DBC               	negf	printf@val& (0+255),b
  6569  00015E  1FBD               	comf	(printf@val+1)& (0+255),f,b
  6570  000160  B0D8               	btfsc	status,0,c
  6571  000162  2BBD               	incf	(printf@val+1)& (0+255),f,b
  6572                           
  6573                           ; BSR set to: 0
  6574                           ;doprnt.c: 1264: }
  6575                           ;doprnt.c: 1266: }
  6576  000164  D04A               	goto	l3621
  6577  000166                     l3587:
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;doprnt.c: 1268: else
  6581                           ;doprnt.c: 1273: {
  6582                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6583  000166  C0B9  FFD9         	movff	printf@ap,fsr2l
  6584  00016A  C0BA  FFDA         	movff	printf@ap+1,fsr2h
  6585  00016E  CFDE F0BC          	movff	postinc2,printf@val
  6586  000172  CFDD F0BD          	movff	postdec2,printf@val+1
  6587                           
  6588                           ; BSR set to: 0
  6589  000176  0E02               	movlw	2
  6590  000178  0100               	movlb	0	; () banked
  6591  00017A  27B9               	addwf	printf@ap& (0+255),f,b
  6592  00017C  0E00               	movlw	0
  6593  00017E  23BA               	addwfc	(printf@ap+1)& (0+255),f,b
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;doprnt.c: 1287: }
  6597                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6598  000180  D03C               	goto	l3621
  6599  000182                     l3591:
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6603  000182  0E01               	movlw	1
  6604  000184  0100               	movlb	0	; () banked
  6605  000186  6FC1               	movwf	printf@c& (0+255),b
  6606  000188                     l3593:
  6607                           
  6608                           ; BSR set to: 0
  6609  000188  0E05               	movlw	5
  6610  00018A  0100               	movlb	0	; () banked
  6611  00018C  19C1               	xorwf	printf@c& (0+255),w,b
  6612  00018E  B4D8               	btfsc	status,2,c
  6613  000190  D03D               	goto	l3623
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;doprnt.c: 1306: if(val < dpowers[c])
  6617                           
  6618                           ; BSR set to: 0
  6619                           
  6620                           ; BSR set to: 0
  6621  000192  0100               	movlb	0	; () banked
  6622  000194  51C1               	movf	printf@c& (0+255),w,b
  6623  000196  0D02               	mullw	2
  6624  000198  0E82               	movlw	low _dpowers
  6625  00019A  24F3               	addwf	prodl,w,c
  6626  00019C  6EF6               	movwf	tblptrl,c
  6627  00019E  0EFE               	movlw	high _dpowers
  6628  0001A0  20F4               	addwfc	prodh,w,c
  6629  0001A2  6EF7               	movwf	tblptrh,c
  6630  0001A4                     	if	0	;There are less than 3 active tblptr bytes
  6631  0001A4                     	endif
  6632  0001A4  0009               	tblrd		*+
  6633  0001A6  50F5               	movf	tablat,w,c
  6634  0001A8  0100               	movlb	0	; () banked
  6635  0001AA  5DBC               	subwf	printf@val& (0+255),w,b
  6636  0001AC  0009               	tblrd		*+
  6637  0001AE  50F5               	movf	tablat,w,c
  6638  0001B0  0100               	movlb	0	; () banked
  6639  0001B2  59BD               	subwfb	(printf@val+1)& (0+255),w,b
  6640  0001B4  A0D8               	btfss	status,0,c
  6641  0001B6  D02A               	goto	l3623
  6642                           
  6643                           ; BSR set to: 0
  6644                           
  6645                           ; BSR set to: 0
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;doprnt.c: 1307: break;
  6649  0001B8  0100               	movlb	0	; () banked
  6650  0001BA  2BC1               	incf	printf@c& (0+255),f,b
  6651  0001BC  D7E5               	goto	l3593
  6652  0001BE                     l3605:
  6653                           
  6654                           ; BSR set to: 0
  6655                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6656  0001BE  0E01               	movlw	1
  6657  0001C0  0100               	movlb	0	; () banked
  6658  0001C2  6FC1               	movwf	printf@c& (0+255),b
  6659  0001C4                     l3607:
  6660                           
  6661                           ; BSR set to: 0
  6662  0001C4  0E04               	movlw	4
  6663  0001C6  0100               	movlb	0	; () banked
  6664  0001C8  19C1               	xorwf	printf@c& (0+255),w,b
  6665  0001CA  B4D8               	btfsc	status,2,c
  6666  0001CC  D01F               	goto	l3623
  6667                           
  6668                           ; BSR set to: 0
  6669                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6670                           
  6671                           ; BSR set to: 0
  6672                           
  6673                           ; BSR set to: 0
  6674  0001CE  0100               	movlb	0	; () banked
  6675  0001D0  51C1               	movf	printf@c& (0+255),w,b
  6676  0001D2  0D02               	mullw	2
  6677  0001D4  0E8C               	movlw	low _hexpowers
  6678  0001D6  24F3               	addwf	prodl,w,c
  6679  0001D8  6EF6               	movwf	tblptrl,c
  6680  0001DA  0EFE               	movlw	high _hexpowers
  6681  0001DC  20F4               	addwfc	prodh,w,c
  6682  0001DE  6EF7               	movwf	tblptrh,c
  6683  0001E0                     	if	0	;There are less than 3 active tblptr bytes
  6684  0001E0                     	endif
  6685  0001E0  0009               	tblrd		*+
  6686  0001E2  50F5               	movf	tablat,w,c
  6687  0001E4  0100               	movlb	0	; () banked
  6688  0001E6  5DBC               	subwf	printf@val& (0+255),w,b
  6689  0001E8  0009               	tblrd		*+
  6690  0001EA  50F5               	movf	tablat,w,c
  6691  0001EC  0100               	movlb	0	; () banked
  6692  0001EE  59BD               	subwfb	(printf@val+1)& (0+255),w,b
  6693  0001F0  A0D8               	btfss	status,0,c
  6694  0001F2  D00C               	goto	l3623
  6695                           
  6696                           ; BSR set to: 0
  6697                           
  6698                           ; BSR set to: 0
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;doprnt.c: 1318: break;
  6702  0001F4  0100               	movlb	0	; () banked
  6703  0001F6  2BC1               	incf	printf@c& (0+255),f,b
  6704  0001F8  D7E5               	goto	l3607
  6705  0001FA                     l3621:
  6706                           
  6707                           ; BSR set to: 0
  6708  0001FA  0100               	movlb	0	; () banked
  6709  0001FC  51BE               	movf	printf@flag& (0+255),w,b
  6710  0001FE  0B80               	andlw	128
  6711                           
  6712                           ; Switch size 1, requested type "space"
  6713                           ; Number of cases is 2, Range of values is 0 to 128
  6714                           ; switch strategies available:
  6715                           ; Name         Instructions Cycles
  6716                           ; simple_byte            7     4 (average)
  6717                           ;	Chosen strategy is simple_byte
  6718  000200  0A00               	xorlw	0	; case 0
  6719  000202  B4D8               	btfsc	status,2,c
  6720  000204  D7BE               	goto	l3591
  6721  000206  0A80               	xorlw	128	; case 128
  6722  000208  B4D8               	btfsc	status,2,c
  6723  00020A  D7D9               	goto	l3605
  6724  00020C                     l3623:
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6728  00020C  0100               	movlb	0	; () banked
  6729  00020E  51BF               	movf	printf@width& (0+255),w,b
  6730  000210  0100               	movlb	0	; () banked
  6731  000212  11C0               	iorwf	(printf@width+1)& (0+255),w,b
  6732  000214  B4D8               	btfsc	status,2,c
  6733  000216  D00B               	goto	l3629
  6734                           
  6735                           ; BSR set to: 0
  6736  000218  C0BE  F0B4         	movff	printf@flag,??_printf
  6737  00021C  0E03               	movlw	3
  6738  00021E  0100               	movlb	0	; () banked
  6739  000220  17B4               	andwf	??_printf& (0+255),f,b
  6740  000222  B4D8               	btfsc	status,2,c
  6741  000224  D004               	goto	l3629
  6742                           
  6743                           ; BSR set to: 0
  6744                           ;doprnt.c: 1346: width--;
  6745  000226  0100               	movlb	0	; () banked
  6746  000228  07BF               	decf	printf@width& (0+255),f,b
  6747  00022A  A0D8               	btfss	status,0,c
  6748  00022C  07C0               	decf	(printf@width+1)& (0+255),f,b
  6749  00022E                     l3629:
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;doprnt.c: 1381: if(width > c)
  6753  00022E  0E80               	movlw	128
  6754  000230  0100               	movlb	0	; () banked
  6755  000232  BFC1               	btfsc	printf@c& (0+255),7,b
  6756  000234  0E7F               	movlw	127
  6757  000236  0100               	movlb	0	; () banked
  6758  000238  6FB4               	movwf	??_printf& (0+255),b
  6759  00023A  0100               	movlb	0	; () banked
  6760  00023C  51BF               	movf	printf@width& (0+255),w,b
  6761  00023E  0100               	movlb	0	; () banked
  6762  000240  5DC1               	subwf	printf@c& (0+255),w,b
  6763  000242  0100               	movlb	0	; () banked
  6764  000244  51C0               	movf	(printf@width+1)& (0+255),w,b
  6765  000246  0A80               	xorlw	128
  6766  000248  0100               	movlb	0	; () banked
  6767  00024A  59B4               	subwfb	??_printf& (0+255),w,b
  6768  00024C  B0D8               	btfsc	status,0,c
  6769  00024E  D00B               	goto	l3633
  6770                           
  6771                           ; BSR set to: 0
  6772                           ;doprnt.c: 1382: width -= c;
  6773  000250  0100               	movlb	0	; () banked
  6774  000252  51C1               	movf	printf@c& (0+255),w,b
  6775  000254  0100               	movlb	0	; () banked
  6776  000256  5FBF               	subwf	printf@width& (0+255),f,b
  6777  000258  0E00               	movlw	0
  6778  00025A  0100               	movlb	0	; () banked
  6779  00025C  BFC1               	btfsc	printf@c& (0+255),7,b
  6780  00025E  0EFF               	movlw	255
  6781  000260  0100               	movlb	0	; () banked
  6782  000262  5BC0               	subwfb	(printf@width+1)& (0+255),f,b
  6783  000264  D005               	goto	l3635
  6784  000266                     l3633:
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;doprnt.c: 1383: else
  6788                           ;doprnt.c: 1384: width = 0;
  6789  000266  0E00               	movlw	0
  6790  000268  0100               	movlb	0	; () banked
  6791  00026A  6FC0               	movwf	(printf@width+1)& (0+255),b
  6792  00026C  0E00               	movlw	0
  6793  00026E  6FBF               	movwf	printf@width& (0+255),b
  6794  000270                     l3635:
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;doprnt.c: 1387: if(flag & 0x04) {
  6798  000270  0100               	movlb	0	; () banked
  6799  000272  A5BE               	btfss	printf@flag& (0+255),2,b
  6800  000274  D018               	goto	l3647
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;doprnt.c: 1392: if(flag & 0x03)
  6804  000276  C0BE  F0B4         	movff	printf@flag,??_printf
  6805  00027A  0E03               	movlw	3
  6806  00027C  0100               	movlb	0	; () banked
  6807  00027E  17B4               	andwf	??_printf& (0+255),f,b
  6808  000280  B4D8               	btfsc	status,2,c
  6809  000282  D003               	goto	l3641
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;doprnt.c: 1393: (putch('-') );
  6813  000284  0E2D               	movlw	45
  6814  000286  EC23  F00F         	call	_putch
  6815  00028A                     l3641:
  6816                           
  6817                           ;doprnt.c: 1415: if(width)
  6818  00028A  0100               	movlb	0	; () banked
  6819  00028C  51BF               	movf	printf@width& (0+255),w,b
  6820  00028E  0100               	movlb	0	; () banked
  6821  000290  11C0               	iorwf	(printf@width+1)& (0+255),w,b
  6822  000292  B4D8               	btfsc	status,2,c
  6823  000294  D025               	goto	l3657
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;doprnt.c: 1417: (putch('0') );
  6827                           
  6828                           ; BSR set to: 0
  6829                           
  6830                           ;doprnt.c: 1416: do
  6831  000296  0E30               	movlw	48
  6832  000298  EC23  F00F         	call	_putch
  6833                           
  6834                           ;doprnt.c: 1418: while(--width);
  6835  00029C  0100               	movlb	0	; () banked
  6836  00029E  07BF               	decf	printf@width& (0+255),f,b
  6837  0002A0  A0D8               	btfss	status,0,c
  6838  0002A2  07C0               	decf	(printf@width+1)& (0+255),f,b
  6839  0002A4  D7F2               	goto	l3641
  6840  0002A6                     l3647:
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;doprnt.c: 1422: {
  6844                           ;doprnt.c: 1424: if(width
  6845                           ;doprnt.c: 1428: )
  6846  0002A6  0100               	movlb	0	; () banked
  6847  0002A8  51BF               	movf	printf@width& (0+255),w,b
  6848  0002AA  0100               	movlb	0	; () banked
  6849  0002AC  11C0               	iorwf	(printf@width+1)& (0+255),w,b
  6850  0002AE  B4D8               	btfsc	status,2,c
  6851  0002B0  D00D               	goto	l3653
  6852  0002B2                     l3649:
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;doprnt.c: 1430: (putch(' ') );
  6856  0002B2  0E20               	movlw	32
  6857  0002B4  EC23  F00F         	call	_putch
  6858                           
  6859                           ;doprnt.c: 1431: while(--width);
  6860  0002B8  0100               	movlb	0	; () banked
  6861  0002BA  07BF               	decf	printf@width& (0+255),f,b
  6862  0002BC  A0D8               	btfss	status,0,c
  6863  0002BE  07C0               	decf	(printf@width+1)& (0+255),f,b
  6864  0002C0  0100               	movlb	0	; () banked
  6865  0002C2  51BF               	movf	printf@width& (0+255),w,b
  6866  0002C4  0100               	movlb	0	; () banked
  6867  0002C6  11C0               	iorwf	(printf@width+1)& (0+255),w,b
  6868  0002C8  A4D8               	btfss	status,2,c
  6869  0002CA  D7F3               	goto	l3649
  6870  0002CC                     l3653:
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;doprnt.c: 1438: if(flag & 0x03)
  6874  0002CC  C0BE  F0B4         	movff	printf@flag,??_printf
  6875  0002D0  0E03               	movlw	3
  6876  0002D2  0100               	movlb	0	; () banked
  6877  0002D4  17B4               	andwf	??_printf& (0+255),f,b
  6878  0002D6  B4D8               	btfsc	status,2,c
  6879  0002D8  D003               	goto	l3657
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;doprnt.c: 1439: (putch('-') );
  6883  0002DA  0E2D               	movlw	45
  6884  0002DC  EC23  F00F         	call	_putch
  6885  0002E0                     l3657:
  6886                           
  6887                           ;doprnt.c: 1469: }
  6888                           ;doprnt.c: 1472: prec = c;
  6889  0002E0  C0C1  F0BB         	movff	printf@c,printf@prec
  6890                           
  6891                           ;doprnt.c: 1474: while(prec--) {
  6892  0002E4  D057               	goto	l3671
  6893  0002E6                     l3659:
  6894                           
  6895                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6896  0002E6  0100               	movlb	0	; () banked
  6897  0002E8  51BB               	movf	printf@prec& (0+255),w,b
  6898  0002EA  0D02               	mullw	2
  6899  0002EC  0E82               	movlw	low _dpowers
  6900  0002EE  24F3               	addwf	prodl,w,c
  6901  0002F0  6EF6               	movwf	tblptrl,c
  6902  0002F2  0EFE               	movlw	high _dpowers
  6903  0002F4  20F4               	addwfc	prodh,w,c
  6904  0002F6  6EF7               	movwf	tblptrh,c
  6905  0002F8                     	if	0	;There are less than 3 active tblptr bytes
  6906  0002F8                     	endif
  6907  0002F8  0009               	tblrd		*+
  6908  0002FA  CFF5 F013          	movff	tablat,___lwdiv@divisor
  6909  0002FE  000A               	tblrd		*-
  6910  000300  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  6911  000304  C0BC  F011         	movff	printf@val,___lwdiv@dividend
  6912  000308  C0BD  F012         	movff	printf@val+1,___lwdiv@dividend+1
  6913  00030C  EC90  F00D         	call	___lwdiv	;wreg free
  6914  000310  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  6915  000314  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  6916  000318  0E00               	movlw	0
  6917  00031A  6E1B               	movwf	___lwmod@divisor+1,c
  6918  00031C  0E0A               	movlw	10
  6919  00031E  6E1A               	movwf	___lwmod@divisor,c
  6920  000320  EC4A  F00E         	call	___lwmod	;wreg free
  6921  000324  5018               	movf	?___lwmod,w,c
  6922  000326  0F30               	addlw	48
  6923  000328  0100               	movlb	0	; () banked
  6924  00032A  6FC1               	movwf	printf@c& (0+255),b
  6925                           
  6926                           ;doprnt.c: 1491: break;
  6927  00032C  D02F               	goto	l3669
  6928  00032E                     l3661:
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;doprnt.c: 1499: {
  6932                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6933  00032E  C0BC  F011         	movff	printf@val,___lwdiv@dividend
  6934  000332  C0BD  F012         	movff	printf@val+1,___lwdiv@dividend+1
  6935  000336  0100               	movlb	0	; () banked
  6936  000338  51BB               	movf	printf@prec& (0+255),w,b
  6937  00033A  0D02               	mullw	2
  6938  00033C  0E8C               	movlw	low _hexpowers
  6939  00033E  24F3               	addwf	prodl,w,c
  6940  000340  6EF6               	movwf	tblptrl,c
  6941  000342  0EFE               	movlw	high _hexpowers
  6942  000344  20F4               	addwfc	prodh,w,c
  6943  000346  6EF7               	movwf	tblptrh,c
  6944  000348                     	if	0	;There are less than 3 active tblptr bytes
  6945  000348                     	endif
  6946  000348  0009               	tblrd		*+
  6947  00034A  CFF5 F013          	movff	tablat,___lwdiv@divisor
  6948  00034E  000A               	tblrd		*-
  6949  000350  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  6950  000354  EC90  F00D         	call	___lwdiv	;wreg free
  6951  000358  5011               	movf	?___lwdiv,w,c
  6952  00035A  0B0F               	andlw	15
  6953  00035C  0100               	movlb	0	; () banked
  6954  00035E  6FB8               	movwf	printf@idx& (0+255),b
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6958  000360  0100               	movlb	0	; () banked
  6959  000362  51B8               	movf	printf@idx& (0+255),w,b
  6960  000364  0D01               	mullw	1
  6961  000366  0E43               	movlw	low STR_20
  6962  000368  24F3               	addwf	prodl,w,c
  6963  00036A  6EF6               	movwf	tblptrl,c
  6964  00036C  0EFF               	movlw	high STR_20
  6965  00036E  20F4               	addwfc	prodh,w,c
  6966  000370  6EF7               	movwf	tblptrh,c
  6967  000372                     	if	0	;There are less than 3 active tblptr bytes
  6968  000372                     	endif
  6969  000372  0008               	tblrd		*
  6970  000374  CFF5 F0C1          	movff	tablat,printf@c
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;doprnt.c: 1523: }
  6974                           
  6975                           ;doprnt.c: 1508: }
  6976                           ;doprnt.c: 1510: break;
  6977  000378  D009               	goto	l3669
  6978  00037A                     l3667:
  6979  00037A  0100               	movlb	0	; () banked
  6980  00037C  51BE               	movf	printf@flag& (0+255),w,b
  6981  00037E  0B80               	andlw	128
  6982                           
  6983                           ; Switch size 1, requested type "space"
  6984                           ; Number of cases is 2, Range of values is 0 to 128
  6985                           ; switch strategies available:
  6986                           ; Name         Instructions Cycles
  6987                           ; simple_byte            7     4 (average)
  6988                           ;	Chosen strategy is simple_byte
  6989  000380  0A00               	xorlw	0	; case 0
  6990  000382  B4D8               	btfsc	status,2,c
  6991  000384  D7B0               	goto	l3659
  6992  000386  0A80               	xorlw	128	; case 128
  6993  000388  B4D8               	btfsc	status,2,c
  6994  00038A  D7D1               	goto	l3661
  6995  00038C                     l3669:
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;doprnt.c: 1524: (putch(c) );
  6999  00038C  0100               	movlb	0	; () banked
  7000  00038E  51C1               	movf	printf@c& (0+255),w,b
  7001  000390  EC23  F00F         	call	_putch
  7002  000394                     l3671:
  7003  000394  0100               	movlb	0	; () banked
  7004  000396  07BB               	decf	printf@prec& (0+255),f,b
  7005  000398  0100               	movlb	0	; () banked
  7006  00039A  29BB               	incf	printf@prec& (0+255),w,b
  7007  00039C  A4D8               	btfss	status,2,c
  7008  00039E  D7ED               	goto	l3667
  7009  0003A0                     l3673:
  7010  0003A0  C0AC  FFF6         	movff	printf@f,tblptrl
  7011  0003A4  C0AD  FFF7         	movff	printf@f+1,tblptrh
  7012  0003A8  0100               	movlb	0	; () banked
  7013  0003AA  4BAC               	infsnz	printf@f& (0+255),f,b
  7014  0003AC  2BAD               	incf	(printf@f+1)& (0+255),f,b
  7015  0003AE                     	if	0	;tblptru may be non-zero
  7016  0003AE                     	endif
  7017  0003AE                     	if	0	;tblptru may be non-zero
  7018  0003AE                     	endif
  7019  0003AE  0008               	tblrd		*
  7020  0003B0  CFF5 F0C1          	movff	tablat,printf@c
  7021  0003B4  0100               	movlb	0	; () banked
  7022  0003B6  51C1               	movf	printf@c& (0+255),w,b
  7023  0003B8  B4D8               	btfsc	status,2,c
  7024  0003BA  0012               	return	
  7025  0003BC  D631               	goto	l3547
  7026  0003BE                     __end_of_printf:
  7027                           	opt stack 0
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           prodh	equ	0xFF4
  7033                           prodl	equ	0xFF3
  7034                           intcon	equ	0xFF2
  7035                           intcon2	equ	0xFF1
  7036                           intcon3	equ	0xFF0
  7037                           wreg	equ	0xFE8
  7038                           indf2	equ	0xFDF
  7039                           postinc2	equ	0xFDE
  7040                           postdec2	equ	0xFDD
  7041                           fsr2h	equ	0xFDA
  7042                           fsr2l	equ	0xFD9
  7043                           status	equ	0xFD8
  7044                           
  7045 ;; *************** function _putch *****************
  7046 ;; Defined at:
  7047 ;;		line 30 in file "lcd.c"
  7048 ;; Parameters:    Size  Location     Type
  7049 ;;  data            1    wreg     unsigned char 
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;  data            1   18[COMRAM] unsigned char 
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  1    wreg      void 
  7054 ;; Registers used:
  7055 ;;		wreg, status,2, status,0, cstack
  7056 ;; Tracked objects:
  7057 ;;		On entry : 0/0
  7058 ;;		On exit  : 0/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7065 ;;Total ram usage:        1 bytes
  7066 ;; Hardware stack levels used:    1
  7067 ;; Hardware stack levels required when called:    2
  7068 ;; This function calls:
  7069 ;;		_lcdNibble
  7070 ;; This function is called by:
  7071 ;;		_printf
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           	psect	text36
  7076  001E46                     __ptext36:
  7077                           	opt stack 0
  7078  001E46                     _putch:
  7079                           	opt stack 26
  7080                           
  7081                           ;incstack = 0
  7082                           ;putch@data stored from wreg
  7083  001E46  6E13               	movwf	putch@data,c
  7084                           
  7085                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  7086  001E48  848C               	bsf	3980,2,c	;volatile
  7087                           
  7088                           ;lcd.c: 32: lcdNibble(data);
  7089  001E4A  5013               	movf	putch@data,w,c
  7090  001E4C  ECB9  F00D         	call	_lcdNibble
  7091  001E50  0012               	return		;funcret
  7092  001E52                     __end_of_putch:
  7093                           	opt stack 0
  7094                           tblptru	equ	0xFF8
  7095                           tblptrh	equ	0xFF7
  7096                           tblptrl	equ	0xFF6
  7097                           tablat	equ	0xFF5
  7098                           prodh	equ	0xFF4
  7099                           prodl	equ	0xFF3
  7100                           intcon	equ	0xFF2
  7101                           intcon2	equ	0xFF1
  7102                           intcon3	equ	0xFF0
  7103                           wreg	equ	0xFE8
  7104                           indf2	equ	0xFDF
  7105                           postinc2	equ	0xFDE
  7106                           postdec2	equ	0xFDD
  7107                           fsr2h	equ	0xFDA
  7108                           fsr2l	equ	0xFD9
  7109                           status	equ	0xFD8
  7110                           
  7111 ;; *************** function _isdigit *****************
  7112 ;; Defined at:
  7113 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;  c               1    wreg     unsigned char 
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;  c               1   18[COMRAM] unsigned char 
  7118 ;; Return value:  Size  Location     Type
  7119 ;;		None               void
  7120 ;; Registers used:
  7121 ;;		wreg, status,2, status,0
  7122 ;; Tracked objects:
  7123 ;;		On entry : 0/0
  7124 ;;		On exit  : 0/0
  7125 ;;		Unchanged: 0/0
  7126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7129 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7130 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;Total ram usage:        3 bytes
  7132 ;; Hardware stack levels used:    1
  7133 ;; Hardware stack levels required when called:    1
  7134 ;; This function calls:
  7135 ;;		Nothing
  7136 ;; This function is called by:
  7137 ;;		_printf
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           	psect	text37
  7142  001DFE                     __ptext37:
  7143                           	opt stack 0
  7144  001DFE                     _isdigit:
  7145                           	opt stack 27
  7146                           
  7147                           ;incstack = 0
  7148                           ;isdigit@c stored from wreg
  7149  001DFE  6E13               	movwf	isdigit@c,c
  7150  001E00  0E00               	movlw	0
  7151  001E02  6E12               	movwf	_isdigit$674,c
  7152  001E04  0E3A               	movlw	58
  7153  001E06  6013               	cpfslt	isdigit@c,c
  7154  001E08  D005               	goto	l3489
  7155  001E0A  0E2F               	movlw	47
  7156  001E0C  6413               	cpfsgt	isdigit@c,c
  7157  001E0E  D002               	goto	l3489
  7158  001E10  0E01               	movlw	1
  7159  001E12  6E12               	movwf	_isdigit$674,c
  7160  001E14                     l3489:
  7161  001E14  C012  F011         	movff	_isdigit$674,??_isdigit
  7162  001E18  3011               	rrcf	??_isdigit,w,c
  7163  001E1A  0012               	return	
  7164  001E1C                     __end_of_isdigit:
  7165                           	opt stack 0
  7166                           tblptru	equ	0xFF8
  7167                           tblptrh	equ	0xFF7
  7168                           tblptrl	equ	0xFF6
  7169                           tablat	equ	0xFF5
  7170                           prodh	equ	0xFF4
  7171                           prodl	equ	0xFF3
  7172                           intcon	equ	0xFF2
  7173                           intcon2	equ	0xFF1
  7174                           intcon3	equ	0xFF0
  7175                           wreg	equ	0xFE8
  7176                           indf2	equ	0xFDF
  7177                           postinc2	equ	0xFDE
  7178                           postdec2	equ	0xFDD
  7179                           fsr2h	equ	0xFDA
  7180                           fsr2l	equ	0xFD9
  7181                           status	equ	0xFD8
  7182                           
  7183 ;; *************** function ___wmul *****************
  7184 ;; Defined at:
  7185 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7186 ;; Parameters:    Size  Location     Type
  7187 ;;  multiplier      2   16[COMRAM] unsigned int 
  7188 ;;  multiplicand    2   18[COMRAM] unsigned int 
  7189 ;; Auto vars:     Size  Location     Type
  7190 ;;  product         2   20[COMRAM] unsigned int 
  7191 ;; Return value:  Size  Location     Type
  7192 ;;                  2   16[COMRAM] unsigned int 
  7193 ;; Registers used:
  7194 ;;		wreg, status,2, status,0, prodl, prodh
  7195 ;; Tracked objects:
  7196 ;;		On entry : 0/0
  7197 ;;		On exit  : 0/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7200 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7201 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7203 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7204 ;;Total ram usage:        6 bytes
  7205 ;; Hardware stack levels used:    1
  7206 ;; Hardware stack levels required when called:    1
  7207 ;; This function calls:
  7208 ;;		Nothing
  7209 ;; This function is called by:
  7210 ;;		_time_difference
  7211 ;;		_printf
  7212 ;;		_eval_poly
  7213 ;; This function uses a non-reentrant model
  7214 ;;
  7215                           
  7216                           	psect	text38
  7217  001DB4                     __ptext38:
  7218                           	opt stack 0
  7219  001DB4                     ___wmul:
  7220                           	opt stack 23
  7221                           
  7222                           ;incstack = 0
  7223  001DB4  5011               	movf	___wmul@multiplier,w,c
  7224  001DB6  0213               	mulwf	___wmul@multiplicand,c
  7225  001DB8  CFF3 F015          	movff	prodl,___wmul@product
  7226  001DBC  CFF4 F016          	movff	prodh,___wmul@product+1
  7227  001DC0  5011               	movf	___wmul@multiplier,w,c
  7228  001DC2  0214               	mulwf	___wmul@multiplicand+1,c
  7229  001DC4  50F3               	movf	prodl,w,c
  7230  001DC6  2616               	addwf	___wmul@product+1,f,c
  7231  001DC8  5012               	movf	___wmul@multiplier+1,w,c
  7232  001DCA  0213               	mulwf	___wmul@multiplicand,c
  7233  001DCC  50F3               	movf	prodl,w,c
  7234  001DCE  2616               	addwf	___wmul@product+1,f,c
  7235  001DD0  C015  F011         	movff	___wmul@product,?___wmul
  7236  001DD4  C016  F012         	movff	___wmul@product+1,?___wmul+1
  7237  001DD8  0012               	return	
  7238  001DDA                     __end_of___wmul:
  7239                           	opt stack 0
  7240                           tblptru	equ	0xFF8
  7241                           tblptrh	equ	0xFF7
  7242                           tblptrl	equ	0xFF6
  7243                           tablat	equ	0xFF5
  7244                           prodh	equ	0xFF4
  7245                           prodl	equ	0xFF3
  7246                           intcon	equ	0xFF2
  7247                           intcon2	equ	0xFF1
  7248                           intcon3	equ	0xFF0
  7249                           wreg	equ	0xFE8
  7250                           indf2	equ	0xFDF
  7251                           postinc2	equ	0xFDE
  7252                           postdec2	equ	0xFDD
  7253                           fsr2h	equ	0xFDA
  7254                           fsr2l	equ	0xFD9
  7255                           status	equ	0xFD8
  7256                           
  7257 ;; *************** function ___lwmod *****************
  7258 ;; Defined at:
  7259 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;  dividend        2   23[COMRAM] unsigned int 
  7262 ;;  divisor         2   25[COMRAM] unsigned int 
  7263 ;; Auto vars:     Size  Location     Type
  7264 ;;  counter         1   27[COMRAM] unsigned char 
  7265 ;; Return value:  Size  Location     Type
  7266 ;;                  2   23[COMRAM] unsigned int 
  7267 ;; Registers used:
  7268 ;;		wreg, status,2, status,0
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7274 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7275 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7277 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7278 ;;Total ram usage:        5 bytes
  7279 ;; Hardware stack levels used:    1
  7280 ;; Hardware stack levels required when called:    1
  7281 ;; This function calls:
  7282 ;;		Nothing
  7283 ;; This function is called by:
  7284 ;;		_printf
  7285 ;; This function uses a non-reentrant model
  7286 ;;
  7287                           
  7288                           	psect	text39
  7289  001C94                     __ptext39:
  7290                           	opt stack 0
  7291  001C94                     ___lwmod:
  7292                           	opt stack 27
  7293                           
  7294                           ;incstack = 0
  7295  001C94  501A               	movf	___lwmod@divisor,w,c
  7296  001C96  101B               	iorwf	___lwmod@divisor+1,w,c
  7297  001C98  B4D8               	btfsc	status,2,c
  7298  001C9A  D018               	goto	l731
  7299  001C9C  0E01               	movlw	1
  7300  001C9E  6E1C               	movwf	___lwmod@counter,c
  7301  001CA0  D004               	goto	l3521
  7302  001CA2                     l3519:
  7303  001CA2  90D8               	bcf	status,0,c
  7304  001CA4  361A               	rlcf	___lwmod@divisor,f,c
  7305  001CA6  361B               	rlcf	___lwmod@divisor+1,f,c
  7306  001CA8  2A1C               	incf	___lwmod@counter,f,c
  7307  001CAA                     l3521:
  7308  001CAA  AE1B               	btfss	___lwmod@divisor+1,7,c
  7309  001CAC  D7FA               	goto	l3519
  7310  001CAE                     l3523:
  7311  001CAE  501A               	movf	___lwmod@divisor,w,c
  7312  001CB0  5C18               	subwf	___lwmod@dividend,w,c
  7313  001CB2  501B               	movf	___lwmod@divisor+1,w,c
  7314  001CB4  5819               	subwfb	___lwmod@dividend+1,w,c
  7315  001CB6  A0D8               	btfss	status,0,c
  7316  001CB8  D004               	goto	l3527
  7317  001CBA  501A               	movf	___lwmod@divisor,w,c
  7318  001CBC  5E18               	subwf	___lwmod@dividend,f,c
  7319  001CBE  501B               	movf	___lwmod@divisor+1,w,c
  7320  001CC0  5A19               	subwfb	___lwmod@dividend+1,f,c
  7321  001CC2                     l3527:
  7322  001CC2  90D8               	bcf	status,0,c
  7323  001CC4  321B               	rrcf	___lwmod@divisor+1,f,c
  7324  001CC6  321A               	rrcf	___lwmod@divisor,f,c
  7325  001CC8  2E1C               	decfsz	___lwmod@counter,f,c
  7326  001CCA  D7F1               	goto	l3523
  7327  001CCC                     l731:
  7328  001CCC  C018  F018         	movff	___lwmod@dividend,?___lwmod
  7329  001CD0  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  7330  001CD4  0012               	return		;funcret
  7331  001CD6                     __end_of___lwmod:
  7332                           	opt stack 0
  7333                           tblptru	equ	0xFF8
  7334                           tblptrh	equ	0xFF7
  7335                           tblptrl	equ	0xFF6
  7336                           tablat	equ	0xFF5
  7337                           prodh	equ	0xFF4
  7338                           prodl	equ	0xFF3
  7339                           intcon	equ	0xFF2
  7340                           intcon2	equ	0xFF1
  7341                           intcon3	equ	0xFF0
  7342                           wreg	equ	0xFE8
  7343                           indf2	equ	0xFDF
  7344                           postinc2	equ	0xFDE
  7345                           postdec2	equ	0xFDD
  7346                           fsr2h	equ	0xFDA
  7347                           fsr2l	equ	0xFD9
  7348                           status	equ	0xFD8
  7349                           
  7350 ;; *************** function ___lwdiv *****************
  7351 ;; Defined at:
  7352 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;  dividend        2   16[COMRAM] unsigned int 
  7355 ;;  divisor         2   18[COMRAM] unsigned int 
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;  quotient        2   21[COMRAM] unsigned int 
  7358 ;;  counter         1   20[COMRAM] unsigned char 
  7359 ;; Return value:  Size  Location     Type
  7360 ;;                  2   16[COMRAM] unsigned int 
  7361 ;; Registers used:
  7362 ;;		wreg, status,2, status,0
  7363 ;; Tracked objects:
  7364 ;;		On entry : 0/0
  7365 ;;		On exit  : 0/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7368 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;Total ram usage:        7 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; Hardware stack levels required when called:    1
  7375 ;; This function calls:
  7376 ;;		Nothing
  7377 ;; This function is called by:
  7378 ;;		_printf
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           	psect	text40
  7383  001B20                     __ptext40:
  7384                           	opt stack 0
  7385  001B20                     ___lwdiv:
  7386                           	opt stack 27
  7387                           
  7388                           ;incstack = 0
  7389  001B20  0E00               	movlw	0
  7390  001B22  6E17               	movwf	___lwdiv@quotient+1,c
  7391  001B24  0E00               	movlw	0
  7392  001B26  6E16               	movwf	___lwdiv@quotient,c
  7393  001B28  5013               	movf	___lwdiv@divisor,w,c
  7394  001B2A  1014               	iorwf	___lwdiv@divisor+1,w,c
  7395  001B2C  B4D8               	btfsc	status,2,c
  7396  001B2E  D01C               	goto	l721
  7397  001B30  0E01               	movlw	1
  7398  001B32  6E15               	movwf	___lwdiv@counter,c
  7399  001B34  D004               	goto	l3501
  7400  001B36                     l3499:
  7401  001B36  90D8               	bcf	status,0,c
  7402  001B38  3613               	rlcf	___lwdiv@divisor,f,c
  7403  001B3A  3614               	rlcf	___lwdiv@divisor+1,f,c
  7404  001B3C  2A15               	incf	___lwdiv@counter,f,c
  7405  001B3E                     l3501:
  7406  001B3E  AE14               	btfss	___lwdiv@divisor+1,7,c
  7407  001B40  D7FA               	goto	l3499
  7408  001B42                     l3503:
  7409  001B42  90D8               	bcf	status,0,c
  7410  001B44  3616               	rlcf	___lwdiv@quotient,f,c
  7411  001B46  3617               	rlcf	___lwdiv@quotient+1,f,c
  7412  001B48  5013               	movf	___lwdiv@divisor,w,c
  7413  001B4A  5C11               	subwf	___lwdiv@dividend,w,c
  7414  001B4C  5014               	movf	___lwdiv@divisor+1,w,c
  7415  001B4E  5812               	subwfb	___lwdiv@dividend+1,w,c
  7416  001B50  A0D8               	btfss	status,0,c
  7417  001B52  D005               	goto	l3511
  7418  001B54  5013               	movf	___lwdiv@divisor,w,c
  7419  001B56  5E11               	subwf	___lwdiv@dividend,f,c
  7420  001B58  5014               	movf	___lwdiv@divisor+1,w,c
  7421  001B5A  5A12               	subwfb	___lwdiv@dividend+1,f,c
  7422  001B5C  8016               	bsf	___lwdiv@quotient,0,c
  7423  001B5E                     l3511:
  7424  001B5E  90D8               	bcf	status,0,c
  7425  001B60  3214               	rrcf	___lwdiv@divisor+1,f,c
  7426  001B62  3213               	rrcf	___lwdiv@divisor,f,c
  7427  001B64  2E15               	decfsz	___lwdiv@counter,f,c
  7428  001B66  D7ED               	goto	l3503
  7429  001B68                     l721:
  7430  001B68  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  7431  001B6C  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7432  001B70  0012               	return		;funcret
  7433  001B72                     __end_of___lwdiv:
  7434                           	opt stack 0
  7435                           tblptru	equ	0xFF8
  7436                           tblptrh	equ	0xFF7
  7437                           tblptrl	equ	0xFF6
  7438                           tablat	equ	0xFF5
  7439                           prodh	equ	0xFF4
  7440                           prodl	equ	0xFF3
  7441                           intcon	equ	0xFF2
  7442                           intcon2	equ	0xFF1
  7443                           intcon3	equ	0xFF0
  7444                           wreg	equ	0xFE8
  7445                           indf2	equ	0xFDF
  7446                           postinc2	equ	0xFDE
  7447                           postdec2	equ	0xFDD
  7448                           fsr2h	equ	0xFDA
  7449                           fsr2l	equ	0xFD9
  7450                           status	equ	0xFD8
  7451                           
  7452 ;; *************** function _lcdInst *****************
  7453 ;; Defined at:
  7454 ;;		line 25 in file "lcd.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;  data            1    wreg     unsigned char 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;  data            1   18[COMRAM] unsigned char 
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  1    wreg      void 
  7461 ;; Registers used:
  7462 ;;		wreg, status,2, status,0, cstack
  7463 ;; Tracked objects:
  7464 ;;		On entry : 0/0
  7465 ;;		On exit  : 0/0
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7469 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7471 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7472 ;;Total ram usage:        1 bytes
  7473 ;; Hardware stack levels used:    1
  7474 ;; Hardware stack levels required when called:    2
  7475 ;; This function calls:
  7476 ;;		_lcdNibble
  7477 ;; This function is called by:
  7478 ;;		_main
  7479 ;;		_init_operation
  7480 ;;		_runtime
  7481 ;;		_bottle_count
  7482 ;;		_operation_end
  7483 ;;		_date_time
  7484 ;;		_initLCD
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           	psect	text41
  7489  001E52                     __ptext41:
  7490                           	opt stack 0
  7491  001E52                     _lcdInst:
  7492                           	opt stack 27
  7493                           
  7494                           ;incstack = 0
  7495                           ;lcdInst@data stored from wreg
  7496  001E52  6E13               	movwf	lcdInst@data,c
  7497                           
  7498                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  7499  001E54  948C               	bcf	3980,2,c	;volatile
  7500                           
  7501                           ;lcd.c: 27: lcdNibble(data);
  7502  001E56  5013               	movf	lcdInst@data,w,c
  7503  001E58  ECB9  F00D         	call	_lcdNibble
  7504  001E5C  0012               	return		;funcret
  7505  001E5E                     __end_of_lcdInst:
  7506                           	opt stack 0
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           prodh	equ	0xFF4
  7512                           prodl	equ	0xFF3
  7513                           intcon	equ	0xFF2
  7514                           intcon2	equ	0xFF1
  7515                           intcon3	equ	0xFF0
  7516                           wreg	equ	0xFE8
  7517                           indf2	equ	0xFDF
  7518                           postinc2	equ	0xFDE
  7519                           postdec2	equ	0xFDD
  7520                           fsr2h	equ	0xFDA
  7521                           fsr2l	equ	0xFD9
  7522                           status	equ	0xFD8
  7523                           
  7524 ;; *************** function _lcdNibble *****************
  7525 ;; Defined at:
  7526 ;;		line 35 in file "lcd.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  data            1    wreg     unsigned char 
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;  data            1   17[COMRAM] unsigned char 
  7531 ;;  temp            1   16[COMRAM] unsigned char 
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  1    wreg      void 
  7534 ;; Registers used:
  7535 ;;		wreg, status,2, status,0
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;Total ram usage:        2 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:    1
  7548 ;; This function calls:
  7549 ;;		Nothing
  7550 ;; This function is called by:
  7551 ;;		_lcdInst
  7552 ;;		_putch
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text42
  7557  001B72                     __ptext42:
  7558                           	opt stack 0
  7559  001B72                     _lcdNibble:
  7560                           	opt stack 26
  7561                           
  7562                           ;incstack = 0
  7563                           ;lcdNibble@data stored from wreg
  7564  001B72  6E12               	movwf	lcdNibble@data,c
  7565                           
  7566                           ;lcd.c: 37: char temp = data & 0xF0;
  7567  001B74  5012               	movf	lcdNibble@data,w,c
  7568  001B76  0BF0               	andlw	240
  7569  001B78  6E11               	movwf	lcdNibble@temp,c
  7570                           
  7571                           ;lcd.c: 38: LATD = LATD & 0x0F;
  7572  001B7A  508C               	movf	3980,w,c	;volatile
  7573  001B7C  0B0F               	andlw	15
  7574  001B7E  6E8C               	movwf	3980,c	;volatile
  7575                           
  7576                           ;lcd.c: 39: LATD = temp | LATD;
  7577  001B80  5011               	movf	lcdNibble@temp,w,c
  7578  001B82  108C               	iorwf	3980,w,c	;volatile
  7579  001B84  6E8C               	movwf	3980,c	;volatile
  7580                           
  7581                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  7582  001B86  968C               	bcf	3980,3,c	;volatile
  7583                           
  7584                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7585  001B88  0E19               	movlw	25
  7586  001B8A                     u3587:
  7587  001B8A  2EE8               	decfsz	wreg,f,c
  7588  001B8C  D7FE               	bra	u3587
  7589                           
  7590                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  7591  001B8E  868C               	bsf	3980,3,c	;volatile
  7592                           
  7593                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7594  001B90  0E19               	movlw	25
  7595  001B92                     u3597:
  7596  001B92  2EE8               	decfsz	wreg,f,c
  7597  001B94  D7FE               	bra	u3597
  7598                           
  7599                           ;lcd.c: 46: data = data << 4;
  7600  001B96  3812               	swapf	lcdNibble@data,w,c
  7601  001B98  0BF0               	andlw	240
  7602  001B9A  6E12               	movwf	lcdNibble@data,c
  7603                           
  7604                           ;lcd.c: 48: temp = data & 0xF0;
  7605  001B9C  5012               	movf	lcdNibble@data,w,c
  7606  001B9E  0BF0               	andlw	240
  7607  001BA0  6E11               	movwf	lcdNibble@temp,c
  7608                           
  7609                           ;lcd.c: 49: LATD = LATD & 0x0F;
  7610  001BA2  508C               	movf	3980,w,c	;volatile
  7611  001BA4  0B0F               	andlw	15
  7612  001BA6  6E8C               	movwf	3980,c	;volatile
  7613                           
  7614                           ;lcd.c: 50: LATD = temp | LATD;
  7615  001BA8  5011               	movf	lcdNibble@temp,w,c
  7616  001BAA  108C               	iorwf	3980,w,c	;volatile
  7617  001BAC  6E8C               	movwf	3980,c	;volatile
  7618                           
  7619                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  7620  001BAE  968C               	bcf	3980,3,c	;volatile
  7621                           
  7622                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7623  001BB0  0E19               	movlw	25
  7624  001BB2                     u3607:
  7625  001BB2  2EE8               	decfsz	wreg,f,c
  7626  001BB4  D7FE               	bra	u3607
  7627                           
  7628                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  7629  001BB6  868C               	bsf	3980,3,c	;volatile
  7630                           
  7631                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7632  001BB8  0E19               	movlw	25
  7633  001BBA                     u3617:
  7634  001BBA  2EE8               	decfsz	wreg,f,c
  7635  001BBC  D7FE               	bra	u3617
  7636  001BBE  0012               	return		;funcret
  7637  001BC0                     __end_of_lcdNibble:
  7638                           	opt stack 0
  7639                           tblptru	equ	0xFF8
  7640                           tblptrh	equ	0xFF7
  7641                           tblptrl	equ	0xFF6
  7642                           tablat	equ	0xFF5
  7643                           prodh	equ	0xFF4
  7644                           prodl	equ	0xFF3
  7645                           intcon	equ	0xFF2
  7646                           intcon2	equ	0xFF1
  7647                           intcon3	equ	0xFF0
  7648                           wreg	equ	0xFE8
  7649                           indf2	equ	0xFDF
  7650                           postinc2	equ	0xFDE
  7651                           postdec2	equ	0xFDD
  7652                           fsr2h	equ	0xFDA
  7653                           fsr2l	equ	0xFD9
  7654                           status	equ	0xFD8
  7655                           
  7656 ;; *************** function _I2C_Master_Init *****************
  7657 ;; Defined at:
  7658 ;;		line 13 in file "I2C.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;  c               4   29[COMRAM] const unsigned long 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;		None
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  1    wreg      void 
  7665 ;; Registers used:
  7666 ;;		wreg, status,2, status,0, cstack
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7672 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7674 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7675 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7676 ;;Total ram usage:        8 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; Hardware stack levels required when called:    2
  7679 ;; This function calls:
  7680 ;;		___lldiv
  7681 ;; This function is called by:
  7682 ;;		_main
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	text43
  7687  001AC6                     __ptext43:
  7688                           	opt stack 0
  7689  001AC6                     _I2C_Master_Init:
  7690                           	opt stack 28
  7691                           
  7692                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  7693                           
  7694                           ;incstack = 0
  7695  001AC6  0E00               	movlw	0
  7696  001AC8  6EC7               	movwf	4039,c	;volatile
  7697                           
  7698                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  7699  001ACA  0E28               	movlw	40
  7700  001ACC  6EC6               	movwf	4038,c	;volatile
  7701                           
  7702                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  7703  001ACE  0E00               	movlw	0
  7704  001AD0  6EC5               	movwf	4037,c	;volatile
  7705                           
  7706                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  7707  001AD2  0E80               	movlw	128
  7708  001AD4  6E11               	movwf	___lldiv@dividend,c
  7709  001AD6  0E96               	movlw	150
  7710  001AD8  6E12               	movwf	___lldiv@dividend+1,c
  7711  001ADA  0E98               	movlw	152
  7712  001ADC  6E13               	movwf	___lldiv@dividend+2,c
  7713  001ADE  0E00               	movlw	0
  7714  001AE0  6E14               	movwf	___lldiv@dividend+3,c
  7715  001AE2  C01E  F022         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7716  001AE6  C01F  F023         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7717  001AEA  C020  F024         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7718  001AEE  C021  F025         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7719  001AF2  0E02               	movlw	2
  7720  001AF4                     u2815:
  7721  001AF4  90D8               	bcf	status,0,c
  7722  001AF6  3622               	rlcf	??_I2C_Master_Init,f,c
  7723  001AF8  3623               	rlcf	??_I2C_Master_Init+1,f,c
  7724  001AFA  3624               	rlcf	??_I2C_Master_Init+2,f,c
  7725  001AFC  3625               	rlcf	??_I2C_Master_Init+3,f,c
  7726  001AFE  2EE8               	decfsz	wreg,f,c
  7727  001B00  D7F9               	goto	u2815
  7728  001B02  C022  F015         	movff	??_I2C_Master_Init,___lldiv@divisor
  7729  001B06  C023  F016         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7730  001B0A  C024  F017         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7731  001B0E  C025  F018         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7732  001B12  EC7F  F00C         	call	___lldiv	;wreg free
  7733  001B16  0411               	decf	?___lldiv,w,c
  7734  001B18  6EC8               	movwf	4040,c	;volatile
  7735                           
  7736                           ;I2C.c: 20: TRISC3 = 1;
  7737  001B1A  8694               	bsf	3988,3,c	;volatile
  7738                           
  7739                           ;I2C.c: 21: TRISC4 = 1;
  7740  001B1C  8894               	bsf	3988,4,c	;volatile
  7741  001B1E  0012               	return		;funcret
  7742  001B20                     __end_of_I2C_Master_Init:
  7743                           	opt stack 0
  7744                           tblptru	equ	0xFF8
  7745                           tblptrh	equ	0xFF7
  7746                           tblptrl	equ	0xFF6
  7747                           tablat	equ	0xFF5
  7748                           prodh	equ	0xFF4
  7749                           prodl	equ	0xFF3
  7750                           intcon	equ	0xFF2
  7751                           intcon2	equ	0xFF1
  7752                           intcon3	equ	0xFF0
  7753                           wreg	equ	0xFE8
  7754                           indf2	equ	0xFDF
  7755                           postinc2	equ	0xFDE
  7756                           postdec2	equ	0xFDD
  7757                           fsr2h	equ	0xFDA
  7758                           fsr2l	equ	0xFD9
  7759                           status	equ	0xFD8
  7760                           
  7761 ;; *************** function ___lldiv *****************
  7762 ;; Defined at:
  7763 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;  dividend        4   16[COMRAM] unsigned long 
  7766 ;;  divisor         4   20[COMRAM] unsigned long 
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;  quotient        4   24[COMRAM] unsigned long 
  7769 ;;  counter         1   28[COMRAM] unsigned char 
  7770 ;; Return value:  Size  Location     Type
  7771 ;;                  4   16[COMRAM] unsigned long 
  7772 ;; Registers used:
  7773 ;;		wreg, status,2, status,0
  7774 ;; Tracked objects:
  7775 ;;		On entry : 0/0
  7776 ;;		On exit  : 0/0
  7777 ;;		Unchanged: 0/0
  7778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7779 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7780 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7782 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7783 ;;Total ram usage:       13 bytes
  7784 ;; Hardware stack levels used:    1
  7785 ;; Hardware stack levels required when called:    1
  7786 ;; This function calls:
  7787 ;;		Nothing
  7788 ;; This function is called by:
  7789 ;;		_I2C_Master_Init
  7790 ;; This function uses a non-reentrant model
  7791 ;;
  7792                           
  7793                           	psect	text44
  7794  0018FE                     __ptext44:
  7795                           	opt stack 0
  7796  0018FE                     ___lldiv:
  7797                           	opt stack 28
  7798                           
  7799                           ;incstack = 0
  7800  0018FE  0E00               	movlw	0
  7801  001900  6E19               	movwf	___lldiv@quotient,c
  7802  001902  0E00               	movlw	0
  7803  001904  6E1A               	movwf	___lldiv@quotient+1,c
  7804  001906  0E00               	movlw	0
  7805  001908  6E1B               	movwf	___lldiv@quotient+2,c
  7806  00190A  0E00               	movlw	0
  7807  00190C  6E1C               	movwf	___lldiv@quotient+3,c
  7808  00190E  5015               	movf	___lldiv@divisor,w,c
  7809  001910  1016               	iorwf	___lldiv@divisor+1,w,c
  7810  001912  1017               	iorwf	___lldiv@divisor+2,w,c
  7811  001914  1018               	iorwf	___lldiv@divisor+3,w,c
  7812  001916  B4D8               	btfsc	status,2,c
  7813  001918  D02A               	goto	l668
  7814  00191A  0E01               	movlw	1
  7815  00191C  6E1D               	movwf	___lldiv@counter,c
  7816  00191E  D006               	goto	l3041
  7817  001920                     l3039:
  7818  001920  90D8               	bcf	status,0,c
  7819  001922  3615               	rlcf	___lldiv@divisor,f,c
  7820  001924  3616               	rlcf	___lldiv@divisor+1,f,c
  7821  001926  3617               	rlcf	___lldiv@divisor+2,f,c
  7822  001928  3618               	rlcf	___lldiv@divisor+3,f,c
  7823  00192A  2A1D               	incf	___lldiv@counter,f,c
  7824  00192C                     l3041:
  7825  00192C  AE18               	btfss	___lldiv@divisor+3,7,c
  7826  00192E  D7F8               	goto	l3039
  7827  001930                     l3043:
  7828  001930  90D8               	bcf	status,0,c
  7829  001932  3619               	rlcf	___lldiv@quotient,f,c
  7830  001934  361A               	rlcf	___lldiv@quotient+1,f,c
  7831  001936  361B               	rlcf	___lldiv@quotient+2,f,c
  7832  001938  361C               	rlcf	___lldiv@quotient+3,f,c
  7833  00193A  5015               	movf	___lldiv@divisor,w,c
  7834  00193C  5C11               	subwf	___lldiv@dividend,w,c
  7835  00193E  5016               	movf	___lldiv@divisor+1,w,c
  7836  001940  5812               	subwfb	___lldiv@dividend+1,w,c
  7837  001942  5017               	movf	___lldiv@divisor+2,w,c
  7838  001944  5813               	subwfb	___lldiv@dividend+2,w,c
  7839  001946  5018               	movf	___lldiv@divisor+3,w,c
  7840  001948  5814               	subwfb	___lldiv@dividend+3,w,c
  7841  00194A  A0D8               	btfss	status,0,c
  7842  00194C  D009               	goto	l3051
  7843  00194E  5015               	movf	___lldiv@divisor,w,c
  7844  001950  5E11               	subwf	___lldiv@dividend,f,c
  7845  001952  5016               	movf	___lldiv@divisor+1,w,c
  7846  001954  5A12               	subwfb	___lldiv@dividend+1,f,c
  7847  001956  5017               	movf	___lldiv@divisor+2,w,c
  7848  001958  5A13               	subwfb	___lldiv@dividend+2,f,c
  7849  00195A  5018               	movf	___lldiv@divisor+3,w,c
  7850  00195C  5A14               	subwfb	___lldiv@dividend+3,f,c
  7851  00195E  8019               	bsf	___lldiv@quotient,0,c
  7852  001960                     l3051:
  7853  001960  90D8               	bcf	status,0,c
  7854  001962  3218               	rrcf	___lldiv@divisor+3,f,c
  7855  001964  3217               	rrcf	___lldiv@divisor+2,f,c
  7856  001966  3216               	rrcf	___lldiv@divisor+1,f,c
  7857  001968  3215               	rrcf	___lldiv@divisor,f,c
  7858  00196A  2E1D               	decfsz	___lldiv@counter,f,c
  7859  00196C  D7E1               	goto	l3043
  7860  00196E                     l668:
  7861  00196E  C019  F011         	movff	___lldiv@quotient,?___lldiv
  7862  001972  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  7863  001976  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  7864  00197A  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  7865  00197E  0012               	return		;funcret
  7866  001980                     __end_of___lldiv:
  7867                           	opt stack 0
  7868                           tblptru	equ	0xFF8
  7869                           tblptrh	equ	0xFF7
  7870                           tblptrl	equ	0xFF6
  7871                           tablat	equ	0xFF5
  7872                           prodh	equ	0xFF4
  7873                           prodl	equ	0xFF3
  7874                           intcon	equ	0xFF2
  7875                           intcon2	equ	0xFF1
  7876                           intcon3	equ	0xFF0
  7877                           wreg	equ	0xFE8
  7878                           indf2	equ	0xFDF
  7879                           postinc2	equ	0xFDE
  7880                           postdec2	equ	0xFDD
  7881                           fsr2h	equ	0xFDA
  7882                           fsr2l	equ	0xFD9
  7883                           status	equ	0xFD8
  7884                           
  7885 ;; *************** function _keypressed *****************
  7886 ;; Defined at:
  7887 ;;		line 124 in file "main.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;		None
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;		None
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  1    wreg      void 
  7894 ;; Registers used:
  7895 ;;		wreg, status,2, status,0
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;Total ram usage:       16 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; This function calls:
  7908 ;;		Nothing
  7909 ;; This function is called by:
  7910 ;;		Interrupt level 2
  7911 ;; This function uses a non-reentrant model
  7912 ;;
  7913                           
  7914                           	psect	intcode
  7915  000008                     __pintcode:
  7916                           	opt stack 0
  7917  000008                     _keypressed:
  7918                           	opt stack 22
  7919                           
  7920                           ;incstack = 0
  7921  000008  826F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7922  00000A  EDE4  F007         	call	int_func,f	;refresh shadow registers
  7923                           tblptru	equ	0xFF8
  7924                           tblptrh	equ	0xFF7
  7925                           tblptrl	equ	0xFF6
  7926                           tablat	equ	0xFF5
  7927                           prodh	equ	0xFF4
  7928                           prodl	equ	0xFF3
  7929                           intcon	equ	0xFF2
  7930                           intcon2	equ	0xFF1
  7931                           intcon3	equ	0xFF0
  7932                           wreg	equ	0xFE8
  7933                           indf2	equ	0xFDF
  7934                           postinc2	equ	0xFDE
  7935                           postdec2	equ	0xFDD
  7936                           fsr2h	equ	0xFDA
  7937                           fsr2l	equ	0xFD9
  7938                           status	equ	0xFD8
  7939                           
  7940                           	psect	intcode_body
  7941  000FC8                     __pintcode_body:
  7942                           	opt stack 22
  7943  000FC8                     int_func:
  7944                           	opt stack 22
  7945  000FC8  0006               	pop		; remove dummy address from shadow register refresh
  7946  000FCA  CFFA F003          	movff	pclath,??_keypressed+2
  7947  000FCE  CFFB F004          	movff	pclatu,??_keypressed+3
  7948  000FD2  CFE9 F005          	movff	fsr0l,??_keypressed+4
  7949  000FD6  CFEA F006          	movff	fsr0h,??_keypressed+5
  7950  000FDA  CFE1 F007          	movff	fsr1l,??_keypressed+6
  7951  000FDE  CFE2 F008          	movff	fsr1h,??_keypressed+7
  7952  000FE2  CFD9 F009          	movff	fsr2l,??_keypressed+8
  7953  000FE6  CFDA F00A          	movff	fsr2h,??_keypressed+9
  7954  000FEA  CFF3 F00B          	movff	prodl,??_keypressed+10
  7955  000FEE  CFF4 F00C          	movff	prodh,??_keypressed+11
  7956  000FF2  CFF6 F00D          	movff	tblptrl,??_keypressed+12
  7957  000FF6  CFF7 F00E          	movff	tblptrh,??_keypressed+13
  7958  000FFA  CFF8 F00F          	movff	tblptru,??_keypressed+14
  7959  000FFE  CFF5 F010          	movff	tablat,??_keypressed+15
  7960                           
  7961                           ;main.c: 125: if(INT1IF){
  7962  001002  B0F0               	btfsc	intcon3,0,c	;volatile
  7963  001004  D01B               	goto	i2l3243
  7964  001006  D03F               	goto	i2l92
  7965  001008                     i2l3223:
  7966                           
  7967                           ;main.c: 128: curr_state = OPERATION_END;
  7968  001008  0E02               	movlw	2
  7969  00100A  D012               	goto	L10
  7970  00100C                     i2l3225:
  7971                           
  7972                           ;main.c: 132: curr_state = OPERATION;
  7973  00100C  0E01               	movlw	1
  7974  00100E  D010               	goto	L10
  7975  001010                     i2l3227:
  7976                           
  7977                           ;main.c: 136: curr_state = RUNTIME;
  7978  001010  0E05               	movlw	5
  7979  001012  D00E               	goto	L10
  7980  001014                     i2l3229:
  7981                           
  7982                           ;main.c: 140: curr_state = BOTTLECOUNT;
  7983  001014  0E04               	movlw	4
  7984  001016  0100               	movlb	0	; () banked
  7985  001018  6FDF               	movwf	_curr_state& (0+255),b
  7986                           
  7987                           ;main.c: 141: bot_type = TOTAL;
  7988  00101A  0E00               	movlw	0
  7989  00101C  D00C               	goto	L9
  7990  00101E                     i2l3231:
  7991                           
  7992                           ;main.c: 144: bot_type = A;
  7993  00101E  0E01               	movlw	1
  7994  001020  D00A               	goto	L9
  7995  001022                     i2l3233:
  7996                           
  7997                           ;main.c: 147: bot_type = B;
  7998  001022  0E02               	movlw	2
  7999  001024  D008               	goto	L9
  8000  001026                     i2l3235:
  8001                           
  8002                           ;main.c: 150: bot_type = C;
  8003  001026  0E03               	movlw	3
  8004  001028  D006               	goto	L9
  8005  00102A                     i2l3237:
  8006                           
  8007                           ;main.c: 153: bot_type = D;
  8008  00102A  0E04               	movlw	4
  8009  00102C  D004               	goto	L9
  8010  00102E                     i2l3239:
  8011                           
  8012                           ;main.c: 156: curr_state = DATETIME;
  8013  00102E  0E03               	movlw	3
  8014  001030                     L10:
  8015  001030  0100               	movlb	0	; () banked
  8016  001032  6FDF               	movwf	_curr_state& (0+255),b
  8017                           
  8018                           ;main.c: 157: bot_type = O;
  8019  001034  0E05               	movlw	5
  8020  001036                     L9:
  8021  001036  0100               	movlb	0	; () banked
  8022  001038  6FDE               	movwf	_bot_type& (0+255),b
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;main.c: 161: }
  8026                           
  8027                           ; BSR set to: 0
  8028                           ;main.c: 160: break;
  8029                           
  8030                           ;main.c: 159: default:
  8031                           
  8032                           ;main.c: 158: break;
  8033  00103A  D025               	goto	i2l92
  8034  00103C                     i2l3243:
  8035  00103C  3881               	swapf	3969,w,c	;volatile
  8036  00103E  0B0F               	andlw	15
  8037  001040  0B0F               	andlw	15
  8038  001042  6E01               	movwf	??_keypressed& (0+255),c
  8039  001044  6A02               	clrf	(??_keypressed+1)& (0+255),c
  8040                           
  8041                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8042                           ; Switch size 1, requested type "space"
  8043                           ; Number of cases is 1, Range of values is 0 to 0
  8044                           ; switch strategies available:
  8045                           ; Name         Instructions Cycles
  8046                           ; simple_byte            4     3 (average)
  8047                           ;	Chosen strategy is simple_byte
  8048  001046  5002               	movf	??_keypressed+1,w,c
  8049  001048  0A00               	xorlw	0	; case 0
  8050  00104A  A4D8               	btfss	status,2,c
  8051  00104C  D01C               	goto	i2l92
  8052                           
  8053                           ; Switch size 1, requested type "space"
  8054                           ; Number of cases is 9, Range of values is 0 to 15
  8055                           ; switch strategies available:
  8056                           ; Name         Instructions Cycles
  8057                           ; simple_byte           28    15 (average)
  8058                           ;	Chosen strategy is simple_byte
  8059  00104E  5001               	movf	??_keypressed,w,c
  8060  001050  0A00               	xorlw	0	; case 0
  8061  001052  B4D8               	btfsc	status,2,c
  8062  001054  D7DB               	goto	i2l3225
  8063  001056  0A01               	xorlw	1	; case 1
  8064  001058  B4D8               	btfsc	status,2,c
  8065  00105A  D7DA               	goto	i2l3227
  8066  00105C  0A03               	xorlw	3	; case 2
  8067  00105E  B4D8               	btfsc	status,2,c
  8068  001060  D7D9               	goto	i2l3229
  8069  001062  0A01               	xorlw	1	; case 3
  8070  001064  B4D8               	btfsc	status,2,c
  8071  001066  D7DB               	goto	i2l3231
  8072  001068  0A07               	xorlw	7	; case 4
  8073  00106A  B4D8               	btfsc	status,2,c
  8074  00106C  D7E0               	goto	i2l3239
  8075  00106E  0A03               	xorlw	3	; case 7
  8076  001070  B4D8               	btfsc	status,2,c
  8077  001072  D7D7               	goto	i2l3233
  8078  001074  0A0C               	xorlw	12	; case 11
  8079  001076  B4D8               	btfsc	status,2,c
  8080  001078  D7D6               	goto	i2l3235
  8081  00107A  0A07               	xorlw	7	; case 12
  8082  00107C  B4D8               	btfsc	status,2,c
  8083  00107E  D7C4               	goto	i2l3223
  8084  001080  0A03               	xorlw	3	; case 15
  8085  001082  B4D8               	btfsc	status,2,c
  8086  001084  D7D2               	goto	i2l3237
  8087  001086                     i2l92:
  8088                           
  8089                           ;main.c: 162: }
  8090                           ;main.c: 163: INT1IF = 0;
  8091  001086  90F0               	bcf	intcon3,0,c	;volatile
  8092                           
  8093                           ;main.c: 164: return;
  8094  001088  C010  FFF5         	movff	??_keypressed+15,tablat
  8095  00108C  C00F  FFF8         	movff	??_keypressed+14,tblptru
  8096  001090  C00E  FFF7         	movff	??_keypressed+13,tblptrh
  8097  001094  C00D  FFF6         	movff	??_keypressed+12,tblptrl
  8098  001098  C00C  FFF4         	movff	??_keypressed+11,prodh
  8099  00109C  C00B  FFF3         	movff	??_keypressed+10,prodl
  8100  0010A0  C00A  FFDA         	movff	??_keypressed+9,fsr2h
  8101  0010A4  C009  FFD9         	movff	??_keypressed+8,fsr2l
  8102  0010A8  C008  FFE2         	movff	??_keypressed+7,fsr1h
  8103  0010AC  C007  FFE1         	movff	??_keypressed+6,fsr1l
  8104  0010B0  C006  FFEA         	movff	??_keypressed+5,fsr0h
  8105  0010B4  C005  FFE9         	movff	??_keypressed+4,fsr0l
  8106  0010B8  C004  FFFB         	movff	??_keypressed+3,pclatu
  8107  0010BC  C003  FFFA         	movff	??_keypressed+2,pclath
  8108  0010C0  926F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8109  0010C2  0011               	retfie		f
  8110  0010C4                     __end_of_keypressed:
  8111                           	opt stack 0
  8112                           pclatu	equ	0xFFB
  8113                           pclath	equ	0xFFA
  8114                           tblptru	equ	0xFF8
  8115                           tblptrh	equ	0xFF7
  8116                           tblptrl	equ	0xFF6
  8117                           tablat	equ	0xFF5
  8118                           prodh	equ	0xFF4
  8119                           prodl	equ	0xFF3
  8120                           intcon	equ	0xFF2
  8121                           intcon2	equ	0xFF1
  8122                           intcon3	equ	0xFF0
  8123                           fsr0h	equ	0xFEA
  8124                           fsr0l	equ	0xFE9
  8125                           wreg	equ	0xFE8
  8126                           fsr1h	equ	0xFE2
  8127                           fsr1l	equ	0xFE1
  8128                           indf2	equ	0xFDF
  8129                           postinc2	equ	0xFDE
  8130                           postdec2	equ	0xFDD
  8131                           fsr2h	equ	0xFDA
  8132                           fsr2l	equ	0xFD9
  8133                           status	equ	0xFD8
  8134                           pclatu	equ	0xFFB
  8135                           pclath	equ	0xFFA
  8136                           tblptru	equ	0xFF8
  8137                           tblptrh	equ	0xFF7
  8138                           tblptrl	equ	0xFF6
  8139                           tablat	equ	0xFF5
  8140                           prodh	equ	0xFF4
  8141                           prodl	equ	0xFF3
  8142                           intcon	equ	0xFF2
  8143                           intcon2	equ	0xFF1
  8144                           intcon3	equ	0xFF0
  8145                           fsr0h	equ	0xFEA
  8146                           fsr0l	equ	0xFE9
  8147                           wreg	equ	0xFE8
  8148                           fsr1h	equ	0xFE2
  8149                           fsr1l	equ	0xFE1
  8150                           indf2	equ	0xFDF
  8151                           postinc2	equ	0xFDE
  8152                           postdec2	equ	0xFDD
  8153                           fsr2h	equ	0xFDA
  8154                           fsr2l	equ	0xFD9
  8155                           status	equ	0xFD8
  8156                           
  8157                           	psect	rparam
  8158  0000                     pclatu	equ	0xFFB
  8159                           pclath	equ	0xFFA
  8160                           tblptru	equ	0xFF8
  8161                           tblptrh	equ	0xFF7
  8162                           tblptrl	equ	0xFF6
  8163                           tablat	equ	0xFF5
  8164                           prodh	equ	0xFF4
  8165                           prodl	equ	0xFF3
  8166                           intcon	equ	0xFF2
  8167                           intcon2	equ	0xFF1
  8168                           intcon3	equ	0xFF0
  8169                           fsr0h	equ	0xFEA
  8170                           fsr0l	equ	0xFE9
  8171                           wreg	equ	0xFE8
  8172                           fsr1h	equ	0xFE2
  8173                           fsr1l	equ	0xFE1
  8174                           indf2	equ	0xFDF
  8175                           postinc2	equ	0xFDE
  8176                           postdec2	equ	0xFDD
  8177                           fsr2h	equ	0xFDA
  8178                           fsr2l	equ	0xFD9
  8179                           status	equ	0xFD8
  8180                           
  8181                           	psect	temp
  8182  00006F                     btemp:
  8183                           	opt stack 0
  8184  00006F                     	ds	1
  8185  0000                     int$flags	set	btemp
  8186                           pclatu	equ	0xFFB
  8187                           pclath	equ	0xFFA
  8188                           tblptru	equ	0xFF8
  8189                           tblptrh	equ	0xFF7
  8190                           tblptrl	equ	0xFF6
  8191                           tablat	equ	0xFF5
  8192                           prodh	equ	0xFF4
  8193                           prodl	equ	0xFF3
  8194                           intcon	equ	0xFF2
  8195                           intcon2	equ	0xFF1
  8196                           intcon3	equ	0xFF0
  8197                           fsr0h	equ	0xFEA
  8198                           fsr0l	equ	0xFE9
  8199                           wreg	equ	0xFE8
  8200                           fsr1h	equ	0xFE2
  8201                           fsr1l	equ	0xFE1
  8202                           indf2	equ	0xFDF
  8203                           postinc2	equ	0xFDE
  8204                           postdec2	equ	0xFDD
  8205                           fsr2h	equ	0xFDA
  8206                           fsr2l	equ	0xFD9
  8207                           status	equ	0xFD8


Data Sizes:
    Strings     298
    Constant    99
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    108     110
    BANK0           128     94      96
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_19(CODE[23]), STR_18(CODE[23]), STR_17(CODE[17]), STR_16(CODE[17]), 
		 -> STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[19]), STR_4(CODE[17]), 
		 -> STR_3(CODE[19]), STR_2(CODE[17]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    date_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK0[7]), 

    runtime@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK0[7]), 

    runtime@end_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK0[7]), 

    init_operation@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK0[7]), 

    init_operation@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK0[7]), 

    time_difference@time2	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK0[7]), 

    time_difference@time1	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK0[7]), main@time(BANK0[7]), 

    update_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK0[7]), main@time(BANK0[7]), main@start_time(BANK0[7]), 


Critical Paths under _main in COMRAM

    _main->_bottle_count
    _main->_init_operation
    _runtime->_time_difference
    _init_operation->_time_difference
    _update_time->_I2C_Master_Read
    _update_time->_I2C_Master_Write
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _initLCD->_lcdInst
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _printf->_time_difference
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_date_time
    _runtime->_printf
    _operation_end->_printf
    _init_operation->_printf
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _date_time->_printf
    _bottle_count->_printf
    _printf->_time_difference

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0  182128
                                             71 BANK0     23    23      0
                    _I2C_Master_Init
                       _bottle_count
                          _date_time
                            _initLCD
                     _init_operation
                            _lcdInst
                      _operation_end
                             _printf
                            _runtime
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _runtime                                              4     0      4   78273
                                             66 BANK0      4     0      4
                            _lcdInst
                             _printf
                    _time_difference
 ---------------------------------------------------------------------------------
 (1) _operation_end                                        0     0      0    5342
                              _delay
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _delay                                                6     4      2     156
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _init_operation                                       6     2      4   79711
                                            106 COMRAM     2     2      0
                                             66 BANK0      4     0      4
                            _initLCD
                            _lcdInst
                             _printf
                    _time_difference
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _update_time                                          3     1      2    1181
                                             19 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _time_difference                                     20    16      4   72871
                                            105 COMRAM     1     1      0
                                             25 BANK0     19    15      4
                             ___wmul
                         _dec_to_hex
 ---------------------------------------------------------------------------------
 (3) _dec_to_hex                                          16    14      2   71223
                                            103 COMRAM     2     0      2
                                             11 BANK0     14    14      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   59625
                                             97 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   19595
                                             67 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   32239
                                             88 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     376
                                             67 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3    8159
                                             80 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     480
                                             16 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     508
                                             55 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     648
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    2350
                                             70 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7    8868
                                             55 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3446
                                             28 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4155
                                             55 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    3858
                                             43 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     237
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    2658
                                             24 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    2559
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2281
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2148
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                             19 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _date_time                                            6     4      2    6399
                                            106 COMRAM     1     1      0
                                             66 BANK0      5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     724
                                             17 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                             17 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         2     2      0    5186
                                            106 COMRAM     2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4991
                                             44 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                    _time_difference (ARG)
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                             18 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     848
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                             18 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _keypressed                                          16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _initLCD
     _lcdInst
       _lcdNibble
   _init_operation
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
     _update_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _lcdInst
     _lcdNibble
   _operation_end
     _delay
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
     _time_difference (ARG)
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _runtime
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _update_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5E      60       5       75.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6C      6E       1       87.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CE      34        0.0%
DATA                 0      0      CE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 07 11:32:32 2017

              _update_time 19F8               ___altoft@exp 004F              ___altoft@sign 0050  
             ___awdiv@sign 0016        ___wmul@multiplicand 0013                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000               ___ftadd@exp1 0037  
             ___ftadd@exp2 0036               ___ftadd@sign 0035                        l220 1E34  
                      l276 012E                        l721 1B68                        l561 05E6  
                      l538 1692                        l618 1DF0                        l731 1CCC  
                      l565 0610                        l576 06C0                        l585 06DC  
                      l753 0786                        l668 196E                        l596 1360  
                      l916 0470                        l917 0594                        l758 08BC  
                      l927 1462               __CFG_CPB$OFF 000000                        _PEN 007E2A  
             __CFG_CPD$OFF 000000                        _SEN 007E28           ??_init_operation 006B  
                      _exp 03BE                        _log 0DA2                        _pow 074E  
                      wreg 000FE8               __CFG_LVP$OFF 000000               ___ftdiv@cntr 0022  
             ___ftdiv@sign 0027               __CFG_WDT$OFF 000000                       l2213 19A2  
                     l3013 1C66                       l2303 1208                       l2215 19AE  
                     l3007 1C5A                       l3041 192C                       l2321 124A  
                     l3017 1C7A                       l3009 1C5E                       l3051 1960  
                     l3043 1930                       l2171 1622                       l2251 064E  
                     l2235 061E                       l2331 1272                       l2411 1782  
                     l3019 1C7E                       l2181 167E                       l2173 162C  
                     l2261 0684                       l2229 05F4                       l2317 123A  
                     l3039 1920                       l2183 1688                       l2175 164A  
                     l2167 1614                       l2271 06B8                       l2263 068C  
                     l2327 1262                       l2343 181A                       l2511 13E8  
                     l2503 13C0                       l2257 0670                       l2353 1876  
                     l3313 0DDC                       l2179 1660                       l2435 12FC  
                     l2259 067A                       l2347 184A                       l2363 10F0  
                     l2507 13CE                       l3307 0DBC                       l3501 1B3E  
                     l2429 12D4                       l2277 06F8                       l2269 06AE  
                     l2381 1156                       l3341 0442                       l3511 1B5E  
                     l3503 1B42                       l2711 189E                       l2455 133A  
                     l2287 0728                       l2391 117E                       l3335 040C  
                     l3521 1CAA                       l2721 18C0                       l2705 188E  
                     l2561 1A70                       l2473 1D2C                       l2297 11E0  
                     l2393 118A                       l2385 1166                       l2553 15CC  
                     l2537 159E                       l2529 155A                       l3329 03D6  
                     l3523 1CAE                       l2563 1A7C                       l2395 1190  
                     l3363 056A                       l3605 01BE                       l3621 01FA  
                     l3453 1DAE                       l2717 18B4                       l2733 18E6  
                     l2485 1D6A                       l2549 15C0                       l3527 1CC2  
                     l3519 1CA2                       l3607 01C4                       l3623 020C  
                     l3551 0034                       l2719 18BC                       l2399 11A6  
                     l3391 080E                       l3383 07AC                       l3463 0EDA  
                     l3641 028A                       l3633 0266                       l3553 0046  
                     l3801 0C3C                       l2737 18F4                       l2729 18DC  
                     l3297 14B0                       l3377 0794                       l3635 0270  
                     l3571 00F6                       l3563 0080                       l3547 0020  
                     l3803 0C5E                       l3299 152C                       l3395 0834  
                     l3475 0FB2                       l3723 16CA                       l3661 032E  
                     l3653 02CC                       l3629 022E                       l3557 0050  
                     l3805 0C74                       l3671 0394                       l3647 02A6  
                     l3591 0182                       l3575 00FC                       l3743 08FE  
                     l3735 1734                       l3489 1E14                       l3649 02B2  
                     l3657 02E0                       l3593 0188                       l3673 03A0  
                     l3753 0926                       l3499 1B36                       l3659 02E6  
                     l3667 037A                       l3587 0166                       l3747 0906  
                     l3683 1A34                       l3851 0D3E                       l3843 0CFC  
                     l3669 038C                       l3781 0BB2                       l3853 0D44  
                     l3845 0D02                       l3775 0B84                       l3679 1A2C  
                     l3793 0C0E                       l3769 0B56                       l3689 1A50  
                     l3849 0D2C                       l3857 0D62                       l3787 0BE0  
                     l3859 0D84                       ?_exp 0059                       ?_log 0044  
                     ?_pow 0062                       STR_1 FED4                       STR_2 FFDC  
                     STR_3 FF30                       STR_4 FFBA                       STR_5 FF1D  
                     STR_6 FF76                       STR_7 FF65                       STR_8 FF87  
                     STR_9 FF65                       u2100 157A                       u2060 13DA  
                     u2108 157C                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       _LATE 000F8D  
                     u3050 07F8                       u1561 05B2                       u3090 1DAC  
                     u1571 05C6                       u1771 11C8                       u1861 10D4  
                     u1950 17AA                       u2815 1AF4                       u3607 1BB2  
                     u1791 11F0                       u3527 0D92                       u1880 110E  
                     u3617 1BBA                       u1961 12BC                       u3537 1C6C  
                     u3547 1728                       u3557 1C10                       u1981 12E4  
                     u1885 1106                       u1958 17AC                       u3567 1C44  
                     u2960 044A                       u3577 0C68                       u2970 044C  
                     u3587 1B8A                       _RCEN 007E2B                       u3597 1B92  
                     i2l92 1086                       _RSEN 007E29                       _main 0C80  
             ___ftpack@arg 0011                       _keys FE71               ___ftpack@exp 0014  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 006F                       exp@x 0059  
                     log@x 0044                       pow@x 0062                       pow@y 0065  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000               ___ftmul@cntr 002A  
             ___param_bank 000000               ___ftmul@sign 002B              ?_bottle_count 0001  
             ___fttol@exp1 0046                      ??_exp 005C                      ??_log 0047  
             ___fttol@lval 0042                      ??_pow 0068           ?_I2C_Master_Init 001E  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001               main@end_time 00D0  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D            __end_of___awdiv 18FE            __end_of___ftadd 074E  
                    STR_10 FFCB                      STR_11 FF65                      STR_12 FF98  
                    STR_20 FF43                      STR_13 FF65                      STR_14 FFED  
                    STR_15 FF65                      STR_16 FFA9                      STR_17 FF54  
                    STR_18 FEEF                      STR_19 FF06            __end_of___ftdiv 1392  
          __end_of___ftneg 1DFE            __end_of___lldiv 1980            __end_of___ftmul 12AC  
          ___awdiv@divisor 0013            __end_of___ftsub 1D56            __end_of___fttol 11B8  
          __end_of___lwdiv 1B72            __end_of___lwmod 1CD6            ___awdiv@counter 0015  
                    _PORTB 000F81                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000               ___lltoft@exp 0021  
          __end_of_lcdInst 1E5E             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
                    _nRBPU 007F8F              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_initLCD 1C50             __CFG_EBTRB$OFF 000000  
            ___awtoft@sign 001C                      _delay 1C50            __end_of_dpowers FE8C  
                    _floor 1392                      _ldexp 1542                      _frexp 175A  
                    _errno 006D            __end_of_isdigit 1E1C              ___ftpack@sign 0015  
                    _putch 1E46                      pclath 000FFA                      tablat 000FF5  
                    pow@yi 0087                      status 000FD8            __end_of_runtime 1C0A  
           __CFG_PBADEN$ON 000000                exp@exponent 005F                ldexp@newexp 0047  
          __initialization 1E1C                log@exponent 0047   init_operation@start_time 00C2  
           ??_bottle_count 006B               __end_of_main 0DA2               __end_of_keys FE82  
             update_time@i 0016                     ??_main 00C7              ___fttol@sign1 0041  
          runtime@end_time 00C4              __activetblptr 000002          time_difference@d1 00A9  
        time_difference@d2 00AA          time_difference@d3 00AB          time_difference@s1 00A5  
        time_difference@s2 00A7          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0012  
                   ?_delay 0011         ??_I2C_Master_Start 0012                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0014                     ?_floor 0051  
                   ?_ldexp 0044                     ?_frexp 0011           __end_of___altoft 19F8  
         ___awdiv@dividend 0011           __end_of___awtoft 1D8E                     ?_putch 0001  
         __end_of___ftpack 16B2           __end_of___lltoft 1AC6                     _INT1IE 007F83  
                   _INT1IF 007F80                     i2l3231 101E                     i2l3223 1008  
                   i2l3233 1022                     i2l3225 100C                     i2l3235 1026  
                   i2l3227 1010                     i2l3243 103C                     i2l3237 102A  
                   i2l3229 1014                     i2l3239 102E                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
          update_time@time 0014             __CFG_XINST$OFF 000000                     ___ftge 17EA  
                   ___wmul 1DB4                  ??___awdiv 0015                  ??___ftadd 0032  
           __CFG_STVREN$ON 000000                  ??___ftdiv 001F                  ??___ftneg 0014  
                ??___lldiv 0019                  ??___ftmul 0023                  ??___ftsub 003E  
                ??___fttol 003C                  ??___lwdiv 0015                  ??___lwmod 001C  
            dec_to_hex@num 0068                     delay@i 0014           ___awdiv@quotient 0017  
                ??_lcdInst 0013                     _printf 0012                     floor@i 0054  
                   floor@x 0051      ___ftmul@f3_as_product 0027                  ??_initLCD 0014  
                ??_isdigit 0011            _time_difference 0A1C               __mediumconst FE70  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
                ??_runtime 006B           __end_ofexp@coeff FEB9           __end_oflog@coeff FED4  
               __accesstop 0080    __end_of__initialization 1E26                 ___altoft@c 0047  
               ___ftadd@f1 002C                 ___ftadd@f2 002F                 ___ftge@ff1 0011  
               ___ftge@ff2 0014      __end_of_operation_end 1D16               eval_poly@res 0041  
            ___rparam_used 000001                 ___ftdiv@f1 0019                 ___ftdiv@f2 001C  
               ___ftdiv@f3 0023                 ___ftneg@f1 0011       time_difference@time1 0099  
     time_difference@time2 009B                 ___awtoft@c 0019                 ___ftmul@f1 001D  
               ___ftmul@f2 0020                 ___ftsub@f1 0038                 ___ftsub@f2 003B  
               ___fttol@f1 0038       __end_of_happynewyear FE9B             __pcstackCOMRAM 0001  
             ?_update_time 0014              __end_of_delay 1C94                 ___lltoft@c 0019  
            __end_of_floor 1470              __end_of_ldexp 1604              __end_of_frexp 17EA  
            __end_of_putch 1E52         __size_of_date_time 0152         __size_of_lcdNibble 004E  
                  ??_delay 0013                    ??_floor 0054                    ??_ldexp 0049  
                  ??_frexp 0016       __end_of_bottle_count 0C80                 _dec_to_hex 0EBC  
                  ??_putch 0013                 __pbssBANK0 00DE         time_difference@hr1 009D  
       time_difference@hr2 009F         __size_of_eval_poly 00D2                    ?___ftge 0011  
                  ?___wmul 0011                  ?___altoft 0047    __end_of_time_difference 0B54  
                ?___awtoft 0019                  ?___ftpack 0011                    ?_printf 00AC  
                ?___lltoft 0019                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7          __end_of_date_time 0A1C         init_operation@time 00C4  
        __end_of_lcdNibble 1BC0                    __Hparam 0000                    __Lparam 0000  
          __size_of___ftge 0090                    ___awdiv 187A                    ___ftadd 05A2  
                  ___ftdiv 12AC                    ___ftneg 1DDA                    ___lldiv 18FE  
          __size_of___wmul 0026                    ___ftmul 11B8                    ___ftsub 1D16  
                  ___fttol 10C4                    ___lwdiv 1B20                    ___lwmod 1C94  
               _curr_state 00DF                 ??___altoft 004B                    __pcinit 1E1C  
               ??___awtoft 001C                 ??___ftpack 0016          __end_of_eval_poly 1542  
                  __ramtop 1000                    _lcdInst 1E52                 ??___lltoft 001D  
                  __ptext0 0C80                    __ptext1 1BC0                    __ptext2 1CD6  
                  __ptext3 1C50                    __ptext4 16B2                    __ptext5 19F8  
                  __ptext6 0A1C                    __ptext7 0EBC                    __ptext8 074E  
                  __ptext9 0DA2                 delay@i_272 0016            __size_of_printf 03AC  
           dec_to_hex@temp 0091                    _initLCD 1C0A          __end_of_hexpowers FE94  
                  _dpowers FE82               __size_of_exp 01E4               __size_of_log 011A  
                  _isdigit 1DFE               __size_of_pow 017C                 _keypressed 0008  
 __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012  
               date_time@i 006B   __size_of_I2C_Master_Stop 0008                    _runtime 1BC0  
              ?_dec_to_hex 0068             __pintcode_body 0FC8       end_of_initialization 1E26  
                  exp@sign 0061    __size_of_init_operation 00A8              __Lmediumconst FE70  
                  int_func 0FC8  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 0015                    pow@sign 0086            ___lldiv@counter 001D  
                  printf@c 00C1                    printf@f 00AC           I2C_Master_Init@c 001E  
         I2C_Master_Read@a 0012                    postdec2 000FDD                    postinc2 000FDE  
            date_time@time 00C2       __size_of_update_time 0072             main@start_time 00C9  
         ?_time_difference 0099                  _PORTBbits 000F81      __size_of_bottle_count 012C  
             _happynewyear FE94                ___ftdiv@exp 0026                printf@width 00BF  
              ___ftmul@exp 0026               _bottle_count 0B54             __end_of___ftge 187A  
           __end_of___wmul 1DDA        __size_of_dec_to_hex 010C                 floor@expon 0057  
           __end_of_printf 03BE        start_initialization 1E1C                 eval_poly@d 003B  
               eval_poly@n 003D                 eval_poly@x 0038                ?_keypressed 0001  
               ldexp@value 0044                __end_of_exp 05A2                __end_of_log 0EBC  
              __end_of_pow 08CA                 frexp@value 0011          ??_I2C_Master_Init 0022  
        ??_I2C_Master_Read 0012          ??_I2C_Master_Wait 0011          ??_I2C_Master_Stop 0012  
                 ??___ftge 0017                   ??___wmul 0015           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 00B4          __size_of___altoft 0078          __size_of___awtoft 0038  
        __size_of___ftpack 00AE          __size_of___lltoft 005C                __pbssCOMRAM 006D  
   __size_of_operation_end 0040        time_difference@min1 00A1        time_difference@min2 00A3  
            __pcstackBANK0 0080             _init_operation 16B2           _I2C_Master_Start 1E70  
         _I2C_Master_Write 1E5E                  _date_time 08CA           ___lwdiv@dividend 0011  
        __CFG_CCP2MX$PORTC 000000        __size_of_keypressed 10BC                  __pintcode 0008  
            __pmediumconst FE70                  _lcdNibble 1B72                   ?___awdiv 0011  
                 ?___ftadd 002C                   ?___ftdiv 0019                   ?___ftneg 0011  
                 ?___lldiv 0011                   ?___ftmul 001D                   ?___ftsub 0038  
                 ?___fttol 0038                   ?___lwdiv 0011                   ?___lwmod 0018  
                 ?_lcdInst 0001           dec_to_hex@hexnum 0095                   ?_initLCD 0001  
                 ?_isdigit 0001                  _eval_poly 1470                  _hexpowers FE8C  
         ___lwdiv@quotient 0016             __size_of_delay 0044     __end_of_init_operation 175A  
           __size_of_floor 00DE             __size_of_ldexp 00C2             __size_of_frexp 0090  
             ??_dec_to_hex 006A                   ?_runtime 00C2             __size_of_putch 000C  
             delay@seconds 0011             ___wmul@product 0015                   _LATDbits 000F8C  
            _operation_end 1CD6                 ?_date_time 00C2           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001         __end_of_dec_to_hex 0FC8          ___wmul@multiplier 0011  
            lcdNibble@data 0012                 printf@flag 00BE              lcdNibble@temp 0011  
               printf@prec 00BB                 ?_eval_poly 0038          runtime@start_time 00C2  
      I2C_Master_Read@temp 0013            ?_init_operation 00C2         dec_to_hex@quotient 0097  
                frexp@eptr 0014             ?_operation_end 0001                   __Hrparam 0000  
                 __Lrparam 0000              ??_update_time 0016         __CFG_BOREN$SBORDIS 000000  
              dec_to_hex@i 0093           __size_of___awdiv 0084           __size_of___ftadd 01AC  
         __size_of___ftdiv 00E6           __size_of___ftneg 0024           __size_of___lldiv 0082  
                 ___altoft 1980           __size_of___ftmul 00F4           __size_of___ftsub 0040  
         __size_of___fttol 00F4           __size_of___lwdiv 0052           __size_of___lwmod 0042  
                 ___awtoft 1D56                   ___ftpack 1604                   ___lltoft 1A6A  
              _isdigit$674 0012           __size_of_lcdInst 000C                   _exp$1105 005C  
          _I2C_Master_Init 1AC6            _I2C_Master_Read 1D8E           __size_of_initLCD 0046  
          _I2C_Master_Wait 1E34            _I2C_Master_Stop 1E68               ??_keypressed 0001  
         __size_of_isdigit 001E            ___lwdiv@divisor 0013   __size_of_time_difference 0138  
          ___lwdiv@counter 0015                   __ptext10 03BE                   __ptext11 1542  
                 __ptext20 05A2                   __ptext12 1392                   __ptext21 1DDA  
                 __ptext13 175A                   __ptext30 1E68                   __ptext22 12AC  
                 __ptext14 10C4                   __ptext31 1E70                   __ptext23 1D56  
                 __ptext15 17EA                   __ptext40 1B20                   __ptext32 1D8E  
                 __ptext24 1A6A                   __ptext16 1980                   __ptext41 1E52  
                 __ptext33 1E34                   __ptext25 1604                   __ptext17 1470  
                 __ptext42 1B72                   __ptext34 0B54                   __ptext26 187A  
                 __ptext18 11B8                   __ptext43 1AC6                   __ptext35 0012  
                 __ptext27 1C0A                   __ptext19 1D16                   __ptext44 18FE  
                 __ptext36 1E46                   __ptext28 08CA                   __ptext37 1DFE  
                 __ptext29 1E5E                   __ptext38 1DB4                   __ptext39 1C94  
                 _pow$1103 0080                   _pow$1104 0083                   _bot_type 00DE  
         __size_of_runtime 004A              __size_of_main 0122            _dec_to_hex$1101 008B  
          _dec_to_hex$1102 008E                ??_date_time 00C4                ??_lcdNibble 0011  
       __end_of_keypressed 10C4                   int$flags 006F                  printf@idx 00B8  
                printf@val 00BC                   main@time 00D7        __end_of_update_time 1A6A  
                 exp@coeff FE9B                   log@coeff FEB9                  putch@data 0013  
 __end_of_I2C_Master_Start 1E78   __end_of_I2C_Master_Write 1E68                 _INTCONbits 000FF2  
              ??_eval_poly 003F                   isdigit@c 0013                   intlevel2 0000  
          ??_operation_end 006B           ___lwmod@dividend 0018           ___lldiv@dividend 0011  
                 printf@ap 00B9    __end_of_I2C_Master_Init 1B20    __end_of_I2C_Master_Read 1DB4  
  __end_of_I2C_Master_Wait 1E46    __end_of_I2C_Master_Stop 1E70                lcdInst@data 0013  
         ___lldiv@quotient 0019          I2C_Master_Write@d 0012            ___lwmod@divisor 001A  
          ___lwmod@counter 001C          ??_time_difference 006A  
