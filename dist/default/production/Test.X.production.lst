

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 28 17:43:31 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           ; Version 1.40
    70                           ; Generated 01/12/2016 GMT
    71                           ; 
    72                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F4620 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103  0000                     
   104                           	psect	idataBANK0
   105  002DEE                     __pidataBANK0:
   106                           	opt stack 0
   107                           
   108                           ;initializer for hex_to_dec@F3226
   109  002DEE  00                 	db	0
   110  002DEF  01                 	db	1
   111  002DF0  02                 	db	2
   112  002DF1  03                 	db	3
   113  002DF2  04                 	db	4
   114  002DF3  05                 	db	5
   115  002DF4  06                 	db	6
   116  002DF5  07                 	db	7
   117  002DF6  08                 	db	8
   118  002DF7  09                 	db	9
   119  002DF8  0A                 	db	10
   120  002DF9  0B                 	db	11
   121  002DFA  0C                 	db	12
   122  002DFB  0D                 	db	13
   123  002DFC  0E                 	db	14
   124  002DFD  0F                 	db	15
   125                           
   126                           	psect	mediumconst
   127  00FE80                     __pmediumconst:
   128                           	opt stack 0
   129  00FE80  00                 	db	0
   130  00FE81                     _keys:
   131                           	opt stack 0
   132  00FE81  31                 	db	49
   133  00FE82  32                 	db	50
   134  00FE83  33                 	db	51
   135  00FE84  41                 	db	65
   136  00FE85  34                 	db	52
   137  00FE86  35                 	db	53
   138  00FE87  36                 	db	54
   139  00FE88  42                 	db	66
   140  00FE89  37                 	db	55
   141  00FE8A  38                 	db	56
   142  00FE8B  39                 	db	57
   143  00FE8C  43                 	db	67
   144  00FE8D  2A                 	db	42
   145  00FE8E  30                 	db	48
   146  00FE8F  23                 	db	35
   147  00FE90  44                 	db	68
   148  00FE91  00                 	db	0
   149  00FE92                     __end_of_keys:
   150                           	opt stack 0
   151  00FE92                     _dpowers:
   152                           	opt stack 0
   153  00FE92  0001               	dw	1
   154  00FE94  000A               	dw	10
   155  00FE96  0064               	dw	100
   156  00FE98  03E8               	dw	1000
   157  00FE9A  2710               	dw	10000
   158  00FE9C                     __end_of_dpowers:
   159                           	opt stack 0
   160  00FE9C                     _hexpowers:
   161                           	opt stack 0
   162  00FE9C  0001               	dw	1
   163  00FE9E  0010               	dw	16
   164  00FEA0  0100               	dw	256
   165  00FEA2  1000               	dw	4096
   166  00FEA4                     __end_of_hexpowers:
   167                           	opt stack 0
   168  00FEA4                     _happynewyear:
   169                           	opt stack 0
   170  00FEA4  45                 	db	69
   171  00FEA5  59                 	db	89
   172  00FEA6  23                 	db	35
   173  00FEA7  07                 	db	7
   174  00FEA8  31                 	db	49
   175  00FEA9  12                 	db	18
   176  00FEAA  16                 	db	22
   177  00FEAB                     __end_of_happynewyear:
   178                           	opt stack 0
   179  00FEAB                     exp@coeff:
   180                           	opt stack 0
   181  00FEAB  00                 	db	0
   182  00FEAC  80                 	db	128
   183  00FEAD  3F                 	db	63
   184  00FEAE  72                 	db	114
   185  00FEAF  31                 	db	49
   186  00FEB0  3F                 	db	63
   187  00FEB1  FE                 	db	254
   188  00FEB2  75                 	db	117
   189  00FEB3  3E                 	db	62
   190  00FEB4  58                 	db	88
   191  00FEB5  63                 	db	99
   192  00FEB6  3D                 	db	61
   193  00FEB7  95                 	db	149
   194  00FEB8  1D                 	db	29
   195  00FEB9  3C                 	db	60
   196  00FEBA  C5                 	db	197
   197  00FEBB  AE                 	db	174
   198  00FEBC  3A                 	db	58
   199  00FEBD  79                 	db	121
   200  00FEBE  21                 	db	33
   201  00FEBF  39                 	db	57
   202  00FEC0  94                 	db	148
   203  00FEC1  80                 	db	128
   204  00FEC2  37                 	db	55
   205  00FEC3  93                 	db	147
   206  00FEC4  A7                 	db	167
   207  00FEC5  35                 	db	53
   208  00FEC6  56                 	db	86
   209  00FEC7  15                 	db	21
   210  00FEC8  34                 	db	52
   211  00FEC9                     __end_ofexp@coeff:
   212                           	opt stack 0
   213  00FEC9                     log@coeff:
   214                           	opt stack 0
   215  00FEC9  00                 	db	0
   216  00FECA  00                 	db	0
   217  00FECB  00                 	db	0
   218  00FECC  00                 	db	0
   219  00FECD  80                 	db	128
   220  00FECE  3F                 	db	63
   221  00FECF  F0                 	db	240
   222  00FED0  FF                 	db	255
   223  00FED1  BE                 	db	190
   224  00FED2  E2                 	db	226
   225  00FED3  A9                 	db	169
   226  00FED4  3E                 	db	62
   227  00FED5  83                 	db	131
   228  00FED6  76                 	db	118
   229  00FED7  BE                 	db	190
   230  00FED8  AE                 	db	174
   231  00FED9  2B                 	db	43
   232  00FEDA  3E                 	db	62
   233  00FEDB  3C                 	db	60
   234  00FEDC  C3                 	db	195
   235  00FEDD  BD                 	db	189
   236  00FEDE  D2                 	db	210
   237  00FEDF  13                 	db	19
   238  00FEE0  3D                 	db	61
   239  00FEE1  78                 	db	120
   240  00FEE2  D3                 	db	211
   241  00FEE3  BB                 	db	187
   242  00FEE4                     __end_oflog@coeff:
   243                           	opt stack 0
   244  0000                     _ADCON0	set	4034
   245  0000                     _ADCON1	set	4033
   246  0000                     _EEADR	set	4009
   247  0000                     _EEADRH	set	4010
   248  0000                     _EECON1bits	set	4006
   249  0000                     _EECON2	set	4007
   250  0000                     _EEDATA	set	4008
   251  0000                     _INTCONbits	set	4082
   252  0000                     _LATA	set	3977
   253  0000                     _LATB	set	3978
   254  0000                     _LATC	set	3979
   255  0000                     _LATD	set	3980
   256  0000                     _LATDbits	set	3980
   257  0000                     _LATE	set	3981
   258  0000                     _PIR2bits	set	4001
   259  0000                     _PORTB	set	3969
   260  0000                     _PORTCbits	set	3970
   261  0000                     _PORTEbits	set	3972
   262  0000                     _SSPADD	set	4040
   263  0000                     _SSPBUF	set	4041
   264  0000                     _SSPCON1	set	4038
   265  0000                     _SSPCON2	set	4037
   266  0000                     _SSPSTAT	set	4039
   267  0000                     _TRISA	set	3986
   268  0000                     _TRISB	set	3987
   269  0000                     _TRISC	set	3988
   270  0000                     _TRISD	set	3989
   271  0000                     _TRISE	set	3990
   272  0000                     _ACKDT	set	32301
   273  0000                     _ACKEN	set	32300
   274  0000                     _INT1IE	set	32643
   275  0000                     _INT1IF	set	32640
   276  0000                     _PEN	set	32298
   277  0000                     _RCEN	set	32299
   278  0000                     _RSEN	set	32297
   279  0000                     _SEN	set	32296
   280  0000                     _TRISC3	set	31907
   281  0000                     _TRISC4	set	31908
   282  0000                     _nRBPU	set	32655
   283  00FEE4                     STR_1:
   284  00FEE4  50                 	db	80	;'P'
   285  00FEE5  72                 	db	114	;'r'
   286  00FEE6  65                 	db	101	;'e'
   287  00FEE7  73                 	db	115	;'s'
   288  00FEE8  73                 	db	115	;'s'
   289  00FEE9  20                 	db	32
   290  00FEEA  31                 	db	49	;'1'
   291  00FEEB  20                 	db	32
   292  00FEEC  74                 	db	116	;'t'
   293  00FEED  6F                 	db	111	;'o'
   294  00FEEE  20                 	db	32
   295  00FEEF  62                 	db	98	;'b'
   296  00FEF0  65                 	db	101	;'e'
   297  00FEF1  67                 	db	103	;'g'
   298  00FEF2  69                 	db	105	;'i'
   299  00FEF3  6E                 	db	110	;'n'
   300  00FEF4  20                 	db	32
   301  00FEF5  6F                 	db	111	;'o'
   302  00FEF6  70                 	db	112	;'p'
   303  00FEF7  65                 	db	101	;'e'
   304  00FEF8  72                 	db	114	;'r'
   305  00FEF9  61                 	db	97	;'a'
   306  00FEFA  74                 	db	116	;'t'
   307  00FEFB  69                 	db	105	;'i'
   308  00FEFC  6F                 	db	111	;'o'
   309  00FEFD  6E                 	db	110	;'n'
   310  00FEFE  00                 	db	0
   311  00FEFF                     STR_18:
   312  00FEFF  44                 	db	68	;'D'
   313  00FF00  61                 	db	97	;'a'
   314  00FF01  74                 	db	116	;'t'
   315  00FF02  65                 	db	101	;'e'
   316  00FF03  3A                 	db	58	;':'
   317  00FF04  20                 	db	32
   318  00FF05  25                 	db	37
   319  00FF06  30                 	db	48	;'0'
   320  00FF07  32                 	db	50	;'2'
   321  00FF08  78                 	db	120	;'x'
   322  00FF09  2F                 	db	47
   323  00FF0A  25                 	db	37
   324  00FF0B  30                 	db	48	;'0'
   325  00FF0C  32                 	db	50	;'2'
   326  00FF0D  78                 	db	120	;'x'
   327  00FF0E  2F                 	db	47
   328  00FF0F  25                 	db	37
   329  00FF10  30                 	db	48	;'0'
   330  00FF11  32                 	db	50	;'2'
   331  00FF12  78                 	db	120	;'x'
   332  00FF13  20                 	db	32
   333  00FF14  20                 	db	32
   334  00FF15  00                 	db	0
   335  00FF16                     STR_19:
   336  00FF16  54                 	db	84	;'T'
   337  00FF17  69                 	db	105	;'i'
   338  00FF18  6D                 	db	109	;'m'
   339  00FF19  65                 	db	101	;'e'
   340  00FF1A  3A                 	db	58	;':'
   341  00FF1B  20                 	db	32
   342  00FF1C  25                 	db	37
   343  00FF1D  30                 	db	48	;'0'
   344  00FF1E  32                 	db	50	;'2'
   345  00FF1F  78                 	db	120	;'x'
   346  00FF20  3A                 	db	58	;':'
   347  00FF21  25                 	db	37
   348  00FF22  30                 	db	48	;'0'
   349  00FF23  32                 	db	50	;'2'
   350  00FF24  78                 	db	120	;'x'
   351  00FF25  3A                 	db	58	;':'
   352  00FF26  25                 	db	37
   353  00FF27  30                 	db	48	;'0'
   354  00FF28  32                 	db	50	;'2'
   355  00FF29  78                 	db	120	;'x'
   356  00FF2A  20                 	db	32
   357  00FF2B  20                 	db	32
   358  00FF2C  00                 	db	0
   359  00FF2D                     STR_2:
   360  00FF2D  25                 	db	37
   361  00FF2E  75                 	db	117	;'u'
   362  00FF2F  7C                 	db	124
   363  00FF30  25                 	db	37
   364  00FF31  75                 	db	117	;'u'
   365  00FF32  7C                 	db	124
   366  00FF33  25                 	db	37
   367  00FF34  75                 	db	117	;'u'
   368  00FF35  7C                 	db	124
   369  00FF36  25                 	db	37
   370  00FF37  75                 	db	117	;'u'
   371  00FF38  20                 	db	32
   372  00FF39  20                 	db	32
   373  00FF3A  20                 	db	32
   374  00FF3B  20                 	db	32
   375  00FF3C  20                 	db	32
   376  00FF3D  20                 	db	32
   377  00FF3E  20                 	db	32
   378  00FF3F  20                 	db	32
   379  00FF40  00                 	db	0
   380  00FF41                     STR_5:
   381  00FF41  54                 	db	84	;'T'
   382  00FF42  69                 	db	105	;'i'
   383  00FF43  6D                 	db	109	;'m'
   384  00FF44  65                 	db	101	;'e'
   385  00FF45  3A                 	db	58	;':'
   386  00FF46  20                 	db	32
   387  00FF47  25                 	db	37
   388  00FF48  69                 	db	105	;'i'
   389  00FF49  73                 	db	115	;'s'
   390  00FF4A  20                 	db	32
   391  00FF4B  20                 	db	32
   392  00FF4C  20                 	db	32
   393  00FF4D  20                 	db	32
   394  00FF4E  20                 	db	32
   395  00FF4F  20                 	db	32
   396  00FF50  20                 	db	32
   397  00FF51  20                 	db	32
   398  00FF52  20                 	db	32
   399  00FF53  00                 	db	0
   400  00FF54                     STR_20:
   401  00FF54  30                 	db	48	;'0'
   402  00FF55  31                 	db	49	;'1'
   403  00FF56  32                 	db	50	;'2'
   404  00FF57  33                 	db	51	;'3'
   405  00FF58  34                 	db	52	;'4'
   406  00FF59  35                 	db	53	;'5'
   407  00FF5A  36                 	db	54	;'6'
   408  00FF5B  37                 	db	55	;'7'
   409  00FF5C  38                 	db	56	;'8'
   410  00FF5D  39                 	db	57	;'9'
   411  00FF5E  61                 	db	97	;'a'
   412  00FF5F  62                 	db	98	;'b'
   413  00FF60  63                 	db	99	;'c'
   414  00FF61  64                 	db	100	;'d'
   415  00FF62  65                 	db	101	;'e'
   416  00FF63  66                 	db	102	;'f'
   417  00FF64  00                 	db	0
   418  00FF65                     STR_17:
   419  00FF65  20                 	db	32
   420  00FF66  20                 	db	32
   421  00FF67  20                 	db	32
   422  00FF68  20                 	db	32
   423  00FF69  20                 	db	32
   424  00FF6A  20                 	db	32
   425  00FF6B  20                 	db	32
   426  00FF6C  20                 	db	32
   427  00FF6D  20                 	db	32
   428  00FF6E  20                 	db	32
   429  00FF6F  20                 	db	32
   430  00FF70  20                 	db	32
   431  00FF71  20                 	db	32
   432  00FF72  20                 	db	32
   433  00FF73  20                 	db	32
   434  00FF74  20                 	db	32
   435  00FF75  00                 	db	0
   436  00FF76                     STR_7:
   437  00FF76  43                 	db	67	;'C'
   438  00FF77  6F                 	db	111	;'o'
   439  00FF78  75                 	db	117	;'u'
   440  00FF79  6E                 	db	110	;'n'
   441  00FF7A  74                 	db	116	;'t'
   442  00FF7B  3A                 	db	58	;':'
   443  00FF7C  20                 	db	32
   444  00FF7D  25                 	db	37
   445  00FF7E  75                 	db	117	;'u'
   446  00FF7F  20                 	db	32
   447  00FF80  20                 	db	32
   448  00FF81  20                 	db	32
   449  00FF82  20                 	db	32
   450  00FF83  20                 	db	32
   451  00FF84  20                 	db	32
   452  00FF85  20                 	db	32
   453  00FF86  00                 	db	0
   454  00FF87                     STR_6:
   455  00FF87  54                 	db	84	;'T'
   456  00FF88  6F                 	db	111	;'o'
   457  00FF89  74                 	db	116	;'t'
   458  00FF8A  61                 	db	97	;'a'
   459  00FF8B  6C                 	db	108	;'l'
   460  00FF8C  20                 	db	32
   461  00FF8D  42                 	db	66	;'B'
   462  00FF8E  6F                 	db	111	;'o'
   463  00FF8F  74                 	db	116	;'t'
   464  00FF90  74                 	db	116	;'t'
   465  00FF91  6C                 	db	108	;'l'
   466  00FF92  65                 	db	101	;'e'
   467  00FF93  20                 	db	32
   468  00FF94  20                 	db	32
   469  00FF95  20                 	db	32
   470  00FF96  20                 	db	32
   471  00FF97  00                 	db	0
   472  00FF98                     STR_8:
   473  00FF98  59                 	db	89	;'Y'
   474  00FF99  4F                 	db	79	;'O'
   475  00FF9A  50                 	db	80	;'P'
   476  00FF9B  20                 	db	32
   477  00FF9C  57                 	db	87	;'W'
   478  00FF9D  69                 	db	105	;'i'
   479  00FF9E  74                 	db	116	;'t'
   480  00FF9F  68                 	db	104	;'h'
   481  00FFA0  20                 	db	32
   482  00FFA1  43                 	db	67	;'C'
   483  00FFA2  61                 	db	97	;'a'
   484  00FFA3  70                 	db	112	;'p'
   485  00FFA4  20                 	db	32
   486  00FFA5  20                 	db	32
   487  00FFA6  20                 	db	32
   488  00FFA7  20                 	db	32
   489  00FFA8  00                 	db	0
   490  00FFA9                     STR_12:
   491  00FFA9  45                 	db	69	;'E'
   492  00FFAA  53                 	db	83	;'S'
   493  00FFAB  4B                 	db	75	;'K'
   494  00FFAC  41                 	db	65	;'A'
   495  00FFAD  20                 	db	32
   496  00FFAE  57                 	db	87	;'W'
   497  00FFAF  69                 	db	105	;'i'
   498  00FFB0  74                 	db	116	;'t'
   499  00FFB1  68                 	db	104	;'h'
   500  00FFB2  20                 	db	32
   501  00FFB3  43                 	db	67	;'C'
   502  00FFB4  61                 	db	97	;'a'
   503  00FFB5  70                 	db	112	;'p'
   504  00FFB6  20                 	db	32
   505  00FFB7  20                 	db	32
   506  00FFB8  20                 	db	32
   507  00FFB9  00                 	db	0
   508  00FFBA                     STR_16:
   509  00FFBA  4F                 	db	79	;'O'
   510  00FFBB  70                 	db	112	;'p'
   511  00FFBC  65                 	db	101	;'e'
   512  00FFBD  72                 	db	114	;'r'
   513  00FFBE  61                 	db	97	;'a'
   514  00FFBF  74                 	db	116	;'t'
   515  00FFC0  69                 	db	105	;'i'
   516  00FFC1  6F                 	db	111	;'o'
   517  00FFC2  6E                 	db	110	;'n'
   518  00FFC3  20                 	db	32
   519  00FFC4  44                 	db	68	;'D'
   520  00FFC5  6F                 	db	111	;'o'
   521  00FFC6  6E                 	db	110	;'n'
   522  00FFC7  65                 	db	101	;'e'
   523  00FFC8  21                 	db	33
   524  00FFC9  20                 	db	32
   525  00FFCA  00                 	db	0
   526  00FFCB                     STR_4:
   527  00FFCB  54                 	db	84	;'T'
   528  00FFCC  6F                 	db	111	;'o'
   529  00FFCD  74                 	db	116	;'t'
   530  00FFCE  61                 	db	97	;'a'
   531  00FFCF  6C                 	db	108	;'l'
   532  00FFD0  20                 	db	32
   533  00FFD1  4F                 	db	79	;'O'
   534  00FFD2  70                 	db	112	;'p'
   535  00FFD3  65                 	db	101	;'e'
   536  00FFD4  72                 	db	114	;'r'
   537  00FFD5  61                 	db	97	;'a'
   538  00FFD6  74                 	db	116	;'t'
   539  00FFD7  69                 	db	105	;'i'
   540  00FFD8  6F                 	db	111	;'o'
   541  00FFD9  6E                 	db	110	;'n'
   542  00FFDA  20                 	db	32
   543  00FFDB  00                 	db	0
   544  00FFDC                     STR_10:
   545  00FFDC  59                 	db	89	;'Y'
   546  00FFDD  4F                 	db	79	;'O'
   547  00FFDE  50                 	db	80	;'P'
   548  00FFDF  20                 	db	32
   549  00FFE0  57                 	db	87	;'W'
   550  00FFE1  69                 	db	105	;'i'
   551  00FFE2  74                 	db	116	;'t'
   552  00FFE3  68                 	db	104	;'h'
   553  00FFE4  20                 	db	32
   554  00FFE5  4E                 	db	78	;'N'
   555  00FFE6  6F                 	db	111	;'o'
   556  00FFE7  20                 	db	32
   557  00FFE8  43                 	db	67	;'C'
   558  00FFE9  61                 	db	97	;'a'
   559  00FFEA  70                 	db	112	;'p'
   560  00FFEB  20                 	db	32
   561  00FFEC  00                 	db	0
   562  00FFED                     STR_14:
   563  00FFED  45                 	db	69	;'E'
   564  00FFEE  53                 	db	83	;'S'
   565  00FFEF  4B                 	db	75	;'K'
   566  00FFF0  41                 	db	65	;'A'
   567  00FFF1  20                 	db	32
   568  00FFF2  57                 	db	87	;'W'
   569  00FFF3  69                 	db	105	;'i'
   570  00FFF4  74                 	db	116	;'t'
   571  00FFF5  68                 	db	104	;'h'
   572  00FFF6  20                 	db	32
   573  00FFF7  4E                 	db	78	;'N'
   574  00FFF8  6F                 	db	111	;'o'
   575  00FFF9  20                 	db	32
   576  00FFFA  43                 	db	67	;'C'
   577  00FFFB  61                 	db	97	;'a'
   578  00FFFC  70                 	db	112	;'p'
   579  00FFFD  00                 	db	0
   580  0000                     
   581                           ; #config settings
   582  00FFFE  00                 	db	0	; dummy byte at the end
   583  0000                     
   584                           	psect	cinit
   585  002CDE                     __pcinit:
   586                           	opt stack 0
   587  002CDE                     start_initialization:
   588                           	opt stack 0
   589  002CDE                     __initialization:
   590                           	opt stack 0
   591                           
   592                           ; Initialize objects allocated to BANK0 (16 bytes)
   593                           ; load TBLPTR registers with __pidataBANK0
   594  002CDE  0EEE               	movlw	low __pidataBANK0
   595  002CE0  6EF6               	movwf	tblptrl,c
   596  002CE2  0E2D               	movlw	high __pidataBANK0
   597  002CE4  6EF7               	movwf	tblptrh,c
   598  002CE6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   599  002CE8  6EF8               	movwf	tblptru,c
   600  002CEA  EE00  F0EC         	lfsr	0,__pdataBANK0
   601  002CEE  EE10 F010          	lfsr	1,16
   602  002CF2                     copy_data0:
   603  002CF2  0009               	tblrd		*+
   604  002CF4  CFF5 FFEE          	movff	tablat,postinc0
   605  002CF8  50E5               	movf	postdec1,w,c
   606  002CFA  50E1               	movf	fsr1l,w,c
   607  002CFC  E1FA               	bnz	copy_data0
   608                           
   609                           ; Clear objects allocated to BANK0 (2 bytes)
   610  002CFE  0100               	movlb	0
   611  002D00  6BFD               	clrf	(__pbssBANK0+1)& (0+255),b
   612  002D02  6BFC               	clrf	__pbssBANK0& (0+255),b
   613                           
   614                           ; Clear objects allocated to COMRAM (2 bytes)
   615  002D04  6A6E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   616  002D06  6A6D               	clrf	__pbssCOMRAM& (0+255),c
   617  002D08                     end_of_initialization:
   618                           	opt stack 0
   619  002D08                     __end_of__initialization:
   620                           	opt stack 0
   621  002D08  906F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   622  002D0A  926F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   623  002D0C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   624  002D0E  6EF8               	movwf	tblptru,c
   625  002D10  0100               	movlb	0
   626  002D12  EF02  F00C         	goto	_main	;jump to C main() function
   627                           tblptru	equ	0xFF8
   628                           tblptrh	equ	0xFF7
   629                           tblptrl	equ	0xFF6
   630                           tablat	equ	0xFF5
   631                           postinc0	equ	0xFEE
   632                           postdec1	equ	0xFE5
   633                           fsr1l	equ	0xFE1
   634                           
   635                           	psect	bssCOMRAM
   636  00006D                     __pbssCOMRAM:
   637                           	opt stack 0
   638  00006D                     _errno:
   639                           	opt stack 0
   640  00006D                     	ds	2
   641                           tblptru	equ	0xFF8
   642                           tblptrh	equ	0xFF7
   643                           tblptrl	equ	0xFF6
   644                           tablat	equ	0xFF5
   645                           postinc0	equ	0xFEE
   646                           postdec1	equ	0xFE5
   647                           fsr1l	equ	0xFE1
   648                           
   649                           	psect	bssBANK0
   650  0000FC                     __pbssBANK0:
   651                           	opt stack 0
   652  0000FC                     _bot_type:
   653                           	opt stack 0
   654  0000FC                     	ds	1
   655  0000FD                     _curr_state:
   656                           	opt stack 0
   657  0000FD                     	ds	1
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           postinc0	equ	0xFEE
   663                           postdec1	equ	0xFE5
   664                           fsr1l	equ	0xFE1
   665                           
   666                           	psect	dataBANK0
   667  0000EC                     __pdataBANK0:
   668                           	opt stack 0
   669  0000EC                     hex_to_dec@F3226:
   670                           	opt stack 0
   671  0000EC                     	ds	16
   672                           tblptru	equ	0xFF8
   673                           tblptrh	equ	0xFF7
   674                           tblptrl	equ	0xFF6
   675                           tablat	equ	0xFF5
   676                           postinc0	equ	0xFEE
   677                           postdec1	equ	0xFE5
   678                           fsr1l	equ	0xFE1
   679                           
   680                           	psect	cstackBANK1
   681  000100                     __pcstackBANK1:
   682                           	opt stack 0
   683  000100                     init_operation@luminosity1:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x0
   687  000100                     	ds	2
   688  000102                     init_operation@detection_time:
   689                           	opt stack 0
   690                           
   691                           ; 7 bytes @ 0x2
   692  000102                     	ds	7
   693  000109                     _init_operation$1412:
   694                           	opt stack 0
   695                           
   696                           ; 3 bytes @ 0x9
   697  000109                     	ds	3
   698  00010C                     init_operation@g1:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0xC
   702  00010C                     	ds	2
   703  00010E                     init_operation@c1:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0xE
   707  00010E                     	ds	2
   708  000110                     init_operation@c2:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x10
   712  000110                     	ds	2
   713  000112                     init_operation@c1_518:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x12
   717  000112                     	ds	2
   718  000114                     init_operation@c2_522:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x14
   722  000114                     	ds	2
   723  000116                     init_operation@g2:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x16
   727  000116                     	ds	2
   728  000118                     init_operation@g1_516:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x18
   732  000118                     	ds	2
   733  00011A                     init_operation@g2_520:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x1A
   737  00011A                     	ds	2
   738  00011C                     init_operation@r1:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x1C
   742  00011C                     	ds	2
   743  00011E                     init_operation@b1:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x1E
   747  00011E                     	ds	2
   748  000120                     init_operation@i:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x20
   752  000120                     	ds	2
   753  000122                     init_operation@r2:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0x22
   757  000122                     	ds	2
   758  000124                     init_operation@b2:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x24
   762  000124                     	ds	2
   763  000126                     init_operation@r1_515:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x26
   767  000126                     	ds	2
   768  000128                     init_operation@b1_517:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x28
   772  000128                     	ds	2
   773  00012A                     init_operation@r2_519:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x2A
   777  00012A                     	ds	2
   778  00012C                     init_operation@b2_521:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x2C
   782  00012C                     	ds	2
   783  00012E                     init_operation@red:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x2E
   787  00012E                     	ds	2
   788  000130                     init_operation@green:
   789                           	opt stack 0
   790                           
   791                           ; 2 bytes @ 0x30
   792  000130                     	ds	2
   793  000132                     init_operation@blue:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0x32
   797  000132                     	ds	2
   798  000134                     init_operation@clear:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x34
   802  000134                     	ds	2
   803                           tblptru	equ	0xFF8
   804                           tblptrh	equ	0xFF7
   805                           tblptrl	equ	0xFF6
   806                           tablat	equ	0xFF5
   807                           postinc0	equ	0xFEE
   808                           postdec1	equ	0xFE5
   809                           fsr1l	equ	0xFE1
   810                           
   811                           	psect	cstackBANK0
   812  000080                     __pcstackBANK0:
   813                           	opt stack 0
   814  000080                     _pow$1413:
   815                           	opt stack 0
   816                           
   817                           ; 3 bytes @ 0x0
   818  000080                     	ds	3
   819  000083                     _pow$1414:
   820                           	opt stack 0
   821                           
   822                           ; 3 bytes @ 0x3
   823  000083                     	ds	3
   824  000086                     pow@sign:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x6
   828  000086                     	ds	1
   829  000087                     pow@yi:
   830                           	opt stack 0
   831                           
   832                           ; 4 bytes @ 0x7
   833  000087                     	ds	4
   834  00008B                     _dec_to_hex$1408:
   835                           	opt stack 0
   836                           
   837                           ; 3 bytes @ 0xB
   838  00008B                     	ds	3
   839  00008E                     _dec_to_hex$1409:
   840                           	opt stack 0
   841                           
   842                           ; 3 bytes @ 0xE
   843  00008E                     	ds	3
   844  000091                     dec_to_hex@temp:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x11
   848  000091                     	ds	2
   849  000093                     dec_to_hex@i:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x13
   853  000093                     	ds	2
   854  000095                     dec_to_hex@hexnum:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x15
   858  000095                     	ds	2
   859  000097                     dec_to_hex@quotient:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x17
   863  000097                     	ds	2
   864  000099                     ?_time_difference:
   865                           	opt stack 0
   866  000099                     time_difference@time1:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x19
   870  000099                     	ds	2
   871  00009B                     time_difference@time2:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x1B
   875  00009B                     	ds	2
   876  00009D                     time_difference@hr1:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x1D
   880  00009D                     	ds	2
   881  00009F                     time_difference@hr2:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x1F
   885  00009F                     	ds	2
   886  0000A1                     time_difference@min1:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x21
   890  0000A1                     	ds	2
   891  0000A3                     time_difference@min2:
   892                           	opt stack 0
   893                           
   894                           ; 2 bytes @ 0x23
   895  0000A3                     	ds	2
   896  0000A5                     time_difference@s1:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x25
   900  0000A5                     	ds	2
   901  0000A7                     time_difference@s2:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x27
   905  0000A7                     	ds	2
   906  0000A9                     time_difference@d1:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x29
   910  0000A9                     	ds	2
   911  0000AB                     time_difference@d2:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x2B
   915  0000AB                     	ds	2
   916  0000AD                     time_difference@d3:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x2D
   920  0000AD                     	ds	2
   921  0000AF                     ?_printf:
   922                           	opt stack 0
   923  0000AF                     printf@f:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x2F
   927  0000AF                     	ds	8
   928  0000B7                     ??_printf:
   929                           
   930                           ; 1 bytes @ 0x37
   931  0000B7                     	ds	4
   932  0000BB                     printf@idx:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x3B
   936  0000BB                     	ds	1
   937  0000BC                     printf@ap:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x3C
   941  0000BC                     	ds	2
   942  0000BE                     printf@prec:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x3E
   946  0000BE                     	ds	1
   947  0000BF                     printf@val:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x3F
   951  0000BF                     	ds	2
   952  0000C1                     printf@flag:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x41
   956  0000C1                     	ds	1
   957  0000C2                     printf@width:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x42
   961  0000C2                     	ds	2
   962  0000C4                     printf@c:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x44
   966  0000C4                     	ds	1
   967  0000C5                     init_operation@start_time:
   968                           	opt stack 0
   969  0000C5                     runtime@start_time:
   970                           	opt stack 0
   971  0000C5                     bottle_count@bot_count:
   972                           	opt stack 0
   973  0000C5                     operation_end@step_state:
   974                           	opt stack 0
   975  0000C5                     date_time@time:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x45
   979  0000C5                     	ds	2
   980  0000C7                     ??_operation_end:
   981  0000C7                     ??_date_time:
   982  0000C7                     ??_bottle_count:
   983  0000C7                     init_operation@time:
   984                           	opt stack 0
   985  0000C7                     runtime@end_time:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x47
   989  0000C7                     	ds	2
   990  0000C9                     init_operation@bot_count:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x49
   994  0000C9                     	ds	2
   995  0000CB                     init_operation@step_state:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x4B
   999  0000CB                     	ds	2
  1000  0000CD                     ??_init_operation:
  1001                           
  1002                           ; 1 bytes @ 0x4D
  1003  0000CD                     	ds	2
  1004  0000CF                     ??_main:
  1005                           
  1006                           ; 1 bytes @ 0x4F
  1007  0000CF                     	ds	2
  1008  0000D1                     main@start_time:
  1009                           	opt stack 0
  1010                           
  1011                           ; 7 bytes @ 0x51
  1012  0000D1                     	ds	7
  1013  0000D8                     main@end_time:
  1014                           	opt stack 0
  1015                           
  1016                           ; 7 bytes @ 0x58
  1017  0000D8                     	ds	7
  1018  0000DF                     main@time:
  1019                           	opt stack 0
  1020                           
  1021                           ; 7 bytes @ 0x5F
  1022  0000DF                     	ds	7
  1023  0000E6                     main@bot_count:
  1024                           	opt stack 0
  1025                           
  1026                           ; 4 bytes @ 0x66
  1027  0000E6                     	ds	4
  1028  0000EA                     main@step_state:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x6A
  1032  0000EA                     	ds	2
  1033                           tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           postinc0	equ	0xFEE
  1038                           postdec1	equ	0xFE5
  1039                           fsr1l	equ	0xFE1
  1040                           
  1041                           	psect	cstackCOMRAM
  1042  000001                     __pcstackCOMRAM:
  1043                           	opt stack 0
  1044  000001                     ??_keypressed:
  1045  000001                     
  1046                           ; 2 bytes @ 0x0
  1047  000001                     	ds	16
  1048  000011                     ??_isdigit:
  1049  000011                     ??_I2C_Master_Wait:
  1050  000011                     ?___wmul:
  1051                           	opt stack 0
  1052  000011                     ?___awdiv:
  1053                           	opt stack 0
  1054  000011                     ?___lwdiv:
  1055                           	opt stack 0
  1056  000011                     ?___ftpack:
  1057                           	opt stack 0
  1058  000011                     ?_frexp:
  1059                           	opt stack 0
  1060  000011                     ?___ftneg:
  1061                           	opt stack 0
  1062  000011                     ?___lldiv:
  1063                           	opt stack 0
  1064  000011                     lcdNibble@temp:
  1065                           	opt stack 0
  1066  000011                     stepper@r:
  1067                           	opt stack 0
  1068  000011                     stepper_rev@r:
  1069                           	opt stack 0
  1070  000011                     ___wmul@multiplier:
  1071                           	opt stack 0
  1072  000011                     ___awdiv@dividend:
  1073                           	opt stack 0
  1074  000011                     ___lwdiv@dividend:
  1075                           	opt stack 0
  1076  000011                     ___ftpack@arg:
  1077                           	opt stack 0
  1078  000011                     ___ftneg@f1:
  1079                           	opt stack 0
  1080  000011                     frexp@value:
  1081                           	opt stack 0
  1082  000011                     ___lldiv@dividend:
  1083                           	opt stack 0
  1084                           
  1085                           ; 4 bytes @ 0x10
  1086  000011                     	ds	1
  1087  000012                     lcdNibble@data:
  1088                           	opt stack 0
  1089  000012                     I2C_Master_Read@a:
  1090                           	opt stack 0
  1091  000012                     _isdigit$955:
  1092                           	opt stack 0
  1093  000012                     I2C_Master_Write@d:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x11
  1097  000012                     	ds	1
  1098  000013                     ??_stepper:
  1099  000013                     ??_stepper_rev:
  1100  000013                     lcdInst@data:
  1101                           	opt stack 0
  1102  000013                     putch@data:
  1103                           	opt stack 0
  1104  000013                     I2C_Master_Read@temp:
  1105                           	opt stack 0
  1106  000013                     isdigit@c:
  1107                           	opt stack 0
  1108  000013                     ___wmul@multiplicand:
  1109                           	opt stack 0
  1110  000013                     ___awdiv@divisor:
  1111                           	opt stack 0
  1112  000013                     ___lwdiv@divisor:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x12
  1116  000013                     	ds	1
  1117  000014                     ??_initLCD:
  1118  000014                     ___ftpack@exp:
  1119                           	opt stack 0
  1120  000014                     update_time@time:
  1121                           	opt stack 0
  1122  000014                     stepper@i:
  1123                           	opt stack 0
  1124  000014                     stepper_rev@i:
  1125                           	opt stack 0
  1126  000014                     read_colorsensor1@red:
  1127                           	opt stack 0
  1128  000014                     read_colorsensor2@red:
  1129                           	opt stack 0
  1130  000014                     frexp@eptr:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x13
  1134  000014                     	ds	1
  1135  000015                     ___awdiv@counter:
  1136                           	opt stack 0
  1137  000015                     ___ftpack@sign:
  1138                           	opt stack 0
  1139  000015                     ___wmul@product:
  1140                           	opt stack 0
  1141  000015                     ___lwdiv@quotient:
  1142                           	opt stack 0
  1143  000015                     ___lldiv@divisor:
  1144                           	opt stack 0
  1145                           
  1146                           ; 4 bytes @ 0x14
  1147  000015                     	ds	1
  1148  000016                     ??___ftpack:
  1149  000016                     ??_frexp:
  1150  000016                     update_time@i:
  1151                           	opt stack 0
  1152  000016                     ___awdiv@sign:
  1153                           	opt stack 0
  1154  000016                     stepper_state@step_state:
  1155                           	opt stack 0
  1156  000016                     read_colorsensor1@green:
  1157                           	opt stack 0
  1158  000016                     read_colorsensor2@green:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x15
  1162  000016                     	ds	1
  1163  000017                     ___lwdiv@counter:
  1164                           	opt stack 0
  1165  000017                     ___awdiv@quotient:
  1166                           	opt stack 0
  1167                           
  1168                           ; 2 bytes @ 0x16
  1169  000017                     	ds	1
  1170  000018                     ??_stepper_state:
  1171  000018                     ?___lwmod:
  1172                           	opt stack 0
  1173  000018                     read_colorsensor1@blue:
  1174                           	opt stack 0
  1175  000018                     read_colorsensor2@blue:
  1176                           	opt stack 0
  1177  000018                     ___lwmod@dividend:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x17
  1181  000018                     	ds	1
  1182  000019                     ?___awtoft:
  1183                           	opt stack 0
  1184  000019                     ?___lltoft:
  1185                           	opt stack 0
  1186  000019                     ___awtoft@c:
  1187                           	opt stack 0
  1188  000019                     ___lldiv@quotient:
  1189                           	opt stack 0
  1190  000019                     ___lltoft@c:
  1191                           	opt stack 0
  1192                           
  1193                           ; 4 bytes @ 0x18
  1194  000019                     	ds	1
  1195  00001A                     stepper_state@next_state:
  1196                           	opt stack 0
  1197  00001A                     read_colorsensor1@clear:
  1198                           	opt stack 0
  1199  00001A                     read_colorsensor2@clear:
  1200                           	opt stack 0
  1201  00001A                     ___lwmod@divisor:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0x19
  1205  00001A                     	ds	2
  1206  00001C                     ___awtoft@sign:
  1207                           	opt stack 0
  1208  00001C                     ___lwmod@counter:
  1209                           	opt stack 0
  1210                           
  1211                           ; 1 bytes @ 0x1B
  1212  00001C                     	ds	1
  1213  00001D                     ??___lltoft:
  1214  00001D                     ?___ftdiv:
  1215                           	opt stack 0
  1216  00001D                     ?___ftmul:
  1217                           	opt stack 0
  1218  00001D                     ___lldiv@counter:
  1219                           	opt stack 0
  1220  00001D                     ___ftdiv@f1:
  1221                           	opt stack 0
  1222  00001D                     ___ftmul@f1:
  1223                           	opt stack 0
  1224                           
  1225                           ; 3 bytes @ 0x1C
  1226  00001D                     	ds	1
  1227  00001E                     I2C_Master_Init@c:
  1228                           	opt stack 0
  1229                           
  1230                           ; 4 bytes @ 0x1D
  1231  00001E                     	ds	2
  1232  000020                     ___ftdiv@f2:
  1233                           	opt stack 0
  1234  000020                     ___ftmul@f2:
  1235                           	opt stack 0
  1236                           
  1237                           ; 3 bytes @ 0x1F
  1238  000020                     	ds	1
  1239  000021                     ___lltoft@exp:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x20
  1243  000021                     	ds	1
  1244  000022                     ??_I2C_Master_Init:
  1245                           
  1246                           ; 1 bytes @ 0x21
  1247  000022                     	ds	1
  1248  000023                     ??___ftdiv:
  1249  000023                     ??___ftmul:
  1250                           
  1251                           ; 1 bytes @ 0x22
  1252  000023                     	ds	3
  1253  000026                     ___ftdiv@cntr:
  1254                           	opt stack 0
  1255  000026                     ___ftmul@exp:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x25
  1259  000026                     	ds	1
  1260  000027                     ___ftdiv@f3:
  1261                           	opt stack 0
  1262  000027                     ___ftmul@f3_as_product:
  1263                           	opt stack 0
  1264                           
  1265                           ; 3 bytes @ 0x26
  1266  000027                     	ds	3
  1267  00002A                     ___ftdiv@exp:
  1268                           	opt stack 0
  1269  00002A                     ___ftmul@cntr:
  1270                           	opt stack 0
  1271                           
  1272                           ; 1 bytes @ 0x29
  1273  00002A                     	ds	1
  1274  00002B                     ___ftdiv@sign:
  1275                           	opt stack 0
  1276  00002B                     ___ftmul@sign:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x2A
  1280  00002B                     	ds	1
  1281  00002C                     ?___ftadd:
  1282                           	opt stack 0
  1283  00002C                     ___ftadd@f1:
  1284                           	opt stack 0
  1285  00002C                     ___ftge@ff1:
  1286                           	opt stack 0
  1287                           
  1288                           ; 3 bytes @ 0x2B
  1289  00002C                     	ds	3
  1290  00002F                     ___ftadd@f2:
  1291                           	opt stack 0
  1292  00002F                     ___ftge@ff2:
  1293                           	opt stack 0
  1294                           
  1295                           ; 3 bytes @ 0x2E
  1296  00002F                     	ds	3
  1297  000032                     ??___ftadd:
  1298  000032                     ??___ftge:
  1299                           
  1300                           ; 1 bytes @ 0x31
  1301  000032                     	ds	3
  1302  000035                     ___ftadd@sign:
  1303                           	opt stack 0
  1304                           
  1305                           ; 1 bytes @ 0x34
  1306  000035                     	ds	1
  1307  000036                     ___ftadd@exp2:
  1308                           	opt stack 0
  1309                           
  1310                           ; 1 bytes @ 0x35
  1311  000036                     	ds	1
  1312  000037                     ___ftadd@exp1:
  1313                           	opt stack 0
  1314                           
  1315                           ; 1 bytes @ 0x36
  1316  000037                     	ds	1
  1317  000038                     ?___ftsub:
  1318                           	opt stack 0
  1319  000038                     ?_eval_poly:
  1320                           	opt stack 0
  1321  000038                     ?___fttol:
  1322                           	opt stack 0
  1323  000038                     ___ftsub@f1:
  1324                           	opt stack 0
  1325  000038                     ___fttol@f1:
  1326                           	opt stack 0
  1327  000038                     eval_poly@x:
  1328                           	opt stack 0
  1329                           
  1330                           ; 3 bytes @ 0x37
  1331  000038                     	ds	3
  1332  00003B                     eval_poly@d:
  1333                           	opt stack 0
  1334  00003B                     ___ftsub@f2:
  1335                           	opt stack 0
  1336                           
  1337                           ; 3 bytes @ 0x3A
  1338  00003B                     	ds	1
  1339  00003C                     ??___fttol:
  1340                           
  1341                           ; 1 bytes @ 0x3B
  1342  00003C                     	ds	1
  1343  00003D                     eval_poly@n:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x3C
  1347  00003D                     	ds	1
  1348  00003E                     
  1349                           ; 1 bytes @ 0x3D
  1350  00003E                     	ds	1
  1351  00003F                     ??_eval_poly:
  1352                           
  1353                           ; 1 bytes @ 0x3E
  1354  00003F                     	ds	2
  1355  000041                     ___fttol@sign1:
  1356                           	opt stack 0
  1357  000041                     eval_poly@res:
  1358                           	opt stack 0
  1359                           
  1360                           ; 3 bytes @ 0x40
  1361  000041                     	ds	1
  1362  000042                     ___fttol@lval:
  1363                           	opt stack 0
  1364                           
  1365                           ; 4 bytes @ 0x41
  1366  000042                     	ds	2
  1367  000044                     ?_log:
  1368                           	opt stack 0
  1369  000044                     ?_ldexp:
  1370                           	opt stack 0
  1371  000044                     ldexp@value:
  1372                           	opt stack 0
  1373  000044                     log@x:
  1374                           	opt stack 0
  1375                           
  1376                           ; 3 bytes @ 0x43
  1377  000044                     	ds	2
  1378  000046                     ___fttol@exp1:
  1379                           	opt stack 0
  1380                           
  1381                           ; 1 bytes @ 0x45
  1382  000046                     	ds	1
  1383  000047                     ?___altoft:
  1384                           	opt stack 0
  1385  000047                     ldexp@newexp:
  1386                           	opt stack 0
  1387  000047                     log@exponent:
  1388                           	opt stack 0
  1389  000047                     ___altoft@c:
  1390                           	opt stack 0
  1391                           
  1392                           ; 4 bytes @ 0x46
  1393  000047                     	ds	2
  1394  000049                     ??_ldexp:
  1395                           
  1396                           ; 1 bytes @ 0x48
  1397  000049                     	ds	2
  1398  00004B                     ??___altoft:
  1399                           
  1400                           ; 1 bytes @ 0x4A
  1401  00004B                     	ds	4
  1402  00004F                     ___altoft@exp:
  1403                           	opt stack 0
  1404                           
  1405                           ; 1 bytes @ 0x4E
  1406  00004F                     	ds	1
  1407  000050                     ___altoft@sign:
  1408                           	opt stack 0
  1409                           
  1410                           ; 1 bytes @ 0x4F
  1411  000050                     	ds	1
  1412  000051                     ?_floor:
  1413                           	opt stack 0
  1414  000051                     floor@x:
  1415                           	opt stack 0
  1416                           
  1417                           ; 3 bytes @ 0x50
  1418  000051                     	ds	3
  1419  000054                     floor@i:
  1420                           	opt stack 0
  1421                           
  1422                           ; 3 bytes @ 0x53
  1423  000054                     	ds	3
  1424  000057                     floor@expon:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x56
  1428  000057                     	ds	2
  1429  000059                     ?_exp:
  1430                           	opt stack 0
  1431  000059                     exp@x:
  1432                           	opt stack 0
  1433                           
  1434                           ; 3 bytes @ 0x58
  1435  000059                     	ds	3
  1436  00005C                     _exp$1415:
  1437                           	opt stack 0
  1438                           
  1439                           ; 3 bytes @ 0x5B
  1440  00005C                     	ds	3
  1441  00005F                     exp@exponent:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x5E
  1445  00005F                     	ds	2
  1446  000061                     exp@sign:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x60
  1450  000061                     	ds	1
  1451  000062                     ?_pow:
  1452                           	opt stack 0
  1453  000062                     pow@x:
  1454                           	opt stack 0
  1455                           
  1456                           ; 3 bytes @ 0x61
  1457  000062                     	ds	3
  1458  000065                     pow@y:
  1459                           	opt stack 0
  1460                           
  1461                           ; 3 bytes @ 0x64
  1462  000065                     	ds	3
  1463  000068                     ?_dec_to_hex:
  1464                           	opt stack 0
  1465  000068                     dec_to_hex@num:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x67
  1469  000068                     	ds	2
  1470  00006A                     ??_time_difference:
  1471                           
  1472                           ; 1 bytes @ 0x69
  1473  00006A                     	ds	2
  1474  00006C                     date_time@i:
  1475                           	opt stack 0
  1476                           
  1477                           ; 1 bytes @ 0x6B
  1478  00006C                     	ds	1
  1479                           tblptru	equ	0xFF8
  1480                           tblptrh	equ	0xFF7
  1481                           tblptrl	equ	0xFF6
  1482                           tablat	equ	0xFF5
  1483                           postinc0	equ	0xFEE
  1484                           postdec1	equ	0xFE5
  1485                           fsr1l	equ	0xFE1
  1486                           
  1487 ;;
  1488 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1489 ;;
  1490 ;; *************** function _main *****************
  1491 ;; Defined at:
  1492 ;;		line 70 in file "main.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;		None
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  time            7   95[BANK0 ] unsigned char [7]
  1497 ;;  end_time        7   88[BANK0 ] unsigned char [7]
  1498 ;;  start_time      7   81[BANK0 ] unsigned char [7]
  1499 ;;  bot_count       4  102[BANK0 ] unsigned char [4]
  1500 ;;  step_state      2  106[BANK0 ] unsigned char [2]
  1501 ;; Return value:  Size  Location     Type
  1502 ;;                  1    wreg      void 
  1503 ;; Registers used:
  1504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1513 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1514 ;;Total ram usage:       29 bytes
  1515 ;; Hardware stack levels required when called:    9
  1516 ;; This function calls:
  1517 ;;		_I2C_Master_Init
  1518 ;;		_bottle_count
  1519 ;;		_date_time
  1520 ;;		_initLCD
  1521 ;;		_init_operation
  1522 ;;		_lcdInst
  1523 ;;		_operation_end
  1524 ;;		_printf
  1525 ;;		_runtime
  1526 ;;		_update_time
  1527 ;; This function is called by:
  1528 ;;		Startup code after reset
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text0
  1533  001804                     __ptext0:
  1534                           	opt stack 0
  1535  001804                     _main:
  1536                           	opt stack 22
  1537                           
  1538                           ;main.c: 74: TRISA = 0xFF;
  1539                           
  1540                           ;incstack = 0
  1541  001804  6892               	setf	3986,c	;volatile
  1542                           
  1543                           ;main.c: 75: TRISB = 0xFF;
  1544  001806  6893               	setf	3987,c	;volatile
  1545                           
  1546                           ;main.c: 76: TRISC = 0x18;
  1547  001808  0E18               	movlw	24
  1548  00180A  6E94               	movwf	3988,c	;volatile
  1549                           
  1550                           ;main.c: 77: TRISD = 0x00;
  1551  00180C  0E00               	movlw	0
  1552  00180E  6E95               	movwf	3989,c	;volatile
  1553                           
  1554                           ;main.c: 78: TRISE = 0x00;
  1555  001810  0E00               	movlw	0
  1556  001812  6E96               	movwf	3990,c	;volatile
  1557                           
  1558                           ;main.c: 80: LATA = 0x00;
  1559  001814  0E00               	movlw	0
  1560  001816  6E89               	movwf	3977,c	;volatile
  1561                           
  1562                           ;main.c: 81: LATB = 0x00;
  1563  001818  0E00               	movlw	0
  1564  00181A  6E8A               	movwf	3978,c	;volatile
  1565                           
  1566                           ;main.c: 82: LATC = 0x00;
  1567  00181C  0E00               	movlw	0
  1568  00181E  6E8B               	movwf	3979,c	;volatile
  1569                           
  1570                           ;main.c: 83: LATD = 0x00;
  1571  001820  0E00               	movlw	0
  1572  001822  6E8C               	movwf	3980,c	;volatile
  1573                           
  1574                           ;main.c: 84: LATE = 0x00;
  1575  001824  0E00               	movlw	0
  1576  001826  6E8D               	movwf	3981,c	;volatile
  1577                           
  1578                           ;main.c: 86: ADCON0 = 0x00;
  1579  001828  0E00               	movlw	0
  1580  00182A  6EC2               	movwf	4034,c	;volatile
  1581                           
  1582                           ;main.c: 87: ADCON1 = 0xFF;
  1583  00182C  68C1               	setf	4033,c	;volatile
  1584                           
  1585                           ;main.c: 89: INT1IE = 1;
  1586  00182E  86F0               	bsf	intcon3,3,c	;volatile
  1587                           
  1588                           ;main.c: 90: (INTCONbits.GIE = 1);
  1589  001830  8EF2               	bsf	intcon,7,c	;volatile
  1590                           
  1591                           ;main.c: 92: nRBPU = 0;
  1592  001832  9EF1               	bcf	intcon2,7,c	;volatile
  1593                           
  1594                           ;main.c: 96: lcdInst(0b00000001);;
  1595  001834  0E01               	movlw	1
  1596  001836  EC05  F017         	call	_lcdInst
  1597                           
  1598                           ;main.c: 97: initLCD();
  1599  00183A  EC0B  F016         	call	_initLCD	;wreg free
  1600                           
  1601                           ;main.c: 98: unsigned char time[7];
  1602                           ;main.c: 99: unsigned char start_time[7];
  1603                           ;main.c: 100: unsigned char end_time[7];
  1604                           ;main.c: 101: unsigned char bot_count[4];
  1605                           ;main.c: 102: unsigned char step_state[2];
  1606                           ;main.c: 105: I2C_Master_Init(10000);
  1607  00183E  0E10               	movlw	16
  1608  001840  6E1E               	movwf	I2C_Master_Init@c,c
  1609  001842  0E27               	movlw	39
  1610  001844  6E1F               	movwf	I2C_Master_Init@c+1,c
  1611  001846  0E00               	movlw	0
  1612  001848  6E20               	movwf	I2C_Master_Init@c+2,c
  1613  00184A  0E00               	movlw	0
  1614  00184C  6E21               	movwf	I2C_Master_Init@c+3,c
  1615  00184E  EC69  F015         	call	_I2C_Master_Init	;wreg free
  1616                           
  1617                           ;main.c: 108: lcdInst(0b00000001);;
  1618  001852  0E01               	movlw	1
  1619  001854  EC05  F017         	call	_lcdInst
  1620                           
  1621                           ;main.c: 109: initLCD();
  1622  001858  EC0B  F016         	call	_initLCD	;wreg free
  1623                           
  1624                           ;main.c: 110: lcdInst(0b10000000);;
  1625  00185C  0E80               	movlw	128
  1626  00185E  EC05  F017         	call	_lcdInst
  1627                           
  1628                           ;main.c: 112: printf("Press 1 to begin operation");
  1629  001862  0EE4               	movlw	low STR_1
  1630  001864  0100               	movlb	0	; () banked
  1631  001866  6FAF               	movwf	printf@f& (0+255),b
  1632  001868  0EFE               	movlw	high STR_1
  1633  00186A  0100               	movlb	0	; () banked
  1634  00186C  6FB0               	movwf	(printf@f+1)& (0+255),b
  1635  00186E  ECD9  F004         	call	_printf	;wreg free
  1636                           
  1637                           ;main.c: 113: curr_state = STANDBY;
  1638  001872  0E00               	movlw	0
  1639  001874  0100               	movlb	0	; () banked
  1640  001876  6FFD               	movwf	_curr_state& (0+255),b
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;main.c: 114: bot_type = O;
  1644  001878  0E05               	movlw	5
  1645  00187A  0100               	movlb	0	; () banked
  1646  00187C  6FFC               	movwf	_bot_type& (0+255),b
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;main.c: 116: switch(curr_state){
  1650                           
  1651                           ;main.c: 115: while (1){
  1652  00187E  D04B               	goto	l4523
  1653  001880                     l4509:
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;main.c: 118: operation_end(step_state);
  1657  001880  0EEA               	movlw	low main@step_state
  1658  001882  0100               	movlb	0	; () banked
  1659  001884  6FC5               	movwf	operation_end@step_state& (0+255),b
  1660  001886  0E00               	movlw	high main@step_state
  1661  001888  0100               	movlb	0	; () banked
  1662  00188A  6FC6               	movwf	(operation_end@step_state+1)& (0+255),b
  1663  00188C  ECC9  F014         	call	_operation_end	;wreg free
  1664                           
  1665                           ;main.c: 119: break;
  1666  001890  D053               	goto	l4525
  1667  001892                     l4511:
  1668                           
  1669                           ;main.c: 121: init_operation(start_time, time, bot_count, step_state);
  1670  001892  0ED1               	movlw	low main@start_time
  1671  001894  0100               	movlb	0	; () banked
  1672  001896  6FC5               	movwf	init_operation@start_time& (0+255),b
  1673  001898  0E00               	movlw	high main@start_time
  1674  00189A  0100               	movlb	0	; () banked
  1675  00189C  6FC6               	movwf	(init_operation@start_time+1)& (0+255),b
  1676  00189E  0EDF               	movlw	low main@time
  1677  0018A0  0100               	movlb	0	; () banked
  1678  0018A2  6FC7               	movwf	init_operation@time& (0+255),b
  1679  0018A4  0E00               	movlw	high main@time
  1680  0018A6  0100               	movlb	0	; () banked
  1681  0018A8  6FC8               	movwf	(init_operation@time+1)& (0+255),b
  1682  0018AA  0EE6               	movlw	low main@bot_count
  1683  0018AC  0100               	movlb	0	; () banked
  1684  0018AE  6FC9               	movwf	init_operation@bot_count& (0+255),b
  1685  0018B0  0E00               	movlw	high main@bot_count
  1686  0018B2  0100               	movlb	0	; () banked
  1687  0018B4  6FCA               	movwf	(init_operation@bot_count+1)& (0+255),b
  1688  0018B6  0EEA               	movlw	low main@step_state
  1689  0018B8  0100               	movlb	0	; () banked
  1690  0018BA  6FCB               	movwf	init_operation@step_state& (0+255),b
  1691  0018BC  0E00               	movlw	high main@step_state
  1692  0018BE  0100               	movlb	0	; () banked
  1693  0018C0  6FCC               	movwf	(init_operation@step_state+1)& (0+255),b
  1694  0018C2  EC09  F000         	call	_init_operation	;wreg free
  1695                           
  1696                           ;main.c: 122: update_time(end_time);
  1697  0018C6  0ED8               	movlw	low main@end_time
  1698  0018C8  6E14               	movwf	update_time@time,c
  1699  0018CA  0E00               	movlw	high main@end_time
  1700  0018CC  6E15               	movwf	update_time@time+1,c
  1701  0018CE  EC02  F015         	call	_update_time	;wreg free
  1702                           
  1703                           ;main.c: 123: break;
  1704  0018D2  D032               	goto	l4525
  1705  0018D4                     l4515:
  1706                           
  1707                           ;main.c: 125: date_time(time);
  1708  0018D4  0EDF               	movlw	low main@time
  1709  0018D6  0100               	movlb	0	; () banked
  1710  0018D8  6FC5               	movwf	date_time@time& (0+255),b
  1711  0018DA  0E00               	movlw	high main@time
  1712  0018DC  0100               	movlb	0	; () banked
  1713  0018DE  6FC6               	movwf	(date_time@time+1)& (0+255),b
  1714  0018E0  ECAB  F00C         	call	_date_time	;wreg free
  1715                           
  1716                           ;main.c: 126: break;
  1717  0018E4  D029               	goto	l4525
  1718  0018E6                     l4517:
  1719                           
  1720                           ;main.c: 128: bottle_count(bot_count);
  1721  0018E6  0EE6               	movlw	low main@bot_count
  1722  0018E8  0100               	movlb	0	; () banked
  1723  0018EA  6FC5               	movwf	bottle_count@bot_count& (0+255),b
  1724  0018EC  0E00               	movlw	high main@bot_count
  1725  0018EE  0100               	movlb	0	; () banked
  1726  0018F0  6FC6               	movwf	(bottle_count@bot_count+1)& (0+255),b
  1727  0018F2  ECC0  F006         	call	_bottle_count	;wreg free
  1728                           
  1729                           ;main.c: 129: break;
  1730  0018F6  D020               	goto	l4525
  1731  0018F8                     l4519:
  1732                           
  1733                           ;main.c: 131: runtime(start_time, end_time);
  1734  0018F8  0ED1               	movlw	low main@start_time
  1735  0018FA  0100               	movlb	0	; () banked
  1736  0018FC  6FC5               	movwf	runtime@start_time& (0+255),b
  1737  0018FE  0E00               	movlw	high main@start_time
  1738  001900  0100               	movlb	0	; () banked
  1739  001902  6FC6               	movwf	(runtime@start_time+1)& (0+255),b
  1740  001904  0ED8               	movlw	low main@end_time
  1741  001906  0100               	movlb	0	; () banked
  1742  001908  6FC7               	movwf	runtime@end_time& (0+255),b
  1743  00190A  0E00               	movlw	high main@end_time
  1744  00190C  0100               	movlb	0	; () banked
  1745  00190E  6FC8               	movwf	(runtime@end_time+1)& (0+255),b
  1746  001910  ECE6  F015         	call	_runtime	;wreg free
  1747                           
  1748                           ;main.c: 133: }
  1749                           
  1750                           ;main.c: 132: break;
  1751  001914  D011               	goto	l4525
  1752  001916                     l4523:
  1753  001916  0100               	movlb	0	; () banked
  1754  001918  51FD               	movf	_curr_state& (0+255),w,b
  1755                           
  1756                           ; Switch size 1, requested type "space"
  1757                           ; Number of cases is 5, Range of values is 1 to 5
  1758                           ; switch strategies available:
  1759                           ; Name         Instructions Cycles
  1760                           ; simple_byte           16     9 (average)
  1761                           ;	Chosen strategy is simple_byte
  1762  00191A  0A01               	xorlw	1	; case 1
  1763  00191C  B4D8               	btfsc	status,2,c
  1764  00191E  D7B9               	goto	l4511
  1765  001920  0A03               	xorlw	3	; case 2
  1766  001922  B4D8               	btfsc	status,2,c
  1767  001924  D7AD               	goto	l4509
  1768  001926  0A01               	xorlw	1	; case 3
  1769  001928  B4D8               	btfsc	status,2,c
  1770  00192A  D7D4               	goto	l4515
  1771  00192C  0A07               	xorlw	7	; case 4
  1772  00192E  B4D8               	btfsc	status,2,c
  1773  001930  D7DA               	goto	l4517
  1774  001932  0A01               	xorlw	1	; case 5
  1775  001934  B4D8               	btfsc	status,2,c
  1776  001936  D7E0               	goto	l4519
  1777  001938                     l4525:
  1778                           
  1779                           ;main.c: 134: _delay((unsigned long)((100)*(10000000/4000.0)));
  1780  001938  0E02               	movlw	2
  1781  00193A  0100               	movlb	0	; () banked
  1782  00193C  6FD0               	movwf	(??_main+1)& (0+255),b
  1783  00193E  0E45               	movlw	69
  1784  001940  0100               	movlb	0	; () banked
  1785  001942  6FCF               	movwf	??_main& (0+255),b
  1786  001944  0EA9               	movlw	169
  1787  001946                     u3957:
  1788  001946  2EE8               	decfsz	wreg,f,c
  1789  001948  D7FE               	bra	u3957
  1790  00194A  2FCF               	decfsz	??_main& (0+255),f,b
  1791  00194C  D7FC               	bra	u3957
  1792  00194E  2FD0               	decfsz	(??_main+1)& (0+255),f,b
  1793  001950  D7FA               	bra	u3957
  1794  001952  D000               	nop2	
  1795  001954  D7E0               	goto	l4523
  1796  001956                     __end_of_main:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           intcon	equ	0xFF2
  1803                           intcon2	equ	0xFF1
  1804                           intcon3	equ	0xFF0
  1805                           postinc0	equ	0xFEE
  1806                           wreg	equ	0xFE8
  1807                           postdec1	equ	0xFE5
  1808                           fsr1l	equ	0xFE1
  1809                           status	equ	0xFD8
  1810                           
  1811 ;; *************** function _runtime *****************
  1812 ;; Defined at:
  1813 ;;		line 367 in file "main.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  start_time      2   69[BANK0 ] PTR unsigned char 
  1816 ;;		 -> main@start_time(7), 
  1817 ;;  end_time        2   71[BANK0 ] PTR unsigned char 
  1818 ;;		 -> main@end_time(7), 
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;		None
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1830 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;Total ram usage:        4 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    8
  1837 ;; This function calls:
  1838 ;;		_lcdInst
  1839 ;;		_printf
  1840 ;;		_time_difference
  1841 ;; This function is called by:
  1842 ;;		_main
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text1
  1847  002BCC                     __ptext1:
  1848                           	opt stack 0
  1849  002BCC                     _runtime:
  1850                           	opt stack 22
  1851                           
  1852                           ;main.c: 368: lcdInst(0b10000000);;
  1853                           
  1854                           ;incstack = 0
  1855  002BCC  0E80               	movlw	128
  1856  002BCE  EC05  F017         	call	_lcdInst
  1857                           
  1858                           ;main.c: 369: printf("Total Operation ");
  1859  002BD2  0ECB               	movlw	low STR_4
  1860  002BD4  0100               	movlb	0	; () banked
  1861  002BD6  6FAF               	movwf	printf@f& (0+255),b
  1862  002BD8  0EFF               	movlw	high STR_4
  1863  002BDA  0100               	movlb	0	; () banked
  1864  002BDC  6FB0               	movwf	(printf@f+1)& (0+255),b
  1865  002BDE  ECD9  F004         	call	_printf	;wreg free
  1866                           
  1867                           ;main.c: 370: lcdInst(0b11000000);;
  1868  002BE2  0EC0               	movlw	192
  1869  002BE4  EC05  F017         	call	_lcdInst
  1870                           
  1871                           ;main.c: 371: printf("Time: %is         ", time_difference(end_time, start_time));
  1872  002BE8  0E41               	movlw	low STR_5
  1873  002BEA  0100               	movlb	0	; () banked
  1874  002BEC  6FAF               	movwf	printf@f& (0+255),b
  1875  002BEE  0EFF               	movlw	high STR_5
  1876  002BF0  0100               	movlb	0	; () banked
  1877  002BF2  6FB0               	movwf	(printf@f+1)& (0+255),b
  1878  002BF4  C0C7  F099         	movff	runtime@end_time,time_difference@time1
  1879  002BF8  C0C8  F09A         	movff	runtime@end_time+1,time_difference@time1+1
  1880  002BFC  C0C5  F09B         	movff	runtime@start_time,time_difference@time2
  1881  002C00  C0C6  F09C         	movff	runtime@start_time+1,time_difference@time2+1
  1882  002C04  EC81  F00A         	call	_time_difference	;wreg free
  1883  002C08  C099  F0B1         	movff	?_time_difference,?_printf+2
  1884  002C0C  C09A  F0B2         	movff	?_time_difference+1,?_printf+3
  1885  002C10  ECD9  F004         	call	_printf	;wreg free
  1886  002C14  0012               	return		;funcret
  1887  002C16                     __end_of_runtime:
  1888                           	opt stack 0
  1889                           tblptru	equ	0xFF8
  1890                           tblptrh	equ	0xFF7
  1891                           tblptrl	equ	0xFF6
  1892                           tablat	equ	0xFF5
  1893                           intcon	equ	0xFF2
  1894                           intcon2	equ	0xFF1
  1895                           intcon3	equ	0xFF0
  1896                           postinc0	equ	0xFEE
  1897                           wreg	equ	0xFE8
  1898                           postdec1	equ	0xFE5
  1899                           fsr1l	equ	0xFE1
  1900                           status	equ	0xFD8
  1901                           
  1902 ;; *************** function _operation_end *****************
  1903 ;; Defined at:
  1904 ;;		line 413 in file "main.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;  step_state      2   69[BANK0 ] PTR unsigned char 
  1907 ;;		 -> main@step_state(2), 
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;		None
  1910 ;; Return value:  Size  Location     Type
  1911 ;;                  1    wreg      void 
  1912 ;; Registers used:
  1913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1919 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1923 ;;Total ram usage:        4 bytes
  1924 ;; Hardware stack levels used:    1
  1925 ;; Hardware stack levels required when called:    4
  1926 ;; This function calls:
  1927 ;;		_lcdInst
  1928 ;;		_printf
  1929 ;;		_stepper_state
  1930 ;; This function is called by:
  1931 ;;		_main
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text2
  1936  002992                     __ptext2:
  1937                           	opt stack 0
  1938  002992                     _operation_end:
  1939                           	opt stack 26
  1940                           
  1941                           ;main.c: 414: PORTEbits.RE1 = 0;
  1942                           
  1943                           ;incstack = 0
  1944  002992  9284               	bcf	3972,1,c	;volatile
  1945                           
  1946                           ;main.c: 415: PORTEbits.RE0 = 1;
  1947  002994  8084               	bsf	3972,0,c	;volatile
  1948                           
  1949                           ;main.c: 416: lcdInst(0b10000000);;
  1950  002996  0E80               	movlw	128
  1951  002998  EC05  F017         	call	_lcdInst
  1952                           
  1953                           ;main.c: 417: printf("Operation Done! ");
  1954  00299C  0EBA               	movlw	low STR_16
  1955  00299E  0100               	movlb	0	; () banked
  1956  0029A0  6FAF               	movwf	printf@f& (0+255),b
  1957  0029A2  0EFF               	movlw	high STR_16
  1958  0029A4  0100               	movlb	0	; () banked
  1959  0029A6  6FB0               	movwf	(printf@f+1)& (0+255),b
  1960  0029A8  ECD9  F004         	call	_printf	;wreg free
  1961                           
  1962                           ;main.c: 418: lcdInst(0b11000000);;
  1963  0029AC  0EC0               	movlw	192
  1964  0029AE  EC05  F017         	call	_lcdInst
  1965                           
  1966                           ;main.c: 419: printf("                ");
  1967  0029B2  0E65               	movlw	low STR_17
  1968  0029B4  0100               	movlb	0	; () banked
  1969  0029B6  6FAF               	movwf	printf@f& (0+255),b
  1970  0029B8  0EFF               	movlw	high STR_17
  1971  0029BA  0100               	movlb	0	; () banked
  1972  0029BC  6FB0               	movwf	(printf@f+1)& (0+255),b
  1973  0029BE  ECD9  F004         	call	_printf	;wreg free
  1974                           
  1975                           ;main.c: 420: curr_state = RUNTIME;
  1976  0029C2  0E05               	movlw	5
  1977  0029C4  0100               	movlb	0	; () banked
  1978  0029C6  6FFD               	movwf	_curr_state& (0+255),b
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;main.c: 421: step_state[1] = 1;
  1982  0029C8  0100               	movlb	0	; () banked
  1983  0029CA  EE20 F001          	lfsr	2,1
  1984  0029CE  51C5               	movf	operation_end@step_state& (0+255),w,b
  1985  0029D0  26D9               	addwf	fsr2l,f,c
  1986  0029D2  51C6               	movf	(operation_end@step_state+1)& (0+255),w,b
  1987  0029D4  22DA               	addwfc	fsr2h,f,c
  1988  0029D6  0E01               	movlw	1
  1989  0029D8  6EDF               	movwf	indf2,c
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;main.c: 422: stepper_state(step_state);
  1993  0029DA  C0C5  F016         	movff	operation_end@step_state,stepper_state@step_state
  1994  0029DE  C0C6  F017         	movff	operation_end@step_state+1,stepper_state@step_state+1
  1995  0029E2  ECC2  F008         	call	_stepper_state	;wreg free
  1996                           
  1997                           ;main.c: 423: _delay((unsigned long)((500)*(10000000/4000.0)));
  1998  0029E6  0E07               	movlw	7
  1999  0029E8  0100               	movlb	0	; () banked
  2000  0029EA  6FC8               	movwf	(??_operation_end+1)& (0+255),b
  2001  0029EC  0E58               	movlw	88
  2002  0029EE  0100               	movlb	0	; () banked
  2003  0029F0  6FC7               	movwf	??_operation_end& (0+255),b
  2004  0029F2  0E59               	movlw	89
  2005  0029F4                     u3967:
  2006  0029F4  2EE8               	decfsz	wreg,f,c
  2007  0029F6  D7FE               	bra	u3967
  2008  0029F8  2FC7               	decfsz	??_operation_end& (0+255),f,b
  2009  0029FA  D7FC               	bra	u3967
  2010  0029FC  2FC8               	decfsz	(??_operation_end+1)& (0+255),f,b
  2011  0029FE  D7FA               	bra	u3967
  2012  002A00  D000               	nop2	
  2013  002A02  0012               	return	
  2014  002A04                     __end_of_operation_end:
  2015                           	opt stack 0
  2016                           tblptru	equ	0xFF8
  2017                           tblptrh	equ	0xFF7
  2018                           tblptrl	equ	0xFF6
  2019                           tablat	equ	0xFF5
  2020                           intcon	equ	0xFF2
  2021                           intcon2	equ	0xFF1
  2022                           intcon3	equ	0xFF0
  2023                           postinc0	equ	0xFEE
  2024                           wreg	equ	0xFE8
  2025                           postdec1	equ	0xFE5
  2026                           fsr1l	equ	0xFE1
  2027                           indf2	equ	0xFDF
  2028                           fsr2h	equ	0xFDA
  2029                           fsr2l	equ	0xFD9
  2030                           status	equ	0xFD8
  2031                           
  2032 ;; *************** function _init_operation *****************
  2033 ;; Defined at:
  2034 ;;		line 259 in file "main.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  start_time      2   69[BANK0 ] PTR unsigned char 
  2037 ;;		 -> main@start_time(7), 
  2038 ;;  time            2   71[BANK0 ] PTR unsigned char 
  2039 ;;		 -> main@time(7), 
  2040 ;;  bot_count       2   73[BANK0 ] PTR unsigned char 
  2041 ;;		 -> main@bot_count(4), 
  2042 ;;  step_state      2   75[BANK0 ] PTR unsigned char 
  2043 ;;		 -> main@step_state(2), 
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;  b2              2   44[BANK1 ] int 
  2046 ;;  r2              2   42[BANK1 ] int 
  2047 ;;  b1              2   40[BANK1 ] int 
  2048 ;;  r1              2   38[BANK1 ] int 
  2049 ;;  g2              2   26[BANK1 ] int 
  2050 ;;  g1              2   24[BANK1 ] int 
  2051 ;;  c2              2   20[BANK1 ] int 
  2052 ;;  c1              2   18[BANK1 ] int 
  2053 ;;  b2              2   36[BANK1 ] int 
  2054 ;;  r2              2   34[BANK1 ] int 
  2055 ;;  b1              2   30[BANK1 ] int 
  2056 ;;  r1              2   28[BANK1 ] int 
  2057 ;;  g2              2   22[BANK1 ] int 
  2058 ;;  c2              2   16[BANK1 ] int 
  2059 ;;  c1              2   14[BANK1 ] int 
  2060 ;;  g1              2   12[BANK1 ] int 
  2061 ;;  luminosity1     2    0[BANK1 ] int 
  2062 ;;  i               2   32[BANK1 ] int 
  2063 ;;  detection_ti    7    2[BANK1 ] unsigned char [7]
  2064 ;;  clear           2   52[BANK1 ] unsigned char [2]
  2065 ;;  blue            2   50[BANK1 ] unsigned char [2]
  2066 ;;  green           2   48[BANK1 ] unsigned char [2]
  2067 ;;  red             2   46[BANK1 ] unsigned char [2]
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  1    wreg      void 
  2070 ;; Registers used:
  2071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2077 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2078 ;;      Locals:         0       0      54       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Totals:         0      10      54       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;Total ram usage:       64 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; Hardware stack levels required when called:    8
  2084 ;; This function calls:
  2085 ;;		___awtoft
  2086 ;;		___ftadd
  2087 ;;		___ftdiv
  2088 ;;		___ftge
  2089 ;;		___ftmul
  2090 ;;		___fttol
  2091 ;;		_initLCD
  2092 ;;		_lcdInst
  2093 ;;		_printf
  2094 ;;		_read_colorsensor1
  2095 ;;		_read_colorsensor2
  2096 ;;		_stepper_state
  2097 ;;		_time_difference
  2098 ;;		_update_time
  2099 ;; This function is called by:
  2100 ;;		_main
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text3
  2105  000012                     __ptext3:
  2106                           	opt stack 0
  2107  000012                     _init_operation:
  2108                           	opt stack 22
  2109                           
  2110                           ;main.c: 260: update_time(start_time);
  2111                           
  2112                           ;incstack = 0
  2113  000012  C0C5  F014         	movff	init_operation@start_time,update_time@time
  2114  000016  C0C6  F015         	movff	init_operation@start_time+1,update_time@time+1
  2115  00001A  EC02  F015         	call	_update_time	;wreg free
  2116                           
  2117                           ;main.c: 261: update_time(time);
  2118  00001E  C0C7  F014         	movff	init_operation@time,update_time@time
  2119  000022  C0C8  F015         	movff	init_operation@time+1,update_time@time+1
  2120  000026  EC02  F015         	call	_update_time	;wreg free
  2121                           
  2122                           ;main.c: 262: lcdInst(0b00000001);;
  2123  00002A  0E01               	movlw	1
  2124  00002C  EC05  F017         	call	_lcdInst
  2125                           
  2126                           ;main.c: 263: initLCD();
  2127  000030  EC0B  F016         	call	_initLCD	;wreg free
  2128                           
  2129                           ;main.c: 264: step_state[0] = 1;
  2130  000034  C0CB  FFD9         	movff	init_operation@step_state,fsr2l
  2131  000038  C0CC  FFDA         	movff	init_operation@step_state+1,fsr2h
  2132  00003C  0E01               	movlw	1
  2133  00003E  6EDF               	movwf	indf2,c
  2134                           
  2135                           ;main.c: 265: step_state[1] = 1;
  2136  000040  0100               	movlb	0	; () banked
  2137  000042  EE20 F001          	lfsr	2,1
  2138  000046  51CB               	movf	init_operation@step_state& (0+255),w,b
  2139  000048  26D9               	addwf	fsr2l,f,c
  2140  00004A  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  2141  00004C  22DA               	addwfc	fsr2h,f,c
  2142  00004E  0E01               	movlw	1
  2143  000050  6EDF               	movwf	indf2,c
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;main.c: 267: unsigned char detection_time[7];
  2147                           ;main.c: 268: update_time(detection_time);
  2148  000052  0E02               	movlw	low init_operation@detection_time
  2149  000054  6E14               	movwf	update_time@time,c
  2150  000056  0E01               	movlw	high init_operation@detection_time
  2151  000058  6E15               	movwf	update_time@time+1,c
  2152  00005A  EC02  F015         	call	_update_time	;wreg free
  2153                           
  2154                           ;main.c: 269: for (int i = 0; i<4; i++){
  2155  00005E  0E00               	movlw	0
  2156  000060  0101               	movlb	1	; () banked
  2157  000062  6F21               	movwf	(init_operation@i+1)& (0+255),b
  2158  000064  0E00               	movlw	0
  2159  000066  6F20               	movwf	init_operation@i& (0+255),b
  2160                           
  2161                           ; BSR set to: 1
  2162  000068  0101               	movlb	1	; () banked
  2163  00006A  BF21               	btfsc	(init_operation@i+1)& (0+255),7,b
  2164  00006C  D008               	goto	l4315
  2165  00006E  0101               	movlb	1	; () banked
  2166  000070  5121               	movf	(init_operation@i+1)& (0+255),w,b
  2167  000072  E11B               	bnz	l166
  2168  000074  0E04               	movlw	4
  2169  000076  0101               	movlb	1	; () banked
  2170  000078  5D20               	subwf	init_operation@i& (0+255),w,b
  2171  00007A  B0D8               	btfsc	status,0,c
  2172  00007C  D016               	goto	l166
  2173  00007E                     l4315:
  2174                           
  2175                           ; BSR set to: 1
  2176                           ;main.c: 270: bot_count[i] = 0;
  2177  00007E  0101               	movlb	1	; () banked
  2178  000080  5120               	movf	init_operation@i& (0+255),w,b
  2179  000082  0100               	movlb	0	; () banked
  2180  000084  25C9               	addwf	init_operation@bot_count& (0+255),w,b
  2181  000086  6ED9               	movwf	fsr2l,c
  2182  000088  0101               	movlb	1	; () banked
  2183  00008A  5121               	movf	(init_operation@i+1)& (0+255),w,b
  2184  00008C  0100               	movlb	0	; () banked
  2185  00008E  21CA               	addwfc	(init_operation@bot_count+1)& (0+255),w,b
  2186  000090  6EDA               	movwf	fsr2h,c
  2187  000092  0E00               	movlw	0
  2188  000094  6EDF               	movwf	indf2,c
  2189                           
  2190                           ; BSR set to: 0
  2191  000096  0101               	movlb	1	; () banked
  2192  000098  4B20               	infsnz	init_operation@i& (0+255),f,b
  2193  00009A  2B21               	incf	(init_operation@i+1)& (0+255),f,b
  2194                           
  2195                           ; BSR set to: 1
  2196  00009C  0101               	movlb	1	; () banked
  2197  00009E  BF21               	btfsc	(init_operation@i+1)& (0+255),7,b
  2198  0000A0  D7EE               	goto	l4315
  2199  0000A2  0101               	movlb	1	; () banked
  2200  0000A4  5121               	movf	(init_operation@i+1)& (0+255),w,b
  2201  0000A6  E101               	bnz	u3780
  2202  0000A8  D7E5               	goto	L1
  2203  0000AA                     u3780:
  2204  0000AA                     l166:
  2205                           
  2206                           ; BSR set to: 1
  2207                           ;main.c: 271: }
  2208                           ;main.c: 273: unsigned char red[2];
  2209                           ;main.c: 274: unsigned char green[2];
  2210                           ;main.c: 275: unsigned char blue[2];
  2211                           ;main.c: 276: unsigned char clear[2];
  2212                           ;main.c: 278: PORTEbits.RE1 = 1;
  2213  0000AA  8284               	bsf	3972,1,c	;volatile
  2214                           
  2215                           ;main.c: 279: PORTEbits.RE0 = 1;
  2216  0000AC  8084               	bsf	3972,0,c	;volatile
  2217                           
  2218                           ;main.c: 281: while((curr_state != OPERATION_END) && (time_difference(time, detection_ti
      +                          me) <20)){
  2219  0000AE  EFB7  F004         	goto	l4467
  2220  0000B2                     l4321:
  2221                           
  2222                           ;main.c: 282: update_time(time);
  2223  0000B2  C0C7  F014         	movff	init_operation@time,update_time@time
  2224  0000B6  C0C8  F015         	movff	init_operation@time+1,update_time@time+1
  2225  0000BA  EC02  F015         	call	_update_time	;wreg free
  2226                           
  2227                           ;main.c: 290: read_colorsensor1(red, green, blue, clear);
  2228  0000BE  0E2E               	movlw	low init_operation@red
  2229  0000C0  6E14               	movwf	read_colorsensor1@red,c
  2230  0000C2  0E01               	movlw	high init_operation@red
  2231  0000C4  6E15               	movwf	read_colorsensor1@red+1,c
  2232  0000C6  0E30               	movlw	low init_operation@green
  2233  0000C8  6E16               	movwf	read_colorsensor1@green,c
  2234  0000CA  0E01               	movlw	high init_operation@green
  2235  0000CC  6E17               	movwf	read_colorsensor1@green+1,c
  2236  0000CE  0E32               	movlw	low init_operation@blue
  2237  0000D0  6E18               	movwf	read_colorsensor1@blue,c
  2238  0000D2  0E01               	movlw	high init_operation@blue
  2239  0000D4  6E19               	movwf	read_colorsensor1@blue+1,c
  2240  0000D6  0E34               	movlw	low init_operation@clear
  2241  0000D8  6E1A               	movwf	read_colorsensor1@clear,c
  2242  0000DA  0E01               	movlw	high init_operation@clear
  2243  0000DC  6E1B               	movwf	read_colorsensor1@clear+1,c
  2244  0000DE  EC6E  F00E         	call	_read_colorsensor1	;wreg free
  2245                           
  2246                           ;main.c: 291: int r1 = (red[0]<<8) | red[1];
  2247  0000E2  0101               	movlb	1	; () banked
  2248  0000E4  512F               	movf	(init_operation@red+1)& (0+255),w,b
  2249  0000E6  C12E  F0CD         	movff	init_operation@red,??_init_operation
  2250  0000EA  0100               	movlb	0	; () banked
  2251  0000EC  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2252  0000EE  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2253  0000F2  0100               	movlb	0	; () banked
  2254  0000F4  6BCD               	clrf	??_init_operation& (0+255),b
  2255  0000F6  0100               	movlb	0	; () banked
  2256  0000F8  11CD               	iorwf	??_init_operation& (0+255),w,b
  2257  0000FA  0101               	movlb	1	; () banked
  2258  0000FC  6F1C               	movwf	init_operation@r1& (0+255),b
  2259  0000FE  0100               	movlb	0	; () banked
  2260  000100  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2261  000102  0101               	movlb	1	; () banked
  2262  000104  6F1D               	movwf	(init_operation@r1+1)& (0+255),b
  2263                           
  2264                           ; BSR set to: 1
  2265                           ;main.c: 292: int g1 = (green[0]<<8) | green[1];
  2266  000106  0101               	movlb	1	; () banked
  2267  000108  5131               	movf	(init_operation@green+1)& (0+255),w,b
  2268  00010A  C130  F0CD         	movff	init_operation@green,??_init_operation
  2269  00010E  0100               	movlb	0	; () banked
  2270  000110  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2271  000112  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2272  000116  0100               	movlb	0	; () banked
  2273  000118  6BCD               	clrf	??_init_operation& (0+255),b
  2274  00011A  0100               	movlb	0	; () banked
  2275  00011C  11CD               	iorwf	??_init_operation& (0+255),w,b
  2276  00011E  0101               	movlb	1	; () banked
  2277  000120  6F0C               	movwf	init_operation@g1& (0+255),b
  2278  000122  0100               	movlb	0	; () banked
  2279  000124  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2280  000126  0101               	movlb	1	; () banked
  2281  000128  6F0D               	movwf	(init_operation@g1+1)& (0+255),b
  2282                           
  2283                           ; BSR set to: 1
  2284                           ;main.c: 293: int b1 = (blue[0]<<8) | blue[1];
  2285  00012A  0101               	movlb	1	; () banked
  2286  00012C  5133               	movf	(init_operation@blue+1)& (0+255),w,b
  2287  00012E  C132  F0CD         	movff	init_operation@blue,??_init_operation
  2288  000132  0100               	movlb	0	; () banked
  2289  000134  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2290  000136  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2291  00013A  0100               	movlb	0	; () banked
  2292  00013C  6BCD               	clrf	??_init_operation& (0+255),b
  2293  00013E  0100               	movlb	0	; () banked
  2294  000140  11CD               	iorwf	??_init_operation& (0+255),w,b
  2295  000142  0101               	movlb	1	; () banked
  2296  000144  6F1E               	movwf	init_operation@b1& (0+255),b
  2297  000146  0100               	movlb	0	; () banked
  2298  000148  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2299  00014A  0101               	movlb	1	; () banked
  2300  00014C  6F1F               	movwf	(init_operation@b1+1)& (0+255),b
  2301                           
  2302                           ; BSR set to: 1
  2303                           ;main.c: 294: int c1 = (clear[0]<<8) | clear[1];
  2304  00014E  0101               	movlb	1	; () banked
  2305  000150  5135               	movf	(init_operation@clear+1)& (0+255),w,b
  2306  000152  C134  F0CD         	movff	init_operation@clear,??_init_operation
  2307  000156  0100               	movlb	0	; () banked
  2308  000158  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2309  00015A  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2310  00015E  0100               	movlb	0	; () banked
  2311  000160  6BCD               	clrf	??_init_operation& (0+255),b
  2312  000162  0100               	movlb	0	; () banked
  2313  000164  11CD               	iorwf	??_init_operation& (0+255),w,b
  2314  000166  0101               	movlb	1	; () banked
  2315  000168  6F0E               	movwf	init_operation@c1& (0+255),b
  2316  00016A  0100               	movlb	0	; () banked
  2317  00016C  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2318  00016E  0101               	movlb	1	; () banked
  2319  000170  6F0F               	movwf	(init_operation@c1+1)& (0+255),b
  2320                           
  2321                           ; BSR set to: 1
  2322                           ;main.c: 295: read_colorsensor2(red, green, blue, clear);
  2323  000172  0E2E               	movlw	low init_operation@red
  2324  000174  6E14               	movwf	read_colorsensor2@red,c
  2325  000176  0E01               	movlw	high init_operation@red
  2326  000178  6E15               	movwf	read_colorsensor2@red+1,c
  2327  00017A  0E30               	movlw	low init_operation@green
  2328  00017C  6E16               	movwf	read_colorsensor2@green,c
  2329  00017E  0E01               	movlw	high init_operation@green
  2330  000180  6E17               	movwf	read_colorsensor2@green+1,c
  2331  000182  0E32               	movlw	low init_operation@blue
  2332  000184  6E18               	movwf	read_colorsensor2@blue,c
  2333  000186  0E01               	movlw	high init_operation@blue
  2334  000188  6E19               	movwf	read_colorsensor2@blue+1,c
  2335  00018A  0E34               	movlw	low init_operation@clear
  2336  00018C  6E1A               	movwf	read_colorsensor2@clear,c
  2337  00018E  0E01               	movlw	high init_operation@clear
  2338  000190  6E1B               	movwf	read_colorsensor2@clear+1,c
  2339  000192  ECE1  F00D         	call	_read_colorsensor2	;wreg free
  2340                           
  2341                           ;main.c: 296: int r2 = (red[0]<<8) | red[1];
  2342  000196  0101               	movlb	1	; () banked
  2343  000198  512F               	movf	(init_operation@red+1)& (0+255),w,b
  2344  00019A  C12E  F0CD         	movff	init_operation@red,??_init_operation
  2345  00019E  0100               	movlb	0	; () banked
  2346  0001A0  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2347  0001A2  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2348  0001A6  0100               	movlb	0	; () banked
  2349  0001A8  6BCD               	clrf	??_init_operation& (0+255),b
  2350  0001AA  0100               	movlb	0	; () banked
  2351  0001AC  11CD               	iorwf	??_init_operation& (0+255),w,b
  2352  0001AE  0101               	movlb	1	; () banked
  2353  0001B0  6F22               	movwf	init_operation@r2& (0+255),b
  2354  0001B2  0100               	movlb	0	; () banked
  2355  0001B4  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2356  0001B6  0101               	movlb	1	; () banked
  2357  0001B8  6F23               	movwf	(init_operation@r2+1)& (0+255),b
  2358                           
  2359                           ; BSR set to: 1
  2360                           ;main.c: 297: int g2 = (green[0]<<8) | green[1];
  2361  0001BA  0101               	movlb	1	; () banked
  2362  0001BC  5131               	movf	(init_operation@green+1)& (0+255),w,b
  2363  0001BE  C130  F0CD         	movff	init_operation@green,??_init_operation
  2364  0001C2  0100               	movlb	0	; () banked
  2365  0001C4  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2366  0001C6  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2367  0001CA  0100               	movlb	0	; () banked
  2368  0001CC  6BCD               	clrf	??_init_operation& (0+255),b
  2369  0001CE  0100               	movlb	0	; () banked
  2370  0001D0  11CD               	iorwf	??_init_operation& (0+255),w,b
  2371  0001D2  0101               	movlb	1	; () banked
  2372  0001D4  6F16               	movwf	init_operation@g2& (0+255),b
  2373  0001D6  0100               	movlb	0	; () banked
  2374  0001D8  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2375  0001DA  0101               	movlb	1	; () banked
  2376  0001DC  6F17               	movwf	(init_operation@g2+1)& (0+255),b
  2377                           
  2378                           ; BSR set to: 1
  2379                           ;main.c: 298: int b2 = (blue[0]<<8) | blue[1];
  2380  0001DE  0101               	movlb	1	; () banked
  2381  0001E0  5133               	movf	(init_operation@blue+1)& (0+255),w,b
  2382  0001E2  C132  F0CD         	movff	init_operation@blue,??_init_operation
  2383  0001E6  0100               	movlb	0	; () banked
  2384  0001E8  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2385  0001EA  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2386  0001EE  0100               	movlb	0	; () banked
  2387  0001F0  6BCD               	clrf	??_init_operation& (0+255),b
  2388  0001F2  0100               	movlb	0	; () banked
  2389  0001F4  11CD               	iorwf	??_init_operation& (0+255),w,b
  2390  0001F6  0101               	movlb	1	; () banked
  2391  0001F8  6F24               	movwf	init_operation@b2& (0+255),b
  2392  0001FA  0100               	movlb	0	; () banked
  2393  0001FC  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2394  0001FE  0101               	movlb	1	; () banked
  2395  000200  6F25               	movwf	(init_operation@b2+1)& (0+255),b
  2396                           
  2397                           ; BSR set to: 1
  2398                           ;main.c: 299: int c2 = (clear[0]<<8) | clear[1];
  2399  000202  0101               	movlb	1	; () banked
  2400  000204  5135               	movf	(init_operation@clear+1)& (0+255),w,b
  2401  000206  C134  F0CD         	movff	init_operation@clear,??_init_operation
  2402  00020A  0100               	movlb	0	; () banked
  2403  00020C  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2404  00020E  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2405  000212  0100               	movlb	0	; () banked
  2406  000214  6BCD               	clrf	??_init_operation& (0+255),b
  2407  000216  0100               	movlb	0	; () banked
  2408  000218  11CD               	iorwf	??_init_operation& (0+255),w,b
  2409  00021A  0101               	movlb	1	; () banked
  2410  00021C  6F10               	movwf	init_operation@c2& (0+255),b
  2411  00021E  0100               	movlb	0	; () banked
  2412  000220  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2413  000222  0101               	movlb	1	; () banked
  2414  000224  6F11               	movwf	(init_operation@c2+1)& (0+255),b
  2415                           
  2416                           ; BSR set to: 1
  2417                           ;main.c: 301: int luminosity1 = (-0.32466*r2) + (1.57837*g2) + (-0.73191*b2);
  2418  000226  0E08               	movlw	8
  2419  000228  6E20               	movwf	___ftmul@f2,c
  2420  00022A  0ECA               	movlw	202
  2421  00022C  6E21               	movwf	___ftmul@f2+1,c
  2422  00022E  0E3F               	movlw	63
  2423  000230  6E22               	movwf	___ftmul@f2+2,c
  2424  000232  C116  F019         	movff	init_operation@g2,___awtoft@c
  2425  000236  C117  F01A         	movff	init_operation@g2+1,___awtoft@c+1
  2426  00023A  EC8B  F016         	call	___awtoft	;wreg free
  2427  00023E  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2428  000242  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2429  000246  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2430  00024A  EC79  F010         	call	___ftmul	;wreg free
  2431  00024E  C01D  F02F         	movff	?___ftmul,___ftadd@f2
  2432  000252  C01E  F030         	movff	?___ftmul+1,___ftadd@f2+1
  2433  000256  C01F  F031         	movff	?___ftmul+2,___ftadd@f2+2
  2434  00025A  0E3A               	movlw	58
  2435  00025C  6E20               	movwf	___ftmul@f2,c
  2436  00025E  0EA6               	movlw	166
  2437  000260  6E21               	movwf	___ftmul@f2+1,c
  2438  000262  0EBE               	movlw	190
  2439  000264  6E22               	movwf	___ftmul@f2+2,c
  2440  000266  C122  F019         	movff	init_operation@r2,___awtoft@c
  2441  00026A  C123  F01A         	movff	init_operation@r2+1,___awtoft@c+1
  2442  00026E  EC8B  F016         	call	___awtoft	;wreg free
  2443  000272  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2444  000276  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2445  00027A  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2446  00027E  EC79  F010         	call	___ftmul	;wreg free
  2447  000282  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  2448  000286  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  2449  00028A  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  2450  00028E  ECAB  F009         	call	___ftadd	;wreg free
  2451  000292  C02C  F109         	movff	?___ftadd,_init_operation$1412
  2452  000296  C02D  F10A         	movff	?___ftadd+1,_init_operation$1412+1
  2453  00029A  C02E  F10B         	movff	?___ftadd+2,_init_operation$1412+2
  2454                           
  2455                           ;main.c: 301: int luminosity1 = (-0.32466*r2) + (1.57837*g2) + (-0.73191*b2);
  2456  00029E  0E5E               	movlw	94
  2457  0002A0  6E20               	movwf	___ftmul@f2,c
  2458  0002A2  0E3B               	movlw	59
  2459  0002A4  6E21               	movwf	___ftmul@f2+1,c
  2460  0002A6  0EBF               	movlw	191
  2461  0002A8  6E22               	movwf	___ftmul@f2+2,c
  2462  0002AA  C124  F019         	movff	init_operation@b2,___awtoft@c
  2463  0002AE  C125  F01A         	movff	init_operation@b2+1,___awtoft@c+1
  2464  0002B2  EC8B  F016         	call	___awtoft	;wreg free
  2465  0002B6  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2466  0002BA  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2467  0002BE  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2468  0002C2  EC79  F010         	call	___ftmul	;wreg free
  2469  0002C6  C01D  F02F         	movff	?___ftmul,___ftadd@f2
  2470  0002CA  C01E  F030         	movff	?___ftmul+1,___ftadd@f2+1
  2471  0002CE  C01F  F031         	movff	?___ftmul+2,___ftadd@f2+2
  2472  0002D2  C109  F02C         	movff	_init_operation$1412,___ftadd@f1
  2473  0002D6  C10A  F02D         	movff	_init_operation$1412+1,___ftadd@f1+1
  2474  0002DA  C10B  F02E         	movff	_init_operation$1412+2,___ftadd@f1+2
  2475  0002DE  ECAB  F009         	call	___ftadd	;wreg free
  2476  0002E2  C02C  F038         	movff	?___ftadd,___fttol@f1
  2477  0002E6  C02D  F039         	movff	?___ftadd+1,___fttol@f1+1
  2478  0002EA  C02E  F03A         	movff	?___ftadd+2,___fttol@f1+2
  2479  0002EE  ECFF  F00F         	call	___fttol	;wreg free
  2480  0002F2  C038  F100         	movff	?___fttol,init_operation@luminosity1
  2481  0002F6  C039  F101         	movff	?___fttol+1,init_operation@luminosity1+1
  2482                           
  2483                           ;main.c: 303: lcdInst(0b10000000);;
  2484  0002FA  0E80               	movlw	128
  2485  0002FC  EC05  F017         	call	_lcdInst
  2486                           
  2487                           ;main.c: 304: printf("%u|%u|%u|%u        ", r1, b1, c1);
  2488  000300  0E2D               	movlw	low STR_2
  2489  000302  0100               	movlb	0	; () banked
  2490  000304  6FAF               	movwf	printf@f& (0+255),b
  2491  000306  0EFF               	movlw	high STR_2
  2492  000308  0100               	movlb	0	; () banked
  2493  00030A  6FB0               	movwf	(printf@f+1)& (0+255),b
  2494  00030C  C11C  F0B1         	movff	init_operation@r1,?_printf+2
  2495  000310  C11D  F0B2         	movff	init_operation@r1+1,?_printf+3
  2496  000314  C11E  F0B3         	movff	init_operation@b1,?_printf+4
  2497  000318  C11F  F0B4         	movff	init_operation@b1+1,?_printf+5
  2498  00031C  C10E  F0B5         	movff	init_operation@c1,?_printf+6
  2499  000320  C10F  F0B6         	movff	init_operation@c1+1,?_printf+7
  2500  000324  ECD9  F004         	call	_printf	;wreg free
  2501                           
  2502                           ;main.c: 305: lcdInst(0b11000000);;
  2503  000328  0EC0               	movlw	192
  2504  00032A  EC05  F017         	call	_lcdInst
  2505                           
  2506                           ;main.c: 306: printf("%u|%u|%u|%u        ", r2, b2, c2);
  2507  00032E  0E2D               	movlw	low STR_2
  2508  000330  0100               	movlb	0	; () banked
  2509  000332  6FAF               	movwf	printf@f& (0+255),b
  2510  000334  0EFF               	movlw	high STR_2
  2511  000336  0100               	movlb	0	; () banked
  2512  000338  6FB0               	movwf	(printf@f+1)& (0+255),b
  2513  00033A  C122  F0B1         	movff	init_operation@r2,?_printf+2
  2514  00033E  C123  F0B2         	movff	init_operation@r2+1,?_printf+3
  2515  000342  C124  F0B3         	movff	init_operation@b2,?_printf+4
  2516  000346  C125  F0B4         	movff	init_operation@b2+1,?_printf+5
  2517  00034A  C110  F0B5         	movff	init_operation@c2,?_printf+6
  2518  00034E  C111  F0B6         	movff	init_operation@c2+1,?_printf+7
  2519  000352  ECD9  F004         	call	_printf	;wreg free
  2520                           
  2521                           ;main.c: 308: if ((unsigned int)(r1+g1+b1) > 3600 || (unsigned int)(r2+g2+b2) > 3600 || 
      +                          b1 > r1 || b2 > r2){
  2522  000356  0101               	movlb	1	; () banked
  2523  000358  510C               	movf	init_operation@g1& (0+255),w,b
  2524  00035A  0101               	movlb	1	; () banked
  2525  00035C  251C               	addwf	init_operation@r1& (0+255),w,b
  2526  00035E  0100               	movlb	0	; () banked
  2527  000360  6FCD               	movwf	??_init_operation& (0+255),b
  2528  000362  0101               	movlb	1	; () banked
  2529  000364  510D               	movf	(init_operation@g1+1)& (0+255),w,b
  2530  000366  0101               	movlb	1	; () banked
  2531  000368  211D               	addwfc	(init_operation@r1+1)& (0+255),w,b
  2532  00036A  0100               	movlb	0	; () banked
  2533  00036C  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2534  00036E  0101               	movlb	1	; () banked
  2535  000370  511E               	movf	init_operation@b1& (0+255),w,b
  2536  000372  0100               	movlb	0	; () banked
  2537  000374  27CD               	addwf	??_init_operation& (0+255),f,b
  2538  000376  0101               	movlb	1	; () banked
  2539  000378  511F               	movf	(init_operation@b1+1)& (0+255),w,b
  2540  00037A  0100               	movlb	0	; () banked
  2541  00037C  23CE               	addwfc	(??_init_operation+1)& (0+255),f,b
  2542  00037E  0E11               	movlw	17
  2543  000380  0100               	movlb	0	; () banked
  2544  000382  5DCD               	subwf	??_init_operation& (0+255),w,b
  2545  000384  0E0E               	movlw	14
  2546  000386  0100               	movlb	0	; () banked
  2547  000388  59CE               	subwfb	(??_init_operation+1)& (0+255),w,b
  2548  00038A  B0D8               	btfsc	status,0,c
  2549  00038C  D03C               	goto	l4363
  2550                           
  2551                           ; BSR set to: 0
  2552  00038E  0101               	movlb	1	; () banked
  2553  000390  5116               	movf	init_operation@g2& (0+255),w,b
  2554  000392  0101               	movlb	1	; () banked
  2555  000394  2522               	addwf	init_operation@r2& (0+255),w,b
  2556  000396  0100               	movlb	0	; () banked
  2557  000398  6FCD               	movwf	??_init_operation& (0+255),b
  2558  00039A  0101               	movlb	1	; () banked
  2559  00039C  5117               	movf	(init_operation@g2+1)& (0+255),w,b
  2560  00039E  0101               	movlb	1	; () banked
  2561  0003A0  2123               	addwfc	(init_operation@r2+1)& (0+255),w,b
  2562  0003A2  0100               	movlb	0	; () banked
  2563  0003A4  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2564  0003A6  0101               	movlb	1	; () banked
  2565  0003A8  5124               	movf	init_operation@b2& (0+255),w,b
  2566  0003AA  0100               	movlb	0	; () banked
  2567  0003AC  27CD               	addwf	??_init_operation& (0+255),f,b
  2568  0003AE  0101               	movlb	1	; () banked
  2569  0003B0  5125               	movf	(init_operation@b2+1)& (0+255),w,b
  2570  0003B2  0100               	movlb	0	; () banked
  2571  0003B4  23CE               	addwfc	(??_init_operation+1)& (0+255),f,b
  2572  0003B6  0E11               	movlw	17
  2573  0003B8  0100               	movlb	0	; () banked
  2574  0003BA  5DCD               	subwf	??_init_operation& (0+255),w,b
  2575  0003BC  0E0E               	movlw	14
  2576  0003BE  0100               	movlb	0	; () banked
  2577  0003C0  59CE               	subwfb	(??_init_operation+1)& (0+255),w,b
  2578  0003C2  B0D8               	btfsc	status,0,c
  2579  0003C4  D020               	goto	l4363
  2580                           
  2581                           ; BSR set to: 0
  2582  0003C6  0101               	movlb	1	; () banked
  2583  0003C8  511E               	movf	init_operation@b1& (0+255),w,b
  2584  0003CA  0101               	movlb	1	; () banked
  2585  0003CC  5D1C               	subwf	init_operation@r1& (0+255),w,b
  2586  0003CE  0101               	movlb	1	; () banked
  2587  0003D0  511D               	movf	(init_operation@r1+1)& (0+255),w,b
  2588  0003D2  0A80               	xorlw	128
  2589  0003D4  0100               	movlb	0	; () banked
  2590  0003D6  6FCD               	movwf	??_init_operation& (0+255),b
  2591  0003D8  0101               	movlb	1	; () banked
  2592  0003DA  511F               	movf	(init_operation@b1+1)& (0+255),w,b
  2593  0003DC  0A80               	xorlw	128
  2594  0003DE  0100               	movlb	0	; () banked
  2595  0003E0  59CD               	subwfb	??_init_operation& (0+255),w,b
  2596  0003E2  A0D8               	btfss	status,0,c
  2597  0003E4  D010               	goto	l4363
  2598                           
  2599                           ; BSR set to: 0
  2600  0003E6  0101               	movlb	1	; () banked
  2601  0003E8  5124               	movf	init_operation@b2& (0+255),w,b
  2602  0003EA  0101               	movlb	1	; () banked
  2603  0003EC  5D22               	subwf	init_operation@r2& (0+255),w,b
  2604  0003EE  0101               	movlb	1	; () banked
  2605  0003F0  5123               	movf	(init_operation@r2+1)& (0+255),w,b
  2606  0003F2  0A80               	xorlw	128
  2607  0003F4  0100               	movlb	0	; () banked
  2608  0003F6  6FCD               	movwf	??_init_operation& (0+255),b
  2609  0003F8  0101               	movlb	1	; () banked
  2610  0003FA  5125               	movf	(init_operation@b2+1)& (0+255),w,b
  2611  0003FC  0A80               	xorlw	128
  2612  0003FE  0100               	movlb	0	; () banked
  2613  000400  59CD               	subwfb	??_init_operation& (0+255),w,b
  2614  000402  B0D8               	btfsc	status,0,c
  2615  000404  D2A6               	goto	l4465
  2616  000406                     l4363:
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;main.c: 309: _delay((unsigned long)((2000)*(10000000/4000.0)));
  2620  000406  0E1A               	movlw	26
  2621  000408  0100               	movlb	0	; () banked
  2622  00040A  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2623  00040C  0E5E               	movlw	94
  2624  00040E  0100               	movlb	0	; () banked
  2625  000410  6FCD               	movwf	??_init_operation& (0+255),b
  2626  000412  0E6E               	movlw	110
  2627  000414                     u3977:
  2628  000414  2EE8               	decfsz	wreg,f,c
  2629  000416  D7FE               	bra	u3977
  2630  000418  2FCD               	decfsz	??_init_operation& (0+255),f,b
  2631  00041A  D7FC               	bra	u3977
  2632  00041C  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  2633  00041E  D7FA               	bra	u3977
  2634  000420  F000               	nop	
  2635                           
  2636                           ;main.c: 310: read_colorsensor1(red, green, blue, clear);
  2637  000422  0E2E               	movlw	low init_operation@red
  2638  000424  6E14               	movwf	read_colorsensor1@red,c
  2639  000426  0E01               	movlw	high init_operation@red
  2640  000428  6E15               	movwf	read_colorsensor1@red+1,c
  2641  00042A  0E30               	movlw	low init_operation@green
  2642  00042C  6E16               	movwf	read_colorsensor1@green,c
  2643  00042E  0E01               	movlw	high init_operation@green
  2644  000430  6E17               	movwf	read_colorsensor1@green+1,c
  2645  000432  0E32               	movlw	low init_operation@blue
  2646  000434  6E18               	movwf	read_colorsensor1@blue,c
  2647  000436  0E01               	movlw	high init_operation@blue
  2648  000438  6E19               	movwf	read_colorsensor1@blue+1,c
  2649  00043A  0E34               	movlw	low init_operation@clear
  2650  00043C  6E1A               	movwf	read_colorsensor1@clear,c
  2651  00043E  0E01               	movlw	high init_operation@clear
  2652  000440  6E1B               	movwf	read_colorsensor1@clear+1,c
  2653  000442  EC6E  F00E         	call	_read_colorsensor1	;wreg free
  2654                           
  2655                           ;main.c: 311: int r1 = (red[0]<<8) | red[1];
  2656  000446  0101               	movlb	1	; () banked
  2657  000448  512F               	movf	(init_operation@red+1)& (0+255),w,b
  2658  00044A  C12E  F0CD         	movff	init_operation@red,??_init_operation
  2659  00044E  0100               	movlb	0	; () banked
  2660  000450  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2661  000452  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2662  000456  0100               	movlb	0	; () banked
  2663  000458  6BCD               	clrf	??_init_operation& (0+255),b
  2664  00045A  0100               	movlb	0	; () banked
  2665  00045C  11CD               	iorwf	??_init_operation& (0+255),w,b
  2666  00045E  0101               	movlb	1	; () banked
  2667  000460  6F26               	movwf	init_operation@r1_515& (0+255),b
  2668  000462  0100               	movlb	0	; () banked
  2669  000464  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2670  000466  0101               	movlb	1	; () banked
  2671  000468  6F27               	movwf	(init_operation@r1_515+1)& (0+255),b
  2672                           
  2673                           ; BSR set to: 1
  2674                           ;main.c: 312: int g1 = (green[0]<<8) | green[1];
  2675  00046A  0101               	movlb	1	; () banked
  2676  00046C  5131               	movf	(init_operation@green+1)& (0+255),w,b
  2677  00046E  C130  F0CD         	movff	init_operation@green,??_init_operation
  2678  000472  0100               	movlb	0	; () banked
  2679  000474  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2680  000476  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2681  00047A  0100               	movlb	0	; () banked
  2682  00047C  6BCD               	clrf	??_init_operation& (0+255),b
  2683  00047E  0100               	movlb	0	; () banked
  2684  000480  11CD               	iorwf	??_init_operation& (0+255),w,b
  2685  000482  0101               	movlb	1	; () banked
  2686  000484  6F18               	movwf	init_operation@g1_516& (0+255),b
  2687  000486  0100               	movlb	0	; () banked
  2688  000488  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2689  00048A  0101               	movlb	1	; () banked
  2690  00048C  6F19               	movwf	(init_operation@g1_516+1)& (0+255),b
  2691                           
  2692                           ; BSR set to: 1
  2693                           ;main.c: 313: int b1 = (blue[0]<<8) | blue[1];
  2694  00048E  0101               	movlb	1	; () banked
  2695  000490  5133               	movf	(init_operation@blue+1)& (0+255),w,b
  2696  000492  C132  F0CD         	movff	init_operation@blue,??_init_operation
  2697  000496  0100               	movlb	0	; () banked
  2698  000498  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2699  00049A  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2700  00049E  0100               	movlb	0	; () banked
  2701  0004A0  6BCD               	clrf	??_init_operation& (0+255),b
  2702  0004A2  0100               	movlb	0	; () banked
  2703  0004A4  11CD               	iorwf	??_init_operation& (0+255),w,b
  2704  0004A6  0101               	movlb	1	; () banked
  2705  0004A8  6F28               	movwf	init_operation@b1_517& (0+255),b
  2706  0004AA  0100               	movlb	0	; () banked
  2707  0004AC  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2708  0004AE  0101               	movlb	1	; () banked
  2709  0004B0  6F29               	movwf	(init_operation@b1_517+1)& (0+255),b
  2710                           
  2711                           ; BSR set to: 1
  2712                           ;main.c: 314: int c1 = (clear[0]<<8) | clear[1];
  2713  0004B2  0101               	movlb	1	; () banked
  2714  0004B4  5135               	movf	(init_operation@clear+1)& (0+255),w,b
  2715  0004B6  C134  F0CD         	movff	init_operation@clear,??_init_operation
  2716  0004BA  0100               	movlb	0	; () banked
  2717  0004BC  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2718  0004BE  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2719  0004C2  0100               	movlb	0	; () banked
  2720  0004C4  6BCD               	clrf	??_init_operation& (0+255),b
  2721  0004C6  0100               	movlb	0	; () banked
  2722  0004C8  11CD               	iorwf	??_init_operation& (0+255),w,b
  2723  0004CA  0101               	movlb	1	; () banked
  2724  0004CC  6F12               	movwf	init_operation@c1_518& (0+255),b
  2725  0004CE  0100               	movlb	0	; () banked
  2726  0004D0  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2727  0004D2  0101               	movlb	1	; () banked
  2728  0004D4  6F13               	movwf	(init_operation@c1_518+1)& (0+255),b
  2729                           
  2730                           ; BSR set to: 1
  2731                           ;main.c: 315: read_colorsensor2(red, green, blue, clear);
  2732  0004D6  0E2E               	movlw	low init_operation@red
  2733  0004D8  6E14               	movwf	read_colorsensor2@red,c
  2734  0004DA  0E01               	movlw	high init_operation@red
  2735  0004DC  6E15               	movwf	read_colorsensor2@red+1,c
  2736  0004DE  0E30               	movlw	low init_operation@green
  2737  0004E0  6E16               	movwf	read_colorsensor2@green,c
  2738  0004E2  0E01               	movlw	high init_operation@green
  2739  0004E4  6E17               	movwf	read_colorsensor2@green+1,c
  2740  0004E6  0E32               	movlw	low init_operation@blue
  2741  0004E8  6E18               	movwf	read_colorsensor2@blue,c
  2742  0004EA  0E01               	movlw	high init_operation@blue
  2743  0004EC  6E19               	movwf	read_colorsensor2@blue+1,c
  2744  0004EE  0E34               	movlw	low init_operation@clear
  2745  0004F0  6E1A               	movwf	read_colorsensor2@clear,c
  2746  0004F2  0E01               	movlw	high init_operation@clear
  2747  0004F4  6E1B               	movwf	read_colorsensor2@clear+1,c
  2748  0004F6  ECE1  F00D         	call	_read_colorsensor2	;wreg free
  2749                           
  2750                           ;main.c: 316: int r2 = (red[0]<<8) | red[1];
  2751  0004FA  0101               	movlb	1	; () banked
  2752  0004FC  512F               	movf	(init_operation@red+1)& (0+255),w,b
  2753  0004FE  C12E  F0CD         	movff	init_operation@red,??_init_operation
  2754  000502  0100               	movlb	0	; () banked
  2755  000504  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2756  000506  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2757  00050A  0100               	movlb	0	; () banked
  2758  00050C  6BCD               	clrf	??_init_operation& (0+255),b
  2759  00050E  0100               	movlb	0	; () banked
  2760  000510  11CD               	iorwf	??_init_operation& (0+255),w,b
  2761  000512  0101               	movlb	1	; () banked
  2762  000514  6F2A               	movwf	init_operation@r2_519& (0+255),b
  2763  000516  0100               	movlb	0	; () banked
  2764  000518  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2765  00051A  0101               	movlb	1	; () banked
  2766  00051C  6F2B               	movwf	(init_operation@r2_519+1)& (0+255),b
  2767                           
  2768                           ; BSR set to: 1
  2769                           ;main.c: 317: int g2 = (green[0]<<8) | green[1];
  2770  00051E  0101               	movlb	1	; () banked
  2771  000520  5131               	movf	(init_operation@green+1)& (0+255),w,b
  2772  000522  C130  F0CD         	movff	init_operation@green,??_init_operation
  2773  000526  0100               	movlb	0	; () banked
  2774  000528  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2775  00052A  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2776  00052E  0100               	movlb	0	; () banked
  2777  000530  6BCD               	clrf	??_init_operation& (0+255),b
  2778  000532  0100               	movlb	0	; () banked
  2779  000534  11CD               	iorwf	??_init_operation& (0+255),w,b
  2780  000536  0101               	movlb	1	; () banked
  2781  000538  6F1A               	movwf	init_operation@g2_520& (0+255),b
  2782  00053A  0100               	movlb	0	; () banked
  2783  00053C  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2784  00053E  0101               	movlb	1	; () banked
  2785  000540  6F1B               	movwf	(init_operation@g2_520+1)& (0+255),b
  2786                           
  2787                           ; BSR set to: 1
  2788                           ;main.c: 318: int b2 = (blue[0]<<8) | blue[1];
  2789  000542  0101               	movlb	1	; () banked
  2790  000544  5133               	movf	(init_operation@blue+1)& (0+255),w,b
  2791  000546  C132  F0CD         	movff	init_operation@blue,??_init_operation
  2792  00054A  0100               	movlb	0	; () banked
  2793  00054C  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2794  00054E  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2795  000552  0100               	movlb	0	; () banked
  2796  000554  6BCD               	clrf	??_init_operation& (0+255),b
  2797  000556  0100               	movlb	0	; () banked
  2798  000558  11CD               	iorwf	??_init_operation& (0+255),w,b
  2799  00055A  0101               	movlb	1	; () banked
  2800  00055C  6F2C               	movwf	init_operation@b2_521& (0+255),b
  2801  00055E  0100               	movlb	0	; () banked
  2802  000560  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2803  000562  0101               	movlb	1	; () banked
  2804  000564  6F2D               	movwf	(init_operation@b2_521+1)& (0+255),b
  2805                           
  2806                           ; BSR set to: 1
  2807                           ;main.c: 319: int c2 = (clear[0]<<8) | clear[1];
  2808  000566  0101               	movlb	1	; () banked
  2809  000568  5135               	movf	(init_operation@clear+1)& (0+255),w,b
  2810  00056A  C134  F0CD         	movff	init_operation@clear,??_init_operation
  2811  00056E  0100               	movlb	0	; () banked
  2812  000570  6BCE               	clrf	(??_init_operation+1)& (0+255),b
  2813  000572  C0CD  F0CE         	movff	??_init_operation,??_init_operation+1
  2814  000576  0100               	movlb	0	; () banked
  2815  000578  6BCD               	clrf	??_init_operation& (0+255),b
  2816  00057A  0100               	movlb	0	; () banked
  2817  00057C  11CD               	iorwf	??_init_operation& (0+255),w,b
  2818  00057E  0101               	movlb	1	; () banked
  2819  000580  6F14               	movwf	init_operation@c2_522& (0+255),b
  2820  000582  0100               	movlb	0	; () banked
  2821  000584  51CE               	movf	(??_init_operation+1)& (0+255),w,b
  2822  000586  0101               	movlb	1	; () banked
  2823  000588  6F15               	movwf	(init_operation@c2_522+1)& (0+255),b
  2824                           
  2825                           ; BSR set to: 1
  2826                           ;main.c: 320: PORTEbits.RE1 = 0;
  2827  00058A  9284               	bcf	3972,1,c	;volatile
  2828                           
  2829                           ; BSR set to: 1
  2830                           ;main.c: 322: if (((float)r1/(float)b1 > 1.7 && (unsigned int)(r2+g2+b2) > 5600) || ((fl
      +                          oat)r2/(float)b2 > 1.7 && ((unsigned int)r1+g1+b1) > 6200)){
  2831  00058C  0E9A               	movlw	154
  2832  00058E  6E2C               	movwf	___ftge@ff1,c
  2833  000590  0ED9               	movlw	217
  2834  000592  6E2D               	movwf	___ftge@ff1+1,c
  2835  000594  0E3F               	movlw	63
  2836  000596  6E2E               	movwf	___ftge@ff1+2,c
  2837  000598  C128  F019         	movff	init_operation@b1_517,___awtoft@c
  2838  00059C  C129  F01A         	movff	init_operation@b1_517+1,___awtoft@c+1
  2839  0005A0  EC8B  F016         	call	___awtoft	;wreg free
  2840  0005A4  C019  F020         	movff	?___awtoft,___ftdiv@f2
  2841  0005A8  C01A  F021         	movff	?___awtoft+1,___ftdiv@f2+1
  2842  0005AC  C01B  F022         	movff	?___awtoft+2,___ftdiv@f2+2
  2843  0005B0  C126  F019         	movff	init_operation@r1_515,___awtoft@c
  2844  0005B4  C127  F01A         	movff	init_operation@r1_515+1,___awtoft@c+1
  2845  0005B8  EC8B  F016         	call	___awtoft	;wreg free
  2846  0005BC  C019  F01D         	movff	?___awtoft,___ftdiv@f1
  2847  0005C0  C01A  F01E         	movff	?___awtoft+1,___ftdiv@f1+1
  2848  0005C4  C01B  F01F         	movff	?___awtoft+2,___ftdiv@f1+2
  2849  0005C8  ECF3  F010         	call	___ftdiv	;wreg free
  2850  0005CC  C01D  F02F         	movff	?___ftdiv,___ftge@ff2
  2851  0005D0  C01E  F030         	movff	?___ftdiv+1,___ftge@ff2+1
  2852  0005D4  C01F  F031         	movff	?___ftdiv+2,___ftge@ff2+2
  2853  0005D8  EC3E  F013         	call	___ftge	;wreg free
  2854  0005DC  B0D8               	btfsc	status,0,c
  2855  0005DE  D01C               	goto	l4391
  2856  0005E0  0101               	movlb	1	; () banked
  2857  0005E2  511A               	movf	init_operation@g2_520& (0+255),w,b
  2858  0005E4  0101               	movlb	1	; () banked
  2859  0005E6  252A               	addwf	init_operation@r2_519& (0+255),w,b
  2860  0005E8  0100               	movlb	0	; () banked
  2861  0005EA  6FCD               	movwf	??_init_operation& (0+255),b
  2862  0005EC  0101               	movlb	1	; () banked
  2863  0005EE  511B               	movf	(init_operation@g2_520+1)& (0+255),w,b
  2864  0005F0  0101               	movlb	1	; () banked
  2865  0005F2  212B               	addwfc	(init_operation@r2_519+1)& (0+255),w,b
  2866  0005F4  0100               	movlb	0	; () banked
  2867  0005F6  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2868  0005F8  0101               	movlb	1	; () banked
  2869  0005FA  512C               	movf	init_operation@b2_521& (0+255),w,b
  2870  0005FC  0100               	movlb	0	; () banked
  2871  0005FE  27CD               	addwf	??_init_operation& (0+255),f,b
  2872  000600  0101               	movlb	1	; () banked
  2873  000602  512D               	movf	(init_operation@b2_521+1)& (0+255),w,b
  2874  000604  0100               	movlb	0	; () banked
  2875  000606  23CE               	addwfc	(??_init_operation+1)& (0+255),f,b
  2876  000608  0EE1               	movlw	225
  2877  00060A  0100               	movlb	0	; () banked
  2878  00060C  5DCD               	subwf	??_init_operation& (0+255),w,b
  2879  00060E  0E15               	movlw	21
  2880  000610  0100               	movlb	0	; () banked
  2881  000612  59CE               	subwfb	(??_init_operation+1)& (0+255),w,b
  2882  000614  B0D8               	btfsc	status,0,c
  2883  000616  D046               	goto	l4395
  2884  000618                     l4391:
  2885  000618  0E9A               	movlw	154
  2886  00061A  6E2C               	movwf	___ftge@ff1,c
  2887  00061C  0ED9               	movlw	217
  2888  00061E  6E2D               	movwf	___ftge@ff1+1,c
  2889  000620  0E3F               	movlw	63
  2890  000622  6E2E               	movwf	___ftge@ff1+2,c
  2891  000624  C12C  F019         	movff	init_operation@b2_521,___awtoft@c
  2892  000628  C12D  F01A         	movff	init_operation@b2_521+1,___awtoft@c+1
  2893  00062C  EC8B  F016         	call	___awtoft	;wreg free
  2894  000630  C019  F020         	movff	?___awtoft,___ftdiv@f2
  2895  000634  C01A  F021         	movff	?___awtoft+1,___ftdiv@f2+1
  2896  000638  C01B  F022         	movff	?___awtoft+2,___ftdiv@f2+2
  2897  00063C  C12A  F019         	movff	init_operation@r2_519,___awtoft@c
  2898  000640  C12B  F01A         	movff	init_operation@r2_519+1,___awtoft@c+1
  2899  000644  EC8B  F016         	call	___awtoft	;wreg free
  2900  000648  C019  F01D         	movff	?___awtoft,___ftdiv@f1
  2901  00064C  C01A  F01E         	movff	?___awtoft+1,___ftdiv@f1+1
  2902  000650  C01B  F01F         	movff	?___awtoft+2,___ftdiv@f1+2
  2903  000654  ECF3  F010         	call	___ftdiv	;wreg free
  2904  000658  C01D  F02F         	movff	?___ftdiv,___ftge@ff2
  2905  00065C  C01E  F030         	movff	?___ftdiv+1,___ftge@ff2+1
  2906  000660  C01F  F031         	movff	?___ftdiv+2,___ftge@ff2+2
  2907  000664  EC3E  F013         	call	___ftge	;wreg free
  2908  000668  B0D8               	btfsc	status,0,c
  2909  00066A  D047               	goto	l4409
  2910  00066C  0101               	movlb	1	; () banked
  2911  00066E  5118               	movf	init_operation@g1_516& (0+255),w,b
  2912  000670  0101               	movlb	1	; () banked
  2913  000672  2526               	addwf	init_operation@r1_515& (0+255),w,b
  2914  000674  0100               	movlb	0	; () banked
  2915  000676  6FCD               	movwf	??_init_operation& (0+255),b
  2916  000678  0101               	movlb	1	; () banked
  2917  00067A  5119               	movf	(init_operation@g1_516+1)& (0+255),w,b
  2918  00067C  0101               	movlb	1	; () banked
  2919  00067E  2127               	addwfc	(init_operation@r1_515+1)& (0+255),w,b
  2920  000680  0100               	movlb	0	; () banked
  2921  000682  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2922  000684  0101               	movlb	1	; () banked
  2923  000686  5128               	movf	init_operation@b1_517& (0+255),w,b
  2924  000688  0100               	movlb	0	; () banked
  2925  00068A  27CD               	addwf	??_init_operation& (0+255),f,b
  2926  00068C  0101               	movlb	1	; () banked
  2927  00068E  5129               	movf	(init_operation@b1_517+1)& (0+255),w,b
  2928  000690  0100               	movlb	0	; () banked
  2929  000692  23CE               	addwfc	(??_init_operation+1)& (0+255),f,b
  2930  000694  0E39               	movlw	57
  2931  000696  0100               	movlb	0	; () banked
  2932  000698  5DCD               	subwf	??_init_operation& (0+255),w,b
  2933  00069A  0E18               	movlw	24
  2934  00069C  0100               	movlb	0	; () banked
  2935  00069E  59CE               	subwfb	(??_init_operation+1)& (0+255),w,b
  2936  0006A0  A0D8               	btfss	status,0,c
  2937  0006A2  D02B               	goto	l4409
  2938  0006A4                     l4395:
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;main.c: 323: step_state[1] = 1;
  2942  0006A4  0100               	movlb	0	; () banked
  2943  0006A6  EE20 F001          	lfsr	2,1
  2944  0006AA  51CB               	movf	init_operation@step_state& (0+255),w,b
  2945  0006AC  26D9               	addwf	fsr2l,f,c
  2946  0006AE  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  2947  0006B0  22DA               	addwfc	fsr2h,f,c
  2948  0006B2  0E01               	movlw	1
  2949  0006B4  6EDF               	movwf	indf2,c
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;main.c: 324: stepper_state(step_state);
  2953  0006B6  C0CB  F016         	movff	init_operation@step_state,stepper_state@step_state
  2954  0006BA  C0CC  F017         	movff	init_operation@step_state+1,stepper_state@step_state+1
  2955  0006BE  ECC2  F008         	call	_stepper_state	;wreg free
  2956                           
  2957                           ;main.c: 325: PORTEbits.RE0 = 0;
  2958  0006C2  9084               	bcf	3972,0,c	;volatile
  2959                           
  2960                           ;main.c: 326: bot_count[0] ++;
  2961  0006C4  C0C9  FFD9         	movff	init_operation@bot_count,fsr2l
  2962  0006C8  C0CA  FFDA         	movff	init_operation@bot_count+1,fsr2h
  2963  0006CC  2ADF               	incf	indf2,f,c
  2964                           
  2965                           ;main.c: 327: _delay((unsigned long)((150)*(10000000/4000.0)));
  2966  0006CE  0E02               	movlw	2
  2967  0006D0  0100               	movlb	0	; () banked
  2968  0006D2  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  2969  0006D4  0EE7               	movlw	231
  2970  0006D6  0100               	movlb	0	; () banked
  2971  0006D8  6FCD               	movwf	??_init_operation& (0+255),b
  2972  0006DA  0E00               	movlw	0
  2973  0006DC                     u3987:
  2974  0006DC  2EE8               	decfsz	wreg,f,c
  2975  0006DE  D7FE               	bra	u3987
  2976  0006E0  2FCD               	decfsz	??_init_operation& (0+255),f,b
  2977  0006E2  D7FC               	bra	u3987
  2978  0006E4  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  2979  0006E6  D7FA               	bra	u3987
  2980  0006E8  F000               	nop	
  2981                           
  2982                           ;main.c: 328: PORTEbits.RE0 = 1;
  2983  0006EA  8084               	bsf	3972,0,c	;volatile
  2984                           
  2985                           ;main.c: 329: update_time(detection_time);
  2986  0006EC  0E02               	movlw	low init_operation@detection_time
  2987  0006EE  6E14               	movwf	update_time@time,c
  2988  0006F0  0E01               	movlw	high init_operation@detection_time
  2989  0006F2  6E15               	movwf	update_time@time+1,c
  2990  0006F4  EC02  F015         	call	_update_time	;wreg free
  2991                           
  2992                           ;main.c: 330: }
  2993  0006F8  D12B               	goto	l4463
  2994  0006FA                     l4409:
  2995                           
  2996                           ;main.c: 331: else if ((float)b1/(float)r1 > 1.01 || (float)b2/(float)r2 > 1.01){
  2997  0006FA  0E48               	movlw	72
  2998  0006FC  6E2C               	movwf	___ftge@ff1,c
  2999  0006FE  0E81               	movlw	129
  3000  000700  6E2D               	movwf	___ftge@ff1+1,c
  3001  000702  0E3F               	movlw	63
  3002  000704  6E2E               	movwf	___ftge@ff1+2,c
  3003  000706  C126  F019         	movff	init_operation@r1_515,___awtoft@c
  3004  00070A  C127  F01A         	movff	init_operation@r1_515+1,___awtoft@c+1
  3005  00070E  EC8B  F016         	call	___awtoft	;wreg free
  3006  000712  C019  F020         	movff	?___awtoft,___ftdiv@f2
  3007  000716  C01A  F021         	movff	?___awtoft+1,___ftdiv@f2+1
  3008  00071A  C01B  F022         	movff	?___awtoft+2,___ftdiv@f2+2
  3009  00071E  C128  F019         	movff	init_operation@b1_517,___awtoft@c
  3010  000722  C129  F01A         	movff	init_operation@b1_517+1,___awtoft@c+1
  3011  000726  EC8B  F016         	call	___awtoft	;wreg free
  3012  00072A  C019  F01D         	movff	?___awtoft,___ftdiv@f1
  3013  00072E  C01A  F01E         	movff	?___awtoft+1,___ftdiv@f1+1
  3014  000732  C01B  F01F         	movff	?___awtoft+2,___ftdiv@f1+2
  3015  000736  ECF3  F010         	call	___ftdiv	;wreg free
  3016  00073A  C01D  F02F         	movff	?___ftdiv,___ftge@ff2
  3017  00073E  C01E  F030         	movff	?___ftdiv+1,___ftge@ff2+1
  3018  000742  C01F  F031         	movff	?___ftdiv+2,___ftge@ff2+2
  3019  000746  EC3E  F013         	call	___ftge	;wreg free
  3020  00074A  A0D8               	btfss	status,0,c
  3021  00074C  D02A               	goto	l4413
  3022  00074E  0E48               	movlw	72
  3023  000750  6E2C               	movwf	___ftge@ff1,c
  3024  000752  0E81               	movlw	129
  3025  000754  6E2D               	movwf	___ftge@ff1+1,c
  3026  000756  0E3F               	movlw	63
  3027  000758  6E2E               	movwf	___ftge@ff1+2,c
  3028  00075A  C12A  F019         	movff	init_operation@r2_519,___awtoft@c
  3029  00075E  C12B  F01A         	movff	init_operation@r2_519+1,___awtoft@c+1
  3030  000762  EC8B  F016         	call	___awtoft	;wreg free
  3031  000766  C019  F020         	movff	?___awtoft,___ftdiv@f2
  3032  00076A  C01A  F021         	movff	?___awtoft+1,___ftdiv@f2+1
  3033  00076E  C01B  F022         	movff	?___awtoft+2,___ftdiv@f2+2
  3034  000772  C12C  F019         	movff	init_operation@b2_521,___awtoft@c
  3035  000776  C12D  F01A         	movff	init_operation@b2_521+1,___awtoft@c+1
  3036  00077A  EC8B  F016         	call	___awtoft	;wreg free
  3037  00077E  C019  F01D         	movff	?___awtoft,___ftdiv@f1
  3038  000782  C01A  F01E         	movff	?___awtoft+1,___ftdiv@f1+1
  3039  000786  C01B  F01F         	movff	?___awtoft+2,___ftdiv@f1+2
  3040  00078A  ECF3  F010         	call	___ftdiv	;wreg free
  3041  00078E  C01D  F02F         	movff	?___ftdiv,___ftge@ff2
  3042  000792  C01E  F030         	movff	?___ftdiv+1,___ftge@ff2+1
  3043  000796  C01F  F031         	movff	?___ftdiv+2,___ftge@ff2+2
  3044  00079A  EC3E  F013         	call	___ftge	;wreg free
  3045  00079E  B0D8               	btfsc	status,0,c
  3046  0007A0  D02E               	goto	l4427
  3047  0007A2                     l4413:
  3048                           
  3049                           ;main.c: 332: step_state[1] = 3;
  3050  0007A2  0100               	movlb	0	; () banked
  3051  0007A4  EE20 F001          	lfsr	2,1
  3052  0007A8  51CB               	movf	init_operation@step_state& (0+255),w,b
  3053  0007AA  26D9               	addwf	fsr2l,f,c
  3054  0007AC  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  3055  0007AE  22DA               	addwfc	fsr2h,f,c
  3056  0007B0  0E03               	movlw	3
  3057  0007B2  6EDF               	movwf	indf2,c
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;main.c: 333: stepper_state(step_state);
  3061  0007B4  C0CB  F016         	movff	init_operation@step_state,stepper_state@step_state
  3062  0007B8  C0CC  F017         	movff	init_operation@step_state+1,stepper_state@step_state+1
  3063  0007BC  ECC2  F008         	call	_stepper_state	;wreg free
  3064                           
  3065                           ;main.c: 334: PORTEbits.RE0 = 0;
  3066  0007C0  9084               	bcf	3972,0,c	;volatile
  3067                           
  3068                           ;main.c: 335: bot_count[2] ++;
  3069  0007C2  0100               	movlb	0	; () banked
  3070  0007C4  EE20 F002          	lfsr	2,2
  3071  0007C8  51C9               	movf	init_operation@bot_count& (0+255),w,b
  3072  0007CA  26D9               	addwf	fsr2l,f,c
  3073  0007CC  51CA               	movf	(init_operation@bot_count+1)& (0+255),w,b
  3074  0007CE  22DA               	addwfc	fsr2h,f,c
  3075  0007D0  2ADF               	incf	indf2,f,c
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;main.c: 336: _delay((unsigned long)((150)*(10000000/4000.0)));
  3079  0007D2  0E02               	movlw	2
  3080  0007D4  0100               	movlb	0	; () banked
  3081  0007D6  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  3082  0007D8  0EE7               	movlw	231
  3083  0007DA  0100               	movlb	0	; () banked
  3084  0007DC  6FCD               	movwf	??_init_operation& (0+255),b
  3085  0007DE  0E00               	movlw	0
  3086  0007E0                     u3997:
  3087  0007E0  2EE8               	decfsz	wreg,f,c
  3088  0007E2  D7FE               	bra	u3997
  3089  0007E4  2FCD               	decfsz	??_init_operation& (0+255),f,b
  3090  0007E6  D7FC               	bra	u3997
  3091  0007E8  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  3092  0007EA  D7FA               	bra	u3997
  3093  0007EC  F000               	nop	
  3094                           
  3095                           ;main.c: 337: PORTEbits.RE0 = 1;
  3096  0007EE  8084               	bsf	3972,0,c	;volatile
  3097                           
  3098                           ;main.c: 338: update_time(detection_time);
  3099  0007F0  0E02               	movlw	low init_operation@detection_time
  3100  0007F2  6E14               	movwf	update_time@time,c
  3101  0007F4  0E01               	movlw	high init_operation@detection_time
  3102  0007F6  6E15               	movwf	update_time@time+1,c
  3103  0007F8  EC02  F015         	call	_update_time	;wreg free
  3104                           
  3105                           ;main.c: 339: }
  3106  0007FC  D0A9               	goto	l4463
  3107  0007FE                     l4427:
  3108                           
  3109                           ;main.c: 341: else if ((unsigned int)(r1+g1+b1) > 6800 || (unsigned int)(r2+g2+b2) > 650
      +                          0){
  3110  0007FE  0101               	movlb	1	; () banked
  3111  000800  5118               	movf	init_operation@g1_516& (0+255),w,b
  3112  000802  0101               	movlb	1	; () banked
  3113  000804  2526               	addwf	init_operation@r1_515& (0+255),w,b
  3114  000806  0100               	movlb	0	; () banked
  3115  000808  6FCD               	movwf	??_init_operation& (0+255),b
  3116  00080A  0101               	movlb	1	; () banked
  3117  00080C  5119               	movf	(init_operation@g1_516+1)& (0+255),w,b
  3118  00080E  0101               	movlb	1	; () banked
  3119  000810  2127               	addwfc	(init_operation@r1_515+1)& (0+255),w,b
  3120  000812  0100               	movlb	0	; () banked
  3121  000814  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  3122  000816  0101               	movlb	1	; () banked
  3123  000818  5128               	movf	init_operation@b1_517& (0+255),w,b
  3124  00081A  0100               	movlb	0	; () banked
  3125  00081C  27CD               	addwf	??_init_operation& (0+255),f,b
  3126  00081E  0101               	movlb	1	; () banked
  3127  000820  5129               	movf	(init_operation@b1_517+1)& (0+255),w,b
  3128  000822  0100               	movlb	0	; () banked
  3129  000824  23CE               	addwfc	(??_init_operation+1)& (0+255),f,b
  3130  000826  0E91               	movlw	145
  3131  000828  0100               	movlb	0	; () banked
  3132  00082A  5DCD               	subwf	??_init_operation& (0+255),w,b
  3133  00082C  0E1A               	movlw	26
  3134  00082E  0100               	movlb	0	; () banked
  3135  000830  59CE               	subwfb	(??_init_operation+1)& (0+255),w,b
  3136  000832  B0D8               	btfsc	status,0,c
  3137  000834  D01C               	goto	l4431
  3138                           
  3139                           ; BSR set to: 0
  3140  000836  0101               	movlb	1	; () banked
  3141  000838  511A               	movf	init_operation@g2_520& (0+255),w,b
  3142  00083A  0101               	movlb	1	; () banked
  3143  00083C  252A               	addwf	init_operation@r2_519& (0+255),w,b
  3144  00083E  0100               	movlb	0	; () banked
  3145  000840  6FCD               	movwf	??_init_operation& (0+255),b
  3146  000842  0101               	movlb	1	; () banked
  3147  000844  511B               	movf	(init_operation@g2_520+1)& (0+255),w,b
  3148  000846  0101               	movlb	1	; () banked
  3149  000848  212B               	addwfc	(init_operation@r2_519+1)& (0+255),w,b
  3150  00084A  0100               	movlb	0	; () banked
  3151  00084C  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  3152  00084E  0101               	movlb	1	; () banked
  3153  000850  512C               	movf	init_operation@b2_521& (0+255),w,b
  3154  000852  0100               	movlb	0	; () banked
  3155  000854  27CD               	addwf	??_init_operation& (0+255),f,b
  3156  000856  0101               	movlb	1	; () banked
  3157  000858  512D               	movf	(init_operation@b2_521+1)& (0+255),w,b
  3158  00085A  0100               	movlb	0	; () banked
  3159  00085C  23CE               	addwfc	(??_init_operation+1)& (0+255),f,b
  3160  00085E  0E65               	movlw	101
  3161  000860  0100               	movlb	0	; () banked
  3162  000862  5DCD               	subwf	??_init_operation& (0+255),w,b
  3163  000864  0E19               	movlw	25
  3164  000866  0100               	movlb	0	; () banked
  3165  000868  59CE               	subwfb	(??_init_operation+1)& (0+255),w,b
  3166  00086A  A0D8               	btfss	status,0,c
  3167  00086C  D02E               	goto	l4445
  3168  00086E                     l4431:
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;main.c: 342: step_state[1] = 2;
  3172  00086E  0100               	movlb	0	; () banked
  3173  000870  EE20 F001          	lfsr	2,1
  3174  000874  51CB               	movf	init_operation@step_state& (0+255),w,b
  3175  000876  26D9               	addwf	fsr2l,f,c
  3176  000878  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  3177  00087A  22DA               	addwfc	fsr2h,f,c
  3178  00087C  0E02               	movlw	2
  3179  00087E  6EDF               	movwf	indf2,c
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;main.c: 343: stepper_state(step_state);
  3183  000880  C0CB  F016         	movff	init_operation@step_state,stepper_state@step_state
  3184  000884  C0CC  F017         	movff	init_operation@step_state+1,stepper_state@step_state+1
  3185  000888  ECC2  F008         	call	_stepper_state	;wreg free
  3186                           
  3187                           ;main.c: 344: PORTEbits.RE0 = 0;
  3188  00088C  9084               	bcf	3972,0,c	;volatile
  3189                           
  3190                           ;main.c: 345: bot_count[1] ++;
  3191  00088E  0100               	movlb	0	; () banked
  3192  000890  EE20 F001          	lfsr	2,1
  3193  000894  51C9               	movf	init_operation@bot_count& (0+255),w,b
  3194  000896  26D9               	addwf	fsr2l,f,c
  3195  000898  51CA               	movf	(init_operation@bot_count+1)& (0+255),w,b
  3196  00089A  22DA               	addwfc	fsr2h,f,c
  3197  00089C  2ADF               	incf	indf2,f,c
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;main.c: 346: _delay((unsigned long)((150)*(10000000/4000.0)));
  3201  00089E  0E02               	movlw	2
  3202  0008A0  0100               	movlb	0	; () banked
  3203  0008A2  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  3204  0008A4  0EE7               	movlw	231
  3205  0008A6  0100               	movlb	0	; () banked
  3206  0008A8  6FCD               	movwf	??_init_operation& (0+255),b
  3207  0008AA  0E00               	movlw	0
  3208  0008AC                     u4007:
  3209  0008AC  2EE8               	decfsz	wreg,f,c
  3210  0008AE  D7FE               	bra	u4007
  3211  0008B0  2FCD               	decfsz	??_init_operation& (0+255),f,b
  3212  0008B2  D7FC               	bra	u4007
  3213  0008B4  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  3214  0008B6  D7FA               	bra	u4007
  3215  0008B8  F000               	nop	
  3216                           
  3217                           ;main.c: 347: PORTEbits.RE0 = 1;
  3218  0008BA  8084               	bsf	3972,0,c	;volatile
  3219                           
  3220                           ;main.c: 348: update_time(detection_time);
  3221  0008BC  0E02               	movlw	low init_operation@detection_time
  3222  0008BE  6E14               	movwf	update_time@time,c
  3223  0008C0  0E01               	movlw	high init_operation@detection_time
  3224  0008C2  6E15               	movwf	update_time@time+1,c
  3225  0008C4  EC02  F015         	call	_update_time	;wreg free
  3226                           
  3227                           ;main.c: 349: }
  3228  0008C8  D043               	goto	l4463
  3229  0008CA                     l4445:
  3230                           
  3231                           ;main.c: 351: else if ((c1 > 2550 || c2 > 3400)){
  3232  0008CA  0101               	movlb	1	; () banked
  3233  0008CC  BF13               	btfsc	(init_operation@c1_518+1)& (0+255),7,b
  3234  0008CE  D008               	goto	l4447
  3235  0008D0  0EF7               	movlw	247
  3236  0008D2  0101               	movlb	1	; () banked
  3237  0008D4  5D12               	subwf	init_operation@c1_518& (0+255),w,b
  3238  0008D6  0E09               	movlw	9
  3239  0008D8  0101               	movlb	1	; () banked
  3240  0008DA  5913               	subwfb	(init_operation@c1_518+1)& (0+255),w,b
  3241  0008DC  B0D8               	btfsc	status,0,c
  3242  0008DE  D00B               	goto	l4449
  3243  0008E0                     l4447:
  3244                           
  3245                           ; BSR set to: 1
  3246  0008E0  0101               	movlb	1	; () banked
  3247  0008E2  BF15               	btfsc	(init_operation@c2_522+1)& (0+255),7,b
  3248  0008E4  D035               	goto	l4463
  3249  0008E6  0E49               	movlw	73
  3250  0008E8  0101               	movlb	1	; () banked
  3251  0008EA  5D14               	subwf	init_operation@c2_522& (0+255),w,b
  3252  0008EC  0E0D               	movlw	13
  3253  0008EE  0101               	movlb	1	; () banked
  3254  0008F0  5915               	subwfb	(init_operation@c2_522+1)& (0+255),w,b
  3255  0008F2  A0D8               	btfss	status,0,c
  3256  0008F4  D02D               	goto	l4463
  3257  0008F6                     l4449:
  3258                           
  3259                           ; BSR set to: 1
  3260                           ;main.c: 352: step_state[1] = 4;
  3261  0008F6  0100               	movlb	0	; () banked
  3262  0008F8  EE20 F001          	lfsr	2,1
  3263  0008FC  51CB               	movf	init_operation@step_state& (0+255),w,b
  3264  0008FE  26D9               	addwf	fsr2l,f,c
  3265  000900  51CC               	movf	(init_operation@step_state+1)& (0+255),w,b
  3266  000902  22DA               	addwfc	fsr2h,f,c
  3267  000904  0E04               	movlw	4
  3268  000906  6EDF               	movwf	indf2,c
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;main.c: 353: stepper_state(step_state);
  3272  000908  C0CB  F016         	movff	init_operation@step_state,stepper_state@step_state
  3273  00090C  C0CC  F017         	movff	init_operation@step_state+1,stepper_state@step_state+1
  3274  000910  ECC2  F008         	call	_stepper_state	;wreg free
  3275                           
  3276                           ;main.c: 354: PORTEbits.RE0 = 0;
  3277  000914  9084               	bcf	3972,0,c	;volatile
  3278                           
  3279                           ;main.c: 355: bot_count[3] ++;
  3280  000916  0100               	movlb	0	; () banked
  3281  000918  EE20 F003          	lfsr	2,3
  3282  00091C  51C9               	movf	init_operation@bot_count& (0+255),w,b
  3283  00091E  26D9               	addwf	fsr2l,f,c
  3284  000920  51CA               	movf	(init_operation@bot_count+1)& (0+255),w,b
  3285  000922  22DA               	addwfc	fsr2h,f,c
  3286  000924  2ADF               	incf	indf2,f,c
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;main.c: 356: _delay((unsigned long)((150)*(10000000/4000.0)));
  3290  000926  0E02               	movlw	2
  3291  000928  0100               	movlb	0	; () banked
  3292  00092A  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  3293  00092C  0EE7               	movlw	231
  3294  00092E  0100               	movlb	0	; () banked
  3295  000930  6FCD               	movwf	??_init_operation& (0+255),b
  3296  000932  0E00               	movlw	0
  3297  000934                     u4017:
  3298  000934  2EE8               	decfsz	wreg,f,c
  3299  000936  D7FE               	bra	u4017
  3300  000938  2FCD               	decfsz	??_init_operation& (0+255),f,b
  3301  00093A  D7FC               	bra	u4017
  3302  00093C  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  3303  00093E  D7FA               	bra	u4017
  3304  000940  F000               	nop	
  3305                           
  3306                           ;main.c: 357: PORTEbits.RE0 = 1;
  3307  000942  8084               	bsf	3972,0,c	;volatile
  3308                           
  3309                           ;main.c: 358: update_time(detection_time);
  3310  000944  0E02               	movlw	low init_operation@detection_time
  3311  000946  6E14               	movwf	update_time@time,c
  3312  000948  0E01               	movlw	high init_operation@detection_time
  3313  00094A  6E15               	movwf	update_time@time+1,c
  3314  00094C  EC02  F015         	call	_update_time	;wreg free
  3315  000950                     l4463:
  3316                           
  3317                           ;main.c: 359: }
  3318                           ;main.c: 360: PORTEbits.RE1 = 1;
  3319  000950  8284               	bsf	3972,1,c	;volatile
  3320  000952                     l4465:
  3321                           
  3322                           ;main.c: 361: }
  3323                           ;main.c: 362: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3324  000952  0E0D               	movlw	13
  3325  000954  0100               	movlb	0	; () banked
  3326  000956  6FCE               	movwf	(??_init_operation+1)& (0+255),b
  3327  000958  0EAF               	movlw	175
  3328  00095A  0100               	movlb	0	; () banked
  3329  00095C  6FCD               	movwf	??_init_operation& (0+255),b
  3330  00095E  0EB6               	movlw	182
  3331  000960                     u4027:
  3332  000960  2EE8               	decfsz	wreg,f,c
  3333  000962  D7FE               	bra	u4027
  3334  000964  2FCD               	decfsz	??_init_operation& (0+255),f,b
  3335  000966  D7FC               	bra	u4027
  3336  000968  2FCE               	decfsz	(??_init_operation+1)& (0+255),f,b
  3337  00096A  D7FA               	bra	u4027
  3338  00096C  F000               	nop	
  3339  00096E                     l4467:
  3340  00096E  0E02               	movlw	2
  3341  000970  0100               	movlb	0	; () banked
  3342  000972  19FD               	xorwf	_curr_state& (0+255),w,b
  3343  000974  B4D8               	btfsc	status,2,c
  3344  000976  D019               	goto	l4471
  3345                           
  3346                           ; BSR set to: 0
  3347  000978  C0C7  F099         	movff	init_operation@time,time_difference@time1
  3348  00097C  C0C8  F09A         	movff	init_operation@time+1,time_difference@time1+1
  3349  000980  0E02               	movlw	low init_operation@detection_time
  3350  000982  0100               	movlb	0	; () banked
  3351  000984  6F9B               	movwf	time_difference@time2& (0+255),b
  3352  000986  0E01               	movlw	high init_operation@detection_time
  3353  000988  0100               	movlb	0	; () banked
  3354  00098A  6F9C               	movwf	(time_difference@time2+1)& (0+255),b
  3355  00098C  EC81  F00A         	call	_time_difference	;wreg free
  3356  000990  0100               	movlb	0	; () banked
  3357  000992  BF9A               	btfsc	(?_time_difference+1)& (0+255),7,b
  3358  000994  EF59  F000         	goto	l4321
  3359  000998  0100               	movlb	0	; () banked
  3360  00099A  519A               	movf	(?_time_difference+1)& (0+255),w,b
  3361  00099C  E106               	bnz	l4471
  3362  00099E  0E14               	movlw	20
  3363  0009A0  0100               	movlb	0	; () banked
  3364  0009A2  5D99               	subwf	?_time_difference& (0+255),w,b
  3365  0009A4  A0D8               	btfss	status,0,c
  3366  0009A6  EF59  F000         	goto	l4321
  3367  0009AA                     l4471:
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;main.c: 363: }
  3371                           ;main.c: 364: curr_state = OPERATION_END;
  3372  0009AA  0E02               	movlw	2
  3373  0009AC  0100               	movlb	0	; () banked
  3374  0009AE  6FFD               	movwf	_curr_state& (0+255),b
  3375                           
  3376                           ; BSR set to: 0
  3377  0009B0  0012               	return		;funcret
  3378  0009B2                     __end_of_init_operation:
  3379                           	opt stack 0
  3380                           tblptru	equ	0xFF8
  3381                           tblptrh	equ	0xFF7
  3382                           tblptrl	equ	0xFF6
  3383                           tablat	equ	0xFF5
  3384                           intcon	equ	0xFF2
  3385                           intcon2	equ	0xFF1
  3386                           intcon3	equ	0xFF0
  3387                           postinc0	equ	0xFEE
  3388                           wreg	equ	0xFE8
  3389                           postdec1	equ	0xFE5
  3390                           fsr1l	equ	0xFE1
  3391                           indf2	equ	0xFDF
  3392                           fsr2h	equ	0xFDA
  3393                           fsr2l	equ	0xFD9
  3394                           status	equ	0xFD8
  3395                           
  3396 ;; *************** function _update_time *****************
  3397 ;; Defined at:
  3398 ;;		line 192 in file "main.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  time            2   19[COMRAM] PTR unsigned char 
  3401 ;;		 -> init_operation@detection_time(7), main@end_time(7), main@time(7), main@start_time(7), 
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  i               1   21[COMRAM] unsigned char 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      void 
  3406 ;; Registers used:
  3407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3413 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;Total ram usage:        3 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:    3
  3420 ;; This function calls:
  3421 ;;		_I2C_Master_Read
  3422 ;;		_I2C_Master_Start
  3423 ;;		_I2C_Master_Stop
  3424 ;;		_I2C_Master_Write
  3425 ;; This function is called by:
  3426 ;;		_main
  3427 ;;		_init_operation
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text4
  3432  002A04                     __ptext4:
  3433                           	opt stack 0
  3434  002A04                     _update_time:
  3435                           	opt stack 27
  3436                           
  3437                           ;main.c: 193: I2C_Master_Start();
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;incstack = 0
  3441  002A04  EC14  F017         	call	_I2C_Master_Start	;wreg free
  3442                           
  3443                           ;main.c: 194: I2C_Master_Write(0b11010000);
  3444  002A08  0E00               	movlw	0
  3445  002A0A  6E13               	movwf	I2C_Master_Write@d+1,c
  3446  002A0C  0ED0               	movlw	208
  3447  002A0E  6E12               	movwf	I2C_Master_Write@d,c
  3448  002A10  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  3449                           
  3450                           ;main.c: 195: I2C_Master_Write(0x00);
  3451  002A14  0E00               	movlw	0
  3452  002A16  6E13               	movwf	I2C_Master_Write@d+1,c
  3453  002A18  0E00               	movlw	0
  3454  002A1A  6E12               	movwf	I2C_Master_Write@d,c
  3455  002A1C  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  3456                           
  3457                           ;main.c: 196: I2C_Master_Stop();
  3458  002A20  EC10  F017         	call	_I2C_Master_Stop	;wreg free
  3459                           
  3460                           ;main.c: 199: I2C_Master_Start();
  3461  002A24  EC14  F017         	call	_I2C_Master_Start	;wreg free
  3462                           
  3463                           ;main.c: 200: I2C_Master_Write(0b11010001);
  3464  002A28  0E00               	movlw	0
  3465  002A2A  6E13               	movwf	I2C_Master_Write@d+1,c
  3466  002A2C  0ED1               	movlw	209
  3467  002A2E  6E12               	movwf	I2C_Master_Write@d,c
  3468  002A30  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  3469                           
  3470                           ;main.c: 201: for(unsigned char i=0;i<0x06;i++){
  3471  002A34  0E00               	movlw	0
  3472  002A36  6E16               	movwf	update_time@i,c
  3473  002A38                     l3663:
  3474  002A38  0E05               	movlw	5
  3475  002A3A  6416               	cpfsgt	update_time@i,c
  3476  002A3C  D001               	goto	l3667
  3477  002A3E  D00E               	goto	l3673
  3478  002A40                     l3667:
  3479                           
  3480                           ;main.c: 202: time[i] = I2C_Master_Read(1);
  3481  002A40  5016               	movf	update_time@i,w,c
  3482  002A42  0D01               	mullw	1
  3483  002A44  50F3               	movf	prodl,w,c
  3484  002A46  2414               	addwf	update_time@time,w,c
  3485  002A48  6ED9               	movwf	fsr2l,c
  3486  002A4A  50F4               	movf	prodh,w,c
  3487  002A4C  2015               	addwfc	update_time@time+1,w,c
  3488  002A4E  6EDA               	movwf	fsr2h,c
  3489  002A50  0E01               	movlw	1
  3490  002A52  ECA7  F016         	call	_I2C_Master_Read
  3491  002A56  6EDF               	movwf	indf2,c
  3492  002A58  2A16               	incf	update_time@i,f,c
  3493  002A5A  D7EE               	goto	l3663
  3494  002A5C                     l3673:
  3495                           
  3496                           ;main.c: 203: }
  3497                           ;main.c: 204: time[6] = I2C_Master_Read(0);
  3498  002A5C  EE20 F006          	lfsr	2,6
  3499  002A60  5014               	movf	update_time@time,w,c
  3500  002A62  26D9               	addwf	fsr2l,f,c
  3501  002A64  5015               	movf	update_time@time+1,w,c
  3502  002A66  22DA               	addwfc	fsr2h,f,c
  3503  002A68  0E00               	movlw	0
  3504  002A6A  ECA7  F016         	call	_I2C_Master_Read
  3505  002A6E  6EDF               	movwf	indf2,c
  3506                           
  3507                           ;main.c: 205: I2C_Master_Stop();
  3508  002A70  EC10  F017         	call	_I2C_Master_Stop	;wreg free
  3509  002A74  0012               	return		;funcret
  3510  002A76                     __end_of_update_time:
  3511                           	opt stack 0
  3512                           tblptru	equ	0xFF8
  3513                           tblptrh	equ	0xFF7
  3514                           tblptrl	equ	0xFF6
  3515                           tablat	equ	0xFF5
  3516                           prodh	equ	0xFF4
  3517                           prodl	equ	0xFF3
  3518                           intcon	equ	0xFF2
  3519                           intcon2	equ	0xFF1
  3520                           intcon3	equ	0xFF0
  3521                           postinc0	equ	0xFEE
  3522                           wreg	equ	0xFE8
  3523                           postdec1	equ	0xFE5
  3524                           fsr1l	equ	0xFE1
  3525                           indf2	equ	0xFDF
  3526                           fsr2h	equ	0xFDA
  3527                           fsr2l	equ	0xFD9
  3528                           status	equ	0xFD8
  3529                           
  3530 ;; *************** function _time_difference *****************
  3531 ;; Defined at:
  3532 ;;		line 247 in file "main.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  time1           2   25[BANK0 ] PTR unsigned char 
  3535 ;;		 -> main@end_time(7), main@time(7), 
  3536 ;;  time2           2   27[BANK0 ] PTR unsigned char 
  3537 ;;		 -> init_operation@detection_time(7), main@start_time(7), 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  d3              2   45[BANK0 ] int 
  3540 ;;  d2              2   43[BANK0 ] int 
  3541 ;;  d1              2   41[BANK0 ] int 
  3542 ;;  s2              2   39[BANK0 ] int 
  3543 ;;  s1              2   37[BANK0 ] int 
  3544 ;;  min2            2   35[BANK0 ] int 
  3545 ;;  min1            2   33[BANK0 ] int 
  3546 ;;  hr2             2   31[BANK0 ] int 
  3547 ;;  hr1             2   29[BANK0 ] int 
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  2   25[BANK0 ] int 
  3550 ;; Registers used:
  3551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3557 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3558 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Totals:         2      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;Total ram usage:       24 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    7
  3564 ;; This function calls:
  3565 ;;		___wmul
  3566 ;;		_dec_to_hex
  3567 ;; This function is called by:
  3568 ;;		_init_operation
  3569 ;;		_runtime
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text5
  3574  001502                     __ptext5:
  3575                           	opt stack 0
  3576  001502                     _time_difference:
  3577                           	opt stack 22
  3578                           
  3579                           ;main.c: 248: int hr1, hr2, min1, min2, s1, s2;
  3580                           ;main.c: 249: int d1, d2, d3;
  3581                           ;main.c: 250: hr1 = time1[2]; hr2 = time2[2]; min1 = time1[1]; min2 = time2[1];
  3582                           
  3583                           ;incstack = 0
  3584  001502  0100               	movlb	0	; () banked
  3585  001504  EE20 F002          	lfsr	2,2
  3586  001508  5199               	movf	time_difference@time1& (0+255),w,b
  3587  00150A  26D9               	addwf	fsr2l,f,c
  3588  00150C  519A               	movf	(time_difference@time1+1)& (0+255),w,b
  3589  00150E  22DA               	addwfc	fsr2h,f,c
  3590  001510  50DF               	movf	indf2,w,c
  3591  001512  6E6A               	movwf	??_time_difference& (0+255),c
  3592  001514  506A               	movf	??_time_difference,w,c
  3593  001516  0100               	movlb	0	; () banked
  3594  001518  6F9D               	movwf	time_difference@hr1& (0+255),b
  3595  00151A  6B9E               	clrf	(time_difference@hr1+1)& (0+255),b
  3596  00151C  0100               	movlb	0	; () banked
  3597  00151E  EE20 F002          	lfsr	2,2
  3598  001522  519B               	movf	time_difference@time2& (0+255),w,b
  3599  001524  26D9               	addwf	fsr2l,f,c
  3600  001526  519C               	movf	(time_difference@time2+1)& (0+255),w,b
  3601  001528  22DA               	addwfc	fsr2h,f,c
  3602  00152A  50DF               	movf	indf2,w,c
  3603  00152C  6E6A               	movwf	??_time_difference& (0+255),c
  3604  00152E  506A               	movf	??_time_difference,w,c
  3605  001530  0100               	movlb	0	; () banked
  3606  001532  6F9F               	movwf	time_difference@hr2& (0+255),b
  3607  001534  6BA0               	clrf	(time_difference@hr2+1)& (0+255),b
  3608  001536  0100               	movlb	0	; () banked
  3609  001538  EE20 F001          	lfsr	2,1
  3610  00153C  5199               	movf	time_difference@time1& (0+255),w,b
  3611  00153E  26D9               	addwf	fsr2l,f,c
  3612  001540  519A               	movf	(time_difference@time1+1)& (0+255),w,b
  3613  001542  22DA               	addwfc	fsr2h,f,c
  3614  001544  50DF               	movf	indf2,w,c
  3615  001546  6E6A               	movwf	??_time_difference& (0+255),c
  3616  001548  506A               	movf	??_time_difference,w,c
  3617  00154A  0100               	movlb	0	; () banked
  3618  00154C  6FA1               	movwf	time_difference@min1& (0+255),b
  3619  00154E  6BA2               	clrf	(time_difference@min1+1)& (0+255),b
  3620  001550  0100               	movlb	0	; () banked
  3621  001552  EE20 F001          	lfsr	2,1
  3622  001556  519B               	movf	time_difference@time2& (0+255),w,b
  3623  001558  26D9               	addwf	fsr2l,f,c
  3624  00155A  519C               	movf	(time_difference@time2+1)& (0+255),w,b
  3625  00155C  22DA               	addwfc	fsr2h,f,c
  3626  00155E  50DF               	movf	indf2,w,c
  3627  001560  6E6A               	movwf	??_time_difference& (0+255),c
  3628  001562  506A               	movf	??_time_difference,w,c
  3629  001564  0100               	movlb	0	; () banked
  3630  001566  6FA3               	movwf	time_difference@min2& (0+255),b
  3631  001568  6BA4               	clrf	(time_difference@min2+1)& (0+255),b
  3632                           
  3633                           ;main.c: 251: s1 = time1[0]; s2 = time2[0];
  3634  00156A  C099  FFD9         	movff	time_difference@time1,fsr2l
  3635  00156E  C09A  FFDA         	movff	time_difference@time1+1,fsr2h
  3636  001572  50DF               	movf	indf2,w,c
  3637  001574  6E6A               	movwf	??_time_difference& (0+255),c
  3638  001576  506A               	movf	??_time_difference,w,c
  3639  001578  0100               	movlb	0	; () banked
  3640  00157A  6FA5               	movwf	time_difference@s1& (0+255),b
  3641  00157C  6BA6               	clrf	(time_difference@s1+1)& (0+255),b
  3642  00157E  C09B  FFD9         	movff	time_difference@time2,fsr2l
  3643  001582  C09C  FFDA         	movff	time_difference@time2+1,fsr2h
  3644  001586  50DF               	movf	indf2,w,c
  3645  001588  6E6A               	movwf	??_time_difference& (0+255),c
  3646  00158A  506A               	movf	??_time_difference,w,c
  3647  00158C  0100               	movlb	0	; () banked
  3648  00158E  6FA7               	movwf	time_difference@s2& (0+255),b
  3649  001590  6BA8               	clrf	(time_difference@s2+1)& (0+255),b
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;main.c: 253: d1 = dec_to_hex(hr1) - dec_to_hex(hr2);
  3653  001592  C09D  F068         	movff	time_difference@hr1,dec_to_hex@num
  3654  001596  C09E  F069         	movff	time_difference@hr1+1,dec_to_hex@num+1
  3655  00159A  ECFB  F00E         	call	_dec_to_hex	;wreg free
  3656  00159E  C068  F06A         	movff	?_dec_to_hex,??_time_difference
  3657  0015A2  C069  F06B         	movff	?_dec_to_hex+1,??_time_difference+1
  3658  0015A6  C09F  F068         	movff	time_difference@hr2,dec_to_hex@num
  3659  0015AA  C0A0  F069         	movff	time_difference@hr2+1,dec_to_hex@num+1
  3660  0015AE  ECFB  F00E         	call	_dec_to_hex	;wreg free
  3661  0015B2  1E68               	comf	?_dec_to_hex,f,c
  3662  0015B4  1E69               	comf	?_dec_to_hex+1,f,c
  3663  0015B6  4A68               	infsnz	?_dec_to_hex,f,c
  3664  0015B8  2A69               	incf	?_dec_to_hex+1,f,c
  3665  0015BA  5068               	movf	?_dec_to_hex,w,c
  3666  0015BC  246A               	addwf	??_time_difference,w,c
  3667  0015BE  0100               	movlb	0	; () banked
  3668  0015C0  6FA9               	movwf	time_difference@d1& (0+255),b
  3669  0015C2  5069               	movf	?_dec_to_hex+1,w,c
  3670  0015C4  206B               	addwfc	??_time_difference+1,w,c
  3671  0015C6  0100               	movlb	0	; () banked
  3672  0015C8  6FAA               	movwf	(time_difference@d1+1)& (0+255),b
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;main.c: 254: d2 = dec_to_hex(min1) - dec_to_hex(min2);
  3676  0015CA  C0A1  F068         	movff	time_difference@min1,dec_to_hex@num
  3677  0015CE  C0A2  F069         	movff	time_difference@min1+1,dec_to_hex@num+1
  3678  0015D2  ECFB  F00E         	call	_dec_to_hex	;wreg free
  3679  0015D6  C068  F06A         	movff	?_dec_to_hex,??_time_difference
  3680  0015DA  C069  F06B         	movff	?_dec_to_hex+1,??_time_difference+1
  3681  0015DE  C0A3  F068         	movff	time_difference@min2,dec_to_hex@num
  3682  0015E2  C0A4  F069         	movff	time_difference@min2+1,dec_to_hex@num+1
  3683  0015E6  ECFB  F00E         	call	_dec_to_hex	;wreg free
  3684  0015EA  1E68               	comf	?_dec_to_hex,f,c
  3685  0015EC  1E69               	comf	?_dec_to_hex+1,f,c
  3686  0015EE  4A68               	infsnz	?_dec_to_hex,f,c
  3687  0015F0  2A69               	incf	?_dec_to_hex+1,f,c
  3688  0015F2  5068               	movf	?_dec_to_hex,w,c
  3689  0015F4  246A               	addwf	??_time_difference,w,c
  3690  0015F6  0100               	movlb	0	; () banked
  3691  0015F8  6FAB               	movwf	time_difference@d2& (0+255),b
  3692  0015FA  5069               	movf	?_dec_to_hex+1,w,c
  3693  0015FC  206B               	addwfc	??_time_difference+1,w,c
  3694  0015FE  0100               	movlb	0	; () banked
  3695  001600  6FAC               	movwf	(time_difference@d2+1)& (0+255),b
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;main.c: 255: d3 = dec_to_hex(s1) - dec_to_hex(s2);
  3699  001602  C0A5  F068         	movff	time_difference@s1,dec_to_hex@num
  3700  001606  C0A6  F069         	movff	time_difference@s1+1,dec_to_hex@num+1
  3701  00160A  ECFB  F00E         	call	_dec_to_hex	;wreg free
  3702  00160E  C068  F06A         	movff	?_dec_to_hex,??_time_difference
  3703  001612  C069  F06B         	movff	?_dec_to_hex+1,??_time_difference+1
  3704  001616  C0A7  F068         	movff	time_difference@s2,dec_to_hex@num
  3705  00161A  C0A8  F069         	movff	time_difference@s2+1,dec_to_hex@num+1
  3706  00161E  ECFB  F00E         	call	_dec_to_hex	;wreg free
  3707  001622  1E68               	comf	?_dec_to_hex,f,c
  3708  001624  1E69               	comf	?_dec_to_hex+1,f,c
  3709  001626  4A68               	infsnz	?_dec_to_hex,f,c
  3710  001628  2A69               	incf	?_dec_to_hex+1,f,c
  3711  00162A  5068               	movf	?_dec_to_hex,w,c
  3712  00162C  246A               	addwf	??_time_difference,w,c
  3713  00162E  0100               	movlb	0	; () banked
  3714  001630  6FAD               	movwf	time_difference@d3& (0+255),b
  3715  001632  5069               	movf	?_dec_to_hex+1,w,c
  3716  001634  206B               	addwfc	??_time_difference+1,w,c
  3717  001636  0100               	movlb	0	; () banked
  3718  001638  6FAE               	movwf	(time_difference@d3+1)& (0+255),b
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;main.c: 256: return 3600*d1 + 60*d2 + d3;
  3722  00163A  C0A9  F011         	movff	time_difference@d1,___wmul@multiplier
  3723  00163E  C0AA  F012         	movff	time_difference@d1+1,___wmul@multiplier+1
  3724  001642  0E0E               	movlw	14
  3725  001644  6E14               	movwf	___wmul@multiplicand+1,c
  3726  001646  0E10               	movlw	16
  3727  001648  6E13               	movwf	___wmul@multiplicand,c
  3728  00164A  ECBA  F016         	call	___wmul	;wreg free
  3729  00164E  C011  F06A         	movff	?___wmul,??_time_difference
  3730  001652  C012  F06B         	movff	?___wmul+1,??_time_difference+1
  3731  001656  C0AB  F011         	movff	time_difference@d2,___wmul@multiplier
  3732  00165A  C0AC  F012         	movff	time_difference@d2+1,___wmul@multiplier+1
  3733  00165E  0E00               	movlw	0
  3734  001660  6E14               	movwf	___wmul@multiplicand+1,c
  3735  001662  0E3C               	movlw	60
  3736  001664  6E13               	movwf	___wmul@multiplicand,c
  3737  001666  ECBA  F016         	call	___wmul	;wreg free
  3738  00166A  5011               	movf	?___wmul,w,c
  3739  00166C  266A               	addwf	??_time_difference,f,c
  3740  00166E  5012               	movf	?___wmul+1,w,c
  3741  001670  226B               	addwfc	??_time_difference+1,f,c
  3742  001672  0100               	movlb	0	; () banked
  3743  001674  51AD               	movf	time_difference@d3& (0+255),w,b
  3744  001676  246A               	addwf	??_time_difference,w,c
  3745  001678  0100               	movlb	0	; () banked
  3746  00167A  6F99               	movwf	?_time_difference& (0+255),b
  3747  00167C  0100               	movlb	0	; () banked
  3748  00167E  51AE               	movf	(time_difference@d3+1)& (0+255),w,b
  3749  001680  206B               	addwfc	??_time_difference+1,w,c
  3750  001682  0100               	movlb	0	; () banked
  3751  001684  6F9A               	movwf	(?_time_difference+1)& (0+255),b
  3752  001686  0012               	return	
  3753  001688                     __end_of_time_difference:
  3754                           	opt stack 0
  3755                           tblptru	equ	0xFF8
  3756                           tblptrh	equ	0xFF7
  3757                           tblptrl	equ	0xFF6
  3758                           tablat	equ	0xFF5
  3759                           prodh	equ	0xFF4
  3760                           prodl	equ	0xFF3
  3761                           intcon	equ	0xFF2
  3762                           intcon2	equ	0xFF1
  3763                           intcon3	equ	0xFF0
  3764                           postinc0	equ	0xFEE
  3765                           wreg	equ	0xFE8
  3766                           postdec1	equ	0xFE5
  3767                           fsr1l	equ	0xFE1
  3768                           indf2	equ	0xFDF
  3769                           fsr2h	equ	0xFDA
  3770                           fsr2l	equ	0xFD9
  3771                           status	equ	0xFD8
  3772                           
  3773 ;; *************** function _dec_to_hex *****************
  3774 ;; Defined at:
  3775 ;;		line 214 in file "main.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;  num             2  103[COMRAM] int 
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;  quotient        2   23[BANK0 ] int 
  3780 ;;  hexnum          2   21[BANK0 ] int 
  3781 ;;  i               2   19[BANK0 ] int 
  3782 ;;  temp            2   17[BANK0 ] int 
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  2  103[COMRAM] int 
  3785 ;; Registers used:
  3786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;      Totals:         2      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;Total ram usage:       16 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    6
  3799 ;; This function calls:
  3800 ;;		___awdiv
  3801 ;;		___awtoft
  3802 ;;		___ftadd
  3803 ;;		___ftmul
  3804 ;;		___fttol
  3805 ;;		_pow
  3806 ;; This function is called by:
  3807 ;;		_time_difference
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           	psect	text6
  3812  001DF6                     __ptext6:
  3813                           	opt stack 0
  3814  001DF6                     _dec_to_hex:
  3815                           	opt stack 22
  3816                           
  3817                           ;main.c: 215: int i = 0, quotient = num, temp, hexnum = 0;
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;incstack = 0
  3821  001DF6  0E00               	movlw	0
  3822  001DF8  0100               	movlb	0	; () banked
  3823  001DFA  6F94               	movwf	(dec_to_hex@i+1)& (0+255),b
  3824  001DFC  0E00               	movlw	0
  3825  001DFE  6F93               	movwf	dec_to_hex@i& (0+255),b
  3826                           
  3827                           ; BSR set to: 0
  3828  001E00  C068  F097         	movff	dec_to_hex@num,dec_to_hex@quotient
  3829  001E04  C069  F098         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  3830  001E08  0E00               	movlw	0
  3831  001E0A  0100               	movlb	0	; () banked
  3832  001E0C  6F96               	movwf	(dec_to_hex@hexnum+1)& (0+255),b
  3833  001E0E  0E00               	movlw	0
  3834  001E10  6F95               	movwf	dec_to_hex@hexnum& (0+255),b
  3835                           
  3836                           ;main.c: 217: while (quotient != 0) {
  3837  001E12  D06C               	goto	l3395
  3838  001E14                     l3383:
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;main.c: 218: temp = quotient % 16;
  3842  001E14  0E0F               	movlw	15
  3843  001E16  0100               	movlb	0	; () banked
  3844  001E18  1597               	andwf	dec_to_hex@quotient& (0+255),w,b
  3845  001E1A  0100               	movlb	0	; () banked
  3846  001E1C  6F91               	movwf	dec_to_hex@temp& (0+255),b
  3847  001E1E  0100               	movlb	0	; () banked
  3848  001E20  6B92               	clrf	(dec_to_hex@temp+1)& (0+255),b
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;main.c: 220: hexnum += temp*pow(10,i);
  3852  001E22  C093  F019         	movff	dec_to_hex@i,___awtoft@c
  3853  001E26  C094  F01A         	movff	dec_to_hex@i+1,___awtoft@c+1
  3854  001E2A  EC8B  F016         	call	___awtoft	;wreg free
  3855  001E2E  C019  F08B         	movff	?___awtoft,_dec_to_hex$1408
  3856  001E32  C01A  F08C         	movff	?___awtoft+1,_dec_to_hex$1408+1
  3857  001E36  C01B  F08D         	movff	?___awtoft+2,_dec_to_hex$1408+2
  3858                           
  3859                           ;main.c: 220: hexnum += temp*pow(10,i);
  3860  001E3A  C08B  F065         	movff	_dec_to_hex$1408,pow@y
  3861  001E3E  C08C  F066         	movff	_dec_to_hex$1408+1,pow@y+1
  3862  001E42  C08D  F067         	movff	_dec_to_hex$1408+2,pow@y+2
  3863  001E46  0E00               	movlw	0
  3864  001E48  6E62               	movwf	pow@x,c
  3865  001E4A  0E20               	movlw	32
  3866  001E4C  6E63               	movwf	pow@x+1,c
  3867  001E4E  0E41               	movlw	65
  3868  001E50  6E64               	movwf	pow@x+2,c
  3869  001E52  EC44  F00B         	call	_pow	;wreg free
  3870  001E56  C062  F08E         	movff	?_pow,_dec_to_hex$1409
  3871  001E5A  C063  F08F         	movff	?_pow+1,_dec_to_hex$1409+1
  3872  001E5E  C064  F090         	movff	?_pow+2,_dec_to_hex$1409+2
  3873                           
  3874                           ;main.c: 220: hexnum += temp*pow(10,i);
  3875  001E62  C08E  F020         	movff	_dec_to_hex$1409,___ftmul@f2
  3876  001E66  C08F  F021         	movff	_dec_to_hex$1409+1,___ftmul@f2+1
  3877  001E6A  C090  F022         	movff	_dec_to_hex$1409+2,___ftmul@f2+2
  3878  001E6E  C091  F019         	movff	dec_to_hex@temp,___awtoft@c
  3879  001E72  C092  F01A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  3880  001E76  EC8B  F016         	call	___awtoft	;wreg free
  3881  001E7A  C019  F01D         	movff	?___awtoft,___ftmul@f1
  3882  001E7E  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  3883  001E82  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  3884  001E86  EC79  F010         	call	___ftmul	;wreg free
  3885  001E8A  C01D  F02F         	movff	?___ftmul,___ftadd@f2
  3886  001E8E  C01E  F030         	movff	?___ftmul+1,___ftadd@f2+1
  3887  001E92  C01F  F031         	movff	?___ftmul+2,___ftadd@f2+2
  3888  001E96  C095  F019         	movff	dec_to_hex@hexnum,___awtoft@c
  3889  001E9A  C096  F01A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  3890  001E9E  EC8B  F016         	call	___awtoft	;wreg free
  3891  001EA2  C019  F02C         	movff	?___awtoft,___ftadd@f1
  3892  001EA6  C01A  F02D         	movff	?___awtoft+1,___ftadd@f1+1
  3893  001EAA  C01B  F02E         	movff	?___awtoft+2,___ftadd@f1+2
  3894  001EAE  ECAB  F009         	call	___ftadd	;wreg free
  3895  001EB2  C02C  F038         	movff	?___ftadd,___fttol@f1
  3896  001EB6  C02D  F039         	movff	?___ftadd+1,___fttol@f1+1
  3897  001EBA  C02E  F03A         	movff	?___ftadd+2,___fttol@f1+2
  3898  001EBE  ECFF  F00F         	call	___fttol	;wreg free
  3899  001EC2  C038  F095         	movff	?___fttol,dec_to_hex@hexnum
  3900  001EC6  C039  F096         	movff	?___fttol+1,dec_to_hex@hexnum+1
  3901                           
  3902                           ;main.c: 222: quotient = quotient / 16;
  3903  001ECA  C097  F011         	movff	dec_to_hex@quotient,___awdiv@dividend
  3904  001ECE  C098  F012         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  3905  001ED2  0E00               	movlw	0
  3906  001ED4  6E14               	movwf	___awdiv@divisor+1,c
  3907  001ED6  0E10               	movlw	16
  3908  001ED8  6E13               	movwf	___awdiv@divisor,c
  3909  001EDA  EC86  F013         	call	___awdiv	;wreg free
  3910  001EDE  C011  F097         	movff	?___awdiv,dec_to_hex@quotient
  3911  001EE2  C012  F098         	movff	?___awdiv+1,dec_to_hex@quotient+1
  3912                           
  3913                           ;main.c: 223: i += 1;
  3914  001EE6  0100               	movlb	0	; () banked
  3915  001EE8  4B93               	infsnz	dec_to_hex@i& (0+255),f,b
  3916  001EEA  2B94               	incf	(dec_to_hex@i+1)& (0+255),f,b
  3917  001EEC                     l3395:
  3918                           
  3919                           ; BSR set to: 0
  3920  001EEC  0100               	movlb	0	; () banked
  3921  001EEE  5197               	movf	dec_to_hex@quotient& (0+255),w,b
  3922  001EF0  0100               	movlb	0	; () banked
  3923  001EF2  1198               	iorwf	(dec_to_hex@quotient+1)& (0+255),w,b
  3924  001EF4  A4D8               	btfss	status,2,c
  3925  001EF6  D78E               	goto	l3383
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;main.c: 224: }
  3929                           ;main.c: 225: return hexnum;
  3930  001EF8  C095  F068         	movff	dec_to_hex@hexnum,?_dec_to_hex
  3931  001EFC  C096  F069         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  3932                           
  3933                           ; BSR set to: 0
  3934  001F00  0012               	return		;funcret
  3935  001F02                     __end_of_dec_to_hex:
  3936                           	opt stack 0
  3937                           tblptru	equ	0xFF8
  3938                           tblptrh	equ	0xFF7
  3939                           tblptrl	equ	0xFF6
  3940                           tablat	equ	0xFF5
  3941                           prodh	equ	0xFF4
  3942                           prodl	equ	0xFF3
  3943                           intcon	equ	0xFF2
  3944                           intcon2	equ	0xFF1
  3945                           intcon3	equ	0xFF0
  3946                           postinc0	equ	0xFEE
  3947                           wreg	equ	0xFE8
  3948                           postdec1	equ	0xFE5
  3949                           fsr1l	equ	0xFE1
  3950                           indf2	equ	0xFDF
  3951                           fsr2h	equ	0xFDA
  3952                           fsr2l	equ	0xFD9
  3953                           status	equ	0xFD8
  3954                           
  3955 ;; *************** function _pow *****************
  3956 ;; Defined at:
  3957 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;  x               3   97[COMRAM] int 
  3960 ;;  y               3  100[COMRAM] int 
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;  yi              4    7[BANK0 ] unsigned long 
  3963 ;;  sign            1    6[BANK0 ] unsigned char 
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  3   97[COMRAM] unsigned char 
  3966 ;; Registers used:
  3967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3968 ;; Tracked objects:
  3969 ;;		On entry : 0/0
  3970 ;;		On exit  : 0/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3973 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3974 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3976 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;Total ram usage:       17 bytes
  3978 ;; Hardware stack levels used:    1
  3979 ;; Hardware stack levels required when called:    5
  3980 ;; This function calls:
  3981 ;;		___ftge
  3982 ;;		___ftmul
  3983 ;;		___ftneg
  3984 ;;		___fttol
  3985 ;;		___lltoft
  3986 ;;		_exp
  3987 ;;		_log
  3988 ;; This function is called by:
  3989 ;;		_dec_to_hex
  3990 ;;		_hex_to_dec
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text7
  3995  001688                     __ptext7:
  3996                           	opt stack 0
  3997  001688                     _pow:
  3998                           	opt stack 22
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;incstack = 0
  4002  001688  0E00               	movlw	0
  4003  00168A  0100               	movlb	0	; () banked
  4004  00168C  6F86               	movwf	pow@sign& (0+255),b
  4005                           
  4006                           ; BSR set to: 0
  4007  00168E  5062               	movf	pow@x,w,c
  4008  001690  1063               	iorwf	pow@x+1,w,c
  4009  001692  1064               	iorwf	pow@x+2,w,c
  4010  001694  A4D8               	btfss	status,2,c
  4011  001696  D01B               	goto	l3253
  4012                           
  4013                           ; BSR set to: 0
  4014  001698  0E00               	movlw	0
  4015  00169A  6E2C               	movwf	___ftge@ff1,c
  4016  00169C  0E00               	movlw	0
  4017  00169E  6E2D               	movwf	___ftge@ff1+1,c
  4018  0016A0  0E00               	movlw	0
  4019  0016A2  6E2E               	movwf	___ftge@ff1+2,c
  4020  0016A4  C065  F02F         	movff	pow@y,___ftge@ff2
  4021  0016A8  C066  F030         	movff	pow@y+1,___ftge@ff2+1
  4022  0016AC  C067  F031         	movff	pow@y+2,___ftge@ff2+2
  4023  0016B0  EC3E  F013         	call	___ftge	;wreg free
  4024  0016B4  A0D8               	btfss	status,0,c
  4025  0016B6  D004               	goto	l893
  4026  0016B8  0E00               	movlw	0
  4027  0016BA  6E6E               	movwf	_errno+1,c
  4028  0016BC  0E21               	movlw	33
  4029  0016BE  6E6D               	movwf	_errno,c
  4030  0016C0                     l893:
  4031  0016C0  0E00               	movlw	0
  4032  0016C2  6E62               	movwf	?_pow,c
  4033  0016C4  0E00               	movlw	0
  4034  0016C6  6E63               	movwf	?_pow+1,c
  4035  0016C8  0E00               	movlw	0
  4036  0016CA  6E64               	movwf	?_pow+2,c
  4037  0016CC  0012               	return	
  4038  0016CE                     l3253:
  4039  0016CE  5065               	movf	pow@y,w,c
  4040  0016D0  1066               	iorwf	pow@y+1,w,c
  4041  0016D2  1067               	iorwf	pow@y+2,w,c
  4042  0016D4  A4D8               	btfss	status,2,c
  4043  0016D6  D007               	goto	l3259
  4044  0016D8  0E00               	movlw	0
  4045  0016DA  6E62               	movwf	?_pow,c
  4046  0016DC  0E80               	movlw	128
  4047  0016DE  6E63               	movwf	?_pow+1,c
  4048  0016E0  0E3F               	movlw	63
  4049  0016E2  6E64               	movwf	?_pow+2,c
  4050  0016E4  0012               	return	
  4051  0016E6                     l3259:
  4052  0016E6  AE64               	btfss	pow@x+2,7,c
  4053  0016E8  D042               	goto	l3271
  4054  0016EA  C065  F038         	movff	pow@y,___fttol@f1
  4055  0016EE  C066  F039         	movff	pow@y+1,___fttol@f1+1
  4056  0016F2  C067  F03A         	movff	pow@y+2,___fttol@f1+2
  4057  0016F6  ECFF  F00F         	call	___fttol	;wreg free
  4058  0016FA  C038  F087         	movff	?___fttol,pow@yi
  4059  0016FE  C039  F088         	movff	?___fttol+1,pow@yi+1
  4060  001702  C03A  F089         	movff	?___fttol+2,pow@yi+2
  4061  001706  C03B  F08A         	movff	?___fttol+3,pow@yi+3
  4062  00170A  C087  F019         	movff	pow@yi,___lltoft@c
  4063  00170E  C088  F01A         	movff	pow@yi+1,___lltoft@c+1
  4064  001712  C089  F01B         	movff	pow@yi+2,___lltoft@c+2
  4065  001716  C08A  F01C         	movff	pow@yi+3,___lltoft@c+3
  4066  00171A  EC3B  F015         	call	___lltoft	;wreg free
  4067  00171E  5065               	movf	pow@y,w,c
  4068  001720  1819               	xorwf	?___lltoft,w,c
  4069  001722  E107               	bnz	u2780
  4070  001724  5066               	movf	pow@y+1,w,c
  4071  001726  181A               	xorwf	?___lltoft+1,w,c
  4072  001728  E104               	bnz	u2780
  4073  00172A  5067               	movf	pow@y+2,w,c
  4074  00172C  181B               	xorwf	?___lltoft+2,w,c
  4075  00172E  B4D8               	btfsc	status,2,c
  4076  001730  D00B               	goto	l3267
  4077  001732                     u2780:
  4078  001732  0E00               	movlw	0
  4079  001734  6E6E               	movwf	_errno+1,c
  4080  001736  0E21               	movlw	33
  4081  001738  6E6D               	movwf	_errno,c
  4082  00173A  0E00               	movlw	0
  4083  00173C  6E62               	movwf	?_pow,c
  4084  00173E  0E00               	movlw	0
  4085  001740  6E63               	movwf	?_pow+1,c
  4086  001742  0E00               	movlw	0
  4087  001744  6E64               	movwf	?_pow+2,c
  4088  001746  0012               	return	
  4089  001748                     l3267:
  4090  001748  0100               	movlb	0	; () banked
  4091  00174A  5187               	movf	pow@yi& (0+255),w,b
  4092  00174C  0B01               	andlw	1
  4093  00174E  0100               	movlb	0	; () banked
  4094  001750  6F86               	movwf	pow@sign& (0+255),b
  4095                           
  4096                           ; BSR set to: 0
  4097  001752  C062  F011         	movff	pow@x,___ftneg@f1
  4098  001756  C063  F012         	movff	pow@x+1,___ftneg@f1+1
  4099  00175A  C064  F013         	movff	pow@x+2,___ftneg@f1+2
  4100  00175E  ECCD  F016         	call	___ftneg	;wreg free
  4101  001762  C011  F062         	movff	?___ftneg,pow@x
  4102  001766  C012  F063         	movff	?___ftneg+1,pow@x+1
  4103  00176A  C013  F064         	movff	?___ftneg+2,pow@x+2
  4104  00176E                     l3271:
  4105  00176E  C062  F044         	movff	pow@x,log@x
  4106  001772  C063  F045         	movff	pow@x+1,log@x+1
  4107  001776  C064  F046         	movff	pow@x+2,log@x+2
  4108  00177A  EC54  F00D         	call	_log	;wreg free
  4109  00177E  C044  F080         	movff	?_log,_pow$1413
  4110  001782  C045  F081         	movff	?_log+1,_pow$1413+1
  4111  001786  C046  F082         	movff	?_log+2,_pow$1413+2
  4112  00178A  C080  F01D         	movff	_pow$1413,___ftmul@f1
  4113  00178E  C081  F01E         	movff	_pow$1413+1,___ftmul@f1+1
  4114  001792  C082  F01F         	movff	_pow$1413+2,___ftmul@f1+2
  4115  001796  C065  F020         	movff	pow@y,___ftmul@f2
  4116  00179A  C066  F021         	movff	pow@y+1,___ftmul@f2+1
  4117  00179E  C067  F022         	movff	pow@y+2,___ftmul@f2+2
  4118  0017A2  EC79  F010         	call	___ftmul	;wreg free
  4119  0017A6  C01D  F083         	movff	?___ftmul,_pow$1414
  4120  0017AA  C01E  F084         	movff	?___ftmul+1,_pow$1414+1
  4121  0017AE  C01F  F085         	movff	?___ftmul+2,_pow$1414+2
  4122  0017B2  C083  F059         	movff	_pow$1414,exp@x
  4123  0017B6  C084  F05A         	movff	_pow$1414+1,exp@x+1
  4124  0017BA  C085  F05B         	movff	_pow$1414+2,exp@x+2
  4125  0017BE  ECD0  F007         	call	_exp	;wreg free
  4126  0017C2  C059  F062         	movff	?_exp,pow@x
  4127  0017C6  C05A  F063         	movff	?_exp+1,pow@x+1
  4128  0017CA  C05B  F064         	movff	?_exp+2,pow@x+2
  4129  0017CE  0100               	movlb	0	; () banked
  4130  0017D0  5186               	movf	pow@sign& (0+255),w,b
  4131  0017D2  0100               	movlb	0	; () banked
  4132  0017D4  B4D8               	btfsc	status,2,c
  4133  0017D6  D00F               	goto	l898
  4134                           
  4135                           ; BSR set to: 0
  4136  0017D8  C062  F011         	movff	pow@x,___ftneg@f1
  4137  0017DC  C063  F012         	movff	pow@x+1,___ftneg@f1+1
  4138  0017E0  C064  F013         	movff	pow@x+2,___ftneg@f1+2
  4139  0017E4  ECCD  F016         	call	___ftneg	;wreg free
  4140  0017E8  C011  F062         	movff	?___ftneg,?_pow
  4141  0017EC  C012  F063         	movff	?___ftneg+1,?_pow+1
  4142  0017F0  C013  F064         	movff	?___ftneg+2,?_pow+2
  4143  0017F4  0012               	return	
  4144  0017F6                     l898:
  4145                           
  4146                           ; BSR set to: 0
  4147  0017F6  C062  F062         	movff	pow@x,?_pow
  4148  0017FA  C063  F063         	movff	pow@x+1,?_pow+1
  4149  0017FE  C064  F064         	movff	pow@x+2,?_pow+2
  4150  001802  0012               	return		;funcret
  4151  001804                     __end_of_pow:
  4152                           	opt stack 0
  4153                           tblptru	equ	0xFF8
  4154                           tblptrh	equ	0xFF7
  4155                           tblptrl	equ	0xFF6
  4156                           tablat	equ	0xFF5
  4157                           prodh	equ	0xFF4
  4158                           prodl	equ	0xFF3
  4159                           intcon	equ	0xFF2
  4160                           intcon2	equ	0xFF1
  4161                           intcon3	equ	0xFF0
  4162                           postinc0	equ	0xFEE
  4163                           wreg	equ	0xFE8
  4164                           postdec1	equ	0xFE5
  4165                           fsr1l	equ	0xFE1
  4166                           indf2	equ	0xFDF
  4167                           fsr2h	equ	0xFDA
  4168                           fsr2l	equ	0xFD9
  4169                           status	equ	0xFD8
  4170                           
  4171 ;; *************** function _log *****************
  4172 ;; Defined at:
  4173 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;  x               3   67[COMRAM] unsigned char 
  4176 ;; Auto vars:     Size  Location     Type
  4177 ;;  exponent        2   70[COMRAM] int 
  4178 ;; Return value:  Size  Location     Type
  4179 ;;                  3   67[COMRAM] int 
  4180 ;; Registers used:
  4181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4187 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;Total ram usage:        5 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:    4
  4194 ;; This function calls:
  4195 ;;		___awtoft
  4196 ;;		___ftadd
  4197 ;;		___ftmul
  4198 ;;		_eval_poly
  4199 ;;		_frexp
  4200 ;; This function is called by:
  4201 ;;		_pow
  4202 ;; This function uses a non-reentrant model
  4203 ;;
  4204                           
  4205                           	psect	text8
  4206  001AA8                     __ptext8:
  4207                           	opt stack 0
  4208  001AA8                     _log:
  4209                           	opt stack 22
  4210                           
  4211                           ;incstack = 0
  4212  001AA8  AE46               	btfss	log@x+2,7,c
  4213  001AAA  D00B               	goto	l3183
  4214  001AAC  0E00               	movlw	0
  4215  001AAE  6E6E               	movwf	_errno+1,c
  4216  001AB0  0E21               	movlw	33
  4217  001AB2  6E6D               	movwf	_errno,c
  4218  001AB4  0E00               	movlw	0
  4219  001AB6  6E44               	movwf	?_log,c
  4220  001AB8  0E00               	movlw	0
  4221  001ABA  6E45               	movwf	?_log+1,c
  4222  001ABC  0E00               	movlw	0
  4223  001ABE  6E46               	movwf	?_log+2,c
  4224  001AC0  0012               	return	
  4225  001AC2                     l3183:
  4226  001AC2  5044               	movf	log@x,w,c
  4227  001AC4  1045               	iorwf	log@x+1,w,c
  4228  001AC6  1046               	iorwf	log@x+2,w,c
  4229  001AC8  A4D8               	btfss	status,2,c
  4230  001ACA  D00B               	goto	l3189
  4231  001ACC  0E00               	movlw	0
  4232  001ACE  6E6E               	movwf	_errno+1,c
  4233  001AD0  0E22               	movlw	34
  4234  001AD2  6E6D               	movwf	_errno,c
  4235  001AD4  0E00               	movlw	0
  4236  001AD6  6E44               	movwf	?_log,c
  4237  001AD8  0E00               	movlw	0
  4238  001ADA  6E45               	movwf	?_log+1,c
  4239  001ADC  0E00               	movlw	0
  4240  001ADE  6E46               	movwf	?_log+2,c
  4241  001AE0  0012               	return	
  4242  001AE2                     l3189:
  4243  001AE2  0E00               	movlw	0
  4244  001AE4  6E20               	movwf	___ftmul@f2,c
  4245  001AE6  0E00               	movlw	0
  4246  001AE8  6E21               	movwf	___ftmul@f2+1,c
  4247  001AEA  0E40               	movlw	64
  4248  001AEC  6E22               	movwf	___ftmul@f2+2,c
  4249  001AEE  0E47               	movlw	low log@exponent
  4250  001AF0  6E14               	movwf	frexp@eptr,c
  4251  001AF2  0E00               	movlw	high log@exponent
  4252  001AF4  6E15               	movwf	frexp@eptr+1,c
  4253  001AF6  C044  F011         	movff	log@x,frexp@value
  4254  001AFA  C045  F012         	movff	log@x+1,frexp@value+1
  4255  001AFE  C046  F013         	movff	log@x+2,frexp@value+2
  4256  001B02  ECF6  F012         	call	_frexp	;wreg free
  4257  001B06  C011  F01D         	movff	?_frexp,___ftmul@f1
  4258  001B0A  C012  F01E         	movff	?_frexp+1,___ftmul@f1+1
  4259  001B0E  C013  F01F         	movff	?_frexp+2,___ftmul@f1+2
  4260  001B12  EC79  F010         	call	___ftmul	;wreg free
  4261  001B16  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  4262  001B1A  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  4263  001B1E  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  4264  001B22  0E00               	movlw	0
  4265  001B24  6E2F               	movwf	___ftadd@f2,c
  4266  001B26  0E80               	movlw	128
  4267  001B28  6E30               	movwf	___ftadd@f2+1,c
  4268  001B2A  0EBF               	movlw	191
  4269  001B2C  6E31               	movwf	___ftadd@f2+2,c
  4270  001B2E  ECAB  F009         	call	___ftadd	;wreg free
  4271  001B32  C02C  F044         	movff	?___ftadd,log@x
  4272  001B36  C02D  F045         	movff	?___ftadd+1,log@x+1
  4273  001B3A  C02E  F046         	movff	?___ftadd+2,log@x+2
  4274  001B3E  0647               	decf	log@exponent,f,c
  4275  001B40  A0D8               	btfss	status,0,c
  4276  001B42  0648               	decf	log@exponent+1,f,c
  4277  001B44  C044  F038         	movff	log@x,eval_poly@x
  4278  001B48  C045  F039         	movff	log@x+1,eval_poly@x+1
  4279  001B4C  C046  F03A         	movff	log@x+2,eval_poly@x+2
  4280  001B50  0EC9               	movlw	low log@coeff
  4281  001B52  6E3B               	movwf	eval_poly@d,c
  4282  001B54  0EFE               	movlw	high log@coeff
  4283  001B56  6E3C               	movwf	eval_poly@d+1,c
  4284  001B58  0E00               	movlw	0
  4285  001B5A  6E3E               	movwf	eval_poly@n+1,c
  4286  001B5C  0E08               	movlw	8
  4287  001B5E  6E3D               	movwf	eval_poly@n,c
  4288  001B60  ECD5  F011         	call	_eval_poly	;wreg free
  4289  001B64  C038  F044         	movff	?_eval_poly,log@x
  4290  001B68  C039  F045         	movff	?_eval_poly+1,log@x+1
  4291  001B6C  C03A  F046         	movff	?_eval_poly+2,log@x+2
  4292  001B70  0E72               	movlw	114
  4293  001B72  6E20               	movwf	___ftmul@f2,c
  4294  001B74  0E31               	movlw	49
  4295  001B76  6E21               	movwf	___ftmul@f2+1,c
  4296  001B78  0E3F               	movlw	63
  4297  001B7A  6E22               	movwf	___ftmul@f2+2,c
  4298  001B7C  C047  F019         	movff	log@exponent,___awtoft@c
  4299  001B80  C048  F01A         	movff	log@exponent+1,___awtoft@c+1
  4300  001B84  EC8B  F016         	call	___awtoft	;wreg free
  4301  001B88  C019  F01D         	movff	?___awtoft,___ftmul@f1
  4302  001B8C  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  4303  001B90  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  4304  001B94  EC79  F010         	call	___ftmul	;wreg free
  4305  001B98  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  4306  001B9C  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  4307  001BA0  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  4308  001BA4  C044  F02F         	movff	log@x,___ftadd@f2
  4309  001BA8  C045  F030         	movff	log@x+1,___ftadd@f2+1
  4310  001BAC  C046  F031         	movff	log@x+2,___ftadd@f2+2
  4311  001BB0  ECAB  F009         	call	___ftadd	;wreg free
  4312  001BB4  C02C  F044         	movff	?___ftadd,?_log
  4313  001BB8  C02D  F045         	movff	?___ftadd+1,?_log+1
  4314  001BBC  C02E  F046         	movff	?___ftadd+2,?_log+2
  4315  001BC0  0012               	return	
  4316  001BC2                     __end_of_log:
  4317                           	opt stack 0
  4318                           tblptru	equ	0xFF8
  4319                           tblptrh	equ	0xFF7
  4320                           tblptrl	equ	0xFF6
  4321                           tablat	equ	0xFF5
  4322                           prodh	equ	0xFF4
  4323                           prodl	equ	0xFF3
  4324                           intcon	equ	0xFF2
  4325                           intcon2	equ	0xFF1
  4326                           intcon3	equ	0xFF0
  4327                           postinc0	equ	0xFEE
  4328                           wreg	equ	0xFE8
  4329                           postdec1	equ	0xFE5
  4330                           fsr1l	equ	0xFE1
  4331                           indf2	equ	0xFDF
  4332                           fsr2h	equ	0xFDA
  4333                           fsr2l	equ	0xFD9
  4334                           status	equ	0xFD8
  4335                           
  4336 ;; *************** function _exp *****************
  4337 ;; Defined at:
  4338 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  x               3   88[COMRAM] int 
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;  exponent        2   94[COMRAM] int 
  4343 ;;  sign            1   96[COMRAM] unsigned char 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  3   88[COMRAM] unsigned char 
  4346 ;; Registers used:
  4347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4353 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;Total ram usage:        9 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    4
  4360 ;; This function calls:
  4361 ;;		___awtoft
  4362 ;;		___ftdiv
  4363 ;;		___ftge
  4364 ;;		___ftmul
  4365 ;;		___ftneg
  4366 ;;		___ftsub
  4367 ;;		___fttol
  4368 ;;		_eval_poly
  4369 ;;		_floor
  4370 ;;		_ldexp
  4371 ;; This function is called by:
  4372 ;;		_pow
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           	psect	text9
  4377  000FA0                     __ptext9:
  4378                           	opt stack 0
  4379  000FA0                     _exp:
  4380                           	opt stack 22
  4381                           
  4382                           ;incstack = 0
  4383  000FA0  5059               	movf	exp@x,w,c
  4384  000FA2  105A               	iorwf	exp@x+1,w,c
  4385  000FA4  105B               	iorwf	exp@x+2,w,c
  4386  000FA6  A4D8               	btfss	status,2,c
  4387  000FA8  D007               	goto	l3205
  4388  000FAA  0E00               	movlw	0
  4389  000FAC  6E59               	movwf	?_exp,c
  4390  000FAE  0E80               	movlw	128
  4391  000FB0  6E5A               	movwf	?_exp+1,c
  4392  000FB2  0E3F               	movlw	63
  4393  000FB4  6E5B               	movwf	?_exp+2,c
  4394  000FB6  0012               	return	
  4395  000FB8                     l3205:
  4396  000FB8  0E72               	movlw	114
  4397  000FBA  6E2C               	movwf	___ftge@ff1,c
  4398  000FBC  0E31               	movlw	49
  4399  000FBE  6E2D               	movwf	___ftge@ff1+1,c
  4400  000FC0  0E44               	movlw	68
  4401  000FC2  6E2E               	movwf	___ftge@ff1+2,c
  4402  000FC4  C059  F02F         	movff	exp@x,___ftge@ff2
  4403  000FC8  C05A  F030         	movff	exp@x+1,___ftge@ff2+1
  4404  000FCC  C05B  F031         	movff	exp@x+2,___ftge@ff2+2
  4405  000FD0  EC3E  F013         	call	___ftge	;wreg free
  4406  000FD4  B0D8               	btfsc	status,0,c
  4407  000FD6  D00B               	goto	l3211
  4408  000FD8  0E00               	movlw	0
  4409  000FDA  6E6E               	movwf	_errno+1,c
  4410  000FDC  0E22               	movlw	34
  4411  000FDE  6E6D               	movwf	_errno,c
  4412  000FE0  0EFF               	movlw	255
  4413  000FE2  6E59               	movwf	?_exp,c
  4414  000FE4  0E7F               	movlw	127
  4415  000FE6  6E5A               	movwf	?_exp+1,c
  4416  000FE8  0E7F               	movlw	127
  4417  000FEA  6E5B               	movwf	?_exp+2,c
  4418  000FEC  0012               	return	
  4419  000FEE                     l3211:
  4420  000FEE  C059  F02C         	movff	exp@x,___ftge@ff1
  4421  000FF2  C05A  F02D         	movff	exp@x+1,___ftge@ff1+1
  4422  000FF6  C05B  F02E         	movff	exp@x+2,___ftge@ff1+2
  4423  000FFA  0E49               	movlw	73
  4424  000FFC  6E2F               	movwf	___ftge@ff2,c
  4425  000FFE  0E3A               	movlw	58
  4426  001000  6E30               	movwf	___ftge@ff2+1,c
  4427  001002  0EC4               	movlw	196
  4428  001004  6E31               	movwf	___ftge@ff2+2,c
  4429  001006  EC3E  F013         	call	___ftge	;wreg free
  4430  00100A  B0D8               	btfsc	status,0,c
  4431  00100C  D00B               	goto	l3217
  4432  00100E  0E00               	movlw	0
  4433  001010  6E6E               	movwf	_errno+1,c
  4434  001012  0E22               	movlw	34
  4435  001014  6E6D               	movwf	_errno,c
  4436  001016  0E00               	movlw	0
  4437  001018  6E59               	movwf	?_exp,c
  4438  00101A  0E00               	movlw	0
  4439  00101C  6E5A               	movwf	?_exp+1,c
  4440  00101E  0E00               	movlw	0
  4441  001020  6E5B               	movwf	?_exp+2,c
  4442  001022  0012               	return	
  4443  001024                     l3217:
  4444  001024  AE5B               	btfss	exp@x+2,7,c
  4445  001026  D002               	goto	u2690
  4446  001028  0E01               	movlw	1
  4447  00102A  D001               	goto	u2700
  4448  00102C                     u2690:
  4449  00102C  0E00               	movlw	0
  4450  00102E                     u2700:
  4451  00102E  6E61               	movwf	exp@sign,c
  4452  001030  5061               	movf	exp@sign,w,c
  4453  001032  B4D8               	btfsc	status,2,c
  4454  001034  D00E               	goto	l1056
  4455  001036  C059  F011         	movff	exp@x,___ftneg@f1
  4456  00103A  C05A  F012         	movff	exp@x+1,___ftneg@f1+1
  4457  00103E  C05B  F013         	movff	exp@x+2,___ftneg@f1+2
  4458  001042  ECCD  F016         	call	___ftneg	;wreg free
  4459  001046  C011  F059         	movff	?___ftneg,exp@x
  4460  00104A  C012  F05A         	movff	?___ftneg+1,exp@x+1
  4461  00104E  C013  F05B         	movff	?___ftneg+2,exp@x+2
  4462  001052                     l1056:
  4463  001052  C059  F01D         	movff	exp@x,___ftmul@f1
  4464  001056  C05A  F01E         	movff	exp@x+1,___ftmul@f1+1
  4465  00105A  C05B  F01F         	movff	exp@x+2,___ftmul@f1+2
  4466  00105E  0EAA               	movlw	170
  4467  001060  6E20               	movwf	___ftmul@f2,c
  4468  001062  0EB8               	movlw	184
  4469  001064  6E21               	movwf	___ftmul@f2+1,c
  4470  001066  0E3F               	movlw	63
  4471  001068  6E22               	movwf	___ftmul@f2+2,c
  4472  00106A  EC79  F010         	call	___ftmul	;wreg free
  4473  00106E  C01D  F059         	movff	?___ftmul,exp@x
  4474  001072  C01E  F05A         	movff	?___ftmul+1,exp@x+1
  4475  001076  C01F  F05B         	movff	?___ftmul+2,exp@x+2
  4476  00107A  C059  F051         	movff	exp@x,floor@x
  4477  00107E  C05A  F052         	movff	exp@x+1,floor@x+1
  4478  001082  C05B  F053         	movff	exp@x+2,floor@x+2
  4479  001086  EC66  F011         	call	_floor	;wreg free
  4480  00108A  C051  F05C         	movff	?_floor,_exp$1415
  4481  00108E  C052  F05D         	movff	?_floor+1,_exp$1415+1
  4482  001092  C053  F05E         	movff	?_floor+2,_exp$1415+2
  4483  001096  C05C  F038         	movff	_exp$1415,___fttol@f1
  4484  00109A  C05D  F039         	movff	_exp$1415+1,___fttol@f1+1
  4485  00109E  C05E  F03A         	movff	_exp$1415+2,___fttol@f1+2
  4486  0010A2  ECFF  F00F         	call	___fttol	;wreg free
  4487  0010A6  C038  F05F         	movff	?___fttol,exp@exponent
  4488  0010AA  C039  F060         	movff	?___fttol+1,exp@exponent+1
  4489  0010AE  C059  F038         	movff	exp@x,___ftsub@f1
  4490  0010B2  C05A  F039         	movff	exp@x+1,___ftsub@f1+1
  4491  0010B6  C05B  F03A         	movff	exp@x+2,___ftsub@f1+2
  4492  0010BA  C05F  F019         	movff	exp@exponent,___awtoft@c
  4493  0010BE  C060  F01A         	movff	exp@exponent+1,___awtoft@c+1
  4494  0010C2  EC8B  F016         	call	___awtoft	;wreg free
  4495  0010C6  C019  F03B         	movff	?___awtoft,___ftsub@f2
  4496  0010CA  C01A  F03C         	movff	?___awtoft+1,___ftsub@f2+1
  4497  0010CE  C01B  F03D         	movff	?___awtoft+2,___ftsub@f2+2
  4498  0010D2  EC4F  F016         	call	___ftsub	;wreg free
  4499  0010D6  C038  F059         	movff	?___ftsub,exp@x
  4500  0010DA  C039  F05A         	movff	?___ftsub+1,exp@x+1
  4501  0010DE  C03A  F05B         	movff	?___ftsub+2,exp@x+2
  4502  0010E2  C059  F038         	movff	exp@x,eval_poly@x
  4503  0010E6  C05A  F039         	movff	exp@x+1,eval_poly@x+1
  4504  0010EA  C05B  F03A         	movff	exp@x+2,eval_poly@x+2
  4505  0010EE  0EAB               	movlw	low exp@coeff
  4506  0010F0  6E3B               	movwf	eval_poly@d,c
  4507  0010F2  0EFE               	movlw	high exp@coeff
  4508  0010F4  6E3C               	movwf	eval_poly@d+1,c
  4509  0010F6  0E00               	movlw	0
  4510  0010F8  6E3E               	movwf	eval_poly@n+1,c
  4511  0010FA  0E09               	movlw	9
  4512  0010FC  6E3D               	movwf	eval_poly@n,c
  4513  0010FE  ECD5  F011         	call	_eval_poly	;wreg free
  4514  001102  C038  F044         	movff	?_eval_poly,ldexp@value
  4515  001106  C039  F045         	movff	?_eval_poly+1,ldexp@value+1
  4516  00110A  C03A  F046         	movff	?_eval_poly+2,ldexp@value+2
  4517  00110E  C05F  F047         	movff	exp@exponent,ldexp@newexp
  4518  001112  C060  F048         	movff	exp@exponent+1,ldexp@newexp+1
  4519  001116  EC3E  F012         	call	_ldexp	;wreg free
  4520  00111A  C044  F059         	movff	?_ldexp,exp@x
  4521  00111E  C045  F05A         	movff	?_ldexp+1,exp@x+1
  4522  001122  C046  F05B         	movff	?_ldexp+2,exp@x+2
  4523  001126  5061               	movf	exp@sign,w,c
  4524  001128  B4D8               	btfsc	status,2,c
  4525  00112A  D025               	goto	l1057
  4526  00112C  2859               	incf	exp@x,w,c
  4527  00112E  E10E               	bnz	l3239
  4528  001130  0E7F               	movlw	127
  4529  001132  185A               	xorwf	exp@x+1,w,c
  4530  001134  E10B               	bnz	l3239
  4531  001136  0E7F               	movlw	127
  4532  001138  185B               	xorwf	exp@x+2,w,c
  4533  00113A  A4D8               	btfss	status,2,c
  4534  00113C  D007               	goto	l3239
  4535  00113E  0E00               	movlw	0
  4536  001140  6E59               	movwf	?_exp,c
  4537  001142  0E00               	movlw	0
  4538  001144  6E5A               	movwf	?_exp+1,c
  4539  001146  0E00               	movlw	0
  4540  001148  6E5B               	movwf	?_exp+2,c
  4541  00114A  0012               	return	
  4542  00114C                     l3239:
  4543  00114C  0E00               	movlw	0
  4544  00114E  6E1D               	movwf	___ftdiv@f1,c
  4545  001150  0E80               	movlw	128
  4546  001152  6E1E               	movwf	___ftdiv@f1+1,c
  4547  001154  0E3F               	movlw	63
  4548  001156  6E1F               	movwf	___ftdiv@f1+2,c
  4549  001158  C059  F020         	movff	exp@x,___ftdiv@f2
  4550  00115C  C05A  F021         	movff	exp@x+1,___ftdiv@f2+1
  4551  001160  C05B  F022         	movff	exp@x+2,___ftdiv@f2+2
  4552  001164  ECF3  F010         	call	___ftdiv	;wreg free
  4553  001168  C01D  F059         	movff	?___ftdiv,?_exp
  4554  00116C  C01E  F05A         	movff	?___ftdiv+1,?_exp+1
  4555  001170  C01F  F05B         	movff	?___ftdiv+2,?_exp+2
  4556  001174  0012               	return	
  4557  001176                     l1057:
  4558  001176  C059  F059         	movff	exp@x,?_exp
  4559  00117A  C05A  F05A         	movff	exp@x+1,?_exp+1
  4560  00117E  C05B  F05B         	movff	exp@x+2,?_exp+2
  4561  001182  0012               	return		;funcret
  4562  001184                     __end_of_exp:
  4563                           	opt stack 0
  4564                           tblptru	equ	0xFF8
  4565                           tblptrh	equ	0xFF7
  4566                           tblptrl	equ	0xFF6
  4567                           tablat	equ	0xFF5
  4568                           prodh	equ	0xFF4
  4569                           prodl	equ	0xFF3
  4570                           intcon	equ	0xFF2
  4571                           intcon2	equ	0xFF1
  4572                           intcon3	equ	0xFF0
  4573                           postinc0	equ	0xFEE
  4574                           wreg	equ	0xFE8
  4575                           postdec1	equ	0xFE5
  4576                           fsr1l	equ	0xFE1
  4577                           indf2	equ	0xFDF
  4578                           fsr2h	equ	0xFDA
  4579                           fsr2l	equ	0xFD9
  4580                           status	equ	0xFD8
  4581                           
  4582 ;; *************** function _ldexp *****************
  4583 ;; Defined at:
  4584 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;  value           3   67[COMRAM] unsigned char 
  4587 ;;  newexp          2   70[COMRAM] int 
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  3   67[COMRAM] int 
  4592 ;; Registers used:
  4593 ;;		wreg, status,2, status,0
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4599 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;Total ram usage:        7 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    1
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_exp
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text10
  4614  00247C                     __ptext10:
  4615                           	opt stack 0
  4616  00247C                     _ldexp:
  4617                           	opt stack 24
  4618                           
  4619                           ;incstack = 0
  4620  00247C  5044               	movf	ldexp@value,w,c
  4621  00247E  1045               	iorwf	ldexp@value+1,w,c
  4622  002480  1046               	iorwf	ldexp@value+2,w,c
  4623  002482  A4D8               	btfss	status,2,c
  4624  002484  D007               	goto	l3137
  4625  002486  0E00               	movlw	0
  4626  002488  6E44               	movwf	?_ldexp,c
  4627  00248A  0E00               	movlw	0
  4628  00248C  6E45               	movwf	?_ldexp+1,c
  4629  00248E  0E00               	movlw	0
  4630  002490  6E46               	movwf	?_ldexp+2,c
  4631  002492  0012               	return	
  4632  002494                     l3137:
  4633  002494  5046               	movf	ldexp@value+2,w,c
  4634  002496  0B7F               	andlw	127
  4635  002498  6E49               	movwf	??_ldexp& (0+255),c
  4636  00249A  6A4A               	clrf	(??_ldexp+1)& (0+255),c
  4637  00249C  90D8               	bcf	status,0,c
  4638  00249E  3649               	rlcf	??_ldexp,f,c
  4639  0024A0  364A               	rlcf	??_ldexp+1,f,c
  4640  0024A2  5049               	movf	??_ldexp,w,c
  4641  0024A4  2647               	addwf	ldexp@newexp,f,c
  4642  0024A6  504A               	movf	??_ldexp+1,w,c
  4643  0024A8  2248               	addwfc	ldexp@newexp+1,f,c
  4644  0024AA  AE45               	btfss	ldexp@value+1,7,c
  4645  0024AC  D003               	goto	u2590
  4646  0024AE  6A49               	clrf	??_ldexp& (0+255),c
  4647  0024B0  2A49               	incf	??_ldexp& (0+255),f,c
  4648  0024B2  D001               	goto	u2598
  4649  0024B4                     u2590:
  4650  0024B4  6A49               	clrf	??_ldexp& (0+255),c
  4651  0024B6                     u2598:
  4652  0024B6  5049               	movf	??_ldexp,w,c
  4653  0024B8  2647               	addwf	ldexp@newexp,f,c
  4654  0024BA  0E00               	movlw	0
  4655  0024BC  2248               	addwfc	ldexp@newexp+1,f,c
  4656  0024BE  AE48               	btfss	ldexp@newexp+1,7,c
  4657  0024C0  D00B               	goto	l3145
  4658  0024C2  0E00               	movlw	0
  4659  0024C4  6E6E               	movwf	_errno+1,c
  4660  0024C6  0E22               	movlw	34
  4661  0024C8  6E6D               	movwf	_errno,c
  4662  0024CA  0E00               	movlw	0
  4663  0024CC  6E44               	movwf	?_ldexp,c
  4664  0024CE  0E00               	movlw	0
  4665  0024D0  6E45               	movwf	?_ldexp+1,c
  4666  0024D2  0E00               	movlw	0
  4667  0024D4                     L2:
  4668  0024D4  6E46               	movwf	?_ldexp+2,c
  4669  0024D6  0012               	return	
  4670  0024D8                     l3145:
  4671  0024D8  BE48               	btfsc	ldexp@newexp+1,7,c
  4672  0024DA  D015               	goto	l3161
  4673  0024DC  0448               	decf	ldexp@newexp+1,w,c
  4674  0024DE  A0D8               	btfss	status,0,c
  4675  0024E0  D012               	goto	l3161
  4676  0024E2  0E00               	movlw	0
  4677  0024E4  6E6E               	movwf	_errno+1,c
  4678  0024E6  0E22               	movlw	34
  4679  0024E8  6E6D               	movwf	_errno,c
  4680  0024EA  AE46               	btfss	ldexp@value+2,7,c
  4681  0024EC  D006               	goto	l3157
  4682  0024EE  0EFF               	movlw	255
  4683  0024F0  6E44               	movwf	?_ldexp,c
  4684  0024F2  0E7F               	movlw	127
  4685  0024F4  6E45               	movwf	?_ldexp+1,c
  4686  0024F6  0EFF               	movlw	255
  4687  0024F8  D7ED               	goto	L2
  4688  0024FA                     l3157:
  4689  0024FA  0EFF               	movlw	255
  4690  0024FC  6E44               	movwf	?_ldexp,c
  4691  0024FE  0E7F               	movlw	127
  4692  002500  6E45               	movwf	?_ldexp+1,c
  4693  002502  0E7F               	movlw	127
  4694  002504  D7E7               	goto	L2
  4695  002506                     l3161:
  4696  002506  3448               	rlcf	ldexp@newexp+1,w,c
  4697  002508  3048               	rrcf	ldexp@newexp+1,w,c
  4698  00250A  6E4A               	movwf	(??_ldexp+1)& (0+255),c
  4699  00250C  3047               	rrcf	ldexp@newexp,w,c
  4700  00250E  6E49               	movwf	??_ldexp& (0+255),c
  4701  002510  5046               	movf	ldexp@value+2,w,c
  4702  002512  1849               	xorwf	??_ldexp,w,c
  4703  002514  0B80               	andlw	-128
  4704  002516  1849               	xorwf	??_ldexp,w,c
  4705  002518  6E46               	movwf	ldexp@value+2,c
  4706  00251A  C047  F049         	movff	ldexp@newexp,??_ldexp
  4707  00251E  0E01               	movlw	1
  4708  002520  1649               	andwf	??_ldexp,f,c
  4709  002522  3249               	rrcf	??_ldexp,f,c
  4710  002524  3249               	rrcf	??_ldexp,f,c
  4711  002526  5045               	movf	ldexp@value+1,w,c
  4712  002528  1849               	xorwf	??_ldexp,w,c
  4713  00252A  0B7F               	andlw	-129
  4714  00252C  1849               	xorwf	??_ldexp,w,c
  4715  00252E  6E45               	movwf	ldexp@value+1,c
  4716  002530  C044  F044         	movff	ldexp@value,?_ldexp
  4717  002534  C045  F045         	movff	ldexp@value+1,?_ldexp+1
  4718  002538  C046  F046         	movff	ldexp@value+2,?_ldexp+2
  4719  00253C  0012               	return	
  4720  00253E                     __end_of_ldexp:
  4721                           	opt stack 0
  4722                           tblptru	equ	0xFF8
  4723                           tblptrh	equ	0xFF7
  4724                           tblptrl	equ	0xFF6
  4725                           tablat	equ	0xFF5
  4726                           prodh	equ	0xFF4
  4727                           prodl	equ	0xFF3
  4728                           intcon	equ	0xFF2
  4729                           intcon2	equ	0xFF1
  4730                           intcon3	equ	0xFF0
  4731                           postinc0	equ	0xFEE
  4732                           wreg	equ	0xFE8
  4733                           postdec1	equ	0xFE5
  4734                           fsr1l	equ	0xFE1
  4735                           indf2	equ	0xFDF
  4736                           fsr2h	equ	0xFDA
  4737                           fsr2l	equ	0xFD9
  4738                           status	equ	0xFD8
  4739                           
  4740 ;; *************** function _floor *****************
  4741 ;; Defined at:
  4742 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;  x               3   80[COMRAM] int 
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;  i               3   83[COMRAM] int 
  4747 ;;  expon           2   86[COMRAM] int 
  4748 ;; Return value:  Size  Location     Type
  4749 ;;                  3   80[COMRAM] int 
  4750 ;; Registers used:
  4751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4757 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4760 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4761 ;;Total ram usage:        8 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; Hardware stack levels required when called:    3
  4764 ;; This function calls:
  4765 ;;		___altoft
  4766 ;;		___ftadd
  4767 ;;		___ftge
  4768 ;;		___fttol
  4769 ;;		_frexp
  4770 ;; This function is called by:
  4771 ;;		_exp
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           	psect	text11
  4776  0022CC                     __ptext11:
  4777                           	opt stack 0
  4778  0022CC                     _floor:
  4779                           	opt stack 22
  4780                           
  4781                           ;incstack = 0
  4782  0022CC  C051  F011         	movff	floor@x,frexp@value
  4783  0022D0  C052  F012         	movff	floor@x+1,frexp@value+1
  4784  0022D4  C053  F013         	movff	floor@x+2,frexp@value+2
  4785  0022D8  0E57               	movlw	low floor@expon
  4786  0022DA  6E14               	movwf	frexp@eptr,c
  4787  0022DC  0E00               	movlw	high floor@expon
  4788  0022DE  6E15               	movwf	frexp@eptr+1,c
  4789  0022E0  ECF6  F012         	call	_frexp	;wreg free
  4790  0022E4  AE58               	btfss	floor@expon+1,7,c
  4791  0022E6  D010               	goto	l3115
  4792  0022E8  AE53               	btfss	floor@x+2,7,c
  4793  0022EA  D007               	goto	l3111
  4794  0022EC  0E00               	movlw	0
  4795  0022EE  6E51               	movwf	?_floor,c
  4796  0022F0  0E80               	movlw	128
  4797  0022F2  6E52               	movwf	?_floor+1,c
  4798  0022F4  0EBF               	movlw	191
  4799  0022F6  6E53               	movwf	?_floor+2,c
  4800  0022F8  0012               	return	
  4801  0022FA                     l3111:
  4802  0022FA  0E00               	movlw	0
  4803  0022FC  6E51               	movwf	?_floor,c
  4804  0022FE  0E00               	movlw	0
  4805  002300  6E52               	movwf	?_floor+1,c
  4806  002302  0E00               	movlw	0
  4807  002304  6E53               	movwf	?_floor+2,c
  4808  002306  0012               	return	
  4809  002308                     l3115:
  4810  002308  5058               	movf	floor@expon+1,w,c
  4811  00230A  E104               	bnz	u2550
  4812  00230C  0E15               	movlw	21
  4813  00230E  5C57               	subwf	floor@expon,w,c
  4814  002310  A0D8               	btfss	status,0,c
  4815  002312  D007               	goto	l3119
  4816  002314                     u2550:
  4817  002314  C051  F051         	movff	floor@x,?_floor
  4818  002318  C052  F052         	movff	floor@x+1,?_floor+1
  4819  00231C  C053  F053         	movff	floor@x+2,?_floor+2
  4820  002320  0012               	return	
  4821  002322                     l3119:
  4822  002322  C051  F038         	movff	floor@x,___fttol@f1
  4823  002326  C052  F039         	movff	floor@x+1,___fttol@f1+1
  4824  00232A  C053  F03A         	movff	floor@x+2,___fttol@f1+2
  4825  00232E  ECFF  F00F         	call	___fttol	;wreg free
  4826  002332  C038  F047         	movff	?___fttol,___altoft@c
  4827  002336  C039  F048         	movff	?___fttol+1,___altoft@c+1
  4828  00233A  C03A  F049         	movff	?___fttol+2,___altoft@c+2
  4829  00233E  C03B  F04A         	movff	?___fttol+3,___altoft@c+3
  4830  002342  EC8D  F014         	call	___altoft	;wreg free
  4831  002346  C047  F054         	movff	?___altoft,floor@i
  4832  00234A  C048  F055         	movff	?___altoft+1,floor@i+1
  4833  00234E  C049  F056         	movff	?___altoft+2,floor@i+2
  4834  002352  C051  F02C         	movff	floor@x,___ftge@ff1
  4835  002356  C052  F02D         	movff	floor@x+1,___ftge@ff1+1
  4836  00235A  C053  F02E         	movff	floor@x+2,___ftge@ff1+2
  4837  00235E  C054  F02F         	movff	floor@i,___ftge@ff2
  4838  002362  C055  F030         	movff	floor@i+1,___ftge@ff2+1
  4839  002366  C056  F031         	movff	floor@i+2,___ftge@ff2+2
  4840  00236A  EC3E  F013         	call	___ftge	;wreg free
  4841  00236E  B0D8               	btfsc	status,0,c
  4842  002370  D015               	goto	l1067
  4843  002372  C054  F02C         	movff	floor@i,___ftadd@f1
  4844  002376  C055  F02D         	movff	floor@i+1,___ftadd@f1+1
  4845  00237A  C056  F02E         	movff	floor@i+2,___ftadd@f1+2
  4846  00237E  0E00               	movlw	0
  4847  002380  6E2F               	movwf	___ftadd@f2,c
  4848  002382  0E80               	movlw	128
  4849  002384  6E30               	movwf	___ftadd@f2+1,c
  4850  002386  0EBF               	movlw	191
  4851  002388  6E31               	movwf	___ftadd@f2+2,c
  4852  00238A  ECAB  F009         	call	___ftadd	;wreg free
  4853  00238E  C02C  F051         	movff	?___ftadd,?_floor
  4854  002392  C02D  F052         	movff	?___ftadd+1,?_floor+1
  4855  002396  C02E  F053         	movff	?___ftadd+2,?_floor+2
  4856  00239A  0012               	return	
  4857  00239C                     l1067:
  4858  00239C  C054  F051         	movff	floor@i,?_floor
  4859  0023A0  C055  F052         	movff	floor@i+1,?_floor+1
  4860  0023A4  C056  F053         	movff	floor@i+2,?_floor+2
  4861  0023A8  0012               	return		;funcret
  4862  0023AA                     __end_of_floor:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon	equ	0xFF2
  4871                           intcon2	equ	0xFF1
  4872                           intcon3	equ	0xFF0
  4873                           postinc0	equ	0xFEE
  4874                           wreg	equ	0xFE8
  4875                           postdec1	equ	0xFE5
  4876                           fsr1l	equ	0xFE1
  4877                           indf2	equ	0xFDF
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function _frexp *****************
  4883 ;; Defined at:
  4884 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;  value           3   16[COMRAM] int 
  4887 ;;  eptr            2   19[COMRAM] PTR int 
  4888 ;;		 -> log@exponent(2), floor@expon(2), 
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;		None
  4891 ;; Return value:  Size  Location     Type
  4892 ;;                  3   16[COMRAM] PTR int 
  4893 ;; Registers used:
  4894 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4895 ;; Tracked objects:
  4896 ;;		On entry : 0/0
  4897 ;;		On exit  : 0/0
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4900 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4904 ;;Total ram usage:        7 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; Hardware stack levels required when called:    1
  4907 ;; This function calls:
  4908 ;;		Nothing
  4909 ;; This function is called by:
  4910 ;;		_floor
  4911 ;;		_log
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text12
  4916  0025EC                     __ptext12:
  4917                           	opt stack 0
  4918  0025EC                     _frexp:
  4919                           	opt stack 24
  4920                           
  4921                           ;incstack = 0
  4922  0025EC  5011               	movf	frexp@value,w,c
  4923  0025EE  1012               	iorwf	frexp@value+1,w,c
  4924  0025F0  1013               	iorwf	frexp@value+2,w,c
  4925  0025F2  A4D8               	btfss	status,2,c
  4926  0025F4  D00F               	goto	l3019
  4927  0025F6  C014  FFD9         	movff	frexp@eptr,fsr2l
  4928  0025FA  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4929  0025FE  0E00               	movlw	0
  4930  002600  6EDE               	movwf	postinc2,c
  4931  002602  0E00               	movlw	0
  4932  002604  6EDD               	movwf	postdec2,c
  4933  002606  0E00               	movlw	0
  4934  002608  6E11               	movwf	?_frexp,c
  4935  00260A  0E00               	movlw	0
  4936  00260C  6E12               	movwf	?_frexp+1,c
  4937  00260E  0E00               	movlw	0
  4938  002610  6E13               	movwf	?_frexp+2,c
  4939  002612  0012               	return	
  4940  002614                     l3019:
  4941  002614  5013               	movf	frexp@value+2,w,c
  4942  002616  0B7F               	andlw	127
  4943  002618  6E16               	movwf	??_frexp& (0+255),c
  4944  00261A  6A17               	clrf	(??_frexp+1)& (0+255),c
  4945  00261C  90D8               	bcf	status,0,c
  4946  00261E  3616               	rlcf	??_frexp,f,c
  4947  002620  3617               	rlcf	??_frexp+1,f,c
  4948  002622  C014  FFD9         	movff	frexp@eptr,fsr2l
  4949  002626  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4950  00262A  C016  FFDE         	movff	??_frexp,postinc2
  4951  00262E  C017  FFDD         	movff	??_frexp+1,postdec2
  4952  002632  AE12               	btfss	frexp@value+1,7,c
  4953  002634  D003               	goto	u2440
  4954  002636  6A16               	clrf	??_frexp& (0+255),c
  4955  002638  2A16               	incf	??_frexp& (0+255),f,c
  4956  00263A  D001               	goto	u2448
  4957  00263C                     u2440:
  4958  00263C  6A16               	clrf	??_frexp& (0+255),c
  4959  00263E                     u2448:
  4960  00263E  5016               	movf	??_frexp,w,c
  4961  002640  C014  FFD9         	movff	frexp@eptr,fsr2l
  4962  002644  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4963  002648  12DE               	iorwf	postinc2,f,c
  4964  00264A  0E00               	movlw	0
  4965  00264C  12DD               	iorwf	postdec2,f,c
  4966  00264E  C014  FFD9         	movff	frexp@eptr,fsr2l
  4967  002652  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  4968  002656  0E82               	movlw	130
  4969  002658  26DE               	addwf	postinc2,f,c
  4970  00265A  0EFF               	movlw	255
  4971  00265C  22DD               	addwfc	postdec2,f,c
  4972  00265E  8013               	bsf	frexp@value+2,0,c
  4973  002660  8213               	bsf	frexp@value+2,1,c
  4974  002662  8413               	bsf	frexp@value+2,2,c
  4975  002664  8613               	bsf	frexp@value+2,3,c
  4976  002666  8813               	bsf	frexp@value+2,4,c
  4977  002668  8A13               	bsf	frexp@value+2,5,c
  4978  00266A  9C13               	bcf	frexp@value+2,6,c
  4979  00266C  9E12               	bcf	frexp@value+1,7,c
  4980  00266E  C011  F011         	movff	frexp@value,?_frexp
  4981  002672  C012  F012         	movff	frexp@value+1,?_frexp+1
  4982  002676  C013  F013         	movff	frexp@value+2,?_frexp+2
  4983  00267A  0012               	return	
  4984  00267C                     __end_of_frexp:
  4985                           	opt stack 0
  4986                           tblptru	equ	0xFF8
  4987                           tblptrh	equ	0xFF7
  4988                           tblptrl	equ	0xFF6
  4989                           tablat	equ	0xFF5
  4990                           prodh	equ	0xFF4
  4991                           prodl	equ	0xFF3
  4992                           intcon	equ	0xFF2
  4993                           intcon2	equ	0xFF1
  4994                           intcon3	equ	0xFF0
  4995                           postinc0	equ	0xFEE
  4996                           wreg	equ	0xFE8
  4997                           postdec1	equ	0xFE5
  4998                           fsr1l	equ	0xFE1
  4999                           indf2	equ	0xFDF
  5000                           postinc2	equ	0xFDE
  5001                           postdec2	equ	0xFDD
  5002                           fsr2h	equ	0xFDA
  5003                           fsr2l	equ	0xFD9
  5004                           status	equ	0xFD8
  5005                           
  5006 ;; *************** function ___fttol *****************
  5007 ;; Defined at:
  5008 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  f1              3   55[COMRAM] float 
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;  lval            4   65[COMRAM] unsigned long 
  5013 ;;  exp1            1   69[COMRAM] unsigned char 
  5014 ;;  sign1           1   64[COMRAM] unsigned char 
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  4   55[COMRAM] long 
  5017 ;; Registers used:
  5018 ;;		wreg, status,2, status,0
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5024 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;Total ram usage:       15 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    1
  5031 ;; This function calls:
  5032 ;;		Nothing
  5033 ;; This function is called by:
  5034 ;;		_dec_to_hex
  5035 ;;		_init_operation
  5036 ;;		_pow
  5037 ;;		_exp
  5038 ;;		_floor
  5039 ;;		_hex_to_dec
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           	psect	text13
  5044  001FFE                     __ptext13:
  5045                           	opt stack 0
  5046  001FFE                     ___fttol:
  5047                           	opt stack 23
  5048                           
  5049                           ;incstack = 0
  5050  001FFE  C03A  F03C         	movff	___fttol@f1+2,??___fttol
  5051  002002  6A3D               	clrf	(??___fttol+1)& (0+255),c
  5052  002004  6A3E               	clrf	(??___fttol+2)& (0+255),c
  5053  002006  3439               	rlcf	___fttol@f1+1,w,c
  5054  002008  363C               	rlcf	??___fttol& (0+255),f,c
  5055  00200A  E301               	bnc	u2351
  5056  00200C  803D               	bsf	(??___fttol+1)& (0+255),0,c
  5057  00200E                     u2351:
  5058  00200E  503C               	movf	??___fttol,w,c
  5059  002010  6E46               	movwf	___fttol@exp1,c
  5060  002012  5046               	movf	___fttol@exp1,w,c
  5061  002014  A4D8               	btfss	status,2,c
  5062  002016  D009               	goto	l2971
  5063  002018  0E00               	movlw	0
  5064  00201A  6E38               	movwf	?___fttol,c
  5065  00201C  0E00               	movlw	0
  5066  00201E  6E39               	movwf	?___fttol+1,c
  5067  002020  0E00               	movlw	0
  5068  002022  6E3A               	movwf	?___fttol+2,c
  5069  002024  0E00               	movlw	0
  5070  002026  6E3B               	movwf	?___fttol+3,c
  5071  002028  0012               	return	
  5072  00202A                     l2971:
  5073  00202A  0E17               	movlw	23
  5074  00202C  6E3C               	movwf	??___fttol& (0+255),c
  5075  00202E  C038  F03D         	movff	___fttol@f1,??___fttol+1
  5076  002032  C039  F03E         	movff	___fttol@f1+1,??___fttol+2
  5077  002036  C03A  F03F         	movff	___fttol@f1+2,??___fttol+3
  5078  00203A  283C               	incf	??___fttol,w,c
  5079  00203C  6E40               	movwf	(??___fttol+4)& (0+255),c
  5080  00203E  D004               	goto	u2370
  5081  002040                     u2375:
  5082  002040  90D8               	bcf	status,0,c
  5083  002042  323F               	rrcf	??___fttol+3,f,c
  5084  002044  323E               	rrcf	??___fttol+2,f,c
  5085  002046  323D               	rrcf	??___fttol+1,f,c
  5086  002048                     u2370:
  5087  002048  2E40               	decfsz	(??___fttol+4)& (0+255),f,c
  5088  00204A  D7FA               	goto	u2375
  5089  00204C  503D               	movf	??___fttol+1,w,c
  5090  00204E  6E41               	movwf	___fttol@sign1,c
  5091  002050  8E39               	bsf	___fttol@f1+1,7,c
  5092  002052  0EFF               	movlw	255
  5093  002054  1638               	andwf	___fttol@f1,f,c
  5094  002056  0EFF               	movlw	255
  5095  002058  1639               	andwf	___fttol@f1+1,f,c
  5096  00205A  0E00               	movlw	0
  5097  00205C  163A               	andwf	___fttol@f1+2,f,c
  5098  00205E  5038               	movf	___fttol@f1,w,c
  5099  002060  6E42               	movwf	___fttol@lval,c
  5100  002062  5039               	movf	___fttol@f1+1,w,c
  5101  002064  6E43               	movwf	___fttol@lval+1,c
  5102  002066  503A               	movf	___fttol@f1+2,w,c
  5103  002068  6E44               	movwf	___fttol@lval+2,c
  5104  00206A  6A45               	clrf	___fttol@lval+3,c
  5105  00206C  0E8E               	movlw	142
  5106  00206E  5E46               	subwf	___fttol@exp1,f,c
  5107  002070  AE46               	btfss	___fttol@exp1,7,c
  5108  002072  D016               	goto	l2993
  5109  002074  5046               	movf	___fttol@exp1,w,c
  5110  002076  0A80               	xorlw	128
  5111  002078  0F8F               	addlw	143
  5112  00207A  B0D8               	btfsc	status,0,c
  5113  00207C  D009               	goto	l2989
  5114  00207E  0E00               	movlw	0
  5115  002080  6E38               	movwf	?___fttol,c
  5116  002082  0E00               	movlw	0
  5117  002084  6E39               	movwf	?___fttol+1,c
  5118  002086  0E00               	movlw	0
  5119  002088  6E3A               	movwf	?___fttol+2,c
  5120  00208A  0E00               	movlw	0
  5121  00208C  6E3B               	movwf	?___fttol+3,c
  5122  00208E  0012               	return	
  5123  002090                     l2989:
  5124  002090  90D8               	bcf	status,0,c
  5125  002092  3245               	rrcf	___fttol@lval+3,f,c
  5126  002094  3244               	rrcf	___fttol@lval+2,f,c
  5127  002096  3243               	rrcf	___fttol@lval+1,f,c
  5128  002098  3242               	rrcf	___fttol@lval,f,c
  5129  00209A  3E46               	incfsz	___fttol@exp1,f,c
  5130  00209C  D7F9               	goto	l2989
  5131  00209E  D015               	goto	l3003
  5132  0020A0                     l2993:
  5133  0020A0  0E17               	movlw	23
  5134  0020A2  6446               	cpfsgt	___fttol@exp1,c
  5135  0020A4  D00F               	goto	l3001
  5136  0020A6  0E00               	movlw	0
  5137  0020A8  6E38               	movwf	?___fttol,c
  5138  0020AA  0E00               	movlw	0
  5139  0020AC  6E39               	movwf	?___fttol+1,c
  5140  0020AE  0E00               	movlw	0
  5141  0020B0  6E3A               	movwf	?___fttol+2,c
  5142  0020B2  0E00               	movlw	0
  5143  0020B4  6E3B               	movwf	?___fttol+3,c
  5144  0020B6  0012               	return	
  5145  0020B8                     l2999:
  5146  0020B8  90D8               	bcf	status,0,c
  5147  0020BA  3642               	rlcf	___fttol@lval,f,c
  5148  0020BC  3643               	rlcf	___fttol@lval+1,f,c
  5149  0020BE  3644               	rlcf	___fttol@lval+2,f,c
  5150  0020C0  3645               	rlcf	___fttol@lval+3,f,c
  5151  0020C2  0646               	decf	___fttol@exp1,f,c
  5152  0020C4                     l3001:
  5153  0020C4  5046               	movf	___fttol@exp1,w,c
  5154  0020C6  A4D8               	btfss	status,2,c
  5155  0020C8  D7F7               	goto	l2999
  5156  0020CA                     l3003:
  5157  0020CA  5041               	movf	___fttol@sign1,w,c
  5158  0020CC  B4D8               	btfsc	status,2,c
  5159  0020CE  D008               	goto	l3007
  5160  0020D0  1E45               	comf	___fttol@lval+3,f,c
  5161  0020D2  1E44               	comf	___fttol@lval+2,f,c
  5162  0020D4  1E43               	comf	___fttol@lval+1,f,c
  5163  0020D6  6C42               	negf	___fttol@lval,c
  5164  0020D8  0E00               	movlw	0
  5165  0020DA  2243               	addwfc	___fttol@lval+1,f,c
  5166  0020DC  2244               	addwfc	___fttol@lval+2,f,c
  5167  0020DE  2245               	addwfc	___fttol@lval+3,f,c
  5168  0020E0                     l3007:
  5169  0020E0  C042  F038         	movff	___fttol@lval,?___fttol
  5170  0020E4  C043  F039         	movff	___fttol@lval+1,?___fttol+1
  5171  0020E8  C044  F03A         	movff	___fttol@lval+2,?___fttol+2
  5172  0020EC  C045  F03B         	movff	___fttol@lval+3,?___fttol+3
  5173  0020F0  0012               	return	
  5174  0020F2                     __end_of___fttol:
  5175                           	opt stack 0
  5176                           tblptru	equ	0xFF8
  5177                           tblptrh	equ	0xFF7
  5178                           tblptrl	equ	0xFF6
  5179                           tablat	equ	0xFF5
  5180                           prodh	equ	0xFF4
  5181                           prodl	equ	0xFF3
  5182                           intcon	equ	0xFF2
  5183                           intcon2	equ	0xFF1
  5184                           intcon3	equ	0xFF0
  5185                           postinc0	equ	0xFEE
  5186                           wreg	equ	0xFE8
  5187                           postdec1	equ	0xFE5
  5188                           fsr1l	equ	0xFE1
  5189                           indf2	equ	0xFDF
  5190                           postinc2	equ	0xFDE
  5191                           postdec2	equ	0xFDD
  5192                           fsr2h	equ	0xFDA
  5193                           fsr2l	equ	0xFD9
  5194                           status	equ	0xFD8
  5195                           
  5196 ;; *************** function ___ftge *****************
  5197 ;; Defined at:
  5198 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;  ff1             3   43[COMRAM] float 
  5201 ;;  ff2             3   46[COMRAM] float 
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;		None
  5204 ;; Return value:  Size  Location     Type
  5205 ;;		None               void
  5206 ;; Registers used:
  5207 ;;		wreg, status,2, status,0
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5213 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5215 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5216 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;Total ram usage:        9 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:    1
  5220 ;; This function calls:
  5221 ;;		Nothing
  5222 ;; This function is called by:
  5223 ;;		_init_operation
  5224 ;;		_pow
  5225 ;;		_exp
  5226 ;;		_floor
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text14
  5231  00267C                     __ptext14:
  5232                           	opt stack 0
  5233  00267C                     ___ftge:
  5234                           	opt stack 23
  5235                           
  5236                           ;incstack = 0
  5237  00267C  AE2E               	btfss	___ftge@ff1+2,7,c
  5238  00267E  D016               	goto	l2951
  5239  002680  C02C  F032         	movff	___ftge@ff1,??___ftge
  5240  002684  C02D  F033         	movff	___ftge@ff1+1,??___ftge+1
  5241  002688  C02E  F034         	movff	___ftge@ff1+2,??___ftge+2
  5242  00268C  1E32               	comf	??___ftge,f,c
  5243  00268E  1E33               	comf	??___ftge+1,f,c
  5244  002690  1E34               	comf	??___ftge+2,f,c
  5245  002692  2A32               	incf	??___ftge,f,c
  5246  002694  0E00               	movlw	0
  5247  002696  2233               	addwfc	??___ftge+1,f,c
  5248  002698  2234               	addwfc	??___ftge+2,f,c
  5249  00269A  0E00               	movlw	0
  5250  00269C  2432               	addwf	??___ftge,w,c
  5251  00269E  6E2C               	movwf	___ftge@ff1,c
  5252  0026A0  0E00               	movlw	0
  5253  0026A2  2033               	addwfc	??___ftge+1,w,c
  5254  0026A4  6E2D               	movwf	___ftge@ff1+1,c
  5255  0026A6  0E80               	movlw	128
  5256  0026A8  2034               	addwfc	??___ftge+2,w,c
  5257  0026AA  6E2E               	movwf	___ftge@ff1+2,c
  5258  0026AC                     l2951:
  5259  0026AC  AE31               	btfss	___ftge@ff2+2,7,c
  5260  0026AE  D016               	goto	l2955
  5261  0026B0  C02F  F032         	movff	___ftge@ff2,??___ftge
  5262  0026B4  C030  F033         	movff	___ftge@ff2+1,??___ftge+1
  5263  0026B8  C031  F034         	movff	___ftge@ff2+2,??___ftge+2
  5264  0026BC  1E32               	comf	??___ftge,f,c
  5265  0026BE  1E33               	comf	??___ftge+1,f,c
  5266  0026C0  1E34               	comf	??___ftge+2,f,c
  5267  0026C2  2A32               	incf	??___ftge,f,c
  5268  0026C4  0E00               	movlw	0
  5269  0026C6  2233               	addwfc	??___ftge+1,f,c
  5270  0026C8  2234               	addwfc	??___ftge+2,f,c
  5271  0026CA  0E00               	movlw	0
  5272  0026CC  2432               	addwf	??___ftge,w,c
  5273  0026CE  6E2F               	movwf	___ftge@ff2,c
  5274  0026D0  0E00               	movlw	0
  5275  0026D2  2033               	addwfc	??___ftge+1,w,c
  5276  0026D4  6E30               	movwf	___ftge@ff2+1,c
  5277  0026D6  0E80               	movlw	128
  5278  0026D8  2034               	addwfc	??___ftge+2,w,c
  5279  0026DA  6E31               	movwf	___ftge@ff2+2,c
  5280  0026DC                     l2955:
  5281  0026DC  0E00               	movlw	0
  5282  0026DE  1A2C               	xorwf	___ftge@ff1,f,c
  5283  0026E0  0E00               	movlw	0
  5284  0026E2  1A2D               	xorwf	___ftge@ff1+1,f,c
  5285  0026E4  0E80               	movlw	128
  5286  0026E6  1A2E               	xorwf	___ftge@ff1+2,f,c
  5287  0026E8  0E00               	movlw	0
  5288  0026EA  1A2F               	xorwf	___ftge@ff2,f,c
  5289  0026EC  0E00               	movlw	0
  5290  0026EE  1A30               	xorwf	___ftge@ff2+1,f,c
  5291  0026F0  0E80               	movlw	128
  5292  0026F2  1A31               	xorwf	___ftge@ff2+2,f,c
  5293  0026F4  502F               	movf	___ftge@ff2,w,c
  5294  0026F6  5C2C               	subwf	___ftge@ff1,w,c
  5295  0026F8  5030               	movf	___ftge@ff2+1,w,c
  5296  0026FA  582D               	subwfb	___ftge@ff1+1,w,c
  5297  0026FC  5031               	movf	___ftge@ff2+2,w,c
  5298  0026FE  582E               	subwfb	___ftge@ff1+2,w,c
  5299  002700  B0D8               	btfsc	status,0,c
  5300  002702  D002               	goto	l2961
  5301  002704  90D8               	bcf	status,0,c
  5302  002706  0012               	return	
  5303  002708                     l2961:
  5304  002708  80D8               	bsf	status,0,c
  5305  00270A  0012               	return	
  5306  00270C                     __end_of___ftge:
  5307                           	opt stack 0
  5308                           tblptru	equ	0xFF8
  5309                           tblptrh	equ	0xFF7
  5310                           tblptrl	equ	0xFF6
  5311                           tablat	equ	0xFF5
  5312                           prodh	equ	0xFF4
  5313                           prodl	equ	0xFF3
  5314                           intcon	equ	0xFF2
  5315                           intcon2	equ	0xFF1
  5316                           intcon3	equ	0xFF0
  5317                           postinc0	equ	0xFEE
  5318                           wreg	equ	0xFE8
  5319                           postdec1	equ	0xFE5
  5320                           fsr1l	equ	0xFE1
  5321                           indf2	equ	0xFDF
  5322                           postinc2	equ	0xFDE
  5323                           postdec2	equ	0xFDD
  5324                           fsr2h	equ	0xFDA
  5325                           fsr2l	equ	0xFD9
  5326                           status	equ	0xFD8
  5327                           
  5328 ;; *************** function ___altoft *****************
  5329 ;; Defined at:
  5330 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;  c               4   70[COMRAM] long 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;  sign            1   79[COMRAM] unsigned char 
  5335 ;;  exp             1   78[COMRAM] unsigned char 
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  3   70[COMRAM] float 
  5338 ;; Registers used:
  5339 ;;		wreg, status,2, status,0, cstack
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5348 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5349 ;;Total ram usage:       10 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:    2
  5352 ;; This function calls:
  5353 ;;		___ftpack
  5354 ;; This function is called by:
  5355 ;;		_floor
  5356 ;;		_hex_to_dec
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           	psect	text15
  5361  00291A                     __ptext15:
  5362                           	opt stack 0
  5363  00291A                     ___altoft:
  5364                           	opt stack 22
  5365                           
  5366                           ;incstack = 0
  5367  00291A  0E00               	movlw	0
  5368  00291C  6E50               	movwf	___altoft@sign,c
  5369  00291E  0E8E               	movlw	142
  5370  002920  6E4F               	movwf	___altoft@exp,c
  5371  002922  AE4A               	btfss	___altoft@c+3,7,c
  5372  002924  D011               	goto	l2823
  5373  002926  1E4A               	comf	___altoft@c+3,f,c
  5374  002928  1E49               	comf	___altoft@c+2,f,c
  5375  00292A  1E48               	comf	___altoft@c+1,f,c
  5376  00292C  6C47               	negf	___altoft@c,c
  5377  00292E  0E00               	movlw	0
  5378  002930  2248               	addwfc	___altoft@c+1,f,c
  5379  002932  2249               	addwfc	___altoft@c+2,f,c
  5380  002934  224A               	addwfc	___altoft@c+3,f,c
  5381  002936  0E01               	movlw	1
  5382  002938  6E50               	movwf	___altoft@sign,c
  5383  00293A  D006               	goto	l2823
  5384  00293C                     l2821:
  5385  00293C  90D8               	bcf	status,0,c
  5386  00293E  324A               	rrcf	___altoft@c+3,f,c
  5387  002940  3249               	rrcf	___altoft@c+2,f,c
  5388  002942  3248               	rrcf	___altoft@c+1,f,c
  5389  002944  3247               	rrcf	___altoft@c,f,c
  5390  002946  2A4F               	incf	___altoft@exp,f,c
  5391  002948                     l2823:
  5392  002948  0E00               	movlw	0
  5393  00294A  1447               	andwf	___altoft@c,w,c
  5394  00294C  6E4B               	movwf	??___altoft& (0+255),c
  5395  00294E  0E00               	movlw	0
  5396  002950  1448               	andwf	___altoft@c+1,w,c
  5397  002952  6E4C               	movwf	(??___altoft+1)& (0+255),c
  5398  002954  0E00               	movlw	0
  5399  002956  1449               	andwf	___altoft@c+2,w,c
  5400  002958  6E4D               	movwf	(??___altoft+2)& (0+255),c
  5401  00295A  0EFF               	movlw	255
  5402  00295C  144A               	andwf	___altoft@c+3,w,c
  5403  00295E  6E4E               	movwf	(??___altoft+3)& (0+255),c
  5404  002960  504B               	movf	??___altoft,w,c
  5405  002962  104C               	iorwf	??___altoft+1,w,c
  5406  002964  104D               	iorwf	??___altoft+2,w,c
  5407  002966  104E               	iorwf	??___altoft+3,w,c
  5408  002968  A4D8               	btfss	status,2,c
  5409  00296A  D7E8               	goto	l2821
  5410  00296C  C047  F011         	movff	___altoft@c,___ftpack@arg
  5411  002970  C048  F012         	movff	___altoft@c+1,___ftpack@arg+1
  5412  002974  C049  F013         	movff	___altoft@c+2,___ftpack@arg+2
  5413  002978  C04F  F014         	movff	___altoft@exp,___ftpack@exp
  5414  00297C  C050  F015         	movff	___altoft@sign,___ftpack@sign
  5415  002980  EC9F  F012         	call	___ftpack	;wreg free
  5416  002984  C011  F047         	movff	?___ftpack,?___altoft
  5417  002988  C012  F048         	movff	?___ftpack+1,?___altoft+1
  5418  00298C  C013  F049         	movff	?___ftpack+2,?___altoft+2
  5419  002990  0012               	return	
  5420  002992                     __end_of___altoft:
  5421                           	opt stack 0
  5422                           tblptru	equ	0xFF8
  5423                           tblptrh	equ	0xFF7
  5424                           tblptrl	equ	0xFF6
  5425                           tablat	equ	0xFF5
  5426                           prodh	equ	0xFF4
  5427                           prodl	equ	0xFF3
  5428                           intcon	equ	0xFF2
  5429                           intcon2	equ	0xFF1
  5430                           intcon3	equ	0xFF0
  5431                           postinc0	equ	0xFEE
  5432                           wreg	equ	0xFE8
  5433                           postdec1	equ	0xFE5
  5434                           fsr1l	equ	0xFE1
  5435                           indf2	equ	0xFDF
  5436                           postinc2	equ	0xFDE
  5437                           postdec2	equ	0xFDD
  5438                           fsr2h	equ	0xFDA
  5439                           fsr2l	equ	0xFD9
  5440                           status	equ	0xFD8
  5441                           
  5442 ;; *************** function _eval_poly *****************
  5443 ;; Defined at:
  5444 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;  x               3   55[COMRAM] float 
  5447 ;;  d               2   58[COMRAM] PTR const 
  5448 ;;		 -> log@coeff(27), exp@coeff(30), 
  5449 ;;  n               2   60[COMRAM] int 
  5450 ;; Auto vars:     Size  Location     Type
  5451 ;;  res             3   64[COMRAM] int 
  5452 ;; Return value:  Size  Location     Type
  5453 ;;                  3   55[COMRAM] int 
  5454 ;; Registers used:
  5455 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5456 ;; Tracked objects:
  5457 ;;		On entry : 0/0
  5458 ;;		On exit  : 0/0
  5459 ;;		Unchanged: 0/0
  5460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5461 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5463 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;Total ram usage:       12 bytes
  5466 ;; Hardware stack levels used:    1
  5467 ;; Hardware stack levels required when called:    3
  5468 ;; This function calls:
  5469 ;;		___ftadd
  5470 ;;		___ftmul
  5471 ;;		___wmul
  5472 ;; This function is called by:
  5473 ;;		_exp
  5474 ;;		_log
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           	psect	text16
  5479  0023AA                     __ptext16:
  5480                           	opt stack 0
  5481  0023AA                     _eval_poly:
  5482                           	opt stack 22
  5483                           
  5484                           ;incstack = 0
  5485  0023AA  C03D  F011         	movff	eval_poly@n,___wmul@multiplier
  5486  0023AE  C03E  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  5487  0023B2  0E00               	movlw	0
  5488  0023B4  6E14               	movwf	___wmul@multiplicand+1,c
  5489  0023B6  0E03               	movlw	3
  5490  0023B8  6E13               	movwf	___wmul@multiplicand,c
  5491  0023BA  ECBA  F016         	call	___wmul	;wreg free
  5492  0023BE  C03B  F03F         	movff	eval_poly@d,??_eval_poly
  5493  0023C2  C03C  F040         	movff	eval_poly@d+1,??_eval_poly+1
  5494  0023C6  5011               	movf	?___wmul,w,c
  5495  0023C8  263F               	addwf	??_eval_poly,f,c
  5496  0023CA  5012               	movf	?___wmul+1,w,c
  5497  0023CC  2240               	addwfc	??_eval_poly+1,f,c
  5498  0023CE  C03F  FFF6         	movff	??_eval_poly,tblptrl
  5499  0023D2  C040  FFF7         	movff	??_eval_poly+1,tblptrh
  5500  0023D6                     	if	0	;tblptru may be non-zero
  5501  0023D6                     	endif
  5502  0023D6                     	if	0	;tblptru may be non-zero
  5503  0023D6                     	endif
  5504  0023D6  0009               	tblrd		*+
  5505  0023D8  CFF5 F041          	movff	tablat,eval_poly@res
  5506  0023DC  0009               	tblrd		*+
  5507  0023DE  CFF5 F042          	movff	tablat,eval_poly@res+1
  5508  0023E2  000A               	tblrd		*-
  5509  0023E4  CFF5 F043          	movff	tablat,eval_poly@res+2
  5510  0023E8  D03E               	goto	l3129
  5511  0023EA                     l3127:
  5512  0023EA  C041  F020         	movff	eval_poly@res,___ftmul@f2
  5513  0023EE  C042  F021         	movff	eval_poly@res+1,___ftmul@f2+1
  5514  0023F2  C043  F022         	movff	eval_poly@res+2,___ftmul@f2+2
  5515  0023F6  C038  F01D         	movff	eval_poly@x,___ftmul@f1
  5516  0023FA  C039  F01E         	movff	eval_poly@x+1,___ftmul@f1+1
  5517  0023FE  C03A  F01F         	movff	eval_poly@x+2,___ftmul@f1+2
  5518  002402  EC79  F010         	call	___ftmul	;wreg free
  5519  002406  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  5520  00240A  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  5521  00240E  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  5522  002412  0E00               	movlw	0
  5523  002414  6E14               	movwf	___wmul@multiplicand+1,c
  5524  002416  0E03               	movlw	3
  5525  002418  6E13               	movwf	___wmul@multiplicand,c
  5526  00241A  063D               	decf	eval_poly@n,f,c
  5527  00241C  A0D8               	btfss	status,0,c
  5528  00241E  063E               	decf	eval_poly@n+1,f,c
  5529  002420  C03D  F011         	movff	eval_poly@n,___wmul@multiplier
  5530  002424  C03E  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  5531  002428  ECBA  F016         	call	___wmul	;wreg free
  5532  00242C  C03B  F03F         	movff	eval_poly@d,??_eval_poly
  5533  002430  C03C  F040         	movff	eval_poly@d+1,??_eval_poly+1
  5534  002434  5011               	movf	?___wmul,w,c
  5535  002436  263F               	addwf	??_eval_poly,f,c
  5536  002438  5012               	movf	?___wmul+1,w,c
  5537  00243A  2240               	addwfc	??_eval_poly+1,f,c
  5538  00243C  C03F  FFF6         	movff	??_eval_poly,tblptrl
  5539  002440  C040  FFF7         	movff	??_eval_poly+1,tblptrh
  5540  002444                     	if	0	;tblptru may be non-zero
  5541  002444                     	endif
  5542  002444                     	if	0	;tblptru may be non-zero
  5543  002444                     	endif
  5544  002444  0009               	tblrd		*+
  5545  002446  CFF5 F02F          	movff	tablat,___ftadd@f2
  5546  00244A  0009               	tblrd		*+
  5547  00244C  CFF5 F030          	movff	tablat,___ftadd@f2+1
  5548  002450  000A               	tblrd		*-
  5549  002452  CFF5 F031          	movff	tablat,___ftadd@f2+2
  5550  002456  ECAB  F009         	call	___ftadd	;wreg free
  5551  00245A  C02C  F041         	movff	?___ftadd,eval_poly@res
  5552  00245E  C02D  F042         	movff	?___ftadd+1,eval_poly@res+1
  5553  002462  C02E  F043         	movff	?___ftadd+2,eval_poly@res+2
  5554  002466                     l3129:
  5555  002466  503D               	movf	eval_poly@n,w,c
  5556  002468  103E               	iorwf	eval_poly@n+1,w,c
  5557  00246A  A4D8               	btfss	status,2,c
  5558  00246C  D7BE               	goto	l3127
  5559  00246E  C041  F038         	movff	eval_poly@res,?_eval_poly
  5560  002472  C042  F039         	movff	eval_poly@res+1,?_eval_poly+1
  5561  002476  C043  F03A         	movff	eval_poly@res+2,?_eval_poly+2
  5562  00247A  0012               	return		;funcret
  5563  00247C                     __end_of_eval_poly:
  5564                           	opt stack 0
  5565                           tblptru	equ	0xFF8
  5566                           tblptrh	equ	0xFF7
  5567                           tblptrl	equ	0xFF6
  5568                           tablat	equ	0xFF5
  5569                           prodh	equ	0xFF4
  5570                           prodl	equ	0xFF3
  5571                           intcon	equ	0xFF2
  5572                           intcon2	equ	0xFF1
  5573                           intcon3	equ	0xFF0
  5574                           postinc0	equ	0xFEE
  5575                           wreg	equ	0xFE8
  5576                           postdec1	equ	0xFE5
  5577                           fsr1l	equ	0xFE1
  5578                           indf2	equ	0xFDF
  5579                           postinc2	equ	0xFDE
  5580                           postdec2	equ	0xFDD
  5581                           fsr2h	equ	0xFDA
  5582                           fsr2l	equ	0xFD9
  5583                           status	equ	0xFD8
  5584                           
  5585 ;; *************** function ___ftmul *****************
  5586 ;; Defined at:
  5587 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  5588 ;; Parameters:    Size  Location     Type
  5589 ;;  f1              3   28[COMRAM] float 
  5590 ;;  f2              3   31[COMRAM] float 
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  5593 ;;  sign            1   42[COMRAM] unsigned char 
  5594 ;;  cntr            1   41[COMRAM] unsigned char 
  5595 ;;  exp             1   37[COMRAM] unsigned char 
  5596 ;; Return value:  Size  Location     Type
  5597 ;;                  3   28[COMRAM] float 
  5598 ;; Registers used:
  5599 ;;		wreg, status,2, status,0, cstack
  5600 ;; Tracked objects:
  5601 ;;		On entry : 0/0
  5602 ;;		On exit  : 0/0
  5603 ;;		Unchanged: 0/0
  5604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5605 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5606 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5607 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5608 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5609 ;;Total ram usage:       15 bytes
  5610 ;; Hardware stack levels used:    1
  5611 ;; Hardware stack levels required when called:    2
  5612 ;; This function calls:
  5613 ;;		___ftpack
  5614 ;; This function is called by:
  5615 ;;		_dec_to_hex
  5616 ;;		_init_operation
  5617 ;;		_pow
  5618 ;;		_exp
  5619 ;;		_log
  5620 ;;		_eval_poly
  5621 ;;		_hex_to_dec
  5622 ;; This function uses a non-reentrant model
  5623 ;;
  5624                           
  5625                           	psect	text17
  5626  0020F2                     __ptext17:
  5627                           	opt stack 0
  5628  0020F2                     ___ftmul:
  5629                           	opt stack 22
  5630                           
  5631                           ;incstack = 0
  5632  0020F2  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  5633  0020F6  6A24               	clrf	(??___ftmul+1)& (0+255),c
  5634  0020F8  6A25               	clrf	(??___ftmul+2)& (0+255),c
  5635  0020FA  341E               	rlcf	___ftmul@f1+1,w,c
  5636  0020FC  3623               	rlcf	??___ftmul& (0+255),f,c
  5637  0020FE  E301               	bnc	u2261
  5638  002100  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  5639  002102                     u2261:
  5640  002102  5023               	movf	??___ftmul,w,c
  5641  002104  6E26               	movwf	___ftmul@exp,c
  5642  002106  5026               	movf	___ftmul@exp,w,c
  5643  002108  A4D8               	btfss	status,2,c
  5644  00210A  D007               	goto	l2905
  5645  00210C  0E00               	movlw	0
  5646  00210E  6E1D               	movwf	?___ftmul,c
  5647  002110  0E00               	movlw	0
  5648  002112  6E1E               	movwf	?___ftmul+1,c
  5649  002114  0E00               	movlw	0
  5650  002116  6E1F               	movwf	?___ftmul+2,c
  5651  002118  0012               	return	
  5652  00211A                     l2905:
  5653  00211A  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  5654  00211E  6A24               	clrf	(??___ftmul+1)& (0+255),c
  5655  002120  6A25               	clrf	(??___ftmul+2)& (0+255),c
  5656  002122  3421               	rlcf	___ftmul@f2+1,w,c
  5657  002124  3623               	rlcf	??___ftmul& (0+255),f,c
  5658  002126  E301               	bnc	u2281
  5659  002128  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  5660  00212A                     u2281:
  5661  00212A  5023               	movf	??___ftmul,w,c
  5662  00212C  6E2B               	movwf	___ftmul@sign,c
  5663  00212E  502B               	movf	___ftmul@sign,w,c
  5664  002130  A4D8               	btfss	status,2,c
  5665  002132  D007               	goto	l2911
  5666  002134  0E00               	movlw	0
  5667  002136  6E1D               	movwf	?___ftmul,c
  5668  002138  0E00               	movlw	0
  5669  00213A  6E1E               	movwf	?___ftmul+1,c
  5670  00213C  0E00               	movlw	0
  5671  00213E  6E1F               	movwf	?___ftmul+2,c
  5672  002140  0012               	return	
  5673  002142                     l2911:
  5674  002142  502B               	movf	___ftmul@sign,w,c
  5675  002144  0F7B               	addlw	123
  5676  002146  2626               	addwf	___ftmul@exp,f,c
  5677  002148  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  5678  00214C  5022               	movf	___ftmul@f2+2,w,c
  5679  00214E  1A2B               	xorwf	___ftmul@sign,f,c
  5680  002150  0E80               	movlw	128
  5681  002152  162B               	andwf	___ftmul@sign,f,c
  5682  002154  8E1E               	bsf	___ftmul@f1+1,7,c
  5683  002156  8E21               	bsf	___ftmul@f2+1,7,c
  5684  002158  0EFF               	movlw	255
  5685  00215A  1620               	andwf	___ftmul@f2,f,c
  5686  00215C  0EFF               	movlw	255
  5687  00215E  1621               	andwf	___ftmul@f2+1,f,c
  5688  002160  0E00               	movlw	0
  5689  002162  1622               	andwf	___ftmul@f2+2,f,c
  5690  002164  0E00               	movlw	0
  5691  002166  6E27               	movwf	___ftmul@f3_as_product,c
  5692  002168  0E00               	movlw	0
  5693  00216A  6E28               	movwf	___ftmul@f3_as_product+1,c
  5694  00216C  0E00               	movlw	0
  5695  00216E  6E29               	movwf	___ftmul@f3_as_product+2,c
  5696  002170  0E07               	movlw	7
  5697  002172  6E2A               	movwf	___ftmul@cntr,c
  5698  002174                     l2925:
  5699  002174  A01D               	btfss	___ftmul@f1,0,c
  5700  002176  D006               	goto	l2929
  5701  002178  5020               	movf	___ftmul@f2,w,c
  5702  00217A  2627               	addwf	___ftmul@f3_as_product,f,c
  5703  00217C  5021               	movf	___ftmul@f2+1,w,c
  5704  00217E  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  5705  002180  5022               	movf	___ftmul@f2+2,w,c
  5706  002182  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  5707  002184                     l2929:
  5708  002184  90D8               	bcf	status,0,c
  5709  002186  321F               	rrcf	___ftmul@f1+2,f,c
  5710  002188  321E               	rrcf	___ftmul@f1+1,f,c
  5711  00218A  321D               	rrcf	___ftmul@f1,f,c
  5712  00218C  90D8               	bcf	status,0,c
  5713  00218E  3620               	rlcf	___ftmul@f2,f,c
  5714  002190  3621               	rlcf	___ftmul@f2+1,f,c
  5715  002192  3622               	rlcf	___ftmul@f2+2,f,c
  5716  002194  2E2A               	decfsz	___ftmul@cntr,f,c
  5717  002196  D7EE               	goto	l2925
  5718  002198  0E09               	movlw	9
  5719  00219A  6E2A               	movwf	___ftmul@cntr,c
  5720  00219C                     l2935:
  5721  00219C  A01D               	btfss	___ftmul@f1,0,c
  5722  00219E  D006               	goto	l2939
  5723  0021A0  5020               	movf	___ftmul@f2,w,c
  5724  0021A2  2627               	addwf	___ftmul@f3_as_product,f,c
  5725  0021A4  5021               	movf	___ftmul@f2+1,w,c
  5726  0021A6  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  5727  0021A8  5022               	movf	___ftmul@f2+2,w,c
  5728  0021AA  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  5729  0021AC                     l2939:
  5730  0021AC  90D8               	bcf	status,0,c
  5731  0021AE  321F               	rrcf	___ftmul@f1+2,f,c
  5732  0021B0  321E               	rrcf	___ftmul@f1+1,f,c
  5733  0021B2  321D               	rrcf	___ftmul@f1,f,c
  5734  0021B4  90D8               	bcf	status,0,c
  5735  0021B6  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  5736  0021B8  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  5737  0021BA  3227               	rrcf	___ftmul@f3_as_product,f,c
  5738  0021BC  2E2A               	decfsz	___ftmul@cntr,f,c
  5739  0021BE  D7EE               	goto	l2935
  5740  0021C0  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  5741  0021C4  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5742  0021C8  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5743  0021CC  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  5744  0021D0  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  5745  0021D4  EC9F  F012         	call	___ftpack	;wreg free
  5746  0021D8  C011  F01D         	movff	?___ftpack,?___ftmul
  5747  0021DC  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  5748  0021E0  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  5749  0021E4  0012               	return	
  5750  0021E6                     __end_of___ftmul:
  5751                           	opt stack 0
  5752                           tblptru	equ	0xFF8
  5753                           tblptrh	equ	0xFF7
  5754                           tblptrl	equ	0xFF6
  5755                           tablat	equ	0xFF5
  5756                           prodh	equ	0xFF4
  5757                           prodl	equ	0xFF3
  5758                           intcon	equ	0xFF2
  5759                           intcon2	equ	0xFF1
  5760                           intcon3	equ	0xFF0
  5761                           postinc0	equ	0xFEE
  5762                           wreg	equ	0xFE8
  5763                           postdec1	equ	0xFE5
  5764                           fsr1l	equ	0xFE1
  5765                           indf2	equ	0xFDF
  5766                           postinc2	equ	0xFDE
  5767                           postdec2	equ	0xFDD
  5768                           fsr2h	equ	0xFDA
  5769                           fsr2l	equ	0xFD9
  5770                           status	equ	0xFD8
  5771                           
  5772 ;; *************** function ___ftsub *****************
  5773 ;; Defined at:
  5774 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;  f1              3   55[COMRAM] float 
  5777 ;;  f2              3   58[COMRAM] float 
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;		None
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  3   55[COMRAM] float 
  5782 ;; Registers used:
  5783 ;;		wreg, status,2, status,0, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5789 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;Total ram usage:        6 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    3
  5796 ;; This function calls:
  5797 ;;		___ftadd
  5798 ;; This function is called by:
  5799 ;;		_exp
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           	psect	text18
  5804  002C9E                     __ptext18:
  5805                           	opt stack 0
  5806  002C9E                     ___ftsub:
  5807                           	opt stack 22
  5808                           
  5809                           ;incstack = 0
  5810  002C9E  503B               	movf	___ftsub@f2,w,c
  5811  002CA0  103C               	iorwf	___ftsub@f2+1,w,c
  5812  002CA2  103D               	iorwf	___ftsub@f2+2,w,c
  5813  002CA4  B4D8               	btfsc	status,2,c
  5814  002CA6  D006               	goto	l3081
  5815  002CA8  0E00               	movlw	0
  5816  002CAA  1A3B               	xorwf	___ftsub@f2,f,c
  5817  002CAC  0E00               	movlw	0
  5818  002CAE  1A3C               	xorwf	___ftsub@f2+1,f,c
  5819  002CB0  0E80               	movlw	128
  5820  002CB2  1A3D               	xorwf	___ftsub@f2+2,f,c
  5821  002CB4                     l3081:
  5822  002CB4  C038  F02C         	movff	___ftsub@f1,___ftadd@f1
  5823  002CB8  C039  F02D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5824  002CBC  C03A  F02E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5825  002CC0  C03B  F02F         	movff	___ftsub@f2,___ftadd@f2
  5826  002CC4  C03C  F030         	movff	___ftsub@f2+1,___ftadd@f2+1
  5827  002CC8  C03D  F031         	movff	___ftsub@f2+2,___ftadd@f2+2
  5828  002CCC  ECAB  F009         	call	___ftadd	;wreg free
  5829  002CD0  C02C  F038         	movff	?___ftadd,?___ftsub
  5830  002CD4  C02D  F039         	movff	?___ftadd+1,?___ftsub+1
  5831  002CD8  C02E  F03A         	movff	?___ftadd+2,?___ftsub+2
  5832  002CDC  0012               	return	
  5833  002CDE                     __end_of___ftsub:
  5834                           	opt stack 0
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           intcon	equ	0xFF2
  5842                           intcon2	equ	0xFF1
  5843                           intcon3	equ	0xFF0
  5844                           postinc0	equ	0xFEE
  5845                           wreg	equ	0xFE8
  5846                           postdec1	equ	0xFE5
  5847                           fsr1l	equ	0xFE1
  5848                           indf2	equ	0xFDF
  5849                           postinc2	equ	0xFDE
  5850                           postdec2	equ	0xFDD
  5851                           fsr2h	equ	0xFDA
  5852                           fsr2l	equ	0xFD9
  5853                           status	equ	0xFD8
  5854                           
  5855 ;; *************** function ___ftadd *****************
  5856 ;; Defined at:
  5857 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  5858 ;; Parameters:    Size  Location     Type
  5859 ;;  f1              3   43[COMRAM] float 
  5860 ;;  f2              3   46[COMRAM] float 
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;  exp1            1   54[COMRAM] unsigned char 
  5863 ;;  exp2            1   53[COMRAM] unsigned char 
  5864 ;;  sign            1   52[COMRAM] unsigned char 
  5865 ;; Return value:  Size  Location     Type
  5866 ;;                  3   43[COMRAM] float 
  5867 ;; Registers used:
  5868 ;;		wreg, status,2, status,0, cstack
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5874 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;Total ram usage:       12 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:    2
  5881 ;; This function calls:
  5882 ;;		___ftpack
  5883 ;; This function is called by:
  5884 ;;		_dec_to_hex
  5885 ;;		_init_operation
  5886 ;;		___ftsub
  5887 ;;		_floor
  5888 ;;		_log
  5889 ;;		_eval_poly
  5890 ;;		_hex_to_dec
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text19
  5895  001356                     __ptext19:
  5896                           	opt stack 0
  5897  001356                     ___ftadd:
  5898                           	opt stack 22
  5899                           
  5900                           ;incstack = 0
  5901  001356  C02E  F032         	movff	___ftadd@f1+2,??___ftadd
  5902  00135A  6A33               	clrf	(??___ftadd+1)& (0+255),c
  5903  00135C  6A34               	clrf	(??___ftadd+2)& (0+255),c
  5904  00135E  342D               	rlcf	___ftadd@f1+1,w,c
  5905  001360  3632               	rlcf	??___ftadd& (0+255),f,c
  5906  001362  E301               	bnc	u2051
  5907  001364  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  5908  001366                     u2051:
  5909  001366  5032               	movf	??___ftadd,w,c
  5910  001368  6E37               	movwf	___ftadd@exp1,c
  5911  00136A  C031  F032         	movff	___ftadd@f2+2,??___ftadd
  5912  00136E  6A33               	clrf	(??___ftadd+1)& (0+255),c
  5913  001370  6A34               	clrf	(??___ftadd+2)& (0+255),c
  5914  001372  3430               	rlcf	___ftadd@f2+1,w,c
  5915  001374  3632               	rlcf	??___ftadd& (0+255),f,c
  5916  001376  E301               	bnc	u2061
  5917  001378  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  5918  00137A                     u2061:
  5919  00137A  5032               	movf	??___ftadd,w,c
  5920  00137C  6E36               	movwf	___ftadd@exp2,c
  5921  00137E  5037               	movf	___ftadd@exp1,w,c
  5922  001380  B4D8               	btfsc	status,2,c
  5923  001382  D00B               	goto	l701
  5924  001384  5036               	movf	___ftadd@exp2,w,c
  5925  001386  5C37               	subwf	___ftadd@exp1,w,c
  5926  001388  B0D8               	btfsc	status,0,c
  5927  00138A  D00E               	goto	l2837
  5928  00138C  5037               	movf	___ftadd@exp1,w,c
  5929  00138E  0800               	sublw	0
  5930  001390  2436               	addwf	___ftadd@exp2,w,c
  5931  001392  6E32               	movwf	??___ftadd& (0+255),c
  5932  001394  0E18               	movlw	24
  5933  001396  6432               	cpfsgt	??___ftadd,c
  5934  001398  D007               	goto	l2837
  5935  00139A                     l701:
  5936  00139A  C02F  F02C         	movff	___ftadd@f2,?___ftadd
  5937  00139E  C030  F02D         	movff	___ftadd@f2+1,?___ftadd+1
  5938  0013A2  C031  F02E         	movff	___ftadd@f2+2,?___ftadd+2
  5939  0013A6  0012               	return	
  5940  0013A8                     l2837:
  5941  0013A8  5036               	movf	___ftadd@exp2,w,c
  5942  0013AA  B4D8               	btfsc	status,2,c
  5943  0013AC  D00B               	goto	l705
  5944  0013AE  5037               	movf	___ftadd@exp1,w,c
  5945  0013B0  5C36               	subwf	___ftadd@exp2,w,c
  5946  0013B2  B0D8               	btfsc	status,0,c
  5947  0013B4  D00E               	goto	l2843
  5948  0013B6  5036               	movf	___ftadd@exp2,w,c
  5949  0013B8  0800               	sublw	0
  5950  0013BA  2437               	addwf	___ftadd@exp1,w,c
  5951  0013BC  6E32               	movwf	??___ftadd& (0+255),c
  5952  0013BE  0E18               	movlw	24
  5953  0013C0  6432               	cpfsgt	??___ftadd,c
  5954  0013C2  D007               	goto	l2843
  5955  0013C4                     l705:
  5956  0013C4  C02C  F02C         	movff	___ftadd@f1,?___ftadd
  5957  0013C8  C02D  F02D         	movff	___ftadd@f1+1,?___ftadd+1
  5958  0013CC  C02E  F02E         	movff	___ftadd@f1+2,?___ftadd+2
  5959  0013D0  0012               	return	
  5960  0013D2                     l2843:
  5961  0013D2  0E06               	movlw	6
  5962  0013D4  6E35               	movwf	___ftadd@sign,c
  5963  0013D6  BE2E               	btfsc	___ftadd@f1+2,7,c
  5964  0013D8  8E35               	bsf	___ftadd@sign,7,c
  5965  0013DA  BE31               	btfsc	___ftadd@f2+2,7,c
  5966  0013DC  8C35               	bsf	___ftadd@sign,6,c
  5967  0013DE  8E2D               	bsf	___ftadd@f1+1,7,c
  5968  0013E0  0EFF               	movlw	255
  5969  0013E2  162C               	andwf	___ftadd@f1,f,c
  5970  0013E4  0EFF               	movlw	255
  5971  0013E6  162D               	andwf	___ftadd@f1+1,f,c
  5972  0013E8  0E00               	movlw	0
  5973  0013EA  162E               	andwf	___ftadd@f1+2,f,c
  5974  0013EC  8E30               	bsf	___ftadd@f2+1,7,c
  5975  0013EE  0EFF               	movlw	255
  5976  0013F0  162F               	andwf	___ftadd@f2,f,c
  5977  0013F2  0EFF               	movlw	255
  5978  0013F4  1630               	andwf	___ftadd@f2+1,f,c
  5979  0013F6  0E00               	movlw	0
  5980  0013F8  1631               	andwf	___ftadd@f2+2,f,c
  5981  0013FA  5036               	movf	___ftadd@exp2,w,c
  5982  0013FC  5C37               	subwf	___ftadd@exp1,w,c
  5983  0013FE  B0D8               	btfsc	status,0,c
  5984  001400  D01B               	goto	l2869
  5985  001402                     l2859:
  5986  001402  90D8               	bcf	status,0,c
  5987  001404  362F               	rlcf	___ftadd@f2,f,c
  5988  001406  3630               	rlcf	___ftadd@f2+1,f,c
  5989  001408  3631               	rlcf	___ftadd@f2+2,f,c
  5990  00140A  0636               	decf	___ftadd@exp2,f,c
  5991  00140C  5037               	movf	___ftadd@exp1,w,c
  5992  00140E  1836               	xorwf	___ftadd@exp2,w,c
  5993  001410  B4D8               	btfsc	status,2,c
  5994  001412  D00D               	goto	l2867
  5995  001414  0635               	decf	___ftadd@sign,f,c
  5996  001416  C035  F032         	movff	___ftadd@sign,??___ftadd
  5997  00141A  0E07               	movlw	7
  5998  00141C  1632               	andwf	??___ftadd,f,c
  5999  00141E  B4D8               	btfsc	status,2,c
  6000  001420  D006               	goto	l2867
  6001  001422  D7EF               	goto	l2859
  6002  001424                     l2865:
  6003  001424  90D8               	bcf	status,0,c
  6004  001426  322E               	rrcf	___ftadd@f1+2,f,c
  6005  001428  322D               	rrcf	___ftadd@f1+1,f,c
  6006  00142A  322C               	rrcf	___ftadd@f1,f,c
  6007  00142C  2A37               	incf	___ftadd@exp1,f,c
  6008  00142E                     l2867:
  6009  00142E  5036               	movf	___ftadd@exp2,w,c
  6010  001430  1837               	xorwf	___ftadd@exp1,w,c
  6011  001432  B4D8               	btfsc	status,2,c
  6012  001434  D01F               	goto	l716
  6013  001436  D7F6               	goto	l2865
  6014  001438                     l2869:
  6015  001438  5037               	movf	___ftadd@exp1,w,c
  6016  00143A  5C36               	subwf	___ftadd@exp2,w,c
  6017  00143C  B0D8               	btfsc	status,0,c
  6018  00143E  D01A               	goto	l716
  6019  001440                     l2871:
  6020  001440  90D8               	bcf	status,0,c
  6021  001442  362C               	rlcf	___ftadd@f1,f,c
  6022  001444  362D               	rlcf	___ftadd@f1+1,f,c
  6023  001446  362E               	rlcf	___ftadd@f1+2,f,c
  6024  001448  0637               	decf	___ftadd@exp1,f,c
  6025  00144A  5037               	movf	___ftadd@exp1,w,c
  6026  00144C  1836               	xorwf	___ftadd@exp2,w,c
  6027  00144E  B4D8               	btfsc	status,2,c
  6028  001450  D00D               	goto	l2879
  6029  001452  0635               	decf	___ftadd@sign,f,c
  6030  001454  C035  F032         	movff	___ftadd@sign,??___ftadd
  6031  001458  0E07               	movlw	7
  6032  00145A  1632               	andwf	??___ftadd,f,c
  6033  00145C  B4D8               	btfsc	status,2,c
  6034  00145E  D006               	goto	l2879
  6035  001460  D7EF               	goto	l2871
  6036  001462                     l2877:
  6037  001462  90D8               	bcf	status,0,c
  6038  001464  3231               	rrcf	___ftadd@f2+2,f,c
  6039  001466  3230               	rrcf	___ftadd@f2+1,f,c
  6040  001468  322F               	rrcf	___ftadd@f2,f,c
  6041  00146A  2A36               	incf	___ftadd@exp2,f,c
  6042  00146C                     l2879:
  6043  00146C  5036               	movf	___ftadd@exp2,w,c
  6044  00146E  1837               	xorwf	___ftadd@exp1,w,c
  6045  001470  A4D8               	btfss	status,2,c
  6046  001472  D7F7               	goto	l2877
  6047  001474                     l716:
  6048  001474  AE35               	btfss	___ftadd@sign,7,c
  6049  001476  D00C               	goto	l725
  6050  001478  0EFF               	movlw	255
  6051  00147A  1A2C               	xorwf	___ftadd@f1,f,c
  6052  00147C  0EFF               	movlw	255
  6053  00147E  1A2D               	xorwf	___ftadd@f1+1,f,c
  6054  001480  0EFF               	movlw	255
  6055  001482  1A2E               	xorwf	___ftadd@f1+2,f,c
  6056  001484  0E01               	movlw	1
  6057  001486  262C               	addwf	___ftadd@f1,f,c
  6058  001488  0E00               	movlw	0
  6059  00148A  222D               	addwfc	___ftadd@f1+1,f,c
  6060  00148C  0E00               	movlw	0
  6061  00148E  222E               	addwfc	___ftadd@f1+2,f,c
  6062  001490                     l725:
  6063  001490  AC35               	btfss	___ftadd@sign,6,c
  6064  001492  D00C               	goto	l2885
  6065  001494  0EFF               	movlw	255
  6066  001496  1A2F               	xorwf	___ftadd@f2,f,c
  6067  001498  0EFF               	movlw	255
  6068  00149A  1A30               	xorwf	___ftadd@f2+1,f,c
  6069  00149C  0EFF               	movlw	255
  6070  00149E  1A31               	xorwf	___ftadd@f2+2,f,c
  6071  0014A0  0E01               	movlw	1
  6072  0014A2  262F               	addwf	___ftadd@f2,f,c
  6073  0014A4  0E00               	movlw	0
  6074  0014A6  2230               	addwfc	___ftadd@f2+1,f,c
  6075  0014A8  0E00               	movlw	0
  6076  0014AA  2231               	addwfc	___ftadd@f2+2,f,c
  6077  0014AC                     l2885:
  6078  0014AC  0E00               	movlw	0
  6079  0014AE  6E35               	movwf	___ftadd@sign,c
  6080  0014B0  502C               	movf	___ftadd@f1,w,c
  6081  0014B2  262F               	addwf	___ftadd@f2,f,c
  6082  0014B4  502D               	movf	___ftadd@f1+1,w,c
  6083  0014B6  2230               	addwfc	___ftadd@f2+1,f,c
  6084  0014B8  502E               	movf	___ftadd@f1+2,w,c
  6085  0014BA  2231               	addwfc	___ftadd@f2+2,f,c
  6086  0014BC  AE31               	btfss	___ftadd@f2+2,7,c
  6087  0014BE  D00E               	goto	l2895
  6088  0014C0  0EFF               	movlw	255
  6089  0014C2  1A2F               	xorwf	___ftadd@f2,f,c
  6090  0014C4  0EFF               	movlw	255
  6091  0014C6  1A30               	xorwf	___ftadd@f2+1,f,c
  6092  0014C8  0EFF               	movlw	255
  6093  0014CA  1A31               	xorwf	___ftadd@f2+2,f,c
  6094  0014CC  0E01               	movlw	1
  6095  0014CE  262F               	addwf	___ftadd@f2,f,c
  6096  0014D0  0E00               	movlw	0
  6097  0014D2  2230               	addwfc	___ftadd@f2+1,f,c
  6098  0014D4  0E00               	movlw	0
  6099  0014D6  2231               	addwfc	___ftadd@f2+2,f,c
  6100  0014D8  0E01               	movlw	1
  6101  0014DA  6E35               	movwf	___ftadd@sign,c
  6102  0014DC                     l2895:
  6103  0014DC  C02F  F011         	movff	___ftadd@f2,___ftpack@arg
  6104  0014E0  C030  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
  6105  0014E4  C031  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
  6106  0014E8  C037  F014         	movff	___ftadd@exp1,___ftpack@exp
  6107  0014EC  C035  F015         	movff	___ftadd@sign,___ftpack@sign
  6108  0014F0  EC9F  F012         	call	___ftpack	;wreg free
  6109  0014F4  C011  F02C         	movff	?___ftpack,?___ftadd
  6110  0014F8  C012  F02D         	movff	?___ftpack+1,?___ftadd+1
  6111  0014FC  C013  F02E         	movff	?___ftpack+2,?___ftadd+2
  6112  001500  0012               	return	
  6113  001502                     __end_of___ftadd:
  6114                           	opt stack 0
  6115                           tblptru	equ	0xFF8
  6116                           tblptrh	equ	0xFF7
  6117                           tblptrl	equ	0xFF6
  6118                           tablat	equ	0xFF5
  6119                           prodh	equ	0xFF4
  6120                           prodl	equ	0xFF3
  6121                           intcon	equ	0xFF2
  6122                           intcon2	equ	0xFF1
  6123                           intcon3	equ	0xFF0
  6124                           postinc0	equ	0xFEE
  6125                           wreg	equ	0xFE8
  6126                           postdec1	equ	0xFE5
  6127                           fsr1l	equ	0xFE1
  6128                           indf2	equ	0xFDF
  6129                           postinc2	equ	0xFDE
  6130                           postdec2	equ	0xFDD
  6131                           fsr2h	equ	0xFDA
  6132                           fsr2l	equ	0xFD9
  6133                           status	equ	0xFD8
  6134                           
  6135 ;; *************** function ___ftneg *****************
  6136 ;; Defined at:
  6137 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;  f1              3   16[COMRAM] float 
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;		None
  6142 ;; Return value:  Size  Location     Type
  6143 ;;                  3   16[COMRAM] float 
  6144 ;; Registers used:
  6145 ;;		wreg, status,2, status,0
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6151 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;Total ram usage:        3 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; Hardware stack levels required when called:    1
  6158 ;; This function calls:
  6159 ;;		Nothing
  6160 ;; This function is called by:
  6161 ;;		_pow
  6162 ;;		_exp
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           	psect	text20
  6167  002D9A                     __ptext20:
  6168                           	opt stack 0
  6169  002D9A                     ___ftneg:
  6170                           	opt stack 24
  6171                           
  6172                           ;incstack = 0
  6173  002D9A  5011               	movf	___ftneg@f1,w,c
  6174  002D9C  1012               	iorwf	___ftneg@f1+1,w,c
  6175  002D9E  1013               	iorwf	___ftneg@f1+2,w,c
  6176  002DA0  B4D8               	btfsc	status,2,c
  6177  002DA2  D006               	goto	l758
  6178  002DA4  0E00               	movlw	0
  6179  002DA6  1A11               	xorwf	___ftneg@f1,f,c
  6180  002DA8  0E00               	movlw	0
  6181  002DAA  1A12               	xorwf	___ftneg@f1+1,f,c
  6182  002DAC  0E80               	movlw	128
  6183  002DAE  1A13               	xorwf	___ftneg@f1+2,f,c
  6184  002DB0                     l758:
  6185  002DB0  C011  F011         	movff	___ftneg@f1,?___ftneg
  6186  002DB4  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
  6187  002DB8  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
  6188  002DBC  0012               	return		;funcret
  6189  002DBE                     __end_of___ftneg:
  6190                           	opt stack 0
  6191                           tblptru	equ	0xFF8
  6192                           tblptrh	equ	0xFF7
  6193                           tblptrl	equ	0xFF6
  6194                           tablat	equ	0xFF5
  6195                           prodh	equ	0xFF4
  6196                           prodl	equ	0xFF3
  6197                           intcon	equ	0xFF2
  6198                           intcon2	equ	0xFF1
  6199                           intcon3	equ	0xFF0
  6200                           postinc0	equ	0xFEE
  6201                           wreg	equ	0xFE8
  6202                           postdec1	equ	0xFE5
  6203                           fsr1l	equ	0xFE1
  6204                           indf2	equ	0xFDF
  6205                           postinc2	equ	0xFDE
  6206                           postdec2	equ	0xFDD
  6207                           fsr2h	equ	0xFDA
  6208                           fsr2l	equ	0xFD9
  6209                           status	equ	0xFD8
  6210                           
  6211 ;; *************** function ___ftdiv *****************
  6212 ;; Defined at:
  6213 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;  f1              3   28[COMRAM] float 
  6216 ;;  f2              3   31[COMRAM] float 
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;  f3              3   38[COMRAM] float 
  6219 ;;  sign            1   42[COMRAM] unsigned char 
  6220 ;;  exp             1   41[COMRAM] unsigned char 
  6221 ;;  cntr            1   37[COMRAM] unsigned char 
  6222 ;; Return value:  Size  Location     Type
  6223 ;;                  3   28[COMRAM] float 
  6224 ;; Registers used:
  6225 ;;		wreg, status,2, status,0, cstack
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6231 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6232 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6233 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6234 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6235 ;;Total ram usage:       15 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; Hardware stack levels required when called:    2
  6238 ;; This function calls:
  6239 ;;		___ftpack
  6240 ;; This function is called by:
  6241 ;;		_init_operation
  6242 ;;		_exp
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           	psect	text21
  6247  0021E6                     __ptext21:
  6248                           	opt stack 0
  6249  0021E6                     ___ftdiv:
  6250                           	opt stack 23
  6251                           
  6252                           ;incstack = 0
  6253  0021E6  C01F  F023         	movff	___ftdiv@f1+2,??___ftdiv
  6254  0021EA  6A24               	clrf	(??___ftdiv+1)& (0+255),c
  6255  0021EC  6A25               	clrf	(??___ftdiv+2)& (0+255),c
  6256  0021EE  341E               	rlcf	___ftdiv@f1+1,w,c
  6257  0021F0  3623               	rlcf	??___ftdiv& (0+255),f,c
  6258  0021F2  E301               	bnc	u2451
  6259  0021F4  8024               	bsf	(??___ftdiv+1)& (0+255),0,c
  6260  0021F6                     u2451:
  6261  0021F6  5023               	movf	??___ftdiv,w,c
  6262  0021F8  6E2A               	movwf	___ftdiv@exp,c
  6263  0021FA  502A               	movf	___ftdiv@exp,w,c
  6264  0021FC  A4D8               	btfss	status,2,c
  6265  0021FE  D007               	goto	l3037
  6266  002200  0E00               	movlw	0
  6267  002202  6E1D               	movwf	?___ftdiv,c
  6268  002204  0E00               	movlw	0
  6269  002206  6E1E               	movwf	?___ftdiv+1,c
  6270  002208  0E00               	movlw	0
  6271  00220A  6E1F               	movwf	?___ftdiv+2,c
  6272  00220C  0012               	return	
  6273  00220E                     l3037:
  6274  00220E  C022  F023         	movff	___ftdiv@f2+2,??___ftdiv
  6275  002212  6A24               	clrf	(??___ftdiv+1)& (0+255),c
  6276  002214  6A25               	clrf	(??___ftdiv+2)& (0+255),c
  6277  002216  3421               	rlcf	___ftdiv@f2+1,w,c
  6278  002218  3623               	rlcf	??___ftdiv& (0+255),f,c
  6279  00221A  E301               	bnc	u2471
  6280  00221C  8024               	bsf	(??___ftdiv+1)& (0+255),0,c
  6281  00221E                     u2471:
  6282  00221E  5023               	movf	??___ftdiv,w,c
  6283  002220  6E2B               	movwf	___ftdiv@sign,c
  6284  002222  502B               	movf	___ftdiv@sign,w,c
  6285  002224  A4D8               	btfss	status,2,c
  6286  002226  D007               	goto	l3043
  6287  002228  0E00               	movlw	0
  6288  00222A  6E1D               	movwf	?___ftdiv,c
  6289  00222C  0E00               	movlw	0
  6290  00222E  6E1E               	movwf	?___ftdiv+1,c
  6291  002230  0E00               	movlw	0
  6292  002232  6E1F               	movwf	?___ftdiv+2,c
  6293  002234  0012               	return	
  6294  002236                     l3043:
  6295  002236  0E00               	movlw	0
  6296  002238  6E27               	movwf	___ftdiv@f3,c
  6297  00223A  0E00               	movlw	0
  6298  00223C  6E28               	movwf	___ftdiv@f3+1,c
  6299  00223E  0E00               	movlw	0
  6300  002240  6E29               	movwf	___ftdiv@f3+2,c
  6301  002242  502B               	movf	___ftdiv@sign,w,c
  6302  002244  0F89               	addlw	137
  6303  002246  5E2A               	subwf	___ftdiv@exp,f,c
  6304  002248  C01F  F02B         	movff	___ftdiv@f1+2,___ftdiv@sign
  6305  00224C  5022               	movf	___ftdiv@f2+2,w,c
  6306  00224E  1A2B               	xorwf	___ftdiv@sign,f,c
  6307  002250  0E80               	movlw	128
  6308  002252  162B               	andwf	___ftdiv@sign,f,c
  6309  002254  8E1E               	bsf	___ftdiv@f1+1,7,c
  6310  002256  0EFF               	movlw	255
  6311  002258  161D               	andwf	___ftdiv@f1,f,c
  6312  00225A  0EFF               	movlw	255
  6313  00225C  161E               	andwf	___ftdiv@f1+1,f,c
  6314  00225E  0E00               	movlw	0
  6315  002260  161F               	andwf	___ftdiv@f1+2,f,c
  6316  002262  8E21               	bsf	___ftdiv@f2+1,7,c
  6317  002264  0EFF               	movlw	255
  6318  002266  1620               	andwf	___ftdiv@f2,f,c
  6319  002268  0EFF               	movlw	255
  6320  00226A  1621               	andwf	___ftdiv@f2+1,f,c
  6321  00226C  0E00               	movlw	0
  6322  00226E  1622               	andwf	___ftdiv@f2+2,f,c
  6323  002270  0E18               	movlw	24
  6324  002272  6E26               	movwf	___ftdiv@cntr,c
  6325  002274                     l3063:
  6326  002274  90D8               	bcf	status,0,c
  6327  002276  3627               	rlcf	___ftdiv@f3,f,c
  6328  002278  3628               	rlcf	___ftdiv@f3+1,f,c
  6329  00227A  3629               	rlcf	___ftdiv@f3+2,f,c
  6330  00227C  5020               	movf	___ftdiv@f2,w,c
  6331  00227E  5C1D               	subwf	___ftdiv@f1,w,c
  6332  002280  5021               	movf	___ftdiv@f2+1,w,c
  6333  002282  581E               	subwfb	___ftdiv@f1+1,w,c
  6334  002284  5022               	movf	___ftdiv@f2+2,w,c
  6335  002286  581F               	subwfb	___ftdiv@f1+2,w,c
  6336  002288  A0D8               	btfss	status,0,c
  6337  00228A  D007               	goto	l736
  6338  00228C  5020               	movf	___ftdiv@f2,w,c
  6339  00228E  5E1D               	subwf	___ftdiv@f1,f,c
  6340  002290  5021               	movf	___ftdiv@f2+1,w,c
  6341  002292  5A1E               	subwfb	___ftdiv@f1+1,f,c
  6342  002294  5022               	movf	___ftdiv@f2+2,w,c
  6343  002296  5A1F               	subwfb	___ftdiv@f1+2,f,c
  6344  002298  8027               	bsf	___ftdiv@f3,0,c
  6345  00229A                     l736:
  6346  00229A  90D8               	bcf	status,0,c
  6347  00229C  361D               	rlcf	___ftdiv@f1,f,c
  6348  00229E  361E               	rlcf	___ftdiv@f1+1,f,c
  6349  0022A0  361F               	rlcf	___ftdiv@f1+2,f,c
  6350  0022A2  2E26               	decfsz	___ftdiv@cntr,f,c
  6351  0022A4  D7E7               	goto	l3063
  6352  0022A6  C027  F011         	movff	___ftdiv@f3,___ftpack@arg
  6353  0022AA  C028  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6354  0022AE  C029  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6355  0022B2  C02A  F014         	movff	___ftdiv@exp,___ftpack@exp
  6356  0022B6  C02B  F015         	movff	___ftdiv@sign,___ftpack@sign
  6357  0022BA  EC9F  F012         	call	___ftpack	;wreg free
  6358  0022BE  C011  F01D         	movff	?___ftpack,?___ftdiv
  6359  0022C2  C012  F01E         	movff	?___ftpack+1,?___ftdiv+1
  6360  0022C6  C013  F01F         	movff	?___ftpack+2,?___ftdiv+2
  6361  0022CA  0012               	return	
  6362  0022CC                     __end_of___ftdiv:
  6363                           	opt stack 0
  6364                           tblptru	equ	0xFF8
  6365                           tblptrh	equ	0xFF7
  6366                           tblptrl	equ	0xFF6
  6367                           tablat	equ	0xFF5
  6368                           prodh	equ	0xFF4
  6369                           prodl	equ	0xFF3
  6370                           intcon	equ	0xFF2
  6371                           intcon2	equ	0xFF1
  6372                           intcon3	equ	0xFF0
  6373                           postinc0	equ	0xFEE
  6374                           wreg	equ	0xFE8
  6375                           postdec1	equ	0xFE5
  6376                           fsr1l	equ	0xFE1
  6377                           indf2	equ	0xFDF
  6378                           postinc2	equ	0xFDE
  6379                           postdec2	equ	0xFDD
  6380                           fsr2h	equ	0xFDA
  6381                           fsr2l	equ	0xFD9
  6382                           status	equ	0xFD8
  6383                           
  6384 ;; *************** function ___awtoft *****************
  6385 ;; Defined at:
  6386 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;  c               2   24[COMRAM] int 
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;  sign            1   27[COMRAM] unsigned char 
  6391 ;; Return value:  Size  Location     Type
  6392 ;;                  3   24[COMRAM] float 
  6393 ;; Registers used:
  6394 ;;		wreg, status,2, status,0, cstack
  6395 ;; Tracked objects:
  6396 ;;		On entry : 0/0
  6397 ;;		On exit  : 0/0
  6398 ;;		Unchanged: 0/0
  6399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6400 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6401 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6403 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6404 ;;Total ram usage:        4 bytes
  6405 ;; Hardware stack levels used:    1
  6406 ;; Hardware stack levels required when called:    2
  6407 ;; This function calls:
  6408 ;;		___ftpack
  6409 ;; This function is called by:
  6410 ;;		_dec_to_hex
  6411 ;;		_init_operation
  6412 ;;		_exp
  6413 ;;		_log
  6414 ;;		_hex_to_dec
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           	psect	text22
  6419  002D16                     __ptext22:
  6420                           	opt stack 0
  6421  002D16                     ___awtoft:
  6422                           	opt stack 23
  6423                           
  6424                           ;incstack = 0
  6425  002D16  0E00               	movlw	0
  6426  002D18  6E1C               	movwf	___awtoft@sign,c
  6427  002D1A  AE1A               	btfss	___awtoft@c+1,7,c
  6428  002D1C  D006               	goto	l3093
  6429  002D1E  6C19               	negf	___awtoft@c,c
  6430  002D20  1E1A               	comf	___awtoft@c+1,f,c
  6431  002D22  B0D8               	btfsc	status,0,c
  6432  002D24  2A1A               	incf	___awtoft@c+1,f,c
  6433  002D26  0E01               	movlw	1
  6434  002D28  6E1C               	movwf	___awtoft@sign,c
  6435  002D2A                     l3093:
  6436  002D2A  C019  F011         	movff	___awtoft@c,___ftpack@arg
  6437  002D2E  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  6438  002D32  6A13               	clrf	___ftpack@arg+2,c
  6439  002D34  0E8E               	movlw	142
  6440  002D36  6E14               	movwf	___ftpack@exp,c
  6441  002D38  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  6442  002D3C  EC9F  F012         	call	___ftpack	;wreg free
  6443  002D40  C011  F019         	movff	?___ftpack,?___awtoft
  6444  002D44  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  6445  002D48  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  6446  002D4C  0012               	return	
  6447  002D4E                     __end_of___awtoft:
  6448                           	opt stack 0
  6449                           tblptru	equ	0xFF8
  6450                           tblptrh	equ	0xFF7
  6451                           tblptrl	equ	0xFF6
  6452                           tablat	equ	0xFF5
  6453                           prodh	equ	0xFF4
  6454                           prodl	equ	0xFF3
  6455                           intcon	equ	0xFF2
  6456                           intcon2	equ	0xFF1
  6457                           intcon3	equ	0xFF0
  6458                           postinc0	equ	0xFEE
  6459                           wreg	equ	0xFE8
  6460                           postdec1	equ	0xFE5
  6461                           fsr1l	equ	0xFE1
  6462                           indf2	equ	0xFDF
  6463                           postinc2	equ	0xFDE
  6464                           postdec2	equ	0xFDD
  6465                           fsr2h	equ	0xFDA
  6466                           fsr2l	equ	0xFD9
  6467                           status	equ	0xFD8
  6468                           
  6469 ;; *************** function ___lltoft *****************
  6470 ;; Defined at:
  6471 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;  c               4   24[COMRAM] unsigned long 
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;  exp             1   32[COMRAM] unsigned char 
  6476 ;; Return value:  Size  Location     Type
  6477 ;;                  3   24[COMRAM] float 
  6478 ;; Registers used:
  6479 ;;		wreg, status,2, status,0, cstack
  6480 ;; Tracked objects:
  6481 ;;		On entry : 0/0
  6482 ;;		On exit  : 0/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6485 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6486 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6487 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6488 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;Total ram usage:        9 bytes
  6490 ;; Hardware stack levels used:    1
  6491 ;; Hardware stack levels required when called:    2
  6492 ;; This function calls:
  6493 ;;		___ftpack
  6494 ;; This function is called by:
  6495 ;;		_pow
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           	psect	text23
  6500  002A76                     __ptext23:
  6501                           	opt stack 0
  6502  002A76                     ___lltoft:
  6503                           	opt stack 24
  6504                           
  6505                           ;incstack = 0
  6506  002A76  0E8E               	movlw	142
  6507  002A78  6E21               	movwf	___lltoft@exp,c
  6508  002A7A  D006               	goto	l3171
  6509  002A7C                     l3169:
  6510  002A7C  90D8               	bcf	status,0,c
  6511  002A7E  321C               	rrcf	___lltoft@c+3,f,c
  6512  002A80  321B               	rrcf	___lltoft@c+2,f,c
  6513  002A82  321A               	rrcf	___lltoft@c+1,f,c
  6514  002A84  3219               	rrcf	___lltoft@c,f,c
  6515  002A86  2A21               	incf	___lltoft@exp,f,c
  6516  002A88                     l3171:
  6517  002A88  0E00               	movlw	0
  6518  002A8A  1419               	andwf	___lltoft@c,w,c
  6519  002A8C  6E1D               	movwf	??___lltoft& (0+255),c
  6520  002A8E  0E00               	movlw	0
  6521  002A90  141A               	andwf	___lltoft@c+1,w,c
  6522  002A92  6E1E               	movwf	(??___lltoft+1)& (0+255),c
  6523  002A94  0E00               	movlw	0
  6524  002A96  141B               	andwf	___lltoft@c+2,w,c
  6525  002A98  6E1F               	movwf	(??___lltoft+2)& (0+255),c
  6526  002A9A  0EFF               	movlw	255
  6527  002A9C  141C               	andwf	___lltoft@c+3,w,c
  6528  002A9E  6E20               	movwf	(??___lltoft+3)& (0+255),c
  6529  002AA0  501D               	movf	??___lltoft,w,c
  6530  002AA2  101E               	iorwf	??___lltoft+1,w,c
  6531  002AA4  101F               	iorwf	??___lltoft+2,w,c
  6532  002AA6  1020               	iorwf	??___lltoft+3,w,c
  6533  002AA8  A4D8               	btfss	status,2,c
  6534  002AAA  D7E8               	goto	l3169
  6535  002AAC  C019  F011         	movff	___lltoft@c,___ftpack@arg
  6536  002AB0  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
  6537  002AB4  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
  6538  002AB8  C021  F014         	movff	___lltoft@exp,___ftpack@exp
  6539  002ABC  0E00               	movlw	0
  6540  002ABE  6E15               	movwf	___ftpack@sign,c
  6541  002AC0  EC9F  F012         	call	___ftpack	;wreg free
  6542  002AC4  C011  F019         	movff	?___ftpack,?___lltoft
  6543  002AC8  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
  6544  002ACC  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
  6545  002AD0  0012               	return	
  6546  002AD2                     __end_of___lltoft:
  6547                           	opt stack 0
  6548                           tblptru	equ	0xFF8
  6549                           tblptrh	equ	0xFF7
  6550                           tblptrl	equ	0xFF6
  6551                           tablat	equ	0xFF5
  6552                           prodh	equ	0xFF4
  6553                           prodl	equ	0xFF3
  6554                           intcon	equ	0xFF2
  6555                           intcon2	equ	0xFF1
  6556                           intcon3	equ	0xFF0
  6557                           postinc0	equ	0xFEE
  6558                           wreg	equ	0xFE8
  6559                           postdec1	equ	0xFE5
  6560                           fsr1l	equ	0xFE1
  6561                           indf2	equ	0xFDF
  6562                           postinc2	equ	0xFDE
  6563                           postdec2	equ	0xFDD
  6564                           fsr2h	equ	0xFDA
  6565                           fsr2l	equ	0xFD9
  6566                           status	equ	0xFD8
  6567                           
  6568 ;; *************** function ___ftpack *****************
  6569 ;; Defined at:
  6570 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  arg             3   16[COMRAM] unsigned um
  6573 ;;  exp             1   19[COMRAM] unsigned char 
  6574 ;;  sign            1   20[COMRAM] unsigned char 
  6575 ;; Auto vars:     Size  Location     Type
  6576 ;;		None
  6577 ;; Return value:  Size  Location     Type
  6578 ;;                  3   16[COMRAM] float 
  6579 ;; Registers used:
  6580 ;;		wreg, status,2, status,0
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6586 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6588 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6590 ;;Total ram usage:        8 bytes
  6591 ;; Hardware stack levels used:    1
  6592 ;; Hardware stack levels required when called:    1
  6593 ;; This function calls:
  6594 ;;		Nothing
  6595 ;; This function is called by:
  6596 ;;		___altoft
  6597 ;;		___awtoft
  6598 ;;		___ftadd
  6599 ;;		___ftdiv
  6600 ;;		___ftmul
  6601 ;;		___lltoft
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           	psect	text24
  6606  00253E                     __ptext24:
  6607                           	opt stack 0
  6608  00253E                     ___ftpack:
  6609                           	opt stack 22
  6610                           
  6611                           ;incstack = 0
  6612  00253E  5014               	movf	___ftpack@exp,w,c
  6613  002540  B4D8               	btfsc	status,2,c
  6614  002542  D005               	goto	l2775
  6615  002544  5011               	movf	___ftpack@arg,w,c
  6616  002546  1012               	iorwf	___ftpack@arg+1,w,c
  6617  002548  1013               	iorwf	___ftpack@arg+2,w,c
  6618  00254A  A4D8               	btfss	status,2,c
  6619  00254C  D00C               	goto	l2781
  6620  00254E                     l2775:
  6621  00254E  0E00               	movlw	0
  6622  002550  6E11               	movwf	?___ftpack,c
  6623  002552  0E00               	movlw	0
  6624  002554  6E12               	movwf	?___ftpack+1,c
  6625  002556  0E00               	movlw	0
  6626  002558  6E13               	movwf	?___ftpack+2,c
  6627  00255A  0012               	return	
  6628  00255C                     l2779:
  6629  00255C  2A14               	incf	___ftpack@exp,f,c
  6630  00255E  90D8               	bcf	status,0,c
  6631  002560  3213               	rrcf	___ftpack@arg+2,f,c
  6632  002562  3212               	rrcf	___ftpack@arg+1,f,c
  6633  002564  3211               	rrcf	___ftpack@arg,f,c
  6634  002566                     l2781:
  6635  002566  0E00               	movlw	0
  6636  002568  1411               	andwf	___ftpack@arg,w,c
  6637  00256A  6E16               	movwf	??___ftpack& (0+255),c
  6638  00256C  0E00               	movlw	0
  6639  00256E  1412               	andwf	___ftpack@arg+1,w,c
  6640  002570  6E17               	movwf	(??___ftpack+1)& (0+255),c
  6641  002572  0EFE               	movlw	254
  6642  002574  1413               	andwf	___ftpack@arg+2,w,c
  6643  002576  6E18               	movwf	(??___ftpack+2)& (0+255),c
  6644  002578  5016               	movf	??___ftpack,w,c
  6645  00257A  1017               	iorwf	??___ftpack+1,w,c
  6646  00257C  1018               	iorwf	??___ftpack+2,w,c
  6647  00257E  B4D8               	btfsc	status,2,c
  6648  002580  D00C               	goto	l2787
  6649  002582  D7EC               	goto	l2779
  6650  002584                     l2783:
  6651  002584  2A14               	incf	___ftpack@exp,f,c
  6652  002586  0E01               	movlw	1
  6653  002588  2611               	addwf	___ftpack@arg,f,c
  6654  00258A  0E00               	movlw	0
  6655  00258C  2212               	addwfc	___ftpack@arg+1,f,c
  6656  00258E  0E00               	movlw	0
  6657  002590  2213               	addwfc	___ftpack@arg+2,f,c
  6658  002592  90D8               	bcf	status,0,c
  6659  002594  3213               	rrcf	___ftpack@arg+2,f,c
  6660  002596  3212               	rrcf	___ftpack@arg+1,f,c
  6661  002598  3211               	rrcf	___ftpack@arg,f,c
  6662  00259A                     l2787:
  6663  00259A  0E00               	movlw	0
  6664  00259C  1411               	andwf	___ftpack@arg,w,c
  6665  00259E  6E16               	movwf	??___ftpack& (0+255),c
  6666  0025A0  0E00               	movlw	0
  6667  0025A2  1412               	andwf	___ftpack@arg+1,w,c
  6668  0025A4  6E17               	movwf	(??___ftpack+1)& (0+255),c
  6669  0025A6  0EFF               	movlw	255
  6670  0025A8  1413               	andwf	___ftpack@arg+2,w,c
  6671  0025AA  6E18               	movwf	(??___ftpack+2)& (0+255),c
  6672  0025AC  5016               	movf	??___ftpack,w,c
  6673  0025AE  1017               	iorwf	??___ftpack+1,w,c
  6674  0025B0  1018               	iorwf	??___ftpack+2,w,c
  6675  0025B2  B4D8               	btfsc	status,2,c
  6676  0025B4  D006               	goto	l2791
  6677  0025B6  D7E6               	goto	l2783
  6678  0025B8                     l2789:
  6679  0025B8  0614               	decf	___ftpack@exp,f,c
  6680  0025BA  90D8               	bcf	status,0,c
  6681  0025BC  3611               	rlcf	___ftpack@arg,f,c
  6682  0025BE  3612               	rlcf	___ftpack@arg+1,f,c
  6683  0025C0  3613               	rlcf	___ftpack@arg+2,f,c
  6684  0025C2                     l2791:
  6685  0025C2  BE12               	btfsc	___ftpack@arg+1,7,c
  6686  0025C4  D003               	goto	l678
  6687  0025C6  0E02               	movlw	2
  6688  0025C8  6014               	cpfslt	___ftpack@exp,c
  6689  0025CA  D7F6               	goto	l2789
  6690  0025CC                     l678:
  6691  0025CC  A014               	btfss	___ftpack@exp,0,c
  6692  0025CE  9E12               	bcf	___ftpack@arg+1,7,c
  6693  0025D0  90D8               	bcf	status,0,c
  6694  0025D2  3214               	rrcf	___ftpack@exp,f,c
  6695  0025D4  5014               	movf	___ftpack@exp,w,c
  6696  0025D6  1213               	iorwf	___ftpack@arg+2,f,c
  6697  0025D8  5015               	movf	___ftpack@sign,w,c
  6698  0025DA  A4D8               	btfss	status,2,c
  6699  0025DC  8E13               	bsf	___ftpack@arg+2,7,c
  6700  0025DE  C011  F011         	movff	___ftpack@arg,?___ftpack
  6701  0025E2  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  6702  0025E6  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  6703  0025EA  0012               	return	
  6704  0025EC                     __end_of___ftpack:
  6705                           	opt stack 0
  6706                           tblptru	equ	0xFF8
  6707                           tblptrh	equ	0xFF7
  6708                           tblptrl	equ	0xFF6
  6709                           tablat	equ	0xFF5
  6710                           prodh	equ	0xFF4
  6711                           prodl	equ	0xFF3
  6712                           intcon	equ	0xFF2
  6713                           intcon2	equ	0xFF1
  6714                           intcon3	equ	0xFF0
  6715                           postinc0	equ	0xFEE
  6716                           wreg	equ	0xFE8
  6717                           postdec1	equ	0xFE5
  6718                           fsr1l	equ	0xFE1
  6719                           indf2	equ	0xFDF
  6720                           postinc2	equ	0xFDE
  6721                           postdec2	equ	0xFDD
  6722                           fsr2h	equ	0xFDA
  6723                           fsr2l	equ	0xFD9
  6724                           status	equ	0xFD8
  6725                           
  6726 ;; *************** function ___awdiv *****************
  6727 ;; Defined at:
  6728 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6729 ;; Parameters:    Size  Location     Type
  6730 ;;  dividend        2   16[COMRAM] int 
  6731 ;;  divisor         2   18[COMRAM] int 
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;  quotient        2   22[COMRAM] int 
  6734 ;;  sign            1   21[COMRAM] unsigned char 
  6735 ;;  counter         1   20[COMRAM] unsigned char 
  6736 ;; Return value:  Size  Location     Type
  6737 ;;                  2   16[COMRAM] int 
  6738 ;; Registers used:
  6739 ;;		wreg, status,2, status,0
  6740 ;; Tracked objects:
  6741 ;;		On entry : 0/0
  6742 ;;		On exit  : 0/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6745 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6746 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6748 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;Total ram usage:        8 bytes
  6750 ;; Hardware stack levels used:    1
  6751 ;; Hardware stack levels required when called:    1
  6752 ;; This function calls:
  6753 ;;		Nothing
  6754 ;; This function is called by:
  6755 ;;		_dec_to_hex
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           	psect	text25
  6760  00270C                     __ptext25:
  6761                           	opt stack 0
  6762  00270C                     ___awdiv:
  6763                           	opt stack 26
  6764                           
  6765                           ;incstack = 0
  6766  00270C  0E00               	movlw	0
  6767  00270E  6E16               	movwf	___awdiv@sign,c
  6768  002710  AE14               	btfss	___awdiv@divisor+1,7,c
  6769  002712  D006               	goto	l3313
  6770  002714  6C13               	negf	___awdiv@divisor,c
  6771  002716  1E14               	comf	___awdiv@divisor+1,f,c
  6772  002718  B0D8               	btfsc	status,0,c
  6773  00271A  2A14               	incf	___awdiv@divisor+1,f,c
  6774  00271C  0E01               	movlw	1
  6775  00271E  6E16               	movwf	___awdiv@sign,c
  6776  002720                     l3313:
  6777  002720  AE12               	btfss	___awdiv@dividend+1,7,c
  6778  002722  D006               	goto	l3319
  6779  002724  6C11               	negf	___awdiv@dividend,c
  6780  002726  1E12               	comf	___awdiv@dividend+1,f,c
  6781  002728  B0D8               	btfsc	status,0,c
  6782  00272A  2A12               	incf	___awdiv@dividend+1,f,c
  6783  00272C  0E01               	movlw	1
  6784  00272E  1A16               	xorwf	___awdiv@sign,f,c
  6785  002730                     l3319:
  6786  002730  0E00               	movlw	0
  6787  002732  6E18               	movwf	___awdiv@quotient+1,c
  6788  002734  0E00               	movlw	0
  6789  002736  6E17               	movwf	___awdiv@quotient,c
  6790  002738  5013               	movf	___awdiv@divisor,w,c
  6791  00273A  1014               	iorwf	___awdiv@divisor+1,w,c
  6792  00273C  B4D8               	btfsc	status,2,c
  6793  00273E  D01C               	goto	l3341
  6794  002740  0E01               	movlw	1
  6795  002742  6E15               	movwf	___awdiv@counter,c
  6796  002744  D004               	goto	l3327
  6797  002746                     l3325:
  6798  002746  90D8               	bcf	status,0,c
  6799  002748  3613               	rlcf	___awdiv@divisor,f,c
  6800  00274A  3614               	rlcf	___awdiv@divisor+1,f,c
  6801  00274C  2A15               	incf	___awdiv@counter,f,c
  6802  00274E                     l3327:
  6803  00274E  AE14               	btfss	___awdiv@divisor+1,7,c
  6804  002750  D7FA               	goto	l3325
  6805  002752                     l3329:
  6806  002752  90D8               	bcf	status,0,c
  6807  002754  3617               	rlcf	___awdiv@quotient,f,c
  6808  002756  3618               	rlcf	___awdiv@quotient+1,f,c
  6809  002758  5013               	movf	___awdiv@divisor,w,c
  6810  00275A  5C11               	subwf	___awdiv@dividend,w,c
  6811  00275C  5014               	movf	___awdiv@divisor+1,w,c
  6812  00275E  5812               	subwfb	___awdiv@dividend+1,w,c
  6813  002760  A0D8               	btfss	status,0,c
  6814  002762  D005               	goto	l3337
  6815  002764  5013               	movf	___awdiv@divisor,w,c
  6816  002766  5E11               	subwf	___awdiv@dividend,f,c
  6817  002768  5014               	movf	___awdiv@divisor+1,w,c
  6818  00276A  5A12               	subwfb	___awdiv@dividend+1,f,c
  6819  00276C  8017               	bsf	___awdiv@quotient,0,c
  6820  00276E                     l3337:
  6821  00276E  90D8               	bcf	status,0,c
  6822  002770  3214               	rrcf	___awdiv@divisor+1,f,c
  6823  002772  3213               	rrcf	___awdiv@divisor,f,c
  6824  002774  2E15               	decfsz	___awdiv@counter,f,c
  6825  002776  D7ED               	goto	l3329
  6826  002778                     l3341:
  6827  002778  5016               	movf	___awdiv@sign,w,c
  6828  00277A  B4D8               	btfsc	status,2,c
  6829  00277C  D004               	goto	l3345
  6830  00277E  6C17               	negf	___awdiv@quotient,c
  6831  002780  1E18               	comf	___awdiv@quotient+1,f,c
  6832  002782  B0D8               	btfsc	status,0,c
  6833  002784  2A18               	incf	___awdiv@quotient+1,f,c
  6834  002786                     l3345:
  6835  002786  C017  F011         	movff	___awdiv@quotient,?___awdiv
  6836  00278A  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  6837  00278E  0012               	return	
  6838  002790                     __end_of___awdiv:
  6839                           	opt stack 0
  6840                           tblptru	equ	0xFF8
  6841                           tblptrh	equ	0xFF7
  6842                           tblptrl	equ	0xFF6
  6843                           tablat	equ	0xFF5
  6844                           prodh	equ	0xFF4
  6845                           prodl	equ	0xFF3
  6846                           intcon	equ	0xFF2
  6847                           intcon2	equ	0xFF1
  6848                           intcon3	equ	0xFF0
  6849                           postinc0	equ	0xFEE
  6850                           wreg	equ	0xFE8
  6851                           postdec1	equ	0xFE5
  6852                           fsr1l	equ	0xFE1
  6853                           indf2	equ	0xFDF
  6854                           postinc2	equ	0xFDE
  6855                           postdec2	equ	0xFDD
  6856                           fsr2h	equ	0xFDA
  6857                           fsr2l	equ	0xFD9
  6858                           status	equ	0xFD8
  6859                           
  6860 ;; *************** function _stepper_state *****************
  6861 ;; Defined at:
  6862 ;;		line 520 in file "main.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;  step_state      2   21[COMRAM] PTR unsigned char 
  6865 ;;		 -> main@step_state(2), 
  6866 ;; Auto vars:     Size  Location     Type
  6867 ;;  next_state      2   25[COMRAM] int 
  6868 ;; Return value:  Size  Location     Type
  6869 ;;                  1    wreg      void 
  6870 ;; Registers used:
  6871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6872 ;; Tracked objects:
  6873 ;;		On entry : 0/0
  6874 ;;		On exit  : 0/0
  6875 ;;		Unchanged: 0/0
  6876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6877 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6881 ;;Total ram usage:        6 bytes
  6882 ;; Hardware stack levels used:    1
  6883 ;; Hardware stack levels required when called:    2
  6884 ;; This function calls:
  6885 ;;		_stepper
  6886 ;;		_stepper_rev
  6887 ;; This function is called by:
  6888 ;;		_init_operation
  6889 ;;		_operation_end
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           	psect	text26
  6894  001184                     __ptext26:
  6895                           	opt stack 0
  6896  001184                     _stepper_state:
  6897                           	opt stack 27
  6898                           
  6899                           ;main.c: 521: int next_state = step_state[1];
  6900                           
  6901                           ;incstack = 0
  6902  001184  EE20 F001          	lfsr	2,1
  6903  001188  5016               	movf	stepper_state@step_state,w,c
  6904  00118A  26D9               	addwf	fsr2l,f,c
  6905  00118C  5017               	movf	stepper_state@step_state+1,w,c
  6906  00118E  22DA               	addwfc	fsr2h,f,c
  6907  001190  50DF               	movf	indf2,w,c
  6908  001192  6E18               	movwf	??_stepper_state& (0+255),c
  6909  001194  5018               	movf	??_stepper_state,w,c
  6910  001196  6E1A               	movwf	stepper_state@next_state,c
  6911  001198  6A1B               	clrf	stepper_state@next_state+1,c
  6912                           
  6913                           ;main.c: 522: switch(next_state){
  6914  00119A  D0C7               	goto	l3785
  6915  00119C                     l3727:
  6916                           
  6917                           ;main.c: 524: if (step_state[0] == 2) stepper_rev(85);
  6918  00119C  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6919  0011A0  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6920  0011A4  0E02               	movlw	2
  6921  0011A6  18DE               	xorwf	postinc2,w,c
  6922  0011A8  A4D8               	btfss	status,2,c
  6923  0011AA  D007               	goto	l3731
  6924  0011AC  0E00               	movlw	0
  6925  0011AE  6E12               	movwf	stepper_rev@r+1,c
  6926  0011B0  0E55               	movlw	85
  6927  0011B2  6E11               	movwf	stepper_rev@r,c
  6928  0011B4  ECC8  F013         	call	_stepper_rev	;wreg free
  6929  0011B8  D01C               	goto	l3739
  6930  0011BA                     l3731:
  6931                           
  6932                           ;main.c: 525: else if (step_state[0] == 3) stepper_rev(170);
  6933  0011BA  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6934  0011BE  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6935  0011C2  0E03               	movlw	3
  6936  0011C4  18DE               	xorwf	postinc2,w,c
  6937  0011C6  A4D8               	btfss	status,2,c
  6938  0011C8  D007               	goto	l3735
  6939  0011CA  0E00               	movlw	0
  6940  0011CC  6E12               	movwf	stepper_rev@r+1,c
  6941  0011CE  0EAA               	movlw	170
  6942  0011D0  6E11               	movwf	stepper_rev@r,c
  6943  0011D2  ECC8  F013         	call	_stepper_rev	;wreg free
  6944  0011D6  D00D               	goto	l3739
  6945  0011D8                     l3735:
  6946                           
  6947                           ;main.c: 526: else if (step_state[0] == 4) stepper_rev(255);
  6948  0011D8  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6949  0011DC  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6950  0011E0  0E04               	movlw	4
  6951  0011E2  18DE               	xorwf	postinc2,w,c
  6952  0011E4  A4D8               	btfss	status,2,c
  6953  0011E6  D005               	goto	l3739
  6954  0011E8  0E00               	movlw	0
  6955  0011EA  6E12               	movwf	stepper_rev@r+1,c
  6956  0011EC  6811               	setf	stepper_rev@r,c
  6957  0011EE  ECC8  F013         	call	_stepper_rev	;wreg free
  6958  0011F2                     l3739:
  6959                           
  6960                           ;main.c: 527: step_state[0] = 1;
  6961  0011F2  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6962  0011F6  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6963  0011FA  0E01               	movlw	1
  6964  0011FC  6EDF               	movwf	indf2,c
  6965                           
  6966                           ;main.c: 528: break;
  6967  0011FE  0012               	return	
  6968  001200                     l3741:
  6969                           
  6970                           ;main.c: 530: if (step_state[0] == 3) stepper_rev(85);
  6971  001200  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6972  001204  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6973  001208  0E03               	movlw	3
  6974  00120A  18DE               	xorwf	postinc2,w,c
  6975  00120C  A4D8               	btfss	status,2,c
  6976  00120E  D007               	goto	l3745
  6977  001210  0E00               	movlw	0
  6978  001212  6E12               	movwf	stepper_rev@r+1,c
  6979  001214  0E55               	movlw	85
  6980  001216  6E11               	movwf	stepper_rev@r,c
  6981  001218  ECC8  F013         	call	_stepper_rev	;wreg free
  6982  00121C  D01C               	goto	l3753
  6983  00121E                     l3745:
  6984                           
  6985                           ;main.c: 531: else if (step_state[0] == 4) stepper_rev(170);
  6986  00121E  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  6987  001222  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  6988  001226  0E04               	movlw	4
  6989  001228  18DE               	xorwf	postinc2,w,c
  6990  00122A  A4D8               	btfss	status,2,c
  6991  00122C  D007               	goto	l3749
  6992  00122E  0E00               	movlw	0
  6993  001230  6E12               	movwf	stepper_rev@r+1,c
  6994  001232  0EAA               	movlw	170
  6995  001234  6E11               	movwf	stepper_rev@r,c
  6996  001236  ECC8  F013         	call	_stepper_rev	;wreg free
  6997  00123A  D00D               	goto	l3753
  6998  00123C                     l3749:
  6999                           
  7000                           ;main.c: 532: else if (step_state[0] == 1) stepper(85);
  7001  00123C  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  7002  001240  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7003  001244  04DE               	decf	postinc2,w,c
  7004  001246  A4D8               	btfss	status,2,c
  7005  001248  D006               	goto	l3753
  7006  00124A  0E00               	movlw	0
  7007  00124C  6E12               	movwf	stepper@r+1,c
  7008  00124E  0E55               	movlw	85
  7009  001250  6E11               	movwf	stepper@r,c
  7010  001252  EC0A  F014         	call	_stepper	;wreg free
  7011  001256                     l3753:
  7012                           
  7013                           ;main.c: 533: step_state[0] = 2;
  7014  001256  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  7015  00125A  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7016  00125E  0E02               	movlw	2
  7017  001260  6EDF               	movwf	indf2,c
  7018                           
  7019                           ;main.c: 534: break;
  7020  001262  0012               	return	
  7021  001264                     l3755:
  7022                           
  7023                           ;main.c: 536: if (step_state[0] == 4) stepper_rev(85);
  7024  001264  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  7025  001268  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7026  00126C  0E04               	movlw	4
  7027  00126E  18DE               	xorwf	postinc2,w,c
  7028  001270  A4D8               	btfss	status,2,c
  7029  001272  D007               	goto	l3759
  7030  001274  0E00               	movlw	0
  7031  001276  6E12               	movwf	stepper_rev@r+1,c
  7032  001278  0E55               	movlw	85
  7033  00127A  6E11               	movwf	stepper_rev@r,c
  7034  00127C  ECC8  F013         	call	_stepper_rev	;wreg free
  7035  001280  D01C               	goto	l3767
  7036  001282                     l3759:
  7037                           
  7038                           ;main.c: 537: else if (step_state[0] == 1) stepper(170);
  7039  001282  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  7040  001286  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7041  00128A  04DE               	decf	postinc2,w,c
  7042  00128C  A4D8               	btfss	status,2,c
  7043  00128E  D007               	goto	l3763
  7044  001290  0E00               	movlw	0
  7045  001292  6E12               	movwf	stepper@r+1,c
  7046  001294  0EAA               	movlw	170
  7047  001296  6E11               	movwf	stepper@r,c
  7048  001298  EC0A  F014         	call	_stepper	;wreg free
  7049  00129C  D00E               	goto	l3767
  7050  00129E                     l3763:
  7051                           
  7052                           ;main.c: 538: else if (step_state[0] == 2) stepper(85);
  7053  00129E  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  7054  0012A2  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7055  0012A6  0E02               	movlw	2
  7056  0012A8  18DE               	xorwf	postinc2,w,c
  7057  0012AA  A4D8               	btfss	status,2,c
  7058  0012AC  D006               	goto	l3767
  7059  0012AE  0E00               	movlw	0
  7060  0012B0  6E12               	movwf	stepper@r+1,c
  7061  0012B2  0E55               	movlw	85
  7062  0012B4  6E11               	movwf	stepper@r,c
  7063  0012B6  EC0A  F014         	call	_stepper	;wreg free
  7064  0012BA                     l3767:
  7065                           
  7066                           ;main.c: 539: step_state[0] = 3;
  7067  0012BA  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  7068  0012BE  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7069  0012C2  0E03               	movlw	3
  7070  0012C4  6EDF               	movwf	indf2,c
  7071                           
  7072                           ;main.c: 540: break;
  7073  0012C6  0012               	return	
  7074  0012C8                     l3769:
  7075                           
  7076                           ;main.c: 542: if (step_state[0] == 1) stepper(255);
  7077  0012C8  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  7078  0012CC  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7079  0012D0  04DE               	decf	postinc2,w,c
  7080  0012D2  A4D8               	btfss	status,2,c
  7081  0012D4  D006               	goto	l3773
  7082  0012D6  0E00               	movlw	0
  7083  0012D8  6E12               	movwf	stepper@r+1,c
  7084  0012DA  6811               	setf	stepper@r,c
  7085  0012DC  EC0A  F014         	call	_stepper	;wreg free
  7086  0012E0  D01D               	goto	l3781
  7087  0012E2                     l3773:
  7088                           
  7089                           ;main.c: 543: else if (step_state[0] == 2) stepper(170);
  7090  0012E2  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  7091  0012E6  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7092  0012EA  0E02               	movlw	2
  7093  0012EC  18DE               	xorwf	postinc2,w,c
  7094  0012EE  A4D8               	btfss	status,2,c
  7095  0012F0  D007               	goto	l3777
  7096  0012F2  0E00               	movlw	0
  7097  0012F4  6E12               	movwf	stepper@r+1,c
  7098  0012F6  0EAA               	movlw	170
  7099  0012F8  6E11               	movwf	stepper@r,c
  7100  0012FA  EC0A  F014         	call	_stepper	;wreg free
  7101  0012FE  D00E               	goto	l3781
  7102  001300                     l3777:
  7103                           
  7104                           ;main.c: 544: else if (step_state[0] == 3) stepper(85);
  7105  001300  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  7106  001304  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7107  001308  0E03               	movlw	3
  7108  00130A  18DE               	xorwf	postinc2,w,c
  7109  00130C  A4D8               	btfss	status,2,c
  7110  00130E  D006               	goto	l3781
  7111  001310  0E00               	movlw	0
  7112  001312  6E12               	movwf	stepper@r+1,c
  7113  001314  0E55               	movlw	85
  7114  001316  6E11               	movwf	stepper@r,c
  7115  001318  EC0A  F014         	call	_stepper	;wreg free
  7116  00131C                     l3781:
  7117                           
  7118                           ;main.c: 545: step_state[0] = 4;
  7119  00131C  C016  FFD9         	movff	stepper_state@step_state,fsr2l
  7120  001320  C017  FFDA         	movff	stepper_state@step_state+1,fsr2h
  7121  001324  0E04               	movlw	4
  7122  001326  6EDF               	movwf	indf2,c
  7123                           
  7124                           ;main.c: 547: }
  7125                           
  7126                           ;main.c: 546: break;
  7127  001328  0012               	return	
  7128  00132A                     l3785:
  7129  00132A  C01A  F018         	movff	stepper_state@next_state,??_stepper_state
  7130  00132E  C01B  F019         	movff	stepper_state@next_state+1,??_stepper_state+1
  7131                           
  7132                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7133                           ; Switch size 1, requested type "space"
  7134                           ; Number of cases is 1, Range of values is 0 to 0
  7135                           ; switch strategies available:
  7136                           ; Name         Instructions Cycles
  7137                           ; simple_byte            4     3 (average)
  7138                           ;	Chosen strategy is simple_byte
  7139  001332  5019               	movf	??_stepper_state+1,w,c
  7140  001334  0A00               	xorlw	0	; case 0
  7141  001336  A4D8               	btfss	status,2,c
  7142  001338  0012               	return	
  7143                           
  7144                           ; Switch size 1, requested type "space"
  7145                           ; Number of cases is 4, Range of values is 1 to 4
  7146                           ; switch strategies available:
  7147                           ; Name         Instructions Cycles
  7148                           ; simple_byte           13     7 (average)
  7149                           ;	Chosen strategy is simple_byte
  7150  00133A  5018               	movf	??_stepper_state,w,c
  7151  00133C  0A01               	xorlw	1	; case 1
  7152  00133E  B4D8               	btfsc	status,2,c
  7153  001340  D72D               	goto	l3727
  7154  001342  0A03               	xorlw	3	; case 2
  7155  001344  B4D8               	btfsc	status,2,c
  7156  001346  D75C               	goto	l3741
  7157  001348  0A01               	xorlw	1	; case 3
  7158  00134A  B4D8               	btfsc	status,2,c
  7159  00134C  D78B               	goto	l3755
  7160  00134E  0A07               	xorlw	7	; case 4
  7161  001350  A4D8               	btfss	status,2,c
  7162  001352  0012               	return	
  7163  001354  D7B9               	goto	l3769
  7164  001356                     __end_of_stepper_state:
  7165                           	opt stack 0
  7166                           tblptru	equ	0xFF8
  7167                           tblptrh	equ	0xFF7
  7168                           tblptrl	equ	0xFF6
  7169                           tablat	equ	0xFF5
  7170                           prodh	equ	0xFF4
  7171                           prodl	equ	0xFF3
  7172                           intcon	equ	0xFF2
  7173                           intcon2	equ	0xFF1
  7174                           intcon3	equ	0xFF0
  7175                           postinc0	equ	0xFEE
  7176                           wreg	equ	0xFE8
  7177                           postdec1	equ	0xFE5
  7178                           fsr1l	equ	0xFE1
  7179                           indf2	equ	0xFDF
  7180                           postinc2	equ	0xFDE
  7181                           postdec2	equ	0xFDD
  7182                           fsr2h	equ	0xFDA
  7183                           fsr2l	equ	0xFD9
  7184                           status	equ	0xFD8
  7185                           
  7186 ;; *************** function _stepper_rev *****************
  7187 ;; Defined at:
  7188 ;;		line 494 in file "main.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;  r               2   16[COMRAM] int 
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  i               2   19[COMRAM] int 
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  1    wreg      void 
  7195 ;; Registers used:
  7196 ;;		wreg, status,2, status,0
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7202 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7203 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7204 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;Total ram usage:        5 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; Hardware stack levels required when called:    1
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_stepper_state
  7213 ;; This function uses a non-reentrant model
  7214 ;;
  7215                           
  7216                           	psect	text27
  7217  002790                     __ptext27:
  7218                           	opt stack 0
  7219  002790                     _stepper_rev:
  7220                           	opt stack 27
  7221                           
  7222                           ;main.c: 496: for (int i = 0; i < r; i++){
  7223                           
  7224                           ;incstack = 0
  7225  002790  0E00               	movlw	0
  7226  002792  6E15               	movwf	stepper_rev@i+1,c
  7227  002794  0E00               	movlw	0
  7228  002796  6E14               	movwf	stepper_rev@i,c
  7229  002798  D032               	goto	l236
  7230  00279A                     l237:
  7231                           
  7232                           ;main.c: 497: PORTCbits.RC0 = 0;
  7233  00279A  9082               	bcf	3970,0,c	;volatile
  7234                           
  7235                           ;main.c: 498: PORTCbits.RC1 = 0;
  7236  00279C  9282               	bcf	3970,1,c	;volatile
  7237                           
  7238                           ;main.c: 499: PORTCbits.RC2 = 1;
  7239  00279E  8482               	bsf	3970,2,c	;volatile
  7240                           
  7241                           ;main.c: 500: PORTCbits.RC5 = 1;
  7242  0027A0  8A82               	bsf	3970,5,c	;volatile
  7243                           
  7244                           ;main.c: 501: _delay((unsigned long)((5)*(10000000/4000.0)));
  7245  0027A2  0E11               	movlw	17
  7246  0027A4  6E13               	movwf	??_stepper_rev& (0+255),c
  7247  0027A6  0E3A               	movlw	58
  7248  0027A8                     u4037:
  7249  0027A8  2EE8               	decfsz	wreg,f,c
  7250  0027AA  D7FE               	bra	u4037
  7251  0027AC  2E13               	decfsz	??_stepper_rev& (0+255),f,c
  7252  0027AE  D7FC               	bra	u4037
  7253  0027B0  D000               	nop2	
  7254                           
  7255                           ;main.c: 502: PORTCbits.RC0 = 0;
  7256  0027B2  9082               	bcf	3970,0,c	;volatile
  7257                           
  7258                           ;main.c: 503: PORTCbits.RC1 = 1;
  7259  0027B4  8282               	bsf	3970,1,c	;volatile
  7260                           
  7261                           ;main.c: 504: PORTCbits.RC2 = 1;
  7262  0027B6  8482               	bsf	3970,2,c	;volatile
  7263                           
  7264                           ;main.c: 505: PORTCbits.RC5 = 0;
  7265  0027B8  9A82               	bcf	3970,5,c	;volatile
  7266                           
  7267                           ;main.c: 506: _delay((unsigned long)((5)*(10000000/4000.0)));
  7268  0027BA  0E11               	movlw	17
  7269  0027BC  6E13               	movwf	??_stepper_rev& (0+255),c
  7270  0027BE  0E3A               	movlw	58
  7271  0027C0                     u4047:
  7272  0027C0  2EE8               	decfsz	wreg,f,c
  7273  0027C2  D7FE               	bra	u4047
  7274  0027C4  2E13               	decfsz	??_stepper_rev& (0+255),f,c
  7275  0027C6  D7FC               	bra	u4047
  7276  0027C8  D000               	nop2	
  7277                           
  7278                           ;main.c: 507: PORTCbits.RC0 = 1;
  7279  0027CA  8082               	bsf	3970,0,c	;volatile
  7280                           
  7281                           ;main.c: 508: PORTCbits.RC1 = 1;
  7282  0027CC  8282               	bsf	3970,1,c	;volatile
  7283                           
  7284                           ;main.c: 509: PORTCbits.RC2 = 1;
  7285  0027CE  8482               	bsf	3970,2,c	;volatile
  7286                           
  7287                           ;main.c: 510: PORTCbits.RC5 = 0;
  7288  0027D0  9A82               	bcf	3970,5,c	;volatile
  7289                           
  7290                           ;main.c: 511: _delay((unsigned long)((5)*(10000000/4000.0)));
  7291  0027D2  0E11               	movlw	17
  7292  0027D4  6E13               	movwf	??_stepper_rev& (0+255),c
  7293  0027D6  0E3A               	movlw	58
  7294  0027D8                     u4057:
  7295  0027D8  2EE8               	decfsz	wreg,f,c
  7296  0027DA  D7FE               	bra	u4057
  7297  0027DC  2E13               	decfsz	??_stepper_rev& (0+255),f,c
  7298  0027DE  D7FC               	bra	u4057
  7299  0027E0  D000               	nop2	
  7300                           
  7301                           ;main.c: 512: PORTCbits.RC0 = 1;
  7302  0027E2  8082               	bsf	3970,0,c	;volatile
  7303                           
  7304                           ;main.c: 513: PORTCbits.RC1 = 0;
  7305  0027E4  9282               	bcf	3970,1,c	;volatile
  7306                           
  7307                           ;main.c: 514: PORTCbits.RC2 = 0;
  7308  0027E6  9482               	bcf	3970,2,c	;volatile
  7309                           
  7310                           ;main.c: 515: PORTCbits.RC5 = 1;
  7311  0027E8  8A82               	bsf	3970,5,c	;volatile
  7312                           
  7313                           ;main.c: 516: _delay((unsigned long)((5)*(10000000/4000.0)));
  7314  0027EA  0E11               	movlw	17
  7315  0027EC  6E13               	movwf	??_stepper_rev& (0+255),c
  7316  0027EE  0E3A               	movlw	58
  7317  0027F0                     u4067:
  7318  0027F0  2EE8               	decfsz	wreg,f,c
  7319  0027F2  D7FE               	bra	u4067
  7320  0027F4  2E13               	decfsz	??_stepper_rev& (0+255),f,c
  7321  0027F6  D7FC               	bra	u4067
  7322  0027F8  D000               	nop2	
  7323  0027FA  4A14               	infsnz	stepper_rev@i,f,c
  7324  0027FC  2A15               	incf	stepper_rev@i+1,f,c
  7325  0027FE                     l236:
  7326  0027FE  5011               	movf	stepper_rev@r,w,c
  7327  002800  5C14               	subwf	stepper_rev@i,w,c
  7328  002802  5015               	movf	stepper_rev@i+1,w,c
  7329  002804  0A80               	xorlw	128
  7330  002806  6E13               	movwf	??_stepper_rev& (0+255),c
  7331  002808  5012               	movf	stepper_rev@r+1,w,c
  7332  00280A  0A80               	xorlw	128
  7333  00280C  5813               	subwfb	??_stepper_rev& (0+255),w,c
  7334  00280E  B0D8               	btfsc	status,0,c
  7335  002810  0012               	return	
  7336  002812  D7C3               	goto	l237
  7337  002814                     __end_of_stepper_rev:
  7338                           	opt stack 0
  7339                           tblptru	equ	0xFF8
  7340                           tblptrh	equ	0xFF7
  7341                           tblptrl	equ	0xFF6
  7342                           tablat	equ	0xFF5
  7343                           prodh	equ	0xFF4
  7344                           prodl	equ	0xFF3
  7345                           intcon	equ	0xFF2
  7346                           intcon2	equ	0xFF1
  7347                           intcon3	equ	0xFF0
  7348                           postinc0	equ	0xFEE
  7349                           wreg	equ	0xFE8
  7350                           postdec1	equ	0xFE5
  7351                           fsr1l	equ	0xFE1
  7352                           indf2	equ	0xFDF
  7353                           postinc2	equ	0xFDE
  7354                           postdec2	equ	0xFDD
  7355                           fsr2h	equ	0xFDA
  7356                           fsr2l	equ	0xFD9
  7357                           status	equ	0xFD8
  7358                           
  7359 ;; *************** function _stepper *****************
  7360 ;; Defined at:
  7361 ;;		line 468 in file "main.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;  r               2   16[COMRAM] int 
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;  i               2   19[COMRAM] int 
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  1    wreg      void 
  7368 ;; Registers used:
  7369 ;;		wreg, status,2, status,0
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7375 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7377 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7378 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7379 ;;Total ram usage:        5 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:    1
  7382 ;; This function calls:
  7383 ;;		Nothing
  7384 ;; This function is called by:
  7385 ;;		_stepper_state
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           	psect	text28
  7390  002814                     __ptext28:
  7391                           	opt stack 0
  7392  002814                     _stepper:
  7393                           	opt stack 27
  7394                           
  7395                           ;main.c: 470: for (int i = 0; i < r; i++){
  7396                           
  7397                           ;incstack = 0
  7398  002814  0E00               	movlw	0
  7399  002816  6E15               	movwf	stepper@i+1,c
  7400  002818  0E00               	movlw	0
  7401  00281A  6E14               	movwf	stepper@i,c
  7402  00281C  D032               	goto	l230
  7403  00281E                     l231:
  7404                           
  7405                           ;main.c: 471: PORTCbits.RC0 = 1;
  7406  00281E  8082               	bsf	3970,0,c	;volatile
  7407                           
  7408                           ;main.c: 472: PORTCbits.RC1 = 1;
  7409  002820  8282               	bsf	3970,1,c	;volatile
  7410                           
  7411                           ;main.c: 473: PORTCbits.RC2 = 0;
  7412  002822  9482               	bcf	3970,2,c	;volatile
  7413                           
  7414                           ;main.c: 474: PORTCbits.RC5 = 0;
  7415  002824  9A82               	bcf	3970,5,c	;volatile
  7416                           
  7417                           ;main.c: 475: _delay((unsigned long)((5)*(10000000/4000.0)));
  7418  002826  0E11               	movlw	17
  7419  002828  6E13               	movwf	??_stepper& (0+255),c
  7420  00282A  0E3A               	movlw	58
  7421  00282C                     u4077:
  7422  00282C  2EE8               	decfsz	wreg,f,c
  7423  00282E  D7FE               	bra	u4077
  7424  002830  2E13               	decfsz	??_stepper& (0+255),f,c
  7425  002832  D7FC               	bra	u4077
  7426  002834  D000               	nop2	
  7427                           
  7428                           ;main.c: 476: PORTCbits.RC0 = 0;
  7429  002836  9082               	bcf	3970,0,c	;volatile
  7430                           
  7431                           ;main.c: 477: PORTCbits.RC1 = 1;
  7432  002838  8282               	bsf	3970,1,c	;volatile
  7433                           
  7434                           ;main.c: 478: PORTCbits.RC2 = 1;
  7435  00283A  8482               	bsf	3970,2,c	;volatile
  7436                           
  7437                           ;main.c: 479: PORTCbits.RC5 = 0;
  7438  00283C  9A82               	bcf	3970,5,c	;volatile
  7439                           
  7440                           ;main.c: 480: _delay((unsigned long)((5)*(10000000/4000.0)));
  7441  00283E  0E11               	movlw	17
  7442  002840  6E13               	movwf	??_stepper& (0+255),c
  7443  002842  0E3A               	movlw	58
  7444  002844                     u4087:
  7445  002844  2EE8               	decfsz	wreg,f,c
  7446  002846  D7FE               	bra	u4087
  7447  002848  2E13               	decfsz	??_stepper& (0+255),f,c
  7448  00284A  D7FC               	bra	u4087
  7449  00284C  D000               	nop2	
  7450                           
  7451                           ;main.c: 481: PORTCbits.RC0 = 0;
  7452  00284E  9082               	bcf	3970,0,c	;volatile
  7453                           
  7454                           ;main.c: 482: PORTCbits.RC1 = 0;
  7455  002850  9282               	bcf	3970,1,c	;volatile
  7456                           
  7457                           ;main.c: 483: PORTCbits.RC2 = 1;
  7458  002852  8482               	bsf	3970,2,c	;volatile
  7459                           
  7460                           ;main.c: 484: PORTCbits.RC5 = 1;
  7461  002854  8A82               	bsf	3970,5,c	;volatile
  7462                           
  7463                           ;main.c: 485: _delay((unsigned long)((5)*(10000000/4000.0)));
  7464  002856  0E11               	movlw	17
  7465  002858  6E13               	movwf	??_stepper& (0+255),c
  7466  00285A  0E3A               	movlw	58
  7467  00285C                     u4097:
  7468  00285C  2EE8               	decfsz	wreg,f,c
  7469  00285E  D7FE               	bra	u4097
  7470  002860  2E13               	decfsz	??_stepper& (0+255),f,c
  7471  002862  D7FC               	bra	u4097
  7472  002864  D000               	nop2	
  7473                           
  7474                           ;main.c: 486: PORTCbits.RC0 = 1;
  7475  002866  8082               	bsf	3970,0,c	;volatile
  7476                           
  7477                           ;main.c: 487: PORTCbits.RC1 = 0;
  7478  002868  9282               	bcf	3970,1,c	;volatile
  7479                           
  7480                           ;main.c: 488: PORTCbits.RC2 = 0;
  7481  00286A  9482               	bcf	3970,2,c	;volatile
  7482                           
  7483                           ;main.c: 489: PORTCbits.RC5 = 1;
  7484  00286C  8A82               	bsf	3970,5,c	;volatile
  7485                           
  7486                           ;main.c: 490: _delay((unsigned long)((5)*(10000000/4000.0)));
  7487  00286E  0E11               	movlw	17
  7488  002870  6E13               	movwf	??_stepper& (0+255),c
  7489  002872  0E3A               	movlw	58
  7490  002874                     u4107:
  7491  002874  2EE8               	decfsz	wreg,f,c
  7492  002876  D7FE               	bra	u4107
  7493  002878  2E13               	decfsz	??_stepper& (0+255),f,c
  7494  00287A  D7FC               	bra	u4107
  7495  00287C  D000               	nop2	
  7496  00287E  4A14               	infsnz	stepper@i,f,c
  7497  002880  2A15               	incf	stepper@i+1,f,c
  7498  002882                     l230:
  7499  002882  5011               	movf	stepper@r,w,c
  7500  002884  5C14               	subwf	stepper@i,w,c
  7501  002886  5015               	movf	stepper@i+1,w,c
  7502  002888  0A80               	xorlw	128
  7503  00288A  6E13               	movwf	??_stepper& (0+255),c
  7504  00288C  5012               	movf	stepper@r+1,w,c
  7505  00288E  0A80               	xorlw	128
  7506  002890  5813               	subwfb	??_stepper& (0+255),w,c
  7507  002892  B0D8               	btfsc	status,0,c
  7508  002894  0012               	return	
  7509  002896  D7C3               	goto	l231
  7510  002898                     __end_of_stepper:
  7511                           	opt stack 0
  7512                           tblptru	equ	0xFF8
  7513                           tblptrh	equ	0xFF7
  7514                           tblptrl	equ	0xFF6
  7515                           tablat	equ	0xFF5
  7516                           prodh	equ	0xFF4
  7517                           prodl	equ	0xFF3
  7518                           intcon	equ	0xFF2
  7519                           intcon2	equ	0xFF1
  7520                           intcon3	equ	0xFF0
  7521                           postinc0	equ	0xFEE
  7522                           wreg	equ	0xFE8
  7523                           postdec1	equ	0xFE5
  7524                           fsr1l	equ	0xFE1
  7525                           indf2	equ	0xFDF
  7526                           postinc2	equ	0xFDE
  7527                           postdec2	equ	0xFDD
  7528                           fsr2h	equ	0xFDA
  7529                           fsr2l	equ	0xFD9
  7530                           status	equ	0xFD8
  7531                           
  7532 ;; *************** function _read_colorsensor2 *****************
  7533 ;; Defined at:
  7534 ;;		line 588 in file "main.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;  red             2   19[COMRAM] PTR unsigned char 
  7537 ;;		 -> init_operation@red(2), 
  7538 ;;  green           2   21[COMRAM] PTR unsigned char 
  7539 ;;		 -> init_operation@green(2), 
  7540 ;;  blue            2   23[COMRAM] PTR unsigned char 
  7541 ;;		 -> init_operation@blue(2), 
  7542 ;;  clear           2   25[COMRAM] PTR unsigned char 
  7543 ;;		 -> init_operation@clear(2), 
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;		None
  7546 ;; Return value:  Size  Location     Type
  7547 ;;                  1    wreg      void 
  7548 ;; Registers used:
  7549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7550 ;; Tracked objects:
  7551 ;;		On entry : 0/0
  7552 ;;		On exit  : 0/0
  7553 ;;		Unchanged: 0/0
  7554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7555 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7558 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7559 ;;Total ram usage:        8 bytes
  7560 ;; Hardware stack levels used:    1
  7561 ;; Hardware stack levels required when called:    3
  7562 ;; This function calls:
  7563 ;;		_I2C_Master_Read
  7564 ;;		_I2C_Master_Start
  7565 ;;		_I2C_Master_Stop
  7566 ;;		_I2C_Master_Write
  7567 ;; This function is called by:
  7568 ;;		_init_operation
  7569 ;; This function uses a non-reentrant model
  7570 ;;
  7571                           
  7572                           	psect	text29
  7573  001BC2                     __ptext29:
  7574                           	opt stack 0
  7575  001BC2                     _read_colorsensor2:
  7576                           	opt stack 26
  7577                           
  7578                           ;main.c: 590: I2C_Master_Start();
  7579                           
  7580                           ;incstack = 0
  7581  001BC2  EC14  F017         	call	_I2C_Master_Start	;wreg free
  7582                           
  7583                           ;main.c: 591: I2C_Master_Write(0b11100000);
  7584  001BC6  0E00               	movlw	0
  7585  001BC8  6E13               	movwf	I2C_Master_Write@d+1,c
  7586  001BCA  0EE0               	movlw	224
  7587  001BCC  6E12               	movwf	I2C_Master_Write@d,c
  7588  001BCE  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7589                           
  7590                           ;main.c: 592: I2C_Master_Write(0b10000000);
  7591  001BD2  0E00               	movlw	0
  7592  001BD4  6E13               	movwf	I2C_Master_Write@d+1,c
  7593  001BD6  0E80               	movlw	128
  7594  001BD8  6E12               	movwf	I2C_Master_Write@d,c
  7595  001BDA  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7596                           
  7597                           ;main.c: 593: I2C_Master_Write(0b00000100);
  7598  001BDE  0E00               	movlw	0
  7599  001BE0  6E13               	movwf	I2C_Master_Write@d+1,c
  7600  001BE2  0E04               	movlw	4
  7601  001BE4  6E12               	movwf	I2C_Master_Write@d,c
  7602  001BE6  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7603                           
  7604                           ;main.c: 594: I2C_Master_Stop();
  7605  001BEA  EC10  F017         	call	_I2C_Master_Stop	;wreg free
  7606                           
  7607                           ;main.c: 597: I2C_Master_Start();
  7608  001BEE  EC14  F017         	call	_I2C_Master_Start	;wreg free
  7609                           
  7610                           ;main.c: 598: I2C_Master_Write(0b01010010);
  7611  001BF2  0E00               	movlw	0
  7612  001BF4  6E13               	movwf	I2C_Master_Write@d+1,c
  7613  001BF6  0E52               	movlw	82
  7614  001BF8  6E12               	movwf	I2C_Master_Write@d,c
  7615  001BFA  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7616                           
  7617                           ;main.c: 599: I2C_Master_Write(0b10000000);
  7618  001BFE  0E00               	movlw	0
  7619  001C00  6E13               	movwf	I2C_Master_Write@d+1,c
  7620  001C02  0E80               	movlw	128
  7621  001C04  6E12               	movwf	I2C_Master_Write@d,c
  7622  001C06  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7623                           
  7624                           ;main.c: 600: I2C_Master_Write(0b00000011);
  7625  001C0A  0E00               	movlw	0
  7626  001C0C  6E13               	movwf	I2C_Master_Write@d+1,c
  7627  001C0E  0E03               	movlw	3
  7628  001C10  6E12               	movwf	I2C_Master_Write@d,c
  7629  001C12  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7630                           
  7631                           ;main.c: 601: I2C_Master_Stop();
  7632  001C16  EC10  F017         	call	_I2C_Master_Stop	;wreg free
  7633                           
  7634                           ;main.c: 604: I2C_Master_Start();
  7635  001C1A  EC14  F017         	call	_I2C_Master_Start	;wreg free
  7636                           
  7637                           ;main.c: 605: I2C_Master_Write(0b01010010);
  7638  001C1E  0E00               	movlw	0
  7639  001C20  6E13               	movwf	I2C_Master_Write@d+1,c
  7640  001C22  0E52               	movlw	82
  7641  001C24  6E12               	movwf	I2C_Master_Write@d,c
  7642  001C26  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7643                           
  7644                           ;main.c: 606: I2C_Master_Write(0b10110100);
  7645  001C2A  0E00               	movlw	0
  7646  001C2C  6E13               	movwf	I2C_Master_Write@d+1,c
  7647  001C2E  0EB4               	movlw	180
  7648  001C30  6E12               	movwf	I2C_Master_Write@d,c
  7649  001C32  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7650                           
  7651                           ;main.c: 607: I2C_Master_Start();
  7652  001C36  EC14  F017         	call	_I2C_Master_Start	;wreg free
  7653                           
  7654                           ;main.c: 608: I2C_Master_Write(0b01010011);
  7655  001C3A  0E00               	movlw	0
  7656  001C3C  6E13               	movwf	I2C_Master_Write@d+1,c
  7657  001C3E  0E53               	movlw	83
  7658  001C40  6E12               	movwf	I2C_Master_Write@d,c
  7659  001C42  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7660                           
  7661                           ;main.c: 610: clear[1] = I2C_Master_Read(1);
  7662  001C46  EE20 F001          	lfsr	2,1
  7663  001C4A  501A               	movf	read_colorsensor2@clear,w,c
  7664  001C4C  26D9               	addwf	fsr2l,f,c
  7665  001C4E  501B               	movf	read_colorsensor2@clear+1,w,c
  7666  001C50  22DA               	addwfc	fsr2h,f,c
  7667  001C52  0E01               	movlw	1
  7668  001C54  ECA7  F016         	call	_I2C_Master_Read
  7669  001C58  6EDF               	movwf	indf2,c
  7670                           
  7671                           ;main.c: 611: clear[0] = I2C_Master_Read(1);
  7672  001C5A  0E01               	movlw	1
  7673  001C5C  ECA7  F016         	call	_I2C_Master_Read
  7674  001C60  C01A  FFD9         	movff	read_colorsensor2@clear,fsr2l
  7675  001C64  C01B  FFDA         	movff	read_colorsensor2@clear+1,fsr2h
  7676  001C68  6EDF               	movwf	indf2,c
  7677                           
  7678                           ;main.c: 613: red[1] = I2C_Master_Read(1);
  7679  001C6A  EE20 F001          	lfsr	2,1
  7680  001C6E  5014               	movf	read_colorsensor2@red,w,c
  7681  001C70  26D9               	addwf	fsr2l,f,c
  7682  001C72  5015               	movf	read_colorsensor2@red+1,w,c
  7683  001C74  22DA               	addwfc	fsr2h,f,c
  7684  001C76  0E01               	movlw	1
  7685  001C78  ECA7  F016         	call	_I2C_Master_Read
  7686  001C7C  6EDF               	movwf	indf2,c
  7687                           
  7688                           ;main.c: 614: red[0] = I2C_Master_Read(1);
  7689  001C7E  0E01               	movlw	1
  7690  001C80  ECA7  F016         	call	_I2C_Master_Read
  7691  001C84  C014  FFD9         	movff	read_colorsensor2@red,fsr2l
  7692  001C88  C015  FFDA         	movff	read_colorsensor2@red+1,fsr2h
  7693  001C8C  6EDF               	movwf	indf2,c
  7694                           
  7695                           ;main.c: 616: green[1] = I2C_Master_Read(1);
  7696  001C8E  EE20 F001          	lfsr	2,1
  7697  001C92  5016               	movf	read_colorsensor2@green,w,c
  7698  001C94  26D9               	addwf	fsr2l,f,c
  7699  001C96  5017               	movf	read_colorsensor2@green+1,w,c
  7700  001C98  22DA               	addwfc	fsr2h,f,c
  7701  001C9A  0E01               	movlw	1
  7702  001C9C  ECA7  F016         	call	_I2C_Master_Read
  7703  001CA0  6EDF               	movwf	indf2,c
  7704                           
  7705                           ;main.c: 617: green[0] = I2C_Master_Read(1);
  7706  001CA2  0E01               	movlw	1
  7707  001CA4  ECA7  F016         	call	_I2C_Master_Read
  7708  001CA8  C016  FFD9         	movff	read_colorsensor2@green,fsr2l
  7709  001CAC  C017  FFDA         	movff	read_colorsensor2@green+1,fsr2h
  7710  001CB0  6EDF               	movwf	indf2,c
  7711                           
  7712                           ;main.c: 619: blue[1] = I2C_Master_Read(1);
  7713  001CB2  EE20 F001          	lfsr	2,1
  7714  001CB6  5018               	movf	read_colorsensor2@blue,w,c
  7715  001CB8  26D9               	addwf	fsr2l,f,c
  7716  001CBA  5019               	movf	read_colorsensor2@blue+1,w,c
  7717  001CBC  22DA               	addwfc	fsr2h,f,c
  7718  001CBE  0E01               	movlw	1
  7719  001CC0  ECA7  F016         	call	_I2C_Master_Read
  7720  001CC4  6EDF               	movwf	indf2,c
  7721                           
  7722                           ;main.c: 620: blue[0] = I2C_Master_Read(0);
  7723  001CC6  0E00               	movlw	0
  7724  001CC8  ECA7  F016         	call	_I2C_Master_Read
  7725  001CCC  C018  FFD9         	movff	read_colorsensor2@blue,fsr2l
  7726  001CD0  C019  FFDA         	movff	read_colorsensor2@blue+1,fsr2h
  7727  001CD4  6EDF               	movwf	indf2,c
  7728                           
  7729                           ;main.c: 622: I2C_Master_Stop();
  7730  001CD6  EC10  F017         	call	_I2C_Master_Stop	;wreg free
  7731  001CDA  0012               	return		;funcret
  7732  001CDC                     __end_of_read_colorsensor2:
  7733                           	opt stack 0
  7734                           tblptru	equ	0xFF8
  7735                           tblptrh	equ	0xFF7
  7736                           tblptrl	equ	0xFF6
  7737                           tablat	equ	0xFF5
  7738                           prodh	equ	0xFF4
  7739                           prodl	equ	0xFF3
  7740                           intcon	equ	0xFF2
  7741                           intcon2	equ	0xFF1
  7742                           intcon3	equ	0xFF0
  7743                           postinc0	equ	0xFEE
  7744                           wreg	equ	0xFE8
  7745                           postdec1	equ	0xFE5
  7746                           fsr1l	equ	0xFE1
  7747                           indf2	equ	0xFDF
  7748                           postinc2	equ	0xFDE
  7749                           postdec2	equ	0xFDD
  7750                           fsr2h	equ	0xFDA
  7751                           fsr2l	equ	0xFD9
  7752                           status	equ	0xFD8
  7753                           
  7754 ;; *************** function _read_colorsensor1 *****************
  7755 ;; Defined at:
  7756 ;;		line 550 in file "main.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;  red             2   19[COMRAM] PTR unsigned char 
  7759 ;;		 -> init_operation@red(2), 
  7760 ;;  green           2   21[COMRAM] PTR unsigned char 
  7761 ;;		 -> init_operation@green(2), 
  7762 ;;  blue            2   23[COMRAM] PTR unsigned char 
  7763 ;;		 -> init_operation@blue(2), 
  7764 ;;  clear           2   25[COMRAM] PTR unsigned char 
  7765 ;;		 -> init_operation@clear(2), 
  7766 ;; Auto vars:     Size  Location     Type
  7767 ;;		None
  7768 ;; Return value:  Size  Location     Type
  7769 ;;                  1    wreg      void 
  7770 ;; Registers used:
  7771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7772 ;; Tracked objects:
  7773 ;;		On entry : 0/0
  7774 ;;		On exit  : 0/0
  7775 ;;		Unchanged: 0/0
  7776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7777 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7780 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7781 ;;Total ram usage:        8 bytes
  7782 ;; Hardware stack levels used:    1
  7783 ;; Hardware stack levels required when called:    3
  7784 ;; This function calls:
  7785 ;;		_I2C_Master_Read
  7786 ;;		_I2C_Master_Start
  7787 ;;		_I2C_Master_Stop
  7788 ;;		_I2C_Master_Write
  7789 ;; This function is called by:
  7790 ;;		_init_operation
  7791 ;; This function uses a non-reentrant model
  7792 ;;
  7793                           
  7794                           	psect	text30
  7795  001CDC                     __ptext30:
  7796                           	opt stack 0
  7797  001CDC                     _read_colorsensor1:
  7798                           	opt stack 26
  7799                           
  7800                           ;main.c: 552: I2C_Master_Start();
  7801                           
  7802                           ;incstack = 0
  7803  001CDC  EC14  F017         	call	_I2C_Master_Start	;wreg free
  7804                           
  7805                           ;main.c: 553: I2C_Master_Write(0b11100000);
  7806  001CE0  0E00               	movlw	0
  7807  001CE2  6E13               	movwf	I2C_Master_Write@d+1,c
  7808  001CE4  0EE0               	movlw	224
  7809  001CE6  6E12               	movwf	I2C_Master_Write@d,c
  7810  001CE8  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7811                           
  7812                           ;main.c: 554: I2C_Master_Write(0b10000000);
  7813  001CEC  0E00               	movlw	0
  7814  001CEE  6E13               	movwf	I2C_Master_Write@d+1,c
  7815  001CF0  0E80               	movlw	128
  7816  001CF2  6E12               	movwf	I2C_Master_Write@d,c
  7817  001CF4  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7818                           
  7819                           ;main.c: 555: I2C_Master_Write(0b10000000);
  7820  001CF8  0E00               	movlw	0
  7821  001CFA  6E13               	movwf	I2C_Master_Write@d+1,c
  7822  001CFC  0E80               	movlw	128
  7823  001CFE  6E12               	movwf	I2C_Master_Write@d,c
  7824  001D00  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7825                           
  7826                           ;main.c: 556: I2C_Master_Stop();
  7827  001D04  EC10  F017         	call	_I2C_Master_Stop	;wreg free
  7828                           
  7829                           ;main.c: 559: I2C_Master_Start();
  7830  001D08  EC14  F017         	call	_I2C_Master_Start	;wreg free
  7831                           
  7832                           ;main.c: 560: I2C_Master_Write(0b01010010);
  7833  001D0C  0E00               	movlw	0
  7834  001D0E  6E13               	movwf	I2C_Master_Write@d+1,c
  7835  001D10  0E52               	movlw	82
  7836  001D12  6E12               	movwf	I2C_Master_Write@d,c
  7837  001D14  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7838                           
  7839                           ;main.c: 561: I2C_Master_Write(0b10000000);
  7840  001D18  0E00               	movlw	0
  7841  001D1A  6E13               	movwf	I2C_Master_Write@d+1,c
  7842  001D1C  0E80               	movlw	128
  7843  001D1E  6E12               	movwf	I2C_Master_Write@d,c
  7844  001D20  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7845                           
  7846                           ;main.c: 562: I2C_Master_Write(0b00000011);
  7847  001D24  0E00               	movlw	0
  7848  001D26  6E13               	movwf	I2C_Master_Write@d+1,c
  7849  001D28  0E03               	movlw	3
  7850  001D2A  6E12               	movwf	I2C_Master_Write@d,c
  7851  001D2C  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7852                           
  7853                           ;main.c: 563: I2C_Master_Stop();
  7854  001D30  EC10  F017         	call	_I2C_Master_Stop	;wreg free
  7855                           
  7856                           ;main.c: 566: I2C_Master_Start();
  7857  001D34  EC14  F017         	call	_I2C_Master_Start	;wreg free
  7858                           
  7859                           ;main.c: 567: I2C_Master_Write(0b01010010);
  7860  001D38  0E00               	movlw	0
  7861  001D3A  6E13               	movwf	I2C_Master_Write@d+1,c
  7862  001D3C  0E52               	movlw	82
  7863  001D3E  6E12               	movwf	I2C_Master_Write@d,c
  7864  001D40  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7865                           
  7866                           ;main.c: 568: I2C_Master_Write(0b10110100);
  7867  001D44  0E00               	movlw	0
  7868  001D46  6E13               	movwf	I2C_Master_Write@d+1,c
  7869  001D48  0EB4               	movlw	180
  7870  001D4A  6E12               	movwf	I2C_Master_Write@d,c
  7871  001D4C  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7872                           
  7873                           ;main.c: 569: I2C_Master_Start();
  7874  001D50  EC14  F017         	call	_I2C_Master_Start	;wreg free
  7875                           
  7876                           ;main.c: 570: I2C_Master_Write(0b01010011);
  7877  001D54  0E00               	movlw	0
  7878  001D56  6E13               	movwf	I2C_Master_Write@d+1,c
  7879  001D58  0E53               	movlw	83
  7880  001D5A  6E12               	movwf	I2C_Master_Write@d,c
  7881  001D5C  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  7882                           
  7883                           ;main.c: 572: clear[1] = I2C_Master_Read(1);
  7884  001D60  EE20 F001          	lfsr	2,1
  7885  001D64  501A               	movf	read_colorsensor1@clear,w,c
  7886  001D66  26D9               	addwf	fsr2l,f,c
  7887  001D68  501B               	movf	read_colorsensor1@clear+1,w,c
  7888  001D6A  22DA               	addwfc	fsr2h,f,c
  7889  001D6C  0E01               	movlw	1
  7890  001D6E  ECA7  F016         	call	_I2C_Master_Read
  7891  001D72  6EDF               	movwf	indf2,c
  7892                           
  7893                           ;main.c: 573: clear[0] = I2C_Master_Read(1);
  7894  001D74  0E01               	movlw	1
  7895  001D76  ECA7  F016         	call	_I2C_Master_Read
  7896  001D7A  C01A  FFD9         	movff	read_colorsensor1@clear,fsr2l
  7897  001D7E  C01B  FFDA         	movff	read_colorsensor1@clear+1,fsr2h
  7898  001D82  6EDF               	movwf	indf2,c
  7899                           
  7900                           ;main.c: 575: red[1] = I2C_Master_Read(1);
  7901  001D84  EE20 F001          	lfsr	2,1
  7902  001D88  5014               	movf	read_colorsensor1@red,w,c
  7903  001D8A  26D9               	addwf	fsr2l,f,c
  7904  001D8C  5015               	movf	read_colorsensor1@red+1,w,c
  7905  001D8E  22DA               	addwfc	fsr2h,f,c
  7906  001D90  0E01               	movlw	1
  7907  001D92  ECA7  F016         	call	_I2C_Master_Read
  7908  001D96  6EDF               	movwf	indf2,c
  7909                           
  7910                           ;main.c: 576: red[0] = I2C_Master_Read(1);
  7911  001D98  0E01               	movlw	1
  7912  001D9A  ECA7  F016         	call	_I2C_Master_Read
  7913  001D9E  C014  FFD9         	movff	read_colorsensor1@red,fsr2l
  7914  001DA2  C015  FFDA         	movff	read_colorsensor1@red+1,fsr2h
  7915  001DA6  6EDF               	movwf	indf2,c
  7916                           
  7917                           ;main.c: 578: green[1] = I2C_Master_Read(1);
  7918  001DA8  EE20 F001          	lfsr	2,1
  7919  001DAC  5016               	movf	read_colorsensor1@green,w,c
  7920  001DAE  26D9               	addwf	fsr2l,f,c
  7921  001DB0  5017               	movf	read_colorsensor1@green+1,w,c
  7922  001DB2  22DA               	addwfc	fsr2h,f,c
  7923  001DB4  0E01               	movlw	1
  7924  001DB6  ECA7  F016         	call	_I2C_Master_Read
  7925  001DBA  6EDF               	movwf	indf2,c
  7926                           
  7927                           ;main.c: 579: green[0] = I2C_Master_Read(1);
  7928  001DBC  0E01               	movlw	1
  7929  001DBE  ECA7  F016         	call	_I2C_Master_Read
  7930  001DC2  C016  FFD9         	movff	read_colorsensor1@green,fsr2l
  7931  001DC6  C017  FFDA         	movff	read_colorsensor1@green+1,fsr2h
  7932  001DCA  6EDF               	movwf	indf2,c
  7933                           
  7934                           ;main.c: 581: blue[1] = I2C_Master_Read(1);
  7935  001DCC  EE20 F001          	lfsr	2,1
  7936  001DD0  5018               	movf	read_colorsensor1@blue,w,c
  7937  001DD2  26D9               	addwf	fsr2l,f,c
  7938  001DD4  5019               	movf	read_colorsensor1@blue+1,w,c
  7939  001DD6  22DA               	addwfc	fsr2h,f,c
  7940  001DD8  0E01               	movlw	1
  7941  001DDA  ECA7  F016         	call	_I2C_Master_Read
  7942  001DDE  6EDF               	movwf	indf2,c
  7943                           
  7944                           ;main.c: 582: blue[0] = I2C_Master_Read(0);
  7945  001DE0  0E00               	movlw	0
  7946  001DE2  ECA7  F016         	call	_I2C_Master_Read
  7947  001DE6  C018  FFD9         	movff	read_colorsensor1@blue,fsr2l
  7948  001DEA  C019  FFDA         	movff	read_colorsensor1@blue+1,fsr2h
  7949  001DEE  6EDF               	movwf	indf2,c
  7950                           
  7951                           ;main.c: 584: I2C_Master_Stop();
  7952  001DF0  EC10  F017         	call	_I2C_Master_Stop	;wreg free
  7953  001DF4  0012               	return		;funcret
  7954  001DF6                     __end_of_read_colorsensor1:
  7955                           	opt stack 0
  7956                           tblptru	equ	0xFF8
  7957                           tblptrh	equ	0xFF7
  7958                           tblptrl	equ	0xFF6
  7959                           tablat	equ	0xFF5
  7960                           prodh	equ	0xFF4
  7961                           prodl	equ	0xFF3
  7962                           intcon	equ	0xFF2
  7963                           intcon2	equ	0xFF1
  7964                           intcon3	equ	0xFF0
  7965                           postinc0	equ	0xFEE
  7966                           wreg	equ	0xFE8
  7967                           postdec1	equ	0xFE5
  7968                           fsr1l	equ	0xFE1
  7969                           indf2	equ	0xFDF
  7970                           postinc2	equ	0xFDE
  7971                           postdec2	equ	0xFDD
  7972                           fsr2h	equ	0xFDA
  7973                           fsr2l	equ	0xFD9
  7974                           status	equ	0xFD8
  7975                           
  7976 ;; *************** function _initLCD *****************
  7977 ;; Defined at:
  7978 ;;		line 14 in file "lcd.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;		None
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;		None
  7983 ;; Return value:  Size  Location     Type
  7984 ;;                  1    wreg      void 
  7985 ;; Registers used:
  7986 ;;		wreg, status,2, status,0, cstack
  7987 ;; Tracked objects:
  7988 ;;		On entry : 0/0
  7989 ;;		On exit  : 0/0
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7994 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7995 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7996 ;;Total ram usage:        1 bytes
  7997 ;; Hardware stack levels used:    1
  7998 ;; Hardware stack levels required when called:    3
  7999 ;; This function calls:
  8000 ;;		_lcdInst
  8001 ;; This function is called by:
  8002 ;;		_main
  8003 ;;		_init_operation
  8004 ;; This function uses a non-reentrant model
  8005 ;;
  8006                           
  8007                           	psect	text31
  8008  002C16                     __ptext31:
  8009                           	opt stack 0
  8010  002C16                     _initLCD:
  8011                           	opt stack 26
  8012                           
  8013                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  8014                           
  8015                           ;incstack = 0
  8016  002C16  0E31               	movlw	49
  8017  002C18  6E14               	movwf	??_initLCD& (0+255),c
  8018  002C1A  0EB2               	movlw	178
  8019  002C1C                     u4117:
  8020  002C1C  2EE8               	decfsz	wreg,f,c
  8021  002C1E  D7FE               	bra	u4117
  8022  002C20  2E14               	decfsz	??_initLCD& (0+255),f,c
  8023  002C22  D7FC               	bra	u4117
  8024  002C24  D000               	nop2	
  8025                           
  8026                           ;lcd.c: 16: lcdInst(0b00110011);
  8027  002C26  0E33               	movlw	51
  8028  002C28  EC05  F017         	call	_lcdInst
  8029                           
  8030                           ;lcd.c: 17: lcdInst(0b00110010);
  8031  002C2C  0E32               	movlw	50
  8032  002C2E  EC05  F017         	call	_lcdInst
  8033                           
  8034                           ;lcd.c: 18: lcdInst(0b00101000);
  8035  002C32  0E28               	movlw	40
  8036  002C34  EC05  F017         	call	_lcdInst
  8037                           
  8038                           ;lcd.c: 19: lcdInst(0b00001111);
  8039  002C38  0E0F               	movlw	15
  8040  002C3A  EC05  F017         	call	_lcdInst
  8041                           
  8042                           ;lcd.c: 20: lcdInst(0b00000110);
  8043  002C3E  0E06               	movlw	6
  8044  002C40  EC05  F017         	call	_lcdInst
  8045                           
  8046                           ;lcd.c: 21: lcdInst(0b00000001);
  8047  002C44  0E01               	movlw	1
  8048  002C46  EC05  F017         	call	_lcdInst
  8049                           
  8050                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  8051  002C4A  0E31               	movlw	49
  8052  002C4C  6E14               	movwf	??_initLCD& (0+255),c
  8053  002C4E  0EB2               	movlw	178
  8054  002C50                     u4127:
  8055  002C50  2EE8               	decfsz	wreg,f,c
  8056  002C52  D7FE               	bra	u4127
  8057  002C54  2E14               	decfsz	??_initLCD& (0+255),f,c
  8058  002C56  D7FC               	bra	u4127
  8059  002C58  D000               	nop2	
  8060  002C5A  0012               	return		;funcret
  8061  002C5C                     __end_of_initLCD:
  8062                           	opt stack 0
  8063                           tblptru	equ	0xFF8
  8064                           tblptrh	equ	0xFF7
  8065                           tblptrl	equ	0xFF6
  8066                           tablat	equ	0xFF5
  8067                           prodh	equ	0xFF4
  8068                           prodl	equ	0xFF3
  8069                           intcon	equ	0xFF2
  8070                           intcon2	equ	0xFF1
  8071                           intcon3	equ	0xFF0
  8072                           postinc0	equ	0xFEE
  8073                           wreg	equ	0xFE8
  8074                           postdec1	equ	0xFE5
  8075                           fsr1l	equ	0xFE1
  8076                           indf2	equ	0xFDF
  8077                           postinc2	equ	0xFDE
  8078                           postdec2	equ	0xFDD
  8079                           fsr2h	equ	0xFDA
  8080                           fsr2l	equ	0xFD9
  8081                           status	equ	0xFD8
  8082                           
  8083 ;; *************** function _date_time *****************
  8084 ;; Defined at:
  8085 ;;		line 427 in file "main.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;  time            2   69[BANK0 ] PTR unsigned char 
  8088 ;;		 -> main@time(7), 
  8089 ;; Auto vars:     Size  Location     Type
  8090 ;;  i               1  107[COMRAM] unsigned char 
  8091 ;; Return value:  Size  Location     Type
  8092 ;;                  1    wreg      void 
  8093 ;; Registers used:
  8094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8095 ;; Tracked objects:
  8096 ;;		On entry : 0/0
  8097 ;;		On exit  : 0/0
  8098 ;;		Unchanged: 0/0
  8099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8100 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8101 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8102 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8103 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8104 ;;Total ram usage:        6 bytes
  8105 ;; Hardware stack levels used:    1
  8106 ;; Hardware stack levels required when called:    4
  8107 ;; This function calls:
  8108 ;;		_I2C_Master_Read
  8109 ;;		_I2C_Master_Start
  8110 ;;		_I2C_Master_Stop
  8111 ;;		_I2C_Master_Write
  8112 ;;		_lcdInst
  8113 ;;		_printf
  8114 ;; This function is called by:
  8115 ;;		_main
  8116 ;; This function uses a non-reentrant model
  8117 ;;
  8118                           
  8119                           	psect	text32
  8120  001956                     __ptext32:
  8121                           	opt stack 0
  8122  001956                     _date_time:
  8123                           	opt stack 26
  8124                           
  8125                           ;main.c: 429: I2C_Master_Start();
  8126                           
  8127                           ;incstack = 0
  8128  001956  EC14  F017         	call	_I2C_Master_Start	;wreg free
  8129                           
  8130                           ;main.c: 430: I2C_Master_Write(0b11010000);
  8131  00195A  0E00               	movlw	0
  8132  00195C  6E13               	movwf	I2C_Master_Write@d+1,c
  8133  00195E  0ED0               	movlw	208
  8134  001960  6E12               	movwf	I2C_Master_Write@d,c
  8135  001962  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  8136                           
  8137                           ;main.c: 431: I2C_Master_Write(0x00);
  8138  001966  0E00               	movlw	0
  8139  001968  6E13               	movwf	I2C_Master_Write@d+1,c
  8140  00196A  0E00               	movlw	0
  8141  00196C  6E12               	movwf	I2C_Master_Write@d,c
  8142  00196E  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  8143                           
  8144                           ;main.c: 432: I2C_Master_Stop();
  8145  001972  EC10  F017         	call	_I2C_Master_Stop	;wreg free
  8146                           
  8147                           ;main.c: 435: I2C_Master_Start();
  8148  001976  EC14  F017         	call	_I2C_Master_Start	;wreg free
  8149                           
  8150                           ;main.c: 436: I2C_Master_Write(0b11010001);
  8151  00197A  0E00               	movlw	0
  8152  00197C  6E13               	movwf	I2C_Master_Write@d+1,c
  8153  00197E  0ED1               	movlw	209
  8154  001980  6E12               	movwf	I2C_Master_Write@d,c
  8155  001982  EC0B  F017         	call	_I2C_Master_Write	;wreg free
  8156                           
  8157                           ;main.c: 437: for(unsigned char i=0;i<0x06;i++){
  8158  001986  0E00               	movlw	0
  8159  001988  6E6C               	movwf	date_time@i,c
  8160  00198A                     l4019:
  8161  00198A  0E05               	movlw	5
  8162  00198C  646C               	cpfsgt	date_time@i,c
  8163  00198E  D001               	goto	l4023
  8164  001990  D010               	goto	l4029
  8165  001992                     l4023:
  8166                           
  8167                           ;main.c: 438: time[i] = I2C_Master_Read(1);
  8168  001992  506C               	movf	date_time@i,w,c
  8169  001994  0D01               	mullw	1
  8170  001996  50F3               	movf	prodl,w,c
  8171  001998  0100               	movlb	0	; () banked
  8172  00199A  25C5               	addwf	date_time@time& (0+255),w,b
  8173  00199C  6ED9               	movwf	fsr2l,c
  8174  00199E  50F4               	movf	prodh,w,c
  8175  0019A0  0100               	movlb	0	; () banked
  8176  0019A2  21C6               	addwfc	(date_time@time+1)& (0+255),w,b
  8177  0019A4  6EDA               	movwf	fsr2h,c
  8178  0019A6  0E01               	movlw	1
  8179  0019A8  ECA7  F016         	call	_I2C_Master_Read
  8180  0019AC  6EDF               	movwf	indf2,c
  8181  0019AE  2A6C               	incf	date_time@i,f,c
  8182  0019B0  D7EC               	goto	l4019
  8183  0019B2                     l4029:
  8184                           
  8185                           ;main.c: 439: }
  8186                           ;main.c: 440: time[6] = I2C_Master_Read(0);
  8187  0019B2  0100               	movlb	0	; () banked
  8188  0019B4  EE20 F006          	lfsr	2,6
  8189  0019B8  51C5               	movf	date_time@time& (0+255),w,b
  8190  0019BA  26D9               	addwf	fsr2l,f,c
  8191  0019BC  51C6               	movf	(date_time@time+1)& (0+255),w,b
  8192  0019BE  22DA               	addwfc	fsr2h,f,c
  8193  0019C0  0E00               	movlw	0
  8194  0019C2  ECA7  F016         	call	_I2C_Master_Read
  8195  0019C6  6EDF               	movwf	indf2,c
  8196                           
  8197                           ;main.c: 441: I2C_Master_Stop();
  8198  0019C8  EC10  F017         	call	_I2C_Master_Stop	;wreg free
  8199                           
  8200                           ;main.c: 444: lcdInst(0b10000000);;
  8201  0019CC  0E80               	movlw	128
  8202  0019CE  EC05  F017         	call	_lcdInst
  8203                           
  8204                           ;main.c: 445: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  8205  0019D2  0EFF               	movlw	low STR_18
  8206  0019D4  0100               	movlb	0	; () banked
  8207  0019D6  6FAF               	movwf	printf@f& (0+255),b
  8208  0019D8  0EFE               	movlw	high STR_18
  8209  0019DA  0100               	movlb	0	; () banked
  8210  0019DC  6FB0               	movwf	(printf@f+1)& (0+255),b
  8211  0019DE  0100               	movlb	0	; () banked
  8212  0019E0  EE20 F005          	lfsr	2,5
  8213  0019E4  51C5               	movf	date_time@time& (0+255),w,b
  8214  0019E6  26D9               	addwf	fsr2l,f,c
  8215  0019E8  51C6               	movf	(date_time@time+1)& (0+255),w,b
  8216  0019EA  22DA               	addwfc	fsr2h,f,c
  8217  0019EC  50DF               	movf	indf2,w,c
  8218  0019EE  0100               	movlb	0	; () banked
  8219  0019F0  6FC7               	movwf	??_date_time& (0+255),b
  8220  0019F2  0100               	movlb	0	; () banked
  8221  0019F4  51C7               	movf	??_date_time& (0+255),w,b
  8222  0019F6  0100               	movlb	0	; () banked
  8223  0019F8  6FB1               	movwf	(?_printf+2)& (0+255),b
  8224  0019FA  6BB2               	clrf	(?_printf+3)& (0+255),b
  8225  0019FC  0100               	movlb	0	; () banked
  8226  0019FE  EE20 F004          	lfsr	2,4
  8227  001A02  51C5               	movf	date_time@time& (0+255),w,b
  8228  001A04  26D9               	addwf	fsr2l,f,c
  8229  001A06  51C6               	movf	(date_time@time+1)& (0+255),w,b
  8230  001A08  22DA               	addwfc	fsr2h,f,c
  8231  001A0A  50DF               	movf	indf2,w,c
  8232  001A0C  0100               	movlb	0	; () banked
  8233  001A0E  6FC8               	movwf	(??_date_time+1)& (0+255),b
  8234  001A10  0100               	movlb	0	; () banked
  8235  001A12  51C8               	movf	(??_date_time+1)& (0+255),w,b
  8236  001A14  0100               	movlb	0	; () banked
  8237  001A16  6FB3               	movwf	(?_printf+4)& (0+255),b
  8238  001A18  6BB4               	clrf	(?_printf+5)& (0+255),b
  8239  001A1A  0100               	movlb	0	; () banked
  8240  001A1C  EE20 F006          	lfsr	2,6
  8241  001A20  51C5               	movf	date_time@time& (0+255),w,b
  8242  001A22  26D9               	addwf	fsr2l,f,c
  8243  001A24  51C6               	movf	(date_time@time+1)& (0+255),w,b
  8244  001A26  22DA               	addwfc	fsr2h,f,c
  8245  001A28  50DF               	movf	indf2,w,c
  8246  001A2A  0100               	movlb	0	; () banked
  8247  001A2C  6FC9               	movwf	(??_date_time+2)& (0+255),b
  8248  001A2E  0100               	movlb	0	; () banked
  8249  001A30  51C9               	movf	(??_date_time+2)& (0+255),w,b
  8250  001A32  0100               	movlb	0	; () banked
  8251  001A34  6FB5               	movwf	(?_printf+6)& (0+255),b
  8252  001A36  6BB6               	clrf	(?_printf+7)& (0+255),b
  8253  001A38  ECD9  F004         	call	_printf	;wreg free
  8254                           
  8255                           ;main.c: 446: lcdInst(0b11000000);;
  8256  001A3C  0EC0               	movlw	192
  8257  001A3E  EC05  F017         	call	_lcdInst
  8258                           
  8259                           ;main.c: 447: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  8260  001A42  0E16               	movlw	low STR_19
  8261  001A44  0100               	movlb	0	; () banked
  8262  001A46  6FAF               	movwf	printf@f& (0+255),b
  8263  001A48  0EFF               	movlw	high STR_19
  8264  001A4A  0100               	movlb	0	; () banked
  8265  001A4C  6FB0               	movwf	(printf@f+1)& (0+255),b
  8266  001A4E  0100               	movlb	0	; () banked
  8267  001A50  EE20 F002          	lfsr	2,2
  8268  001A54  51C5               	movf	date_time@time& (0+255),w,b
  8269  001A56  26D9               	addwf	fsr2l,f,c
  8270  001A58  51C6               	movf	(date_time@time+1)& (0+255),w,b
  8271  001A5A  22DA               	addwfc	fsr2h,f,c
  8272  001A5C  50DF               	movf	indf2,w,c
  8273  001A5E  0100               	movlb	0	; () banked
  8274  001A60  6FC7               	movwf	??_date_time& (0+255),b
  8275  001A62  0100               	movlb	0	; () banked
  8276  001A64  51C7               	movf	??_date_time& (0+255),w,b
  8277  001A66  0100               	movlb	0	; () banked
  8278  001A68  6FB1               	movwf	(?_printf+2)& (0+255),b
  8279  001A6A  6BB2               	clrf	(?_printf+3)& (0+255),b
  8280  001A6C  0100               	movlb	0	; () banked
  8281  001A6E  EE20 F001          	lfsr	2,1
  8282  001A72  51C5               	movf	date_time@time& (0+255),w,b
  8283  001A74  26D9               	addwf	fsr2l,f,c
  8284  001A76  51C6               	movf	(date_time@time+1)& (0+255),w,b
  8285  001A78  22DA               	addwfc	fsr2h,f,c
  8286  001A7A  50DF               	movf	indf2,w,c
  8287  001A7C  0100               	movlb	0	; () banked
  8288  001A7E  6FC8               	movwf	(??_date_time+1)& (0+255),b
  8289  001A80  0100               	movlb	0	; () banked
  8290  001A82  51C8               	movf	(??_date_time+1)& (0+255),w,b
  8291  001A84  0100               	movlb	0	; () banked
  8292  001A86  6FB3               	movwf	(?_printf+4)& (0+255),b
  8293  001A88  6BB4               	clrf	(?_printf+5)& (0+255),b
  8294  001A8A  C0C5  FFD9         	movff	date_time@time,fsr2l
  8295  001A8E  C0C6  FFDA         	movff	date_time@time+1,fsr2h
  8296  001A92  50DF               	movf	indf2,w,c
  8297  001A94  0100               	movlb	0	; () banked
  8298  001A96  6FC9               	movwf	(??_date_time+2)& (0+255),b
  8299  001A98  0100               	movlb	0	; () banked
  8300  001A9A  51C9               	movf	(??_date_time+2)& (0+255),w,b
  8301  001A9C  0100               	movlb	0	; () banked
  8302  001A9E  6FB5               	movwf	(?_printf+6)& (0+255),b
  8303  001AA0  6BB6               	clrf	(?_printf+7)& (0+255),b
  8304  001AA2  ECD9  F004         	call	_printf	;wreg free
  8305  001AA6  0012               	return	
  8306  001AA8                     __end_of_date_time:
  8307                           	opt stack 0
  8308                           tblptru	equ	0xFF8
  8309                           tblptrh	equ	0xFF7
  8310                           tblptrl	equ	0xFF6
  8311                           tablat	equ	0xFF5
  8312                           prodh	equ	0xFF4
  8313                           prodl	equ	0xFF3
  8314                           intcon	equ	0xFF2
  8315                           intcon2	equ	0xFF1
  8316                           intcon3	equ	0xFF0
  8317                           postinc0	equ	0xFEE
  8318                           wreg	equ	0xFE8
  8319                           postdec1	equ	0xFE5
  8320                           fsr1l	equ	0xFE1
  8321                           indf2	equ	0xFDF
  8322                           postinc2	equ	0xFDE
  8323                           postdec2	equ	0xFDD
  8324                           fsr2h	equ	0xFDA
  8325                           fsr2l	equ	0xFD9
  8326                           status	equ	0xFD8
  8327                           
  8328 ;; *************** function _I2C_Master_Write *****************
  8329 ;; Defined at:
  8330 ;;		line 47 in file "I2C.c"
  8331 ;; Parameters:    Size  Location     Type
  8332 ;;  d               2   17[COMRAM] unsigned int 
  8333 ;; Auto vars:     Size  Location     Type
  8334 ;;		None
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  1    wreg      void 
  8337 ;; Registers used:
  8338 ;;		wreg, status,2, status,0, cstack
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8344 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;Total ram usage:        2 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; Hardware stack levels required when called:    2
  8351 ;; This function calls:
  8352 ;;		_I2C_Master_Wait
  8353 ;; This function is called by:
  8354 ;;		_update_time
  8355 ;;		_date_time
  8356 ;;		_read_colorsensor1
  8357 ;;		_read_colorsensor2
  8358 ;;		_set_time
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           	psect	text33
  8363  002E16                     __ptext33:
  8364                           	opt stack 0
  8365  002E16                     _I2C_Master_Write:
  8366                           	opt stack 27
  8367                           
  8368                           ;I2C.c: 49: I2C_Master_Wait();
  8369                           
  8370                           ;incstack = 0
  8371  002E16  ECEE  F016         	call	_I2C_Master_Wait	;wreg free
  8372                           
  8373                           ;I2C.c: 50: SSPBUF = d;
  8374  002E1A  C012  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8375  002E1E  0012               	return		;funcret
  8376  002E20                     __end_of_I2C_Master_Write:
  8377                           	opt stack 0
  8378                           tblptru	equ	0xFF8
  8379                           tblptrh	equ	0xFF7
  8380                           tblptrl	equ	0xFF6
  8381                           tablat	equ	0xFF5
  8382                           prodh	equ	0xFF4
  8383                           prodl	equ	0xFF3
  8384                           intcon	equ	0xFF2
  8385                           intcon2	equ	0xFF1
  8386                           intcon3	equ	0xFF0
  8387                           postinc0	equ	0xFEE
  8388                           wreg	equ	0xFE8
  8389                           postdec1	equ	0xFE5
  8390                           fsr1l	equ	0xFE1
  8391                           indf2	equ	0xFDF
  8392                           postinc2	equ	0xFDE
  8393                           postdec2	equ	0xFDD
  8394                           fsr2h	equ	0xFDA
  8395                           fsr2l	equ	0xFD9
  8396                           status	equ	0xFD8
  8397                           
  8398 ;; *************** function _I2C_Master_Stop *****************
  8399 ;; Defined at:
  8400 ;;		line 41 in file "I2C.c"
  8401 ;; Parameters:    Size  Location     Type
  8402 ;;		None
  8403 ;; Auto vars:     Size  Location     Type
  8404 ;;		None
  8405 ;; Return value:  Size  Location     Type
  8406 ;;                  2   62[None  ] int 
  8407 ;; Registers used:
  8408 ;;		wreg, status,2, status,0, cstack
  8409 ;; Tracked objects:
  8410 ;;		On entry : 0/0
  8411 ;;		On exit  : 0/0
  8412 ;;		Unchanged: 0/0
  8413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;Total ram usage:        0 bytes
  8419 ;; Hardware stack levels used:    1
  8420 ;; Hardware stack levels required when called:    2
  8421 ;; This function calls:
  8422 ;;		_I2C_Master_Wait
  8423 ;; This function is called by:
  8424 ;;		_update_time
  8425 ;;		_date_time
  8426 ;;		_read_colorsensor1
  8427 ;;		_read_colorsensor2
  8428 ;;		_set_time
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           	psect	text34
  8433  002E20                     __ptext34:
  8434                           	opt stack 0
  8435  002E20                     _I2C_Master_Stop:
  8436                           	opt stack 27
  8437                           
  8438                           ;I2C.c: 43: I2C_Master_Wait();
  8439                           
  8440                           ;incstack = 0
  8441  002E20  ECEE  F016         	call	_I2C_Master_Wait	;wreg free
  8442                           
  8443                           ;I2C.c: 44: PEN = 1;
  8444  002E24  84C5               	bsf	4037,2,c	;volatile
  8445  002E26  0012               	return		;funcret
  8446  002E28                     __end_of_I2C_Master_Stop:
  8447                           	opt stack 0
  8448                           tblptru	equ	0xFF8
  8449                           tblptrh	equ	0xFF7
  8450                           tblptrl	equ	0xFF6
  8451                           tablat	equ	0xFF5
  8452                           prodh	equ	0xFF4
  8453                           prodl	equ	0xFF3
  8454                           intcon	equ	0xFF2
  8455                           intcon2	equ	0xFF1
  8456                           intcon3	equ	0xFF0
  8457                           postinc0	equ	0xFEE
  8458                           wreg	equ	0xFE8
  8459                           postdec1	equ	0xFE5
  8460                           fsr1l	equ	0xFE1
  8461                           indf2	equ	0xFDF
  8462                           postinc2	equ	0xFDE
  8463                           postdec2	equ	0xFDD
  8464                           fsr2h	equ	0xFDA
  8465                           fsr2l	equ	0xFD9
  8466                           status	equ	0xFD8
  8467                           
  8468 ;; *************** function _I2C_Master_Start *****************
  8469 ;; Defined at:
  8470 ;;		line 29 in file "I2C.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;		None
  8473 ;; Auto vars:     Size  Location     Type
  8474 ;;		None
  8475 ;; Return value:  Size  Location     Type
  8476 ;;                  2   58[None  ] int 
  8477 ;; Registers used:
  8478 ;;		wreg, status,2, status,0, cstack
  8479 ;; Tracked objects:
  8480 ;;		On entry : 0/0
  8481 ;;		On exit  : 0/0
  8482 ;;		Unchanged: 0/0
  8483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8488 ;;Total ram usage:        0 bytes
  8489 ;; Hardware stack levels used:    1
  8490 ;; Hardware stack levels required when called:    2
  8491 ;; This function calls:
  8492 ;;		_I2C_Master_Wait
  8493 ;; This function is called by:
  8494 ;;		_update_time
  8495 ;;		_date_time
  8496 ;;		_read_colorsensor1
  8497 ;;		_read_colorsensor2
  8498 ;;		_set_time
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           	psect	text35
  8503  002E28                     __ptext35:
  8504                           	opt stack 0
  8505  002E28                     _I2C_Master_Start:
  8506                           	opt stack 27
  8507                           
  8508                           ;I2C.c: 31: I2C_Master_Wait();
  8509                           
  8510                           ;incstack = 0
  8511  002E28  ECEE  F016         	call	_I2C_Master_Wait	;wreg free
  8512                           
  8513                           ;I2C.c: 32: SEN = 1;
  8514  002E2C  80C5               	bsf	4037,0,c	;volatile
  8515  002E2E  0012               	return		;funcret
  8516  002E30                     __end_of_I2C_Master_Start:
  8517                           	opt stack 0
  8518                           tblptru	equ	0xFF8
  8519                           tblptrh	equ	0xFF7
  8520                           tblptrl	equ	0xFF6
  8521                           tablat	equ	0xFF5
  8522                           prodh	equ	0xFF4
  8523                           prodl	equ	0xFF3
  8524                           intcon	equ	0xFF2
  8525                           intcon2	equ	0xFF1
  8526                           intcon3	equ	0xFF0
  8527                           postinc0	equ	0xFEE
  8528                           wreg	equ	0xFE8
  8529                           postdec1	equ	0xFE5
  8530                           fsr1l	equ	0xFE1
  8531                           indf2	equ	0xFDF
  8532                           postinc2	equ	0xFDE
  8533                           postdec2	equ	0xFDD
  8534                           fsr2h	equ	0xFDA
  8535                           fsr2l	equ	0xFD9
  8536                           status	equ	0xFD8
  8537                           
  8538 ;; *************** function _I2C_Master_Read *****************
  8539 ;; Defined at:
  8540 ;;		line 53 in file "I2C.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;  a               1    wreg     unsigned char 
  8543 ;; Auto vars:     Size  Location     Type
  8544 ;;  a               1   17[COMRAM] unsigned char 
  8545 ;;  temp            1   18[COMRAM] unsigned char 
  8546 ;; Return value:  Size  Location     Type
  8547 ;;                  1    wreg      unsigned char 
  8548 ;; Registers used:
  8549 ;;		wreg, status,2, status,0, cstack
  8550 ;; Tracked objects:
  8551 ;;		On entry : 0/0
  8552 ;;		On exit  : 0/0
  8553 ;;		Unchanged: 0/0
  8554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8556 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8558 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8559 ;;Total ram usage:        2 bytes
  8560 ;; Hardware stack levels used:    1
  8561 ;; Hardware stack levels required when called:    2
  8562 ;; This function calls:
  8563 ;;		_I2C_Master_Wait
  8564 ;; This function is called by:
  8565 ;;		_update_time
  8566 ;;		_date_time
  8567 ;;		_read_colorsensor1
  8568 ;;		_read_colorsensor2
  8569 ;; This function uses a non-reentrant model
  8570 ;;
  8571                           
  8572                           	psect	text36
  8573  002D4E                     __ptext36:
  8574                           	opt stack 0
  8575  002D4E                     _I2C_Master_Read:
  8576                           	opt stack 27
  8577                           
  8578                           ;incstack = 0
  8579                           ;I2C_Master_Read@a stored from wreg
  8580  002D4E  6E12               	movwf	I2C_Master_Read@a,c
  8581                           
  8582                           ;I2C.c: 55: unsigned char temp;
  8583                           ;I2C.c: 56: I2C_Master_Wait();
  8584  002D50  ECEE  F016         	call	_I2C_Master_Wait	;wreg free
  8585                           
  8586                           ;I2C.c: 57: RCEN = 1;
  8587  002D54  86C5               	bsf	4037,3,c	;volatile
  8588                           
  8589                           ;I2C.c: 58: I2C_Master_Wait();
  8590  002D56  ECEE  F016         	call	_I2C_Master_Wait	;wreg free
  8591                           
  8592                           ;I2C.c: 59: temp = SSPBUF;
  8593  002D5A  CFC9 F013          	movff	4041,I2C_Master_Read@temp	;volatile
  8594                           
  8595                           ;I2C.c: 60: I2C_Master_Wait();
  8596  002D5E  ECEE  F016         	call	_I2C_Master_Wait	;wreg free
  8597                           
  8598                           ;I2C.c: 61: ACKDT = (a)?0:1;
  8599  002D62  5012               	movf	I2C_Master_Read@a,w,c
  8600  002D64  A4D8               	btfss	status,2,c
  8601  002D66  D002               	goto	u2880
  8602  002D68  8AC5               	bsf	4037,5,c	;volatile
  8603  002D6A  D001               	goto	l3373
  8604  002D6C                     u2880:
  8605  002D6C  9AC5               	bcf	4037,5,c	;volatile
  8606  002D6E                     l3373:
  8607                           
  8608                           ;I2C.c: 62: ACKEN = 1;
  8609  002D6E  88C5               	bsf	4037,4,c	;volatile
  8610                           
  8611                           ;I2C.c: 63: return temp;
  8612  002D70  5013               	movf	I2C_Master_Read@temp,w,c
  8613  002D72  0012               	return	
  8614  002D74                     __end_of_I2C_Master_Read:
  8615                           	opt stack 0
  8616                           tblptru	equ	0xFF8
  8617                           tblptrh	equ	0xFF7
  8618                           tblptrl	equ	0xFF6
  8619                           tablat	equ	0xFF5
  8620                           prodh	equ	0xFF4
  8621                           prodl	equ	0xFF3
  8622                           intcon	equ	0xFF2
  8623                           intcon2	equ	0xFF1
  8624                           intcon3	equ	0xFF0
  8625                           postinc0	equ	0xFEE
  8626                           wreg	equ	0xFE8
  8627                           postdec1	equ	0xFE5
  8628                           fsr1l	equ	0xFE1
  8629                           indf2	equ	0xFDF
  8630                           postinc2	equ	0xFDE
  8631                           postdec2	equ	0xFDD
  8632                           fsr2h	equ	0xFDA
  8633                           fsr2l	equ	0xFD9
  8634                           status	equ	0xFD8
  8635                           
  8636 ;; *************** function _I2C_Master_Wait *****************
  8637 ;; Defined at:
  8638 ;;		line 24 in file "I2C.c"
  8639 ;; Parameters:    Size  Location     Type
  8640 ;;		None
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;		None
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  1    wreg      void 
  8645 ;; Registers used:
  8646 ;;		wreg, status,2, status,0
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8655 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8656 ;;Total ram usage:        1 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:    1
  8659 ;; This function calls:
  8660 ;;		Nothing
  8661 ;; This function is called by:
  8662 ;;		_I2C_Master_Start
  8663 ;;		_I2C_Master_Stop
  8664 ;;		_I2C_Master_Write
  8665 ;;		_I2C_Master_Read
  8666 ;;		_I2C_Master_RepeatedStart
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           	psect	text37
  8671  002DDC                     __ptext37:
  8672                           	opt stack 0
  8673  002DDC                     _I2C_Master_Wait:
  8674                           	opt stack 27
  8675  002DDC                     l357:
  8676  002DDC  B4C7               	btfsc	4039,2,c	;volatile
  8677  002DDE  D7FE               	goto	l357
  8678  002DE0  CFC5 F011          	movff	4037,??_I2C_Master_Wait	;volatile
  8679  002DE4  0E1F               	movlw	31
  8680  002DE6  1611               	andwf	??_I2C_Master_Wait,f,c
  8681  002DE8  B4D8               	btfsc	status,2,c
  8682  002DEA  0012               	return	
  8683  002DEC  D7F7               	goto	l357
  8684  002DEE                     __end_of_I2C_Master_Wait:
  8685                           	opt stack 0
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           intcon	equ	0xFF2
  8693                           intcon2	equ	0xFF1
  8694                           intcon3	equ	0xFF0
  8695                           postinc0	equ	0xFEE
  8696                           wreg	equ	0xFE8
  8697                           postdec1	equ	0xFE5
  8698                           fsr1l	equ	0xFE1
  8699                           indf2	equ	0xFDF
  8700                           postinc2	equ	0xFDE
  8701                           postdec2	equ	0xFDD
  8702                           fsr2h	equ	0xFDA
  8703                           fsr2l	equ	0xFD9
  8704                           status	equ	0xFD8
  8705                           
  8706 ;; *************** function _bottle_count *****************
  8707 ;; Defined at:
  8708 ;;		line 374 in file "main.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;  bot_count       2   69[BANK0 ] PTR unsigned char 
  8711 ;;		 -> main@bot_count(4), 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;		None
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  1    wreg      void 
  8716 ;; Registers used:
  8717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8723 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8725 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8726 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8727 ;;Total ram usage:        7 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    4
  8730 ;; This function calls:
  8731 ;;		_lcdInst
  8732 ;;		_printf
  8733 ;; This function is called by:
  8734 ;;		_main
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           	psect	text38
  8739  000D80                     __ptext38:
  8740                           	opt stack 0
  8741  000D80                     _bottle_count:
  8742                           	opt stack 26
  8743                           
  8744                           ;main.c: 375: while (bot_type != O){
  8745                           
  8746                           ;incstack = 0
  8747  000D80  D109               	goto	l4081
  8748  000D82                     l4045:
  8749                           
  8750                           ;main.c: 378: lcdInst(0b10000000);;
  8751  000D82  0E80               	movlw	128
  8752  000D84  EC05  F017         	call	_lcdInst
  8753                           
  8754                           ;main.c: 379: printf("Total Bottle    ");
  8755  000D88  0E87               	movlw	low STR_6
  8756  000D8A  0100               	movlb	0	; () banked
  8757  000D8C  6FAF               	movwf	printf@f& (0+255),b
  8758  000D8E  0EFF               	movlw	high STR_6
  8759  000D90  0100               	movlb	0	; () banked
  8760  000D92  6FB0               	movwf	(printf@f+1)& (0+255),b
  8761  000D94  ECD9  F004         	call	_printf	;wreg free
  8762                           
  8763                           ;main.c: 380: lcdInst(0b11000000);;
  8764  000D98  0EC0               	movlw	192
  8765  000D9A  EC05  F017         	call	_lcdInst
  8766                           
  8767                           ;main.c: 381: printf("Count: %u       ", (bot_count[0] + bot_count[1] + bot_count[2] + b
      +                          ot_count[3]));
  8768  000D9E  0E76               	movlw	low STR_7
  8769  000DA0  0100               	movlb	0	; () banked
  8770  000DA2  6FAF               	movwf	printf@f& (0+255),b
  8771  000DA4  0EFF               	movlw	high STR_7
  8772  000DA6  0100               	movlb	0	; () banked
  8773  000DA8  6FB0               	movwf	(printf@f+1)& (0+255),b
  8774  000DAA  0100               	movlb	0	; () banked
  8775  000DAC  EE20 F003          	lfsr	2,3
  8776  000DB0  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8777  000DB2  26D9               	addwf	fsr2l,f,c
  8778  000DB4  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8779  000DB6  22DA               	addwfc	fsr2h,f,c
  8780  000DB8  50DF               	movf	indf2,w,c
  8781  000DBA  0100               	movlb	0	; () banked
  8782  000DBC  6FC7               	movwf	??_bottle_count& (0+255),b
  8783  000DBE  C0C5  FFD9         	movff	bottle_count@bot_count,fsr2l
  8784  000DC2  C0C6  FFDA         	movff	bottle_count@bot_count+1,fsr2h
  8785  000DC6  50DF               	movf	indf2,w,c
  8786  000DC8  0100               	movlb	0	; () banked
  8787  000DCA  6FC8               	movwf	(??_bottle_count+1)& (0+255),b
  8788  000DCC  6BC9               	clrf	(??_bottle_count+2)& (0+255),b
  8789  000DCE  0100               	movlb	0	; () banked
  8790  000DD0  EE20 F001          	lfsr	2,1
  8791  000DD4  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8792  000DD6  26D9               	addwf	fsr2l,f,c
  8793  000DD8  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8794  000DDA  22DA               	addwfc	fsr2h,f,c
  8795  000DDC  50DF               	movf	indf2,w,c
  8796  000DDE  0100               	movlb	0	; () banked
  8797  000DE0  6FCA               	movwf	(??_bottle_count+3)& (0+255),b
  8798  000DE2  0100               	movlb	0	; () banked
  8799  000DE4  51CA               	movf	(??_bottle_count+3)& (0+255),w,b
  8800  000DE6  0100               	movlb	0	; () banked
  8801  000DE8  27C8               	addwf	(??_bottle_count+1)& (0+255),f,b
  8802  000DEA  0E00               	movlw	0
  8803  000DEC  23C9               	addwfc	(??_bottle_count+2)& (0+255),f,b
  8804  000DEE  0100               	movlb	0	; () banked
  8805  000DF0  EE20 F002          	lfsr	2,2
  8806  000DF4  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8807  000DF6  26D9               	addwf	fsr2l,f,c
  8808  000DF8  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8809  000DFA  22DA               	addwfc	fsr2h,f,c
  8810  000DFC  50DF               	movf	indf2,w,c
  8811  000DFE  0100               	movlb	0	; () banked
  8812  000E00  6FCB               	movwf	(??_bottle_count+4)& (0+255),b
  8813  000E02  0100               	movlb	0	; () banked
  8814  000E04  51CB               	movf	(??_bottle_count+4)& (0+255),w,b
  8815  000E06  0100               	movlb	0	; () banked
  8816  000E08  27C8               	addwf	(??_bottle_count+1)& (0+255),f,b
  8817  000E0A  0E00               	movlw	0
  8818  000E0C  23C9               	addwfc	(??_bottle_count+2)& (0+255),f,b
  8819  000E0E  0100               	movlb	0	; () banked
  8820  000E10  51C7               	movf	??_bottle_count& (0+255),w,b
  8821  000E12  0100               	movlb	0	; () banked
  8822  000E14  25C8               	addwf	(??_bottle_count+1)& (0+255),w,b
  8823  000E16  0100               	movlb	0	; () banked
  8824  000E18  6FB1               	movwf	(?_printf+2)& (0+255),b
  8825  000E1A  0100               	movlb	0	; () banked
  8826  000E1C  0E00               	movlw	0
  8827  000E1E  0100               	movlb	0	; () banked
  8828  000E20  21C9               	addwfc	(??_bottle_count+2)& (0+255),w,b
  8829  000E22  0100               	movlb	0	; () banked
  8830  000E24  6FB2               	movwf	(?_printf+3)& (0+255),b
  8831  000E26  ECD9  F004         	call	_printf	;wreg free
  8832                           
  8833                           ;main.c: 382: break;
  8834  000E2A  D0A6               	goto	l4079
  8835  000E2C                     l4051:
  8836                           
  8837                           ;main.c: 384: lcdInst(0b10000000);;
  8838  000E2C  0E80               	movlw	128
  8839  000E2E  EC05  F017         	call	_lcdInst
  8840                           
  8841                           ;main.c: 385: printf("YOP With Cap    ");
  8842  000E32  0E98               	movlw	low STR_8
  8843  000E34  0100               	movlb	0	; () banked
  8844  000E36  6FAF               	movwf	printf@f& (0+255),b
  8845  000E38  0EFF               	movlw	high STR_8
  8846  000E3A  0100               	movlb	0	; () banked
  8847  000E3C  6FB0               	movwf	(printf@f+1)& (0+255),b
  8848  000E3E  ECD9  F004         	call	_printf	;wreg free
  8849                           
  8850                           ;main.c: 386: lcdInst(0b11000000);;
  8851  000E42  0EC0               	movlw	192
  8852  000E44  EC05  F017         	call	_lcdInst
  8853                           
  8854                           ;main.c: 387: printf("Count: %u       ", bot_count[0]);
  8855  000E48  0E76               	movlw	low STR_7
  8856  000E4A  0100               	movlb	0	; () banked
  8857  000E4C  6FAF               	movwf	printf@f& (0+255),b
  8858  000E4E  0EFF               	movlw	high STR_7
  8859  000E50  0100               	movlb	0	; () banked
  8860  000E52  6FB0               	movwf	(printf@f+1)& (0+255),b
  8861  000E54  C0C5  FFD9         	movff	bottle_count@bot_count,fsr2l
  8862  000E58  C0C6  FFDA         	movff	bottle_count@bot_count+1,fsr2h
  8863  000E5C  50DF               	movf	indf2,w,c
  8864  000E5E  0100               	movlb	0	; () banked
  8865  000E60  6FC7               	movwf	??_bottle_count& (0+255),b
  8866  000E62  0100               	movlb	0	; () banked
  8867  000E64  51C7               	movf	??_bottle_count& (0+255),w,b
  8868  000E66  0100               	movlb	0	; () banked
  8869  000E68  6FB1               	movwf	(?_printf+2)& (0+255),b
  8870  000E6A  6BB2               	clrf	(?_printf+3)& (0+255),b
  8871  000E6C  ECD9  F004         	call	_printf	;wreg free
  8872                           
  8873                           ;main.c: 388: break;
  8874  000E70  D083               	goto	l4079
  8875  000E72                     l4057:
  8876                           
  8877                           ;main.c: 390: lcdInst(0b10000000);;
  8878  000E72  0E80               	movlw	128
  8879  000E74  EC05  F017         	call	_lcdInst
  8880                           
  8881                           ;main.c: 391: printf("YOP With No Cap ");
  8882  000E78  0EDC               	movlw	low STR_10
  8883  000E7A  0100               	movlb	0	; () banked
  8884  000E7C  6FAF               	movwf	printf@f& (0+255),b
  8885  000E7E  0EFF               	movlw	high STR_10
  8886  000E80  0100               	movlb	0	; () banked
  8887  000E82  6FB0               	movwf	(printf@f+1)& (0+255),b
  8888  000E84  ECD9  F004         	call	_printf	;wreg free
  8889                           
  8890                           ;main.c: 392: lcdInst(0b11000000);;
  8891  000E88  0EC0               	movlw	192
  8892  000E8A  EC05  F017         	call	_lcdInst
  8893                           
  8894                           ;main.c: 393: printf("Count: %u       ", bot_count[1]);
  8895  000E8E  0E76               	movlw	low STR_7
  8896  000E90  0100               	movlb	0	; () banked
  8897  000E92  6FAF               	movwf	printf@f& (0+255),b
  8898  000E94  0EFF               	movlw	high STR_7
  8899  000E96  0100               	movlb	0	; () banked
  8900  000E98  6FB0               	movwf	(printf@f+1)& (0+255),b
  8901  000E9A  0100               	movlb	0	; () banked
  8902  000E9C  EE20 F001          	lfsr	2,1
  8903  000EA0  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8904  000EA2  26D9               	addwf	fsr2l,f,c
  8905  000EA4  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8906  000EA6  22DA               	addwfc	fsr2h,f,c
  8907  000EA8  50DF               	movf	indf2,w,c
  8908  000EAA  0100               	movlb	0	; () banked
  8909  000EAC  6FC7               	movwf	??_bottle_count& (0+255),b
  8910  000EAE  0100               	movlb	0	; () banked
  8911  000EB0  51C7               	movf	??_bottle_count& (0+255),w,b
  8912  000EB2  0100               	movlb	0	; () banked
  8913  000EB4  6FB1               	movwf	(?_printf+2)& (0+255),b
  8914  000EB6  6BB2               	clrf	(?_printf+3)& (0+255),b
  8915  000EB8  ECD9  F004         	call	_printf	;wreg free
  8916                           
  8917                           ;main.c: 394: break;
  8918  000EBC  D05D               	goto	l4079
  8919  000EBE                     l4063:
  8920                           
  8921                           ;main.c: 396: lcdInst(0b10000000);;
  8922  000EBE  0E80               	movlw	128
  8923  000EC0  EC05  F017         	call	_lcdInst
  8924                           
  8925                           ;main.c: 397: printf("ESKA With Cap   ");
  8926  000EC4  0EA9               	movlw	low STR_12
  8927  000EC6  0100               	movlb	0	; () banked
  8928  000EC8  6FAF               	movwf	printf@f& (0+255),b
  8929  000ECA  0EFF               	movlw	high STR_12
  8930  000ECC  0100               	movlb	0	; () banked
  8931  000ECE  6FB0               	movwf	(printf@f+1)& (0+255),b
  8932  000ED0  ECD9  F004         	call	_printf	;wreg free
  8933                           
  8934                           ;main.c: 398: lcdInst(0b11000000);;
  8935  000ED4  0EC0               	movlw	192
  8936  000ED6  EC05  F017         	call	_lcdInst
  8937                           
  8938                           ;main.c: 399: printf("Count: %u       ", bot_count[2]);
  8939  000EDA  0E76               	movlw	low STR_7
  8940  000EDC  0100               	movlb	0	; () banked
  8941  000EDE  6FAF               	movwf	printf@f& (0+255),b
  8942  000EE0  0EFF               	movlw	high STR_7
  8943  000EE2  0100               	movlb	0	; () banked
  8944  000EE4  6FB0               	movwf	(printf@f+1)& (0+255),b
  8945  000EE6  0100               	movlb	0	; () banked
  8946  000EE8  EE20 F002          	lfsr	2,2
  8947  000EEC  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8948  000EEE  26D9               	addwf	fsr2l,f,c
  8949  000EF0  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8950  000EF2  22DA               	addwfc	fsr2h,f,c
  8951  000EF4  50DF               	movf	indf2,w,c
  8952  000EF6  0100               	movlb	0	; () banked
  8953  000EF8  6FC7               	movwf	??_bottle_count& (0+255),b
  8954  000EFA  0100               	movlb	0	; () banked
  8955  000EFC  51C7               	movf	??_bottle_count& (0+255),w,b
  8956  000EFE  0100               	movlb	0	; () banked
  8957  000F00  6FB1               	movwf	(?_printf+2)& (0+255),b
  8958  000F02  6BB2               	clrf	(?_printf+3)& (0+255),b
  8959  000F04  ECD9  F004         	call	_printf	;wreg free
  8960                           
  8961                           ;main.c: 400: break;
  8962  000F08  D037               	goto	l4079
  8963  000F0A                     l4069:
  8964                           
  8965                           ;main.c: 402: lcdInst(0b10000000);;
  8966  000F0A  0E80               	movlw	128
  8967  000F0C  EC05  F017         	call	_lcdInst
  8968                           
  8969                           ;main.c: 403: printf("ESKA With No Cap");
  8970  000F10  0EED               	movlw	low STR_14
  8971  000F12  0100               	movlb	0	; () banked
  8972  000F14  6FAF               	movwf	printf@f& (0+255),b
  8973  000F16  0EFF               	movlw	high STR_14
  8974  000F18  0100               	movlb	0	; () banked
  8975  000F1A  6FB0               	movwf	(printf@f+1)& (0+255),b
  8976  000F1C  ECD9  F004         	call	_printf	;wreg free
  8977                           
  8978                           ;main.c: 404: lcdInst(0b11000000);;
  8979  000F20  0EC0               	movlw	192
  8980  000F22  EC05  F017         	call	_lcdInst
  8981                           
  8982                           ;main.c: 405: printf("Count: %u       ", bot_count[3]);
  8983  000F26  0E76               	movlw	low STR_7
  8984  000F28  0100               	movlb	0	; () banked
  8985  000F2A  6FAF               	movwf	printf@f& (0+255),b
  8986  000F2C  0EFF               	movlw	high STR_7
  8987  000F2E  0100               	movlb	0	; () banked
  8988  000F30  6FB0               	movwf	(printf@f+1)& (0+255),b
  8989  000F32  0100               	movlb	0	; () banked
  8990  000F34  EE20 F003          	lfsr	2,3
  8991  000F38  51C5               	movf	bottle_count@bot_count& (0+255),w,b
  8992  000F3A  26D9               	addwf	fsr2l,f,c
  8993  000F3C  51C6               	movf	(bottle_count@bot_count+1)& (0+255),w,b
  8994  000F3E  22DA               	addwfc	fsr2h,f,c
  8995  000F40  50DF               	movf	indf2,w,c
  8996  000F42  0100               	movlb	0	; () banked
  8997  000F44  6FC7               	movwf	??_bottle_count& (0+255),b
  8998  000F46  0100               	movlb	0	; () banked
  8999  000F48  51C7               	movf	??_bottle_count& (0+255),w,b
  9000  000F4A  0100               	movlb	0	; () banked
  9001  000F4C  6FB1               	movwf	(?_printf+2)& (0+255),b
  9002  000F4E  6BB2               	clrf	(?_printf+3)& (0+255),b
  9003  000F50  ECD9  F004         	call	_printf	;wreg free
  9004                           
  9005                           ;main.c: 407: }
  9006                           
  9007                           ;main.c: 406: break;
  9008  000F54  D011               	goto	l4079
  9009  000F56                     l4077:
  9010  000F56  0100               	movlb	0	; () banked
  9011  000F58  51FC               	movf	_bot_type& (0+255),w,b
  9012                           
  9013                           ; Switch size 1, requested type "space"
  9014                           ; Number of cases is 5, Range of values is 0 to 4
  9015                           ; switch strategies available:
  9016                           ; Name         Instructions Cycles
  9017                           ; simple_byte           16     9 (average)
  9018                           ;	Chosen strategy is simple_byte
  9019  000F5A  0A00               	xorlw	0	; case 0
  9020  000F5C  B4D8               	btfsc	status,2,c
  9021  000F5E  D711               	goto	l4045
  9022  000F60  0A01               	xorlw	1	; case 1
  9023  000F62  B4D8               	btfsc	status,2,c
  9024  000F64  D763               	goto	l4051
  9025  000F66  0A03               	xorlw	3	; case 2
  9026  000F68  B4D8               	btfsc	status,2,c
  9027  000F6A  D783               	goto	l4057
  9028  000F6C  0A01               	xorlw	1	; case 3
  9029  000F6E  B4D8               	btfsc	status,2,c
  9030  000F70  D7A6               	goto	l4063
  9031  000F72  0A07               	xorlw	7	; case 4
  9032  000F74  B4D8               	btfsc	status,2,c
  9033  000F76  D7C9               	goto	l4069
  9034  000F78                     l4079:
  9035                           
  9036                           ;main.c: 408: _delay((unsigned long)((100)*(10000000/4000.0)));
  9037  000F78  0E02               	movlw	2
  9038  000F7A  0100               	movlb	0	; () banked
  9039  000F7C  6FC8               	movwf	(??_bottle_count+1)& (0+255),b
  9040  000F7E  0E45               	movlw	69
  9041  000F80  0100               	movlb	0	; () banked
  9042  000F82  6FC7               	movwf	??_bottle_count& (0+255),b
  9043  000F84  0EA9               	movlw	169
  9044  000F86                     u4137:
  9045  000F86  2EE8               	decfsz	wreg,f,c
  9046  000F88  D7FE               	bra	u4137
  9047  000F8A  2FC7               	decfsz	??_bottle_count& (0+255),f,b
  9048  000F8C  D7FC               	bra	u4137
  9049  000F8E  2FC8               	decfsz	(??_bottle_count+1)& (0+255),f,b
  9050  000F90  D7FA               	bra	u4137
  9051  000F92  D000               	nop2	
  9052  000F94                     l4081:
  9053  000F94  0E05               	movlw	5
  9054  000F96  0100               	movlb	0	; () banked
  9055  000F98  19FC               	xorwf	_bot_type& (0+255),w,b
  9056  000F9A  B4D8               	btfsc	status,2,c
  9057  000F9C  0012               	return	
  9058  000F9E  D7DB               	goto	l4077
  9059  000FA0                     __end_of_bottle_count:
  9060                           	opt stack 0
  9061                           tblptru	equ	0xFF8
  9062                           tblptrh	equ	0xFF7
  9063                           tblptrl	equ	0xFF6
  9064                           tablat	equ	0xFF5
  9065                           prodh	equ	0xFF4
  9066                           prodl	equ	0xFF3
  9067                           intcon	equ	0xFF2
  9068                           intcon2	equ	0xFF1
  9069                           intcon3	equ	0xFF0
  9070                           postinc0	equ	0xFEE
  9071                           wreg	equ	0xFE8
  9072                           postdec1	equ	0xFE5
  9073                           fsr1l	equ	0xFE1
  9074                           indf2	equ	0xFDF
  9075                           postinc2	equ	0xFDE
  9076                           postdec2	equ	0xFDD
  9077                           fsr2h	equ	0xFDA
  9078                           fsr2l	equ	0xFD9
  9079                           status	equ	0xFD8
  9080                           
  9081 ;; *************** function _printf *****************
  9082 ;; Defined at:
  9083 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  9084 ;; Parameters:    Size  Location     Type
  9085 ;;  f               2   47[BANK0 ] PTR const unsigned char 
  9086 ;;		 -> STR_19(23), STR_18(23), STR_17(17), STR_16(17), 
  9087 ;;		 -> STR_15(17), STR_14(17), STR_13(17), STR_12(17), 
  9088 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  9089 ;;		 -> STR_7(17), STR_6(17), STR_5(19), STR_4(17), 
  9090 ;;		 -> STR_3(20), STR_2(20), STR_1(27), 
  9091 ;; Auto vars:     Size  Location     Type
  9092 ;;  idx             1   59[BANK0 ] unsigned char 
  9093 ;;  tmpval          4    0        struct .
  9094 ;;  cp              3    0        PTR const unsigned char 
  9095 ;;  width           2   66[BANK0 ] int 
  9096 ;;  val             2   63[BANK0 ] unsigned int 
  9097 ;;  ap              2   60[BANK0 ] PTR void [1]
  9098 ;;		 -> ?_printf(2), 
  9099 ;;  len             2    0        unsigned int 
  9100 ;;  c               1   68[BANK0 ] char 
  9101 ;;  flag            1   65[BANK0 ] unsigned char 
  9102 ;;  prec            1   62[BANK0 ] char 
  9103 ;; Return value:  Size  Location     Type
  9104 ;;                  2   47[BANK0 ] int 
  9105 ;; Registers used:
  9106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9107 ;; Tracked objects:
  9108 ;;		On entry : 0/0
  9109 ;;		On exit  : 0/0
  9110 ;;		Unchanged: 0/0
  9111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9112 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9113 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9114 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9115 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;Total ram usage:       22 bytes
  9117 ;; Hardware stack levels used:    1
  9118 ;; Hardware stack levels required when called:    3
  9119 ;; This function calls:
  9120 ;;		___lwdiv
  9121 ;;		___lwmod
  9122 ;;		___wmul
  9123 ;;		_isdigit
  9124 ;;		_putch
  9125 ;; This function is called by:
  9126 ;;		_main
  9127 ;;		_init_operation
  9128 ;;		_runtime
  9129 ;;		_bottle_count
  9130 ;;		_operation_end
  9131 ;;		_date_time
  9132 ;; This function uses a non-reentrant model
  9133 ;;
  9134                           
  9135                           	psect	text39
  9136  0009B2                     __ptext39:
  9137                           	opt stack 0
  9138  0009B2                     _printf:
  9139                           	opt stack 26
  9140                           
  9141                           ;doprnt.c: 466: va_list ap;
  9142                           ;doprnt.c: 499: signed char c;
  9143                           ;doprnt.c: 501: int width;
  9144                           ;doprnt.c: 506: signed char prec;
  9145                           ;doprnt.c: 508: unsigned char flag;
  9146                           ;doprnt.c: 523: union {
  9147                           ;doprnt.c: 524: unsigned long vd;
  9148                           ;doprnt.c: 525: double integ;
  9149                           ;doprnt.c: 526: } tmpval;
  9150                           ;doprnt.c: 528: unsigned int val;
  9151                           ;doprnt.c: 529: unsigned len;
  9152                           ;doprnt.c: 530: const char * cp;
  9153                           ;doprnt.c: 533: *ap = __va_start();
  9154                           
  9155                           ; BSR set to: 0
  9156                           ;incstack = 0
  9157  0009B2  0EB1               	movlw	low (?_printf+2)
  9158  0009B4  0100               	movlb	0	; () banked
  9159  0009B6  6FBC               	movwf	printf@ap& (0+255),b
  9160  0009B8  0E00               	movlw	high (?_printf+2)
  9161  0009BA  0100               	movlb	0	; () banked
  9162  0009BC  6FBD               	movwf	(printf@ap+1)& (0+255),b
  9163                           
  9164                           ;doprnt.c: 536: while(c = *f++) {
  9165  0009BE  D1D1               	goto	l3657
  9166  0009C0                     l3527:
  9167                           
  9168                           ; BSR set to: 0
  9169                           ;doprnt.c: 538: if(c != '%')
  9170  0009C0  0E25               	movlw	37
  9171  0009C2  0100               	movlb	0	; () banked
  9172  0009C4  19C4               	xorwf	printf@c& (0+255),w,b
  9173  0009C6  B4D8               	btfsc	status,2,c
  9174  0009C8  D005               	goto	l3531
  9175                           
  9176                           ; BSR set to: 0
  9177                           ;doprnt.c: 540: {
  9178                           ;doprnt.c: 541: (putch(c) );
  9179  0009CA  0100               	movlb	0	; () banked
  9180  0009CC  51C4               	movf	printf@c& (0+255),w,b
  9181  0009CE  ECFF  F016         	call	_putch
  9182                           
  9183                           ;doprnt.c: 542: continue;
  9184  0009D2  D1C7               	goto	l3657
  9185  0009D4                     l3531:
  9186                           
  9187                           ;doprnt.c: 543: }
  9188                           ;doprnt.c: 546: width = 0;
  9189  0009D4  0E00               	movlw	0
  9190  0009D6  0100               	movlb	0	; () banked
  9191  0009D8  6FC3               	movwf	(printf@width+1)& (0+255),b
  9192  0009DA  0E00               	movlw	0
  9193  0009DC  6FC2               	movwf	printf@width& (0+255),b
  9194                           
  9195                           ;doprnt.c: 548: flag = 0;
  9196  0009DE  0E00               	movlw	0
  9197  0009E0  0100               	movlb	0	; () banked
  9198  0009E2  6FC1               	movwf	printf@flag& (0+255),b
  9199                           
  9200                           ; BSR set to: 0
  9201                           ;doprnt.c: 551: switch(*f) {
  9202                           
  9203                           ;doprnt.c: 550: for(;;) {
  9204  0009E4  D005               	goto	l3537
  9205  0009E6                     l3533:
  9206                           
  9207                           ;doprnt.c: 580: flag |= 0x04;
  9208  0009E6  0100               	movlb	0	; () banked
  9209  0009E8  85C1               	bsf	printf@flag& (0+255),2,b
  9210                           
  9211                           ;doprnt.c: 581: f++;
  9212  0009EA  0100               	movlb	0	; () banked
  9213  0009EC  4BAF               	infsnz	printf@f& (0+255),f,b
  9214  0009EE  2BB0               	incf	(printf@f+1)& (0+255),f,b
  9215  0009F0                     l3537:
  9216  0009F0  C0AF  FFF6         	movff	printf@f,tblptrl
  9217  0009F4  C0B0  FFF7         	movff	printf@f+1,tblptrh
  9218  0009F8                     	if	0	;tblptru may be non-zero
  9219  0009F8                     	endif
  9220  0009F8                     	if	0	;tblptru may be non-zero
  9221  0009F8                     	endif
  9222  0009F8  0008               	tblrd		*
  9223  0009FA  50F5               	movf	tablat,w,c
  9224                           
  9225                           ; Switch size 1, requested type "space"
  9226                           ; Number of cases is 1, Range of values is 48 to 48
  9227                           ; switch strategies available:
  9228                           ; Name         Instructions Cycles
  9229                           ; simple_byte            4     3 (average)
  9230                           ;	Chosen strategy is simple_byte
  9231  0009FC  0A30               	xorlw	48	; case 48
  9232  0009FE  B4D8               	btfsc	status,2,c
  9233  000A00  D7F2               	goto	l3533
  9234                           
  9235                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9236                           
  9237                           ;doprnt.c: 586: }
  9238                           
  9239                           ;doprnt.c: 585: break;
  9240  000A02  C0AF  FFF6         	movff	printf@f,tblptrl
  9241  000A06  C0B0  FFF7         	movff	printf@f+1,tblptrh
  9242  000A0A                     	if	0	;tblptru may be non-zero
  9243  000A0A                     	endif
  9244  000A0A                     	if	0	;tblptru may be non-zero
  9245  000A0A                     	endif
  9246  000A0A  0008               	tblrd		*
  9247  000A0C  50F5               	movf	tablat,w,c
  9248  000A0E  ECDF  F016         	call	_isdigit
  9249  000A12  A0D8               	btfss	status,0,c
  9250  000A14  D047               	goto	l3557
  9251                           
  9252                           ;doprnt.c: 598: width = 0;
  9253  000A16  0E00               	movlw	0
  9254  000A18  0100               	movlb	0	; () banked
  9255  000A1A  6FC3               	movwf	(printf@width+1)& (0+255),b
  9256  000A1C  0E00               	movlw	0
  9257  000A1E  6FC2               	movwf	printf@width& (0+255),b
  9258  000A20                     l3543:
  9259                           
  9260                           ;doprnt.c: 600: width *= 10;
  9261  000A20  C0C2  F011         	movff	printf@width,___wmul@multiplier
  9262  000A24  C0C3  F012         	movff	printf@width+1,___wmul@multiplier+1
  9263  000A28  0E00               	movlw	0
  9264  000A2A  6E14               	movwf	___wmul@multiplicand+1,c
  9265  000A2C  0E0A               	movlw	10
  9266  000A2E  6E13               	movwf	___wmul@multiplicand,c
  9267  000A30  ECBA  F016         	call	___wmul	;wreg free
  9268  000A34  C011  F0C2         	movff	?___wmul,printf@width
  9269  000A38  C012  F0C3         	movff	?___wmul+1,printf@width+1
  9270                           
  9271                           ;doprnt.c: 601: width += *f++ - '0';
  9272  000A3C  0ED0               	movlw	208
  9273  000A3E  0100               	movlb	0	; () banked
  9274  000A40  6FB7               	movwf	??_printf& (0+255),b
  9275  000A42  0EFF               	movlw	255
  9276  000A44  0100               	movlb	0	; () banked
  9277  000A46  6FB8               	movwf	(??_printf+1)& (0+255),b
  9278  000A48  C0AF  FFF6         	movff	printf@f,tblptrl
  9279  000A4C  C0B0  FFF7         	movff	printf@f+1,tblptrh
  9280  000A50                     	if	0	;tblptru may be non-zero
  9281  000A50                     	endif
  9282  000A50                     	if	0	;tblptru may be non-zero
  9283  000A50                     	endif
  9284  000A50  0008               	tblrd		*
  9285  000A52  50F5               	movf	tablat,w,c
  9286  000A54  0100               	movlb	0	; () banked
  9287  000A56  6FB9               	movwf	(??_printf+2)& (0+255),b
  9288  000A58  6BBA               	clrf	(??_printf+3)& (0+255),b
  9289  000A5A  0100               	movlb	0	; () banked
  9290  000A5C  51B7               	movf	??_printf& (0+255),w,b
  9291  000A5E  0100               	movlb	0	; () banked
  9292  000A60  27B9               	addwf	(??_printf+2)& (0+255),f,b
  9293  000A62  0100               	movlb	0	; () banked
  9294  000A64  51B8               	movf	(??_printf+1)& (0+255),w,b
  9295  000A66  0100               	movlb	0	; () banked
  9296  000A68  23BA               	addwfc	(??_printf+3)& (0+255),f,b
  9297  000A6A  0100               	movlb	0	; () banked
  9298  000A6C  51B9               	movf	(??_printf+2)& (0+255),w,b
  9299  000A6E  0100               	movlb	0	; () banked
  9300  000A70  27C2               	addwf	printf@width& (0+255),f,b
  9301  000A72  0100               	movlb	0	; () banked
  9302  000A74  51BA               	movf	(??_printf+3)& (0+255),w,b
  9303  000A76  0100               	movlb	0	; () banked
  9304  000A78  23C3               	addwfc	(printf@width+1)& (0+255),f,b
  9305                           
  9306                           ; BSR set to: 0
  9307  000A7A  0100               	movlb	0	; () banked
  9308  000A7C  4BAF               	infsnz	printf@f& (0+255),f,b
  9309  000A7E  2BB0               	incf	(printf@f+1)& (0+255),f,b
  9310                           
  9311                           ; BSR set to: 0
  9312                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9313  000A80  C0AF  FFF6         	movff	printf@f,tblptrl
  9314  000A84  C0B0  FFF7         	movff	printf@f+1,tblptrh
  9315  000A88                     	if	0	;tblptru may be non-zero
  9316  000A88                     	endif
  9317  000A88                     	if	0	;tblptru may be non-zero
  9318  000A88                     	endif
  9319  000A88  0008               	tblrd		*
  9320  000A8A  50F5               	movf	tablat,w,c
  9321  000A8C  ECDF  F016         	call	_isdigit
  9322  000A90  A0D8               	btfss	status,0,c
  9323  000A92  D008               	goto	l3557
  9324  000A94  D7C5               	goto	l3543
  9325  000A96                     l3551:
  9326                           
  9327                           ;doprnt.c: 721: flag |= 0x80;
  9328  000A96  0100               	movlb	0	; () banked
  9329  000A98  8FC1               	bsf	printf@flag& (0+255),7,b
  9330                           
  9331                           ;doprnt.c: 723: break;
  9332  000A9A  D020               	goto	l3559
  9333  000A9C                     l3553:
  9334                           
  9335                           ; BSR set to: 0
  9336                           ;doprnt.c: 818: flag |= 0xC0;
  9337  000A9C  0EC0               	movlw	192
  9338  000A9E  0100               	movlb	0	; () banked
  9339  000AA0  13C1               	iorwf	printf@flag& (0+255),f,b
  9340                           
  9341                           ; BSR set to: 0
  9342                           ;doprnt.c: 822: }
  9343                           
  9344                           ;doprnt.c: 819: break;
  9345  000AA2  D01C               	goto	l3559
  9346  000AA4                     l3557:
  9347  000AA4  C0AF  FFF6         	movff	printf@f,tblptrl
  9348  000AA8  C0B0  FFF7         	movff	printf@f+1,tblptrh
  9349  000AAC  0100               	movlb	0	; () banked
  9350  000AAE  4BAF               	infsnz	printf@f& (0+255),f,b
  9351  000AB0  2BB0               	incf	(printf@f+1)& (0+255),f,b
  9352  000AB2                     	if	0	;tblptru may be non-zero
  9353  000AB2                     	endif
  9354  000AB2                     	if	0	;tblptru may be non-zero
  9355  000AB2                     	endif
  9356  000AB2  0008               	tblrd		*
  9357  000AB4  CFF5 F0C4          	movff	tablat,printf@c
  9358  000AB8  0100               	movlb	0	; () banked
  9359  000ABA  51C4               	movf	printf@c& (0+255),w,b
  9360                           
  9361                           ; Switch size 1, requested type "space"
  9362                           ; Number of cases is 5, Range of values is 0 to 120
  9363                           ; switch strategies available:
  9364                           ; Name         Instructions Cycles
  9365                           ; simple_byte           16     9 (average)
  9366                           ;	Chosen strategy is simple_byte
  9367  000ABC  0A00               	xorlw	0	; case 0
  9368  000ABE  B4D8               	btfsc	status,2,c
  9369  000AC0  0012               	return	
  9370  000AC2  0A64               	xorlw	100	; case 100
  9371  000AC4  B4D8               	btfsc	status,2,c
  9372  000AC6  D00A               	goto	l3559
  9373  000AC8  0A0D               	xorlw	13	; case 105
  9374  000ACA  B4D8               	btfsc	status,2,c
  9375  000ACC  D007               	goto	l3559
  9376  000ACE  0A1C               	xorlw	28	; case 117
  9377  000AD0  B4D8               	btfsc	status,2,c
  9378  000AD2  D7E4               	goto	l3553
  9379  000AD4  0A0D               	xorlw	13	; case 120
  9380  000AD6  B4D8               	btfsc	status,2,c
  9381  000AD8  D7DE               	goto	l3551
  9382  000ADA  D143               	goto	l3657
  9383  000ADC                     l3559:
  9384                           
  9385                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  9386  000ADC  C0C1  F0B7         	movff	printf@flag,??_printf
  9387  000AE0  0EC0               	movlw	192
  9388  000AE2  0100               	movlb	0	; () banked
  9389  000AE4  17B7               	andwf	??_printf& (0+255),f,b
  9390  000AE6  A4D8               	btfss	status,2,c
  9391  000AE8  D019               	goto	l3571
  9392                           
  9393                           ; BSR set to: 0
  9394                           ;doprnt.c: 1253: {
  9395                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9396  000AEA  C0BC  FFD9         	movff	printf@ap,fsr2l
  9397  000AEE  C0BD  FFDA         	movff	printf@ap+1,fsr2h
  9398  000AF2  CFDE F0BF          	movff	postinc2,printf@val
  9399  000AF6  CFDD F0C0          	movff	postdec2,printf@val+1
  9400                           
  9401                           ; BSR set to: 0
  9402  000AFA  0E02               	movlw	2
  9403  000AFC  0100               	movlb	0	; () banked
  9404  000AFE  27BC               	addwf	printf@ap& (0+255),f,b
  9405  000B00  0E00               	movlw	0
  9406  000B02  23BD               	addwfc	(printf@ap+1)& (0+255),f,b
  9407                           
  9408                           ; BSR set to: 0
  9409                           ;doprnt.c: 1261: if((int)val < 0) {
  9410  000B04  0100               	movlb	0	; () banked
  9411  000B06  AFC0               	btfss	(printf@val+1)& (0+255),7,b
  9412  000B08  D053               	goto	l3605
  9413                           
  9414                           ; BSR set to: 0
  9415                           ;doprnt.c: 1262: flag |= 0x03;
  9416  000B0A  0E03               	movlw	3
  9417  000B0C  0100               	movlb	0	; () banked
  9418  000B0E  13C1               	iorwf	printf@flag& (0+255),f,b
  9419                           
  9420                           ; BSR set to: 0
  9421                           ;doprnt.c: 1263: val = -val;
  9422  000B10  0100               	movlb	0	; () banked
  9423  000B12  6DBF               	negf	printf@val& (0+255),b
  9424  000B14  1FC0               	comf	(printf@val+1)& (0+255),f,b
  9425  000B16  B0D8               	btfsc	status,0,c
  9426  000B18  2BC0               	incf	(printf@val+1)& (0+255),f,b
  9427                           
  9428                           ; BSR set to: 0
  9429                           ;doprnt.c: 1264: }
  9430                           ;doprnt.c: 1266: }
  9431  000B1A  D04A               	goto	l3605
  9432  000B1C                     l3571:
  9433                           
  9434                           ; BSR set to: 0
  9435                           ;doprnt.c: 1268: else
  9436                           ;doprnt.c: 1273: {
  9437                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9438  000B1C  C0BC  FFD9         	movff	printf@ap,fsr2l
  9439  000B20  C0BD  FFDA         	movff	printf@ap+1,fsr2h
  9440  000B24  CFDE F0BF          	movff	postinc2,printf@val
  9441  000B28  CFDD F0C0          	movff	postdec2,printf@val+1
  9442                           
  9443                           ; BSR set to: 0
  9444  000B2C  0E02               	movlw	2
  9445  000B2E  0100               	movlb	0	; () banked
  9446  000B30  27BC               	addwf	printf@ap& (0+255),f,b
  9447  000B32  0E00               	movlw	0
  9448  000B34  23BD               	addwfc	(printf@ap+1)& (0+255),f,b
  9449                           
  9450                           ; BSR set to: 0
  9451                           ;doprnt.c: 1287: }
  9452                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  9453  000B36  D03C               	goto	l3605
  9454  000B38                     l3575:
  9455                           
  9456                           ; BSR set to: 0
  9457                           ;doprnt.c: 1302: case 0xC0:
  9458                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9459  000B38  0E01               	movlw	1
  9460  000B3A  0100               	movlb	0	; () banked
  9461  000B3C  6FC4               	movwf	printf@c& (0+255),b
  9462  000B3E                     l3577:
  9463                           
  9464                           ; BSR set to: 0
  9465  000B3E  0E05               	movlw	5
  9466  000B40  0100               	movlb	0	; () banked
  9467  000B42  19C4               	xorwf	printf@c& (0+255),w,b
  9468  000B44  B4D8               	btfsc	status,2,c
  9469  000B46  D040               	goto	l3607
  9470                           
  9471                           ; BSR set to: 0
  9472                           ;doprnt.c: 1306: if(val < dpowers[c])
  9473                           
  9474                           ; BSR set to: 0
  9475                           
  9476                           ; BSR set to: 0
  9477  000B48  0100               	movlb	0	; () banked
  9478  000B4A  51C4               	movf	printf@c& (0+255),w,b
  9479  000B4C  0D02               	mullw	2
  9480  000B4E  0E92               	movlw	low _dpowers
  9481  000B50  24F3               	addwf	prodl,w,c
  9482  000B52  6EF6               	movwf	tblptrl,c
  9483  000B54  0EFE               	movlw	high _dpowers
  9484  000B56  20F4               	addwfc	prodh,w,c
  9485  000B58  6EF7               	movwf	tblptrh,c
  9486  000B5A                     	if	0	;There are less than 3 active tblptr bytes
  9487  000B5A                     	endif
  9488  000B5A  0009               	tblrd		*+
  9489  000B5C  50F5               	movf	tablat,w,c
  9490  000B5E  0100               	movlb	0	; () banked
  9491  000B60  5DBF               	subwf	printf@val& (0+255),w,b
  9492  000B62  0009               	tblrd		*+
  9493  000B64  50F5               	movf	tablat,w,c
  9494  000B66  0100               	movlb	0	; () banked
  9495  000B68  59C0               	subwfb	(printf@val+1)& (0+255),w,b
  9496  000B6A  A0D8               	btfss	status,0,c
  9497  000B6C  D02D               	goto	l3607
  9498                           
  9499                           ; BSR set to: 0
  9500                           
  9501                           ; BSR set to: 0
  9502                           
  9503                           ; BSR set to: 0
  9504                           ;doprnt.c: 1307: break;
  9505  000B6E  0100               	movlb	0	; () banked
  9506  000B70  2BC4               	incf	printf@c& (0+255),f,b
  9507  000B72  D7E5               	goto	l3577
  9508  000B74                     l3589:
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9512  000B74  0E01               	movlw	1
  9513  000B76  0100               	movlb	0	; () banked
  9514  000B78  6FC4               	movwf	printf@c& (0+255),b
  9515  000B7A                     l3591:
  9516                           
  9517                           ; BSR set to: 0
  9518  000B7A  0E04               	movlw	4
  9519  000B7C  0100               	movlb	0	; () banked
  9520  000B7E  19C4               	xorwf	printf@c& (0+255),w,b
  9521  000B80  B4D8               	btfsc	status,2,c
  9522  000B82  D022               	goto	l3607
  9523                           
  9524                           ; BSR set to: 0
  9525                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9526                           
  9527                           ; BSR set to: 0
  9528                           
  9529                           ; BSR set to: 0
  9530  000B84  0100               	movlb	0	; () banked
  9531  000B86  51C4               	movf	printf@c& (0+255),w,b
  9532  000B88  0D02               	mullw	2
  9533  000B8A  0E9C               	movlw	low _hexpowers
  9534  000B8C  24F3               	addwf	prodl,w,c
  9535  000B8E  6EF6               	movwf	tblptrl,c
  9536  000B90  0EFE               	movlw	high _hexpowers
  9537  000B92  20F4               	addwfc	prodh,w,c
  9538  000B94  6EF7               	movwf	tblptrh,c
  9539  000B96                     	if	0	;There are less than 3 active tblptr bytes
  9540  000B96                     	endif
  9541  000B96  0009               	tblrd		*+
  9542  000B98  50F5               	movf	tablat,w,c
  9543  000B9A  0100               	movlb	0	; () banked
  9544  000B9C  5DBF               	subwf	printf@val& (0+255),w,b
  9545  000B9E  0009               	tblrd		*+
  9546  000BA0  50F5               	movf	tablat,w,c
  9547  000BA2  0100               	movlb	0	; () banked
  9548  000BA4  59C0               	subwfb	(printf@val+1)& (0+255),w,b
  9549  000BA6  A0D8               	btfss	status,0,c
  9550  000BA8  D00F               	goto	l3607
  9551                           
  9552                           ; BSR set to: 0
  9553                           
  9554                           ; BSR set to: 0
  9555                           
  9556                           ; BSR set to: 0
  9557                           ;doprnt.c: 1318: break;
  9558  000BAA  0100               	movlb	0	; () banked
  9559  000BAC  2BC4               	incf	printf@c& (0+255),f,b
  9560  000BAE  D7E5               	goto	l3591
  9561  000BB0                     l3605:
  9562                           
  9563                           ; BSR set to: 0
  9564  000BB0  0100               	movlb	0	; () banked
  9565  000BB2  51C1               	movf	printf@flag& (0+255),w,b
  9566  000BB4  0BC0               	andlw	192
  9567                           
  9568                           ; Switch size 1, requested type "space"
  9569                           ; Number of cases is 3, Range of values is 0 to 192
  9570                           ; switch strategies available:
  9571                           ; Name         Instructions Cycles
  9572                           ; simple_byte           10     6 (average)
  9573                           ;	Chosen strategy is simple_byte
  9574  000BB6  0A00               	xorlw	0	; case 0
  9575  000BB8  B4D8               	btfsc	status,2,c
  9576  000BBA  D7BE               	goto	l3575
  9577  000BBC  0A80               	xorlw	128	; case 128
  9578  000BBE  B4D8               	btfsc	status,2,c
  9579  000BC0  D7D9               	goto	l3589
  9580  000BC2  0A40               	xorlw	64	; case 192
  9581  000BC4  B4D8               	btfsc	status,2,c
  9582  000BC6  D7B8               	goto	l3575
  9583  000BC8                     l3607:
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9587  000BC8  0100               	movlb	0	; () banked
  9588  000BCA  51C2               	movf	printf@width& (0+255),w,b
  9589  000BCC  0100               	movlb	0	; () banked
  9590  000BCE  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  9591  000BD0  B4D8               	btfsc	status,2,c
  9592  000BD2  D00B               	goto	l3613
  9593                           
  9594                           ; BSR set to: 0
  9595  000BD4  C0C1  F0B7         	movff	printf@flag,??_printf
  9596  000BD8  0E03               	movlw	3
  9597  000BDA  0100               	movlb	0	; () banked
  9598  000BDC  17B7               	andwf	??_printf& (0+255),f,b
  9599  000BDE  B4D8               	btfsc	status,2,c
  9600  000BE0  D004               	goto	l3613
  9601                           
  9602                           ; BSR set to: 0
  9603                           ;doprnt.c: 1346: width--;
  9604  000BE2  0100               	movlb	0	; () banked
  9605  000BE4  07C2               	decf	printf@width& (0+255),f,b
  9606  000BE6  A0D8               	btfss	status,0,c
  9607  000BE8  07C3               	decf	(printf@width+1)& (0+255),f,b
  9608  000BEA                     l3613:
  9609                           
  9610                           ; BSR set to: 0
  9611                           ;doprnt.c: 1381: if(width > c)
  9612  000BEA  0E80               	movlw	128
  9613  000BEC  0100               	movlb	0	; () banked
  9614  000BEE  BFC4               	btfsc	printf@c& (0+255),7,b
  9615  000BF0  0E7F               	movlw	127
  9616  000BF2  0100               	movlb	0	; () banked
  9617  000BF4  6FB7               	movwf	??_printf& (0+255),b
  9618  000BF6  0100               	movlb	0	; () banked
  9619  000BF8  51C2               	movf	printf@width& (0+255),w,b
  9620  000BFA  0100               	movlb	0	; () banked
  9621  000BFC  5DC4               	subwf	printf@c& (0+255),w,b
  9622  000BFE  0100               	movlb	0	; () banked
  9623  000C00  51C3               	movf	(printf@width+1)& (0+255),w,b
  9624  000C02  0A80               	xorlw	128
  9625  000C04  0100               	movlb	0	; () banked
  9626  000C06  59B7               	subwfb	??_printf& (0+255),w,b
  9627  000C08  B0D8               	btfsc	status,0,c
  9628  000C0A  D00B               	goto	l3617
  9629                           
  9630                           ; BSR set to: 0
  9631                           ;doprnt.c: 1382: width -= c;
  9632  000C0C  0100               	movlb	0	; () banked
  9633  000C0E  51C4               	movf	printf@c& (0+255),w,b
  9634  000C10  0100               	movlb	0	; () banked
  9635  000C12  5FC2               	subwf	printf@width& (0+255),f,b
  9636  000C14  0E00               	movlw	0
  9637  000C16  0100               	movlb	0	; () banked
  9638  000C18  BFC4               	btfsc	printf@c& (0+255),7,b
  9639  000C1A  0EFF               	movlw	255
  9640  000C1C  0100               	movlb	0	; () banked
  9641  000C1E  5BC3               	subwfb	(printf@width+1)& (0+255),f,b
  9642  000C20  D005               	goto	l3619
  9643  000C22                     l3617:
  9644                           
  9645                           ; BSR set to: 0
  9646                           ;doprnt.c: 1383: else
  9647                           ;doprnt.c: 1384: width = 0;
  9648  000C22  0E00               	movlw	0
  9649  000C24  0100               	movlb	0	; () banked
  9650  000C26  6FC3               	movwf	(printf@width+1)& (0+255),b
  9651  000C28  0E00               	movlw	0
  9652  000C2A  6FC2               	movwf	printf@width& (0+255),b
  9653  000C2C                     l3619:
  9654                           
  9655                           ; BSR set to: 0
  9656                           ;doprnt.c: 1387: if(flag & 0x04) {
  9657  000C2C  0100               	movlb	0	; () banked
  9658  000C2E  A5C1               	btfss	printf@flag& (0+255),2,b
  9659  000C30  D018               	goto	l3631
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;doprnt.c: 1392: if(flag & 0x03)
  9663  000C32  C0C1  F0B7         	movff	printf@flag,??_printf
  9664  000C36  0E03               	movlw	3
  9665  000C38  0100               	movlb	0	; () banked
  9666  000C3A  17B7               	andwf	??_printf& (0+255),f,b
  9667  000C3C  B4D8               	btfsc	status,2,c
  9668  000C3E  D003               	goto	l3625
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;doprnt.c: 1393: (putch('-') );
  9672  000C40  0E2D               	movlw	45
  9673  000C42  ECFF  F016         	call	_putch
  9674  000C46                     l3625:
  9675                           
  9676                           ;doprnt.c: 1415: if(width)
  9677  000C46  0100               	movlb	0	; () banked
  9678  000C48  51C2               	movf	printf@width& (0+255),w,b
  9679  000C4A  0100               	movlb	0	; () banked
  9680  000C4C  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  9681  000C4E  B4D8               	btfsc	status,2,c
  9682  000C50  D025               	goto	l3641
  9683                           
  9684                           ; BSR set to: 0
  9685                           ;doprnt.c: 1417: (putch('0') );
  9686                           
  9687                           ; BSR set to: 0
  9688                           
  9689                           ;doprnt.c: 1416: do
  9690  000C52  0E30               	movlw	48
  9691  000C54  ECFF  F016         	call	_putch
  9692                           
  9693                           ;doprnt.c: 1418: while(--width);
  9694  000C58  0100               	movlb	0	; () banked
  9695  000C5A  07C2               	decf	printf@width& (0+255),f,b
  9696  000C5C  A0D8               	btfss	status,0,c
  9697  000C5E  07C3               	decf	(printf@width+1)& (0+255),f,b
  9698  000C60  D7F2               	goto	l3625
  9699  000C62                     l3631:
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;doprnt.c: 1422: {
  9703                           ;doprnt.c: 1424: if(width
  9704                           ;doprnt.c: 1428: )
  9705  000C62  0100               	movlb	0	; () banked
  9706  000C64  51C2               	movf	printf@width& (0+255),w,b
  9707  000C66  0100               	movlb	0	; () banked
  9708  000C68  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  9709  000C6A  B4D8               	btfsc	status,2,c
  9710  000C6C  D00D               	goto	l3637
  9711  000C6E                     l3633:
  9712                           
  9713                           ; BSR set to: 0
  9714                           ;doprnt.c: 1430: (putch(' ') );
  9715  000C6E  0E20               	movlw	32
  9716  000C70  ECFF  F016         	call	_putch
  9717                           
  9718                           ;doprnt.c: 1431: while(--width);
  9719  000C74  0100               	movlb	0	; () banked
  9720  000C76  07C2               	decf	printf@width& (0+255),f,b
  9721  000C78  A0D8               	btfss	status,0,c
  9722  000C7A  07C3               	decf	(printf@width+1)& (0+255),f,b
  9723  000C7C  0100               	movlb	0	; () banked
  9724  000C7E  51C2               	movf	printf@width& (0+255),w,b
  9725  000C80  0100               	movlb	0	; () banked
  9726  000C82  11C3               	iorwf	(printf@width+1)& (0+255),w,b
  9727  000C84  A4D8               	btfss	status,2,c
  9728  000C86  D7F3               	goto	l3633
  9729  000C88                     l3637:
  9730                           
  9731                           ; BSR set to: 0
  9732                           ;doprnt.c: 1438: if(flag & 0x03)
  9733  000C88  C0C1  F0B7         	movff	printf@flag,??_printf
  9734  000C8C  0E03               	movlw	3
  9735  000C8E  0100               	movlb	0	; () banked
  9736  000C90  17B7               	andwf	??_printf& (0+255),f,b
  9737  000C92  B4D8               	btfsc	status,2,c
  9738  000C94  D003               	goto	l3641
  9739                           
  9740                           ; BSR set to: 0
  9741                           ;doprnt.c: 1439: (putch('-') );
  9742  000C96  0E2D               	movlw	45
  9743  000C98  ECFF  F016         	call	_putch
  9744  000C9C                     l3641:
  9745                           
  9746                           ;doprnt.c: 1469: }
  9747                           ;doprnt.c: 1472: prec = c;
  9748  000C9C  C0C4  F0BE         	movff	printf@c,printf@prec
  9749                           
  9750                           ;doprnt.c: 1474: while(prec--) {
  9751  000CA0  D05A               	goto	l3655
  9752  000CA2                     l3643:
  9753                           
  9754                           ;doprnt.c: 1486: case 0xC0:
  9755                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9756  000CA2  0100               	movlb	0	; () banked
  9757  000CA4  51BE               	movf	printf@prec& (0+255),w,b
  9758  000CA6  0D02               	mullw	2
  9759  000CA8  0E92               	movlw	low _dpowers
  9760  000CAA  24F3               	addwf	prodl,w,c
  9761  000CAC  6EF6               	movwf	tblptrl,c
  9762  000CAE  0EFE               	movlw	high _dpowers
  9763  000CB0  20F4               	addwfc	prodh,w,c
  9764  000CB2  6EF7               	movwf	tblptrh,c
  9765  000CB4                     	if	0	;There are less than 3 active tblptr bytes
  9766  000CB4                     	endif
  9767  000CB4  0009               	tblrd		*+
  9768  000CB6  CFF5 F013          	movff	tablat,___lwdiv@divisor
  9769  000CBA  000A               	tblrd		*-
  9770  000CBC  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  9771  000CC0  C0BF  F011         	movff	printf@val,___lwdiv@dividend
  9772  000CC4  C0C0  F012         	movff	printf@val+1,___lwdiv@dividend+1
  9773  000CC8  EC96  F015         	call	___lwdiv	;wreg free
  9774  000CCC  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  9775  000CD0  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  9776  000CD4  0E00               	movlw	0
  9777  000CD6  6E1B               	movwf	___lwmod@divisor+1,c
  9778  000CD8  0E0A               	movlw	10
  9779  000CDA  6E1A               	movwf	___lwmod@divisor,c
  9780  000CDC  EC2E  F016         	call	___lwmod	;wreg free
  9781  000CE0  5018               	movf	?___lwmod,w,c
  9782  000CE2  0F30               	addlw	48
  9783  000CE4  0100               	movlb	0	; () banked
  9784  000CE6  6FC4               	movwf	printf@c& (0+255),b
  9785                           
  9786                           ;doprnt.c: 1491: break;
  9787  000CE8  D032               	goto	l3653
  9788  000CEA                     l3645:
  9789                           
  9790                           ; BSR set to: 0
  9791                           ;doprnt.c: 1499: {
  9792                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9793  000CEA  C0BF  F011         	movff	printf@val,___lwdiv@dividend
  9794  000CEE  C0C0  F012         	movff	printf@val+1,___lwdiv@dividend+1
  9795  000CF2  0100               	movlb	0	; () banked
  9796  000CF4  51BE               	movf	printf@prec& (0+255),w,b
  9797  000CF6  0D02               	mullw	2
  9798  000CF8  0E9C               	movlw	low _hexpowers
  9799  000CFA  24F3               	addwf	prodl,w,c
  9800  000CFC  6EF6               	movwf	tblptrl,c
  9801  000CFE  0EFE               	movlw	high _hexpowers
  9802  000D00  20F4               	addwfc	prodh,w,c
  9803  000D02  6EF7               	movwf	tblptrh,c
  9804  000D04                     	if	0	;There are less than 3 active tblptr bytes
  9805  000D04                     	endif
  9806  000D04  0009               	tblrd		*+
  9807  000D06  CFF5 F013          	movff	tablat,___lwdiv@divisor
  9808  000D0A  000A               	tblrd		*-
  9809  000D0C  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  9810  000D10  EC96  F015         	call	___lwdiv	;wreg free
  9811  000D14  5011               	movf	?___lwdiv,w,c
  9812  000D16  0B0F               	andlw	15
  9813  000D18  0100               	movlb	0	; () banked
  9814  000D1A  6FBB               	movwf	printf@idx& (0+255),b
  9815                           
  9816                           ; BSR set to: 0
  9817                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  9818  000D1C  0100               	movlb	0	; () banked
  9819  000D1E  51BB               	movf	printf@idx& (0+255),w,b
  9820  000D20  0D01               	mullw	1
  9821  000D22  0E54               	movlw	low STR_20
  9822  000D24  24F3               	addwf	prodl,w,c
  9823  000D26  6EF6               	movwf	tblptrl,c
  9824  000D28  0EFF               	movlw	high STR_20
  9825  000D2A  20F4               	addwfc	prodh,w,c
  9826  000D2C  6EF7               	movwf	tblptrh,c
  9827  000D2E                     	if	0	;There are less than 3 active tblptr bytes
  9828  000D2E                     	endif
  9829  000D2E  0008               	tblrd		*
  9830  000D30  CFF5 F0C4          	movff	tablat,printf@c
  9831                           
  9832                           ; BSR set to: 0
  9833                           ;doprnt.c: 1523: }
  9834                           
  9835                           ;doprnt.c: 1508: }
  9836                           ;doprnt.c: 1510: break;
  9837  000D34  D00C               	goto	l3653
  9838  000D36                     l3651:
  9839  000D36  0100               	movlb	0	; () banked
  9840  000D38  51C1               	movf	printf@flag& (0+255),w,b
  9841  000D3A  0BC0               	andlw	192
  9842                           
  9843                           ; Switch size 1, requested type "space"
  9844                           ; Number of cases is 3, Range of values is 0 to 192
  9845                           ; switch strategies available:
  9846                           ; Name         Instructions Cycles
  9847                           ; simple_byte           10     6 (average)
  9848                           ;	Chosen strategy is simple_byte
  9849  000D3C  0A00               	xorlw	0	; case 0
  9850  000D3E  B4D8               	btfsc	status,2,c
  9851  000D40  D7B0               	goto	l3643
  9852  000D42  0A80               	xorlw	128	; case 128
  9853  000D44  B4D8               	btfsc	status,2,c
  9854  000D46  D7D1               	goto	l3645
  9855  000D48  0A40               	xorlw	64	; case 192
  9856  000D4A  B4D8               	btfsc	status,2,c
  9857  000D4C  D7AA               	goto	l3643
  9858  000D4E                     l3653:
  9859                           
  9860                           ; BSR set to: 0
  9861                           ;doprnt.c: 1524: (putch(c) );
  9862  000D4E  0100               	movlb	0	; () banked
  9863  000D50  51C4               	movf	printf@c& (0+255),w,b
  9864  000D52  ECFF  F016         	call	_putch
  9865  000D56                     l3655:
  9866  000D56  0100               	movlb	0	; () banked
  9867  000D58  07BE               	decf	printf@prec& (0+255),f,b
  9868  000D5A  0100               	movlb	0	; () banked
  9869  000D5C  29BE               	incf	printf@prec& (0+255),w,b
  9870  000D5E  A4D8               	btfss	status,2,c
  9871  000D60  D7EA               	goto	l3651
  9872  000D62                     l3657:
  9873  000D62  C0AF  FFF6         	movff	printf@f,tblptrl
  9874  000D66  C0B0  FFF7         	movff	printf@f+1,tblptrh
  9875  000D6A  0100               	movlb	0	; () banked
  9876  000D6C  4BAF               	infsnz	printf@f& (0+255),f,b
  9877  000D6E  2BB0               	incf	(printf@f+1)& (0+255),f,b
  9878  000D70                     	if	0	;tblptru may be non-zero
  9879  000D70                     	endif
  9880  000D70                     	if	0	;tblptru may be non-zero
  9881  000D70                     	endif
  9882  000D70  0008               	tblrd		*
  9883  000D72  CFF5 F0C4          	movff	tablat,printf@c
  9884  000D76  0100               	movlb	0	; () banked
  9885  000D78  51C4               	movf	printf@c& (0+255),w,b
  9886  000D7A  B4D8               	btfsc	status,2,c
  9887  000D7C  0012               	return	
  9888  000D7E  D620               	goto	l3527
  9889  000D80                     __end_of_printf:
  9890                           	opt stack 0
  9891                           tblptru	equ	0xFF8
  9892                           tblptrh	equ	0xFF7
  9893                           tblptrl	equ	0xFF6
  9894                           tablat	equ	0xFF5
  9895                           prodh	equ	0xFF4
  9896                           prodl	equ	0xFF3
  9897                           intcon	equ	0xFF2
  9898                           intcon2	equ	0xFF1
  9899                           intcon3	equ	0xFF0
  9900                           postinc0	equ	0xFEE
  9901                           wreg	equ	0xFE8
  9902                           postdec1	equ	0xFE5
  9903                           fsr1l	equ	0xFE1
  9904                           indf2	equ	0xFDF
  9905                           postinc2	equ	0xFDE
  9906                           postdec2	equ	0xFDD
  9907                           fsr2h	equ	0xFDA
  9908                           fsr2l	equ	0xFD9
  9909                           status	equ	0xFD8
  9910                           
  9911 ;; *************** function _putch *****************
  9912 ;; Defined at:
  9913 ;;		line 30 in file "lcd.c"
  9914 ;; Parameters:    Size  Location     Type
  9915 ;;  data            1    wreg     unsigned char 
  9916 ;; Auto vars:     Size  Location     Type
  9917 ;;  data            1   18[COMRAM] unsigned char 
  9918 ;; Return value:  Size  Location     Type
  9919 ;;                  1    wreg      void 
  9920 ;; Registers used:
  9921 ;;		wreg, status,2, status,0, cstack
  9922 ;; Tracked objects:
  9923 ;;		On entry : 0/0
  9924 ;;		On exit  : 0/0
  9925 ;;		Unchanged: 0/0
  9926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9928 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9930 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;Total ram usage:        1 bytes
  9932 ;; Hardware stack levels used:    1
  9933 ;; Hardware stack levels required when called:    2
  9934 ;; This function calls:
  9935 ;;		_lcdNibble
  9936 ;; This function is called by:
  9937 ;;		_printf
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           	psect	text40
  9942  002DFE                     __ptext40:
  9943                           	opt stack 0
  9944  002DFE                     _putch:
  9945                           	opt stack 26
  9946                           
  9947                           ;incstack = 0
  9948                           ;putch@data stored from wreg
  9949  002DFE  6E13               	movwf	putch@data,c
  9950                           
  9951                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  9952  002E00  848C               	bsf	3980,2,c	;volatile
  9953                           
  9954                           ;lcd.c: 32: lcdNibble(data);
  9955  002E02  5013               	movf	putch@data,w,c
  9956  002E04  ECBF  F015         	call	_lcdNibble
  9957  002E08  0012               	return		;funcret
  9958  002E0A                     __end_of_putch:
  9959                           	opt stack 0
  9960                           tblptru	equ	0xFF8
  9961                           tblptrh	equ	0xFF7
  9962                           tblptrl	equ	0xFF6
  9963                           tablat	equ	0xFF5
  9964                           prodh	equ	0xFF4
  9965                           prodl	equ	0xFF3
  9966                           intcon	equ	0xFF2
  9967                           intcon2	equ	0xFF1
  9968                           intcon3	equ	0xFF0
  9969                           postinc0	equ	0xFEE
  9970                           wreg	equ	0xFE8
  9971                           postdec1	equ	0xFE5
  9972                           fsr1l	equ	0xFE1
  9973                           indf2	equ	0xFDF
  9974                           postinc2	equ	0xFDE
  9975                           postdec2	equ	0xFDD
  9976                           fsr2h	equ	0xFDA
  9977                           fsr2l	equ	0xFD9
  9978                           status	equ	0xFD8
  9979                           
  9980 ;; *************** function _isdigit *****************
  9981 ;; Defined at:
  9982 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  9983 ;; Parameters:    Size  Location     Type
  9984 ;;  c               1    wreg     unsigned char 
  9985 ;; Auto vars:     Size  Location     Type
  9986 ;;  c               1   18[COMRAM] unsigned char 
  9987 ;; Return value:  Size  Location     Type
  9988 ;;		None               void
  9989 ;; Registers used:
  9990 ;;		wreg, status,2, status,0
  9991 ;; Tracked objects:
  9992 ;;		On entry : 0/0
  9993 ;;		On exit  : 0/0
  9994 ;;		Unchanged: 0/0
  9995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9997 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9998 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9999 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10000 ;;Total ram usage:        3 bytes
 10001 ;; Hardware stack levels used:    1
 10002 ;; Hardware stack levels required when called:    1
 10003 ;; This function calls:
 10004 ;;		Nothing
 10005 ;; This function is called by:
 10006 ;;		_printf
 10007 ;; This function uses a non-reentrant model
 10008 ;;
 10009                           
 10010                           	psect	text41
 10011  002DBE                     __ptext41:
 10012                           	opt stack 0
 10013  002DBE                     _isdigit:
 10014                           	opt stack 27
 10015                           
 10016                           ;incstack = 0
 10017                           ;isdigit@c stored from wreg
 10018  002DBE  6E13               	movwf	isdigit@c,c
 10019  002DC0  0E00               	movlw	0
 10020  002DC2  6E12               	movwf	_isdigit$955,c
 10021  002DC4  0E3A               	movlw	58
 10022  002DC6  6013               	cpfslt	isdigit@c,c
 10023  002DC8  D005               	goto	l3469
 10024  002DCA  0E2F               	movlw	47
 10025  002DCC  6413               	cpfsgt	isdigit@c,c
 10026  002DCE  D002               	goto	l3469
 10027  002DD0  0E01               	movlw	1
 10028  002DD2  6E12               	movwf	_isdigit$955,c
 10029  002DD4                     l3469:
 10030  002DD4  C012  F011         	movff	_isdigit$955,??_isdigit
 10031  002DD8  3011               	rrcf	??_isdigit,w,c
 10032  002DDA  0012               	return	
 10033  002DDC                     __end_of_isdigit:
 10034                           	opt stack 0
 10035                           tblptru	equ	0xFF8
 10036                           tblptrh	equ	0xFF7
 10037                           tblptrl	equ	0xFF6
 10038                           tablat	equ	0xFF5
 10039                           prodh	equ	0xFF4
 10040                           prodl	equ	0xFF3
 10041                           intcon	equ	0xFF2
 10042                           intcon2	equ	0xFF1
 10043                           intcon3	equ	0xFF0
 10044                           postinc0	equ	0xFEE
 10045                           wreg	equ	0xFE8
 10046                           postdec1	equ	0xFE5
 10047                           fsr1l	equ	0xFE1
 10048                           indf2	equ	0xFDF
 10049                           postinc2	equ	0xFDE
 10050                           postdec2	equ	0xFDD
 10051                           fsr2h	equ	0xFDA
 10052                           fsr2l	equ	0xFD9
 10053                           status	equ	0xFD8
 10054                           
 10055 ;; *************** function ___wmul *****************
 10056 ;; Defined at:
 10057 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 10058 ;; Parameters:    Size  Location     Type
 10059 ;;  multiplier      2   16[COMRAM] unsigned int 
 10060 ;;  multiplicand    2   18[COMRAM] unsigned int 
 10061 ;; Auto vars:     Size  Location     Type
 10062 ;;  product         2   20[COMRAM] unsigned int 
 10063 ;; Return value:  Size  Location     Type
 10064 ;;                  2   16[COMRAM] unsigned int 
 10065 ;; Registers used:
 10066 ;;		wreg, status,2, status,0, prodl, prodh
 10067 ;; Tracked objects:
 10068 ;;		On entry : 0/0
 10069 ;;		On exit  : 0/0
 10070 ;;		Unchanged: 0/0
 10071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10072 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10073 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10075 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10076 ;;Total ram usage:        6 bytes
 10077 ;; Hardware stack levels used:    1
 10078 ;; Hardware stack levels required when called:    1
 10079 ;; This function calls:
 10080 ;;		Nothing
 10081 ;; This function is called by:
 10082 ;;		_time_difference
 10083 ;;		_printf
 10084 ;;		_eval_poly
 10085 ;;		_servo_rotate
 10086 ;; This function uses a non-reentrant model
 10087 ;;
 10088                           
 10089                           	psect	text42
 10090  002D74                     __ptext42:
 10091                           	opt stack 0
 10092  002D74                     ___wmul:
 10093                           	opt stack 23
 10094                           
 10095                           ;incstack = 0
 10096  002D74  5011               	movf	___wmul@multiplier,w,c
 10097  002D76  0213               	mulwf	___wmul@multiplicand,c
 10098  002D78  CFF3 F015          	movff	prodl,___wmul@product
 10099  002D7C  CFF4 F016          	movff	prodh,___wmul@product+1
 10100  002D80  5011               	movf	___wmul@multiplier,w,c
 10101  002D82  0214               	mulwf	___wmul@multiplicand+1,c
 10102  002D84  50F3               	movf	prodl,w,c
 10103  002D86  2616               	addwf	___wmul@product+1,f,c
 10104  002D88  5012               	movf	___wmul@multiplier+1,w,c
 10105  002D8A  0213               	mulwf	___wmul@multiplicand,c
 10106  002D8C  50F3               	movf	prodl,w,c
 10107  002D8E  2616               	addwf	___wmul@product+1,f,c
 10108  002D90  C015  F011         	movff	___wmul@product,?___wmul
 10109  002D94  C016  F012         	movff	___wmul@product+1,?___wmul+1
 10110  002D98  0012               	return	
 10111  002D9A                     __end_of___wmul:
 10112                           	opt stack 0
 10113                           tblptru	equ	0xFF8
 10114                           tblptrh	equ	0xFF7
 10115                           tblptrl	equ	0xFF6
 10116                           tablat	equ	0xFF5
 10117                           prodh	equ	0xFF4
 10118                           prodl	equ	0xFF3
 10119                           intcon	equ	0xFF2
 10120                           intcon2	equ	0xFF1
 10121                           intcon3	equ	0xFF0
 10122                           postinc0	equ	0xFEE
 10123                           wreg	equ	0xFE8
 10124                           postdec1	equ	0xFE5
 10125                           fsr1l	equ	0xFE1
 10126                           indf2	equ	0xFDF
 10127                           postinc2	equ	0xFDE
 10128                           postdec2	equ	0xFDD
 10129                           fsr2h	equ	0xFDA
 10130                           fsr2l	equ	0xFD9
 10131                           status	equ	0xFD8
 10132                           
 10133 ;; *************** function ___lwmod *****************
 10134 ;; Defined at:
 10135 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 10136 ;; Parameters:    Size  Location     Type
 10137 ;;  dividend        2   23[COMRAM] unsigned int 
 10138 ;;  divisor         2   25[COMRAM] unsigned int 
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;  counter         1   27[COMRAM] unsigned char 
 10141 ;; Return value:  Size  Location     Type
 10142 ;;                  2   23[COMRAM] unsigned int 
 10143 ;; Registers used:
 10144 ;;		wreg, status,2, status,0
 10145 ;; Tracked objects:
 10146 ;;		On entry : 0/0
 10147 ;;		On exit  : 0/0
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10150 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10153 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10154 ;;Total ram usage:        5 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; Hardware stack levels required when called:    1
 10157 ;; This function calls:
 10158 ;;		Nothing
 10159 ;; This function is called by:
 10160 ;;		_printf
 10161 ;; This function uses a non-reentrant model
 10162 ;;
 10163                           
 10164                           	psect	text43
 10165  002C5C                     __ptext43:
 10166                           	opt stack 0
 10167  002C5C                     ___lwmod:
 10168                           	opt stack 27
 10169                           
 10170                           ;incstack = 0
 10171  002C5C  501A               	movf	___lwmod@divisor,w,c
 10172  002C5E  101B               	iorwf	___lwmod@divisor+1,w,c
 10173  002C60  B4D8               	btfsc	status,2,c
 10174  002C62  D018               	goto	l871
 10175  002C64  0E01               	movlw	1
 10176  002C66  6E1C               	movwf	___lwmod@counter,c
 10177  002C68  D004               	goto	l3501
 10178  002C6A                     l3499:
 10179  002C6A  90D8               	bcf	status,0,c
 10180  002C6C  361A               	rlcf	___lwmod@divisor,f,c
 10181  002C6E  361B               	rlcf	___lwmod@divisor+1,f,c
 10182  002C70  2A1C               	incf	___lwmod@counter,f,c
 10183  002C72                     l3501:
 10184  002C72  AE1B               	btfss	___lwmod@divisor+1,7,c
 10185  002C74  D7FA               	goto	l3499
 10186  002C76                     l3503:
 10187  002C76  501A               	movf	___lwmod@divisor,w,c
 10188  002C78  5C18               	subwf	___lwmod@dividend,w,c
 10189  002C7A  501B               	movf	___lwmod@divisor+1,w,c
 10190  002C7C  5819               	subwfb	___lwmod@dividend+1,w,c
 10191  002C7E  A0D8               	btfss	status,0,c
 10192  002C80  D004               	goto	l3507
 10193  002C82  501A               	movf	___lwmod@divisor,w,c
 10194  002C84  5E18               	subwf	___lwmod@dividend,f,c
 10195  002C86  501B               	movf	___lwmod@divisor+1,w,c
 10196  002C88  5A19               	subwfb	___lwmod@dividend+1,f,c
 10197  002C8A                     l3507:
 10198  002C8A  90D8               	bcf	status,0,c
 10199  002C8C  321B               	rrcf	___lwmod@divisor+1,f,c
 10200  002C8E  321A               	rrcf	___lwmod@divisor,f,c
 10201  002C90  2E1C               	decfsz	___lwmod@counter,f,c
 10202  002C92  D7F1               	goto	l3503
 10203  002C94                     l871:
 10204  002C94  C018  F018         	movff	___lwmod@dividend,?___lwmod
 10205  002C98  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
 10206  002C9C  0012               	return		;funcret
 10207  002C9E                     __end_of___lwmod:
 10208                           	opt stack 0
 10209                           tblptru	equ	0xFF8
 10210                           tblptrh	equ	0xFF7
 10211                           tblptrl	equ	0xFF6
 10212                           tablat	equ	0xFF5
 10213                           prodh	equ	0xFF4
 10214                           prodl	equ	0xFF3
 10215                           intcon	equ	0xFF2
 10216                           intcon2	equ	0xFF1
 10217                           intcon3	equ	0xFF0
 10218                           postinc0	equ	0xFEE
 10219                           wreg	equ	0xFE8
 10220                           postdec1	equ	0xFE5
 10221                           fsr1l	equ	0xFE1
 10222                           indf2	equ	0xFDF
 10223                           postinc2	equ	0xFDE
 10224                           postdec2	equ	0xFDD
 10225                           fsr2h	equ	0xFDA
 10226                           fsr2l	equ	0xFD9
 10227                           status	equ	0xFD8
 10228                           
 10229 ;; *************** function ___lwdiv *****************
 10230 ;; Defined at:
 10231 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 10232 ;; Parameters:    Size  Location     Type
 10233 ;;  dividend        2   16[COMRAM] unsigned int 
 10234 ;;  divisor         2   18[COMRAM] unsigned int 
 10235 ;; Auto vars:     Size  Location     Type
 10236 ;;  quotient        2   20[COMRAM] unsigned int 
 10237 ;;  counter         1   22[COMRAM] unsigned char 
 10238 ;; Return value:  Size  Location     Type
 10239 ;;                  2   16[COMRAM] unsigned int 
 10240 ;; Registers used:
 10241 ;;		wreg, status,2, status,0
 10242 ;; Tracked objects:
 10243 ;;		On entry : 0/0
 10244 ;;		On exit  : 0/0
 10245 ;;		Unchanged: 0/0
 10246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10247 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10248 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10250 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10251 ;;Total ram usage:        7 bytes
 10252 ;; Hardware stack levels used:    1
 10253 ;; Hardware stack levels required when called:    1
 10254 ;; This function calls:
 10255 ;;		Nothing
 10256 ;; This function is called by:
 10257 ;;		_printf
 10258 ;; This function uses a non-reentrant model
 10259 ;;
 10260                           
 10261                           	psect	text44
 10262  002B2C                     __ptext44:
 10263                           	opt stack 0
 10264  002B2C                     ___lwdiv:
 10265                           	opt stack 27
 10266                           
 10267                           ;incstack = 0
 10268  002B2C  0E00               	movlw	0
 10269  002B2E  6E16               	movwf	___lwdiv@quotient+1,c
 10270  002B30  0E00               	movlw	0
 10271  002B32  6E15               	movwf	___lwdiv@quotient,c
 10272  002B34  5013               	movf	___lwdiv@divisor,w,c
 10273  002B36  1014               	iorwf	___lwdiv@divisor+1,w,c
 10274  002B38  B4D8               	btfsc	status,2,c
 10275  002B3A  D01C               	goto	l861
 10276  002B3C  0E01               	movlw	1
 10277  002B3E  6E17               	movwf	___lwdiv@counter,c
 10278  002B40  D004               	goto	l3481
 10279  002B42                     l3479:
 10280  002B42  90D8               	bcf	status,0,c
 10281  002B44  3613               	rlcf	___lwdiv@divisor,f,c
 10282  002B46  3614               	rlcf	___lwdiv@divisor+1,f,c
 10283  002B48  2A17               	incf	___lwdiv@counter,f,c
 10284  002B4A                     l3481:
 10285  002B4A  AE14               	btfss	___lwdiv@divisor+1,7,c
 10286  002B4C  D7FA               	goto	l3479
 10287  002B4E                     l3483:
 10288  002B4E  90D8               	bcf	status,0,c
 10289  002B50  3615               	rlcf	___lwdiv@quotient,f,c
 10290  002B52  3616               	rlcf	___lwdiv@quotient+1,f,c
 10291  002B54  5013               	movf	___lwdiv@divisor,w,c
 10292  002B56  5C11               	subwf	___lwdiv@dividend,w,c
 10293  002B58  5014               	movf	___lwdiv@divisor+1,w,c
 10294  002B5A  5812               	subwfb	___lwdiv@dividend+1,w,c
 10295  002B5C  A0D8               	btfss	status,0,c
 10296  002B5E  D005               	goto	l3491
 10297  002B60  5013               	movf	___lwdiv@divisor,w,c
 10298  002B62  5E11               	subwf	___lwdiv@dividend,f,c
 10299  002B64  5014               	movf	___lwdiv@divisor+1,w,c
 10300  002B66  5A12               	subwfb	___lwdiv@dividend+1,f,c
 10301  002B68  8015               	bsf	___lwdiv@quotient,0,c
 10302  002B6A                     l3491:
 10303  002B6A  90D8               	bcf	status,0,c
 10304  002B6C  3214               	rrcf	___lwdiv@divisor+1,f,c
 10305  002B6E  3213               	rrcf	___lwdiv@divisor,f,c
 10306  002B70  2E17               	decfsz	___lwdiv@counter,f,c
 10307  002B72  D7ED               	goto	l3483
 10308  002B74                     l861:
 10309  002B74  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
 10310  002B78  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10311  002B7C  0012               	return		;funcret
 10312  002B7E                     __end_of___lwdiv:
 10313                           	opt stack 0
 10314                           tblptru	equ	0xFF8
 10315                           tblptrh	equ	0xFF7
 10316                           tblptrl	equ	0xFF6
 10317                           tablat	equ	0xFF5
 10318                           prodh	equ	0xFF4
 10319                           prodl	equ	0xFF3
 10320                           intcon	equ	0xFF2
 10321                           intcon2	equ	0xFF1
 10322                           intcon3	equ	0xFF0
 10323                           postinc0	equ	0xFEE
 10324                           wreg	equ	0xFE8
 10325                           postdec1	equ	0xFE5
 10326                           fsr1l	equ	0xFE1
 10327                           indf2	equ	0xFDF
 10328                           postinc2	equ	0xFDE
 10329                           postdec2	equ	0xFDD
 10330                           fsr2h	equ	0xFDA
 10331                           fsr2l	equ	0xFD9
 10332                           status	equ	0xFD8
 10333                           
 10334 ;; *************** function _lcdInst *****************
 10335 ;; Defined at:
 10336 ;;		line 25 in file "lcd.c"
 10337 ;; Parameters:    Size  Location     Type
 10338 ;;  data            1    wreg     unsigned char 
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;  data            1   18[COMRAM] unsigned char 
 10341 ;; Return value:  Size  Location     Type
 10342 ;;                  1    wreg      void 
 10343 ;; Registers used:
 10344 ;;		wreg, status,2, status,0, cstack
 10345 ;; Tracked objects:
 10346 ;;		On entry : 0/0
 10347 ;;		On exit  : 0/0
 10348 ;;		Unchanged: 0/0
 10349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10353 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10354 ;;Total ram usage:        1 bytes
 10355 ;; Hardware stack levels used:    1
 10356 ;; Hardware stack levels required when called:    2
 10357 ;; This function calls:
 10358 ;;		_lcdNibble
 10359 ;; This function is called by:
 10360 ;;		_main
 10361 ;;		_init_operation
 10362 ;;		_runtime
 10363 ;;		_bottle_count
 10364 ;;		_operation_end
 10365 ;;		_date_time
 10366 ;;		_initLCD
 10367 ;; This function uses a non-reentrant model
 10368 ;;
 10369                           
 10370                           	psect	text45
 10371  002E0A                     __ptext45:
 10372                           	opt stack 0
 10373  002E0A                     _lcdInst:
 10374                           	opt stack 27
 10375                           
 10376                           ;incstack = 0
 10377                           ;lcdInst@data stored from wreg
 10378  002E0A  6E13               	movwf	lcdInst@data,c
 10379                           
 10380                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 10381  002E0C  948C               	bcf	3980,2,c	;volatile
 10382                           
 10383                           ;lcd.c: 27: lcdNibble(data);
 10384  002E0E  5013               	movf	lcdInst@data,w,c
 10385  002E10  ECBF  F015         	call	_lcdNibble
 10386  002E14  0012               	return		;funcret
 10387  002E16                     __end_of_lcdInst:
 10388                           	opt stack 0
 10389                           tblptru	equ	0xFF8
 10390                           tblptrh	equ	0xFF7
 10391                           tblptrl	equ	0xFF6
 10392                           tablat	equ	0xFF5
 10393                           prodh	equ	0xFF4
 10394                           prodl	equ	0xFF3
 10395                           intcon	equ	0xFF2
 10396                           intcon2	equ	0xFF1
 10397                           intcon3	equ	0xFF0
 10398                           postinc0	equ	0xFEE
 10399                           wreg	equ	0xFE8
 10400                           postdec1	equ	0xFE5
 10401                           fsr1l	equ	0xFE1
 10402                           indf2	equ	0xFDF
 10403                           postinc2	equ	0xFDE
 10404                           postdec2	equ	0xFDD
 10405                           fsr2h	equ	0xFDA
 10406                           fsr2l	equ	0xFD9
 10407                           status	equ	0xFD8
 10408                           
 10409 ;; *************** function _lcdNibble *****************
 10410 ;; Defined at:
 10411 ;;		line 35 in file "lcd.c"
 10412 ;; Parameters:    Size  Location     Type
 10413 ;;  data            1    wreg     unsigned char 
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;  data            1   17[COMRAM] unsigned char 
 10416 ;;  temp            1   16[COMRAM] unsigned char 
 10417 ;; Return value:  Size  Location     Type
 10418 ;;                  1    wreg      void 
 10419 ;; Registers used:
 10420 ;;		wreg, status,2, status,0
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10427 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10429 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10430 ;;Total ram usage:        2 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; Hardware stack levels required when called:    1
 10433 ;; This function calls:
 10434 ;;		Nothing
 10435 ;; This function is called by:
 10436 ;;		_lcdInst
 10437 ;;		_putch
 10438 ;; This function uses a non-reentrant model
 10439 ;;
 10440                           
 10441                           	psect	text46
 10442  002B7E                     __ptext46:
 10443                           	opt stack 0
 10444  002B7E                     _lcdNibble:
 10445                           	opt stack 26
 10446                           
 10447                           ;incstack = 0
 10448                           ;lcdNibble@data stored from wreg
 10449  002B7E  6E12               	movwf	lcdNibble@data,c
 10450                           
 10451                           ;lcd.c: 37: char temp = data & 0xF0;
 10452  002B80  5012               	movf	lcdNibble@data,w,c
 10453  002B82  0BF0               	andlw	240
 10454  002B84  6E11               	movwf	lcdNibble@temp,c
 10455                           
 10456                           ;lcd.c: 38: LATD = LATD & 0x0F;
 10457  002B86  508C               	movf	3980,w,c	;volatile
 10458  002B88  0B0F               	andlw	15
 10459  002B8A  6E8C               	movwf	3980,c	;volatile
 10460                           
 10461                           ;lcd.c: 39: LATD = temp | LATD;
 10462  002B8C  5011               	movf	lcdNibble@temp,w,c
 10463  002B8E  108C               	iorwf	3980,w,c	;volatile
 10464  002B90  6E8C               	movwf	3980,c	;volatile
 10465                           
 10466                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 10467  002B92  968C               	bcf	3980,3,c	;volatile
 10468                           
 10469                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10470  002B94  0E19               	movlw	25
 10471  002B96                     u4147:
 10472  002B96  2EE8               	decfsz	wreg,f,c
 10473  002B98  D7FE               	bra	u4147
 10474                           
 10475                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 10476  002B9A  868C               	bsf	3980,3,c	;volatile
 10477                           
 10478                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10479  002B9C  0E19               	movlw	25
 10480  002B9E                     u4157:
 10481  002B9E  2EE8               	decfsz	wreg,f,c
 10482  002BA0  D7FE               	bra	u4157
 10483                           
 10484                           ;lcd.c: 46: data = data << 4;
 10485  002BA2  3812               	swapf	lcdNibble@data,w,c
 10486  002BA4  0BF0               	andlw	240
 10487  002BA6  6E12               	movwf	lcdNibble@data,c
 10488                           
 10489                           ;lcd.c: 48: temp = data & 0xF0;
 10490  002BA8  5012               	movf	lcdNibble@data,w,c
 10491  002BAA  0BF0               	andlw	240
 10492  002BAC  6E11               	movwf	lcdNibble@temp,c
 10493                           
 10494                           ;lcd.c: 49: LATD = LATD & 0x0F;
 10495  002BAE  508C               	movf	3980,w,c	;volatile
 10496  002BB0  0B0F               	andlw	15
 10497  002BB2  6E8C               	movwf	3980,c	;volatile
 10498                           
 10499                           ;lcd.c: 50: LATD = temp | LATD;
 10500  002BB4  5011               	movf	lcdNibble@temp,w,c
 10501  002BB6  108C               	iorwf	3980,w,c	;volatile
 10502  002BB8  6E8C               	movwf	3980,c	;volatile
 10503                           
 10504                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 10505  002BBA  968C               	bcf	3980,3,c	;volatile
 10506                           
 10507                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10508  002BBC  0E19               	movlw	25
 10509  002BBE                     u4167:
 10510  002BBE  2EE8               	decfsz	wreg,f,c
 10511  002BC0  D7FE               	bra	u4167
 10512                           
 10513                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 10514  002BC2  868C               	bsf	3980,3,c	;volatile
 10515                           
 10516                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10517  002BC4  0E19               	movlw	25
 10518  002BC6                     u4177:
 10519  002BC6  2EE8               	decfsz	wreg,f,c
 10520  002BC8  D7FE               	bra	u4177
 10521  002BCA  0012               	return		;funcret
 10522  002BCC                     __end_of_lcdNibble:
 10523                           	opt stack 0
 10524                           tblptru	equ	0xFF8
 10525                           tblptrh	equ	0xFF7
 10526                           tblptrl	equ	0xFF6
 10527                           tablat	equ	0xFF5
 10528                           prodh	equ	0xFF4
 10529                           prodl	equ	0xFF3
 10530                           intcon	equ	0xFF2
 10531                           intcon2	equ	0xFF1
 10532                           intcon3	equ	0xFF0
 10533                           postinc0	equ	0xFEE
 10534                           wreg	equ	0xFE8
 10535                           postdec1	equ	0xFE5
 10536                           fsr1l	equ	0xFE1
 10537                           indf2	equ	0xFDF
 10538                           postinc2	equ	0xFDE
 10539                           postdec2	equ	0xFDD
 10540                           fsr2h	equ	0xFDA
 10541                           fsr2l	equ	0xFD9
 10542                           status	equ	0xFD8
 10543                           
 10544 ;; *************** function _I2C_Master_Init *****************
 10545 ;; Defined at:
 10546 ;;		line 13 in file "I2C.c"
 10547 ;; Parameters:    Size  Location     Type
 10548 ;;  c               4   29[COMRAM] const unsigned long 
 10549 ;; Auto vars:     Size  Location     Type
 10550 ;;		None
 10551 ;; Return value:  Size  Location     Type
 10552 ;;                  1    wreg      void 
 10553 ;; Registers used:
 10554 ;;		wreg, status,2, status,0, cstack
 10555 ;; Tracked objects:
 10556 ;;		On entry : 0/0
 10557 ;;		On exit  : 0/0
 10558 ;;		Unchanged: 0/0
 10559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10560 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10562 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10563 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10564 ;;Total ram usage:        8 bytes
 10565 ;; Hardware stack levels used:    1
 10566 ;; Hardware stack levels required when called:    2
 10567 ;; This function calls:
 10568 ;;		___lldiv
 10569 ;; This function is called by:
 10570 ;;		_main
 10571 ;; This function uses a non-reentrant model
 10572 ;;
 10573                           
 10574                           	psect	text47
 10575  002AD2                     __ptext47:
 10576                           	opt stack 0
 10577  002AD2                     _I2C_Master_Init:
 10578                           	opt stack 28
 10579                           
 10580                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 10581                           
 10582                           ;incstack = 0
 10583  002AD2  0E00               	movlw	0
 10584  002AD4  6EC7               	movwf	4039,c	;volatile
 10585                           
 10586                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 10587  002AD6  0E28               	movlw	40
 10588  002AD8  6EC6               	movwf	4038,c	;volatile
 10589                           
 10590                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 10591  002ADA  0E00               	movlw	0
 10592  002ADC  6EC5               	movwf	4037,c	;volatile
 10593                           
 10594                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
 10595  002ADE  0E80               	movlw	128
 10596  002AE0  6E11               	movwf	___lldiv@dividend,c
 10597  002AE2  0E96               	movlw	150
 10598  002AE4  6E12               	movwf	___lldiv@dividend+1,c
 10599  002AE6  0E98               	movlw	152
 10600  002AE8  6E13               	movwf	___lldiv@dividend+2,c
 10601  002AEA  0E00               	movlw	0
 10602  002AEC  6E14               	movwf	___lldiv@dividend+3,c
 10603  002AEE  C01E  F022         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10604  002AF2  C01F  F023         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10605  002AF6  C020  F024         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10606  002AFA  C021  F025         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10607  002AFE  0E02               	movlw	2
 10608  002B00                     u3415:
 10609  002B00  90D8               	bcf	status,0,c
 10610  002B02  3622               	rlcf	??_I2C_Master_Init,f,c
 10611  002B04  3623               	rlcf	??_I2C_Master_Init+1,f,c
 10612  002B06  3624               	rlcf	??_I2C_Master_Init+2,f,c
 10613  002B08  3625               	rlcf	??_I2C_Master_Init+3,f,c
 10614  002B0A  2EE8               	decfsz	wreg,f,c
 10615  002B0C  D7F9               	goto	u3415
 10616  002B0E  C022  F015         	movff	??_I2C_Master_Init,___lldiv@divisor
 10617  002B12  C023  F016         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10618  002B16  C024  F017         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10619  002B1A  C025  F018         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10620  002B1E  EC4C  F014         	call	___lldiv	;wreg free
 10621  002B22  0411               	decf	?___lldiv,w,c
 10622  002B24  6EC8               	movwf	4040,c	;volatile
 10623                           
 10624                           ;I2C.c: 20: TRISC3 = 1;
 10625  002B26  8694               	bsf	3988,3,c	;volatile
 10626                           
 10627                           ;I2C.c: 21: TRISC4 = 1;
 10628  002B28  8894               	bsf	3988,4,c	;volatile
 10629  002B2A  0012               	return		;funcret
 10630  002B2C                     __end_of_I2C_Master_Init:
 10631                           	opt stack 0
 10632                           tblptru	equ	0xFF8
 10633                           tblptrh	equ	0xFF7
 10634                           tblptrl	equ	0xFF6
 10635                           tablat	equ	0xFF5
 10636                           prodh	equ	0xFF4
 10637                           prodl	equ	0xFF3
 10638                           intcon	equ	0xFF2
 10639                           intcon2	equ	0xFF1
 10640                           intcon3	equ	0xFF0
 10641                           postinc0	equ	0xFEE
 10642                           wreg	equ	0xFE8
 10643                           postdec1	equ	0xFE5
 10644                           fsr1l	equ	0xFE1
 10645                           indf2	equ	0xFDF
 10646                           postinc2	equ	0xFDE
 10647                           postdec2	equ	0xFDD
 10648                           fsr2h	equ	0xFDA
 10649                           fsr2l	equ	0xFD9
 10650                           status	equ	0xFD8
 10651                           
 10652 ;; *************** function ___lldiv *****************
 10653 ;; Defined at:
 10654 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 10655 ;; Parameters:    Size  Location     Type
 10656 ;;  dividend        4   16[COMRAM] unsigned long 
 10657 ;;  divisor         4   20[COMRAM] unsigned long 
 10658 ;; Auto vars:     Size  Location     Type
 10659 ;;  quotient        4   24[COMRAM] unsigned long 
 10660 ;;  counter         1   28[COMRAM] unsigned char 
 10661 ;; Return value:  Size  Location     Type
 10662 ;;                  4   16[COMRAM] unsigned long 
 10663 ;; Registers used:
 10664 ;;		wreg, status,2, status,0
 10665 ;; Tracked objects:
 10666 ;;		On entry : 0/0
 10667 ;;		On exit  : 0/0
 10668 ;;		Unchanged: 0/0
 10669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10670 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10671 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10673 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10674 ;;Total ram usage:       13 bytes
 10675 ;; Hardware stack levels used:    1
 10676 ;; Hardware stack levels required when called:    1
 10677 ;; This function calls:
 10678 ;;		Nothing
 10679 ;; This function is called by:
 10680 ;;		_I2C_Master_Init
 10681 ;; This function uses a non-reentrant model
 10682 ;;
 10683                           
 10684                           	psect	text48
 10685  002898                     __ptext48:
 10686                           	opt stack 0
 10687  002898                     ___lldiv:
 10688                           	opt stack 28
 10689                           
 10690                           ;incstack = 0
 10691  002898  0E00               	movlw	0
 10692  00289A  6E19               	movwf	___lldiv@quotient,c
 10693  00289C  0E00               	movlw	0
 10694  00289E  6E1A               	movwf	___lldiv@quotient+1,c
 10695  0028A0  0E00               	movlw	0
 10696  0028A2  6E1B               	movwf	___lldiv@quotient+2,c
 10697  0028A4  0E00               	movlw	0
 10698  0028A6  6E1C               	movwf	___lldiv@quotient+3,c
 10699  0028A8  5015               	movf	___lldiv@divisor,w,c
 10700  0028AA  1016               	iorwf	___lldiv@divisor+1,w,c
 10701  0028AC  1017               	iorwf	___lldiv@divisor+2,w,c
 10702  0028AE  1018               	iorwf	___lldiv@divisor+3,w,c
 10703  0028B0  B4D8               	btfsc	status,2,c
 10704  0028B2  D02A               	goto	l808
 10705  0028B4  0E01               	movlw	1
 10706  0028B6  6E1D               	movwf	___lldiv@counter,c
 10707  0028B8  D006               	goto	l3799
 10708  0028BA                     l3797:
 10709  0028BA  90D8               	bcf	status,0,c
 10710  0028BC  3615               	rlcf	___lldiv@divisor,f,c
 10711  0028BE  3616               	rlcf	___lldiv@divisor+1,f,c
 10712  0028C0  3617               	rlcf	___lldiv@divisor+2,f,c
 10713  0028C2  3618               	rlcf	___lldiv@divisor+3,f,c
 10714  0028C4  2A1D               	incf	___lldiv@counter,f,c
 10715  0028C6                     l3799:
 10716  0028C6  AE18               	btfss	___lldiv@divisor+3,7,c
 10717  0028C8  D7F8               	goto	l3797
 10718  0028CA                     l3801:
 10719  0028CA  90D8               	bcf	status,0,c
 10720  0028CC  3619               	rlcf	___lldiv@quotient,f,c
 10721  0028CE  361A               	rlcf	___lldiv@quotient+1,f,c
 10722  0028D0  361B               	rlcf	___lldiv@quotient+2,f,c
 10723  0028D2  361C               	rlcf	___lldiv@quotient+3,f,c
 10724  0028D4  5015               	movf	___lldiv@divisor,w,c
 10725  0028D6  5C11               	subwf	___lldiv@dividend,w,c
 10726  0028D8  5016               	movf	___lldiv@divisor+1,w,c
 10727  0028DA  5812               	subwfb	___lldiv@dividend+1,w,c
 10728  0028DC  5017               	movf	___lldiv@divisor+2,w,c
 10729  0028DE  5813               	subwfb	___lldiv@dividend+2,w,c
 10730  0028E0  5018               	movf	___lldiv@divisor+3,w,c
 10731  0028E2  5814               	subwfb	___lldiv@dividend+3,w,c
 10732  0028E4  A0D8               	btfss	status,0,c
 10733  0028E6  D009               	goto	l3809
 10734  0028E8  5015               	movf	___lldiv@divisor,w,c
 10735  0028EA  5E11               	subwf	___lldiv@dividend,f,c
 10736  0028EC  5016               	movf	___lldiv@divisor+1,w,c
 10737  0028EE  5A12               	subwfb	___lldiv@dividend+1,f,c
 10738  0028F0  5017               	movf	___lldiv@divisor+2,w,c
 10739  0028F2  5A13               	subwfb	___lldiv@dividend+2,f,c
 10740  0028F4  5018               	movf	___lldiv@divisor+3,w,c
 10741  0028F6  5A14               	subwfb	___lldiv@dividend+3,f,c
 10742  0028F8  8019               	bsf	___lldiv@quotient,0,c
 10743  0028FA                     l3809:
 10744  0028FA  90D8               	bcf	status,0,c
 10745  0028FC  3218               	rrcf	___lldiv@divisor+3,f,c
 10746  0028FE  3217               	rrcf	___lldiv@divisor+2,f,c
 10747  002900  3216               	rrcf	___lldiv@divisor+1,f,c
 10748  002902  3215               	rrcf	___lldiv@divisor,f,c
 10749  002904  2E1D               	decfsz	___lldiv@counter,f,c
 10750  002906  D7E1               	goto	l3801
 10751  002908                     l808:
 10752  002908  C019  F011         	movff	___lldiv@quotient,?___lldiv
 10753  00290C  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
 10754  002910  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
 10755  002914  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
 10756  002918  0012               	return		;funcret
 10757  00291A                     __end_of___lldiv:
 10758                           	opt stack 0
 10759                           tblptru	equ	0xFF8
 10760                           tblptrh	equ	0xFF7
 10761                           tblptrl	equ	0xFF6
 10762                           tablat	equ	0xFF5
 10763                           prodh	equ	0xFF4
 10764                           prodl	equ	0xFF3
 10765                           intcon	equ	0xFF2
 10766                           intcon2	equ	0xFF1
 10767                           intcon3	equ	0xFF0
 10768                           postinc0	equ	0xFEE
 10769                           wreg	equ	0xFE8
 10770                           postdec1	equ	0xFE5
 10771                           fsr1l	equ	0xFE1
 10772                           indf2	equ	0xFDF
 10773                           postinc2	equ	0xFDE
 10774                           postdec2	equ	0xFDD
 10775                           fsr2h	equ	0xFDA
 10776                           fsr2l	equ	0xFD9
 10777                           status	equ	0xFD8
 10778                           
 10779 ;; *************** function _keypressed *****************
 10780 ;; Defined at:
 10781 ;;		line 139 in file "main.c"
 10782 ;; Parameters:    Size  Location     Type
 10783 ;;		None
 10784 ;; Auto vars:     Size  Location     Type
 10785 ;;		None
 10786 ;; Return value:  Size  Location     Type
 10787 ;;                  1    wreg      void 
 10788 ;; Registers used:
 10789 ;;		wreg, status,2, status,0
 10790 ;; Tracked objects:
 10791 ;;		On entry : 0/0
 10792 ;;		On exit  : 0/0
 10793 ;;		Unchanged: 0/0
 10794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10797 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10798 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10799 ;;Total ram usage:       16 bytes
 10800 ;; Hardware stack levels used:    1
 10801 ;; This function calls:
 10802 ;;		Nothing
 10803 ;; This function is called by:
 10804 ;;		Interrupt level 2
 10805 ;; This function uses a non-reentrant model
 10806 ;;
 10807                           
 10808                           	psect	intcode
 10809  000008                     __pintcode:
 10810                           	opt stack 0
 10811  000008                     _keypressed:
 10812                           	opt stack 22
 10813                           
 10814                           ;incstack = 0
 10815  000008  826F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10816  00000A  ED81  F00F         	call	int_func,f	;refresh shadow registers
 10817                           tblptru	equ	0xFF8
 10818                           tblptrh	equ	0xFF7
 10819                           tblptrl	equ	0xFF6
 10820                           tablat	equ	0xFF5
 10821                           prodh	equ	0xFF4
 10822                           prodl	equ	0xFF3
 10823                           intcon	equ	0xFF2
 10824                           intcon2	equ	0xFF1
 10825                           intcon3	equ	0xFF0
 10826                           postinc0	equ	0xFEE
 10827                           wreg	equ	0xFE8
 10828                           postdec1	equ	0xFE5
 10829                           fsr1l	equ	0xFE1
 10830                           indf2	equ	0xFDF
 10831                           postinc2	equ	0xFDE
 10832                           postdec2	equ	0xFDD
 10833                           fsr2h	equ	0xFDA
 10834                           fsr2l	equ	0xFD9
 10835                           status	equ	0xFD8
 10836                           
 10837                           	psect	intcode_body
 10838  001F02                     __pintcode_body:
 10839                           	opt stack 22
 10840  001F02                     int_func:
 10841                           	opt stack 22
 10842  001F02  0006               	pop		; remove dummy address from shadow register refresh
 10843  001F04  CFFA F003          	movff	pclath,??_keypressed+2
 10844  001F08  CFFB F004          	movff	pclatu,??_keypressed+3
 10845  001F0C  CFE9 F005          	movff	fsr0l,??_keypressed+4
 10846  001F10  CFEA F006          	movff	fsr0h,??_keypressed+5
 10847  001F14  CFE1 F007          	movff	fsr1l,??_keypressed+6
 10848  001F18  CFE2 F008          	movff	fsr1h,??_keypressed+7
 10849  001F1C  CFD9 F009          	movff	fsr2l,??_keypressed+8
 10850  001F20  CFDA F00A          	movff	fsr2h,??_keypressed+9
 10851  001F24  CFF3 F00B          	movff	prodl,??_keypressed+10
 10852  001F28  CFF4 F00C          	movff	prodh,??_keypressed+11
 10853  001F2C  CFF6 F00D          	movff	tblptrl,??_keypressed+12
 10854  001F30  CFF7 F00E          	movff	tblptrh,??_keypressed+13
 10855  001F34  CFF8 F00F          	movff	tblptru,??_keypressed+14
 10856  001F38  CFF5 F010          	movff	tablat,??_keypressed+15
 10857                           
 10858                           ;main.c: 140: if(INT1IF){
 10859  001F3C  B0F0               	btfsc	intcon3,0,c	;volatile
 10860  001F3E  D01B               	goto	i2l4161
 10861  001F40  D03F               	goto	i2l112
 10862  001F42                     i2l4141:
 10863                           
 10864                           ;main.c: 143: curr_state = OPERATION_END;
 10865  001F42  0E02               	movlw	2
 10866  001F44  D012               	goto	L11
 10867  001F46                     i2l4143:
 10868                           
 10869                           ;main.c: 147: curr_state = OPERATION;
 10870  001F46  0E01               	movlw	1
 10871  001F48  D010               	goto	L11
 10872  001F4A                     i2l4145:
 10873                           
 10874                           ;main.c: 151: curr_state = RUNTIME;
 10875  001F4A  0E05               	movlw	5
 10876  001F4C  D00E               	goto	L11
 10877  001F4E                     i2l4147:
 10878                           
 10879                           ;main.c: 155: curr_state = BOTTLECOUNT;
 10880  001F4E  0E04               	movlw	4
 10881  001F50  0100               	movlb	0	; () banked
 10882  001F52  6FFD               	movwf	_curr_state& (0+255),b
 10883                           
 10884                           ;main.c: 156: bot_type = TOTAL;
 10885  001F54  0E00               	movlw	0
 10886  001F56  D00C               	goto	L10
 10887  001F58                     i2l4149:
 10888                           
 10889                           ;main.c: 159: bot_type = A;
 10890  001F58  0E01               	movlw	1
 10891  001F5A  D00A               	goto	L10
 10892  001F5C                     i2l4151:
 10893                           
 10894                           ;main.c: 162: bot_type = B;
 10895  001F5C  0E02               	movlw	2
 10896  001F5E  D008               	goto	L10
 10897  001F60                     i2l4153:
 10898                           
 10899                           ;main.c: 165: bot_type = C;
 10900  001F60  0E03               	movlw	3
 10901  001F62  D006               	goto	L10
 10902  001F64                     i2l4155:
 10903                           
 10904                           ;main.c: 168: bot_type = D;
 10905  001F64  0E04               	movlw	4
 10906  001F66  D004               	goto	L10
 10907  001F68                     i2l4157:
 10908                           
 10909                           ;main.c: 171: curr_state = DATETIME;
 10910  001F68  0E03               	movlw	3
 10911  001F6A                     L11:
 10912  001F6A  0100               	movlb	0	; () banked
 10913  001F6C  6FFD               	movwf	_curr_state& (0+255),b
 10914                           
 10915                           ;main.c: 172: bot_type = O;
 10916  001F6E  0E05               	movlw	5
 10917  001F70                     L10:
 10918  001F70  0100               	movlb	0	; () banked
 10919  001F72  6FFC               	movwf	_bot_type& (0+255),b
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;main.c: 176: }
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;main.c: 175: break;
 10926                           
 10927                           ;main.c: 174: default:
 10928                           
 10929                           ;main.c: 173: break;
 10930  001F74  D025               	goto	i2l112
 10931  001F76                     i2l4161:
 10932  001F76  3881               	swapf	3969,w,c	;volatile
 10933  001F78  0B0F               	andlw	15
 10934  001F7A  0B0F               	andlw	15
 10935  001F7C  6E01               	movwf	??_keypressed& (0+255),c
 10936  001F7E  6A02               	clrf	(??_keypressed+1)& (0+255),c
 10937                           
 10938                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10939                           ; Switch size 1, requested type "space"
 10940                           ; Number of cases is 1, Range of values is 0 to 0
 10941                           ; switch strategies available:
 10942                           ; Name         Instructions Cycles
 10943                           ; simple_byte            4     3 (average)
 10944                           ;	Chosen strategy is simple_byte
 10945  001F80  5002               	movf	??_keypressed+1,w,c
 10946  001F82  0A00               	xorlw	0	; case 0
 10947  001F84  A4D8               	btfss	status,2,c
 10948  001F86  D01C               	goto	i2l112
 10949                           
 10950                           ; Switch size 1, requested type "space"
 10951                           ; Number of cases is 9, Range of values is 0 to 15
 10952                           ; switch strategies available:
 10953                           ; Name         Instructions Cycles
 10954                           ; simple_byte           28    15 (average)
 10955                           ;	Chosen strategy is simple_byte
 10956  001F88  5001               	movf	??_keypressed,w,c
 10957  001F8A  0A00               	xorlw	0	; case 0
 10958  001F8C  B4D8               	btfsc	status,2,c
 10959  001F8E  D7DB               	goto	i2l4143
 10960  001F90  0A01               	xorlw	1	; case 1
 10961  001F92  B4D8               	btfsc	status,2,c
 10962  001F94  D7DA               	goto	i2l4145
 10963  001F96  0A03               	xorlw	3	; case 2
 10964  001F98  B4D8               	btfsc	status,2,c
 10965  001F9A  D7D9               	goto	i2l4147
 10966  001F9C  0A01               	xorlw	1	; case 3
 10967  001F9E  B4D8               	btfsc	status,2,c
 10968  001FA0  D7DB               	goto	i2l4149
 10969  001FA2  0A07               	xorlw	7	; case 4
 10970  001FA4  B4D8               	btfsc	status,2,c
 10971  001FA6  D7E0               	goto	i2l4157
 10972  001FA8  0A03               	xorlw	3	; case 7
 10973  001FAA  B4D8               	btfsc	status,2,c
 10974  001FAC  D7D7               	goto	i2l4151
 10975  001FAE  0A0C               	xorlw	12	; case 11
 10976  001FB0  B4D8               	btfsc	status,2,c
 10977  001FB2  D7D6               	goto	i2l4153
 10978  001FB4  0A07               	xorlw	7	; case 12
 10979  001FB6  B4D8               	btfsc	status,2,c
 10980  001FB8  D7C4               	goto	i2l4141
 10981  001FBA  0A03               	xorlw	3	; case 15
 10982  001FBC  B4D8               	btfsc	status,2,c
 10983  001FBE  D7D2               	goto	i2l4155
 10984  001FC0                     i2l112:
 10985                           
 10986                           ;main.c: 177: }
 10987                           ;main.c: 178: INT1IF = 0;
 10988  001FC0  90F0               	bcf	intcon3,0,c	;volatile
 10989                           
 10990                           ;main.c: 179: return;
 10991  001FC2  C010  FFF5         	movff	??_keypressed+15,tablat
 10992  001FC6  C00F  FFF8         	movff	??_keypressed+14,tblptru
 10993  001FCA  C00E  FFF7         	movff	??_keypressed+13,tblptrh
 10994  001FCE  C00D  FFF6         	movff	??_keypressed+12,tblptrl
 10995  001FD2  C00C  FFF4         	movff	??_keypressed+11,prodh
 10996  001FD6  C00B  FFF3         	movff	??_keypressed+10,prodl
 10997  001FDA  C00A  FFDA         	movff	??_keypressed+9,fsr2h
 10998  001FDE  C009  FFD9         	movff	??_keypressed+8,fsr2l
 10999  001FE2  C008  FFE2         	movff	??_keypressed+7,fsr1h
 11000  001FE6  C007  FFE1         	movff	??_keypressed+6,fsr1l
 11001  001FEA  C006  FFEA         	movff	??_keypressed+5,fsr0h
 11002  001FEE  C005  FFE9         	movff	??_keypressed+4,fsr0l
 11003  001FF2  C004  FFFB         	movff	??_keypressed+3,pclatu
 11004  001FF6  C003  FFFA         	movff	??_keypressed+2,pclath
 11005  001FFA  926F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11006  001FFC  0011               	retfie		f
 11007  001FFE                     __end_of_keypressed:
 11008                           	opt stack 0
 11009                           pclatu	equ	0xFFB
 11010                           pclath	equ	0xFFA
 11011                           tblptru	equ	0xFF8
 11012                           tblptrh	equ	0xFF7
 11013                           tblptrl	equ	0xFF6
 11014                           tablat	equ	0xFF5
 11015                           prodh	equ	0xFF4
 11016                           prodl	equ	0xFF3
 11017                           intcon	equ	0xFF2
 11018                           intcon2	equ	0xFF1
 11019                           intcon3	equ	0xFF0
 11020                           postinc0	equ	0xFEE
 11021                           fsr0h	equ	0xFEA
 11022                           fsr0l	equ	0xFE9
 11023                           wreg	equ	0xFE8
 11024                           postdec1	equ	0xFE5
 11025                           fsr1h	equ	0xFE2
 11026                           fsr1l	equ	0xFE1
 11027                           indf2	equ	0xFDF
 11028                           postinc2	equ	0xFDE
 11029                           postdec2	equ	0xFDD
 11030                           fsr2h	equ	0xFDA
 11031                           fsr2l	equ	0xFD9
 11032                           status	equ	0xFD8
 11033                           pclatu	equ	0xFFB
 11034                           pclath	equ	0xFFA
 11035                           tblptru	equ	0xFF8
 11036                           tblptrh	equ	0xFF7
 11037                           tblptrl	equ	0xFF6
 11038                           tablat	equ	0xFF5
 11039                           prodh	equ	0xFF4
 11040                           prodl	equ	0xFF3
 11041                           intcon	equ	0xFF2
 11042                           intcon2	equ	0xFF1
 11043                           intcon3	equ	0xFF0
 11044                           postinc0	equ	0xFEE
 11045                           fsr0h	equ	0xFEA
 11046                           fsr0l	equ	0xFE9
 11047                           wreg	equ	0xFE8
 11048                           postdec1	equ	0xFE5
 11049                           fsr1h	equ	0xFE2
 11050                           fsr1l	equ	0xFE1
 11051                           indf2	equ	0xFDF
 11052                           postinc2	equ	0xFDE
 11053                           postdec2	equ	0xFDD
 11054                           fsr2h	equ	0xFDA
 11055                           fsr2l	equ	0xFD9
 11056                           status	equ	0xFD8
 11057                           
 11058                           	psect	rparam
 11059  0000                     pclatu	equ	0xFFB
 11060                           pclath	equ	0xFFA
 11061                           tblptru	equ	0xFF8
 11062                           tblptrh	equ	0xFF7
 11063                           tblptrl	equ	0xFF6
 11064                           tablat	equ	0xFF5
 11065                           prodh	equ	0xFF4
 11066                           prodl	equ	0xFF3
 11067                           intcon	equ	0xFF2
 11068                           intcon2	equ	0xFF1
 11069                           intcon3	equ	0xFF0
 11070                           postinc0	equ	0xFEE
 11071                           fsr0h	equ	0xFEA
 11072                           fsr0l	equ	0xFE9
 11073                           wreg	equ	0xFE8
 11074                           postdec1	equ	0xFE5
 11075                           fsr1h	equ	0xFE2
 11076                           fsr1l	equ	0xFE1
 11077                           indf2	equ	0xFDF
 11078                           postinc2	equ	0xFDE
 11079                           postdec2	equ	0xFDD
 11080                           fsr2h	equ	0xFDA
 11081                           fsr2l	equ	0xFD9
 11082                           status	equ	0xFD8
 11083                           
 11084                           	psect	temp
 11085  00006F                     btemp:
 11086                           	opt stack 0
 11087  00006F                     	ds	1
 11088  0000                     int$flags	set	btemp
 11089                           pclatu	equ	0xFFB
 11090                           pclath	equ	0xFFA
 11091                           tblptru	equ	0xFF8
 11092                           tblptrh	equ	0xFF7
 11093                           tblptrl	equ	0xFF6
 11094                           tablat	equ	0xFF5
 11095                           prodh	equ	0xFF4
 11096                           prodl	equ	0xFF3
 11097                           intcon	equ	0xFF2
 11098                           intcon2	equ	0xFF1
 11099                           intcon3	equ	0xFF0
 11100                           postinc0	equ	0xFEE
 11101                           fsr0h	equ	0xFEA
 11102                           fsr0l	equ	0xFE9
 11103                           wreg	equ	0xFE8
 11104                           postdec1	equ	0xFE5
 11105                           fsr1h	equ	0xFE2
 11106                           fsr1l	equ	0xFE1
 11107                           indf2	equ	0xFDF
 11108                           postinc2	equ	0xFDE
 11109                           postdec2	equ	0xFDD
 11110                           fsr2h	equ	0xFDA
 11111                           fsr2l	equ	0xFD9
 11112                           status	equ	0xFD8


Data Sizes:
    Strings     282
    Constant    99
    Data        16
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    108     110
    BANK0           128    108     126
    BANK1           256     54      54
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_19(CODE[23]), STR_18(CODE[23]), STR_17(CODE[17]), STR_16(CODE[17]), 
		 -> STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[19]), STR_4(CODE[17]), 
		 -> STR_3(CODE[20]), STR_2(CODE[20]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    read_colorsensor2@blue	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@blue(BANK1[2]), 

    read_colorsensor2@green	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@green(BANK1[2]), 

    read_colorsensor2@red	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@red(BANK1[2]), 

    read_colorsensor2@clear	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@clear(BANK1[2]), 

    read_colorsensor1@blue	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@blue(BANK1[2]), 

    read_colorsensor1@green	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@green(BANK1[2]), 

    read_colorsensor1@red	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@red(BANK1[2]), 

    read_colorsensor1@clear	PTR unsigned char  size(2) Largest target is 2
		 -> init_operation@clear(BANK1[2]), 

    stepper_state@step_state	PTR unsigned char  size(2) Largest target is 2
		 -> main@step_state(BANK0[2]), 

    date_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK0[7]), 

    operation_end@step_state	PTR unsigned char  size(2) Largest target is 2
		 -> main@step_state(BANK0[2]), 

    bottle_count@bot_count	PTR unsigned char  size(2) Largest target is 4
		 -> main@bot_count(BANK0[4]), 

    runtime@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK0[7]), 

    runtime@end_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK0[7]), 

    init_operation@bot_count	PTR unsigned char  size(2) Largest target is 4
		 -> main@bot_count(BANK0[4]), 

    init_operation@step_state	PTR unsigned char  size(2) Largest target is 2
		 -> main@step_state(BANK0[2]), 

    init_operation@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK0[7]), 

    init_operation@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK0[7]), 

    time_difference@time2	PTR unsigned char  size(2) Largest target is 7
		 -> init_operation@detection_time(BANK1[7]), main@start_time(BANK0[7]), 

    time_difference@time1	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK0[7]), main@time(BANK0[7]), 

    update_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> init_operation@detection_time(BANK1[7]), main@end_time(BANK0[7]), main@time(BANK0[7]), main@start_time(BANK0[7]), 


Critical Paths under _main in COMRAM

    _main->_date_time
    _runtime->_time_difference
    _init_operation->_time_difference
    _update_time->_I2C_Master_Read
    _update_time->_I2C_Master_Write
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___ftge->___ftdiv
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _stepper_state->_stepper
    _stepper_state->_stepper_rev
    _read_colorsensor2->_I2C_Master_Read
    _read_colorsensor2->_I2C_Master_Write
    _read_colorsensor1->_I2C_Master_Read
    _read_colorsensor1->_I2C_Master_Write
    _initLCD->_lcdInst
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _printf->_time_difference
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_init_operation
    _runtime->_printf
    _operation_end->_printf
    _init_operation->_printf
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _date_time->_printf
    _bottle_count->_printf
    _printf->_time_difference

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_init_operation

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0  228353
                                             79 BANK0     29    29      0
                    _I2C_Master_Init
                       _bottle_count
                          _date_time
                            _initLCD
                     _init_operation
                            _lcdInst
                      _operation_end
                             _printf
                            _runtime
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _runtime                                              4     0      4   87170
                                             69 BANK0      4     0      4
                            _lcdInst
                             _printf
                    _time_difference
 ---------------------------------------------------------------------------------
 (1) _operation_end                                        4     2      2    5869
                                             69 BANK0      4     2      2
                            _lcdInst
                             _printf
                      _stepper_state
 ---------------------------------------------------------------------------------
 (1) _init_operation                                      64    56      8  116863
                                             69 BANK0     10     2      8
                                              0 BANK1     54    54      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                            _initLCD
                            _lcdInst
                             _printf
                  _read_colorsensor1
                  _read_colorsensor2
                      _stepper_state
                    _time_difference
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _update_time                                          3     1      2    2483
                                             19 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _time_difference                                     24    20      4   82770
                                            105 COMRAM     2     2      0
                                             25 BANK0     22    18      4
                             ___wmul
                         _dec_to_hex
 ---------------------------------------------------------------------------------
 (3) _dec_to_hex                                          16    14      2   81043
                                            103 COMRAM     2     0      2
                                             11 BANK0     14    14      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   67775
                                             97 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   22040
                                             67 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   36848
                                             88 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     376
                                             67 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3    9247
                                             80 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     480
                                             16 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     636
                                             55 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6    1160
                                             43 COMRAM     9     3      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    2414
                                             70 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7    9689
                                             55 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3958
                                             28 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4539
                                             55 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    4242
                                             43 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     237
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    3170
                                             28 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    3391
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2281
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2148
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _stepper_state                                        6     4      2    1577
                                             21 COMRAM     6     4      2
                            _stepper
                        _stepper_rev
 ---------------------------------------------------------------------------------
 (3) _stepper_rev                                          5     3      2     430
                                             16 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _stepper                                              5     3      2     430
                                             16 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor2                                    8     0      8    2483
                                             19 COMRAM     8     0      8
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor1                                    8     0      8    2483
                                             19 COMRAM     8     0      8
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                             19 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _date_time                                            6     4      2    6287
                                            107 COMRAM     1     1      0
                                             69 BANK0      5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1750
                                             17 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             17 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         7     5      2    4424
                                             69 BANK0      7     5      2
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4049
                                             47 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                    _time_difference (ARG)
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     927
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _keypressed                                          16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _initLCD
     _lcdInst
       _lcdNibble
   _init_operation
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _read_colorsensor1
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _read_colorsensor2
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _stepper_state
       _stepper
       _stepper_rev
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
     _update_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _lcdInst
     _lcdNibble
   _operation_end
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _stepper_state
       _stepper
       _stepper_rev
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
     _time_difference (ARG)
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _runtime
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _update_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     36      36       7       21.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6C      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6C      6E       1       87.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     122      34        0.0%
DATA                 0      0     122       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 28 17:43:31 2017

                 _update_time 2A04                  ___altoft@exp 004F                 ___altoft@sign 0050  
                ___awdiv@sign 0016           ___wmul@multiplicand 0013                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000                  ___ftadd@exp1 0037  
                ___ftadd@exp2 0036                  ___ftadd@sign 0035                           l230 2882  
                         l231 281E                           l236 27FE                           l237 279A  
                         l166 00AA                           l357 2DDC                           l701 139A  
                         l705 13C4                           l716 1474                           l725 1490  
                         l808 2908                           l736 229A                           l861 2B74  
                         l678 25CC                           l758 2DB0                           l871 2C94  
                         l893 16C0                           l898 17F6                  __CFG_CPB$OFF 000000  
                         _PEN 007E2A                  __CFG_CPD$OFF 000000                           _SEN 007E28  
            ??_init_operation 00CD                           _exp 0FA0                           _log 1AA8  
                         _pow 1688                           wreg 000FE8                   _stepper_rev 2790  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0026                  ___ftdiv@sign 002B  
                __CFG_WDT$OFF 000000                          l1056 1052                          l3001 20C4  
                        l1057 1176                          l3003 20CA                          l1067 239C  
                        l3007 20E0                          l3111 22FA                          l3043 2236  
                        l3019 2614                          l3115 2308                          l3211 0FEE  
                        l3037 220E                          l3205 0FB8                          l4023 1992  
                        l3063 2274                          l3127 23EA                          l3119 2322  
                        l3313 2720                          l3081 2CB4                          l3129 2466  
                        l3161 2506                          l3145 24D8                          l3137 2494  
                        l3217 1024                          l4051 0E2C                          l4019 198A  
                        l3171 2A88                          l3501 2C72                          l4045 0D82  
                        l4029 19B2                          l3325 2746                          l3341 2778  
                        l3093 2D2A                          l3157 24FA                          l3253 16CE  
                        l3503 2C76                          l4063 0EBE                          l3327 274E  
                        l3319 2730                          l3239 114C                          l3183 1AC2  
                        l3271 176E                          l4057 0E72                          l4081 0F94  
                        l3345 2786                          l3337 276E                          l3329 2752  
                        l3169 2A7C                          l4321 00B2                          l3507 2C8A  
                        l3531 09D4                          l3267 1748                          l3259 16E6  
                        l4315 007E                          l3613 0BEA                          l3605 0BB0  
                        l3533 09E6                          l4069 0F0A                          l4077 0F56  
                        l3373 2D6E                          l2821 293C                          l3189 1AE2  
                        l4413 07A2                          l3631 0C62                          l3607 0BC8  
                        l3551 0A96                          l3543 0A20                          l3527 09C0  
                        l4079 0F78                          l2911 2142                          l2823 2948  
                        l3383 1E14                          l4431 086E                          l4511 1892  
                        l3801 28CA                          l3481 2B4A                          l3633 0C6E  
                        l3641 0C9C                          l3625 0C46                          l3617 0C22  
                        l3553 0A9C                          l3537 09F0                          l2905 211A  
                        l4409 06FA                          l3491 2B6A                          l3483 2B4E  
                        l3643 0CA2                          l3651 0D36                          l3619 0C2C  
                        l3571 0B1C                          l3731 11BA                          l2843 13D2  
                        l3395 1EEC                          l4427 07FE                          l4363 0406  
                        l4515 18D4                          l4523 1916                          l3469 2DD4  
                        l3645 0CEA                          l3653 0D4E                          l3637 0C88  
                        l3557 0AA4                          l3741 1200                          l2781 2566  
                        l2837 13A8                          l2925 2174                          l4445 08CA  
                        l4517 18E6                          l4525 1938                          l4509 1880  
                        l3479 2B42                          l3655 0D56                          l3591 0B7A  
                        l3575 0B38                          l3559 0ADC                          l3735 11D8  
                        l3727 119C                          l2791 25C2                          l2783 2584  
                        l2775 254E                          l2871 1440                          l2935 219C  
                        l2951 26AC                          l3663 2A38                          l4471 09AA  
                        l4447 08E0                          l4463 0950                          l4391 0618  
                        l4519 18F8                          l3809 28FA                          l3577 0B3E  
                        l3657 0D62                          l3753 1256                          l3745 121E  
                        l2865 1424                          l2929 2184                          l2961 2708  
                        l3673 2A5C                          l4449 08F6                          l4465 0952  
                        l3499 2C6A                          l3763 129E                          l3755 1264  
                        l3739 11F2                          l2787 259A                          l2779 255C  
                        l2867 142E                          l2859 1402                          l2939 21AC  
                        l2955 26DC                          l2971 202A                          l3667 2A40  
                        l4395 06A4                          l4467 096E                          l3589 0B74  
                        l3781 131C                          l3773 12E2                          l3749 123C  
                        l2789 25B8                          l2885 14AC                          l2877 1462  
                        l2869 1438                          l3767 12BA                          l3759 1282  
                        l2895 14DC                          l2879 146C                          l3777 1300  
                        l3769 12C8                          l3785 132A                          l2993 20A0  
                        ?_exp 0059                          l3797 28BA                          l2989 2090  
                        ?_log 0044                          l3799 28C6                          l2999 20B8  
                        ?_pow 0062                          STR_1 FEE4                          STR_2 FF2D  
                        STR_3 FF2D                          STR_4 FFCB                          STR_5 FF41  
                        STR_6 FF87                          STR_7 FF76                          STR_8 FF98  
                        STR_9 FF76                          u2051 1366                          u2061 137A  
                        _LATA 000F89                          _LATB 000F8A                          _LATC 000F8B  
                        _LATD 000F8C                          _LATE 000F8D                          u2261 2102  
                        u2351 200E                          u4007 08AC                          u2440 263C  
                        u2281 212A                          u4017 0934                          u2370 2048  
                        u4107 2874                          u2451 21F6                          u4027 0960  
                        u2700 102E                          u4117 2C1C                          u4037 27A8  
                        u2550 2314                          u3415 2B00                          u4127 2C50  
                        u4047 27C0                          u2471 221E                          u2375 2040  
                        u2448 263E                          u4137 0F86                          u4057 27D8  
                        u4147 2B96                          u4067 27F0                          u4157 2B9E  
                        u4077 282C                          u2590 24B4                          u4167 2BBE  
                        u4087 2844                          u4177 2BC6                          u4097 285C  
                        u2690 102C                          u2780 1732                          u2598 24B6  
                        u2880 2D6C                          u3780 00AA                          _RCEN 007E2B  
                        u3957 1946                          u3967 29F4                          u3977 0414  
                        u3987 06DC                          u3997 07E0                          _RSEN 007E29  
                        _main 1804                  ___ftpack@arg 0011                          _keys FE81  
                ___ftpack@exp 0014                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 006F  
      __size_of_stepper_state 01D2                          exp@x 0059                          log@x 0044  
                        pow@x 0062                          pow@y 0065                          prodh 000FF4  
                        prodl 000FF3                          start 000E                 __CFG_IESO$OFF 000000  
               __CFG_MCLRE$ON 000000                  ___ftmul@cntr 002A                  ___param_bank 000000  
                ___ftmul@sign 002B                 ?_bottle_count 00C5        read_colorsensor1@clear 001A  
                ___fttol@exp1 0046        read_colorsensor2@clear 001A                         ??_exp 005C  
                       ??_log 0047                  ___fttol@lval 0042        read_colorsensor1@green 0016  
                       ??_pow 0068        read_colorsensor2@green 0016              ?_I2C_Master_Init 001E  
            ?_I2C_Master_Read 0001              ?_I2C_Master_Wait 0001                  main@end_time 00D8  
            ?_I2C_Master_Stop 0001                         ?_main 0001                         _ACKEN 007E2C  
                       _ACKDT 007E2D               __end_of___awdiv 2790                         _EEADR 000FA9  
             __end_of___ftadd 1502                         STR_10 FFDC                         STR_11 FF76  
                       STR_12 FFA9                         STR_20 FF54                         STR_13 FF76  
                       STR_14 FFED                         STR_15 FF76                         STR_16 FFBA  
                       STR_17 FF65                         STR_18 FEFF                         STR_19 FF16  
             __end_of___ftdiv 22CC               __end_of___ftneg 2DBE               __end_of___lldiv 291A  
             __end_of___ftmul 21E6               ___awdiv@divisor 0013               __end_of___ftsub 2CDE  
             __end_of___fttol 20F2               __end_of___lwdiv 2B7E                         i2l112 1FC0  
             __end_of___lwmod 2C9E               ___awdiv@counter 0015                         _PORTB 000F81  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TRISE 000F96                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                  ___lltoft@exp 0021               __end_of_lcdInst 2E16  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                         _nRBPU 007F8F  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_initLCD 2C5C                __CFG_EBTRB$OFF 000000                 ___awtoft@sign 001C  
             __end_of_dpowers FE9C                         _floor 22CC                         _ldexp 247C  
                       _frexp 25EC                         _errno 006D               __end_of_isdigit 2DDC  
               ___ftpack@sign 0015                         _putch 2DFE                         pclath 000FFA  
                       tablat 000FF5                         pow@yi 0087                         status 000FD8  
             __end_of_stepper 2898               __end_of_runtime 2C16                __CFG_PBADEN$ON 000000  
                 exp@exponent 005F                   ldexp@newexp 0047               __initialization 2CDE  
                 log@exponent 0047      init_operation@start_time 00C5                ??_bottle_count 00C7  
                __end_of_main 1956      init_operation@step_state 00CB                  __end_of_keys FE92  
                update_time@i 0016                        ??_main 00CF                 ___fttol@sign1 0041  
             runtime@end_time 00C7                 _stepper_state 1184                 __activetblptr 000002  
           time_difference@d1 00A9             time_difference@d2 00AB             time_difference@d3 00AD  
           time_difference@s1 00A5             time_difference@s2 00A7             ?_I2C_Master_Start 0001  
           ?_I2C_Master_Write 0012                 main@bot_count 00E6            ??_I2C_Master_Start 0012  
                      _ADCON0 000FC2                        _ADCON1 000FC1            ??_I2C_Master_Write 0014  
                      ?_floor 0051                        ?_ldexp 0044                        ?_frexp 0011  
            __end_of___altoft 2992                        _EEADRH 000FAA                        _EEDATA 000FA8  
                      _EECON2 000FA7              ___awdiv@dividend 0011              __end_of___awtoft 2D4E  
                      ?_putch 0001              __end_of___ftpack 25EC              __end_of___lltoft 2AD2  
                      _INT1IE 007F83                        _INT1IF 007F80                        i2l4141 1F42  
                      i2l4151 1F5C                        i2l4143 1F46                        i2l4153 1F60  
                      i2l4145 1F4A                        i2l4161 1F76                        i2l4155 1F64  
                      i2l4147 1F4E                        i2l4157 1F68                        i2l4149 1F58  
init_operation@detection_time 0102                        _SSPADD 000FC8                        _TRISC3 007CA3  
                      _TRISC4 007CA4                        _SSPBUF 000FC9               update_time@time 0014  
              __CFG_XINST$OFF 000000                        ___ftge 267C                        ___wmul 2D74  
                   ??___awdiv 0015                     ??___ftadd 0032                __CFG_STVREN$ON 000000  
                   ??___ftdiv 0023                     ??___ftneg 0014                     ??___lldiv 0019  
                   ??___ftmul 0023                     ??___ftsub 003E                     ??___fttol 003C  
                   ??___lwdiv 0015                     ??___lwmod 001C       stepper_state@next_state 001A  
               dec_to_hex@num 0068              ___awdiv@quotient 0017                ?_stepper_state 0016  
                   ??_lcdInst 0013                        _printf 09B2                        floor@i 0054  
                      floor@x 0051         ___ftmul@f3_as_product 0027                     ??_initLCD 0014  
                   ??_isdigit 0011               _time_difference 1502                  __mediumconst FE80  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_stepper 0013                     ??_runtime 006C              __end_ofexp@coeff FEC9  
            __end_oflog@coeff FEE4                    __accesstop 0080       __end_of__initialization 2D08  
                  ___altoft@c 0047                    ___ftadd@f1 002C                    ___ftadd@f2 002F  
                  ___ftge@ff1 002C                    ___ftge@ff2 002F         __end_of_operation_end 2A04  
                eval_poly@res 0041                 ___rparam_used 000001                    ___ftdiv@f1 001D  
                  ___ftdiv@f2 0020                    ___ftdiv@f3 0027                    ___ftneg@f1 0011  
        time_difference@time1 0099          time_difference@time2 009B                    ___awtoft@c 0019  
                  ___ftmul@f1 001D                    ___ftmul@f2 0020                    ___ftsub@f1 0038  
                  ___ftsub@f2 003B                    ___fttol@f1 0038          __end_of_happynewyear FEAB  
              __pcstackCOMRAM 0001                  ?_update_time 0014                  __pidataBANK0 2DEE  
     stepper_state@step_state 0016                    ___lltoft@c 0019                 __end_of_floor 23AA  
               __end_of_ldexp 253E                 __end_of_frexp 267C                 __end_of_putch 2E0A  
          __size_of_date_time 0152                  stepper_rev@i 0014                  stepper_rev@r 0011  
          __size_of_lcdNibble 004E         bottle_count@bot_count 00C5                  ?_stepper_rev 0011  
                     ??_floor 0054                       ??_ldexp 0049                       ??_frexp 0016  
        __end_of_bottle_count 0FA0                    _dec_to_hex 1DF6                       ??_putch 0013  
                  __pbssBANK0 00FC            time_difference@hr1 009D            time_difference@hr2 009F  
          __size_of_eval_poly 00D2                       ?___ftge 002C                       ?___wmul 0011  
             ??_stepper_state 0018                     ?___altoft 0047              init_operation@b1 011E  
            init_operation@b2 0124              init_operation@c1 010E              init_operation@c2 0110  
            init_operation@g1 010C              init_operation@g2 0116       __end_of_time_difference 1688  
            init_operation@r1 011C              init_operation@r2 0122                     ?___awtoft 0019  
                   ?___ftpack 0011                       ?_printf 00AF                     ?___lltoft 0019  
                     _SSPCON1 000FC6                       _SSPCON2 000FC5                       _SSPSTAT 000FC7  
           __end_of_date_time 1AA8             _read_colorsensor1 1CDC             _read_colorsensor2 1BC2  
          init_operation@blue 0132            init_operation@time 00C7             __end_of_lcdNibble 2BCC  
          ?_read_colorsensor1 0014            ?_read_colorsensor2 0014                       __Hparam 0000  
                     __Lparam 0000               __size_of___ftge 0090                       ___awdiv 270C  
                     ___ftadd 1356                       ___ftdiv 21E6                       ___ftneg 2D9A  
                     ___lldiv 2898               __size_of___wmul 0026                       ___ftmul 20F2  
                     ___ftsub 2C9E                       ___fttol 1FFE                       ___lwdiv 2B2C  
                     ___lwmod 2C5C           ??_read_colorsensor1 001C           ??_read_colorsensor2 001C  
                  _curr_state 00FD                    ??___altoft 004B                       __pcinit 2CDE  
                  ??___awtoft 001C                    ??___ftpack 0016             __end_of_eval_poly 247C  
                     __ramtop 1000                       _lcdInst 2E0A                    ??___lltoft 001D  
                     __ptext0 1804                       __ptext1 2BCC                       __ptext2 2992  
                     __ptext3 0012                       __ptext4 2A04                       __ptext5 1502  
                     __ptext6 1DF6                       __ptext7 1688                       __ptext8 1AA8  
                     __ptext9 0FA0               __size_of_printf 03CE                dec_to_hex@temp 0091  
                     _initLCD 2C16             __end_of_hexpowers FEA4                       _dpowers FE92  
                __size_of_exp 01E4                  __size_of_log 011A                       _isdigit 2DBE  
                __size_of_pow 017C                    _keypressed 0008      __size_of_I2C_Master_Init 005A  
    __size_of_I2C_Master_Read 0026      __size_of_I2C_Master_Wait 0012                    date_time@i 006C  
    __size_of_I2C_Master_Stop 0008                       _stepper 2814                       _runtime 2BCC  
                 ?_dec_to_hex 0068                __pintcode_body 1F02          end_of_initialization 2D08  
                     exp@sign 0061     __end_of_read_colorsensor1 1DF6     __end_of_read_colorsensor2 1CDC  
     __size_of_init_operation 09A0       operation_end@step_state 00C5                 __Lmediumconst FE80  
                     int_func 1F02     __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A  
             ___lldiv@divisor 0015                       pow@sign 0086               ___lldiv@counter 001D  
                     printf@c 00C4                       printf@f 00AF              I2C_Master_Init@c 001E  
            I2C_Master_Read@a 0012                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE                 date_time@time 00C5  
        __size_of_update_time 0072                main@start_time 00D1                main@step_state 00EA  
            ?_time_difference 0099                     _PORTCbits 000F82                     _PORTEbits 000F84  
       __size_of_bottle_count 0220       init_operation@bot_count 00C9                  _happynewyear FEA4  
        __size_of_stepper_rev 0084                   ___ftdiv@exp 002A                   printf@width 00C2  
                 ___ftmul@exp 0026          init_operation@b1_517 0128          init_operation@b2_521 012C  
        init_operation@c1_518 0112          init_operation@c2_522 0114         read_colorsensor1@blue 0018  
       read_colorsensor2@blue 0018          init_operation@g1_516 0118          init_operation@g2_520 011A  
                _bottle_count 0D80                __end_of___ftge 270C          init_operation@r1_515 0126  
        init_operation@r2_519 012A                __end_of___wmul 2D9A           __size_of_dec_to_hex 010C  
                  floor@expon 0057                __end_of_printf 0D80           start_initialization 2CDE  
                  eval_poly@d 003B                    eval_poly@n 003D                    eval_poly@x 0038  
                 ?_keypressed 0001                    ldexp@value 0044                   __end_of_exp 1184  
                 __end_of_log 1BC2                   __end_of_pow 1804    __size_of_read_colorsensor1 011A  
  __size_of_read_colorsensor2 011A                    frexp@value 0011             ??_I2C_Master_Init 0022  
           ??_I2C_Master_Read 0012             ??_I2C_Master_Wait 0011             ??_I2C_Master_Stop 0012  
                    ??___ftge 0032                      ??___wmul 0015                   __pdataBANK0 00EC  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 00B7             __size_of___altoft 0078  
           __size_of___awtoft 0038             __size_of___ftpack 00AE             __size_of___lltoft 005C  
                 __pbssCOMRAM 006D        __size_of_operation_end 0072           time_difference@min1 00A1  
         time_difference@min2 00A3                 __pcstackBANK0 0080                 __pcstackBANK1 0100  
              _init_operation 0012              _I2C_Master_Start 2E28              _I2C_Master_Write 2E16  
                   _date_time 1956              ___lwdiv@dividend 0011             __CFG_CCP2MX$PORTC 000000  
         __size_of_keypressed 1FF6                     __pintcode 0008                 __pmediumconst FE80  
                   _lcdNibble 2B7E                      ?___awdiv 0011                      ?___ftadd 002C  
             init_operation@i 0120                      ?___ftdiv 001D                      ?___ftneg 0011  
                    ?___lldiv 0011                      ?___ftmul 001D                      ?___ftsub 0038  
                    ?___fttol 0038                      ?___lwdiv 0011                      ?___lwmod 0018  
       __end_of_stepper_state 1356                      ?_lcdInst 0001              dec_to_hex@hexnum 0095  
                    ?_initLCD 0001                      ?_isdigit 0001                     _eval_poly 23AA  
           init_operation@red 012E                     _hexpowers FE9C              ___lwdiv@quotient 0015  
                    ?_stepper 0011        __end_of_init_operation 09B2                __size_of_floor 00DE  
              __size_of_ldexp 00C2                __size_of_frexp 0090                  ??_dec_to_hex 006A  
                    ?_runtime 00C5                __size_of_putch 000C                ___wmul@product 0015  
                    _LATDbits 000F8C           _init_operation$1412 0109                 _operation_end 2992  
                  ?_date_time 00C5                      _PIR2bits 000FA1              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001            __end_of_dec_to_hex 1F02             ___wmul@multiplier 0011  
               lcdNibble@data 0012                    printf@flag 00C1                 lcdNibble@temp 0011  
                  printf@prec 00BE                    ?_eval_poly 0038          read_colorsensor1@red 0014  
        read_colorsensor2@red 0014             runtime@start_time 00C5           I2C_Master_Read@temp 0013  
             ?_init_operation 00C5                     copy_data0 2CF2            dec_to_hex@quotient 0097  
         init_operation@clear 0134           init_operation@green 0130     init_operation@luminosity1 0100  
                   frexp@eptr 0014                    _EECON1bits 000FA6                ?_operation_end 00C5  
             hex_to_dec@F3226 00EC                      __Hrparam 0000                      __Lrparam 0000  
               ??_update_time 0016            __CFG_BOREN$SBORDIS 000000                   dec_to_hex@i 0093  
            __size_of___awdiv 0084              __size_of___ftadd 01AC              __size_of___ftdiv 00E6  
            __size_of___ftneg 0024              __size_of___lldiv 0082                      ___altoft 291A  
            __size_of___ftmul 00F4              __size_of___ftsub 0040              __size_of___fttol 00F4  
            __size_of___lwdiv 0052              __size_of___lwmod 0042                      ___awtoft 2D16  
                    ___ftpack 253E                      ___lltoft 2A76                   _isdigit$955 0012  
            __size_of_lcdInst 000C                      _exp$1415 005C               _I2C_Master_Init 2AD2  
             _I2C_Master_Read 2D4E              __size_of_initLCD 0046               _I2C_Master_Wait 2DDC  
             _I2C_Master_Stop 2E20                  ??_keypressed 0001              __size_of_isdigit 001E  
             ___lwdiv@divisor 0013      __size_of_time_difference 0186                 ??_stepper_rev 0013  
             ___lwdiv@counter 0017                      __ptext10 247C                      __ptext11 22CC  
                    __ptext20 2D9A                      __ptext12 25EC                      __ptext21 21E6  
                    __ptext13 1FFE                      __ptext30 1CDC                      __ptext22 2D16  
                    __ptext14 267C                      __ptext31 2C16                      __ptext23 2A76  
                    __ptext15 291A                      __ptext40 2DFE                      __ptext32 1956  
                    __ptext24 253E                      __ptext16 23AA                      __ptext41 2DBE  
                    __ptext33 2E16                      __ptext25 270C                      __ptext17 20F2  
                    __ptext42 2D74                      __ptext34 2E20                      __ptext26 1184  
                    __ptext18 2C9E                      __ptext43 2C5C                      __ptext35 2E28  
                    __ptext27 2790                      __ptext19 1356                      __ptext44 2B2C  
                    __ptext36 2D4E                      __ptext28 2814                      __ptext45 2E0A  
                    __ptext37 2DDC                      __ptext29 1BC2                      __ptext46 2B7E  
                    __ptext38 0D80                      __ptext47 2AD2                      __ptext39 09B2  
                    __ptext48 2898                      _pow$1413 0080                      _pow$1414 0083  
                    _bot_type 00FC              __size_of_stepper 0084              __size_of_runtime 004A  
               __size_of_main 0152               _dec_to_hex$1408 008B               _dec_to_hex$1409 008E  
                 ??_date_time 00C7                   ??_lcdNibble 0011            __end_of_keypressed 1FFE  
                    int$flags 006F                     printf@idx 00BB                     printf@val 00BF  
                    main@time 00DF           __end_of_update_time 2A76                      exp@coeff FEAB  
                    log@coeff FEC9                     putch@data 0013      __end_of_I2C_Master_Start 2E30  
    __end_of_I2C_Master_Write 2E20                    _INTCONbits 000FF2                   ??_eval_poly 003F  
                    isdigit@c 0013                      intlevel2 0000               ??_operation_end 00C7  
            ___lwmod@dividend 0018              ___lldiv@dividend 0011           __end_of_stepper_rev 2814  
                    printf@ap 00BC       __end_of_I2C_Master_Init 2B2C       __end_of_I2C_Master_Read 2D74  
     __end_of_I2C_Master_Wait 2DEE       __end_of_I2C_Master_Stop 2E28                   lcdInst@data 0013  
                    stepper@i 0014                      stepper@r 0011              ___lldiv@quotient 0019  
           I2C_Master_Write@d 0012               ___lwmod@divisor 001A               ___lwmod@counter 001C  
           ??_time_difference 006A  
