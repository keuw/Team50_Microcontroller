

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 07 05:14:50 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           ; Version 1.40
    59                           ; Generated 01/12/2016 GMT
    60                           ; 
    61                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F4620 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	mediumconst
    94  00FBFC                     __pmediumconst:
    95                           	opt stack 0
    96  00FBFC  00                 	db	0
    97  00FBFD                     _keys:
    98                           	opt stack 0
    99  00FBFD  31                 	db	49
   100  00FBFE  32                 	db	50
   101  00FBFF  33                 	db	51
   102  00FC00  41                 	db	65
   103  00FC01  34                 	db	52
   104  00FC02  35                 	db	53
   105  00FC03  36                 	db	54
   106  00FC04  42                 	db	66
   107  00FC05  37                 	db	55
   108  00FC06  38                 	db	56
   109  00FC07  39                 	db	57
   110  00FC08  43                 	db	67
   111  00FC09  2A                 	db	42
   112  00FC0A  30                 	db	48
   113  00FC0B  23                 	db	35
   114  00FC0C  44                 	db	68
   115  00FC0D  00                 	db	0
   116  00FC0E                     __end_of_keys:
   117                           	opt stack 0
   118  00FC0E                     _dpowers:
   119                           	opt stack 0
   120  00FC0E  0001               	dw	1
   121  00FC10  000A               	dw	10
   122  00FC12  0064               	dw	100
   123  00FC14  03E8               	dw	1000
   124  00FC16  2710               	dw	10000
   125  00FC18                     __end_of_dpowers:
   126                           	opt stack 0
   127  00FC18                     _happynewyear:
   128                           	opt stack 0
   129  00FC18  45                 	db	69
   130  00FC19  59                 	db	89
   131  00FC1A  23                 	db	35
   132  00FC1B  07                 	db	7
   133  00FC1C  31                 	db	49
   134  00FC1D  12                 	db	18
   135  00FC1E  16                 	db	22
   136  00FC1F                     __end_of_happynewyear:
   137                           	opt stack 0
   138  00FC1F                     exp@coeff:
   139                           	opt stack 0
   140  00FC1F  00                 	db	0
   141  00FC20  80                 	db	128
   142  00FC21  3F                 	db	63
   143  00FC22  72                 	db	114
   144  00FC23  31                 	db	49
   145  00FC24  3F                 	db	63
   146  00FC25  FE                 	db	254
   147  00FC26  75                 	db	117
   148  00FC27  3E                 	db	62
   149  00FC28  58                 	db	88
   150  00FC29  63                 	db	99
   151  00FC2A  3D                 	db	61
   152  00FC2B  95                 	db	149
   153  00FC2C  1D                 	db	29
   154  00FC2D  3C                 	db	60
   155  00FC2E  C5                 	db	197
   156  00FC2F  AE                 	db	174
   157  00FC30  3A                 	db	58
   158  00FC31  79                 	db	121
   159  00FC32  21                 	db	33
   160  00FC33  39                 	db	57
   161  00FC34  94                 	db	148
   162  00FC35  80                 	db	128
   163  00FC36  37                 	db	55
   164  00FC37  93                 	db	147
   165  00FC38  A7                 	db	167
   166  00FC39  35                 	db	53
   167  00FC3A  56                 	db	86
   168  00FC3B  15                 	db	21
   169  00FC3C  34                 	db	52
   170  00FC3D                     __end_ofexp@coeff:
   171                           	opt stack 0
   172  00FC3D                     log@coeff:
   173                           	opt stack 0
   174  00FC3D  00                 	db	0
   175  00FC3E  00                 	db	0
   176  00FC3F  00                 	db	0
   177  00FC40  00                 	db	0
   178  00FC41  80                 	db	128
   179  00FC42  3F                 	db	63
   180  00FC43  F0                 	db	240
   181  00FC44  FF                 	db	255
   182  00FC45  BE                 	db	190
   183  00FC46  E2                 	db	226
   184  00FC47  A9                 	db	169
   185  00FC48  3E                 	db	62
   186  00FC49  83                 	db	131
   187  00FC4A  76                 	db	118
   188  00FC4B  BE                 	db	190
   189  00FC4C  AE                 	db	174
   190  00FC4D  2B                 	db	43
   191  00FC4E  3E                 	db	62
   192  00FC4F  3C                 	db	60
   193  00FC50  C3                 	db	195
   194  00FC51  BD                 	db	189
   195  00FC52  D2                 	db	210
   196  00FC53  13                 	db	19
   197  00FC54  3D                 	db	61
   198  00FC55  78                 	db	120
   199  00FC56  D3                 	db	211
   200  00FC57  BB                 	db	187
   201  00FC58                     __end_oflog@coeff:
   202                           	opt stack 0
   203  0000                     _LATA	set	3977
   204  0000                     _LATB	set	3978
   205  0000                     _LATC	set	3979
   206  0000                     _LATD	set	3980
   207  0000                     _LATDbits	set	3980
   208  0000                     _LATE	set	3981
   209  0000                     _PORTB	set	3969
   210  0000                     _PORTBbits	set	3969
   211  0000                     _TRISA	set	3986
   212  0000                     _TRISB	set	3987
   213  0000                     _TRISC	set	3988
   214  0000                     _TRISD	set	3989
   215  0000                     _TRISE	set	3990
   216  0000                     _TRISC3	set	31907
   217  0000                     _TRISC4	set	31908
   218  0000                     _ADCON0	set	4034
   219  0000                     _ADCON1	set	4033
   220  0000                     _SSPADD	set	4040
   221  0000                     _SSPBUF	set	4041
   222  0000                     _SSPCON1	set	4038
   223  0000                     _SSPCON2	set	4037
   224  0000                     _SSPSTAT	set	4039
   225  0000                     _ACKDT	set	32301
   226  0000                     _ACKEN	set	32300
   227  0000                     _PEN	set	32298
   228  0000                     _RCEN	set	32299
   229  0000                     _RSEN	set	32297
   230  0000                     _SEN	set	32296
   231  0000                     _INTCONbits	set	4082
   232  0000                     _INT1IF	set	32640
   233  0000                     _nRBPU	set	32655
   234  00FC58                     STR_1:
   235  00FC58  50                 	db	80	;'P'
   236  00FC59  72                 	db	114	;'r'
   237  00FC5A  65                 	db	101	;'e'
   238  00FC5B  73                 	db	115	;'s'
   239  00FC5C  73                 	db	115	;'s'
   240  00FC5D  20                 	db	32
   241  00FC5E  31                 	db	49	;'1'
   242  00FC5F  20                 	db	32
   243  00FC60  74                 	db	116	;'t'
   244  00FC61  6F                 	db	111	;'o'
   245  00FC62  20                 	db	32
   246  00FC63  62                 	db	98	;'b'
   247  00FC64  65                 	db	101	;'e'
   248  00FC65  67                 	db	103	;'g'
   249  00FC66  69                 	db	105	;'i'
   250  00FC67  6E                 	db	110	;'n'
   251  00FC68  20                 	db	32
   252  00FC69  6F                 	db	111	;'o'
   253  00FC6A  70                 	db	112	;'p'
   254  00FC6B  65                 	db	101	;'e'
   255  00FC6C  72                 	db	114	;'r'
   256  00FC6D  61                 	db	97	;'a'
   257  00FC6E  74                 	db	116	;'t'
   258  00FC6F  69                 	db	105	;'i'
   259  00FC70  6F                 	db	111	;'o'
   260  00FC71  6E                 	db	110	;'n'
   261  00FC72  00                 	db	0
   262  00FC73                     STR_2:
   263  00FC73  50                 	db	80	;'P'
   264  00FC74  72                 	db	114	;'r'
   265  00FC75  65                 	db	101	;'e'
   266  00FC76  73                 	db	115	;'s'
   267  00FC77  73                 	db	115	;'s'
   268  00FC78  20                 	db	32
   269  00FC79  2A                 	db	42
   270  00FC7A  20                 	db	32
   271  00FC7B  54                 	db	84	;'T'
   272  00FC7C  6F                 	db	111	;'o'
   273  00FC7D  20                 	db	32
   274  00FC7E  53                 	db	83	;'S'
   275  00FC7F  74                 	db	116	;'t'
   276  00FC80  6F                 	db	111	;'o'
   277  00FC81  70                 	db	112	;'p'
   278  00FC82  20                 	db	32
   279  00FC83  00                 	db	0
   280  00FC84                     STR_14:
   281  00FC84  45                 	db	69	;'E'
   282  00FC85  53                 	db	83	;'S'
   283  00FC86  4B                 	db	75	;'K'
   284  00FC87  41                 	db	65	;'A'
   285  00FC88  20                 	db	32
   286  00FC89  57                 	db	87	;'W'
   287  00FC8A  69                 	db	105	;'i'
   288  00FC8B  74                 	db	116	;'t'
   289  00FC8C  68                 	db	104	;'h'
   290  00FC8D  20                 	db	32
   291  00FC8E  4E                 	db	78	;'N'
   292  00FC8F  6F                 	db	111	;'o'
   293  00FC90  20                 	db	32
   294  00FC91  43                 	db	67	;'C'
   295  00FC92  61                 	db	97	;'a'
   296  00FC93  70                 	db	112	;'p'
   297  00FC94  00                 	db	0
   298  00FC95                     STR_4:
   299  00FC95  54                 	db	84	;'T'
   300  00FC96  6F                 	db	111	;'o'
   301  00FC97  74                 	db	116	;'t'
   302  00FC98  61                 	db	97	;'a'
   303  00FC99  6C                 	db	108	;'l'
   304  00FC9A  20                 	db	32
   305  00FC9B  4F                 	db	79	;'O'
   306  00FC9C  70                 	db	112	;'p'
   307  00FC9D  65                 	db	101	;'e'
   308  00FC9E  72                 	db	114	;'r'
   309  00FC9F  61                 	db	97	;'a'
   310  00FCA0  74                 	db	116	;'t'
   311  00FCA1  69                 	db	105	;'i'
   312  00FCA2  6F                 	db	111	;'o'
   313  00FCA3  6E                 	db	110	;'n'
   314  00FCA4  00                 	db	0
   315  00FCA5                     STR_10:
   316  00FCA5  59                 	db	89	;'Y'
   317  00FCA6  4F                 	db	79	;'O'
   318  00FCA7  50                 	db	80	;'P'
   319  00FCA8  20                 	db	32
   320  00FCA9  57                 	db	87	;'W'
   321  00FCAA  69                 	db	105	;'i'
   322  00FCAB  74                 	db	116	;'t'
   323  00FCAC  68                 	db	104	;'h'
   324  00FCAD  20                 	db	32
   325  00FCAE  4E                 	db	78	;'N'
   326  00FCAF  6F                 	db	111	;'o'
   327  00FCB0  20                 	db	32
   328  00FCB1  43                 	db	67	;'C'
   329  00FCB2  61                 	db	97	;'a'
   330  00FCB3  70                 	db	112	;'p'
   331  00FCB4  00                 	db	0
   332  00FCB5                     STR_12:
   333  00FCB5  45                 	db	69	;'E'
   334  00FCB6  53                 	db	83	;'S'
   335  00FCB7  4B                 	db	75	;'K'
   336  00FCB8  41                 	db	65	;'A'
   337  00FCB9  20                 	db	32
   338  00FCBA  57                 	db	87	;'W'
   339  00FCBB  69                 	db	105	;'i'
   340  00FCBC  74                 	db	116	;'t'
   341  00FCBD  68                 	db	104	;'h'
   342  00FCBE  20                 	db	32
   343  00FCBF  43                 	db	67	;'C'
   344  00FCC0  61                 	db	97	;'a'
   345  00FCC1  70                 	db	112	;'p'
   346  00FCC2  00                 	db	0
   347  00FCC3                     STR_6:
   348  00FCC3  54                 	db	84	;'T'
   349  00FCC4  6F                 	db	111	;'o'
   350  00FCC5  74                 	db	116	;'t'
   351  00FCC6  61                 	db	97	;'a'
   352  00FCC7  6C                 	db	108	;'l'
   353  00FCC8  20                 	db	32
   354  00FCC9  42                 	db	66	;'B'
   355  00FCCA  6F                 	db	111	;'o'
   356  00FCCB  74                 	db	116	;'t'
   357  00FCCC  74                 	db	116	;'t'
   358  00FCCD  6C                 	db	108	;'l'
   359  00FCCE  65                 	db	101	;'e'
   360  00FCCF  00                 	db	0
   361  00FCD0                     STR_8:
   362  00FCD0  59                 	db	89	;'Y'
   363  00FCD1  4F                 	db	79	;'O'
   364  00FCD2  50                 	db	80	;'P'
   365  00FCD3  20                 	db	32
   366  00FCD4  57                 	db	87	;'W'
   367  00FCD5  69                 	db	105	;'i'
   368  00FCD6  74                 	db	116	;'t'
   369  00FCD7  68                 	db	104	;'h'
   370  00FCD8  20                 	db	32
   371  00FCD9  43                 	db	67	;'C'
   372  00FCDA  61                 	db	97	;'a'
   373  00FCDB  70                 	db	112	;'p'
   374  00FCDC  00                 	db	0
   375  00FCDD                     STR_3:
   376  00FCDD  45                 	db	69	;'E'
   377  00FCDE  6C                 	db	108	;'l'
   378  00FCDF  61                 	db	97	;'a'
   379  00FCE0  70                 	db	112	;'p'
   380  00FCE1  73                 	db	115	;'s'
   381  00FCE2  65                 	db	101	;'e'
   382  00FCE3  64                 	db	100	;'d'
   383  00FCE4  3A                 	db	58	;':'
   384  00FCE5  20                 	db	32
   385  00FCE6  25                 	db	37
   386  00FCE7  69                 	db	105	;'i'
   387  00FCE8  73                 	db	115	;'s'
   388  00FCE9  00                 	db	0
   389  00FCEA                     STR_7:
   390  00FCEA  43                 	db	67	;'C'
   391  00FCEB  6F                 	db	111	;'o'
   392  00FCEC  75                 	db	117	;'u'
   393  00FCED  6E                 	db	110	;'n'
   394  00FCEE  74                 	db	116	;'t'
   395  00FCEF  3A                 	db	58	;':'
   396  00FCF0  20                 	db	32
   397  00FCF1  5F                 	db	95	;'_'
   398  00FCF2  5F                 	db	95	;'_'
   399  00FCF3  20                 	db	32
   400  00FCF4  00                 	db	0
   401  00FCF5                     STR_5:
   402  00FCF5  54                 	db	84	;'T'
   403  00FCF6  69                 	db	105	;'i'
   404  00FCF7  6D                 	db	109	;'m'
   405  00FCF8  65                 	db	101	;'e'
   406  00FCF9  3A                 	db	58	;':'
   407  00FCFA  20                 	db	32
   408  00FCFB  25                 	db	37
   409  00FCFC  69                 	db	105	;'i'
   410  00FCFD  73                 	db	115	;'s'
   411  00FCFE  00                 	db	0
   412  0000                     
   413                           ; #config settings
   414  00FCFF  00                 	db	0	; dummy byte at the end
   415  0000                     
   416                           	psect	cinit
   417  001970                     __pcinit:
   418                           	opt stack 0
   419  001970                     start_initialization:
   420                           	opt stack 0
   421  001970                     __initialization:
   422                           	opt stack 0
   423                           
   424                           ; Clear objects allocated to BANK0 (1 bytes)
   425  001970  0100               	movlb	0
   426  001972  6BD4               	clrf	__pbssBANK0& (0+255),b
   427                           
   428                           ; Clear objects allocated to COMRAM (2 bytes)
   429  001974  6A6D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   430  001976  6A6C               	clrf	__pbssCOMRAM& (0+255),c
   431  001978                     end_of_initialization:
   432                           	opt stack 0
   433  001978                     __end_of__initialization:
   434                           	opt stack 0
   435  001978  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   436  00197A  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   437  00197C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   438  00197E  6EF8               	movwf	tblptru,c
   439  001980  0100               	movlb	0
   440  001982  EF76  F005         	goto	_main	;jump to C main() function
   441                           tblptru	equ	0xFF8
   442                           
   443                           	psect	bssCOMRAM
   444  00006C                     __pbssCOMRAM:
   445                           	opt stack 0
   446  00006C                     _errno:
   447                           	opt stack 0
   448  00006C                     	ds	2
   449                           tblptru	equ	0xFF8
   450                           
   451                           	psect	bssBANK0
   452  0000D4                     __pbssBANK0:
   453                           	opt stack 0
   454  0000D4                     _curr_state:
   455                           	opt stack 0
   456  0000D4                     	ds	1
   457                           tblptru	equ	0xFF8
   458                           
   459                           	psect	cstackBANK0
   460  000080                     __pcstackBANK0:
   461                           	opt stack 0
   462  000080                     _pow$1064:
   463                           	opt stack 0
   464                           
   465                           ; 3 bytes @ 0x0
   466  000080                     	ds	3
   467  000083                     _pow$1065:
   468                           	opt stack 0
   469                           
   470                           ; 3 bytes @ 0x3
   471  000083                     	ds	3
   472  000086                     pow@sign:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x6
   476  000086                     	ds	1
   477  000087                     pow@yi:
   478                           	opt stack 0
   479                           
   480                           ; 4 bytes @ 0x7
   481  000087                     	ds	4
   482  00008B                     _dec_to_hex$1062:
   483                           	opt stack 0
   484                           
   485                           ; 3 bytes @ 0xB
   486  00008B                     	ds	3
   487  00008E                     _dec_to_hex$1063:
   488                           	opt stack 0
   489                           
   490                           ; 3 bytes @ 0xE
   491  00008E                     	ds	3
   492  000091                     dec_to_hex@temp:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x11
   496  000091                     	ds	2
   497  000093                     dec_to_hex@i:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x13
   501  000093                     	ds	2
   502  000095                     dec_to_hex@hexnum:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x15
   506  000095                     	ds	2
   507  000097                     dec_to_hex@quotient:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x17
   511  000097                     	ds	2
   512  000099                     ?_time_difference:
   513                           	opt stack 0
   514  000099                     time_difference@time1:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x19
   518  000099                     	ds	2
   519  00009B                     time_difference@time2:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x1B
   523  00009B                     	ds	2
   524  00009D                     time_difference@hr1:
   525                           	opt stack 0
   526                           
   527                           ; 2 bytes @ 0x1D
   528  00009D                     	ds	2
   529  00009F                     time_difference@hr2:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x1F
   533  00009F                     	ds	2
   534  0000A1                     time_difference@min1:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x21
   538  0000A1                     	ds	2
   539  0000A3                     time_difference@min2:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x23
   543  0000A3                     	ds	2
   544  0000A5                     time_difference@s1:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x25
   548  0000A5                     	ds	2
   549  0000A7                     time_difference@s2:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x27
   553  0000A7                     	ds	2
   554  0000A9                     time_difference@d1:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x29
   558  0000A9                     	ds	1
   559  0000AA                     time_difference@d2:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x2A
   563  0000AA                     	ds	1
   564  0000AB                     time_difference@d3:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x2B
   568  0000AB                     	ds	1
   569  0000AC                     ?_printf:
   570                           	opt stack 0
   571  0000AC                     printf@f:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x2C
   575  0000AC                     	ds	4
   576  0000B0                     printf@ap:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x30
   580  0000B0                     	ds	2
   581  0000B2                     printf@flag:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x32
   585  0000B2                     	ds	1
   586  0000B3                     printf@prec:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x33
   590  0000B3                     	ds	1
   591  0000B4                     printf@val:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x34
   595  0000B4                     	ds	2
   596  0000B6                     printf@c:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x36
   600  0000B6                     	ds	1
   601  0000B7                     ??_bottle_count:
   602  0000B7                     init_operation@start_time:
   603                           	opt stack 0
   604  0000B7                     runtime@start_time:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x37
   608  0000B7                     	ds	2
   609  0000B9                     init_operation@time:
   610                           	opt stack 0
   611  0000B9                     runtime@end_time:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x39
   615  0000B9                     	ds	2
   616  0000BB                     ??_init_operation:
   617                           
   618                           ; 1 bytes @ 0x3B
   619  0000BB                     	ds	2
   620  0000BD                     ??_main:
   621                           
   622                           ; 1 bytes @ 0x3D
   623  0000BD                     	ds	2
   624  0000BF                     main@time:
   625                           	opt stack 0
   626                           
   627                           ; 7 bytes @ 0x3F
   628  0000BF                     	ds	7
   629  0000C6                     main@start_time:
   630                           	opt stack 0
   631                           
   632                           ; 7 bytes @ 0x46
   633  0000C6                     	ds	7
   634  0000CD                     main@end_time:
   635                           	opt stack 0
   636                           
   637                           ; 7 bytes @ 0x4D
   638  0000CD                     	ds	7
   639                           tblptru	equ	0xFF8
   640                           
   641                           	psect	cstackCOMRAM
   642  000001                     __pcstackCOMRAM:
   643                           	opt stack 0
   644  000001                     ??_keypressed:
   645  000001                     
   646                           ; 2 bytes @ 0x0
   647  000001                     	ds	16
   648  000011                     ??_I2C_Master_Wait:
   649  000011                     ?___wmul:
   650                           	opt stack 0
   651  000011                     ?___awdiv:
   652                           	opt stack 0
   653  000011                     ?___lwdiv:
   654                           	opt stack 0
   655  000011                     ?___ftpack:
   656                           	opt stack 0
   657  000011                     ?_frexp:
   658                           	opt stack 0
   659  000011                     ?___ftneg:
   660                           	opt stack 0
   661  000011                     ?___lldiv:
   662                           	opt stack 0
   663  000011                     lcdNibble@temp:
   664                           	opt stack 0
   665  000011                     ___wmul@multiplier:
   666                           	opt stack 0
   667  000011                     ___awdiv@dividend:
   668                           	opt stack 0
   669  000011                     ___lwdiv@dividend:
   670                           	opt stack 0
   671  000011                     ___ftpack@arg:
   672                           	opt stack 0
   673  000011                     ___ftge@ff1:
   674                           	opt stack 0
   675  000011                     ___ftneg@f1:
   676                           	opt stack 0
   677  000011                     frexp@value:
   678                           	opt stack 0
   679  000011                     ___lldiv@dividend:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x10
   683  000011                     	ds	1
   684  000012                     lcdNibble@data:
   685                           	opt stack 0
   686  000012                     I2C_Master_Read@a:
   687                           	opt stack 0
   688  000012                     I2C_Master_Write@d:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x11
   692  000012                     	ds	1
   693  000013                     lcdInst@data:
   694                           	opt stack 0
   695  000013                     putch@data:
   696                           	opt stack 0
   697  000013                     I2C_Master_Read@temp:
   698                           	opt stack 0
   699  000013                     ___wmul@multiplicand:
   700                           	opt stack 0
   701  000013                     ___awdiv@divisor:
   702                           	opt stack 0
   703  000013                     ___lwdiv@divisor:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x12
   707  000013                     	ds	1
   708  000014                     ??_initLCD:
   709  000014                     ___ftpack@exp:
   710                           	opt stack 0
   711  000014                     update_time@time:
   712                           	opt stack 0
   713  000014                     frexp@eptr:
   714                           	opt stack 0
   715  000014                     ___ftge@ff2:
   716                           	opt stack 0
   717                           
   718                           ; 3 bytes @ 0x13
   719  000014                     	ds	1
   720  000015                     ___awdiv@counter:
   721                           	opt stack 0
   722  000015                     ___ftpack@sign:
   723                           	opt stack 0
   724  000015                     ___wmul@product:
   725                           	opt stack 0
   726  000015                     ___lwdiv@quotient:
   727                           	opt stack 0
   728  000015                     ___lldiv@divisor:
   729                           	opt stack 0
   730                           
   731                           ; 4 bytes @ 0x14
   732  000015                     	ds	1
   733  000016                     ??___ftpack:
   734  000016                     ??_frexp:
   735  000016                     update_time@i:
   736                           	opt stack 0
   737  000016                     ___awdiv@sign:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x15
   741  000016                     	ds	1
   742  000017                     ??___ftge:
   743  000017                     ___lwdiv@counter:
   744                           	opt stack 0
   745  000017                     ___awdiv@quotient:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x16
   749  000017                     	ds	1
   750  000018                     ?___lwmod:
   751                           	opt stack 0
   752  000018                     ___lwmod@dividend:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x17
   756  000018                     	ds	1
   757  000019                     ?___ftdiv:
   758                           	opt stack 0
   759  000019                     ?___awtoft:
   760                           	opt stack 0
   761  000019                     ?___lltoft:
   762                           	opt stack 0
   763  000019                     ___awtoft@c:
   764                           	opt stack 0
   765  000019                     ___ftdiv@f1:
   766                           	opt stack 0
   767  000019                     ___lldiv@quotient:
   768                           	opt stack 0
   769  000019                     ___lltoft@c:
   770                           	opt stack 0
   771                           
   772                           ; 4 bytes @ 0x18
   773  000019                     	ds	1
   774  00001A                     ___lwmod@divisor:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x19
   778  00001A                     	ds	2
   779  00001C                     ___awtoft@sign:
   780                           	opt stack 0
   781  00001C                     ___lwmod@counter:
   782                           	opt stack 0
   783  00001C                     ___ftdiv@f2:
   784                           	opt stack 0
   785                           
   786                           ; 3 bytes @ 0x1B
   787  00001C                     	ds	1
   788  00001D                     ??___lltoft:
   789  00001D                     ?___ftmul:
   790                           	opt stack 0
   791  00001D                     ___lldiv@counter:
   792                           	opt stack 0
   793  00001D                     ___ftmul@f1:
   794                           	opt stack 0
   795                           
   796                           ; 3 bytes @ 0x1C
   797  00001D                     	ds	1
   798  00001E                     I2C_Master_Init@c:
   799                           	opt stack 0
   800                           
   801                           ; 4 bytes @ 0x1D
   802  00001E                     	ds	1
   803  00001F                     ??___ftdiv:
   804                           
   805                           ; 1 bytes @ 0x1E
   806  00001F                     	ds	1
   807  000020                     ___ftmul@f2:
   808                           	opt stack 0
   809                           
   810                           ; 3 bytes @ 0x1F
   811  000020                     	ds	1
   812  000021                     ___lltoft@exp:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0x20
   816  000021                     	ds	1
   817  000022                     ??_I2C_Master_Init:
   818  000022                     ___ftdiv@cntr:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x21
   822  000022                     	ds	1
   823  000023                     ??___ftmul:
   824  000023                     ___ftdiv@f3:
   825                           	opt stack 0
   826                           
   827                           ; 3 bytes @ 0x22
   828  000023                     	ds	3
   829  000026                     ___ftdiv@exp:
   830                           	opt stack 0
   831  000026                     ___ftmul@exp:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x25
   835  000026                     	ds	1
   836  000027                     ___ftdiv@sign:
   837                           	opt stack 0
   838  000027                     ___ftmul@f3_as_product:
   839                           	opt stack 0
   840                           
   841                           ; 3 bytes @ 0x26
   842  000027                     	ds	3
   843  00002A                     ___ftmul@cntr:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x29
   847  00002A                     	ds	1
   848  00002B                     ___ftmul@sign:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x2A
   852  00002B                     	ds	1
   853  00002C                     ?___ftadd:
   854                           	opt stack 0
   855  00002C                     ___ftadd@f1:
   856                           	opt stack 0
   857                           
   858                           ; 3 bytes @ 0x2B
   859  00002C                     	ds	3
   860  00002F                     ___ftadd@f2:
   861                           	opt stack 0
   862                           
   863                           ; 3 bytes @ 0x2E
   864  00002F                     	ds	3
   865  000032                     ??___ftadd:
   866                           
   867                           ; 1 bytes @ 0x31
   868  000032                     	ds	3
   869  000035                     ___ftadd@sign:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x34
   873  000035                     	ds	1
   874  000036                     ___ftadd@exp2:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x35
   878  000036                     	ds	1
   879  000037                     ___ftadd@exp1:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x36
   883  000037                     	ds	1
   884  000038                     ?___ftsub:
   885                           	opt stack 0
   886  000038                     ?_eval_poly:
   887                           	opt stack 0
   888  000038                     ?___fttol:
   889                           	opt stack 0
   890  000038                     ___ftsub@f1:
   891                           	opt stack 0
   892  000038                     ___fttol@f1:
   893                           	opt stack 0
   894  000038                     eval_poly@x:
   895                           	opt stack 0
   896                           
   897                           ; 3 bytes @ 0x37
   898  000038                     	ds	3
   899  00003B                     eval_poly@d:
   900                           	opt stack 0
   901  00003B                     ___ftsub@f2:
   902                           	opt stack 0
   903                           
   904                           ; 3 bytes @ 0x3A
   905  00003B                     	ds	1
   906  00003C                     ??___fttol:
   907                           
   908                           ; 1 bytes @ 0x3B
   909  00003C                     	ds	1
   910  00003D                     eval_poly@n:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x3C
   914  00003D                     	ds	1
   915  00003E                     
   916                           ; 1 bytes @ 0x3D
   917  00003E                     	ds	1
   918  00003F                     ??_eval_poly:
   919                           
   920                           ; 1 bytes @ 0x3E
   921  00003F                     	ds	2
   922  000041                     ___fttol@sign1:
   923                           	opt stack 0
   924  000041                     eval_poly@res:
   925                           	opt stack 0
   926                           
   927                           ; 3 bytes @ 0x40
   928  000041                     	ds	1
   929  000042                     ___fttol@lval:
   930                           	opt stack 0
   931                           
   932                           ; 4 bytes @ 0x41
   933  000042                     	ds	2
   934  000044                     ?_log:
   935                           	opt stack 0
   936  000044                     ?_ldexp:
   937                           	opt stack 0
   938  000044                     ldexp@value:
   939                           	opt stack 0
   940  000044                     log@x:
   941                           	opt stack 0
   942                           
   943                           ; 3 bytes @ 0x43
   944  000044                     	ds	2
   945  000046                     ___fttol@exp1:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x45
   949  000046                     	ds	1
   950  000047                     ?___altoft:
   951                           	opt stack 0
   952  000047                     ldexp@newexp:
   953                           	opt stack 0
   954  000047                     log@exponent:
   955                           	opt stack 0
   956  000047                     ___altoft@c:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x46
   960  000047                     	ds	2
   961  000049                     ??_ldexp:
   962                           
   963                           ; 1 bytes @ 0x48
   964  000049                     	ds	2
   965  00004B                     ??___altoft:
   966                           
   967                           ; 1 bytes @ 0x4A
   968  00004B                     	ds	4
   969  00004F                     ___altoft@exp:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x4E
   973  00004F                     	ds	1
   974  000050                     ___altoft@sign:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x4F
   978  000050                     	ds	1
   979  000051                     ?_floor:
   980                           	opt stack 0
   981  000051                     floor@x:
   982                           	opt stack 0
   983                           
   984                           ; 3 bytes @ 0x50
   985  000051                     	ds	3
   986  000054                     floor@i:
   987                           	opt stack 0
   988                           
   989                           ; 3 bytes @ 0x53
   990  000054                     	ds	3
   991  000057                     floor@expon:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x56
   995  000057                     	ds	2
   996  000059                     ?_exp:
   997                           	opt stack 0
   998  000059                     exp@x:
   999                           	opt stack 0
  1000                           
  1001                           ; 3 bytes @ 0x58
  1002  000059                     	ds	3
  1003  00005C                     _exp$1066:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x5B
  1007  00005C                     	ds	3
  1008  00005F                     exp@exponent:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x5E
  1012  00005F                     	ds	2
  1013  000061                     exp@sign:
  1014                           	opt stack 0
  1015                           
  1016                           ; 1 bytes @ 0x60
  1017  000061                     	ds	1
  1018  000062                     ?_pow:
  1019                           	opt stack 0
  1020  000062                     pow@x:
  1021                           	opt stack 0
  1022                           
  1023                           ; 3 bytes @ 0x61
  1024  000062                     	ds	3
  1025  000065                     pow@y:
  1026                           	opt stack 0
  1027                           
  1028                           ; 3 bytes @ 0x64
  1029  000065                     	ds	3
  1030  000068                     ?_dec_to_hex:
  1031                           	opt stack 0
  1032  000068                     dec_to_hex@num:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0x67
  1036  000068                     	ds	2
  1037  00006A                     ??_time_difference:
  1038                           
  1039                           ; 1 bytes @ 0x69
  1040  00006A                     	ds	1
  1041  00006B                     ??_printf:
  1042                           
  1043                           ; 1 bytes @ 0x6A
  1044  00006B                     	ds	1
  1045  00006C                     tblptru	equ	0xFF8
  1046                           
  1047                           ; 1 bytes @ 0x6B
  1048 ;;
  1049 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1050 ;;
  1051 ;; *************** function _main *****************
  1052 ;; Defined at:
  1053 ;;		line 43 in file "main.c"
  1054 ;; Parameters:    Size  Location     Type
  1055 ;;		None
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  end_time        7   77[BANK0 ] unsigned char [7]
  1058 ;;  start_time      7   70[BANK0 ] unsigned char [7]
  1059 ;;  time            7   63[BANK0 ] unsigned char [7]
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1071 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1072 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1073 ;;Total ram usage:       23 bytes
  1074 ;; Hardware stack levels required when called:    9
  1075 ;; This function calls:
  1076 ;;		_I2C_Master_Init
  1077 ;;		_bottle_count
  1078 ;;		_initLCD
  1079 ;;		_init_operation
  1080 ;;		_lcdInst
  1081 ;;		_printf
  1082 ;;		_runtime
  1083 ;;		_update_time
  1084 ;; This function is called by:
  1085 ;;		Startup code after reset
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089                           	psect	text0
  1090  000AEC                     __ptext0:
  1091                           	opt stack 0
  1092  000AEC                     _main:
  1093                           	opt stack 22
  1094                           
  1095                           ;main.c: 47: TRISA = 0xFF;
  1096                           
  1097                           ;incstack = 0
  1098  000AEC  6892               	setf	3986,c	;volatile
  1099                           
  1100                           ;main.c: 48: TRISB = 0xFF;
  1101  000AEE  6893               	setf	3987,c	;volatile
  1102                           
  1103                           ;main.c: 49: TRISC = 0x00;
  1104  000AF0  0E00               	movlw	0
  1105  000AF2  6E94               	movwf	3988,c	;volatile
  1106                           
  1107                           ;main.c: 50: TRISD = 0x00;
  1108  000AF4  0E00               	movlw	0
  1109  000AF6  6E95               	movwf	3989,c	;volatile
  1110                           
  1111                           ;main.c: 51: TRISE = 0x00;
  1112  000AF8  0E00               	movlw	0
  1113  000AFA  6E96               	movwf	3990,c	;volatile
  1114                           
  1115                           ;main.c: 53: LATA = 0x00;
  1116  000AFC  0E00               	movlw	0
  1117  000AFE  6E89               	movwf	3977,c	;volatile
  1118                           
  1119                           ;main.c: 54: LATB = 0x00;
  1120  000B00  0E00               	movlw	0
  1121  000B02  6E8A               	movwf	3978,c	;volatile
  1122                           
  1123                           ;main.c: 55: LATC = 0x00;
  1124  000B04  0E00               	movlw	0
  1125  000B06  6E8B               	movwf	3979,c	;volatile
  1126                           
  1127                           ;main.c: 56: LATD = 0x00;
  1128  000B08  0E00               	movlw	0
  1129  000B0A  6E8C               	movwf	3980,c	;volatile
  1130                           
  1131                           ;main.c: 57: LATE = 0x00;
  1132  000B0C  0E00               	movlw	0
  1133  000B0E  6E8D               	movwf	3981,c	;volatile
  1134                           
  1135                           ;main.c: 59: ADCON0 = 0x00;
  1136  000B10  0E00               	movlw	0
  1137  000B12  6EC2               	movwf	4034,c	;volatile
  1138                           
  1139                           ;main.c: 60: ADCON1 = 0xFF;
  1140  000B14  68C1               	setf	4033,c	;volatile
  1141                           
  1142                           ;main.c: 62: nRBPU = 0;
  1143  000B16  9EF1               	bcf	intcon2,7,c	;volatile
  1144                           
  1145                           ;main.c: 66: lcdInst(0b00000001);;
  1146  000B18  0E01               	movlw	1
  1147  000B1A  ECD2  F00C         	call	_lcdInst
  1148                           
  1149                           ;main.c: 67: initLCD();
  1150  000B1E  EC00  F00C         	call	_initLCD	;wreg free
  1151                           
  1152                           ;main.c: 68: unsigned char time[7];
  1153                           ;main.c: 69: unsigned char start_time[7];
  1154                           ;main.c: 70: unsigned char end_time[7];
  1155                           ;main.c: 74: I2C_Master_Init(10000);
  1156  000B22  0E10               	movlw	16
  1157  000B24  6E1E               	movwf	I2C_Master_Init@c,c
  1158  000B26  0E27               	movlw	39
  1159  000B28  6E1F               	movwf	I2C_Master_Init@c+1,c
  1160  000B2A  0E00               	movlw	0
  1161  000B2C  6E20               	movwf	I2C_Master_Init@c+2,c
  1162  000B2E  0E00               	movlw	0
  1163  000B30  6E21               	movwf	I2C_Master_Init@c+3,c
  1164  000B32  EC5E  F00B         	call	_I2C_Master_Init	;wreg free
  1165                           
  1166                           ;main.c: 75: (INTCONbits.GIE = 0);
  1167  000B36  9EF2               	bcf	intcon,7,c	;volatile
  1168                           
  1169                           ;main.c: 78: lcdInst(0b00000001);;
  1170  000B38  0E01               	movlw	1
  1171  000B3A  ECD2  F00C         	call	_lcdInst
  1172                           
  1173                           ;main.c: 79: initLCD();
  1174  000B3E  EC00  F00C         	call	_initLCD	;wreg free
  1175                           
  1176                           ;main.c: 80: lcdInst(0b10000000);;
  1177  000B42  0E80               	movlw	128
  1178  000B44  ECD2  F00C         	call	_lcdInst
  1179                           
  1180                           ;main.c: 89: printf("Press 1 to begin operation");
  1181  000B48  0E58               	movlw	low STR_1
  1182  000B4A  0100               	movlb	0	; () banked
  1183  000B4C  6FAC               	movwf	printf@f& (0+255),b
  1184  000B4E  0EFC               	movlw	high STR_1
  1185  000B50  0100               	movlb	0	; () banked
  1186  000B52  6FAD               	movwf	(printf@f+1)& (0+255),b
  1187  000B54  EC8F  F002         	call	_printf	;wreg free
  1188                           
  1189                           ;main.c: 91: switch(curr_state){
  1190                           
  1191                           ;main.c: 90: while (1){
  1192  000B58  D027               	goto	l3110
  1193  000B5A                     l3100:
  1194                           
  1195                           ;main.c: 95: init_operation(start_time, time);
  1196  000B5A  0EC6               	movlw	low main@start_time
  1197  000B5C  0100               	movlb	0	; () banked
  1198  000B5E  6FB7               	movwf	init_operation@start_time& (0+255),b
  1199  000B60  0E00               	movlw	high main@start_time
  1200  000B62  0100               	movlb	0	; () banked
  1201  000B64  6FB8               	movwf	(init_operation@start_time+1)& (0+255),b
  1202  000B66  0EBF               	movlw	low main@time
  1203  000B68  0100               	movlb	0	; () banked
  1204  000B6A  6FB9               	movwf	init_operation@time& (0+255),b
  1205  000B6C  0E00               	movlw	high main@time
  1206  000B6E  0100               	movlb	0	; () banked
  1207  000B70  6FBA               	movwf	(init_operation@time+1)& (0+255),b
  1208  000B72  ECF8  F008         	call	_init_operation	;wreg free
  1209                           
  1210                           ;main.c: 96: update_time(end_time);
  1211  000B76  0ECD               	movlw	low main@end_time
  1212  000B78  6E14               	movwf	update_time@time,c
  1213  000B7A  0E00               	movlw	high main@end_time
  1214  000B7C  6E15               	movwf	update_time@time+1,c
  1215  000B7E  ECF7  F00A         	call	_update_time	;wreg free
  1216                           
  1217                           ;main.c: 99: break;
  1218                           
  1219                           ;main.c: 98: case DATETIME:
  1220                           
  1221                           ;main.c: 97: break;
  1222  000B82  D023               	goto	l3112
  1223  000B84                     l3104:
  1224                           
  1225                           ;main.c: 101: bottle_count();
  1226  000B84  ECD2  F003         	call	_bottle_count	;wreg free
  1227                           
  1228                           ;main.c: 102: break;
  1229  000B88  D020               	goto	l3112
  1230  000B8A                     l3106:
  1231                           
  1232                           ;main.c: 104: runtime(start_time, end_time);
  1233  000B8A  0EC6               	movlw	low main@start_time
  1234  000B8C  0100               	movlb	0	; () banked
  1235  000B8E  6FB7               	movwf	runtime@start_time& (0+255),b
  1236  000B90  0E00               	movlw	high main@start_time
  1237  000B92  0100               	movlb	0	; () banked
  1238  000B94  6FB8               	movwf	(runtime@start_time+1)& (0+255),b
  1239  000B96  0ECD               	movlw	low main@end_time
  1240  000B98  0100               	movlb	0	; () banked
  1241  000B9A  6FB9               	movwf	runtime@end_time& (0+255),b
  1242  000B9C  0E00               	movlw	high main@end_time
  1243  000B9E  0100               	movlb	0	; () banked
  1244  000BA0  6FBA               	movwf	(runtime@end_time+1)& (0+255),b
  1245  000BA2  ECDB  F00B         	call	_runtime	;wreg free
  1246                           
  1247                           ;main.c: 106: }
  1248                           
  1249                           ;main.c: 105: break;
  1250  000BA6  D011               	goto	l3112
  1251  000BA8                     l3110:
  1252  000BA8  0100               	movlb	0	; () banked
  1253  000BAA  51D4               	movf	_curr_state& (0+255),w,b
  1254                           
  1255                           ; Switch size 1, requested type "space"
  1256                           ; Number of cases is 5, Range of values is 0 to 4
  1257                           ; switch strategies available:
  1258                           ; Name         Instructions Cycles
  1259                           ; simple_byte           16     9 (average)
  1260                           ;	Chosen strategy is simple_byte
  1261  000BAC  0A00               	xorlw	0	; case 0
  1262  000BAE  B4D8               	btfsc	status,2,c
  1263  000BB0  D00C               	goto	l3112
  1264  000BB2  0A01               	xorlw	1	; case 1
  1265  000BB4  B4D8               	btfsc	status,2,c
  1266  000BB6  D7D1               	goto	l3100
  1267  000BB8  0A03               	xorlw	3	; case 2
  1268  000BBA  B4D8               	btfsc	status,2,c
  1269  000BBC  D006               	goto	l3112
  1270  000BBE  0A01               	xorlw	1	; case 3
  1271  000BC0  B4D8               	btfsc	status,2,c
  1272  000BC2  D7E0               	goto	l3104
  1273  000BC4  0A07               	xorlw	7	; case 4
  1274  000BC6  B4D8               	btfsc	status,2,c
  1275  000BC8  D7E0               	goto	l3106
  1276  000BCA                     l3112:
  1277                           
  1278                           ;main.c: 107: _delay((unsigned long)((100)*(10000000/4000.0)));
  1279  000BCA  0E02               	movlw	2
  1280  000BCC  0100               	movlb	0	; () banked
  1281  000BCE  6FBE               	movwf	(??_main+1)& (0+255),b
  1282  000BD0  0E45               	movlw	69
  1283  000BD2  0100               	movlb	0	; () banked
  1284  000BD4  6FBD               	movwf	??_main& (0+255),b
  1285  000BD6  0EA9               	movlw	169
  1286  000BD8                     u2577:
  1287  000BD8  2EE8               	decfsz	wreg,f,c
  1288  000BDA  D7FE               	bra	u2577
  1289  000BDC  2FBD               	decfsz	??_main& (0+255),f,b
  1290  000BDE  D7FC               	bra	u2577
  1291  000BE0  2FBE               	decfsz	(??_main+1)& (0+255),f,b
  1292  000BE2  D7FA               	bra	u2577
  1293  000BE4  D000               	nop2	
  1294  000BE6  D7E0               	goto	l3110
  1295  000BE8                     __end_of_main:
  1296                           	opt stack 0
  1297                           tblptru	equ	0xFF8
  1298                           intcon	equ	0xFF2
  1299                           intcon2	equ	0xFF1
  1300                           wreg	equ	0xFE8
  1301                           status	equ	0xFD8
  1302                           
  1303 ;; *************** function _runtime *****************
  1304 ;; Defined at:
  1305 ;;		line 208 in file "main.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;  start_time      2   55[BANK0 ] PTR unsigned char 
  1308 ;;		 -> main@start_time(7), 
  1309 ;;  end_time        2   57[BANK0 ] PTR unsigned char 
  1310 ;;		 -> main@end_time(7), 
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1322 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1325 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1326 ;;Total ram usage:        4 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    8
  1329 ;; This function calls:
  1330 ;;		_lcdInst
  1331 ;;		_printf
  1332 ;;		_time_difference
  1333 ;; This function is called by:
  1334 ;;		_main
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text1
  1339  0017B6                     __ptext1:
  1340                           	opt stack 0
  1341  0017B6                     _runtime:
  1342                           	opt stack 22
  1343                           
  1344                           ;main.c: 209: lcdInst(0b10000000);;
  1345                           
  1346                           ;incstack = 0
  1347  0017B6  0E80               	movlw	128
  1348  0017B8  ECD2  F00C         	call	_lcdInst
  1349                           
  1350                           ;main.c: 210: printf("Total Operation");
  1351  0017BC  0E95               	movlw	low STR_4
  1352  0017BE  0100               	movlb	0	; () banked
  1353  0017C0  6FAC               	movwf	printf@f& (0+255),b
  1354  0017C2  0EFC               	movlw	high STR_4
  1355  0017C4  0100               	movlb	0	; () banked
  1356  0017C6  6FAD               	movwf	(printf@f+1)& (0+255),b
  1357  0017C8  EC8F  F002         	call	_printf	;wreg free
  1358                           
  1359                           ;main.c: 211: lcdInst(0b11000000);;
  1360  0017CC  0EC0               	movlw	192
  1361  0017CE  ECD2  F00C         	call	_lcdInst
  1362                           
  1363                           ;main.c: 212: printf("Time: %is", time_difference(end_time, start_time));
  1364  0017D2  0EF5               	movlw	low STR_5
  1365  0017D4  0100               	movlb	0	; () banked
  1366  0017D6  6FAC               	movwf	printf@f& (0+255),b
  1367  0017D8  0EFC               	movlw	high STR_5
  1368  0017DA  0100               	movlb	0	; () banked
  1369  0017DC  6FAD               	movwf	(printf@f+1)& (0+255),b
  1370  0017DE  C0B9  F099         	movff	runtime@end_time,time_difference@time1
  1371  0017E2  C0BA  F09A         	movff	runtime@end_time+1,time_difference@time1+1
  1372  0017E6  C0B7  F09B         	movff	runtime@start_time,time_difference@time2
  1373  0017EA  C0B8  F09C         	movff	runtime@start_time+1,time_difference@time2+1
  1374  0017EE  EC36  F003         	call	_time_difference	;wreg free
  1375  0017F2  C099  F0AE         	movff	?_time_difference,?_printf+2
  1376  0017F6  C09A  F0AF         	movff	?_time_difference+1,?_printf+3
  1377  0017FA  EC8F  F002         	call	_printf	;wreg free
  1378  0017FE  0012               	return		;funcret
  1379  001800                     __end_of_runtime:
  1380                           	opt stack 0
  1381                           tblptru	equ	0xFF8
  1382                           intcon	equ	0xFF2
  1383                           intcon2	equ	0xFF1
  1384                           wreg	equ	0xFE8
  1385                           status	equ	0xFD8
  1386                           
  1387 ;; *************** function _init_operation *****************
  1388 ;; Defined at:
  1389 ;;		line 194 in file "main.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;  start_time      2   55[BANK0 ] PTR unsigned char 
  1392 ;;		 -> main@start_time(7), 
  1393 ;;  time            2   57[BANK0 ] PTR unsigned char 
  1394 ;;		 -> main@time(7), 
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;		None
  1397 ;; Return value:  Size  Location     Type
  1398 ;;                  1    wreg      void 
  1399 ;; Registers used:
  1400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1406 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1409 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1410 ;;Total ram usage:        6 bytes
  1411 ;; Hardware stack levels used:    1
  1412 ;; Hardware stack levels required when called:    8
  1413 ;; This function calls:
  1414 ;;		_initLCD
  1415 ;;		_lcdInst
  1416 ;;		_printf
  1417 ;;		_time_difference
  1418 ;;		_update_time
  1419 ;; This function is called by:
  1420 ;;		_main
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	text2
  1425  0011F0                     __ptext2:
  1426                           	opt stack 0
  1427  0011F0                     _init_operation:
  1428                           	opt stack 22
  1429                           
  1430                           ;main.c: 195: update_time(start_time);
  1431                           
  1432                           ;incstack = 0
  1433  0011F0  C0B7  F014         	movff	init_operation@start_time,update_time@time
  1434  0011F4  C0B8  F015         	movff	init_operation@start_time+1,update_time@time+1
  1435  0011F8  ECF7  F00A         	call	_update_time	;wreg free
  1436                           
  1437                           ;main.c: 196: lcdInst(0b00000001);;
  1438  0011FC  0E01               	movlw	1
  1439  0011FE  ECD2  F00C         	call	_lcdInst
  1440                           
  1441                           ;main.c: 197: initLCD();
  1442  001202  EC00  F00C         	call	_initLCD	;wreg free
  1443                           
  1444                           ;main.c: 198: while(PORTBbits.RB1 == 0 && keys[(PORTB & 0xF0)>>4] != '*'){
  1445  001206  D038               	goto	l3016
  1446  001208                     l3004:
  1447                           
  1448                           ;main.c: 199: update_time(time);
  1449  001208  C0B9  F014         	movff	init_operation@time,update_time@time
  1450  00120C  C0BA  F015         	movff	init_operation@time+1,update_time@time+1
  1451  001210  ECF7  F00A         	call	_update_time	;wreg free
  1452                           
  1453                           ;main.c: 200: lcdInst(0b10000000);;
  1454  001214  0E80               	movlw	128
  1455  001216  ECD2  F00C         	call	_lcdInst
  1456                           
  1457                           ;main.c: 201: printf("Press * To Stop ");
  1458  00121A  0E73               	movlw	low STR_2
  1459  00121C  0100               	movlb	0	; () banked
  1460  00121E  6FAC               	movwf	printf@f& (0+255),b
  1461  001220  0EFC               	movlw	high STR_2
  1462  001222  0100               	movlb	0	; () banked
  1463  001224  6FAD               	movwf	(printf@f+1)& (0+255),b
  1464  001226  EC8F  F002         	call	_printf	;wreg free
  1465                           
  1466                           ;main.c: 202: lcdInst(0b11000000);;
  1467  00122A  0EC0               	movlw	192
  1468  00122C  ECD2  F00C         	call	_lcdInst
  1469                           
  1470                           ;main.c: 203: printf("Elapsed: %is", time_difference(time, start_time));
  1471  001230  0EDD               	movlw	low STR_3
  1472  001232  0100               	movlb	0	; () banked
  1473  001234  6FAC               	movwf	printf@f& (0+255),b
  1474  001236  0EFC               	movlw	high STR_3
  1475  001238  0100               	movlb	0	; () banked
  1476  00123A  6FAD               	movwf	(printf@f+1)& (0+255),b
  1477  00123C  C0B9  F099         	movff	init_operation@time,time_difference@time1
  1478  001240  C0BA  F09A         	movff	init_operation@time+1,time_difference@time1+1
  1479  001244  C0B7  F09B         	movff	init_operation@start_time,time_difference@time2
  1480  001248  C0B8  F09C         	movff	init_operation@start_time+1,time_difference@time2+1
  1481  00124C  EC36  F003         	call	_time_difference	;wreg free
  1482  001250  C099  F0AE         	movff	?_time_difference,?_printf+2
  1483  001254  C09A  F0AF         	movff	?_time_difference+1,?_printf+3
  1484  001258  EC8F  F002         	call	_printf	;wreg free
  1485                           
  1486                           ;main.c: 204: _delay((unsigned long)((500)*(10000000/4000.0)));
  1487  00125C  0E07               	movlw	7
  1488  00125E  0100               	movlb	0	; () banked
  1489  001260  6FBC               	movwf	(??_init_operation+1)& (0+255),b
  1490  001262  0E58               	movlw	88
  1491  001264  0100               	movlb	0	; () banked
  1492  001266  6FBB               	movwf	??_init_operation& (0+255),b
  1493  001268  0E59               	movlw	89
  1494  00126A                     u2587:
  1495  00126A  2EE8               	decfsz	wreg,f,c
  1496  00126C  D7FE               	bra	u2587
  1497  00126E  2FBB               	decfsz	??_init_operation& (0+255),f,b
  1498  001270  D7FC               	bra	u2587
  1499  001272  2FBC               	decfsz	(??_init_operation+1)& (0+255),f,b
  1500  001274  D7FA               	bra	u2587
  1501  001276  D000               	nop2	
  1502  001278                     l3016:
  1503  001278  B281               	btfsc	3969,1,c	;volatile
  1504  00127A  0012               	return	
  1505  00127C  3881               	swapf	3969,w,c	;volatile
  1506  00127E  0B0F               	andlw	15
  1507  001280  0B0F               	andlw	15
  1508  001282  0100               	movlb	0	; () banked
  1509  001284  6FBB               	movwf	??_init_operation& (0+255),b
  1510  001286  6BBC               	clrf	(??_init_operation+1)& (0+255),b
  1511  001288  0EFD               	movlw	low _keys
  1512  00128A  0100               	movlb	0	; () banked
  1513  00128C  25BB               	addwf	??_init_operation& (0+255),w,b
  1514  00128E  6EF6               	movwf	tblptrl,c
  1515  001290  0EFB               	movlw	high _keys
  1516  001292  21BC               	addwfc	(??_init_operation+1)& (0+255),w,b
  1517  001294  6EF7               	movwf	tblptrh,c
  1518  001296                     	if	0	;There are less than 3 active tblptr bytes
  1519  001296                     	endif
  1520  001296  0008               	tblrd		*
  1521  001298  50F5               	movf	tablat,w,c
  1522  00129A  0A2A               	xorlw	42
  1523  00129C  B4D8               	btfsc	status,2,c
  1524  00129E  0012               	return	
  1525  0012A0  D7B3               	goto	l3004
  1526  0012A2                     __end_of_init_operation:
  1527                           	opt stack 0
  1528                           tblptru	equ	0xFF8
  1529                           tblptrh	equ	0xFF7
  1530                           tblptrl	equ	0xFF6
  1531                           tablat	equ	0xFF5
  1532                           intcon	equ	0xFF2
  1533                           intcon2	equ	0xFF1
  1534                           wreg	equ	0xFE8
  1535                           status	equ	0xFD8
  1536                           
  1537 ;; *************** function _update_time *****************
  1538 ;; Defined at:
  1539 ;;		line 146 in file "main.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;  time            2   19[COMRAM] PTR unsigned char 
  1542 ;;		 -> main@end_time(7), main@time(7), main@start_time(7), 
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;  i               1   21[COMRAM] unsigned char 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      void 
  1547 ;; Registers used:
  1548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1554 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1555 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1557 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1558 ;;Total ram usage:        3 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    3
  1561 ;; This function calls:
  1562 ;;		_I2C_Master_Read
  1563 ;;		_I2C_Master_Start
  1564 ;;		_I2C_Master_Stop
  1565 ;;		_I2C_Master_Write
  1566 ;; This function is called by:
  1567 ;;		_main
  1568 ;;		_init_operation
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text3
  1573  0015EE                     __ptext3:
  1574                           	opt stack 0
  1575  0015EE                     _update_time:
  1576                           	opt stack 27
  1577                           
  1578                           ;main.c: 147: I2C_Master_Start();
  1579                           
  1580                           ;incstack = 0
  1581  0015EE  ECE1  F00C         	call	_I2C_Master_Start	;wreg free
  1582                           
  1583                           ;main.c: 148: I2C_Master_Write(0b11010000);
  1584  0015F2  0E00               	movlw	0
  1585  0015F4  6E13               	movwf	I2C_Master_Write@d+1,c
  1586  0015F6  0ED0               	movlw	208
  1587  0015F8  6E12               	movwf	I2C_Master_Write@d,c
  1588  0015FA  ECD8  F00C         	call	_I2C_Master_Write	;wreg free
  1589                           
  1590                           ;main.c: 149: I2C_Master_Write(0x00);
  1591  0015FE  0E00               	movlw	0
  1592  001600  6E13               	movwf	I2C_Master_Write@d+1,c
  1593  001602  0E00               	movlw	0
  1594  001604  6E12               	movwf	I2C_Master_Write@d,c
  1595  001606  ECD8  F00C         	call	_I2C_Master_Write	;wreg free
  1596                           
  1597                           ;main.c: 150: I2C_Master_Stop();
  1598  00160A  ECDD  F00C         	call	_I2C_Master_Stop	;wreg free
  1599                           
  1600                           ;main.c: 153: I2C_Master_Start();
  1601  00160E  ECE1  F00C         	call	_I2C_Master_Start	;wreg free
  1602                           
  1603                           ;main.c: 154: I2C_Master_Write(0b11010001);
  1604  001612  0E00               	movlw	0
  1605  001614  6E13               	movwf	I2C_Master_Write@d+1,c
  1606  001616  0ED1               	movlw	209
  1607  001618  6E12               	movwf	I2C_Master_Write@d,c
  1608  00161A  ECD8  F00C         	call	_I2C_Master_Write	;wreg free
  1609                           
  1610                           ;main.c: 155: for(unsigned char i=0;i<0x06;i++){
  1611  00161E  0E00               	movlw	0
  1612  001620  6E16               	movwf	update_time@i,c
  1613  001622                     l2682:
  1614  001622  0E05               	movlw	5
  1615  001624  6416               	cpfsgt	update_time@i,c
  1616  001626  D001               	goto	l2686
  1617  001628  D00E               	goto	l2692
  1618  00162A                     l2686:
  1619                           
  1620                           ;main.c: 156: time[i] = I2C_Master_Read(1);
  1621  00162A  5016               	movf	update_time@i,w,c
  1622  00162C  0D01               	mullw	1
  1623  00162E  50F3               	movf	prodl,w,c
  1624  001630  2414               	addwf	update_time@time,w,c
  1625  001632  6ED9               	movwf	fsr2l,c
  1626  001634  50F4               	movf	prodh,w,c
  1627  001636  2015               	addwfc	update_time@time+1,w,c
  1628  001638  6EDA               	movwf	fsr2h,c
  1629  00163A  0E01               	movlw	1
  1630  00163C  EC80  F00C         	call	_I2C_Master_Read
  1631  001640  6EDF               	movwf	indf2,c
  1632  001642  2A16               	incf	update_time@i,f,c
  1633  001644  D7EE               	goto	l2682
  1634  001646                     l2692:
  1635                           
  1636                           ;main.c: 157: }
  1637                           ;main.c: 158: time[6] = I2C_Master_Read(0);
  1638  001646  EE20 F006          	lfsr	2,6
  1639  00164A  5014               	movf	update_time@time,w,c
  1640  00164C  26D9               	addwf	fsr2l,f,c
  1641  00164E  5015               	movf	update_time@time+1,w,c
  1642  001650  22DA               	addwfc	fsr2h,f,c
  1643  001652  0E00               	movlw	0
  1644  001654  EC80  F00C         	call	_I2C_Master_Read
  1645  001658  6EDF               	movwf	indf2,c
  1646                           
  1647                           ;main.c: 159: I2C_Master_Stop();
  1648  00165A  ECDD  F00C         	call	_I2C_Master_Stop	;wreg free
  1649  00165E  0012               	return		;funcret
  1650  001660                     __end_of_update_time:
  1651                           	opt stack 0
  1652                           tblptru	equ	0xFF8
  1653                           tblptrh	equ	0xFF7
  1654                           tblptrl	equ	0xFF6
  1655                           tablat	equ	0xFF5
  1656                           prodh	equ	0xFF4
  1657                           prodl	equ	0xFF3
  1658                           intcon	equ	0xFF2
  1659                           intcon2	equ	0xFF1
  1660                           wreg	equ	0xFE8
  1661                           indf2	equ	0xFDF
  1662                           fsr2h	equ	0xFDA
  1663                           fsr2l	equ	0xFD9
  1664                           status	equ	0xFD8
  1665                           
  1666 ;; *************** function _I2C_Master_Write *****************
  1667 ;; Defined at:
  1668 ;;		line 47 in file "I2C.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;  d               2   17[COMRAM] unsigned int 
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;		None
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  1    wreg      void 
  1675 ;; Registers used:
  1676 ;;		wreg, status,2, status,0, cstack
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1682 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;Total ram usage:        2 bytes
  1687 ;; Hardware stack levels used:    1
  1688 ;; Hardware stack levels required when called:    2
  1689 ;; This function calls:
  1690 ;;		_I2C_Master_Wait
  1691 ;; This function is called by:
  1692 ;;		_update_time
  1693 ;;		_set_time
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           	psect	text4
  1698  0019B0                     __ptext4:
  1699                           	opt stack 0
  1700  0019B0                     _I2C_Master_Write:
  1701                           	opt stack 27
  1702                           
  1703                           ;I2C.c: 49: I2C_Master_Wait();
  1704                           
  1705                           ;incstack = 0
  1706  0019B0  ECC3  F00C         	call	_I2C_Master_Wait	;wreg free
  1707                           
  1708                           ;I2C.c: 50: SSPBUF = d;
  1709  0019B4  C012  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  1710  0019B8  0012               	return		;funcret
  1711  0019BA                     __end_of_I2C_Master_Write:
  1712                           	opt stack 0
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           prodh	equ	0xFF4
  1718                           prodl	equ	0xFF3
  1719                           intcon	equ	0xFF2
  1720                           intcon2	equ	0xFF1
  1721                           wreg	equ	0xFE8
  1722                           indf2	equ	0xFDF
  1723                           fsr2h	equ	0xFDA
  1724                           fsr2l	equ	0xFD9
  1725                           status	equ	0xFD8
  1726                           
  1727 ;; *************** function _I2C_Master_Stop *****************
  1728 ;; Defined at:
  1729 ;;		line 41 in file "I2C.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;		None
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  2   56[None  ] int 
  1736 ;; Registers used:
  1737 ;;		wreg, status,2, status,0, cstack
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;Total ram usage:        0 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; Hardware stack levels required when called:    2
  1750 ;; This function calls:
  1751 ;;		_I2C_Master_Wait
  1752 ;; This function is called by:
  1753 ;;		_update_time
  1754 ;;		_set_time
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text5
  1759  0019BA                     __ptext5:
  1760                           	opt stack 0
  1761  0019BA                     _I2C_Master_Stop:
  1762                           	opt stack 27
  1763                           
  1764                           ;I2C.c: 43: I2C_Master_Wait();
  1765                           
  1766                           ;incstack = 0
  1767  0019BA  ECC3  F00C         	call	_I2C_Master_Wait	;wreg free
  1768                           
  1769                           ;I2C.c: 44: PEN = 1;
  1770  0019BE  84C5               	bsf	4037,2,c	;volatile
  1771  0019C0  0012               	return		;funcret
  1772  0019C2                     __end_of_I2C_Master_Stop:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           tblptrh	equ	0xFF7
  1776                           tblptrl	equ	0xFF6
  1777                           tablat	equ	0xFF5
  1778                           prodh	equ	0xFF4
  1779                           prodl	equ	0xFF3
  1780                           intcon	equ	0xFF2
  1781                           intcon2	equ	0xFF1
  1782                           wreg	equ	0xFE8
  1783                           indf2	equ	0xFDF
  1784                           fsr2h	equ	0xFDA
  1785                           fsr2l	equ	0xFD9
  1786                           status	equ	0xFD8
  1787                           
  1788 ;; *************** function _I2C_Master_Start *****************
  1789 ;; Defined at:
  1790 ;;		line 29 in file "I2C.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;		None
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;		None
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  2   52[None  ] int 
  1797 ;; Registers used:
  1798 ;;		wreg, status,2, status,0, cstack
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;Total ram usage:        0 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    2
  1811 ;; This function calls:
  1812 ;;		_I2C_Master_Wait
  1813 ;; This function is called by:
  1814 ;;		_update_time
  1815 ;;		_set_time
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           	psect	text6
  1820  0019C2                     __ptext6:
  1821                           	opt stack 0
  1822  0019C2                     _I2C_Master_Start:
  1823                           	opt stack 27
  1824                           
  1825                           ;I2C.c: 31: I2C_Master_Wait();
  1826                           
  1827                           ;incstack = 0
  1828  0019C2  ECC3  F00C         	call	_I2C_Master_Wait	;wreg free
  1829                           
  1830                           ;I2C.c: 32: SEN = 1;
  1831  0019C6  80C5               	bsf	4037,0,c	;volatile
  1832  0019C8  0012               	return		;funcret
  1833  0019CA                     __end_of_I2C_Master_Start:
  1834                           	opt stack 0
  1835                           tblptru	equ	0xFF8
  1836                           tblptrh	equ	0xFF7
  1837                           tblptrl	equ	0xFF6
  1838                           tablat	equ	0xFF5
  1839                           prodh	equ	0xFF4
  1840                           prodl	equ	0xFF3
  1841                           intcon	equ	0xFF2
  1842                           intcon2	equ	0xFF1
  1843                           wreg	equ	0xFE8
  1844                           indf2	equ	0xFDF
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _I2C_Master_Read *****************
  1850 ;; Defined at:
  1851 ;;		line 53 in file "I2C.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  a               1    wreg     unsigned char 
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;  a               1   17[COMRAM] unsigned char 
  1856 ;;  temp            1   18[COMRAM] unsigned char 
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      unsigned char 
  1859 ;; Registers used:
  1860 ;;		wreg, status,2, status,0, cstack
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1869 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1870 ;;Total ram usage:        2 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; Hardware stack levels required when called:    2
  1873 ;; This function calls:
  1874 ;;		_I2C_Master_Wait
  1875 ;; This function is called by:
  1876 ;;		_update_time
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           	psect	text7
  1881  001900                     __ptext7:
  1882                           	opt stack 0
  1883  001900                     _I2C_Master_Read:
  1884                           	opt stack 27
  1885                           
  1886                           ;incstack = 0
  1887                           ;I2C_Master_Read@a stored from wreg
  1888  001900  6E12               	movwf	I2C_Master_Read@a,c
  1889                           
  1890                           ;I2C.c: 55: unsigned char temp;
  1891                           ;I2C.c: 56: I2C_Master_Wait();
  1892  001902  ECC3  F00C         	call	_I2C_Master_Wait	;wreg free
  1893                           
  1894                           ;I2C.c: 57: RCEN = 1;
  1895  001906  86C5               	bsf	4037,3,c	;volatile
  1896                           
  1897                           ;I2C.c: 58: I2C_Master_Wait();
  1898  001908  ECC3  F00C         	call	_I2C_Master_Wait	;wreg free
  1899                           
  1900                           ;I2C.c: 59: temp = SSPBUF;
  1901  00190C  CFC9 F013          	movff	4041,I2C_Master_Read@temp	;volatile
  1902                           
  1903                           ;I2C.c: 60: I2C_Master_Wait();
  1904  001910  ECC3  F00C         	call	_I2C_Master_Wait	;wreg free
  1905                           
  1906                           ;I2C.c: 61: ACKDT = (a)?0:1;
  1907  001914  5012               	movf	I2C_Master_Read@a,w,c
  1908  001916  A4D8               	btfss	status,2,c
  1909  001918  D002               	goto	u2190
  1910  00191A  8AC5               	bsf	4037,5,c	;volatile
  1911  00191C  D001               	goto	l2548
  1912  00191E                     u2190:
  1913  00191E  9AC5               	bcf	4037,5,c	;volatile
  1914  001920                     l2548:
  1915                           
  1916                           ;I2C.c: 62: ACKEN = 1;
  1917  001920  88C5               	bsf	4037,4,c	;volatile
  1918                           
  1919                           ;I2C.c: 63: return temp;
  1920  001922  5013               	movf	I2C_Master_Read@temp,w,c
  1921  001924  0012               	return	
  1922  001926                     __end_of_I2C_Master_Read:
  1923                           	opt stack 0
  1924                           tblptru	equ	0xFF8
  1925                           tblptrh	equ	0xFF7
  1926                           tblptrl	equ	0xFF6
  1927                           tablat	equ	0xFF5
  1928                           prodh	equ	0xFF4
  1929                           prodl	equ	0xFF3
  1930                           intcon	equ	0xFF2
  1931                           intcon2	equ	0xFF1
  1932                           wreg	equ	0xFE8
  1933                           indf2	equ	0xFDF
  1934                           fsr2h	equ	0xFDA
  1935                           fsr2l	equ	0xFD9
  1936                           status	equ	0xFD8
  1937                           
  1938 ;; *************** function _I2C_Master_Wait *****************
  1939 ;; Defined at:
  1940 ;;		line 24 in file "I2C.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;		None
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;		None
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      void 
  1947 ;; Registers used:
  1948 ;;		wreg, status,2, status,0
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;Total ram usage:        1 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    1
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_I2C_Master_Start
  1965 ;;		_I2C_Master_Stop
  1966 ;;		_I2C_Master_Write
  1967 ;;		_I2C_Master_Read
  1968 ;;		_I2C_Master_RepeatedStart
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text8
  1973  001986                     __ptext8:
  1974                           	opt stack 0
  1975  001986                     _I2C_Master_Wait:
  1976                           	opt stack 27
  1977  001986                     l199:
  1978  001986  B4C7               	btfsc	4039,2,c	;volatile
  1979  001988  D7FE               	goto	l199
  1980  00198A  CFC5 F011          	movff	4037,??_I2C_Master_Wait	;volatile
  1981  00198E  0E1F               	movlw	31
  1982  001990  1611               	andwf	??_I2C_Master_Wait,f,c
  1983  001992  B4D8               	btfsc	status,2,c
  1984  001994  0012               	return	
  1985  001996  D7F7               	goto	l199
  1986  001998                     __end_of_I2C_Master_Wait:
  1987                           	opt stack 0
  1988                           tblptru	equ	0xFF8
  1989                           tblptrh	equ	0xFF7
  1990                           tblptrl	equ	0xFF6
  1991                           tablat	equ	0xFF5
  1992                           prodh	equ	0xFF4
  1993                           prodl	equ	0xFF3
  1994                           intcon	equ	0xFF2
  1995                           intcon2	equ	0xFF1
  1996                           wreg	equ	0xFE8
  1997                           indf2	equ	0xFDF
  1998                           fsr2h	equ	0xFDA
  1999                           fsr2l	equ	0xFD9
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function _time_difference *****************
  2003 ;; Defined at:
  2004 ;;		line 182 in file "main.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  time1           2   25[BANK0 ] PTR unsigned char 
  2007 ;;		 -> main@end_time(7), main@time(7), 
  2008 ;;  time2           2   27[BANK0 ] PTR unsigned char 
  2009 ;;		 -> main@start_time(7), 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  s2              2   39[BANK0 ] int 
  2012 ;;  s1              2   37[BANK0 ] int 
  2013 ;;  min2            2   35[BANK0 ] int 
  2014 ;;  min1            2   33[BANK0 ] int 
  2015 ;;  hr2             2   31[BANK0 ] int 
  2016 ;;  hr1             2   29[BANK0 ] int 
  2017 ;;  d3              1   43[BANK0 ] unsigned char 
  2018 ;;  d2              1   42[BANK0 ] unsigned char 
  2019 ;;  d1              1   41[BANK0 ] unsigned char 
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  2   25[BANK0 ] int 
  2022 ;; Registers used:
  2023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2029 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;      Totals:         1      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;Total ram usage:       20 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; Hardware stack levels required when called:    7
  2036 ;; This function calls:
  2037 ;;		___wmul
  2038 ;;		_dec_to_hex
  2039 ;; This function is called by:
  2040 ;;		_init_operation
  2041 ;;		_runtime
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text9
  2046  00066C                     __ptext9:
  2047                           	opt stack 0
  2048  00066C                     _time_difference:
  2049                           	opt stack 22
  2050                           
  2051                           ;main.c: 183: int hr1, hr2, min1, min2, s1, s2;
  2052                           ;main.c: 184: char d1, d2, d3;
  2053                           ;main.c: 185: hr1 = time1[2]; hr2 = time2[2]; min1 = time1[1]; min2 = time2[1];
  2054                           
  2055                           ;incstack = 0
  2056  00066C  0100               	movlb	0	; () banked
  2057  00066E  EE20 F002          	lfsr	2,2
  2058  000672  5199               	movf	time_difference@time1& (0+255),w,b
  2059  000674  26D9               	addwf	fsr2l,f,c
  2060  000676  519A               	movf	(time_difference@time1+1)& (0+255),w,b
  2061  000678  22DA               	addwfc	fsr2h,f,c
  2062  00067A  50DF               	movf	indf2,w,c
  2063  00067C  6E6A               	movwf	??_time_difference& (0+255),c
  2064  00067E  506A               	movf	??_time_difference,w,c
  2065  000680  0100               	movlb	0	; () banked
  2066  000682  6F9D               	movwf	time_difference@hr1& (0+255),b
  2067  000684  6B9E               	clrf	(time_difference@hr1+1)& (0+255),b
  2068  000686  0100               	movlb	0	; () banked
  2069  000688  EE20 F002          	lfsr	2,2
  2070  00068C  519B               	movf	time_difference@time2& (0+255),w,b
  2071  00068E  26D9               	addwf	fsr2l,f,c
  2072  000690  519C               	movf	(time_difference@time2+1)& (0+255),w,b
  2073  000692  22DA               	addwfc	fsr2h,f,c
  2074  000694  50DF               	movf	indf2,w,c
  2075  000696  6E6A               	movwf	??_time_difference& (0+255),c
  2076  000698  506A               	movf	??_time_difference,w,c
  2077  00069A  0100               	movlb	0	; () banked
  2078  00069C  6F9F               	movwf	time_difference@hr2& (0+255),b
  2079  00069E  6BA0               	clrf	(time_difference@hr2+1)& (0+255),b
  2080  0006A0  0100               	movlb	0	; () banked
  2081  0006A2  EE20 F001          	lfsr	2,1
  2082  0006A6  5199               	movf	time_difference@time1& (0+255),w,b
  2083  0006A8  26D9               	addwf	fsr2l,f,c
  2084  0006AA  519A               	movf	(time_difference@time1+1)& (0+255),w,b
  2085  0006AC  22DA               	addwfc	fsr2h,f,c
  2086  0006AE  50DF               	movf	indf2,w,c
  2087  0006B0  6E6A               	movwf	??_time_difference& (0+255),c
  2088  0006B2  506A               	movf	??_time_difference,w,c
  2089  0006B4  0100               	movlb	0	; () banked
  2090  0006B6  6FA1               	movwf	time_difference@min1& (0+255),b
  2091  0006B8  6BA2               	clrf	(time_difference@min1+1)& (0+255),b
  2092  0006BA  0100               	movlb	0	; () banked
  2093  0006BC  EE20 F001          	lfsr	2,1
  2094  0006C0  519B               	movf	time_difference@time2& (0+255),w,b
  2095  0006C2  26D9               	addwf	fsr2l,f,c
  2096  0006C4  519C               	movf	(time_difference@time2+1)& (0+255),w,b
  2097  0006C6  22DA               	addwfc	fsr2h,f,c
  2098  0006C8  50DF               	movf	indf2,w,c
  2099  0006CA  6E6A               	movwf	??_time_difference& (0+255),c
  2100  0006CC  506A               	movf	??_time_difference,w,c
  2101  0006CE  0100               	movlb	0	; () banked
  2102  0006D0  6FA3               	movwf	time_difference@min2& (0+255),b
  2103  0006D2  6BA4               	clrf	(time_difference@min2+1)& (0+255),b
  2104                           
  2105                           ;main.c: 186: s1 = time1[0]; s2 = time2[0];
  2106  0006D4  C099  FFD9         	movff	time_difference@time1,fsr2l
  2107  0006D8  C09A  FFDA         	movff	time_difference@time1+1,fsr2h
  2108  0006DC  50DF               	movf	indf2,w,c
  2109  0006DE  6E6A               	movwf	??_time_difference& (0+255),c
  2110  0006E0  506A               	movf	??_time_difference,w,c
  2111  0006E2  0100               	movlb	0	; () banked
  2112  0006E4  6FA5               	movwf	time_difference@s1& (0+255),b
  2113  0006E6  6BA6               	clrf	(time_difference@s1+1)& (0+255),b
  2114  0006E8  C09B  FFD9         	movff	time_difference@time2,fsr2l
  2115  0006EC  C09C  FFDA         	movff	time_difference@time2+1,fsr2h
  2116  0006F0  50DF               	movf	indf2,w,c
  2117  0006F2  6E6A               	movwf	??_time_difference& (0+255),c
  2118  0006F4  506A               	movf	??_time_difference,w,c
  2119  0006F6  0100               	movlb	0	; () banked
  2120  0006F8  6FA7               	movwf	time_difference@s2& (0+255),b
  2121  0006FA  6BA8               	clrf	(time_difference@s2+1)& (0+255),b
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;main.c: 188: d1 = dec_to_hex(hr1) - dec_to_hex(hr2);
  2125  0006FC  C09F  F068         	movff	time_difference@hr2,dec_to_hex@num
  2126  000700  C0A0  F069         	movff	time_difference@hr2+1,dec_to_hex@num+1
  2127  000704  ECF0  F004         	call	_dec_to_hex	;wreg free
  2128  000708  5068               	movf	?_dec_to_hex,w,c
  2129  00070A  0800               	sublw	0
  2130  00070C  6E6A               	movwf	??_time_difference& (0+255),c
  2131  00070E  C09D  F068         	movff	time_difference@hr1,dec_to_hex@num
  2132  000712  C09E  F069         	movff	time_difference@hr1+1,dec_to_hex@num+1
  2133  000716  ECF0  F004         	call	_dec_to_hex	;wreg free
  2134  00071A  5068               	movf	?_dec_to_hex,w,c
  2135  00071C  246A               	addwf	??_time_difference,w,c
  2136  00071E  0100               	movlb	0	; () banked
  2137  000720  6FA9               	movwf	time_difference@d1& (0+255),b
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;main.c: 189: d2 = dec_to_hex(min1) - dec_to_hex(min2);
  2141  000722  C0A3  F068         	movff	time_difference@min2,dec_to_hex@num
  2142  000726  C0A4  F069         	movff	time_difference@min2+1,dec_to_hex@num+1
  2143  00072A  ECF0  F004         	call	_dec_to_hex	;wreg free
  2144  00072E  5068               	movf	?_dec_to_hex,w,c
  2145  000730  0800               	sublw	0
  2146  000732  6E6A               	movwf	??_time_difference& (0+255),c
  2147  000734  C0A1  F068         	movff	time_difference@min1,dec_to_hex@num
  2148  000738  C0A2  F069         	movff	time_difference@min1+1,dec_to_hex@num+1
  2149  00073C  ECF0  F004         	call	_dec_to_hex	;wreg free
  2150  000740  5068               	movf	?_dec_to_hex,w,c
  2151  000742  246A               	addwf	??_time_difference,w,c
  2152  000744  0100               	movlb	0	; () banked
  2153  000746  6FAA               	movwf	time_difference@d2& (0+255),b
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;main.c: 190: d3 = dec_to_hex(s1) - dec_to_hex(s2);
  2157  000748  C0A7  F068         	movff	time_difference@s2,dec_to_hex@num
  2158  00074C  C0A8  F069         	movff	time_difference@s2+1,dec_to_hex@num+1
  2159  000750  ECF0  F004         	call	_dec_to_hex	;wreg free
  2160  000754  5068               	movf	?_dec_to_hex,w,c
  2161  000756  0800               	sublw	0
  2162  000758  6E6A               	movwf	??_time_difference& (0+255),c
  2163  00075A  C0A5  F068         	movff	time_difference@s1,dec_to_hex@num
  2164  00075E  C0A6  F069         	movff	time_difference@s1+1,dec_to_hex@num+1
  2165  000762  ECF0  F004         	call	_dec_to_hex	;wreg free
  2166  000766  5068               	movf	?_dec_to_hex,w,c
  2167  000768  246A               	addwf	??_time_difference,w,c
  2168  00076A  0100               	movlb	0	; () banked
  2169  00076C  6FAB               	movwf	time_difference@d3& (0+255),b
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;main.c: 191: return 3600*d1 + 60*d2 + d3;
  2173  00076E  C0A9  F011         	movff	time_difference@d1,___wmul@multiplier
  2174  000772  6A12               	clrf	___wmul@multiplier+1,c
  2175  000774  0E0E               	movlw	14
  2176  000776  6E14               	movwf	___wmul@multiplicand+1,c
  2177  000778  0E10               	movlw	16
  2178  00077A  6E13               	movwf	___wmul@multiplicand,c
  2179  00077C  EC93  F00C         	call	___wmul	;wreg free
  2180  000780  0100               	movlb	0	; () banked
  2181  000782  51AA               	movf	time_difference@d2& (0+255),w,b
  2182  000784  0D3C               	mullw	60
  2183  000786  50F3               	movf	prodl,w,c
  2184  000788  2611               	addwf	?___wmul,f,c
  2185  00078A  50F4               	movf	prodh,w,c
  2186  00078C  2212               	addwfc	?___wmul+1,f,c
  2187  00078E  0100               	movlb	0	; () banked
  2188  000790  51AB               	movf	time_difference@d3& (0+255),w,b
  2189  000792  2411               	addwf	?___wmul,w,c
  2190  000794  0100               	movlb	0	; () banked
  2191  000796  6F99               	movwf	?_time_difference& (0+255),b
  2192  000798  0100               	movlb	0	; () banked
  2193  00079A  0E00               	movlw	0
  2194  00079C  2012               	addwfc	?___wmul+1,w,c
  2195  00079E  0100               	movlb	0	; () banked
  2196  0007A0  6F9A               	movwf	(?_time_difference+1)& (0+255),b
  2197  0007A2  0012               	return	
  2198  0007A4                     __end_of_time_difference:
  2199                           	opt stack 0
  2200                           tblptru	equ	0xFF8
  2201                           tblptrh	equ	0xFF7
  2202                           tblptrl	equ	0xFF6
  2203                           tablat	equ	0xFF5
  2204                           prodh	equ	0xFF4
  2205                           prodl	equ	0xFF3
  2206                           intcon	equ	0xFF2
  2207                           intcon2	equ	0xFF1
  2208                           wreg	equ	0xFE8
  2209                           indf2	equ	0xFDF
  2210                           fsr2h	equ	0xFDA
  2211                           fsr2l	equ	0xFD9
  2212                           status	equ	0xFD8
  2213                           
  2214 ;; *************** function _dec_to_hex *****************
  2215 ;; Defined at:
  2216 ;;		line 168 in file "main.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;  num             2  103[COMRAM] int 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  quotient        2   23[BANK0 ] int 
  2221 ;;  hexnum          2   21[BANK0 ] int 
  2222 ;;  i               2   19[BANK0 ] int 
  2223 ;;  temp            2   17[BANK0 ] int 
  2224 ;; Return value:  Size  Location     Type
  2225 ;;                  2  103[COMRAM] int 
  2226 ;; Registers used:
  2227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2228 ;; Tracked objects:
  2229 ;;		On entry : 0/0
  2230 ;;		On exit  : 0/0
  2231 ;;		Unchanged: 0/0
  2232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2233 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;      Totals:         2      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;Total ram usage:       16 bytes
  2238 ;; Hardware stack levels used:    1
  2239 ;; Hardware stack levels required when called:    6
  2240 ;; This function calls:
  2241 ;;		___awdiv
  2242 ;;		___awtoft
  2243 ;;		___ftadd
  2244 ;;		___ftmul
  2245 ;;		___fttol
  2246 ;;		_pow
  2247 ;; This function is called by:
  2248 ;;		_time_difference
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           	psect	text10
  2253  0009E0                     __ptext10:
  2254                           	opt stack 0
  2255  0009E0                     _dec_to_hex:
  2256                           	opt stack 22
  2257                           
  2258                           ;main.c: 169: int i = 0, quotient = num, temp, hexnum = 0;
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;incstack = 0
  2262  0009E0  0E00               	movlw	0
  2263  0009E2  0100               	movlb	0	; () banked
  2264  0009E4  6F94               	movwf	(dec_to_hex@i+1)& (0+255),b
  2265  0009E6  0E00               	movlw	0
  2266  0009E8  6F93               	movwf	dec_to_hex@i& (0+255),b
  2267                           
  2268                           ; BSR set to: 0
  2269  0009EA  C068  F097         	movff	dec_to_hex@num,dec_to_hex@quotient
  2270  0009EE  C069  F098         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  2271  0009F2  0E00               	movlw	0
  2272  0009F4  0100               	movlb	0	; () banked
  2273  0009F6  6F96               	movwf	(dec_to_hex@hexnum+1)& (0+255),b
  2274  0009F8  0E00               	movlw	0
  2275  0009FA  6F95               	movwf	dec_to_hex@hexnum& (0+255),b
  2276                           
  2277                           ;main.c: 171: while (quotient != 0) {
  2278  0009FC  D06C               	goto	l2570
  2279  0009FE                     l2558:
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;main.c: 172: temp = quotient % 16;
  2283  0009FE  0E0F               	movlw	15
  2284  000A00  0100               	movlb	0	; () banked
  2285  000A02  1597               	andwf	dec_to_hex@quotient& (0+255),w,b
  2286  000A04  0100               	movlb	0	; () banked
  2287  000A06  6F91               	movwf	dec_to_hex@temp& (0+255),b
  2288  000A08  0100               	movlb	0	; () banked
  2289  000A0A  6B92               	clrf	(dec_to_hex@temp+1)& (0+255),b
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;main.c: 174: hexnum += temp*pow(10,i);
  2293  000A0C  C093  F019         	movff	dec_to_hex@i,___awtoft@c
  2294  000A10  C094  F01A         	movff	dec_to_hex@i+1,___awtoft@c+1
  2295  000A14  EC64  F00C         	call	___awtoft	;wreg free
  2296  000A18  C019  F08B         	movff	?___awtoft,_dec_to_hex$1062
  2297  000A1C  C01A  F08C         	movff	?___awtoft+1,_dec_to_hex$1062+1
  2298  000A20  C01B  F08D         	movff	?___awtoft+2,_dec_to_hex$1062+2
  2299                           
  2300                           ;main.c: 174: hexnum += temp*pow(10,i);
  2301  000A24  C08B  F065         	movff	_dec_to_hex$1062,pow@y
  2302  000A28  C08C  F066         	movff	_dec_to_hex$1062+1,pow@y+1
  2303  000A2C  C08D  F067         	movff	_dec_to_hex$1062+2,pow@y+2
  2304  000A30  0E00               	movlw	0
  2305  000A32  6E62               	movwf	pow@x,c
  2306  000A34  0E20               	movlw	32
  2307  000A36  6E63               	movwf	pow@x+1,c
  2308  000A38  0E41               	movlw	65
  2309  000A3A  6E64               	movwf	pow@x+2,c
  2310  000A3C  ECD1  F001         	call	_pow	;wreg free
  2311  000A40  C062  F08E         	movff	?_pow,_dec_to_hex$1063
  2312  000A44  C063  F08F         	movff	?_pow+1,_dec_to_hex$1063+1
  2313  000A48  C064  F090         	movff	?_pow+2,_dec_to_hex$1063+2
  2314                           
  2315                           ;main.c: 174: hexnum += temp*pow(10,i);
  2316  000A4C  C08E  F020         	movff	_dec_to_hex$1063,___ftmul@f2
  2317  000A50  C08F  F021         	movff	_dec_to_hex$1063+1,___ftmul@f2+1
  2318  000A54  C090  F022         	movff	_dec_to_hex$1063+2,___ftmul@f2+2
  2319  000A58  C091  F019         	movff	dec_to_hex@temp,___awtoft@c
  2320  000A5C  C092  F01A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  2321  000A60  EC64  F00C         	call	___awtoft	;wreg free
  2322  000A64  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2323  000A68  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2324  000A6C  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2325  000A70  EC6E  F006         	call	___ftmul	;wreg free
  2326  000A74  C01D  F02F         	movff	?___ftmul,___ftadd@f2
  2327  000A78  C01E  F030         	movff	?___ftmul+1,___ftadd@f2+1
  2328  000A7C  C01F  F031         	movff	?___ftmul+2,___ftadd@f2+2
  2329  000A80  C095  F019         	movff	dec_to_hex@hexnum,___awtoft@c
  2330  000A84  C096  F01A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  2331  000A88  EC64  F00C         	call	___awtoft	;wreg free
  2332  000A8C  C019  F02C         	movff	?___awtoft,___ftadd@f1
  2333  000A90  C01A  F02D         	movff	?___awtoft+1,___ftadd@f1+1
  2334  000A94  C01B  F02E         	movff	?___awtoft+2,___ftadd@f1+2
  2335  000A98  ECFB  F000         	call	___ftadd	;wreg free
  2336  000A9C  C02C  F038         	movff	?___ftadd,___fttol@f1
  2337  000AA0  C02D  F039         	movff	?___ftadd+1,___fttol@f1+1
  2338  000AA4  C02E  F03A         	movff	?___ftadd+2,___fttol@f1+2
  2339  000AA8  ECF4  F005         	call	___fttol	;wreg free
  2340  000AAC  C038  F095         	movff	?___fttol,dec_to_hex@hexnum
  2341  000AB0  C039  F096         	movff	?___fttol+1,dec_to_hex@hexnum+1
  2342                           
  2343                           ;main.c: 176: quotient = quotient / 16;
  2344  000AB4  C097  F011         	movff	dec_to_hex@quotient,___awdiv@dividend
  2345  000AB8  C098  F012         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  2346  000ABC  0E00               	movlw	0
  2347  000ABE  6E14               	movwf	___awdiv@divisor+1,c
  2348  000AC0  0E10               	movlw	16
  2349  000AC2  6E13               	movwf	___awdiv@divisor,c
  2350  000AC4  EC38  F00A         	call	___awdiv	;wreg free
  2351  000AC8  C011  F097         	movff	?___awdiv,dec_to_hex@quotient
  2352  000ACC  C012  F098         	movff	?___awdiv+1,dec_to_hex@quotient+1
  2353                           
  2354                           ;main.c: 177: i += 1;
  2355  000AD0  0100               	movlb	0	; () banked
  2356  000AD2  4B93               	infsnz	dec_to_hex@i& (0+255),f,b
  2357  000AD4  2B94               	incf	(dec_to_hex@i+1)& (0+255),f,b
  2358  000AD6                     l2570:
  2359                           
  2360                           ; BSR set to: 0
  2361  000AD6  0100               	movlb	0	; () banked
  2362  000AD8  5197               	movf	dec_to_hex@quotient& (0+255),w,b
  2363  000ADA  0100               	movlb	0	; () banked
  2364  000ADC  1198               	iorwf	(dec_to_hex@quotient+1)& (0+255),w,b
  2365  000ADE  A4D8               	btfss	status,2,c
  2366  000AE0  D78E               	goto	l2558
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;main.c: 178: }
  2370                           ;main.c: 179: return hexnum;
  2371  000AE2  C095  F068         	movff	dec_to_hex@hexnum,?_dec_to_hex
  2372  000AE6  C096  F069         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  2373                           
  2374                           ; BSR set to: 0
  2375  000AEA  0012               	return		;funcret
  2376  000AEC                     __end_of_dec_to_hex:
  2377                           	opt stack 0
  2378                           tblptru	equ	0xFF8
  2379                           tblptrh	equ	0xFF7
  2380                           tblptrl	equ	0xFF6
  2381                           tablat	equ	0xFF5
  2382                           prodh	equ	0xFF4
  2383                           prodl	equ	0xFF3
  2384                           intcon	equ	0xFF2
  2385                           intcon2	equ	0xFF1
  2386                           wreg	equ	0xFE8
  2387                           indf2	equ	0xFDF
  2388                           fsr2h	equ	0xFDA
  2389                           fsr2l	equ	0xFD9
  2390                           status	equ	0xFD8
  2391                           
  2392 ;; *************** function _pow *****************
  2393 ;; Defined at:
  2394 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  x               3   97[COMRAM] int 
  2397 ;;  y               3  100[COMRAM] int 
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  yi              4    7[BANK0 ] unsigned long 
  2400 ;;  sign            1    6[BANK0 ] unsigned char 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  3   97[COMRAM] unsigned char 
  2403 ;; Registers used:
  2404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2410 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2411 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;Total ram usage:       17 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    5
  2417 ;; This function calls:
  2418 ;;		___ftge
  2419 ;;		___ftmul
  2420 ;;		___ftneg
  2421 ;;		___fttol
  2422 ;;		___lltoft
  2423 ;;		_exp
  2424 ;;		_log
  2425 ;; This function is called by:
  2426 ;;		_dec_to_hex
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text11
  2431  0003A2                     __ptext11:
  2432                           	opt stack 0
  2433  0003A2                     _pow:
  2434                           	opt stack 22
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;incstack = 0
  2438  0003A2  0E00               	movlw	0
  2439  0003A4  0100               	movlb	0	; () banked
  2440  0003A6  6F86               	movwf	pow@sign& (0+255),b
  2441                           
  2442                           ; BSR set to: 0
  2443  0003A8  5062               	movf	pow@x,w,c
  2444  0003AA  1063               	iorwf	pow@x+1,w,c
  2445  0003AC  1064               	iorwf	pow@x+2,w,c
  2446  0003AE  A4D8               	btfss	status,2,c
  2447  0003B0  D01B               	goto	l2428
  2448                           
  2449                           ; BSR set to: 0
  2450  0003B2  0E00               	movlw	0
  2451  0003B4  6E11               	movwf	___ftge@ff1,c
  2452  0003B6  0E00               	movlw	0
  2453  0003B8  6E12               	movwf	___ftge@ff1+1,c
  2454  0003BA  0E00               	movlw	0
  2455  0003BC  6E13               	movwf	___ftge@ff1+2,c
  2456  0003BE  C065  F014         	movff	pow@y,___ftge@ff2
  2457  0003C2  C066  F015         	movff	pow@y+1,___ftge@ff2+1
  2458  0003C6  C067  F016         	movff	pow@y+2,___ftge@ff2+2
  2459  0003CA  ECF0  F009         	call	___ftge	;wreg free
  2460  0003CE  A0D8               	btfss	status,0,c
  2461  0003D0  D004               	goto	l688
  2462  0003D2  0E00               	movlw	0
  2463  0003D4  6E6D               	movwf	_errno+1,c
  2464  0003D6  0E21               	movlw	33
  2465  0003D8  6E6C               	movwf	_errno,c
  2466  0003DA                     l688:
  2467  0003DA  0E00               	movlw	0
  2468  0003DC  6E62               	movwf	?_pow,c
  2469  0003DE  0E00               	movlw	0
  2470  0003E0  6E63               	movwf	?_pow+1,c
  2471  0003E2  0E00               	movlw	0
  2472  0003E4  6E64               	movwf	?_pow+2,c
  2473  0003E6  0012               	return	
  2474  0003E8                     l2428:
  2475  0003E8  5065               	movf	pow@y,w,c
  2476  0003EA  1066               	iorwf	pow@y+1,w,c
  2477  0003EC  1067               	iorwf	pow@y+2,w,c
  2478  0003EE  A4D8               	btfss	status,2,c
  2479  0003F0  D007               	goto	l2434
  2480  0003F2  0E00               	movlw	0
  2481  0003F4  6E62               	movwf	?_pow,c
  2482  0003F6  0E80               	movlw	128
  2483  0003F8  6E63               	movwf	?_pow+1,c
  2484  0003FA  0E3F               	movlw	63
  2485  0003FC  6E64               	movwf	?_pow+2,c
  2486  0003FE  0012               	return	
  2487  000400                     l2434:
  2488  000400  AE64               	btfss	pow@x+2,7,c
  2489  000402  D042               	goto	l2446
  2490  000404  C065  F038         	movff	pow@y,___fttol@f1
  2491  000408  C066  F039         	movff	pow@y+1,___fttol@f1+1
  2492  00040C  C067  F03A         	movff	pow@y+2,___fttol@f1+2
  2493  000410  ECF4  F005         	call	___fttol	;wreg free
  2494  000414  C038  F087         	movff	?___fttol,pow@yi
  2495  000418  C039  F088         	movff	?___fttol+1,pow@yi+1
  2496  00041C  C03A  F089         	movff	?___fttol+2,pow@yi+2
  2497  000420  C03B  F08A         	movff	?___fttol+3,pow@yi+3
  2498  000424  C087  F019         	movff	pow@yi,___lltoft@c
  2499  000428  C088  F01A         	movff	pow@yi+1,___lltoft@c+1
  2500  00042C  C089  F01B         	movff	pow@yi+2,___lltoft@c+2
  2501  000430  C08A  F01C         	movff	pow@yi+3,___lltoft@c+3
  2502  000434  EC30  F00B         	call	___lltoft	;wreg free
  2503  000438  5065               	movf	pow@y,w,c
  2504  00043A  1819               	xorwf	?___lltoft,w,c
  2505  00043C  E107               	bnz	u2090
  2506  00043E  5066               	movf	pow@y+1,w,c
  2507  000440  181A               	xorwf	?___lltoft+1,w,c
  2508  000442  E104               	bnz	u2090
  2509  000444  5067               	movf	pow@y+2,w,c
  2510  000446  181B               	xorwf	?___lltoft+2,w,c
  2511  000448  B4D8               	btfsc	status,2,c
  2512  00044A  D00B               	goto	l2442
  2513  00044C                     u2090:
  2514  00044C  0E00               	movlw	0
  2515  00044E  6E6D               	movwf	_errno+1,c
  2516  000450  0E21               	movlw	33
  2517  000452  6E6C               	movwf	_errno,c
  2518  000454  0E00               	movlw	0
  2519  000456  6E62               	movwf	?_pow,c
  2520  000458  0E00               	movlw	0
  2521  00045A  6E63               	movwf	?_pow+1,c
  2522  00045C  0E00               	movlw	0
  2523  00045E  6E64               	movwf	?_pow+2,c
  2524  000460  0012               	return	
  2525  000462                     l2442:
  2526  000462  0100               	movlb	0	; () banked
  2527  000464  5187               	movf	pow@yi& (0+255),w,b
  2528  000466  0B01               	andlw	1
  2529  000468  0100               	movlb	0	; () banked
  2530  00046A  6F86               	movwf	pow@sign& (0+255),b
  2531                           
  2532                           ; BSR set to: 0
  2533  00046C  C062  F011         	movff	pow@x,___ftneg@f1
  2534  000470  C063  F012         	movff	pow@x+1,___ftneg@f1+1
  2535  000474  C064  F013         	movff	pow@x+2,___ftneg@f1+2
  2536  000478  ECA6  F00C         	call	___ftneg	;wreg free
  2537  00047C  C011  F062         	movff	?___ftneg,pow@x
  2538  000480  C012  F063         	movff	?___ftneg+1,pow@x+1
  2539  000484  C013  F064         	movff	?___ftneg+2,pow@x+2
  2540  000488                     l2446:
  2541  000488  C062  F044         	movff	pow@x,log@x
  2542  00048C  C063  F045         	movff	pow@x+1,log@x+1
  2543  000490  C064  F046         	movff	pow@x+2,log@x+2
  2544  000494  EC63  F004         	call	_log	;wreg free
  2545  000498  C044  F080         	movff	?_log,_pow$1064
  2546  00049C  C045  F081         	movff	?_log+1,_pow$1064+1
  2547  0004A0  C046  F082         	movff	?_log+2,_pow$1064+2
  2548  0004A4  C080  F01D         	movff	_pow$1064,___ftmul@f1
  2549  0004A8  C081  F01E         	movff	_pow$1064+1,___ftmul@f1+1
  2550  0004AC  C082  F01F         	movff	_pow$1064+2,___ftmul@f1+2
  2551  0004B0  C065  F020         	movff	pow@y,___ftmul@f2
  2552  0004B4  C066  F021         	movff	pow@y+1,___ftmul@f2+1
  2553  0004B8  C067  F022         	movff	pow@y+2,___ftmul@f2+2
  2554  0004BC  EC6E  F006         	call	___ftmul	;wreg free
  2555  0004C0  C01D  F083         	movff	?___ftmul,_pow$1065
  2556  0004C4  C01E  F084         	movff	?___ftmul+1,_pow$1065+1
  2557  0004C8  C01F  F085         	movff	?___ftmul+2,_pow$1065+2
  2558  0004CC  C083  F059         	movff	_pow$1065,exp@x
  2559  0004D0  C084  F05A         	movff	_pow$1065+1,exp@x+1
  2560  0004D4  C085  F05B         	movff	_pow$1065+2,exp@x+2
  2561  0004D8  EC09  F000         	call	_exp	;wreg free
  2562  0004DC  C059  F062         	movff	?_exp,pow@x
  2563  0004E0  C05A  F063         	movff	?_exp+1,pow@x+1
  2564  0004E4  C05B  F064         	movff	?_exp+2,pow@x+2
  2565  0004E8  0100               	movlb	0	; () banked
  2566  0004EA  5186               	movf	pow@sign& (0+255),w,b
  2567  0004EC  0100               	movlb	0	; () banked
  2568  0004EE  B4D8               	btfsc	status,2,c
  2569  0004F0  D00F               	goto	l693
  2570                           
  2571                           ; BSR set to: 0
  2572  0004F2  C062  F011         	movff	pow@x,___ftneg@f1
  2573  0004F6  C063  F012         	movff	pow@x+1,___ftneg@f1+1
  2574  0004FA  C064  F013         	movff	pow@x+2,___ftneg@f1+2
  2575  0004FE  ECA6  F00C         	call	___ftneg	;wreg free
  2576  000502  C011  F062         	movff	?___ftneg,?_pow
  2577  000506  C012  F063         	movff	?___ftneg+1,?_pow+1
  2578  00050A  C013  F064         	movff	?___ftneg+2,?_pow+2
  2579  00050E  0012               	return	
  2580  000510                     l693:
  2581                           
  2582                           ; BSR set to: 0
  2583  000510  C062  F062         	movff	pow@x,?_pow
  2584  000514  C063  F063         	movff	pow@x+1,?_pow+1
  2585  000518  C064  F064         	movff	pow@x+2,?_pow+2
  2586  00051C  0012               	return		;funcret
  2587  00051E                     __end_of_pow:
  2588                           	opt stack 0
  2589                           tblptru	equ	0xFF8
  2590                           tblptrh	equ	0xFF7
  2591                           tblptrl	equ	0xFF6
  2592                           tablat	equ	0xFF5
  2593                           prodh	equ	0xFF4
  2594                           prodl	equ	0xFF3
  2595                           intcon	equ	0xFF2
  2596                           intcon2	equ	0xFF1
  2597                           wreg	equ	0xFE8
  2598                           indf2	equ	0xFDF
  2599                           fsr2h	equ	0xFDA
  2600                           fsr2l	equ	0xFD9
  2601                           status	equ	0xFD8
  2602                           
  2603 ;; *************** function _log *****************
  2604 ;; Defined at:
  2605 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;  x               3   67[COMRAM] unsigned char 
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  exponent        2   70[COMRAM] int 
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  3   67[COMRAM] int 
  2612 ;; Registers used:
  2613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2619 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2622 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;Total ram usage:        5 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    4
  2626 ;; This function calls:
  2627 ;;		___awtoft
  2628 ;;		___ftadd
  2629 ;;		___ftmul
  2630 ;;		_eval_poly
  2631 ;;		_frexp
  2632 ;; This function is called by:
  2633 ;;		_pow
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text12
  2638  0008C6                     __ptext12:
  2639                           	opt stack 0
  2640  0008C6                     _log:
  2641                           	opt stack 22
  2642                           
  2643                           ;incstack = 0
  2644  0008C6  AE46               	btfss	log@x+2,7,c
  2645  0008C8  D00B               	goto	l2358
  2646  0008CA  0E00               	movlw	0
  2647  0008CC  6E6D               	movwf	_errno+1,c
  2648  0008CE  0E21               	movlw	33
  2649  0008D0  6E6C               	movwf	_errno,c
  2650  0008D2  0E00               	movlw	0
  2651  0008D4  6E44               	movwf	?_log,c
  2652  0008D6  0E00               	movlw	0
  2653  0008D8  6E45               	movwf	?_log+1,c
  2654  0008DA  0E00               	movlw	0
  2655  0008DC  6E46               	movwf	?_log+2,c
  2656  0008DE  0012               	return	
  2657  0008E0                     l2358:
  2658  0008E0  5044               	movf	log@x,w,c
  2659  0008E2  1045               	iorwf	log@x+1,w,c
  2660  0008E4  1046               	iorwf	log@x+2,w,c
  2661  0008E6  A4D8               	btfss	status,2,c
  2662  0008E8  D00B               	goto	l2364
  2663  0008EA  0E00               	movlw	0
  2664  0008EC  6E6D               	movwf	_errno+1,c
  2665  0008EE  0E22               	movlw	34
  2666  0008F0  6E6C               	movwf	_errno,c
  2667  0008F2  0E00               	movlw	0
  2668  0008F4  6E44               	movwf	?_log,c
  2669  0008F6  0E00               	movlw	0
  2670  0008F8  6E45               	movwf	?_log+1,c
  2671  0008FA  0E00               	movlw	0
  2672  0008FC  6E46               	movwf	?_log+2,c
  2673  0008FE  0012               	return	
  2674  000900                     l2364:
  2675  000900  0E00               	movlw	0
  2676  000902  6E20               	movwf	___ftmul@f2,c
  2677  000904  0E00               	movlw	0
  2678  000906  6E21               	movwf	___ftmul@f2+1,c
  2679  000908  0E40               	movlw	64
  2680  00090A  6E22               	movwf	___ftmul@f2+2,c
  2681  00090C  0E47               	movlw	low log@exponent
  2682  00090E  6E14               	movwf	frexp@eptr,c
  2683  000910  0E00               	movlw	high log@exponent
  2684  000912  6E15               	movwf	frexp@eptr+1,c
  2685  000914  C044  F011         	movff	log@x,frexp@value
  2686  000918  C045  F012         	movff	log@x+1,frexp@value+1
  2687  00091C  C046  F013         	movff	log@x+2,frexp@value+2
  2688  000920  ECA8  F009         	call	_frexp	;wreg free
  2689  000924  C011  F01D         	movff	?_frexp,___ftmul@f1
  2690  000928  C012  F01E         	movff	?_frexp+1,___ftmul@f1+1
  2691  00092C  C013  F01F         	movff	?_frexp+2,___ftmul@f1+2
  2692  000930  EC6E  F006         	call	___ftmul	;wreg free
  2693  000934  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  2694  000938  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  2695  00093C  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  2696  000940  0E00               	movlw	0
  2697  000942  6E2F               	movwf	___ftadd@f2,c
  2698  000944  0E80               	movlw	128
  2699  000946  6E30               	movwf	___ftadd@f2+1,c
  2700  000948  0EBF               	movlw	191
  2701  00094A  6E31               	movwf	___ftadd@f2+2,c
  2702  00094C  ECFB  F000         	call	___ftadd	;wreg free
  2703  000950  C02C  F044         	movff	?___ftadd,log@x
  2704  000954  C02D  F045         	movff	?___ftadd+1,log@x+1
  2705  000958  C02E  F046         	movff	?___ftadd+2,log@x+2
  2706  00095C  0647               	decf	log@exponent,f,c
  2707  00095E  A0D8               	btfss	status,0,c
  2708  000960  0648               	decf	log@exponent+1,f,c
  2709  000962  C044  F038         	movff	log@x,eval_poly@x
  2710  000966  C045  F039         	movff	log@x+1,eval_poly@x+1
  2711  00096A  C046  F03A         	movff	log@x+2,eval_poly@x+2
  2712  00096E  0E3D               	movlw	low log@coeff
  2713  000970  6E3B               	movwf	eval_poly@d,c
  2714  000972  0EFC               	movlw	high log@coeff
  2715  000974  6E3C               	movwf	eval_poly@d+1,c
  2716  000976  0E00               	movlw	0
  2717  000978  6E3E               	movwf	eval_poly@n+1,c
  2718  00097A  0E08               	movlw	8
  2719  00097C  6E3D               	movwf	eval_poly@n,c
  2720  00097E  ECCA  F007         	call	_eval_poly	;wreg free
  2721  000982  C038  F044         	movff	?_eval_poly,log@x
  2722  000986  C039  F045         	movff	?_eval_poly+1,log@x+1
  2723  00098A  C03A  F046         	movff	?_eval_poly+2,log@x+2
  2724  00098E  0E72               	movlw	114
  2725  000990  6E20               	movwf	___ftmul@f2,c
  2726  000992  0E31               	movlw	49
  2727  000994  6E21               	movwf	___ftmul@f2+1,c
  2728  000996  0E3F               	movlw	63
  2729  000998  6E22               	movwf	___ftmul@f2+2,c
  2730  00099A  C047  F019         	movff	log@exponent,___awtoft@c
  2731  00099E  C048  F01A         	movff	log@exponent+1,___awtoft@c+1
  2732  0009A2  EC64  F00C         	call	___awtoft	;wreg free
  2733  0009A6  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2734  0009AA  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2735  0009AE  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2736  0009B2  EC6E  F006         	call	___ftmul	;wreg free
  2737  0009B6  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  2738  0009BA  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  2739  0009BE  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  2740  0009C2  C044  F02F         	movff	log@x,___ftadd@f2
  2741  0009C6  C045  F030         	movff	log@x+1,___ftadd@f2+1
  2742  0009CA  C046  F031         	movff	log@x+2,___ftadd@f2+2
  2743  0009CE  ECFB  F000         	call	___ftadd	;wreg free
  2744  0009D2  C02C  F044         	movff	?___ftadd,?_log
  2745  0009D6  C02D  F045         	movff	?___ftadd+1,?_log+1
  2746  0009DA  C02E  F046         	movff	?___ftadd+2,?_log+2
  2747  0009DE  0012               	return	
  2748  0009E0                     __end_of_log:
  2749                           	opt stack 0
  2750                           tblptru	equ	0xFF8
  2751                           tblptrh	equ	0xFF7
  2752                           tblptrl	equ	0xFF6
  2753                           tablat	equ	0xFF5
  2754                           prodh	equ	0xFF4
  2755                           prodl	equ	0xFF3
  2756                           intcon	equ	0xFF2
  2757                           intcon2	equ	0xFF1
  2758                           wreg	equ	0xFE8
  2759                           indf2	equ	0xFDF
  2760                           fsr2h	equ	0xFDA
  2761                           fsr2l	equ	0xFD9
  2762                           status	equ	0xFD8
  2763                           
  2764 ;; *************** function _exp *****************
  2765 ;; Defined at:
  2766 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;  x               3   88[COMRAM] int 
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;  exponent        2   94[COMRAM] int 
  2771 ;;  sign            1   96[COMRAM] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  3   88[COMRAM] unsigned char 
  2774 ;; Registers used:
  2775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2781 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2782 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;Total ram usage:        9 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    4
  2788 ;; This function calls:
  2789 ;;		___awtoft
  2790 ;;		___ftdiv
  2791 ;;		___ftge
  2792 ;;		___ftmul
  2793 ;;		___ftneg
  2794 ;;		___ftsub
  2795 ;;		___fttol
  2796 ;;		_eval_poly
  2797 ;;		_floor
  2798 ;;		_ldexp
  2799 ;; This function is called by:
  2800 ;;		_pow
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text13
  2805  000012                     __ptext13:
  2806                           	opt stack 0
  2807  000012                     _exp:
  2808                           	opt stack 22
  2809                           
  2810                           ;incstack = 0
  2811  000012  5059               	movf	exp@x,w,c
  2812  000014  105A               	iorwf	exp@x+1,w,c
  2813  000016  105B               	iorwf	exp@x+2,w,c
  2814  000018  A4D8               	btfss	status,2,c
  2815  00001A  D007               	goto	l2380
  2816  00001C  0E00               	movlw	0
  2817  00001E  6E59               	movwf	?_exp,c
  2818  000020  0E80               	movlw	128
  2819  000022  6E5A               	movwf	?_exp+1,c
  2820  000024  0E3F               	movlw	63
  2821  000026  6E5B               	movwf	?_exp+2,c
  2822  000028  0012               	return	
  2823  00002A                     l2380:
  2824  00002A  0E72               	movlw	114
  2825  00002C  6E11               	movwf	___ftge@ff1,c
  2826  00002E  0E31               	movlw	49
  2827  000030  6E12               	movwf	___ftge@ff1+1,c
  2828  000032  0E44               	movlw	68
  2829  000034  6E13               	movwf	___ftge@ff1+2,c
  2830  000036  C059  F014         	movff	exp@x,___ftge@ff2
  2831  00003A  C05A  F015         	movff	exp@x+1,___ftge@ff2+1
  2832  00003E  C05B  F016         	movff	exp@x+2,___ftge@ff2+2
  2833  000042  ECF0  F009         	call	___ftge	;wreg free
  2834  000046  B0D8               	btfsc	status,0,c
  2835  000048  D00B               	goto	l2386
  2836  00004A  0E00               	movlw	0
  2837  00004C  6E6D               	movwf	_errno+1,c
  2838  00004E  0E22               	movlw	34
  2839  000050  6E6C               	movwf	_errno,c
  2840  000052  0EFF               	movlw	255
  2841  000054  6E59               	movwf	?_exp,c
  2842  000056  0E7F               	movlw	127
  2843  000058  6E5A               	movwf	?_exp+1,c
  2844  00005A  0E7F               	movlw	127
  2845  00005C  6E5B               	movwf	?_exp+2,c
  2846  00005E  0012               	return	
  2847  000060                     l2386:
  2848  000060  C059  F011         	movff	exp@x,___ftge@ff1
  2849  000064  C05A  F012         	movff	exp@x+1,___ftge@ff1+1
  2850  000068  C05B  F013         	movff	exp@x+2,___ftge@ff1+2
  2851  00006C  0E49               	movlw	73
  2852  00006E  6E14               	movwf	___ftge@ff2,c
  2853  000070  0E3A               	movlw	58
  2854  000072  6E15               	movwf	___ftge@ff2+1,c
  2855  000074  0EC4               	movlw	196
  2856  000076  6E16               	movwf	___ftge@ff2+2,c
  2857  000078  ECF0  F009         	call	___ftge	;wreg free
  2858  00007C  B0D8               	btfsc	status,0,c
  2859  00007E  D00B               	goto	l2392
  2860  000080  0E00               	movlw	0
  2861  000082  6E6D               	movwf	_errno+1,c
  2862  000084  0E22               	movlw	34
  2863  000086  6E6C               	movwf	_errno,c
  2864  000088  0E00               	movlw	0
  2865  00008A  6E59               	movwf	?_exp,c
  2866  00008C  0E00               	movlw	0
  2867  00008E  6E5A               	movwf	?_exp+1,c
  2868  000090  0E00               	movlw	0
  2869  000092  6E5B               	movwf	?_exp+2,c
  2870  000094  0012               	return	
  2871  000096                     l2392:
  2872  000096  AE5B               	btfss	exp@x+2,7,c
  2873  000098  D002               	goto	u2000
  2874  00009A  0E01               	movlw	1
  2875  00009C  D001               	goto	u2010
  2876  00009E                     u2000:
  2877  00009E  0E00               	movlw	0
  2878  0000A0                     u2010:
  2879  0000A0  6E61               	movwf	exp@sign,c
  2880  0000A2  5061               	movf	exp@sign,w,c
  2881  0000A4  B4D8               	btfsc	status,2,c
  2882  0000A6  D00E               	goto	l851
  2883  0000A8  C059  F011         	movff	exp@x,___ftneg@f1
  2884  0000AC  C05A  F012         	movff	exp@x+1,___ftneg@f1+1
  2885  0000B0  C05B  F013         	movff	exp@x+2,___ftneg@f1+2
  2886  0000B4  ECA6  F00C         	call	___ftneg	;wreg free
  2887  0000B8  C011  F059         	movff	?___ftneg,exp@x
  2888  0000BC  C012  F05A         	movff	?___ftneg+1,exp@x+1
  2889  0000C0  C013  F05B         	movff	?___ftneg+2,exp@x+2
  2890  0000C4                     l851:
  2891  0000C4  C059  F01D         	movff	exp@x,___ftmul@f1
  2892  0000C8  C05A  F01E         	movff	exp@x+1,___ftmul@f1+1
  2893  0000CC  C05B  F01F         	movff	exp@x+2,___ftmul@f1+2
  2894  0000D0  0EAA               	movlw	170
  2895  0000D2  6E20               	movwf	___ftmul@f2,c
  2896  0000D4  0EB8               	movlw	184
  2897  0000D6  6E21               	movwf	___ftmul@f2+1,c
  2898  0000D8  0E3F               	movlw	63
  2899  0000DA  6E22               	movwf	___ftmul@f2+2,c
  2900  0000DC  EC6E  F006         	call	___ftmul	;wreg free
  2901  0000E0  C01D  F059         	movff	?___ftmul,exp@x
  2902  0000E4  C01E  F05A         	movff	?___ftmul+1,exp@x+1
  2903  0000E8  C01F  F05B         	movff	?___ftmul+2,exp@x+2
  2904  0000EC  C059  F051         	movff	exp@x,floor@x
  2905  0000F0  C05A  F052         	movff	exp@x+1,floor@x+1
  2906  0000F4  C05B  F053         	movff	exp@x+2,floor@x+2
  2907  0000F8  EC5B  F007         	call	_floor	;wreg free
  2908  0000FC  C051  F05C         	movff	?_floor,_exp$1066
  2909  000100  C052  F05D         	movff	?_floor+1,_exp$1066+1
  2910  000104  C053  F05E         	movff	?_floor+2,_exp$1066+2
  2911  000108  C05C  F038         	movff	_exp$1066,___fttol@f1
  2912  00010C  C05D  F039         	movff	_exp$1066+1,___fttol@f1+1
  2913  000110  C05E  F03A         	movff	_exp$1066+2,___fttol@f1+2
  2914  000114  ECF4  F005         	call	___fttol	;wreg free
  2915  000118  C038  F05F         	movff	?___fttol,exp@exponent
  2916  00011C  C039  F060         	movff	?___fttol+1,exp@exponent+1
  2917  000120  C059  F038         	movff	exp@x,___ftsub@f1
  2918  000124  C05A  F039         	movff	exp@x+1,___ftsub@f1+1
  2919  000128  C05B  F03A         	movff	exp@x+2,___ftsub@f1+2
  2920  00012C  C05F  F019         	movff	exp@exponent,___awtoft@c
  2921  000130  C060  F01A         	movff	exp@exponent+1,___awtoft@c+1
  2922  000134  EC64  F00C         	call	___awtoft	;wreg free
  2923  000138  C019  F03B         	movff	?___awtoft,___ftsub@f2
  2924  00013C  C01A  F03C         	movff	?___awtoft+1,___ftsub@f2+1
  2925  000140  C01B  F03D         	movff	?___awtoft+2,___ftsub@f2+2
  2926  000144  EC44  F00C         	call	___ftsub	;wreg free
  2927  000148  C038  F059         	movff	?___ftsub,exp@x
  2928  00014C  C039  F05A         	movff	?___ftsub+1,exp@x+1
  2929  000150  C03A  F05B         	movff	?___ftsub+2,exp@x+2
  2930  000154  C059  F038         	movff	exp@x,eval_poly@x
  2931  000158  C05A  F039         	movff	exp@x+1,eval_poly@x+1
  2932  00015C  C05B  F03A         	movff	exp@x+2,eval_poly@x+2
  2933  000160  0E1F               	movlw	low exp@coeff
  2934  000162  6E3B               	movwf	eval_poly@d,c
  2935  000164  0EFC               	movlw	high exp@coeff
  2936  000166  6E3C               	movwf	eval_poly@d+1,c
  2937  000168  0E00               	movlw	0
  2938  00016A  6E3E               	movwf	eval_poly@n+1,c
  2939  00016C  0E09               	movlw	9
  2940  00016E  6E3D               	movwf	eval_poly@n,c
  2941  000170  ECCA  F007         	call	_eval_poly	;wreg free
  2942  000174  C038  F044         	movff	?_eval_poly,ldexp@value
  2943  000178  C039  F045         	movff	?_eval_poly+1,ldexp@value+1
  2944  00017C  C03A  F046         	movff	?_eval_poly+2,ldexp@value+2
  2945  000180  C05F  F047         	movff	exp@exponent,ldexp@newexp
  2946  000184  C060  F048         	movff	exp@exponent+1,ldexp@newexp+1
  2947  000188  EC97  F008         	call	_ldexp	;wreg free
  2948  00018C  C044  F059         	movff	?_ldexp,exp@x
  2949  000190  C045  F05A         	movff	?_ldexp+1,exp@x+1
  2950  000194  C046  F05B         	movff	?_ldexp+2,exp@x+2
  2951  000198  5061               	movf	exp@sign,w,c
  2952  00019A  B4D8               	btfsc	status,2,c
  2953  00019C  D025               	goto	l852
  2954  00019E  2859               	incf	exp@x,w,c
  2955  0001A0  E10E               	bnz	l2414
  2956  0001A2  0E7F               	movlw	127
  2957  0001A4  185A               	xorwf	exp@x+1,w,c
  2958  0001A6  E10B               	bnz	l2414
  2959  0001A8  0E7F               	movlw	127
  2960  0001AA  185B               	xorwf	exp@x+2,w,c
  2961  0001AC  A4D8               	btfss	status,2,c
  2962  0001AE  D007               	goto	l2414
  2963  0001B0  0E00               	movlw	0
  2964  0001B2  6E59               	movwf	?_exp,c
  2965  0001B4  0E00               	movlw	0
  2966  0001B6  6E5A               	movwf	?_exp+1,c
  2967  0001B8  0E00               	movlw	0
  2968  0001BA  6E5B               	movwf	?_exp+2,c
  2969  0001BC  0012               	return	
  2970  0001BE                     l2414:
  2971  0001BE  0E00               	movlw	0
  2972  0001C0  6E19               	movwf	___ftdiv@f1,c
  2973  0001C2  0E80               	movlw	128
  2974  0001C4  6E1A               	movwf	___ftdiv@f1+1,c
  2975  0001C6  0E3F               	movlw	63
  2976  0001C8  6E1B               	movwf	___ftdiv@f1+2,c
  2977  0001CA  C059  F01C         	movff	exp@x,___ftdiv@f2
  2978  0001CE  C05A  F01D         	movff	exp@x+1,___ftdiv@f2+1
  2979  0001D2  C05B  F01E         	movff	exp@x+2,___ftdiv@f2+2
  2980  0001D6  ECE8  F006         	call	___ftdiv	;wreg free
  2981  0001DA  C019  F059         	movff	?___ftdiv,?_exp
  2982  0001DE  C01A  F05A         	movff	?___ftdiv+1,?_exp+1
  2983  0001E2  C01B  F05B         	movff	?___ftdiv+2,?_exp+2
  2984  0001E6  0012               	return	
  2985  0001E8                     l852:
  2986  0001E8  C059  F059         	movff	exp@x,?_exp
  2987  0001EC  C05A  F05A         	movff	exp@x+1,?_exp+1
  2988  0001F0  C05B  F05B         	movff	exp@x+2,?_exp+2
  2989  0001F4  0012               	return		;funcret
  2990  0001F6                     __end_of_exp:
  2991                           	opt stack 0
  2992                           tblptru	equ	0xFF8
  2993                           tblptrh	equ	0xFF7
  2994                           tblptrl	equ	0xFF6
  2995                           tablat	equ	0xFF5
  2996                           prodh	equ	0xFF4
  2997                           prodl	equ	0xFF3
  2998                           intcon	equ	0xFF2
  2999                           intcon2	equ	0xFF1
  3000                           wreg	equ	0xFE8
  3001                           indf2	equ	0xFDF
  3002                           fsr2h	equ	0xFDA
  3003                           fsr2l	equ	0xFD9
  3004                           status	equ	0xFD8
  3005                           
  3006 ;; *************** function _ldexp *****************
  3007 ;; Defined at:
  3008 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  3009 ;; Parameters:    Size  Location     Type
  3010 ;;  value           3   67[COMRAM] unsigned char 
  3011 ;;  newexp          2   70[COMRAM] int 
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;		None
  3014 ;; Return value:  Size  Location     Type
  3015 ;;                  3   67[COMRAM] int 
  3016 ;; Registers used:
  3017 ;;		wreg, status,2, status,0
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3023 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3025 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3026 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;Total ram usage:        7 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    1
  3030 ;; This function calls:
  3031 ;;		Nothing
  3032 ;; This function is called by:
  3033 ;;		_exp
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text14
  3038  00112E                     __ptext14:
  3039                           	opt stack 0
  3040  00112E                     _ldexp:
  3041                           	opt stack 24
  3042                           
  3043                           ;incstack = 0
  3044  00112E  5044               	movf	ldexp@value,w,c
  3045  001130  1045               	iorwf	ldexp@value+1,w,c
  3046  001132  1046               	iorwf	ldexp@value+2,w,c
  3047  001134  A4D8               	btfss	status,2,c
  3048  001136  D007               	goto	l2312
  3049  001138  0E00               	movlw	0
  3050  00113A  6E44               	movwf	?_ldexp,c
  3051  00113C  0E00               	movlw	0
  3052  00113E  6E45               	movwf	?_ldexp+1,c
  3053  001140  0E00               	movlw	0
  3054  001142  6E46               	movwf	?_ldexp+2,c
  3055  001144  0012               	return	
  3056  001146                     l2312:
  3057  001146  5046               	movf	ldexp@value+2,w,c
  3058  001148  0B7F               	andlw	127
  3059  00114A  6E49               	movwf	??_ldexp& (0+255),c
  3060  00114C  6A4A               	clrf	(??_ldexp+1)& (0+255),c
  3061  00114E  90D8               	bcf	status,0,c
  3062  001150  3649               	rlcf	??_ldexp,f,c
  3063  001152  364A               	rlcf	??_ldexp+1,f,c
  3064  001154  5049               	movf	??_ldexp,w,c
  3065  001156  2647               	addwf	ldexp@newexp,f,c
  3066  001158  504A               	movf	??_ldexp+1,w,c
  3067  00115A  2248               	addwfc	ldexp@newexp+1,f,c
  3068  00115C  AE45               	btfss	ldexp@value+1,7,c
  3069  00115E  D003               	goto	u1900
  3070  001160  6A49               	clrf	??_ldexp& (0+255),c
  3071  001162  2A49               	incf	??_ldexp& (0+255),f,c
  3072  001164  D001               	goto	u1908
  3073  001166                     u1900:
  3074  001166  6A49               	clrf	??_ldexp& (0+255),c
  3075  001168                     u1908:
  3076  001168  5049               	movf	??_ldexp,w,c
  3077  00116A  2647               	addwf	ldexp@newexp,f,c
  3078  00116C  0E00               	movlw	0
  3079  00116E  2248               	addwfc	ldexp@newexp+1,f,c
  3080  001170  AE48               	btfss	ldexp@newexp+1,7,c
  3081  001172  D00B               	goto	l2320
  3082  001174  0E00               	movlw	0
  3083  001176  6E6D               	movwf	_errno+1,c
  3084  001178  0E22               	movlw	34
  3085  00117A  6E6C               	movwf	_errno,c
  3086  00117C  0E00               	movlw	0
  3087  00117E  6E44               	movwf	?_ldexp,c
  3088  001180  0E00               	movlw	0
  3089  001182  6E45               	movwf	?_ldexp+1,c
  3090  001184  0E00               	movlw	0
  3091  001186                     L1:
  3092  001186  6E46               	movwf	?_ldexp+2,c
  3093  001188  0012               	return	
  3094  00118A                     l2320:
  3095  00118A  BE48               	btfsc	ldexp@newexp+1,7,c
  3096  00118C  D015               	goto	l2336
  3097  00118E  0448               	decf	ldexp@newexp+1,w,c
  3098  001190  A0D8               	btfss	status,0,c
  3099  001192  D012               	goto	l2336
  3100  001194  0E00               	movlw	0
  3101  001196  6E6D               	movwf	_errno+1,c
  3102  001198  0E22               	movlw	34
  3103  00119A  6E6C               	movwf	_errno,c
  3104  00119C  AE46               	btfss	ldexp@value+2,7,c
  3105  00119E  D006               	goto	l2332
  3106  0011A0  0EFF               	movlw	255
  3107  0011A2  6E44               	movwf	?_ldexp,c
  3108  0011A4  0E7F               	movlw	127
  3109  0011A6  6E45               	movwf	?_ldexp+1,c
  3110  0011A8  0EFF               	movlw	255
  3111  0011AA  D7ED               	goto	L1
  3112  0011AC                     l2332:
  3113  0011AC  0EFF               	movlw	255
  3114  0011AE  6E44               	movwf	?_ldexp,c
  3115  0011B0  0E7F               	movlw	127
  3116  0011B2  6E45               	movwf	?_ldexp+1,c
  3117  0011B4  0E7F               	movlw	127
  3118  0011B6  D7E7               	goto	L1
  3119  0011B8                     l2336:
  3120  0011B8  3448               	rlcf	ldexp@newexp+1,w,c
  3121  0011BA  3048               	rrcf	ldexp@newexp+1,w,c
  3122  0011BC  6E4A               	movwf	(??_ldexp+1)& (0+255),c
  3123  0011BE  3047               	rrcf	ldexp@newexp,w,c
  3124  0011C0  6E49               	movwf	??_ldexp& (0+255),c
  3125  0011C2  5046               	movf	ldexp@value+2,w,c
  3126  0011C4  1849               	xorwf	??_ldexp,w,c
  3127  0011C6  0B80               	andlw	-128
  3128  0011C8  1849               	xorwf	??_ldexp,w,c
  3129  0011CA  6E46               	movwf	ldexp@value+2,c
  3130  0011CC  C047  F049         	movff	ldexp@newexp,??_ldexp
  3131  0011D0  0E01               	movlw	1
  3132  0011D2  1649               	andwf	??_ldexp,f,c
  3133  0011D4  3249               	rrcf	??_ldexp,f,c
  3134  0011D6  3249               	rrcf	??_ldexp,f,c
  3135  0011D8  5045               	movf	ldexp@value+1,w,c
  3136  0011DA  1849               	xorwf	??_ldexp,w,c
  3137  0011DC  0B7F               	andlw	-129
  3138  0011DE  1849               	xorwf	??_ldexp,w,c
  3139  0011E0  6E45               	movwf	ldexp@value+1,c
  3140  0011E2  C044  F044         	movff	ldexp@value,?_ldexp
  3141  0011E6  C045  F045         	movff	ldexp@value+1,?_ldexp+1
  3142  0011EA  C046  F046         	movff	ldexp@value+2,?_ldexp+2
  3143  0011EE  0012               	return	
  3144  0011F0                     __end_of_ldexp:
  3145                           	opt stack 0
  3146                           tblptru	equ	0xFF8
  3147                           tblptrh	equ	0xFF7
  3148                           tblptrl	equ	0xFF6
  3149                           tablat	equ	0xFF5
  3150                           prodh	equ	0xFF4
  3151                           prodl	equ	0xFF3
  3152                           intcon	equ	0xFF2
  3153                           intcon2	equ	0xFF1
  3154                           wreg	equ	0xFE8
  3155                           indf2	equ	0xFDF
  3156                           fsr2h	equ	0xFDA
  3157                           fsr2l	equ	0xFD9
  3158                           status	equ	0xFD8
  3159                           
  3160 ;; *************** function _floor *****************
  3161 ;; Defined at:
  3162 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;  x               3   80[COMRAM] int 
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;  i               3   83[COMRAM] int 
  3167 ;;  expon           2   86[COMRAM] int 
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  3   80[COMRAM] int 
  3170 ;; Registers used:
  3171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3177 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3178 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3180 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;Total ram usage:        8 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    3
  3184 ;; This function calls:
  3185 ;;		___altoft
  3186 ;;		___ftadd
  3187 ;;		___ftge
  3188 ;;		___fttol
  3189 ;;		_frexp
  3190 ;; This function is called by:
  3191 ;;		_exp
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           	psect	text15
  3196  000EB6                     __ptext15:
  3197                           	opt stack 0
  3198  000EB6                     _floor:
  3199                           	opt stack 22
  3200                           
  3201                           ;incstack = 0
  3202  000EB6  C051  F011         	movff	floor@x,frexp@value
  3203  000EBA  C052  F012         	movff	floor@x+1,frexp@value+1
  3204  000EBE  C053  F013         	movff	floor@x+2,frexp@value+2
  3205  000EC2  0E57               	movlw	low floor@expon
  3206  000EC4  6E14               	movwf	frexp@eptr,c
  3207  000EC6  0E00               	movlw	high floor@expon
  3208  000EC8  6E15               	movwf	frexp@eptr+1,c
  3209  000ECA  ECA8  F009         	call	_frexp	;wreg free
  3210  000ECE  AE58               	btfss	floor@expon+1,7,c
  3211  000ED0  D010               	goto	l2290
  3212  000ED2  AE53               	btfss	floor@x+2,7,c
  3213  000ED4  D007               	goto	l2286
  3214  000ED6  0E00               	movlw	0
  3215  000ED8  6E51               	movwf	?_floor,c
  3216  000EDA  0E80               	movlw	128
  3217  000EDC  6E52               	movwf	?_floor+1,c
  3218  000EDE  0EBF               	movlw	191
  3219  000EE0  6E53               	movwf	?_floor+2,c
  3220  000EE2  0012               	return	
  3221  000EE4                     l2286:
  3222  000EE4  0E00               	movlw	0
  3223  000EE6  6E51               	movwf	?_floor,c
  3224  000EE8  0E00               	movlw	0
  3225  000EEA  6E52               	movwf	?_floor+1,c
  3226  000EEC  0E00               	movlw	0
  3227  000EEE  6E53               	movwf	?_floor+2,c
  3228  000EF0  0012               	return	
  3229  000EF2                     l2290:
  3230  000EF2  5058               	movf	floor@expon+1,w,c
  3231  000EF4  E104               	bnz	u1860
  3232  000EF6  0E15               	movlw	21
  3233  000EF8  5C57               	subwf	floor@expon,w,c
  3234  000EFA  A0D8               	btfss	status,0,c
  3235  000EFC  D007               	goto	l2294
  3236  000EFE                     u1860:
  3237  000EFE  C051  F051         	movff	floor@x,?_floor
  3238  000F02  C052  F052         	movff	floor@x+1,?_floor+1
  3239  000F06  C053  F053         	movff	floor@x+2,?_floor+2
  3240  000F0A  0012               	return	
  3241  000F0C                     l2294:
  3242  000F0C  C051  F038         	movff	floor@x,___fttol@f1
  3243  000F10  C052  F039         	movff	floor@x+1,___fttol@f1+1
  3244  000F14  C053  F03A         	movff	floor@x+2,___fttol@f1+2
  3245  000F18  ECF4  F005         	call	___fttol	;wreg free
  3246  000F1C  C038  F047         	movff	?___fttol,___altoft@c
  3247  000F20  C039  F048         	movff	?___fttol+1,___altoft@c+1
  3248  000F24  C03A  F049         	movff	?___fttol+2,___altoft@c+2
  3249  000F28  C03B  F04A         	movff	?___fttol+3,___altoft@c+3
  3250  000F2C  ECBB  F00A         	call	___altoft	;wreg free
  3251  000F30  C047  F054         	movff	?___altoft,floor@i
  3252  000F34  C048  F055         	movff	?___altoft+1,floor@i+1
  3253  000F38  C049  F056         	movff	?___altoft+2,floor@i+2
  3254  000F3C  C051  F011         	movff	floor@x,___ftge@ff1
  3255  000F40  C052  F012         	movff	floor@x+1,___ftge@ff1+1
  3256  000F44  C053  F013         	movff	floor@x+2,___ftge@ff1+2
  3257  000F48  C054  F014         	movff	floor@i,___ftge@ff2
  3258  000F4C  C055  F015         	movff	floor@i+1,___ftge@ff2+1
  3259  000F50  C056  F016         	movff	floor@i+2,___ftge@ff2+2
  3260  000F54  ECF0  F009         	call	___ftge	;wreg free
  3261  000F58  B0D8               	btfsc	status,0,c
  3262  000F5A  D015               	goto	l862
  3263  000F5C  C054  F02C         	movff	floor@i,___ftadd@f1
  3264  000F60  C055  F02D         	movff	floor@i+1,___ftadd@f1+1
  3265  000F64  C056  F02E         	movff	floor@i+2,___ftadd@f1+2
  3266  000F68  0E00               	movlw	0
  3267  000F6A  6E2F               	movwf	___ftadd@f2,c
  3268  000F6C  0E80               	movlw	128
  3269  000F6E  6E30               	movwf	___ftadd@f2+1,c
  3270  000F70  0EBF               	movlw	191
  3271  000F72  6E31               	movwf	___ftadd@f2+2,c
  3272  000F74  ECFB  F000         	call	___ftadd	;wreg free
  3273  000F78  C02C  F051         	movff	?___ftadd,?_floor
  3274  000F7C  C02D  F052         	movff	?___ftadd+1,?_floor+1
  3275  000F80  C02E  F053         	movff	?___ftadd+2,?_floor+2
  3276  000F84  0012               	return	
  3277  000F86                     l862:
  3278  000F86  C054  F051         	movff	floor@i,?_floor
  3279  000F8A  C055  F052         	movff	floor@i+1,?_floor+1
  3280  000F8E  C056  F053         	movff	floor@i+2,?_floor+2
  3281  000F92  0012               	return		;funcret
  3282  000F94                     __end_of_floor:
  3283                           	opt stack 0
  3284                           tblptru	equ	0xFF8
  3285                           tblptrh	equ	0xFF7
  3286                           tblptrl	equ	0xFF6
  3287                           tablat	equ	0xFF5
  3288                           prodh	equ	0xFF4
  3289                           prodl	equ	0xFF3
  3290                           intcon	equ	0xFF2
  3291                           intcon2	equ	0xFF1
  3292                           wreg	equ	0xFE8
  3293                           indf2	equ	0xFDF
  3294                           fsr2h	equ	0xFDA
  3295                           fsr2l	equ	0xFD9
  3296                           status	equ	0xFD8
  3297                           
  3298 ;; *************** function _frexp *****************
  3299 ;; Defined at:
  3300 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;  value           3   16[COMRAM] int 
  3303 ;;  eptr            2   19[COMRAM] PTR int 
  3304 ;;		 -> log@exponent(2), floor@expon(2), 
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;		None
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  3   16[COMRAM] PTR int 
  3309 ;; Registers used:
  3310 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3316 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3320 ;;Total ram usage:        7 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    1
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_floor
  3327 ;;		_log
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           	psect	text16
  3332  001350                     __ptext16:
  3333                           	opt stack 0
  3334  001350                     _frexp:
  3335                           	opt stack 24
  3336                           
  3337                           ;incstack = 0
  3338  001350  5011               	movf	frexp@value,w,c
  3339  001352  1012               	iorwf	frexp@value+1,w,c
  3340  001354  1013               	iorwf	frexp@value+2,w,c
  3341  001356  A4D8               	btfss	status,2,c
  3342  001358  D00F               	goto	l2194
  3343  00135A  C014  FFD9         	movff	frexp@eptr,fsr2l
  3344  00135E  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  3345  001362  0E00               	movlw	0
  3346  001364  6EDE               	movwf	postinc2,c
  3347  001366  0E00               	movlw	0
  3348  001368  6EDD               	movwf	postdec2,c
  3349  00136A  0E00               	movlw	0
  3350  00136C  6E11               	movwf	?_frexp,c
  3351  00136E  0E00               	movlw	0
  3352  001370  6E12               	movwf	?_frexp+1,c
  3353  001372  0E00               	movlw	0
  3354  001374  6E13               	movwf	?_frexp+2,c
  3355  001376  0012               	return	
  3356  001378                     l2194:
  3357  001378  5013               	movf	frexp@value+2,w,c
  3358  00137A  0B7F               	andlw	127
  3359  00137C  6E16               	movwf	??_frexp& (0+255),c
  3360  00137E  6A17               	clrf	(??_frexp+1)& (0+255),c
  3361  001380  90D8               	bcf	status,0,c
  3362  001382  3616               	rlcf	??_frexp,f,c
  3363  001384  3617               	rlcf	??_frexp+1,f,c
  3364  001386  C014  FFD9         	movff	frexp@eptr,fsr2l
  3365  00138A  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  3366  00138E  C016  FFDE         	movff	??_frexp,postinc2
  3367  001392  C017  FFDD         	movff	??_frexp+1,postdec2
  3368  001396  AE12               	btfss	frexp@value+1,7,c
  3369  001398  D003               	goto	u1750
  3370  00139A  6A16               	clrf	??_frexp& (0+255),c
  3371  00139C  2A16               	incf	??_frexp& (0+255),f,c
  3372  00139E  D001               	goto	u1758
  3373  0013A0                     u1750:
  3374  0013A0  6A16               	clrf	??_frexp& (0+255),c
  3375  0013A2                     u1758:
  3376  0013A2  5016               	movf	??_frexp,w,c
  3377  0013A4  C014  FFD9         	movff	frexp@eptr,fsr2l
  3378  0013A8  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  3379  0013AC  12DE               	iorwf	postinc2,f,c
  3380  0013AE  0E00               	movlw	0
  3381  0013B0  12DD               	iorwf	postdec2,f,c
  3382  0013B2  C014  FFD9         	movff	frexp@eptr,fsr2l
  3383  0013B6  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  3384  0013BA  0E82               	movlw	130
  3385  0013BC  26DE               	addwf	postinc2,f,c
  3386  0013BE  0EFF               	movlw	255
  3387  0013C0  22DD               	addwfc	postdec2,f,c
  3388  0013C2  8013               	bsf	frexp@value+2,0,c
  3389  0013C4  8213               	bsf	frexp@value+2,1,c
  3390  0013C6  8413               	bsf	frexp@value+2,2,c
  3391  0013C8  8613               	bsf	frexp@value+2,3,c
  3392  0013CA  8813               	bsf	frexp@value+2,4,c
  3393  0013CC  8A13               	bsf	frexp@value+2,5,c
  3394  0013CE  9C13               	bcf	frexp@value+2,6,c
  3395  0013D0  9E12               	bcf	frexp@value+1,7,c
  3396  0013D2  C011  F011         	movff	frexp@value,?_frexp
  3397  0013D6  C012  F012         	movff	frexp@value+1,?_frexp+1
  3398  0013DA  C013  F013         	movff	frexp@value+2,?_frexp+2
  3399  0013DE  0012               	return	
  3400  0013E0                     __end_of_frexp:
  3401                           	opt stack 0
  3402                           tblptru	equ	0xFF8
  3403                           tblptrh	equ	0xFF7
  3404                           tblptrl	equ	0xFF6
  3405                           tablat	equ	0xFF5
  3406                           prodh	equ	0xFF4
  3407                           prodl	equ	0xFF3
  3408                           intcon	equ	0xFF2
  3409                           intcon2	equ	0xFF1
  3410                           wreg	equ	0xFE8
  3411                           indf2	equ	0xFDF
  3412                           postinc2	equ	0xFDE
  3413                           postdec2	equ	0xFDD
  3414                           fsr2h	equ	0xFDA
  3415                           fsr2l	equ	0xFD9
  3416                           status	equ	0xFD8
  3417                           
  3418 ;; *************** function ___fttol *****************
  3419 ;; Defined at:
  3420 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;  f1              3   55[COMRAM] float 
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;  lval            4   65[COMRAM] unsigned long 
  3425 ;;  exp1            1   69[COMRAM] unsigned char 
  3426 ;;  sign1           1   64[COMRAM] unsigned char 
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  4   55[COMRAM] long 
  3429 ;; Registers used:
  3430 ;;		wreg, status,2, status,0
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3436 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;Total ram usage:       15 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    1
  3443 ;; This function calls:
  3444 ;;		Nothing
  3445 ;; This function is called by:
  3446 ;;		_dec_to_hex
  3447 ;;		_pow
  3448 ;;		_exp
  3449 ;;		_floor
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           	psect	text17
  3454  000BE8                     __ptext17:
  3455                           	opt stack 0
  3456  000BE8                     ___fttol:
  3457                           	opt stack 23
  3458                           
  3459                           ;incstack = 0
  3460  000BE8  C03A  F03C         	movff	___fttol@f1+2,??___fttol
  3461  000BEC  6A3D               	clrf	(??___fttol+1)& (0+255),c
  3462  000BEE  6A3E               	clrf	(??___fttol+2)& (0+255),c
  3463  000BF0  3439               	rlcf	___fttol@f1+1,w,c
  3464  000BF2  363C               	rlcf	??___fttol& (0+255),f,c
  3465  000BF4  E301               	bnc	u1661
  3466  000BF6  803D               	bsf	(??___fttol+1)& (0+255),0,c
  3467  000BF8                     u1661:
  3468  000BF8  503C               	movf	??___fttol,w,c
  3469  000BFA  6E46               	movwf	___fttol@exp1,c
  3470  000BFC  5046               	movf	___fttol@exp1,w,c
  3471  000BFE  A4D8               	btfss	status,2,c
  3472  000C00  D009               	goto	l2146
  3473  000C02  0E00               	movlw	0
  3474  000C04  6E38               	movwf	?___fttol,c
  3475  000C06  0E00               	movlw	0
  3476  000C08  6E39               	movwf	?___fttol+1,c
  3477  000C0A  0E00               	movlw	0
  3478  000C0C  6E3A               	movwf	?___fttol+2,c
  3479  000C0E  0E00               	movlw	0
  3480  000C10  6E3B               	movwf	?___fttol+3,c
  3481  000C12  0012               	return	
  3482  000C14                     l2146:
  3483  000C14  0E17               	movlw	23
  3484  000C16  6E3C               	movwf	??___fttol& (0+255),c
  3485  000C18  C038  F03D         	movff	___fttol@f1,??___fttol+1
  3486  000C1C  C039  F03E         	movff	___fttol@f1+1,??___fttol+2
  3487  000C20  C03A  F03F         	movff	___fttol@f1+2,??___fttol+3
  3488  000C24  283C               	incf	??___fttol,w,c
  3489  000C26  6E40               	movwf	(??___fttol+4)& (0+255),c
  3490  000C28  D004               	goto	u1680
  3491  000C2A                     u1685:
  3492  000C2A  90D8               	bcf	status,0,c
  3493  000C2C  323F               	rrcf	??___fttol+3,f,c
  3494  000C2E  323E               	rrcf	??___fttol+2,f,c
  3495  000C30  323D               	rrcf	??___fttol+1,f,c
  3496  000C32                     u1680:
  3497  000C32  2E40               	decfsz	(??___fttol+4)& (0+255),f,c
  3498  000C34  D7FA               	goto	u1685
  3499  000C36  503D               	movf	??___fttol+1,w,c
  3500  000C38  6E41               	movwf	___fttol@sign1,c
  3501  000C3A  8E39               	bsf	___fttol@f1+1,7,c
  3502  000C3C  0EFF               	movlw	255
  3503  000C3E  1638               	andwf	___fttol@f1,f,c
  3504  000C40  0EFF               	movlw	255
  3505  000C42  1639               	andwf	___fttol@f1+1,f,c
  3506  000C44  0E00               	movlw	0
  3507  000C46  163A               	andwf	___fttol@f1+2,f,c
  3508  000C48  5038               	movf	___fttol@f1,w,c
  3509  000C4A  6E42               	movwf	___fttol@lval,c
  3510  000C4C  5039               	movf	___fttol@f1+1,w,c
  3511  000C4E  6E43               	movwf	___fttol@lval+1,c
  3512  000C50  503A               	movf	___fttol@f1+2,w,c
  3513  000C52  6E44               	movwf	___fttol@lval+2,c
  3514  000C54  6A45               	clrf	___fttol@lval+3,c
  3515  000C56  0E8E               	movlw	142
  3516  000C58  5E46               	subwf	___fttol@exp1,f,c
  3517  000C5A  AE46               	btfss	___fttol@exp1,7,c
  3518  000C5C  D016               	goto	l2168
  3519  000C5E  5046               	movf	___fttol@exp1,w,c
  3520  000C60  0A80               	xorlw	128
  3521  000C62  0F8F               	addlw	143
  3522  000C64  B0D8               	btfsc	status,0,c
  3523  000C66  D009               	goto	l2164
  3524  000C68  0E00               	movlw	0
  3525  000C6A  6E38               	movwf	?___fttol,c
  3526  000C6C  0E00               	movlw	0
  3527  000C6E  6E39               	movwf	?___fttol+1,c
  3528  000C70  0E00               	movlw	0
  3529  000C72  6E3A               	movwf	?___fttol+2,c
  3530  000C74  0E00               	movlw	0
  3531  000C76  6E3B               	movwf	?___fttol+3,c
  3532  000C78  0012               	return	
  3533  000C7A                     l2164:
  3534  000C7A  90D8               	bcf	status,0,c
  3535  000C7C  3245               	rrcf	___fttol@lval+3,f,c
  3536  000C7E  3244               	rrcf	___fttol@lval+2,f,c
  3537  000C80  3243               	rrcf	___fttol@lval+1,f,c
  3538  000C82  3242               	rrcf	___fttol@lval,f,c
  3539  000C84  3E46               	incfsz	___fttol@exp1,f,c
  3540  000C86  D7F9               	goto	l2164
  3541  000C88  D015               	goto	l2178
  3542  000C8A                     l2168:
  3543  000C8A  0E17               	movlw	23
  3544  000C8C  6446               	cpfsgt	___fttol@exp1,c
  3545  000C8E  D00F               	goto	l2176
  3546  000C90  0E00               	movlw	0
  3547  000C92  6E38               	movwf	?___fttol,c
  3548  000C94  0E00               	movlw	0
  3549  000C96  6E39               	movwf	?___fttol+1,c
  3550  000C98  0E00               	movlw	0
  3551  000C9A  6E3A               	movwf	?___fttol+2,c
  3552  000C9C  0E00               	movlw	0
  3553  000C9E  6E3B               	movwf	?___fttol+3,c
  3554  000CA0  0012               	return	
  3555  000CA2                     l2174:
  3556  000CA2  90D8               	bcf	status,0,c
  3557  000CA4  3642               	rlcf	___fttol@lval,f,c
  3558  000CA6  3643               	rlcf	___fttol@lval+1,f,c
  3559  000CA8  3644               	rlcf	___fttol@lval+2,f,c
  3560  000CAA  3645               	rlcf	___fttol@lval+3,f,c
  3561  000CAC  0646               	decf	___fttol@exp1,f,c
  3562  000CAE                     l2176:
  3563  000CAE  5046               	movf	___fttol@exp1,w,c
  3564  000CB0  A4D8               	btfss	status,2,c
  3565  000CB2  D7F7               	goto	l2174
  3566  000CB4                     l2178:
  3567  000CB4  5041               	movf	___fttol@sign1,w,c
  3568  000CB6  B4D8               	btfsc	status,2,c
  3569  000CB8  D008               	goto	l2182
  3570  000CBA  1E45               	comf	___fttol@lval+3,f,c
  3571  000CBC  1E44               	comf	___fttol@lval+2,f,c
  3572  000CBE  1E43               	comf	___fttol@lval+1,f,c
  3573  000CC0  6C42               	negf	___fttol@lval,c
  3574  000CC2  0E00               	movlw	0
  3575  000CC4  2243               	addwfc	___fttol@lval+1,f,c
  3576  000CC6  2244               	addwfc	___fttol@lval+2,f,c
  3577  000CC8  2245               	addwfc	___fttol@lval+3,f,c
  3578  000CCA                     l2182:
  3579  000CCA  C042  F038         	movff	___fttol@lval,?___fttol
  3580  000CCE  C043  F039         	movff	___fttol@lval+1,?___fttol+1
  3581  000CD2  C044  F03A         	movff	___fttol@lval+2,?___fttol+2
  3582  000CD6  C045  F03B         	movff	___fttol@lval+3,?___fttol+3
  3583  000CDA  0012               	return	
  3584  000CDC                     __end_of___fttol:
  3585                           	opt stack 0
  3586                           tblptru	equ	0xFF8
  3587                           tblptrh	equ	0xFF7
  3588                           tblptrl	equ	0xFF6
  3589                           tablat	equ	0xFF5
  3590                           prodh	equ	0xFF4
  3591                           prodl	equ	0xFF3
  3592                           intcon	equ	0xFF2
  3593                           intcon2	equ	0xFF1
  3594                           wreg	equ	0xFE8
  3595                           indf2	equ	0xFDF
  3596                           postinc2	equ	0xFDE
  3597                           postdec2	equ	0xFDD
  3598                           fsr2h	equ	0xFDA
  3599                           fsr2l	equ	0xFD9
  3600                           status	equ	0xFD8
  3601                           
  3602 ;; *************** function ___ftge *****************
  3603 ;; Defined at:
  3604 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  ff1             3   16[COMRAM] float 
  3607 ;;  ff2             3   19[COMRAM] float 
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;		None
  3610 ;; Return value:  Size  Location     Type
  3611 ;;		None               void
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3619 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;Total ram usage:        9 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    1
  3626 ;; This function calls:
  3627 ;;		Nothing
  3628 ;; This function is called by:
  3629 ;;		_pow
  3630 ;;		_exp
  3631 ;;		_floor
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           	psect	text18
  3636  0013E0                     __ptext18:
  3637                           	opt stack 0
  3638  0013E0                     ___ftge:
  3639                           	opt stack 23
  3640                           
  3641                           ;incstack = 0
  3642  0013E0  AE13               	btfss	___ftge@ff1+2,7,c
  3643  0013E2  D016               	goto	l2126
  3644  0013E4  C011  F017         	movff	___ftge@ff1,??___ftge
  3645  0013E8  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
  3646  0013EC  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
  3647  0013F0  1E17               	comf	??___ftge,f,c
  3648  0013F2  1E18               	comf	??___ftge+1,f,c
  3649  0013F4  1E19               	comf	??___ftge+2,f,c
  3650  0013F6  2A17               	incf	??___ftge,f,c
  3651  0013F8  0E00               	movlw	0
  3652  0013FA  2218               	addwfc	??___ftge+1,f,c
  3653  0013FC  2219               	addwfc	??___ftge+2,f,c
  3654  0013FE  0E00               	movlw	0
  3655  001400  2417               	addwf	??___ftge,w,c
  3656  001402  6E11               	movwf	___ftge@ff1,c
  3657  001404  0E00               	movlw	0
  3658  001406  2018               	addwfc	??___ftge+1,w,c
  3659  001408  6E12               	movwf	___ftge@ff1+1,c
  3660  00140A  0E80               	movlw	128
  3661  00140C  2019               	addwfc	??___ftge+2,w,c
  3662  00140E  6E13               	movwf	___ftge@ff1+2,c
  3663  001410                     l2126:
  3664  001410  AE16               	btfss	___ftge@ff2+2,7,c
  3665  001412  D016               	goto	l2130
  3666  001414  C014  F017         	movff	___ftge@ff2,??___ftge
  3667  001418  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
  3668  00141C  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
  3669  001420  1E17               	comf	??___ftge,f,c
  3670  001422  1E18               	comf	??___ftge+1,f,c
  3671  001424  1E19               	comf	??___ftge+2,f,c
  3672  001426  2A17               	incf	??___ftge,f,c
  3673  001428  0E00               	movlw	0
  3674  00142A  2218               	addwfc	??___ftge+1,f,c
  3675  00142C  2219               	addwfc	??___ftge+2,f,c
  3676  00142E  0E00               	movlw	0
  3677  001430  2417               	addwf	??___ftge,w,c
  3678  001432  6E14               	movwf	___ftge@ff2,c
  3679  001434  0E00               	movlw	0
  3680  001436  2018               	addwfc	??___ftge+1,w,c
  3681  001438  6E15               	movwf	___ftge@ff2+1,c
  3682  00143A  0E80               	movlw	128
  3683  00143C  2019               	addwfc	??___ftge+2,w,c
  3684  00143E  6E16               	movwf	___ftge@ff2+2,c
  3685  001440                     l2130:
  3686  001440  0E00               	movlw	0
  3687  001442  1A11               	xorwf	___ftge@ff1,f,c
  3688  001444  0E00               	movlw	0
  3689  001446  1A12               	xorwf	___ftge@ff1+1,f,c
  3690  001448  0E80               	movlw	128
  3691  00144A  1A13               	xorwf	___ftge@ff1+2,f,c
  3692  00144C  0E00               	movlw	0
  3693  00144E  1A14               	xorwf	___ftge@ff2,f,c
  3694  001450  0E00               	movlw	0
  3695  001452  1A15               	xorwf	___ftge@ff2+1,f,c
  3696  001454  0E80               	movlw	128
  3697  001456  1A16               	xorwf	___ftge@ff2+2,f,c
  3698  001458  5014               	movf	___ftge@ff2,w,c
  3699  00145A  5C11               	subwf	___ftge@ff1,w,c
  3700  00145C  5015               	movf	___ftge@ff2+1,w,c
  3701  00145E  5812               	subwfb	___ftge@ff1+1,w,c
  3702  001460  5016               	movf	___ftge@ff2+2,w,c
  3703  001462  5813               	subwfb	___ftge@ff1+2,w,c
  3704  001464  B0D8               	btfsc	status,0,c
  3705  001466  D002               	goto	l2136
  3706  001468  90D8               	bcf	status,0,c
  3707  00146A  0012               	return	
  3708  00146C                     l2136:
  3709  00146C  80D8               	bsf	status,0,c
  3710  00146E  0012               	return	
  3711  001470                     __end_of___ftge:
  3712                           	opt stack 0
  3713                           tblptru	equ	0xFF8
  3714                           tblptrh	equ	0xFF7
  3715                           tblptrl	equ	0xFF6
  3716                           tablat	equ	0xFF5
  3717                           prodh	equ	0xFF4
  3718                           prodl	equ	0xFF3
  3719                           intcon	equ	0xFF2
  3720                           intcon2	equ	0xFF1
  3721                           wreg	equ	0xFE8
  3722                           indf2	equ	0xFDF
  3723                           postinc2	equ	0xFDE
  3724                           postdec2	equ	0xFDD
  3725                           fsr2h	equ	0xFDA
  3726                           fsr2l	equ	0xFD9
  3727                           status	equ	0xFD8
  3728                           
  3729 ;; *************** function ___altoft *****************
  3730 ;; Defined at:
  3731 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;  c               4   70[COMRAM] long 
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;  sign            1   79[COMRAM] unsigned char 
  3736 ;;  exp             1   78[COMRAM] unsigned char 
  3737 ;; Return value:  Size  Location     Type
  3738 ;;                  3   70[COMRAM] float 
  3739 ;; Registers used:
  3740 ;;		wreg, status,2, status,0, cstack
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3746 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;Total ram usage:       10 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:    2
  3753 ;; This function calls:
  3754 ;;		___ftpack
  3755 ;; This function is called by:
  3756 ;;		_floor
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           	psect	text19
  3761  001576                     __ptext19:
  3762                           	opt stack 0
  3763  001576                     ___altoft:
  3764                           	opt stack 22
  3765                           
  3766                           ;incstack = 0
  3767  001576  0E00               	movlw	0
  3768  001578  6E50               	movwf	___altoft@sign,c
  3769  00157A  0E8E               	movlw	142
  3770  00157C  6E4F               	movwf	___altoft@exp,c
  3771  00157E  AE4A               	btfss	___altoft@c+3,7,c
  3772  001580  D011               	goto	l1998
  3773  001582  1E4A               	comf	___altoft@c+3,f,c
  3774  001584  1E49               	comf	___altoft@c+2,f,c
  3775  001586  1E48               	comf	___altoft@c+1,f,c
  3776  001588  6C47               	negf	___altoft@c,c
  3777  00158A  0E00               	movlw	0
  3778  00158C  2248               	addwfc	___altoft@c+1,f,c
  3779  00158E  2249               	addwfc	___altoft@c+2,f,c
  3780  001590  224A               	addwfc	___altoft@c+3,f,c
  3781  001592  0E01               	movlw	1
  3782  001594  6E50               	movwf	___altoft@sign,c
  3783  001596  D006               	goto	l1998
  3784  001598                     l1996:
  3785  001598  90D8               	bcf	status,0,c
  3786  00159A  324A               	rrcf	___altoft@c+3,f,c
  3787  00159C  3249               	rrcf	___altoft@c+2,f,c
  3788  00159E  3248               	rrcf	___altoft@c+1,f,c
  3789  0015A0  3247               	rrcf	___altoft@c,f,c
  3790  0015A2  2A4F               	incf	___altoft@exp,f,c
  3791  0015A4                     l1998:
  3792  0015A4  0E00               	movlw	0
  3793  0015A6  1447               	andwf	___altoft@c,w,c
  3794  0015A8  6E4B               	movwf	??___altoft& (0+255),c
  3795  0015AA  0E00               	movlw	0
  3796  0015AC  1448               	andwf	___altoft@c+1,w,c
  3797  0015AE  6E4C               	movwf	(??___altoft+1)& (0+255),c
  3798  0015B0  0E00               	movlw	0
  3799  0015B2  1449               	andwf	___altoft@c+2,w,c
  3800  0015B4  6E4D               	movwf	(??___altoft+2)& (0+255),c
  3801  0015B6  0EFF               	movlw	255
  3802  0015B8  144A               	andwf	___altoft@c+3,w,c
  3803  0015BA  6E4E               	movwf	(??___altoft+3)& (0+255),c
  3804  0015BC  504B               	movf	??___altoft,w,c
  3805  0015BE  104C               	iorwf	??___altoft+1,w,c
  3806  0015C0  104D               	iorwf	??___altoft+2,w,c
  3807  0015C2  104E               	iorwf	??___altoft+3,w,c
  3808  0015C4  A4D8               	btfss	status,2,c
  3809  0015C6  D7E8               	goto	l1996
  3810  0015C8  C047  F011         	movff	___altoft@c,___ftpack@arg
  3811  0015CC  C048  F012         	movff	___altoft@c+1,___ftpack@arg+1
  3812  0015D0  C049  F013         	movff	___altoft@c+2,___ftpack@arg+2
  3813  0015D4  C04F  F014         	movff	___altoft@exp,___ftpack@exp
  3814  0015D8  C050  F015         	movff	___altoft@sign,___ftpack@sign
  3815  0015DC  EC51  F009         	call	___ftpack	;wreg free
  3816  0015E0  C011  F047         	movff	?___ftpack,?___altoft
  3817  0015E4  C012  F048         	movff	?___ftpack+1,?___altoft+1
  3818  0015E8  C013  F049         	movff	?___ftpack+2,?___altoft+2
  3819  0015EC  0012               	return	
  3820  0015EE                     __end_of___altoft:
  3821                           	opt stack 0
  3822                           tblptru	equ	0xFF8
  3823                           tblptrh	equ	0xFF7
  3824                           tblptrl	equ	0xFF6
  3825                           tablat	equ	0xFF5
  3826                           prodh	equ	0xFF4
  3827                           prodl	equ	0xFF3
  3828                           intcon	equ	0xFF2
  3829                           intcon2	equ	0xFF1
  3830                           wreg	equ	0xFE8
  3831                           indf2	equ	0xFDF
  3832                           postinc2	equ	0xFDE
  3833                           postdec2	equ	0xFDD
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8
  3837                           
  3838 ;; *************** function _eval_poly *****************
  3839 ;; Defined at:
  3840 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;  x               3   55[COMRAM] float 
  3843 ;;  d               2   58[COMRAM] PTR const 
  3844 ;;		 -> log@coeff(27), exp@coeff(30), 
  3845 ;;  n               2   60[COMRAM] int 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;  res             3   64[COMRAM] int 
  3848 ;; Return value:  Size  Location     Type
  3849 ;;                  3   55[COMRAM] int 
  3850 ;; Registers used:
  3851 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3857 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3858 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3859 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3860 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3861 ;;Total ram usage:       12 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    3
  3864 ;; This function calls:
  3865 ;;		___ftadd
  3866 ;;		___ftmul
  3867 ;;		___wmul
  3868 ;; This function is called by:
  3869 ;;		_exp
  3870 ;;		_log
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           	psect	text20
  3875  000F94                     __ptext20:
  3876                           	opt stack 0
  3877  000F94                     _eval_poly:
  3878                           	opt stack 22
  3879                           
  3880                           ;incstack = 0
  3881  000F94  C03D  F011         	movff	eval_poly@n,___wmul@multiplier
  3882  000F98  C03E  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  3883  000F9C  0E00               	movlw	0
  3884  000F9E  6E14               	movwf	___wmul@multiplicand+1,c
  3885  000FA0  0E03               	movlw	3
  3886  000FA2  6E13               	movwf	___wmul@multiplicand,c
  3887  000FA4  EC93  F00C         	call	___wmul	;wreg free
  3888  000FA8  C03B  F03F         	movff	eval_poly@d,??_eval_poly
  3889  000FAC  C03C  F040         	movff	eval_poly@d+1,??_eval_poly+1
  3890  000FB0  5011               	movf	?___wmul,w,c
  3891  000FB2  263F               	addwf	??_eval_poly,f,c
  3892  000FB4  5012               	movf	?___wmul+1,w,c
  3893  000FB6  2240               	addwfc	??_eval_poly+1,f,c
  3894  000FB8  C03F  FFF6         	movff	??_eval_poly,tblptrl
  3895  000FBC  C040  FFF7         	movff	??_eval_poly+1,tblptrh
  3896  000FC0                     	if	0	;tblptru may be non-zero
  3897  000FC0                     	endif
  3898  000FC0                     	if	0	;tblptru may be non-zero
  3899  000FC0                     	endif
  3900  000FC0  0009               	tblrd		*+
  3901  000FC2  CFF5 F041          	movff	tablat,eval_poly@res
  3902  000FC6  0009               	tblrd		*+
  3903  000FC8  CFF5 F042          	movff	tablat,eval_poly@res+1
  3904  000FCC  000A               	tblrd		*-
  3905  000FCE  CFF5 F043          	movff	tablat,eval_poly@res+2
  3906  000FD2  D03E               	goto	l2304
  3907  000FD4                     l2302:
  3908  000FD4  C041  F020         	movff	eval_poly@res,___ftmul@f2
  3909  000FD8  C042  F021         	movff	eval_poly@res+1,___ftmul@f2+1
  3910  000FDC  C043  F022         	movff	eval_poly@res+2,___ftmul@f2+2
  3911  000FE0  C038  F01D         	movff	eval_poly@x,___ftmul@f1
  3912  000FE4  C039  F01E         	movff	eval_poly@x+1,___ftmul@f1+1
  3913  000FE8  C03A  F01F         	movff	eval_poly@x+2,___ftmul@f1+2
  3914  000FEC  EC6E  F006         	call	___ftmul	;wreg free
  3915  000FF0  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  3916  000FF4  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  3917  000FF8  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  3918  000FFC  0E00               	movlw	0
  3919  000FFE  6E14               	movwf	___wmul@multiplicand+1,c
  3920  001000  0E03               	movlw	3
  3921  001002  6E13               	movwf	___wmul@multiplicand,c
  3922  001004  063D               	decf	eval_poly@n,f,c
  3923  001006  A0D8               	btfss	status,0,c
  3924  001008  063E               	decf	eval_poly@n+1,f,c
  3925  00100A  C03D  F011         	movff	eval_poly@n,___wmul@multiplier
  3926  00100E  C03E  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  3927  001012  EC93  F00C         	call	___wmul	;wreg free
  3928  001016  C03B  F03F         	movff	eval_poly@d,??_eval_poly
  3929  00101A  C03C  F040         	movff	eval_poly@d+1,??_eval_poly+1
  3930  00101E  5011               	movf	?___wmul,w,c
  3931  001020  263F               	addwf	??_eval_poly,f,c
  3932  001022  5012               	movf	?___wmul+1,w,c
  3933  001024  2240               	addwfc	??_eval_poly+1,f,c
  3934  001026  C03F  FFF6         	movff	??_eval_poly,tblptrl
  3935  00102A  C040  FFF7         	movff	??_eval_poly+1,tblptrh
  3936  00102E                     	if	0	;tblptru may be non-zero
  3937  00102E                     	endif
  3938  00102E                     	if	0	;tblptru may be non-zero
  3939  00102E                     	endif
  3940  00102E  0009               	tblrd		*+
  3941  001030  CFF5 F02F          	movff	tablat,___ftadd@f2
  3942  001034  0009               	tblrd		*+
  3943  001036  CFF5 F030          	movff	tablat,___ftadd@f2+1
  3944  00103A  000A               	tblrd		*-
  3945  00103C  CFF5 F031          	movff	tablat,___ftadd@f2+2
  3946  001040  ECFB  F000         	call	___ftadd	;wreg free
  3947  001044  C02C  F041         	movff	?___ftadd,eval_poly@res
  3948  001048  C02D  F042         	movff	?___ftadd+1,eval_poly@res+1
  3949  00104C  C02E  F043         	movff	?___ftadd+2,eval_poly@res+2
  3950  001050                     l2304:
  3951  001050  503D               	movf	eval_poly@n,w,c
  3952  001052  103E               	iorwf	eval_poly@n+1,w,c
  3953  001054  A4D8               	btfss	status,2,c
  3954  001056  D7BE               	goto	l2302
  3955  001058  C041  F038         	movff	eval_poly@res,?_eval_poly
  3956  00105C  C042  F039         	movff	eval_poly@res+1,?_eval_poly+1
  3957  001060  C043  F03A         	movff	eval_poly@res+2,?_eval_poly+2
  3958  001064  0012               	return		;funcret
  3959  001066                     __end_of_eval_poly:
  3960                           	opt stack 0
  3961                           tblptru	equ	0xFF8
  3962                           tblptrh	equ	0xFF7
  3963                           tblptrl	equ	0xFF6
  3964                           tablat	equ	0xFF5
  3965                           prodh	equ	0xFF4
  3966                           prodl	equ	0xFF3
  3967                           intcon	equ	0xFF2
  3968                           intcon2	equ	0xFF1
  3969                           wreg	equ	0xFE8
  3970                           indf2	equ	0xFDF
  3971                           postinc2	equ	0xFDE
  3972                           postdec2	equ	0xFDD
  3973                           fsr2h	equ	0xFDA
  3974                           fsr2l	equ	0xFD9
  3975                           status	equ	0xFD8
  3976                           
  3977 ;; *************** function ___wmul *****************
  3978 ;; Defined at:
  3979 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  multiplier      2   16[COMRAM] unsigned int 
  3982 ;;  multiplicand    2   18[COMRAM] unsigned int 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  product         2   20[COMRAM] unsigned int 
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  2   16[COMRAM] unsigned int 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2, status,0, prodl, prodh
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3994 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;Total ram usage:        6 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    1
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_time_difference
  4005 ;;		_eval_poly
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text21
  4010  001926                     __ptext21:
  4011                           	opt stack 0
  4012  001926                     ___wmul:
  4013                           	opt stack 23
  4014                           
  4015                           ;incstack = 0
  4016  001926  5011               	movf	___wmul@multiplier,w,c
  4017  001928  0213               	mulwf	___wmul@multiplicand,c
  4018  00192A  CFF3 F015          	movff	prodl,___wmul@product
  4019  00192E  CFF4 F016          	movff	prodh,___wmul@product+1
  4020  001932  5011               	movf	___wmul@multiplier,w,c
  4021  001934  0214               	mulwf	___wmul@multiplicand+1,c
  4022  001936  50F3               	movf	prodl,w,c
  4023  001938  2616               	addwf	___wmul@product+1,f,c
  4024  00193A  5012               	movf	___wmul@multiplier+1,w,c
  4025  00193C  0213               	mulwf	___wmul@multiplicand,c
  4026  00193E  50F3               	movf	prodl,w,c
  4027  001940  2616               	addwf	___wmul@product+1,f,c
  4028  001942  C015  F011         	movff	___wmul@product,?___wmul
  4029  001946  C016  F012         	movff	___wmul@product+1,?___wmul+1
  4030  00194A  0012               	return	
  4031  00194C                     __end_of___wmul:
  4032                           	opt stack 0
  4033                           tblptru	equ	0xFF8
  4034                           tblptrh	equ	0xFF7
  4035                           tblptrl	equ	0xFF6
  4036                           tablat	equ	0xFF5
  4037                           prodh	equ	0xFF4
  4038                           prodl	equ	0xFF3
  4039                           intcon	equ	0xFF2
  4040                           intcon2	equ	0xFF1
  4041                           wreg	equ	0xFE8
  4042                           indf2	equ	0xFDF
  4043                           postinc2	equ	0xFDE
  4044                           postdec2	equ	0xFDD
  4045                           fsr2h	equ	0xFDA
  4046                           fsr2l	equ	0xFD9
  4047                           status	equ	0xFD8
  4048                           
  4049 ;; *************** function ___ftmul *****************
  4050 ;; Defined at:
  4051 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  f1              3   28[COMRAM] float 
  4054 ;;  f2              3   31[COMRAM] float 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  4057 ;;  sign            1   42[COMRAM] unsigned char 
  4058 ;;  cntr            1   41[COMRAM] unsigned char 
  4059 ;;  exp             1   37[COMRAM] unsigned char 
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  3   28[COMRAM] float 
  4062 ;; Registers used:
  4063 ;;		wreg, status,2, status,0, cstack
  4064 ;; Tracked objects:
  4065 ;;		On entry : 0/0
  4066 ;;		On exit  : 0/0
  4067 ;;		Unchanged: 0/0
  4068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4069 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4071 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;Total ram usage:       15 bytes
  4074 ;; Hardware stack levels used:    1
  4075 ;; Hardware stack levels required when called:    2
  4076 ;; This function calls:
  4077 ;;		___ftpack
  4078 ;; This function is called by:
  4079 ;;		_dec_to_hex
  4080 ;;		_pow
  4081 ;;		_exp
  4082 ;;		_log
  4083 ;;		_eval_poly
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           	psect	text22
  4088  000CDC                     __ptext22:
  4089                           	opt stack 0
  4090  000CDC                     ___ftmul:
  4091                           	opt stack 22
  4092                           
  4093                           ;incstack = 0
  4094  000CDC  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  4095  000CE0  6A24               	clrf	(??___ftmul+1)& (0+255),c
  4096  000CE2  6A25               	clrf	(??___ftmul+2)& (0+255),c
  4097  000CE4  341E               	rlcf	___ftmul@f1+1,w,c
  4098  000CE6  3623               	rlcf	??___ftmul& (0+255),f,c
  4099  000CE8  E301               	bnc	u1571
  4100  000CEA  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  4101  000CEC                     u1571:
  4102  000CEC  5023               	movf	??___ftmul,w,c
  4103  000CEE  6E26               	movwf	___ftmul@exp,c
  4104  000CF0  5026               	movf	___ftmul@exp,w,c
  4105  000CF2  A4D8               	btfss	status,2,c
  4106  000CF4  D007               	goto	l2080
  4107  000CF6  0E00               	movlw	0
  4108  000CF8  6E1D               	movwf	?___ftmul,c
  4109  000CFA  0E00               	movlw	0
  4110  000CFC  6E1E               	movwf	?___ftmul+1,c
  4111  000CFE  0E00               	movlw	0
  4112  000D00  6E1F               	movwf	?___ftmul+2,c
  4113  000D02  0012               	return	
  4114  000D04                     l2080:
  4115  000D04  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  4116  000D08  6A24               	clrf	(??___ftmul+1)& (0+255),c
  4117  000D0A  6A25               	clrf	(??___ftmul+2)& (0+255),c
  4118  000D0C  3421               	rlcf	___ftmul@f2+1,w,c
  4119  000D0E  3623               	rlcf	??___ftmul& (0+255),f,c
  4120  000D10  E301               	bnc	u1591
  4121  000D12  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  4122  000D14                     u1591:
  4123  000D14  5023               	movf	??___ftmul,w,c
  4124  000D16  6E2B               	movwf	___ftmul@sign,c
  4125  000D18  502B               	movf	___ftmul@sign,w,c
  4126  000D1A  A4D8               	btfss	status,2,c
  4127  000D1C  D007               	goto	l2086
  4128  000D1E  0E00               	movlw	0
  4129  000D20  6E1D               	movwf	?___ftmul,c
  4130  000D22  0E00               	movlw	0
  4131  000D24  6E1E               	movwf	?___ftmul+1,c
  4132  000D26  0E00               	movlw	0
  4133  000D28  6E1F               	movwf	?___ftmul+2,c
  4134  000D2A  0012               	return	
  4135  000D2C                     l2086:
  4136  000D2C  502B               	movf	___ftmul@sign,w,c
  4137  000D2E  0F7B               	addlw	123
  4138  000D30  2626               	addwf	___ftmul@exp,f,c
  4139  000D32  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  4140  000D36  5022               	movf	___ftmul@f2+2,w,c
  4141  000D38  1A2B               	xorwf	___ftmul@sign,f,c
  4142  000D3A  0E80               	movlw	128
  4143  000D3C  162B               	andwf	___ftmul@sign,f,c
  4144  000D3E  8E1E               	bsf	___ftmul@f1+1,7,c
  4145  000D40  8E21               	bsf	___ftmul@f2+1,7,c
  4146  000D42  0EFF               	movlw	255
  4147  000D44  1620               	andwf	___ftmul@f2,f,c
  4148  000D46  0EFF               	movlw	255
  4149  000D48  1621               	andwf	___ftmul@f2+1,f,c
  4150  000D4A  0E00               	movlw	0
  4151  000D4C  1622               	andwf	___ftmul@f2+2,f,c
  4152  000D4E  0E00               	movlw	0
  4153  000D50  6E27               	movwf	___ftmul@f3_as_product,c
  4154  000D52  0E00               	movlw	0
  4155  000D54  6E28               	movwf	___ftmul@f3_as_product+1,c
  4156  000D56  0E00               	movlw	0
  4157  000D58  6E29               	movwf	___ftmul@f3_as_product+2,c
  4158  000D5A  0E07               	movlw	7
  4159  000D5C  6E2A               	movwf	___ftmul@cntr,c
  4160  000D5E                     l2100:
  4161  000D5E  A01D               	btfss	___ftmul@f1,0,c
  4162  000D60  D006               	goto	l2104
  4163  000D62  5020               	movf	___ftmul@f2,w,c
  4164  000D64  2627               	addwf	___ftmul@f3_as_product,f,c
  4165  000D66  5021               	movf	___ftmul@f2+1,w,c
  4166  000D68  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  4167  000D6A  5022               	movf	___ftmul@f2+2,w,c
  4168  000D6C  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  4169  000D6E                     l2104:
  4170  000D6E  90D8               	bcf	status,0,c
  4171  000D70  321F               	rrcf	___ftmul@f1+2,f,c
  4172  000D72  321E               	rrcf	___ftmul@f1+1,f,c
  4173  000D74  321D               	rrcf	___ftmul@f1,f,c
  4174  000D76  90D8               	bcf	status,0,c
  4175  000D78  3620               	rlcf	___ftmul@f2,f,c
  4176  000D7A  3621               	rlcf	___ftmul@f2+1,f,c
  4177  000D7C  3622               	rlcf	___ftmul@f2+2,f,c
  4178  000D7E  2E2A               	decfsz	___ftmul@cntr,f,c
  4179  000D80  D7EE               	goto	l2100
  4180  000D82  0E09               	movlw	9
  4181  000D84  6E2A               	movwf	___ftmul@cntr,c
  4182  000D86                     l2110:
  4183  000D86  A01D               	btfss	___ftmul@f1,0,c
  4184  000D88  D006               	goto	l2114
  4185  000D8A  5020               	movf	___ftmul@f2,w,c
  4186  000D8C  2627               	addwf	___ftmul@f3_as_product,f,c
  4187  000D8E  5021               	movf	___ftmul@f2+1,w,c
  4188  000D90  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  4189  000D92  5022               	movf	___ftmul@f2+2,w,c
  4190  000D94  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  4191  000D96                     l2114:
  4192  000D96  90D8               	bcf	status,0,c
  4193  000D98  321F               	rrcf	___ftmul@f1+2,f,c
  4194  000D9A  321E               	rrcf	___ftmul@f1+1,f,c
  4195  000D9C  321D               	rrcf	___ftmul@f1,f,c
  4196  000D9E  90D8               	bcf	status,0,c
  4197  000DA0  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  4198  000DA2  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  4199  000DA4  3227               	rrcf	___ftmul@f3_as_product,f,c
  4200  000DA6  2E2A               	decfsz	___ftmul@cntr,f,c
  4201  000DA8  D7EE               	goto	l2110
  4202  000DAA  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  4203  000DAE  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4204  000DB2  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4205  000DB6  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  4206  000DBA  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  4207  000DBE  EC51  F009         	call	___ftpack	;wreg free
  4208  000DC2  C011  F01D         	movff	?___ftpack,?___ftmul
  4209  000DC6  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  4210  000DCA  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  4211  000DCE  0012               	return	
  4212  000DD0                     __end_of___ftmul:
  4213                           	opt stack 0
  4214                           tblptru	equ	0xFF8
  4215                           tblptrh	equ	0xFF7
  4216                           tblptrl	equ	0xFF6
  4217                           tablat	equ	0xFF5
  4218                           prodh	equ	0xFF4
  4219                           prodl	equ	0xFF3
  4220                           intcon	equ	0xFF2
  4221                           intcon2	equ	0xFF1
  4222                           wreg	equ	0xFE8
  4223                           indf2	equ	0xFDF
  4224                           postinc2	equ	0xFDE
  4225                           postdec2	equ	0xFDD
  4226                           fsr2h	equ	0xFDA
  4227                           fsr2l	equ	0xFD9
  4228                           status	equ	0xFD8
  4229                           
  4230 ;; *************** function ___ftsub *****************
  4231 ;; Defined at:
  4232 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  f1              3   55[COMRAM] float 
  4235 ;;  f2              3   58[COMRAM] float 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  3   55[COMRAM] float 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2, status,0, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4247 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;Total ram usage:        6 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    3
  4254 ;; This function calls:
  4255 ;;		___ftadd
  4256 ;; This function is called by:
  4257 ;;		_exp
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           	psect	text23
  4262  001888                     __ptext23:
  4263                           	opt stack 0
  4264  001888                     ___ftsub:
  4265                           	opt stack 22
  4266                           
  4267                           ;incstack = 0
  4268  001888  503B               	movf	___ftsub@f2,w,c
  4269  00188A  103C               	iorwf	___ftsub@f2+1,w,c
  4270  00188C  103D               	iorwf	___ftsub@f2+2,w,c
  4271  00188E  B4D8               	btfsc	status,2,c
  4272  001890  D006               	goto	l2256
  4273  001892  0E00               	movlw	0
  4274  001894  1A3B               	xorwf	___ftsub@f2,f,c
  4275  001896  0E00               	movlw	0
  4276  001898  1A3C               	xorwf	___ftsub@f2+1,f,c
  4277  00189A  0E80               	movlw	128
  4278  00189C  1A3D               	xorwf	___ftsub@f2+2,f,c
  4279  00189E                     l2256:
  4280  00189E  C038  F02C         	movff	___ftsub@f1,___ftadd@f1
  4281  0018A2  C039  F02D         	movff	___ftsub@f1+1,___ftadd@f1+1
  4282  0018A6  C03A  F02E         	movff	___ftsub@f1+2,___ftadd@f1+2
  4283  0018AA  C03B  F02F         	movff	___ftsub@f2,___ftadd@f2
  4284  0018AE  C03C  F030         	movff	___ftsub@f2+1,___ftadd@f2+1
  4285  0018B2  C03D  F031         	movff	___ftsub@f2+2,___ftadd@f2+2
  4286  0018B6  ECFB  F000         	call	___ftadd	;wreg free
  4287  0018BA  C02C  F038         	movff	?___ftadd,?___ftsub
  4288  0018BE  C02D  F039         	movff	?___ftadd+1,?___ftsub+1
  4289  0018C2  C02E  F03A         	movff	?___ftadd+2,?___ftsub+2
  4290  0018C6  0012               	return	
  4291  0018C8                     __end_of___ftsub:
  4292                           	opt stack 0
  4293                           tblptru	equ	0xFF8
  4294                           tblptrh	equ	0xFF7
  4295                           tblptrl	equ	0xFF6
  4296                           tablat	equ	0xFF5
  4297                           prodh	equ	0xFF4
  4298                           prodl	equ	0xFF3
  4299                           intcon	equ	0xFF2
  4300                           intcon2	equ	0xFF1
  4301                           wreg	equ	0xFE8
  4302                           indf2	equ	0xFDF
  4303                           postinc2	equ	0xFDE
  4304                           postdec2	equ	0xFDD
  4305                           fsr2h	equ	0xFDA
  4306                           fsr2l	equ	0xFD9
  4307                           status	equ	0xFD8
  4308                           
  4309 ;; *************** function ___ftadd *****************
  4310 ;; Defined at:
  4311 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  4312 ;; Parameters:    Size  Location     Type
  4313 ;;  f1              3   43[COMRAM] float 
  4314 ;;  f2              3   46[COMRAM] float 
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;  exp1            1   54[COMRAM] unsigned char 
  4317 ;;  exp2            1   53[COMRAM] unsigned char 
  4318 ;;  sign            1   52[COMRAM] unsigned char 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  3   43[COMRAM] float 
  4321 ;; Registers used:
  4322 ;;		wreg, status,2, status,0, cstack
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4328 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;Total ram usage:       12 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    2
  4335 ;; This function calls:
  4336 ;;		___ftpack
  4337 ;; This function is called by:
  4338 ;;		_dec_to_hex
  4339 ;;		___ftsub
  4340 ;;		_floor
  4341 ;;		_log
  4342 ;;		_eval_poly
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           	psect	text24
  4347  0001F6                     __ptext24:
  4348                           	opt stack 0
  4349  0001F6                     ___ftadd:
  4350                           	opt stack 22
  4351                           
  4352                           ;incstack = 0
  4353  0001F6  C02E  F032         	movff	___ftadd@f1+2,??___ftadd
  4354  0001FA  6A33               	clrf	(??___ftadd+1)& (0+255),c
  4355  0001FC  6A34               	clrf	(??___ftadd+2)& (0+255),c
  4356  0001FE  342D               	rlcf	___ftadd@f1+1,w,c
  4357  000200  3632               	rlcf	??___ftadd& (0+255),f,c
  4358  000202  E301               	bnc	u1361
  4359  000204  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  4360  000206                     u1361:
  4361  000206  5032               	movf	??___ftadd,w,c
  4362  000208  6E37               	movwf	___ftadd@exp1,c
  4363  00020A  C031  F032         	movff	___ftadd@f2+2,??___ftadd
  4364  00020E  6A33               	clrf	(??___ftadd+1)& (0+255),c
  4365  000210  6A34               	clrf	(??___ftadd+2)& (0+255),c
  4366  000212  3430               	rlcf	___ftadd@f2+1,w,c
  4367  000214  3632               	rlcf	??___ftadd& (0+255),f,c
  4368  000216  E301               	bnc	u1371
  4369  000218  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  4370  00021A                     u1371:
  4371  00021A  5032               	movf	??___ftadd,w,c
  4372  00021C  6E36               	movwf	___ftadd@exp2,c
  4373  00021E  5037               	movf	___ftadd@exp1,w,c
  4374  000220  B4D8               	btfsc	status,2,c
  4375  000222  D00B               	goto	l501
  4376  000224  5036               	movf	___ftadd@exp2,w,c
  4377  000226  5C37               	subwf	___ftadd@exp1,w,c
  4378  000228  B0D8               	btfsc	status,0,c
  4379  00022A  D00E               	goto	l2012
  4380  00022C  5037               	movf	___ftadd@exp1,w,c
  4381  00022E  0800               	sublw	0
  4382  000230  2436               	addwf	___ftadd@exp2,w,c
  4383  000232  6E32               	movwf	??___ftadd& (0+255),c
  4384  000234  0E18               	movlw	24
  4385  000236  6432               	cpfsgt	??___ftadd,c
  4386  000238  D007               	goto	l2012
  4387  00023A                     l501:
  4388  00023A  C02F  F02C         	movff	___ftadd@f2,?___ftadd
  4389  00023E  C030  F02D         	movff	___ftadd@f2+1,?___ftadd+1
  4390  000242  C031  F02E         	movff	___ftadd@f2+2,?___ftadd+2
  4391  000246  0012               	return	
  4392  000248                     l2012:
  4393  000248  5036               	movf	___ftadd@exp2,w,c
  4394  00024A  B4D8               	btfsc	status,2,c
  4395  00024C  D00B               	goto	l505
  4396  00024E  5037               	movf	___ftadd@exp1,w,c
  4397  000250  5C36               	subwf	___ftadd@exp2,w,c
  4398  000252  B0D8               	btfsc	status,0,c
  4399  000254  D00E               	goto	l2018
  4400  000256  5036               	movf	___ftadd@exp2,w,c
  4401  000258  0800               	sublw	0
  4402  00025A  2437               	addwf	___ftadd@exp1,w,c
  4403  00025C  6E32               	movwf	??___ftadd& (0+255),c
  4404  00025E  0E18               	movlw	24
  4405  000260  6432               	cpfsgt	??___ftadd,c
  4406  000262  D007               	goto	l2018
  4407  000264                     l505:
  4408  000264  C02C  F02C         	movff	___ftadd@f1,?___ftadd
  4409  000268  C02D  F02D         	movff	___ftadd@f1+1,?___ftadd+1
  4410  00026C  C02E  F02E         	movff	___ftadd@f1+2,?___ftadd+2
  4411  000270  0012               	return	
  4412  000272                     l2018:
  4413  000272  0E06               	movlw	6
  4414  000274  6E35               	movwf	___ftadd@sign,c
  4415  000276  BE2E               	btfsc	___ftadd@f1+2,7,c
  4416  000278  8E35               	bsf	___ftadd@sign,7,c
  4417  00027A  BE31               	btfsc	___ftadd@f2+2,7,c
  4418  00027C  8C35               	bsf	___ftadd@sign,6,c
  4419  00027E  8E2D               	bsf	___ftadd@f1+1,7,c
  4420  000280  0EFF               	movlw	255
  4421  000282  162C               	andwf	___ftadd@f1,f,c
  4422  000284  0EFF               	movlw	255
  4423  000286  162D               	andwf	___ftadd@f1+1,f,c
  4424  000288  0E00               	movlw	0
  4425  00028A  162E               	andwf	___ftadd@f1+2,f,c
  4426  00028C  8E30               	bsf	___ftadd@f2+1,7,c
  4427  00028E  0EFF               	movlw	255
  4428  000290  162F               	andwf	___ftadd@f2,f,c
  4429  000292  0EFF               	movlw	255
  4430  000294  1630               	andwf	___ftadd@f2+1,f,c
  4431  000296  0E00               	movlw	0
  4432  000298  1631               	andwf	___ftadd@f2+2,f,c
  4433  00029A  5036               	movf	___ftadd@exp2,w,c
  4434  00029C  5C37               	subwf	___ftadd@exp1,w,c
  4435  00029E  B0D8               	btfsc	status,0,c
  4436  0002A0  D01B               	goto	l2044
  4437  0002A2                     l2034:
  4438  0002A2  90D8               	bcf	status,0,c
  4439  0002A4  362F               	rlcf	___ftadd@f2,f,c
  4440  0002A6  3630               	rlcf	___ftadd@f2+1,f,c
  4441  0002A8  3631               	rlcf	___ftadd@f2+2,f,c
  4442  0002AA  0636               	decf	___ftadd@exp2,f,c
  4443  0002AC  5037               	movf	___ftadd@exp1,w,c
  4444  0002AE  1836               	xorwf	___ftadd@exp2,w,c
  4445  0002B0  B4D8               	btfsc	status,2,c
  4446  0002B2  D00D               	goto	l2042
  4447  0002B4  0635               	decf	___ftadd@sign,f,c
  4448  0002B6  C035  F032         	movff	___ftadd@sign,??___ftadd
  4449  0002BA  0E07               	movlw	7
  4450  0002BC  1632               	andwf	??___ftadd,f,c
  4451  0002BE  B4D8               	btfsc	status,2,c
  4452  0002C0  D006               	goto	l2042
  4453  0002C2  D7EF               	goto	l2034
  4454  0002C4                     l2040:
  4455  0002C4  90D8               	bcf	status,0,c
  4456  0002C6  322E               	rrcf	___ftadd@f1+2,f,c
  4457  0002C8  322D               	rrcf	___ftadd@f1+1,f,c
  4458  0002CA  322C               	rrcf	___ftadd@f1,f,c
  4459  0002CC  2A37               	incf	___ftadd@exp1,f,c
  4460  0002CE                     l2042:
  4461  0002CE  5036               	movf	___ftadd@exp2,w,c
  4462  0002D0  1837               	xorwf	___ftadd@exp1,w,c
  4463  0002D2  B4D8               	btfsc	status,2,c
  4464  0002D4  D01F               	goto	l516
  4465  0002D6  D7F6               	goto	l2040
  4466  0002D8                     l2044:
  4467  0002D8  5037               	movf	___ftadd@exp1,w,c
  4468  0002DA  5C36               	subwf	___ftadd@exp2,w,c
  4469  0002DC  B0D8               	btfsc	status,0,c
  4470  0002DE  D01A               	goto	l516
  4471  0002E0                     l2046:
  4472  0002E0  90D8               	bcf	status,0,c
  4473  0002E2  362C               	rlcf	___ftadd@f1,f,c
  4474  0002E4  362D               	rlcf	___ftadd@f1+1,f,c
  4475  0002E6  362E               	rlcf	___ftadd@f1+2,f,c
  4476  0002E8  0637               	decf	___ftadd@exp1,f,c
  4477  0002EA  5037               	movf	___ftadd@exp1,w,c
  4478  0002EC  1836               	xorwf	___ftadd@exp2,w,c
  4479  0002EE  B4D8               	btfsc	status,2,c
  4480  0002F0  D00D               	goto	l2054
  4481  0002F2  0635               	decf	___ftadd@sign,f,c
  4482  0002F4  C035  F032         	movff	___ftadd@sign,??___ftadd
  4483  0002F8  0E07               	movlw	7
  4484  0002FA  1632               	andwf	??___ftadd,f,c
  4485  0002FC  B4D8               	btfsc	status,2,c
  4486  0002FE  D006               	goto	l2054
  4487  000300  D7EF               	goto	l2046
  4488  000302                     l2052:
  4489  000302  90D8               	bcf	status,0,c
  4490  000304  3231               	rrcf	___ftadd@f2+2,f,c
  4491  000306  3230               	rrcf	___ftadd@f2+1,f,c
  4492  000308  322F               	rrcf	___ftadd@f2,f,c
  4493  00030A  2A36               	incf	___ftadd@exp2,f,c
  4494  00030C                     l2054:
  4495  00030C  5036               	movf	___ftadd@exp2,w,c
  4496  00030E  1837               	xorwf	___ftadd@exp1,w,c
  4497  000310  A4D8               	btfss	status,2,c
  4498  000312  D7F7               	goto	l2052
  4499  000314                     l516:
  4500  000314  AE35               	btfss	___ftadd@sign,7,c
  4501  000316  D00C               	goto	l525
  4502  000318  0EFF               	movlw	255
  4503  00031A  1A2C               	xorwf	___ftadd@f1,f,c
  4504  00031C  0EFF               	movlw	255
  4505  00031E  1A2D               	xorwf	___ftadd@f1+1,f,c
  4506  000320  0EFF               	movlw	255
  4507  000322  1A2E               	xorwf	___ftadd@f1+2,f,c
  4508  000324  0E01               	movlw	1
  4509  000326  262C               	addwf	___ftadd@f1,f,c
  4510  000328  0E00               	movlw	0
  4511  00032A  222D               	addwfc	___ftadd@f1+1,f,c
  4512  00032C  0E00               	movlw	0
  4513  00032E  222E               	addwfc	___ftadd@f1+2,f,c
  4514  000330                     l525:
  4515  000330  AC35               	btfss	___ftadd@sign,6,c
  4516  000332  D00C               	goto	l2060
  4517  000334  0EFF               	movlw	255
  4518  000336  1A2F               	xorwf	___ftadd@f2,f,c
  4519  000338  0EFF               	movlw	255
  4520  00033A  1A30               	xorwf	___ftadd@f2+1,f,c
  4521  00033C  0EFF               	movlw	255
  4522  00033E  1A31               	xorwf	___ftadd@f2+2,f,c
  4523  000340  0E01               	movlw	1
  4524  000342  262F               	addwf	___ftadd@f2,f,c
  4525  000344  0E00               	movlw	0
  4526  000346  2230               	addwfc	___ftadd@f2+1,f,c
  4527  000348  0E00               	movlw	0
  4528  00034A  2231               	addwfc	___ftadd@f2+2,f,c
  4529  00034C                     l2060:
  4530  00034C  0E00               	movlw	0
  4531  00034E  6E35               	movwf	___ftadd@sign,c
  4532  000350  502C               	movf	___ftadd@f1,w,c
  4533  000352  262F               	addwf	___ftadd@f2,f,c
  4534  000354  502D               	movf	___ftadd@f1+1,w,c
  4535  000356  2230               	addwfc	___ftadd@f2+1,f,c
  4536  000358  502E               	movf	___ftadd@f1+2,w,c
  4537  00035A  2231               	addwfc	___ftadd@f2+2,f,c
  4538  00035C  AE31               	btfss	___ftadd@f2+2,7,c
  4539  00035E  D00E               	goto	l2070
  4540  000360  0EFF               	movlw	255
  4541  000362  1A2F               	xorwf	___ftadd@f2,f,c
  4542  000364  0EFF               	movlw	255
  4543  000366  1A30               	xorwf	___ftadd@f2+1,f,c
  4544  000368  0EFF               	movlw	255
  4545  00036A  1A31               	xorwf	___ftadd@f2+2,f,c
  4546  00036C  0E01               	movlw	1
  4547  00036E  262F               	addwf	___ftadd@f2,f,c
  4548  000370  0E00               	movlw	0
  4549  000372  2230               	addwfc	___ftadd@f2+1,f,c
  4550  000374  0E00               	movlw	0
  4551  000376  2231               	addwfc	___ftadd@f2+2,f,c
  4552  000378  0E01               	movlw	1
  4553  00037A  6E35               	movwf	___ftadd@sign,c
  4554  00037C                     l2070:
  4555  00037C  C02F  F011         	movff	___ftadd@f2,___ftpack@arg
  4556  000380  C030  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
  4557  000384  C031  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
  4558  000388  C037  F014         	movff	___ftadd@exp1,___ftpack@exp
  4559  00038C  C035  F015         	movff	___ftadd@sign,___ftpack@sign
  4560  000390  EC51  F009         	call	___ftpack	;wreg free
  4561  000394  C011  F02C         	movff	?___ftpack,?___ftadd
  4562  000398  C012  F02D         	movff	?___ftpack+1,?___ftadd+1
  4563  00039C  C013  F02E         	movff	?___ftpack+2,?___ftadd+2
  4564  0003A0  0012               	return	
  4565  0003A2                     __end_of___ftadd:
  4566                           	opt stack 0
  4567                           tblptru	equ	0xFF8
  4568                           tblptrh	equ	0xFF7
  4569                           tblptrl	equ	0xFF6
  4570                           tablat	equ	0xFF5
  4571                           prodh	equ	0xFF4
  4572                           prodl	equ	0xFF3
  4573                           intcon	equ	0xFF2
  4574                           intcon2	equ	0xFF1
  4575                           wreg	equ	0xFE8
  4576                           indf2	equ	0xFDF
  4577                           postinc2	equ	0xFDE
  4578                           postdec2	equ	0xFDD
  4579                           fsr2h	equ	0xFDA
  4580                           fsr2l	equ	0xFD9
  4581                           status	equ	0xFD8
  4582                           
  4583 ;; *************** function ___ftneg *****************
  4584 ;; Defined at:
  4585 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;  f1              3   16[COMRAM] float 
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  3   16[COMRAM] float 
  4592 ;; Registers used:
  4593 ;;		wreg, status,2, status,0
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4599 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;Total ram usage:        3 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    1
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_pow
  4610 ;;		_exp
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           	psect	text25
  4615  00194C                     __ptext25:
  4616                           	opt stack 0
  4617  00194C                     ___ftneg:
  4618                           	opt stack 24
  4619                           
  4620                           ;incstack = 0
  4621  00194C  5011               	movf	___ftneg@f1,w,c
  4622  00194E  1012               	iorwf	___ftneg@f1+1,w,c
  4623  001950  1013               	iorwf	___ftneg@f1+2,w,c
  4624  001952  B4D8               	btfsc	status,2,c
  4625  001954  D006               	goto	l558
  4626  001956  0E00               	movlw	0
  4627  001958  1A11               	xorwf	___ftneg@f1,f,c
  4628  00195A  0E00               	movlw	0
  4629  00195C  1A12               	xorwf	___ftneg@f1+1,f,c
  4630  00195E  0E80               	movlw	128
  4631  001960  1A13               	xorwf	___ftneg@f1+2,f,c
  4632  001962                     l558:
  4633  001962  C011  F011         	movff	___ftneg@f1,?___ftneg
  4634  001966  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
  4635  00196A  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
  4636  00196E  0012               	return		;funcret
  4637  001970                     __end_of___ftneg:
  4638                           	opt stack 0
  4639                           tblptru	equ	0xFF8
  4640                           tblptrh	equ	0xFF7
  4641                           tblptrl	equ	0xFF6
  4642                           tablat	equ	0xFF5
  4643                           prodh	equ	0xFF4
  4644                           prodl	equ	0xFF3
  4645                           intcon	equ	0xFF2
  4646                           intcon2	equ	0xFF1
  4647                           wreg	equ	0xFE8
  4648                           indf2	equ	0xFDF
  4649                           postinc2	equ	0xFDE
  4650                           postdec2	equ	0xFDD
  4651                           fsr2h	equ	0xFDA
  4652                           fsr2l	equ	0xFD9
  4653                           status	equ	0xFD8
  4654                           
  4655 ;; *************** function ___ftdiv *****************
  4656 ;; Defined at:
  4657 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  f1              3   24[COMRAM] float 
  4660 ;;  f2              3   27[COMRAM] float 
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;  f3              3   34[COMRAM] float 
  4663 ;;  sign            1   38[COMRAM] unsigned char 
  4664 ;;  exp             1   37[COMRAM] unsigned char 
  4665 ;;  cntr            1   33[COMRAM] unsigned char 
  4666 ;; Return value:  Size  Location     Type
  4667 ;;                  3   24[COMRAM] float 
  4668 ;; Registers used:
  4669 ;;		wreg, status,2, status,0, cstack
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4675 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4679 ;;Total ram usage:       15 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    2
  4682 ;; This function calls:
  4683 ;;		___ftpack
  4684 ;; This function is called by:
  4685 ;;		_exp
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text26
  4690  000DD0                     __ptext26:
  4691                           	opt stack 0
  4692  000DD0                     ___ftdiv:
  4693                           	opt stack 23
  4694                           
  4695                           ;incstack = 0
  4696  000DD0  C01B  F01F         	movff	___ftdiv@f1+2,??___ftdiv
  4697  000DD4  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  4698  000DD6  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  4699  000DD8  341A               	rlcf	___ftdiv@f1+1,w,c
  4700  000DDA  361F               	rlcf	??___ftdiv& (0+255),f,c
  4701  000DDC  E301               	bnc	u1761
  4702  000DDE  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  4703  000DE0                     u1761:
  4704  000DE0  501F               	movf	??___ftdiv,w,c
  4705  000DE2  6E26               	movwf	___ftdiv@exp,c
  4706  000DE4  5026               	movf	___ftdiv@exp,w,c
  4707  000DE6  A4D8               	btfss	status,2,c
  4708  000DE8  D007               	goto	l2212
  4709  000DEA  0E00               	movlw	0
  4710  000DEC  6E19               	movwf	?___ftdiv,c
  4711  000DEE  0E00               	movlw	0
  4712  000DF0  6E1A               	movwf	?___ftdiv+1,c
  4713  000DF2  0E00               	movlw	0
  4714  000DF4  6E1B               	movwf	?___ftdiv+2,c
  4715  000DF6  0012               	return	
  4716  000DF8                     l2212:
  4717  000DF8  C01E  F01F         	movff	___ftdiv@f2+2,??___ftdiv
  4718  000DFC  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  4719  000DFE  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  4720  000E00  341D               	rlcf	___ftdiv@f2+1,w,c
  4721  000E02  361F               	rlcf	??___ftdiv& (0+255),f,c
  4722  000E04  E301               	bnc	u1781
  4723  000E06  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  4724  000E08                     u1781:
  4725  000E08  501F               	movf	??___ftdiv,w,c
  4726  000E0A  6E27               	movwf	___ftdiv@sign,c
  4727  000E0C  5027               	movf	___ftdiv@sign,w,c
  4728  000E0E  A4D8               	btfss	status,2,c
  4729  000E10  D007               	goto	l2218
  4730  000E12  0E00               	movlw	0
  4731  000E14  6E19               	movwf	?___ftdiv,c
  4732  000E16  0E00               	movlw	0
  4733  000E18  6E1A               	movwf	?___ftdiv+1,c
  4734  000E1A  0E00               	movlw	0
  4735  000E1C  6E1B               	movwf	?___ftdiv+2,c
  4736  000E1E  0012               	return	
  4737  000E20                     l2218:
  4738  000E20  0E00               	movlw	0
  4739  000E22  6E23               	movwf	___ftdiv@f3,c
  4740  000E24  0E00               	movlw	0
  4741  000E26  6E24               	movwf	___ftdiv@f3+1,c
  4742  000E28  0E00               	movlw	0
  4743  000E2A  6E25               	movwf	___ftdiv@f3+2,c
  4744  000E2C  5027               	movf	___ftdiv@sign,w,c
  4745  000E2E  0F89               	addlw	137
  4746  000E30  5E26               	subwf	___ftdiv@exp,f,c
  4747  000E32  C01B  F027         	movff	___ftdiv@f1+2,___ftdiv@sign
  4748  000E36  501E               	movf	___ftdiv@f2+2,w,c
  4749  000E38  1A27               	xorwf	___ftdiv@sign,f,c
  4750  000E3A  0E80               	movlw	128
  4751  000E3C  1627               	andwf	___ftdiv@sign,f,c
  4752  000E3E  8E1A               	bsf	___ftdiv@f1+1,7,c
  4753  000E40  0EFF               	movlw	255
  4754  000E42  1619               	andwf	___ftdiv@f1,f,c
  4755  000E44  0EFF               	movlw	255
  4756  000E46  161A               	andwf	___ftdiv@f1+1,f,c
  4757  000E48  0E00               	movlw	0
  4758  000E4A  161B               	andwf	___ftdiv@f1+2,f,c
  4759  000E4C  8E1D               	bsf	___ftdiv@f2+1,7,c
  4760  000E4E  0EFF               	movlw	255
  4761  000E50  161C               	andwf	___ftdiv@f2,f,c
  4762  000E52  0EFF               	movlw	255
  4763  000E54  161D               	andwf	___ftdiv@f2+1,f,c
  4764  000E56  0E00               	movlw	0
  4765  000E58  161E               	andwf	___ftdiv@f2+2,f,c
  4766  000E5A  0E18               	movlw	24
  4767  000E5C  6E22               	movwf	___ftdiv@cntr,c
  4768  000E5E                     l2238:
  4769  000E5E  90D8               	bcf	status,0,c
  4770  000E60  3623               	rlcf	___ftdiv@f3,f,c
  4771  000E62  3624               	rlcf	___ftdiv@f3+1,f,c
  4772  000E64  3625               	rlcf	___ftdiv@f3+2,f,c
  4773  000E66  501C               	movf	___ftdiv@f2,w,c
  4774  000E68  5C19               	subwf	___ftdiv@f1,w,c
  4775  000E6A  501D               	movf	___ftdiv@f2+1,w,c
  4776  000E6C  581A               	subwfb	___ftdiv@f1+1,w,c
  4777  000E6E  501E               	movf	___ftdiv@f2+2,w,c
  4778  000E70  581B               	subwfb	___ftdiv@f1+2,w,c
  4779  000E72  A0D8               	btfss	status,0,c
  4780  000E74  D007               	goto	l536
  4781  000E76  501C               	movf	___ftdiv@f2,w,c
  4782  000E78  5E19               	subwf	___ftdiv@f1,f,c
  4783  000E7A  501D               	movf	___ftdiv@f2+1,w,c
  4784  000E7C  5A1A               	subwfb	___ftdiv@f1+1,f,c
  4785  000E7E  501E               	movf	___ftdiv@f2+2,w,c
  4786  000E80  5A1B               	subwfb	___ftdiv@f1+2,f,c
  4787  000E82  8023               	bsf	___ftdiv@f3,0,c
  4788  000E84                     l536:
  4789  000E84  90D8               	bcf	status,0,c
  4790  000E86  3619               	rlcf	___ftdiv@f1,f,c
  4791  000E88  361A               	rlcf	___ftdiv@f1+1,f,c
  4792  000E8A  361B               	rlcf	___ftdiv@f1+2,f,c
  4793  000E8C  2E22               	decfsz	___ftdiv@cntr,f,c
  4794  000E8E  D7E7               	goto	l2238
  4795  000E90  C023  F011         	movff	___ftdiv@f3,___ftpack@arg
  4796  000E94  C024  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4797  000E98  C025  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4798  000E9C  C026  F014         	movff	___ftdiv@exp,___ftpack@exp
  4799  000EA0  C027  F015         	movff	___ftdiv@sign,___ftpack@sign
  4800  000EA4  EC51  F009         	call	___ftpack	;wreg free
  4801  000EA8  C011  F019         	movff	?___ftpack,?___ftdiv
  4802  000EAC  C012  F01A         	movff	?___ftpack+1,?___ftdiv+1
  4803  000EB0  C013  F01B         	movff	?___ftpack+2,?___ftdiv+2
  4804  000EB4  0012               	return	
  4805  000EB6                     __end_of___ftdiv:
  4806                           	opt stack 0
  4807                           tblptru	equ	0xFF8
  4808                           tblptrh	equ	0xFF7
  4809                           tblptrl	equ	0xFF6
  4810                           tablat	equ	0xFF5
  4811                           prodh	equ	0xFF4
  4812                           prodl	equ	0xFF3
  4813                           intcon	equ	0xFF2
  4814                           intcon2	equ	0xFF1
  4815                           wreg	equ	0xFE8
  4816                           indf2	equ	0xFDF
  4817                           postinc2	equ	0xFDE
  4818                           postdec2	equ	0xFDD
  4819                           fsr2h	equ	0xFDA
  4820                           fsr2l	equ	0xFD9
  4821                           status	equ	0xFD8
  4822                           
  4823 ;; *************** function ___awtoft *****************
  4824 ;; Defined at:
  4825 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;  c               2   24[COMRAM] int 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  sign            1   27[COMRAM] unsigned char 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  3   24[COMRAM] float 
  4832 ;; Registers used:
  4833 ;;		wreg, status,2, status,0, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4839 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;Total ram usage:        4 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    2
  4846 ;; This function calls:
  4847 ;;		___ftpack
  4848 ;; This function is called by:
  4849 ;;		_dec_to_hex
  4850 ;;		_exp
  4851 ;;		_log
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text27
  4856  0018C8                     __ptext27:
  4857                           	opt stack 0
  4858  0018C8                     ___awtoft:
  4859                           	opt stack 23
  4860                           
  4861                           ;incstack = 0
  4862  0018C8  0E00               	movlw	0
  4863  0018CA  6E1C               	movwf	___awtoft@sign,c
  4864  0018CC  AE1A               	btfss	___awtoft@c+1,7,c
  4865  0018CE  D006               	goto	l2268
  4866  0018D0  6C19               	negf	___awtoft@c,c
  4867  0018D2  1E1A               	comf	___awtoft@c+1,f,c
  4868  0018D4  B0D8               	btfsc	status,0,c
  4869  0018D6  2A1A               	incf	___awtoft@c+1,f,c
  4870  0018D8  0E01               	movlw	1
  4871  0018DA  6E1C               	movwf	___awtoft@sign,c
  4872  0018DC                     l2268:
  4873  0018DC  C019  F011         	movff	___awtoft@c,___ftpack@arg
  4874  0018E0  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  4875  0018E4  6A13               	clrf	___ftpack@arg+2,c
  4876  0018E6  0E8E               	movlw	142
  4877  0018E8  6E14               	movwf	___ftpack@exp,c
  4878  0018EA  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  4879  0018EE  EC51  F009         	call	___ftpack	;wreg free
  4880  0018F2  C011  F019         	movff	?___ftpack,?___awtoft
  4881  0018F6  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  4882  0018FA  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  4883  0018FE  0012               	return	
  4884  001900                     __end_of___awtoft:
  4885                           	opt stack 0
  4886                           tblptru	equ	0xFF8
  4887                           tblptrh	equ	0xFF7
  4888                           tblptrl	equ	0xFF6
  4889                           tablat	equ	0xFF5
  4890                           prodh	equ	0xFF4
  4891                           prodl	equ	0xFF3
  4892                           intcon	equ	0xFF2
  4893                           intcon2	equ	0xFF1
  4894                           wreg	equ	0xFE8
  4895                           indf2	equ	0xFDF
  4896                           postinc2	equ	0xFDE
  4897                           postdec2	equ	0xFDD
  4898                           fsr2h	equ	0xFDA
  4899                           fsr2l	equ	0xFD9
  4900                           status	equ	0xFD8
  4901                           
  4902 ;; *************** function ___lltoft *****************
  4903 ;; Defined at:
  4904 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  c               4   24[COMRAM] unsigned long 
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  exp             1   32[COMRAM] unsigned char 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  3   24[COMRAM] float 
  4911 ;; Registers used:
  4912 ;;		wreg, status,2, status,0, cstack
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4918 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;Total ram usage:        9 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; Hardware stack levels required when called:    2
  4925 ;; This function calls:
  4926 ;;		___ftpack
  4927 ;; This function is called by:
  4928 ;;		_pow
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           	psect	text28
  4933  001660                     __ptext28:
  4934                           	opt stack 0
  4935  001660                     ___lltoft:
  4936                           	opt stack 24
  4937                           
  4938                           ;incstack = 0
  4939  001660  0E8E               	movlw	142
  4940  001662  6E21               	movwf	___lltoft@exp,c
  4941  001664  D006               	goto	l2346
  4942  001666                     l2344:
  4943  001666  90D8               	bcf	status,0,c
  4944  001668  321C               	rrcf	___lltoft@c+3,f,c
  4945  00166A  321B               	rrcf	___lltoft@c+2,f,c
  4946  00166C  321A               	rrcf	___lltoft@c+1,f,c
  4947  00166E  3219               	rrcf	___lltoft@c,f,c
  4948  001670  2A21               	incf	___lltoft@exp,f,c
  4949  001672                     l2346:
  4950  001672  0E00               	movlw	0
  4951  001674  1419               	andwf	___lltoft@c,w,c
  4952  001676  6E1D               	movwf	??___lltoft& (0+255),c
  4953  001678  0E00               	movlw	0
  4954  00167A  141A               	andwf	___lltoft@c+1,w,c
  4955  00167C  6E1E               	movwf	(??___lltoft+1)& (0+255),c
  4956  00167E  0E00               	movlw	0
  4957  001680  141B               	andwf	___lltoft@c+2,w,c
  4958  001682  6E1F               	movwf	(??___lltoft+2)& (0+255),c
  4959  001684  0EFF               	movlw	255
  4960  001686  141C               	andwf	___lltoft@c+3,w,c
  4961  001688  6E20               	movwf	(??___lltoft+3)& (0+255),c
  4962  00168A  501D               	movf	??___lltoft,w,c
  4963  00168C  101E               	iorwf	??___lltoft+1,w,c
  4964  00168E  101F               	iorwf	??___lltoft+2,w,c
  4965  001690  1020               	iorwf	??___lltoft+3,w,c
  4966  001692  A4D8               	btfss	status,2,c
  4967  001694  D7E8               	goto	l2344
  4968  001696  C019  F011         	movff	___lltoft@c,___ftpack@arg
  4969  00169A  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
  4970  00169E  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
  4971  0016A2  C021  F014         	movff	___lltoft@exp,___ftpack@exp
  4972  0016A6  0E00               	movlw	0
  4973  0016A8  6E15               	movwf	___ftpack@sign,c
  4974  0016AA  EC51  F009         	call	___ftpack	;wreg free
  4975  0016AE  C011  F019         	movff	?___ftpack,?___lltoft
  4976  0016B2  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
  4977  0016B6  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
  4978  0016BA  0012               	return	
  4979  0016BC                     __end_of___lltoft:
  4980                           	opt stack 0
  4981                           tblptru	equ	0xFF8
  4982                           tblptrh	equ	0xFF7
  4983                           tblptrl	equ	0xFF6
  4984                           tablat	equ	0xFF5
  4985                           prodh	equ	0xFF4
  4986                           prodl	equ	0xFF3
  4987                           intcon	equ	0xFF2
  4988                           intcon2	equ	0xFF1
  4989                           wreg	equ	0xFE8
  4990                           indf2	equ	0xFDF
  4991                           postinc2	equ	0xFDE
  4992                           postdec2	equ	0xFDD
  4993                           fsr2h	equ	0xFDA
  4994                           fsr2l	equ	0xFD9
  4995                           status	equ	0xFD8
  4996                           
  4997 ;; *************** function ___ftpack *****************
  4998 ;; Defined at:
  4999 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;  arg             3   16[COMRAM] unsigned um
  5002 ;;  exp             1   19[COMRAM] unsigned char 
  5003 ;;  sign            1   20[COMRAM] unsigned char 
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;		None
  5006 ;; Return value:  Size  Location     Type
  5007 ;;                  3   16[COMRAM] float 
  5008 ;; Registers used:
  5009 ;;		wreg, status,2, status,0
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5015 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;Total ram usage:        8 bytes
  5020 ;; Hardware stack levels used:    1
  5021 ;; Hardware stack levels required when called:    1
  5022 ;; This function calls:
  5023 ;;		Nothing
  5024 ;; This function is called by:
  5025 ;;		___altoft
  5026 ;;		___awtoft
  5027 ;;		___ftadd
  5028 ;;		___ftdiv
  5029 ;;		___ftmul
  5030 ;;		___lltoft
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           	psect	text29
  5035  0012A2                     __ptext29:
  5036                           	opt stack 0
  5037  0012A2                     ___ftpack:
  5038                           	opt stack 22
  5039                           
  5040                           ;incstack = 0
  5041  0012A2  5014               	movf	___ftpack@exp,w,c
  5042  0012A4  B4D8               	btfsc	status,2,c
  5043  0012A6  D005               	goto	l1950
  5044  0012A8  5011               	movf	___ftpack@arg,w,c
  5045  0012AA  1012               	iorwf	___ftpack@arg+1,w,c
  5046  0012AC  1013               	iorwf	___ftpack@arg+2,w,c
  5047  0012AE  A4D8               	btfss	status,2,c
  5048  0012B0  D00C               	goto	l1956
  5049  0012B2                     l1950:
  5050  0012B2  0E00               	movlw	0
  5051  0012B4  6E11               	movwf	?___ftpack,c
  5052  0012B6  0E00               	movlw	0
  5053  0012B8  6E12               	movwf	?___ftpack+1,c
  5054  0012BA  0E00               	movlw	0
  5055  0012BC  6E13               	movwf	?___ftpack+2,c
  5056  0012BE  0012               	return	
  5057  0012C0                     l1954:
  5058  0012C0  2A14               	incf	___ftpack@exp,f,c
  5059  0012C2  90D8               	bcf	status,0,c
  5060  0012C4  3213               	rrcf	___ftpack@arg+2,f,c
  5061  0012C6  3212               	rrcf	___ftpack@arg+1,f,c
  5062  0012C8  3211               	rrcf	___ftpack@arg,f,c
  5063  0012CA                     l1956:
  5064  0012CA  0E00               	movlw	0
  5065  0012CC  1411               	andwf	___ftpack@arg,w,c
  5066  0012CE  6E16               	movwf	??___ftpack& (0+255),c
  5067  0012D0  0E00               	movlw	0
  5068  0012D2  1412               	andwf	___ftpack@arg+1,w,c
  5069  0012D4  6E17               	movwf	(??___ftpack+1)& (0+255),c
  5070  0012D6  0EFE               	movlw	254
  5071  0012D8  1413               	andwf	___ftpack@arg+2,w,c
  5072  0012DA  6E18               	movwf	(??___ftpack+2)& (0+255),c
  5073  0012DC  5016               	movf	??___ftpack,w,c
  5074  0012DE  1017               	iorwf	??___ftpack+1,w,c
  5075  0012E0  1018               	iorwf	??___ftpack+2,w,c
  5076  0012E2  B4D8               	btfsc	status,2,c
  5077  0012E4  D00C               	goto	l1962
  5078  0012E6  D7EC               	goto	l1954
  5079  0012E8                     l1958:
  5080  0012E8  2A14               	incf	___ftpack@exp,f,c
  5081  0012EA  0E01               	movlw	1
  5082  0012EC  2611               	addwf	___ftpack@arg,f,c
  5083  0012EE  0E00               	movlw	0
  5084  0012F0  2212               	addwfc	___ftpack@arg+1,f,c
  5085  0012F2  0E00               	movlw	0
  5086  0012F4  2213               	addwfc	___ftpack@arg+2,f,c
  5087  0012F6  90D8               	bcf	status,0,c
  5088  0012F8  3213               	rrcf	___ftpack@arg+2,f,c
  5089  0012FA  3212               	rrcf	___ftpack@arg+1,f,c
  5090  0012FC  3211               	rrcf	___ftpack@arg,f,c
  5091  0012FE                     l1962:
  5092  0012FE  0E00               	movlw	0
  5093  001300  1411               	andwf	___ftpack@arg,w,c
  5094  001302  6E16               	movwf	??___ftpack& (0+255),c
  5095  001304  0E00               	movlw	0
  5096  001306  1412               	andwf	___ftpack@arg+1,w,c
  5097  001308  6E17               	movwf	(??___ftpack+1)& (0+255),c
  5098  00130A  0EFF               	movlw	255
  5099  00130C  1413               	andwf	___ftpack@arg+2,w,c
  5100  00130E  6E18               	movwf	(??___ftpack+2)& (0+255),c
  5101  001310  5016               	movf	??___ftpack,w,c
  5102  001312  1017               	iorwf	??___ftpack+1,w,c
  5103  001314  1018               	iorwf	??___ftpack+2,w,c
  5104  001316  B4D8               	btfsc	status,2,c
  5105  001318  D006               	goto	l1966
  5106  00131A  D7E6               	goto	l1958
  5107  00131C                     l1964:
  5108  00131C  0614               	decf	___ftpack@exp,f,c
  5109  00131E  90D8               	bcf	status,0,c
  5110  001320  3611               	rlcf	___ftpack@arg,f,c
  5111  001322  3612               	rlcf	___ftpack@arg+1,f,c
  5112  001324  3613               	rlcf	___ftpack@arg+2,f,c
  5113  001326                     l1966:
  5114  001326  BE12               	btfsc	___ftpack@arg+1,7,c
  5115  001328  D003               	goto	l478
  5116  00132A  0E02               	movlw	2
  5117  00132C  6014               	cpfslt	___ftpack@exp,c
  5118  00132E  D7F6               	goto	l1964
  5119  001330                     l478:
  5120  001330  A014               	btfss	___ftpack@exp,0,c
  5121  001332  9E12               	bcf	___ftpack@arg+1,7,c
  5122  001334  90D8               	bcf	status,0,c
  5123  001336  3214               	rrcf	___ftpack@exp,f,c
  5124  001338  5014               	movf	___ftpack@exp,w,c
  5125  00133A  1213               	iorwf	___ftpack@arg+2,f,c
  5126  00133C  5015               	movf	___ftpack@sign,w,c
  5127  00133E  A4D8               	btfss	status,2,c
  5128  001340  8E13               	bsf	___ftpack@arg+2,7,c
  5129  001342  C011  F011         	movff	___ftpack@arg,?___ftpack
  5130  001346  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  5131  00134A  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  5132  00134E  0012               	return	
  5133  001350                     __end_of___ftpack:
  5134                           	opt stack 0
  5135                           tblptru	equ	0xFF8
  5136                           tblptrh	equ	0xFF7
  5137                           tblptrl	equ	0xFF6
  5138                           tablat	equ	0xFF5
  5139                           prodh	equ	0xFF4
  5140                           prodl	equ	0xFF3
  5141                           intcon	equ	0xFF2
  5142                           intcon2	equ	0xFF1
  5143                           wreg	equ	0xFE8
  5144                           indf2	equ	0xFDF
  5145                           postinc2	equ	0xFDE
  5146                           postdec2	equ	0xFDD
  5147                           fsr2h	equ	0xFDA
  5148                           fsr2l	equ	0xFD9
  5149                           status	equ	0xFD8
  5150                           
  5151 ;; *************** function ___awdiv *****************
  5152 ;; Defined at:
  5153 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;  dividend        2   16[COMRAM] int 
  5156 ;;  divisor         2   18[COMRAM] int 
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;  quotient        2   22[COMRAM] int 
  5159 ;;  sign            1   21[COMRAM] unsigned char 
  5160 ;;  counter         1   20[COMRAM] unsigned char 
  5161 ;; Return value:  Size  Location     Type
  5162 ;;                  2   16[COMRAM] int 
  5163 ;; Registers used:
  5164 ;;		wreg, status,2, status,0
  5165 ;; Tracked objects:
  5166 ;;		On entry : 0/0
  5167 ;;		On exit  : 0/0
  5168 ;;		Unchanged: 0/0
  5169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5170 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5173 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5174 ;;Total ram usage:        8 bytes
  5175 ;; Hardware stack levels used:    1
  5176 ;; Hardware stack levels required when called:    1
  5177 ;; This function calls:
  5178 ;;		Nothing
  5179 ;; This function is called by:
  5180 ;;		_dec_to_hex
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           	psect	text30
  5185  001470                     __ptext30:
  5186                           	opt stack 0
  5187  001470                     ___awdiv:
  5188                           	opt stack 26
  5189                           
  5190                           ;incstack = 0
  5191  001470  0E00               	movlw	0
  5192  001472  6E16               	movwf	___awdiv@sign,c
  5193  001474  AE14               	btfss	___awdiv@divisor+1,7,c
  5194  001476  D006               	goto	l2488
  5195  001478  6C13               	negf	___awdiv@divisor,c
  5196  00147A  1E14               	comf	___awdiv@divisor+1,f,c
  5197  00147C  B0D8               	btfsc	status,0,c
  5198  00147E  2A14               	incf	___awdiv@divisor+1,f,c
  5199  001480  0E01               	movlw	1
  5200  001482  6E16               	movwf	___awdiv@sign,c
  5201  001484                     l2488:
  5202  001484  AE12               	btfss	___awdiv@dividend+1,7,c
  5203  001486  D006               	goto	l2494
  5204  001488  6C11               	negf	___awdiv@dividend,c
  5205  00148A  1E12               	comf	___awdiv@dividend+1,f,c
  5206  00148C  B0D8               	btfsc	status,0,c
  5207  00148E  2A12               	incf	___awdiv@dividend+1,f,c
  5208  001490  0E01               	movlw	1
  5209  001492  1A16               	xorwf	___awdiv@sign,f,c
  5210  001494                     l2494:
  5211  001494  0E00               	movlw	0
  5212  001496  6E18               	movwf	___awdiv@quotient+1,c
  5213  001498  0E00               	movlw	0
  5214  00149A  6E17               	movwf	___awdiv@quotient,c
  5215  00149C  5013               	movf	___awdiv@divisor,w,c
  5216  00149E  1014               	iorwf	___awdiv@divisor+1,w,c
  5217  0014A0  B4D8               	btfsc	status,2,c
  5218  0014A2  D01C               	goto	l2516
  5219  0014A4  0E01               	movlw	1
  5220  0014A6  6E15               	movwf	___awdiv@counter,c
  5221  0014A8  D004               	goto	l2502
  5222  0014AA                     l2500:
  5223  0014AA  90D8               	bcf	status,0,c
  5224  0014AC  3613               	rlcf	___awdiv@divisor,f,c
  5225  0014AE  3614               	rlcf	___awdiv@divisor+1,f,c
  5226  0014B0  2A15               	incf	___awdiv@counter,f,c
  5227  0014B2                     l2502:
  5228  0014B2  AE14               	btfss	___awdiv@divisor+1,7,c
  5229  0014B4  D7FA               	goto	l2500
  5230  0014B6                     l2504:
  5231  0014B6  90D8               	bcf	status,0,c
  5232  0014B8  3617               	rlcf	___awdiv@quotient,f,c
  5233  0014BA  3618               	rlcf	___awdiv@quotient+1,f,c
  5234  0014BC  5013               	movf	___awdiv@divisor,w,c
  5235  0014BE  5C11               	subwf	___awdiv@dividend,w,c
  5236  0014C0  5014               	movf	___awdiv@divisor+1,w,c
  5237  0014C2  5812               	subwfb	___awdiv@dividend+1,w,c
  5238  0014C4  A0D8               	btfss	status,0,c
  5239  0014C6  D005               	goto	l2512
  5240  0014C8  5013               	movf	___awdiv@divisor,w,c
  5241  0014CA  5E11               	subwf	___awdiv@dividend,f,c
  5242  0014CC  5014               	movf	___awdiv@divisor+1,w,c
  5243  0014CE  5A12               	subwfb	___awdiv@dividend+1,f,c
  5244  0014D0  8017               	bsf	___awdiv@quotient,0,c
  5245  0014D2                     l2512:
  5246  0014D2  90D8               	bcf	status,0,c
  5247  0014D4  3214               	rrcf	___awdiv@divisor+1,f,c
  5248  0014D6  3213               	rrcf	___awdiv@divisor,f,c
  5249  0014D8  2E15               	decfsz	___awdiv@counter,f,c
  5250  0014DA  D7ED               	goto	l2504
  5251  0014DC                     l2516:
  5252  0014DC  5016               	movf	___awdiv@sign,w,c
  5253  0014DE  B4D8               	btfsc	status,2,c
  5254  0014E0  D004               	goto	l2520
  5255  0014E2  6C17               	negf	___awdiv@quotient,c
  5256  0014E4  1E18               	comf	___awdiv@quotient+1,f,c
  5257  0014E6  B0D8               	btfsc	status,0,c
  5258  0014E8  2A18               	incf	___awdiv@quotient+1,f,c
  5259  0014EA                     l2520:
  5260  0014EA  C017  F011         	movff	___awdiv@quotient,?___awdiv
  5261  0014EE  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  5262  0014F2  0012               	return	
  5263  0014F4                     __end_of___awdiv:
  5264                           	opt stack 0
  5265                           tblptru	equ	0xFF8
  5266                           tblptrh	equ	0xFF7
  5267                           tblptrl	equ	0xFF6
  5268                           tablat	equ	0xFF5
  5269                           prodh	equ	0xFF4
  5270                           prodl	equ	0xFF3
  5271                           intcon	equ	0xFF2
  5272                           intcon2	equ	0xFF1
  5273                           wreg	equ	0xFE8
  5274                           indf2	equ	0xFDF
  5275                           postinc2	equ	0xFDE
  5276                           postdec2	equ	0xFDD
  5277                           fsr2h	equ	0xFDA
  5278                           fsr2l	equ	0xFD9
  5279                           status	equ	0xFD8
  5280                           
  5281 ;; *************** function _initLCD *****************
  5282 ;; Defined at:
  5283 ;;		line 14 in file "lcd.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;		None
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;		None
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  1    wreg      void 
  5290 ;; Registers used:
  5291 ;;		wreg, status,2, status,0, cstack
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5299 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5300 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5301 ;;Total ram usage:        1 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:    3
  5304 ;; This function calls:
  5305 ;;		_lcdInst
  5306 ;; This function is called by:
  5307 ;;		_main
  5308 ;;		_init_operation
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312                           	psect	text31
  5313  001800                     __ptext31:
  5314                           	opt stack 0
  5315  001800                     _initLCD:
  5316                           	opt stack 26
  5317                           
  5318                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  5319                           
  5320                           ;incstack = 0
  5321  001800  0E31               	movlw	49
  5322  001802  6E14               	movwf	??_initLCD& (0+255),c
  5323  001804  0EB2               	movlw	178
  5324  001806                     u2597:
  5325  001806  2EE8               	decfsz	wreg,f,c
  5326  001808  D7FE               	bra	u2597
  5327  00180A  2E14               	decfsz	??_initLCD& (0+255),f,c
  5328  00180C  D7FC               	bra	u2597
  5329  00180E  D000               	nop2	
  5330                           
  5331                           ;lcd.c: 16: lcdInst(0b00110011);
  5332  001810  0E33               	movlw	51
  5333  001812  ECD2  F00C         	call	_lcdInst
  5334                           
  5335                           ;lcd.c: 17: lcdInst(0b00110010);
  5336  001816  0E32               	movlw	50
  5337  001818  ECD2  F00C         	call	_lcdInst
  5338                           
  5339                           ;lcd.c: 18: lcdInst(0b00101000);
  5340  00181C  0E28               	movlw	40
  5341  00181E  ECD2  F00C         	call	_lcdInst
  5342                           
  5343                           ;lcd.c: 19: lcdInst(0b00001111);
  5344  001822  0E0F               	movlw	15
  5345  001824  ECD2  F00C         	call	_lcdInst
  5346                           
  5347                           ;lcd.c: 20: lcdInst(0b00000110);
  5348  001828  0E06               	movlw	6
  5349  00182A  ECD2  F00C         	call	_lcdInst
  5350                           
  5351                           ;lcd.c: 21: lcdInst(0b00000001);
  5352  00182E  0E01               	movlw	1
  5353  001830  ECD2  F00C         	call	_lcdInst
  5354                           
  5355                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  5356  001834  0E31               	movlw	49
  5357  001836  6E14               	movwf	??_initLCD& (0+255),c
  5358  001838  0EB2               	movlw	178
  5359  00183A                     u2607:
  5360  00183A  2EE8               	decfsz	wreg,f,c
  5361  00183C  D7FE               	bra	u2607
  5362  00183E  2E14               	decfsz	??_initLCD& (0+255),f,c
  5363  001840  D7FC               	bra	u2607
  5364  001842  D000               	nop2	
  5365  001844  0012               	return		;funcret
  5366  001846                     __end_of_initLCD:
  5367                           	opt stack 0
  5368                           tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           prodh	equ	0xFF4
  5373                           prodl	equ	0xFF3
  5374                           intcon	equ	0xFF2
  5375                           intcon2	equ	0xFF1
  5376                           wreg	equ	0xFE8
  5377                           indf2	equ	0xFDF
  5378                           postinc2	equ	0xFDE
  5379                           postdec2	equ	0xFDD
  5380                           fsr2h	equ	0xFDA
  5381                           fsr2l	equ	0xFD9
  5382                           status	equ	0xFD8
  5383                           
  5384 ;; *************** function _bottle_count *****************
  5385 ;; Defined at:
  5386 ;;		line 215 in file "main.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;		None
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;		None
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  1    wreg      void 
  5393 ;; Registers used:
  5394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5402 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;Total ram usage:        2 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    4
  5407 ;; This function calls:
  5408 ;;		_lcdInst
  5409 ;;		_printf
  5410 ;; This function is called by:
  5411 ;;		_main
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           	psect	text32
  5416  0007A4                     __ptext32:
  5417                           	opt stack 0
  5418  0007A4                     _bottle_count:
  5419                           	opt stack 26
  5420                           
  5421                           ;main.c: 216: while (((PORTB & 0xF0) >> 4) == 0b0010||0b0011||0b0111||0b1011||0b1111){
  5422                           
  5423                           ;incstack = 0
  5424  0007A4  D08E               	goto	l3056
  5425  0007A6                     l3022:
  5426                           
  5427                           ;main.c: 219: lcdInst(0b10000000);;
  5428  0007A6  0E80               	movlw	128
  5429  0007A8  ECD2  F00C         	call	_lcdInst
  5430                           
  5431                           ;main.c: 220: printf("Total Bottle");
  5432  0007AC  0EC3               	movlw	low STR_6
  5433  0007AE  0100               	movlb	0	; () banked
  5434  0007B0  6FAC               	movwf	printf@f& (0+255),b
  5435  0007B2  0EFC               	movlw	high STR_6
  5436  0007B4  0100               	movlb	0	; () banked
  5437  0007B6  6FAD               	movwf	(printf@f+1)& (0+255),b
  5438  0007B8  EC8F  F002         	call	_printf	;wreg free
  5439                           
  5440                           ;main.c: 221: lcdInst(0b11000000);;
  5441  0007BC  0EC0               	movlw	192
  5442  0007BE  ECD2  F00C         	call	_lcdInst
  5443                           
  5444                           ;main.c: 222: printf("Count: __ ");
  5445  0007C2  0EEA               	movlw	low STR_7
  5446  0007C4  0100               	movlb	0	; () banked
  5447  0007C6  6FAC               	movwf	printf@f& (0+255),b
  5448  0007C8  0EFC               	movlw	high STR_7
  5449  0007CA  0100               	movlb	0	; () banked
  5450  0007CC  6FAD               	movwf	(printf@f+1)& (0+255),b
  5451  0007CE  EC8F  F002         	call	_printf	;wreg free
  5452  0007D2                     l3028:
  5453                           
  5454                           ;main.c: 224: lcdInst(0b10000000);;
  5455  0007D2  0E80               	movlw	128
  5456  0007D4  ECD2  F00C         	call	_lcdInst
  5457                           
  5458                           ;main.c: 225: printf("YOP With Cap");
  5459  0007D8  0ED0               	movlw	low STR_8
  5460  0007DA  0100               	movlb	0	; () banked
  5461  0007DC  6FAC               	movwf	printf@f& (0+255),b
  5462  0007DE  0EFC               	movlw	high STR_8
  5463  0007E0  0100               	movlb	0	; () banked
  5464  0007E2  6FAD               	movwf	(printf@f+1)& (0+255),b
  5465  0007E4  EC8F  F002         	call	_printf	;wreg free
  5466                           
  5467                           ;main.c: 226: lcdInst(0b11000000);;
  5468  0007E8  0EC0               	movlw	192
  5469  0007EA  ECD2  F00C         	call	_lcdInst
  5470                           
  5471                           ;main.c: 227: printf("Count: __ ");
  5472  0007EE  0EEA               	movlw	low STR_7
  5473  0007F0  0100               	movlb	0	; () banked
  5474  0007F2  6FAC               	movwf	printf@f& (0+255),b
  5475  0007F4  0EFC               	movlw	high STR_7
  5476  0007F6  0100               	movlb	0	; () banked
  5477  0007F8  6FAD               	movwf	(printf@f+1)& (0+255),b
  5478  0007FA  EC8F  F002         	call	_printf	;wreg free
  5479                           
  5480                           ;main.c: 228: break;
  5481  0007FE  D061               	goto	l3056
  5482  000800                     l3034:
  5483                           
  5484                           ;main.c: 230: lcdInst(0b10000000);;
  5485  000800  0E80               	movlw	128
  5486  000802  ECD2  F00C         	call	_lcdInst
  5487                           
  5488                           ;main.c: 231: printf("YOP With No Cap");
  5489  000806  0EA5               	movlw	low STR_10
  5490  000808  0100               	movlb	0	; () banked
  5491  00080A  6FAC               	movwf	printf@f& (0+255),b
  5492  00080C  0EFC               	movlw	high STR_10
  5493  00080E  0100               	movlb	0	; () banked
  5494  000810  6FAD               	movwf	(printf@f+1)& (0+255),b
  5495  000812  EC8F  F002         	call	_printf	;wreg free
  5496                           
  5497                           ;main.c: 232: lcdInst(0b11000000);;
  5498  000816  0EC0               	movlw	192
  5499  000818  ECD2  F00C         	call	_lcdInst
  5500                           
  5501                           ;main.c: 233: printf("Count: __ ");
  5502  00081C  0EEA               	movlw	low STR_7
  5503  00081E  0100               	movlb	0	; () banked
  5504  000820  6FAC               	movwf	printf@f& (0+255),b
  5505  000822  0EFC               	movlw	high STR_7
  5506  000824  0100               	movlb	0	; () banked
  5507  000826  6FAD               	movwf	(printf@f+1)& (0+255),b
  5508  000828  EC8F  F002         	call	_printf	;wreg free
  5509                           
  5510                           ;main.c: 234: break;
  5511  00082C  D04A               	goto	l3056
  5512  00082E                     l3040:
  5513                           
  5514                           ;main.c: 236: lcdInst(0b10000000);;
  5515  00082E  0E80               	movlw	128
  5516  000830  ECD2  F00C         	call	_lcdInst
  5517                           
  5518                           ;main.c: 237: printf("ESKA With Cap");
  5519  000834  0EB5               	movlw	low STR_12
  5520  000836  0100               	movlb	0	; () banked
  5521  000838  6FAC               	movwf	printf@f& (0+255),b
  5522  00083A  0EFC               	movlw	high STR_12
  5523  00083C  0100               	movlb	0	; () banked
  5524  00083E  6FAD               	movwf	(printf@f+1)& (0+255),b
  5525  000840  EC8F  F002         	call	_printf	;wreg free
  5526                           
  5527                           ;main.c: 238: lcdInst(0b11000000);;
  5528  000844  0EC0               	movlw	192
  5529  000846  ECD2  F00C         	call	_lcdInst
  5530                           
  5531                           ;main.c: 239: printf("Count: __ ");
  5532  00084A  0EEA               	movlw	low STR_7
  5533  00084C  0100               	movlb	0	; () banked
  5534  00084E  6FAC               	movwf	printf@f& (0+255),b
  5535  000850  0EFC               	movlw	high STR_7
  5536  000852  0100               	movlb	0	; () banked
  5537  000854  6FAD               	movwf	(printf@f+1)& (0+255),b
  5538  000856  EC8F  F002         	call	_printf	;wreg free
  5539                           
  5540                           ;main.c: 240: break;
  5541  00085A  D033               	goto	l3056
  5542  00085C                     l3046:
  5543                           
  5544                           ;main.c: 242: lcdInst(0b10000000);;
  5545  00085C  0E80               	movlw	128
  5546  00085E  ECD2  F00C         	call	_lcdInst
  5547                           
  5548                           ;main.c: 243: printf("ESKA With No Cap");
  5549  000862  0E84               	movlw	low STR_14
  5550  000864  0100               	movlb	0	; () banked
  5551  000866  6FAC               	movwf	printf@f& (0+255),b
  5552  000868  0EFC               	movlw	high STR_14
  5553  00086A  0100               	movlb	0	; () banked
  5554  00086C  6FAD               	movwf	(printf@f+1)& (0+255),b
  5555  00086E  EC8F  F002         	call	_printf	;wreg free
  5556                           
  5557                           ;main.c: 244: lcdInst(0b11000000);;
  5558  000872  0EC0               	movlw	192
  5559  000874  ECD2  F00C         	call	_lcdInst
  5560                           
  5561                           ;main.c: 245: printf("Count: __ ");
  5562  000878  0EEA               	movlw	low STR_7
  5563  00087A  0100               	movlb	0	; () banked
  5564  00087C  6FAC               	movwf	printf@f& (0+255),b
  5565  00087E  0EFC               	movlw	high STR_7
  5566  000880  0100               	movlb	0	; () banked
  5567  000882  6FAD               	movwf	(printf@f+1)& (0+255),b
  5568  000884  EC8F  F002         	call	_printf	;wreg free
  5569                           
  5570                           ;main.c: 247: }
  5571                           
  5572                           ;main.c: 246: break;
  5573  000888  D01C               	goto	l3056
  5574  00088A                     l3054:
  5575  00088A  3881               	swapf	3969,w,c	;volatile
  5576  00088C  0B0F               	andlw	15
  5577  00088E  0B0F               	andlw	15
  5578  000890  0100               	movlb	0	; () banked
  5579  000892  6FB7               	movwf	??_bottle_count& (0+255),b
  5580  000894  6BB8               	clrf	(??_bottle_count+1)& (0+255),b
  5581                           
  5582                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5583                           ; Switch size 1, requested type "space"
  5584                           ; Number of cases is 1, Range of values is 0 to 0
  5585                           ; switch strategies available:
  5586                           ; Name         Instructions Cycles
  5587                           ; simple_byte            4     3 (average)
  5588                           ;	Chosen strategy is simple_byte
  5589  000896  0100               	movlb	0	; () banked
  5590  000898  51B8               	movf	(??_bottle_count+1)& (0+255),w,b
  5591  00089A  0A00               	xorlw	0	; case 0
  5592  00089C  A4D8               	btfss	status,2,c
  5593  00089E  D011               	goto	l3056
  5594                           
  5595                           ; BSR set to: 0
  5596                           ; Switch size 1, requested type "space"
  5597                           ; Number of cases is 5, Range of values is 2 to 15
  5598                           ; switch strategies available:
  5599                           ; Name         Instructions Cycles
  5600                           ; simple_byte           16     9 (average)
  5601                           ;	Chosen strategy is simple_byte
  5602  0008A0  0100               	movlb	0	; () banked
  5603  0008A2  51B7               	movf	??_bottle_count& (0+255),w,b
  5604  0008A4  0A02               	xorlw	2	; case 2
  5605  0008A6  B4D8               	btfsc	status,2,c
  5606  0008A8  D77E               	goto	l3022
  5607  0008AA  0A01               	xorlw	1	; case 3
  5608  0008AC  B4D8               	btfsc	status,2,c
  5609  0008AE  D791               	goto	l3028
  5610  0008B0  0A04               	xorlw	4	; case 7
  5611  0008B2  B4D8               	btfsc	status,2,c
  5612  0008B4  D7A5               	goto	l3034
  5613  0008B6  0A0C               	xorlw	12	; case 11
  5614  0008B8  B4D8               	btfsc	status,2,c
  5615  0008BA  D7B9               	goto	l3040
  5616  0008BC  0A04               	xorlw	4	; case 15
  5617  0008BE  B4D8               	btfsc	status,2,c
  5618  0008C0  D7CD               	goto	l3046
  5619  0008C2                     l3056:
  5620  0008C2  5081               	movf	3969,w,c	;volatile
  5621  0008C4  D7E2               	goto	l3054
  5622  0008C6                     __end_of_bottle_count:
  5623                           	opt stack 0
  5624                           tblptru	equ	0xFF8
  5625                           tblptrh	equ	0xFF7
  5626                           tblptrl	equ	0xFF6
  5627                           tablat	equ	0xFF5
  5628                           prodh	equ	0xFF4
  5629                           prodl	equ	0xFF3
  5630                           intcon	equ	0xFF2
  5631                           intcon2	equ	0xFF1
  5632                           wreg	equ	0xFE8
  5633                           indf2	equ	0xFDF
  5634                           postinc2	equ	0xFDE
  5635                           postdec2	equ	0xFDD
  5636                           fsr2h	equ	0xFDA
  5637                           fsr2l	equ	0xFD9
  5638                           status	equ	0xFD8
  5639                           
  5640 ;; *************** function _printf *****************
  5641 ;; Defined at:
  5642 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;  f               2   44[BANK0 ] PTR const unsigned char 
  5645 ;;		 -> STR_15(11), STR_14(17), STR_13(11), STR_12(14), 
  5646 ;;		 -> STR_11(11), STR_10(16), STR_9(11), STR_8(13), 
  5647 ;;		 -> STR_7(11), STR_6(13), STR_5(10), STR_4(16), 
  5648 ;;		 -> STR_3(13), STR_2(17), STR_1(27), 
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;  tmpval          4    0        struct .
  5651 ;;  cp              3    0        PTR const unsigned char 
  5652 ;;  val             2   52[BANK0 ] unsigned int 
  5653 ;;  ap              2   48[BANK0 ] PTR void [1]
  5654 ;;		 -> ?_printf(2), 
  5655 ;;  len             2    0        unsigned int 
  5656 ;;  c               1   54[BANK0 ] char 
  5657 ;;  prec            1   51[BANK0 ] char 
  5658 ;;  flag            1   50[BANK0 ] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  2   44[BANK0 ] int 
  5661 ;; Registers used:
  5662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5668 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;      Totals:         1      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;Total ram usage:       12 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    3
  5675 ;; This function calls:
  5676 ;;		___lwdiv
  5677 ;;		___lwmod
  5678 ;;		_putch
  5679 ;; This function is called by:
  5680 ;;		_main
  5681 ;;		_init_operation
  5682 ;;		_runtime
  5683 ;;		_bottle_count
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           	psect	text33
  5688  00051E                     __ptext33:
  5689                           	opt stack 0
  5690  00051E                     _printf:
  5691                           	opt stack 26
  5692                           
  5693                           ;doprnt.c: 466: va_list ap;
  5694                           ;doprnt.c: 499: signed char c;
  5695                           ;doprnt.c: 506: signed char prec;
  5696                           ;doprnt.c: 508: unsigned char flag;
  5697                           ;doprnt.c: 523: union {
  5698                           ;doprnt.c: 524: unsigned long vd;
  5699                           ;doprnt.c: 525: double integ;
  5700                           ;doprnt.c: 526: } tmpval;
  5701                           ;doprnt.c: 528: unsigned int val;
  5702                           ;doprnt.c: 529: unsigned len;
  5703                           ;doprnt.c: 530: const char * cp;
  5704                           ;doprnt.c: 533: *ap = __va_start();
  5705                           
  5706                           ;incstack = 0
  5707  00051E  0EAE               	movlw	low (?_printf+2)
  5708  000520  0100               	movlb	0	; () banked
  5709  000522  6FB0               	movwf	printf@ap& (0+255),b
  5710  000524  0E00               	movlw	high (?_printf+2)
  5711  000526  0100               	movlb	0	; () banked
  5712  000528  6FB1               	movwf	(printf@ap+1)& (0+255),b
  5713                           
  5714                           ;doprnt.c: 536: while(c = *f++) {
  5715  00052A  D091               	goto	l2984
  5716  00052C                     l2938:
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;doprnt.c: 538: if(c != '%')
  5720  00052C  0E25               	movlw	37
  5721  00052E  0100               	movlb	0	; () banked
  5722  000530  19B6               	xorwf	printf@c& (0+255),w,b
  5723  000532  B4D8               	btfsc	status,2,c
  5724  000534  D005               	goto	l2942
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;doprnt.c: 540: {
  5728                           ;doprnt.c: 541: (putch(c) );
  5729  000536  0100               	movlb	0	; () banked
  5730  000538  51B6               	movf	printf@c& (0+255),w,b
  5731  00053A  ECCC  F00C         	call	_putch
  5732                           
  5733                           ;doprnt.c: 542: continue;
  5734  00053E  D087               	goto	l2984
  5735  000540                     l2942:
  5736                           
  5737                           ;doprnt.c: 543: }
  5738                           ;doprnt.c: 548: flag = 0;
  5739  000540  0E00               	movlw	0
  5740  000542  0100               	movlb	0	; () banked
  5741  000544  6FB2               	movwf	printf@flag& (0+255),b
  5742                           
  5743                           ; BSR set to: 0
  5744                           
  5745                           ; BSR set to: 0
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;doprnt.c: 822: }
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;doprnt.c: 813: continue;
  5752                           
  5753                           ;doprnt.c: 802: default:
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;doprnt.c: 698: case 'i':
  5757                           ;doprnt.c: 699: break;
  5758                           
  5759                           ; BSR set to: 0
  5760                           
  5761                           ;doprnt.c: 697: case 'd':
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;doprnt.c: 638: goto alldone;
  5765                           
  5766                           ;doprnt.c: 637: case 0:
  5767                           
  5768                           ;doprnt.c: 635: switch(c = *f++) {
  5769  000546  C0AC  FFF6         	movff	printf@f,tblptrl
  5770  00054A  C0AD  FFF7         	movff	printf@f+1,tblptrh
  5771  00054E  0100               	movlb	0	; () banked
  5772  000550  4BAC               	infsnz	printf@f& (0+255),f,b
  5773  000552  2BAD               	incf	(printf@f+1)& (0+255),f,b
  5774  000554                     	if	0	;tblptru may be non-zero
  5775  000554                     	endif
  5776  000554                     	if	0	;tblptru may be non-zero
  5777  000554                     	endif
  5778  000554  0008               	tblrd		*
  5779  000556  CFF5 F0B6          	movff	tablat,printf@c
  5780  00055A  0100               	movlb	0	; () banked
  5781  00055C  51B6               	movf	printf@c& (0+255),w,b
  5782                           
  5783                           ; Switch size 1, requested type "space"
  5784                           ; Number of cases is 3, Range of values is 0 to 105
  5785                           ; switch strategies available:
  5786                           ; Name         Instructions Cycles
  5787                           ; simple_byte           10     6 (average)
  5788                           ;	Chosen strategy is simple_byte
  5789  00055E  0A00               	xorlw	0	; case 0
  5790  000560  B4D8               	btfsc	status,2,c
  5791  000562  0012               	return	
  5792  000564  0A64               	xorlw	100	; case 100
  5793  000566  B4D8               	btfsc	status,2,c
  5794  000568  D003               	goto	l2948
  5795  00056A  0A0D               	xorlw	13	; case 105
  5796  00056C  A4D8               	btfss	status,2,c
  5797  00056E  D06F               	goto	l2984
  5798  000570                     l2948:
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;doprnt.c: 1253: {
  5802                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5803  000570  C0B0  FFD9         	movff	printf@ap,fsr2l
  5804  000574  C0B1  FFDA         	movff	printf@ap+1,fsr2h
  5805  000578  CFDE F0B4          	movff	postinc2,printf@val
  5806  00057C  CFDD F0B5          	movff	postdec2,printf@val+1
  5807                           
  5808                           ; BSR set to: 0
  5809  000580  0E02               	movlw	2
  5810  000582  0100               	movlb	0	; () banked
  5811  000584  27B0               	addwf	printf@ap& (0+255),f,b
  5812  000586  0E00               	movlw	0
  5813  000588  23B1               	addwfc	(printf@ap+1)& (0+255),f,b
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;doprnt.c: 1261: if((int)val < 0) {
  5817  00058A  0100               	movlb	0	; () banked
  5818  00058C  AFB5               	btfss	(printf@val+1)& (0+255),7,b
  5819  00058E  D008               	goto	l2958
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;doprnt.c: 1262: flag |= 0x03;
  5823  000590  0E03               	movlw	3
  5824  000592  0100               	movlb	0	; () banked
  5825  000594  13B2               	iorwf	printf@flag& (0+255),f,b
  5826                           
  5827                           ; BSR set to: 0
  5828                           ;doprnt.c: 1263: val = -val;
  5829  000596  0100               	movlb	0	; () banked
  5830  000598  6DB4               	negf	printf@val& (0+255),b
  5831  00059A  1FB5               	comf	(printf@val+1)& (0+255),f,b
  5832  00059C  B0D8               	btfsc	status,0,c
  5833  00059E  2BB5               	incf	(printf@val+1)& (0+255),f,b
  5834  0005A0                     l2958:
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;doprnt.c: 1264: }
  5838                           ;doprnt.c: 1266: }
  5839                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5840  0005A0  0E01               	movlw	1
  5841  0005A2  0100               	movlb	0	; () banked
  5842  0005A4  6FB6               	movwf	printf@c& (0+255),b
  5843  0005A6                     l2960:
  5844                           
  5845                           ; BSR set to: 0
  5846  0005A6  0E05               	movlw	5
  5847  0005A8  0100               	movlb	0	; () banked
  5848  0005AA  19B6               	xorwf	printf@c& (0+255),w,b
  5849  0005AC  B4D8               	btfsc	status,2,c
  5850  0005AE  D016               	goto	l2972
  5851                           
  5852                           ; BSR set to: 0
  5853                           ;doprnt.c: 1306: if(val < dpowers[c])
  5854                           
  5855                           ; BSR set to: 0
  5856                           
  5857                           ; BSR set to: 0
  5858  0005B0  0100               	movlb	0	; () banked
  5859  0005B2  51B6               	movf	printf@c& (0+255),w,b
  5860  0005B4  0D02               	mullw	2
  5861  0005B6  0E0E               	movlw	low _dpowers
  5862  0005B8  24F3               	addwf	prodl,w,c
  5863  0005BA  6EF6               	movwf	tblptrl,c
  5864  0005BC  0EFC               	movlw	high _dpowers
  5865  0005BE  20F4               	addwfc	prodh,w,c
  5866  0005C0  6EF7               	movwf	tblptrh,c
  5867  0005C2                     	if	0	;There are less than 3 active tblptr bytes
  5868  0005C2                     	endif
  5869  0005C2  0009               	tblrd		*+
  5870  0005C4  50F5               	movf	tablat,w,c
  5871  0005C6  0100               	movlb	0	; () banked
  5872  0005C8  5DB4               	subwf	printf@val& (0+255),w,b
  5873  0005CA  0009               	tblrd		*+
  5874  0005CC  50F5               	movf	tablat,w,c
  5875  0005CE  0100               	movlb	0	; () banked
  5876  0005D0  59B5               	subwfb	(printf@val+1)& (0+255),w,b
  5877  0005D2  A0D8               	btfss	status,0,c
  5878  0005D4  D003               	goto	l2972
  5879                           
  5880                           ; BSR set to: 0
  5881                           
  5882                           ; BSR set to: 0
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;doprnt.c: 1307: break;
  5886  0005D6  0100               	movlb	0	; () banked
  5887  0005D8  2BB6               	incf	printf@c& (0+255),f,b
  5888  0005DA  D7E5               	goto	l2960
  5889  0005DC                     l2972:
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;doprnt.c: 1422: {
  5893                           ;doprnt.c: 1438: if(flag & 0x03)
  5894  0005DC  C0B2  F06B         	movff	printf@flag,??_printf
  5895  0005E0  0E03               	movlw	3
  5896  0005E2  166B               	andwf	??_printf,f,c
  5897  0005E4  B4D8               	btfsc	status,2,c
  5898  0005E6  D003               	goto	l2976
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;doprnt.c: 1439: (putch('-') );
  5902  0005E8  0E2D               	movlw	45
  5903  0005EA  ECCC  F00C         	call	_putch
  5904  0005EE                     l2976:
  5905                           
  5906                           ;doprnt.c: 1469: }
  5907                           ;doprnt.c: 1472: prec = c;
  5908  0005EE  C0B6  F0B3         	movff	printf@c,printf@prec
  5909                           
  5910                           ;doprnt.c: 1474: while(prec--) {
  5911  0005F2  D027               	goto	l2982
  5912  0005F4                     l2978:
  5913                           
  5914                           ;doprnt.c: 1478: {
  5915                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5916  0005F4  0100               	movlb	0	; () banked
  5917  0005F6  51B3               	movf	printf@prec& (0+255),w,b
  5918  0005F8  0D02               	mullw	2
  5919  0005FA  0E0E               	movlw	low _dpowers
  5920  0005FC  24F3               	addwf	prodl,w,c
  5921  0005FE  6EF6               	movwf	tblptrl,c
  5922  000600  0EFC               	movlw	high _dpowers
  5923  000602  20F4               	addwfc	prodh,w,c
  5924  000604  6EF7               	movwf	tblptrh,c
  5925  000606                     	if	0	;There are less than 3 active tblptr bytes
  5926  000606                     	endif
  5927  000606  0009               	tblrd		*+
  5928  000608  CFF5 F013          	movff	tablat,___lwdiv@divisor
  5929  00060C  000A               	tblrd		*-
  5930  00060E  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  5931  000612  C0B4  F011         	movff	printf@val,___lwdiv@dividend
  5932  000616  C0B5  F012         	movff	printf@val+1,___lwdiv@dividend+1
  5933  00061A  EC8B  F00B         	call	___lwdiv	;wreg free
  5934  00061E  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  5935  000622  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  5936  000626  0E00               	movlw	0
  5937  000628  6E1B               	movwf	___lwmod@divisor+1,c
  5938  00062A  0E0A               	movlw	10
  5939  00062C  6E1A               	movwf	___lwmod@divisor,c
  5940  00062E  EC23  F00C         	call	___lwmod	;wreg free
  5941  000632  5018               	movf	?___lwmod,w,c
  5942  000634  0F30               	addlw	48
  5943  000636  0100               	movlb	0	; () banked
  5944  000638  6FB6               	movwf	printf@c& (0+255),b
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;doprnt.c: 1523: }
  5948                           ;doprnt.c: 1524: (putch(c) );
  5949  00063A  0100               	movlb	0	; () banked
  5950  00063C  51B6               	movf	printf@c& (0+255),w,b
  5951  00063E  ECCC  F00C         	call	_putch
  5952  000642                     l2982:
  5953  000642  0100               	movlb	0	; () banked
  5954  000644  07B3               	decf	printf@prec& (0+255),f,b
  5955  000646  0100               	movlb	0	; () banked
  5956  000648  29B3               	incf	printf@prec& (0+255),w,b
  5957  00064A  A4D8               	btfss	status,2,c
  5958  00064C  D7D3               	goto	l2978
  5959  00064E                     l2984:
  5960  00064E  C0AC  FFF6         	movff	printf@f,tblptrl
  5961  000652  C0AD  FFF7         	movff	printf@f+1,tblptrh
  5962  000656  0100               	movlb	0	; () banked
  5963  000658  4BAC               	infsnz	printf@f& (0+255),f,b
  5964  00065A  2BAD               	incf	(printf@f+1)& (0+255),f,b
  5965  00065C                     	if	0	;tblptru may be non-zero
  5966  00065C                     	endif
  5967  00065C                     	if	0	;tblptru may be non-zero
  5968  00065C                     	endif
  5969  00065C  0008               	tblrd		*
  5970  00065E  CFF5 F0B6          	movff	tablat,printf@c
  5971  000662  0100               	movlb	0	; () banked
  5972  000664  51B6               	movf	printf@c& (0+255),w,b
  5973  000666  B4D8               	btfsc	status,2,c
  5974  000668  0012               	return	
  5975  00066A  D760               	goto	l2938
  5976  00066C                     __end_of_printf:
  5977                           	opt stack 0
  5978                           tblptru	equ	0xFF8
  5979                           tblptrh	equ	0xFF7
  5980                           tblptrl	equ	0xFF6
  5981                           tablat	equ	0xFF5
  5982                           prodh	equ	0xFF4
  5983                           prodl	equ	0xFF3
  5984                           intcon	equ	0xFF2
  5985                           intcon2	equ	0xFF1
  5986                           wreg	equ	0xFE8
  5987                           indf2	equ	0xFDF
  5988                           postinc2	equ	0xFDE
  5989                           postdec2	equ	0xFDD
  5990                           fsr2h	equ	0xFDA
  5991                           fsr2l	equ	0xFD9
  5992                           status	equ	0xFD8
  5993                           
  5994 ;; *************** function _putch *****************
  5995 ;; Defined at:
  5996 ;;		line 30 in file "lcd.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;  data            1    wreg     unsigned char 
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;  data            1   18[COMRAM] unsigned char 
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  1    wreg      void 
  6003 ;; Registers used:
  6004 ;;		wreg, status,2, status,0, cstack
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6013 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6014 ;;Total ram usage:        1 bytes
  6015 ;; Hardware stack levels used:    1
  6016 ;; Hardware stack levels required when called:    2
  6017 ;; This function calls:
  6018 ;;		_lcdNibble
  6019 ;; This function is called by:
  6020 ;;		_printf
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           	psect	text34
  6025  001998                     __ptext34:
  6026                           	opt stack 0
  6027  001998                     _putch:
  6028                           	opt stack 26
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;incstack = 0
  6032                           ;putch@data stored from wreg
  6033  001998  6E13               	movwf	putch@data,c
  6034                           
  6035                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  6036  00199A  848C               	bsf	3980,2,c	;volatile
  6037                           
  6038                           ;lcd.c: 32: lcdNibble(data);
  6039  00199C  5013               	movf	putch@data,w,c
  6040  00199E  ECB4  F00B         	call	_lcdNibble
  6041  0019A2  0012               	return		;funcret
  6042  0019A4                     __end_of_putch:
  6043                           	opt stack 0
  6044                           tblptru	equ	0xFF8
  6045                           tblptrh	equ	0xFF7
  6046                           tblptrl	equ	0xFF6
  6047                           tablat	equ	0xFF5
  6048                           prodh	equ	0xFF4
  6049                           prodl	equ	0xFF3
  6050                           intcon	equ	0xFF2
  6051                           intcon2	equ	0xFF1
  6052                           wreg	equ	0xFE8
  6053                           indf2	equ	0xFDF
  6054                           postinc2	equ	0xFDE
  6055                           postdec2	equ	0xFDD
  6056                           fsr2h	equ	0xFDA
  6057                           fsr2l	equ	0xFD9
  6058                           status	equ	0xFD8
  6059                           
  6060 ;; *************** function ___lwmod *****************
  6061 ;; Defined at:
  6062 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;  dividend        2   23[COMRAM] unsigned int 
  6065 ;;  divisor         2   25[COMRAM] unsigned int 
  6066 ;; Auto vars:     Size  Location     Type
  6067 ;;  counter         1   27[COMRAM] unsigned char 
  6068 ;; Return value:  Size  Location     Type
  6069 ;;                  2   23[COMRAM] unsigned int 
  6070 ;; Registers used:
  6071 ;;		wreg, status,2, status,0
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6077 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6078 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;Total ram usage:        5 bytes
  6082 ;; Hardware stack levels used:    1
  6083 ;; Hardware stack levels required when called:    1
  6084 ;; This function calls:
  6085 ;;		Nothing
  6086 ;; This function is called by:
  6087 ;;		_printf
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           	psect	text35
  6092  001846                     __ptext35:
  6093                           	opt stack 0
  6094  001846                     ___lwmod:
  6095                           	opt stack 27
  6096                           
  6097                           ;incstack = 0
  6098  001846  501A               	movf	___lwmod@divisor,w,c
  6099  001848  101B               	iorwf	___lwmod@divisor+1,w,c
  6100  00184A  B4D8               	btfsc	status,2,c
  6101  00184C  D018               	goto	l666
  6102  00184E  0E01               	movlw	1
  6103  001850  6E1C               	movwf	___lwmod@counter,c
  6104  001852  D004               	goto	l2604
  6105  001854                     l2602:
  6106  001854  90D8               	bcf	status,0,c
  6107  001856  361A               	rlcf	___lwmod@divisor,f,c
  6108  001858  361B               	rlcf	___lwmod@divisor+1,f,c
  6109  00185A  2A1C               	incf	___lwmod@counter,f,c
  6110  00185C                     l2604:
  6111  00185C  AE1B               	btfss	___lwmod@divisor+1,7,c
  6112  00185E  D7FA               	goto	l2602
  6113  001860                     l2606:
  6114  001860  501A               	movf	___lwmod@divisor,w,c
  6115  001862  5C18               	subwf	___lwmod@dividend,w,c
  6116  001864  501B               	movf	___lwmod@divisor+1,w,c
  6117  001866  5819               	subwfb	___lwmod@dividend+1,w,c
  6118  001868  A0D8               	btfss	status,0,c
  6119  00186A  D004               	goto	l2610
  6120  00186C  501A               	movf	___lwmod@divisor,w,c
  6121  00186E  5E18               	subwf	___lwmod@dividend,f,c
  6122  001870  501B               	movf	___lwmod@divisor+1,w,c
  6123  001872  5A19               	subwfb	___lwmod@dividend+1,f,c
  6124  001874                     l2610:
  6125  001874  90D8               	bcf	status,0,c
  6126  001876  321B               	rrcf	___lwmod@divisor+1,f,c
  6127  001878  321A               	rrcf	___lwmod@divisor,f,c
  6128  00187A  2E1C               	decfsz	___lwmod@counter,f,c
  6129  00187C  D7F1               	goto	l2606
  6130  00187E                     l666:
  6131  00187E  C018  F018         	movff	___lwmod@dividend,?___lwmod
  6132  001882  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  6133  001886  0012               	return		;funcret
  6134  001888                     __end_of___lwmod:
  6135                           	opt stack 0
  6136                           tblptru	equ	0xFF8
  6137                           tblptrh	equ	0xFF7
  6138                           tblptrl	equ	0xFF6
  6139                           tablat	equ	0xFF5
  6140                           prodh	equ	0xFF4
  6141                           prodl	equ	0xFF3
  6142                           intcon	equ	0xFF2
  6143                           intcon2	equ	0xFF1
  6144                           wreg	equ	0xFE8
  6145                           indf2	equ	0xFDF
  6146                           postinc2	equ	0xFDE
  6147                           postdec2	equ	0xFDD
  6148                           fsr2h	equ	0xFDA
  6149                           fsr2l	equ	0xFD9
  6150                           status	equ	0xFD8
  6151                           
  6152 ;; *************** function ___lwdiv *****************
  6153 ;; Defined at:
  6154 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;  dividend        2   16[COMRAM] unsigned int 
  6157 ;;  divisor         2   18[COMRAM] unsigned int 
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;  quotient        2   20[COMRAM] unsigned int 
  6160 ;;  counter         1   22[COMRAM] unsigned char 
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  2   16[COMRAM] unsigned int 
  6163 ;; Registers used:
  6164 ;;		wreg, status,2, status,0
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6170 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6171 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;Total ram usage:        7 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:    1
  6177 ;; This function calls:
  6178 ;;		Nothing
  6179 ;; This function is called by:
  6180 ;;		_printf
  6181 ;; This function uses a non-reentrant model
  6182 ;;
  6183                           
  6184                           	psect	text36
  6185  001716                     __ptext36:
  6186                           	opt stack 0
  6187  001716                     ___lwdiv:
  6188                           	opt stack 27
  6189                           
  6190                           ;incstack = 0
  6191  001716  0E00               	movlw	0
  6192  001718  6E16               	movwf	___lwdiv@quotient+1,c
  6193  00171A  0E00               	movlw	0
  6194  00171C  6E15               	movwf	___lwdiv@quotient,c
  6195  00171E  5013               	movf	___lwdiv@divisor,w,c
  6196  001720  1014               	iorwf	___lwdiv@divisor+1,w,c
  6197  001722  B4D8               	btfsc	status,2,c
  6198  001724  D01C               	goto	l656
  6199  001726  0E01               	movlw	1
  6200  001728  6E17               	movwf	___lwdiv@counter,c
  6201  00172A  D004               	goto	l2584
  6202  00172C                     l2582:
  6203  00172C  90D8               	bcf	status,0,c
  6204  00172E  3613               	rlcf	___lwdiv@divisor,f,c
  6205  001730  3614               	rlcf	___lwdiv@divisor+1,f,c
  6206  001732  2A17               	incf	___lwdiv@counter,f,c
  6207  001734                     l2584:
  6208  001734  AE14               	btfss	___lwdiv@divisor+1,7,c
  6209  001736  D7FA               	goto	l2582
  6210  001738                     l2586:
  6211  001738  90D8               	bcf	status,0,c
  6212  00173A  3615               	rlcf	___lwdiv@quotient,f,c
  6213  00173C  3616               	rlcf	___lwdiv@quotient+1,f,c
  6214  00173E  5013               	movf	___lwdiv@divisor,w,c
  6215  001740  5C11               	subwf	___lwdiv@dividend,w,c
  6216  001742  5014               	movf	___lwdiv@divisor+1,w,c
  6217  001744  5812               	subwfb	___lwdiv@dividend+1,w,c
  6218  001746  A0D8               	btfss	status,0,c
  6219  001748  D005               	goto	l2594
  6220  00174A  5013               	movf	___lwdiv@divisor,w,c
  6221  00174C  5E11               	subwf	___lwdiv@dividend,f,c
  6222  00174E  5014               	movf	___lwdiv@divisor+1,w,c
  6223  001750  5A12               	subwfb	___lwdiv@dividend+1,f,c
  6224  001752  8015               	bsf	___lwdiv@quotient,0,c
  6225  001754                     l2594:
  6226  001754  90D8               	bcf	status,0,c
  6227  001756  3214               	rrcf	___lwdiv@divisor+1,f,c
  6228  001758  3213               	rrcf	___lwdiv@divisor,f,c
  6229  00175A  2E17               	decfsz	___lwdiv@counter,f,c
  6230  00175C  D7ED               	goto	l2586
  6231  00175E                     l656:
  6232  00175E  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
  6233  001762  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6234  001766  0012               	return		;funcret
  6235  001768                     __end_of___lwdiv:
  6236                           	opt stack 0
  6237                           tblptru	equ	0xFF8
  6238                           tblptrh	equ	0xFF7
  6239                           tblptrl	equ	0xFF6
  6240                           tablat	equ	0xFF5
  6241                           prodh	equ	0xFF4
  6242                           prodl	equ	0xFF3
  6243                           intcon	equ	0xFF2
  6244                           intcon2	equ	0xFF1
  6245                           wreg	equ	0xFE8
  6246                           indf2	equ	0xFDF
  6247                           postinc2	equ	0xFDE
  6248                           postdec2	equ	0xFDD
  6249                           fsr2h	equ	0xFDA
  6250                           fsr2l	equ	0xFD9
  6251                           status	equ	0xFD8
  6252                           
  6253 ;; *************** function _lcdInst *****************
  6254 ;; Defined at:
  6255 ;;		line 25 in file "lcd.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;  data            1    wreg     unsigned char 
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;  data            1   18[COMRAM] unsigned char 
  6260 ;; Return value:  Size  Location     Type
  6261 ;;                  1    wreg      void 
  6262 ;; Registers used:
  6263 ;;		wreg, status,2, status,0, cstack
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6270 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;Total ram usage:        1 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:    2
  6276 ;; This function calls:
  6277 ;;		_lcdNibble
  6278 ;; This function is called by:
  6279 ;;		_main
  6280 ;;		_init_operation
  6281 ;;		_runtime
  6282 ;;		_bottle_count
  6283 ;;		_initLCD
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           	psect	text37
  6288  0019A4                     __ptext37:
  6289                           	opt stack 0
  6290  0019A4                     _lcdInst:
  6291                           	opt stack 27
  6292                           
  6293                           ;incstack = 0
  6294                           ;lcdInst@data stored from wreg
  6295  0019A4  6E13               	movwf	lcdInst@data,c
  6296                           
  6297                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  6298  0019A6  948C               	bcf	3980,2,c	;volatile
  6299                           
  6300                           ;lcd.c: 27: lcdNibble(data);
  6301  0019A8  5013               	movf	lcdInst@data,w,c
  6302  0019AA  ECB4  F00B         	call	_lcdNibble
  6303  0019AE  0012               	return		;funcret
  6304  0019B0                     __end_of_lcdInst:
  6305                           	opt stack 0
  6306                           tblptru	equ	0xFF8
  6307                           tblptrh	equ	0xFF7
  6308                           tblptrl	equ	0xFF6
  6309                           tablat	equ	0xFF5
  6310                           prodh	equ	0xFF4
  6311                           prodl	equ	0xFF3
  6312                           intcon	equ	0xFF2
  6313                           intcon2	equ	0xFF1
  6314                           wreg	equ	0xFE8
  6315                           indf2	equ	0xFDF
  6316                           postinc2	equ	0xFDE
  6317                           postdec2	equ	0xFDD
  6318                           fsr2h	equ	0xFDA
  6319                           fsr2l	equ	0xFD9
  6320                           status	equ	0xFD8
  6321                           
  6322 ;; *************** function _lcdNibble *****************
  6323 ;; Defined at:
  6324 ;;		line 35 in file "lcd.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;  data            1    wreg     unsigned char 
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;  data            1   17[COMRAM] unsigned char 
  6329 ;;  temp            1   16[COMRAM] unsigned char 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;                  1    wreg      void 
  6332 ;; Registers used:
  6333 ;;		wreg, status,2, status,0
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 0/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;Total ram usage:        2 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:    1
  6346 ;; This function calls:
  6347 ;;		Nothing
  6348 ;; This function is called by:
  6349 ;;		_lcdInst
  6350 ;;		_putch
  6351 ;; This function uses a non-reentrant model
  6352 ;;
  6353                           
  6354                           	psect	text38
  6355  001768                     __ptext38:
  6356                           	opt stack 0
  6357  001768                     _lcdNibble:
  6358                           	opt stack 26
  6359                           
  6360                           ;incstack = 0
  6361                           ;lcdNibble@data stored from wreg
  6362  001768  6E12               	movwf	lcdNibble@data,c
  6363                           
  6364                           ;lcd.c: 37: char temp = data & 0xF0;
  6365  00176A  5012               	movf	lcdNibble@data,w,c
  6366  00176C  0BF0               	andlw	240
  6367  00176E  6E11               	movwf	lcdNibble@temp,c
  6368                           
  6369                           ;lcd.c: 38: LATD = LATD & 0x0F;
  6370  001770  508C               	movf	3980,w,c	;volatile
  6371  001772  0B0F               	andlw	15
  6372  001774  6E8C               	movwf	3980,c	;volatile
  6373                           
  6374                           ;lcd.c: 39: LATD = temp | LATD;
  6375  001776  5011               	movf	lcdNibble@temp,w,c
  6376  001778  108C               	iorwf	3980,w,c	;volatile
  6377  00177A  6E8C               	movwf	3980,c	;volatile
  6378                           
  6379                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  6380  00177C  968C               	bcf	3980,3,c	;volatile
  6381                           
  6382                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6383  00177E  0E19               	movlw	25
  6384  001780                     u2617:
  6385  001780  2EE8               	decfsz	wreg,f,c
  6386  001782  D7FE               	bra	u2617
  6387                           
  6388                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  6389  001784  868C               	bsf	3980,3,c	;volatile
  6390                           
  6391                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6392  001786  0E19               	movlw	25
  6393  001788                     u2627:
  6394  001788  2EE8               	decfsz	wreg,f,c
  6395  00178A  D7FE               	bra	u2627
  6396                           
  6397                           ;lcd.c: 46: data = data << 4;
  6398  00178C  3812               	swapf	lcdNibble@data,w,c
  6399  00178E  0BF0               	andlw	240
  6400  001790  6E12               	movwf	lcdNibble@data,c
  6401                           
  6402                           ;lcd.c: 48: temp = data & 0xF0;
  6403  001792  5012               	movf	lcdNibble@data,w,c
  6404  001794  0BF0               	andlw	240
  6405  001796  6E11               	movwf	lcdNibble@temp,c
  6406                           
  6407                           ;lcd.c: 49: LATD = LATD & 0x0F;
  6408  001798  508C               	movf	3980,w,c	;volatile
  6409  00179A  0B0F               	andlw	15
  6410  00179C  6E8C               	movwf	3980,c	;volatile
  6411                           
  6412                           ;lcd.c: 50: LATD = temp | LATD;
  6413  00179E  5011               	movf	lcdNibble@temp,w,c
  6414  0017A0  108C               	iorwf	3980,w,c	;volatile
  6415  0017A2  6E8C               	movwf	3980,c	;volatile
  6416                           
  6417                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  6418  0017A4  968C               	bcf	3980,3,c	;volatile
  6419                           
  6420                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6421  0017A6  0E19               	movlw	25
  6422  0017A8                     u2637:
  6423  0017A8  2EE8               	decfsz	wreg,f,c
  6424  0017AA  D7FE               	bra	u2637
  6425                           
  6426                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  6427  0017AC  868C               	bsf	3980,3,c	;volatile
  6428                           
  6429                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6430  0017AE  0E19               	movlw	25
  6431  0017B0                     u2647:
  6432  0017B0  2EE8               	decfsz	wreg,f,c
  6433  0017B2  D7FE               	bra	u2647
  6434  0017B4  0012               	return		;funcret
  6435  0017B6                     __end_of_lcdNibble:
  6436                           	opt stack 0
  6437                           tblptru	equ	0xFF8
  6438                           tblptrh	equ	0xFF7
  6439                           tblptrl	equ	0xFF6
  6440                           tablat	equ	0xFF5
  6441                           prodh	equ	0xFF4
  6442                           prodl	equ	0xFF3
  6443                           intcon	equ	0xFF2
  6444                           intcon2	equ	0xFF1
  6445                           wreg	equ	0xFE8
  6446                           indf2	equ	0xFDF
  6447                           postinc2	equ	0xFDE
  6448                           postdec2	equ	0xFDD
  6449                           fsr2h	equ	0xFDA
  6450                           fsr2l	equ	0xFD9
  6451                           status	equ	0xFD8
  6452                           
  6453 ;; *************** function _I2C_Master_Init *****************
  6454 ;; Defined at:
  6455 ;;		line 13 in file "I2C.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;  c               4   29[COMRAM] const unsigned long 
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;		None
  6460 ;; Return value:  Size  Location     Type
  6461 ;;                  1    wreg      void 
  6462 ;; Registers used:
  6463 ;;		wreg, status,2, status,0, cstack
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6471 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6472 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6473 ;;Total ram usage:        8 bytes
  6474 ;; Hardware stack levels used:    1
  6475 ;; Hardware stack levels required when called:    2
  6476 ;; This function calls:
  6477 ;;		___lldiv
  6478 ;; This function is called by:
  6479 ;;		_main
  6480 ;; This function uses a non-reentrant model
  6481 ;;
  6482                           
  6483                           	psect	text39
  6484  0016BC                     __ptext39:
  6485                           	opt stack 0
  6486  0016BC                     _I2C_Master_Init:
  6487                           	opt stack 28
  6488                           
  6489                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  6490                           
  6491                           ;incstack = 0
  6492  0016BC  0E00               	movlw	0
  6493  0016BE  6EC7               	movwf	4039,c	;volatile
  6494                           
  6495                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  6496  0016C0  0E28               	movlw	40
  6497  0016C2  6EC6               	movwf	4038,c	;volatile
  6498                           
  6499                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  6500  0016C4  0E00               	movlw	0
  6501  0016C6  6EC5               	movwf	4037,c	;volatile
  6502                           
  6503                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  6504  0016C8  0E80               	movlw	128
  6505  0016CA  6E11               	movwf	___lldiv@dividend,c
  6506  0016CC  0E96               	movlw	150
  6507  0016CE  6E12               	movwf	___lldiv@dividend+1,c
  6508  0016D0  0E98               	movlw	152
  6509  0016D2  6E13               	movwf	___lldiv@dividend+2,c
  6510  0016D4  0E00               	movlw	0
  6511  0016D6  6E14               	movwf	___lldiv@dividend+3,c
  6512  0016D8  C01E  F022         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6513  0016DC  C01F  F023         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6514  0016E0  C020  F024         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6515  0016E4  C021  F025         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6516  0016E8  0E02               	movlw	2
  6517  0016EA                     u2415:
  6518  0016EA  90D8               	bcf	status,0,c
  6519  0016EC  3622               	rlcf	??_I2C_Master_Init,f,c
  6520  0016EE  3623               	rlcf	??_I2C_Master_Init+1,f,c
  6521  0016F0  3624               	rlcf	??_I2C_Master_Init+2,f,c
  6522  0016F2  3625               	rlcf	??_I2C_Master_Init+3,f,c
  6523  0016F4  2EE8               	decfsz	wreg,f,c
  6524  0016F6  D7F9               	goto	u2415
  6525  0016F8  C022  F015         	movff	??_I2C_Master_Init,___lldiv@divisor
  6526  0016FC  C023  F016         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6527  001700  C024  F017         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6528  001704  C025  F018         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6529  001708  EC7A  F00A         	call	___lldiv	;wreg free
  6530  00170C  0411               	decf	?___lldiv,w,c
  6531  00170E  6EC8               	movwf	4040,c	;volatile
  6532                           
  6533                           ;I2C.c: 20: TRISC3 = 1;
  6534  001710  8694               	bsf	3988,3,c	;volatile
  6535                           
  6536                           ;I2C.c: 21: TRISC4 = 1;
  6537  001712  8894               	bsf	3988,4,c	;volatile
  6538  001714  0012               	return		;funcret
  6539  001716                     __end_of_I2C_Master_Init:
  6540                           	opt stack 0
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           intcon	equ	0xFF2
  6548                           intcon2	equ	0xFF1
  6549                           wreg	equ	0xFE8
  6550                           indf2	equ	0xFDF
  6551                           postinc2	equ	0xFDE
  6552                           postdec2	equ	0xFDD
  6553                           fsr2h	equ	0xFDA
  6554                           fsr2l	equ	0xFD9
  6555                           status	equ	0xFD8
  6556                           
  6557 ;; *************** function ___lldiv *****************
  6558 ;; Defined at:
  6559 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;  dividend        4   16[COMRAM] unsigned long 
  6562 ;;  divisor         4   20[COMRAM] unsigned long 
  6563 ;; Auto vars:     Size  Location     Type
  6564 ;;  quotient        4   24[COMRAM] unsigned long 
  6565 ;;  counter         1   28[COMRAM] unsigned char 
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  4   16[COMRAM] unsigned long 
  6568 ;; Registers used:
  6569 ;;		wreg, status,2, status,0
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6575 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;Total ram usage:       13 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:    1
  6582 ;; This function calls:
  6583 ;;		Nothing
  6584 ;; This function is called by:
  6585 ;;		_I2C_Master_Init
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           	psect	text40
  6590  0014F4                     __ptext40:
  6591                           	opt stack 0
  6592  0014F4                     ___lldiv:
  6593                           	opt stack 28
  6594                           
  6595                           ;incstack = 0
  6596  0014F4  0E00               	movlw	0
  6597  0014F6  6E19               	movwf	___lldiv@quotient,c
  6598  0014F8  0E00               	movlw	0
  6599  0014FA  6E1A               	movwf	___lldiv@quotient+1,c
  6600  0014FC  0E00               	movlw	0
  6601  0014FE  6E1B               	movwf	___lldiv@quotient+2,c
  6602  001500  0E00               	movlw	0
  6603  001502  6E1C               	movwf	___lldiv@quotient+3,c
  6604  001504  5015               	movf	___lldiv@divisor,w,c
  6605  001506  1016               	iorwf	___lldiv@divisor+1,w,c
  6606  001508  1017               	iorwf	___lldiv@divisor+2,w,c
  6607  00150A  1018               	iorwf	___lldiv@divisor+3,w,c
  6608  00150C  B4D8               	btfsc	status,2,c
  6609  00150E  D02A               	goto	l603
  6610  001510  0E01               	movlw	1
  6611  001512  6E1D               	movwf	___lldiv@counter,c
  6612  001514  D006               	goto	l2716
  6613  001516                     l2714:
  6614  001516  90D8               	bcf	status,0,c
  6615  001518  3615               	rlcf	___lldiv@divisor,f,c
  6616  00151A  3616               	rlcf	___lldiv@divisor+1,f,c
  6617  00151C  3617               	rlcf	___lldiv@divisor+2,f,c
  6618  00151E  3618               	rlcf	___lldiv@divisor+3,f,c
  6619  001520  2A1D               	incf	___lldiv@counter,f,c
  6620  001522                     l2716:
  6621  001522  AE18               	btfss	___lldiv@divisor+3,7,c
  6622  001524  D7F8               	goto	l2714
  6623  001526                     l2718:
  6624  001526  90D8               	bcf	status,0,c
  6625  001528  3619               	rlcf	___lldiv@quotient,f,c
  6626  00152A  361A               	rlcf	___lldiv@quotient+1,f,c
  6627  00152C  361B               	rlcf	___lldiv@quotient+2,f,c
  6628  00152E  361C               	rlcf	___lldiv@quotient+3,f,c
  6629  001530  5015               	movf	___lldiv@divisor,w,c
  6630  001532  5C11               	subwf	___lldiv@dividend,w,c
  6631  001534  5016               	movf	___lldiv@divisor+1,w,c
  6632  001536  5812               	subwfb	___lldiv@dividend+1,w,c
  6633  001538  5017               	movf	___lldiv@divisor+2,w,c
  6634  00153A  5813               	subwfb	___lldiv@dividend+2,w,c
  6635  00153C  5018               	movf	___lldiv@divisor+3,w,c
  6636  00153E  5814               	subwfb	___lldiv@dividend+3,w,c
  6637  001540  A0D8               	btfss	status,0,c
  6638  001542  D009               	goto	l2726
  6639  001544  5015               	movf	___lldiv@divisor,w,c
  6640  001546  5E11               	subwf	___lldiv@dividend,f,c
  6641  001548  5016               	movf	___lldiv@divisor+1,w,c
  6642  00154A  5A12               	subwfb	___lldiv@dividend+1,f,c
  6643  00154C  5017               	movf	___lldiv@divisor+2,w,c
  6644  00154E  5A13               	subwfb	___lldiv@dividend+2,f,c
  6645  001550  5018               	movf	___lldiv@divisor+3,w,c
  6646  001552  5A14               	subwfb	___lldiv@dividend+3,f,c
  6647  001554  8019               	bsf	___lldiv@quotient,0,c
  6648  001556                     l2726:
  6649  001556  90D8               	bcf	status,0,c
  6650  001558  3218               	rrcf	___lldiv@divisor+3,f,c
  6651  00155A  3217               	rrcf	___lldiv@divisor+2,f,c
  6652  00155C  3216               	rrcf	___lldiv@divisor+1,f,c
  6653  00155E  3215               	rrcf	___lldiv@divisor,f,c
  6654  001560  2E1D               	decfsz	___lldiv@counter,f,c
  6655  001562  D7E1               	goto	l2718
  6656  001564                     l603:
  6657  001564  C019  F011         	movff	___lldiv@quotient,?___lldiv
  6658  001568  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  6659  00156C  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  6660  001570  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  6661  001574  0012               	return		;funcret
  6662  001576                     __end_of___lldiv:
  6663                           	opt stack 0
  6664                           tblptru	equ	0xFF8
  6665                           tblptrh	equ	0xFF7
  6666                           tblptrl	equ	0xFF6
  6667                           tablat	equ	0xFF5
  6668                           prodh	equ	0xFF4
  6669                           prodl	equ	0xFF3
  6670                           intcon	equ	0xFF2
  6671                           intcon2	equ	0xFF1
  6672                           wreg	equ	0xFE8
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           postdec2	equ	0xFDD
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8
  6679                           
  6680 ;; *************** function _keypressed *****************
  6681 ;; Defined at:
  6682 ;;		line 112 in file "main.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;		None
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;		None
  6687 ;; Return value:  Size  Location     Type
  6688 ;;                  1    wreg      void 
  6689 ;; Registers used:
  6690 ;;		wreg, status,2, status,0
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;Total ram usage:       16 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; This function calls:
  6703 ;;		Nothing
  6704 ;; This function is called by:
  6705 ;;		Interrupt level 2
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           	psect	intcode
  6710  000008                     __pintcode:
  6711                           	opt stack 0
  6712  000008                     _keypressed:
  6713                           	opt stack 22
  6714                           
  6715                           ;incstack = 0
  6716  000008  826E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6717  00000A  ED33  F008         	call	int_func,f	;refresh shadow registers
  6718                           tblptru	equ	0xFF8
  6719                           tblptrh	equ	0xFF7
  6720                           tblptrl	equ	0xFF6
  6721                           tablat	equ	0xFF5
  6722                           prodh	equ	0xFF4
  6723                           prodl	equ	0xFF3
  6724                           intcon	equ	0xFF2
  6725                           intcon2	equ	0xFF1
  6726                           wreg	equ	0xFE8
  6727                           indf2	equ	0xFDF
  6728                           postinc2	equ	0xFDE
  6729                           postdec2	equ	0xFDD
  6730                           fsr2h	equ	0xFDA
  6731                           fsr2l	equ	0xFD9
  6732                           status	equ	0xFD8
  6733                           
  6734                           	psect	intcode_body
  6735  001066                     __pintcode_body:
  6736                           	opt stack 22
  6737  001066                     int_func:
  6738                           	opt stack 22
  6739  001066  0006               	pop		; remove dummy address from shadow register refresh
  6740  001068  CFFA F003          	movff	pclath,??_keypressed+2
  6741  00106C  CFFB F004          	movff	pclatu,??_keypressed+3
  6742  001070  CFE9 F005          	movff	fsr0l,??_keypressed+4
  6743  001074  CFEA F006          	movff	fsr0h,??_keypressed+5
  6744  001078  CFE1 F007          	movff	fsr1l,??_keypressed+6
  6745  00107C  CFE2 F008          	movff	fsr1h,??_keypressed+7
  6746  001080  CFD9 F009          	movff	fsr2l,??_keypressed+8
  6747  001084  CFDA F00A          	movff	fsr2h,??_keypressed+9
  6748  001088  CFF3 F00B          	movff	prodl,??_keypressed+10
  6749  00108C  CFF4 F00C          	movff	prodh,??_keypressed+11
  6750  001090  CFF6 F00D          	movff	tblptrl,??_keypressed+12
  6751  001094  CFF7 F00E          	movff	tblptrh,??_keypressed+13
  6752  001098  CFF8 F00F          	movff	tblptru,??_keypressed+14
  6753  00109C  CFF5 F010          	movff	tablat,??_keypressed+15
  6754                           
  6755                           ;main.c: 113: if(INT1IF){
  6756  0010A0  B0F0               	btfsc	intcon3,0,c	;volatile
  6757  0010A2  D00D               	goto	i2l2870
  6758  0010A4  D025               	goto	i2l84
  6759  0010A6                     i2l2858:
  6760                           
  6761                           ;main.c: 116: curr_state = STANDBY;
  6762  0010A6  0E00               	movlw	0
  6763  0010A8  D007               	goto	L5
  6764  0010AA                     i2l2860:
  6765                           
  6766                           ;main.c: 119: curr_state = OPERATION;
  6767  0010AA  0E01               	movlw	1
  6768  0010AC  D005               	goto	L5
  6769  0010AE                     i2l2862:
  6770                           
  6771                           ;main.c: 122: curr_state = RUNTIME;
  6772  0010AE  0E04               	movlw	4
  6773  0010B0  D003               	goto	L5
  6774  0010B2                     i2l2864:
  6775                           
  6776                           ;main.c: 125: curr_state = BOTTLECOUNT;
  6777  0010B2  0E03               	movlw	3
  6778  0010B4  D001               	goto	L5
  6779  0010B6                     i2l2866:
  6780                           
  6781                           ;main.c: 128: curr_state = DATETIME;
  6782  0010B6  0E02               	movlw	2
  6783  0010B8                     L5:
  6784  0010B8  0100               	movlb	0	; () banked
  6785  0010BA  6FD4               	movwf	_curr_state& (0+255),b
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;main.c: 130: }
  6789                           
  6790                           ;main.c: 129: break;
  6791  0010BC  D019               	goto	i2l84
  6792  0010BE                     i2l2870:
  6793  0010BE  3881               	swapf	3969,w,c	;volatile
  6794  0010C0  0B0F               	andlw	15
  6795  0010C2  0B0F               	andlw	15
  6796  0010C4  6E01               	movwf	??_keypressed& (0+255),c
  6797  0010C6  6A02               	clrf	(??_keypressed+1)& (0+255),c
  6798                           
  6799                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6800                           ; Switch size 1, requested type "space"
  6801                           ; Number of cases is 1, Range of values is 0 to 0
  6802                           ; switch strategies available:
  6803                           ; Name         Instructions Cycles
  6804                           ; simple_byte            4     3 (average)
  6805                           ;	Chosen strategy is simple_byte
  6806  0010C8  5002               	movf	??_keypressed+1,w,c
  6807  0010CA  0A00               	xorlw	0	; case 0
  6808  0010CC  A4D8               	btfss	status,2,c
  6809  0010CE  D010               	goto	i2l84
  6810                           
  6811                           ; Switch size 1, requested type "space"
  6812                           ; Number of cases is 5, Range of values is 0 to 12
  6813                           ; switch strategies available:
  6814                           ; Name         Instructions Cycles
  6815                           ; simple_byte           16     9 (average)
  6816                           ;	Chosen strategy is simple_byte
  6817  0010D0  5001               	movf	??_keypressed,w,c
  6818  0010D2  0A00               	xorlw	0	; case 0
  6819  0010D4  B4D8               	btfsc	status,2,c
  6820  0010D6  D7E9               	goto	i2l2860
  6821  0010D8  0A01               	xorlw	1	; case 1
  6822  0010DA  B4D8               	btfsc	status,2,c
  6823  0010DC  D7E8               	goto	i2l2862
  6824  0010DE  0A03               	xorlw	3	; case 2
  6825  0010E0  B4D8               	btfsc	status,2,c
  6826  0010E2  D7E7               	goto	i2l2864
  6827  0010E4  0A06               	xorlw	6	; case 4
  6828  0010E6  B4D8               	btfsc	status,2,c
  6829  0010E8  D7E6               	goto	i2l2866
  6830  0010EA  0A08               	xorlw	8	; case 12
  6831  0010EC  B4D8               	btfsc	status,2,c
  6832  0010EE  D7DB               	goto	i2l2858
  6833  0010F0                     i2l84:
  6834                           
  6835                           ;main.c: 131: }
  6836                           ;main.c: 132: INT1IF = 0;
  6837  0010F0  90F0               	bcf	intcon3,0,c	;volatile
  6838                           
  6839                           ;main.c: 133: return;
  6840  0010F2  C010  FFF5         	movff	??_keypressed+15,tablat
  6841  0010F6  C00F  FFF8         	movff	??_keypressed+14,tblptru
  6842  0010FA  C00E  FFF7         	movff	??_keypressed+13,tblptrh
  6843  0010FE  C00D  FFF6         	movff	??_keypressed+12,tblptrl
  6844  001102  C00C  FFF4         	movff	??_keypressed+11,prodh
  6845  001106  C00B  FFF3         	movff	??_keypressed+10,prodl
  6846  00110A  C00A  FFDA         	movff	??_keypressed+9,fsr2h
  6847  00110E  C009  FFD9         	movff	??_keypressed+8,fsr2l
  6848  001112  C008  FFE2         	movff	??_keypressed+7,fsr1h
  6849  001116  C007  FFE1         	movff	??_keypressed+6,fsr1l
  6850  00111A  C006  FFEA         	movff	??_keypressed+5,fsr0h
  6851  00111E  C005  FFE9         	movff	??_keypressed+4,fsr0l
  6852  001122  C004  FFFB         	movff	??_keypressed+3,pclatu
  6853  001126  C003  FFFA         	movff	??_keypressed+2,pclath
  6854  00112A  926E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6855  00112C  0011               	retfie		f
  6856  00112E                     __end_of_keypressed:
  6857                           	opt stack 0
  6858                           pclatu	equ	0xFFB
  6859                           pclath	equ	0xFFA
  6860                           tblptru	equ	0xFF8
  6861                           tblptrh	equ	0xFF7
  6862                           tblptrl	equ	0xFF6
  6863                           tablat	equ	0xFF5
  6864                           prodh	equ	0xFF4
  6865                           prodl	equ	0xFF3
  6866                           intcon	equ	0xFF2
  6867                           intcon2	equ	0xFF1
  6868                           intcon3	equ	0xFF0
  6869                           fsr0h	equ	0xFEA
  6870                           fsr0l	equ	0xFE9
  6871                           wreg	equ	0xFE8
  6872                           fsr1h	equ	0xFE2
  6873                           fsr1l	equ	0xFE1
  6874                           indf2	equ	0xFDF
  6875                           postinc2	equ	0xFDE
  6876                           postdec2	equ	0xFDD
  6877                           fsr2h	equ	0xFDA
  6878                           fsr2l	equ	0xFD9
  6879                           status	equ	0xFD8
  6880                           pclatu	equ	0xFFB
  6881                           pclath	equ	0xFFA
  6882                           tblptru	equ	0xFF8
  6883                           tblptrh	equ	0xFF7
  6884                           tblptrl	equ	0xFF6
  6885                           tablat	equ	0xFF5
  6886                           prodh	equ	0xFF4
  6887                           prodl	equ	0xFF3
  6888                           intcon	equ	0xFF2
  6889                           intcon2	equ	0xFF1
  6890                           intcon3	equ	0xFF0
  6891                           fsr0h	equ	0xFEA
  6892                           fsr0l	equ	0xFE9
  6893                           wreg	equ	0xFE8
  6894                           fsr1h	equ	0xFE2
  6895                           fsr1l	equ	0xFE1
  6896                           indf2	equ	0xFDF
  6897                           postinc2	equ	0xFDE
  6898                           postdec2	equ	0xFDD
  6899                           fsr2h	equ	0xFDA
  6900                           fsr2l	equ	0xFD9
  6901                           status	equ	0xFD8
  6902                           
  6903                           	psect	rparam
  6904  0000                     pclatu	equ	0xFFB
  6905                           pclath	equ	0xFFA
  6906                           tblptru	equ	0xFF8
  6907                           tblptrh	equ	0xFF7
  6908                           tblptrl	equ	0xFF6
  6909                           tablat	equ	0xFF5
  6910                           prodh	equ	0xFF4
  6911                           prodl	equ	0xFF3
  6912                           intcon	equ	0xFF2
  6913                           intcon2	equ	0xFF1
  6914                           intcon3	equ	0xFF0
  6915                           fsr0h	equ	0xFEA
  6916                           fsr0l	equ	0xFE9
  6917                           wreg	equ	0xFE8
  6918                           fsr1h	equ	0xFE2
  6919                           fsr1l	equ	0xFE1
  6920                           indf2	equ	0xFDF
  6921                           postinc2	equ	0xFDE
  6922                           postdec2	equ	0xFDD
  6923                           fsr2h	equ	0xFDA
  6924                           fsr2l	equ	0xFD9
  6925                           status	equ	0xFD8
  6926                           
  6927                           	psect	temp
  6928  00006E                     btemp:
  6929                           	opt stack 0
  6930  00006E                     	ds	1
  6931  0000                     int$flags	set	btemp
  6932                           pclatu	equ	0xFFB
  6933                           pclath	equ	0xFFA
  6934                           tblptru	equ	0xFF8
  6935                           tblptrh	equ	0xFF7
  6936                           tblptrl	equ	0xFF6
  6937                           tablat	equ	0xFF5
  6938                           prodh	equ	0xFF4
  6939                           prodl	equ	0xFF3
  6940                           intcon	equ	0xFF2
  6941                           intcon2	equ	0xFF1
  6942                           intcon3	equ	0xFF0
  6943                           fsr0h	equ	0xFEA
  6944                           fsr0l	equ	0xFE9
  6945                           wreg	equ	0xFE8
  6946                           fsr1h	equ	0xFE2
  6947                           fsr1l	equ	0xFE1
  6948                           indf2	equ	0xFDF
  6949                           postinc2	equ	0xFDE
  6950                           postdec2	equ	0xFDD
  6951                           fsr2h	equ	0xFDA
  6952                           fsr2l	equ	0xFD9
  6953                           status	equ	0xFD8


Data Sizes:
    Strings     167
    Constant    91
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    107     109
    BANK0           128     84      85
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_15(CODE[11]), STR_14(CODE[17]), STR_13(CODE[11]), STR_12(CODE[14]), 
		 -> STR_11(CODE[11]), STR_10(CODE[16]), STR_9(CODE[11]), STR_8(CODE[13]), 
		 -> STR_7(CODE[11]), STR_6(CODE[13]), STR_5(CODE[10]), STR_4(CODE[16]), 
		 -> STR_3(CODE[13]), STR_2(CODE[17]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    runtime@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK0[7]), 

    runtime@end_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK0[7]), 

    init_operation@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK0[7]), 

    init_operation@start_time	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK0[7]), 

    time_difference@time2	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK0[7]), 

    time_difference@time1	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK0[7]), main@time(BANK0[7]), 

    update_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK0[7]), main@time(BANK0[7]), main@start_time(BANK0[7]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _runtime->_printf
    _init_operation->_printf
    _update_time->_I2C_Master_Read
    _update_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _initLCD->_lcdInst
    _bottle_count->_printf
    _printf->_time_difference
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_init_operation
    _runtime->_printf
    _init_operation->_printf
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _bottle_count->_printf
    _printf->_time_difference

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0  155116
                                             61 BANK0     23    23      0
                    _I2C_Master_Init
                       _bottle_count
                            _initLCD
                     _init_operation
                            _lcdInst
                             _printf
                            _runtime
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _runtime                                              4     0      4   73775
                                             55 BANK0      4     0      4
                            _lcdInst
                             _printf
                    _time_difference
 ---------------------------------------------------------------------------------
 (1) _init_operation                                       6     2      4   74727
                                             55 BANK0      6     2      4
                            _initLCD
                            _lcdInst
                             _printf
                    _time_difference
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _update_time                                          3     1      2     755
                                             19 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                             17 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             17 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _time_difference                                     20    16      4   70994
                                            105 COMRAM     1     1      0
                                             25 BANK0     19    15      4
                             ___wmul
                         _dec_to_hex
 ---------------------------------------------------------------------------------
 (3) _dec_to_hex                                          16    14      2   69651
                                            103 COMRAM     2     0      2
                                             11 BANK0     14    14      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   58239
                                             97 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   19032
                                             67 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   31600
                                             88 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     376
                                             67 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3    8159
                                             80 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     480
                                             16 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     508
                                             55 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     648
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    2350
                                             70 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7    8409
                                             55 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     543
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3446
                                             28 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4155
                                             55 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    3858
                                             43 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     237
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    2658
                                             24 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    2559
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2281
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2148
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                             19 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         2     2      0    2565
                                             55 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              21    17      4    2430
                                            106 COMRAM     1     1      0
                                             44 BANK0     11     7      4
                            ___lwdiv
                            ___lwmod
                              _putch
                    _time_difference (ARG)
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _keypressed                                          16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _initLCD
     _lcdInst
       _lcdNibble
   _init_operation
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
     _update_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
     _time_difference (ARG)
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _runtime
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
       _time_difference (ARG)
         ___wmul
         _dec_to_hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _time_difference
       ___wmul
       _dec_to_hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _update_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      55       5       66.4%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6B      6D       1       86.5%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C2       6        0.0%
DATA                 0      0      C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 07 05:14:50 2017

              _update_time 15EE               ___altoft@exp 004F              ___altoft@sign 0050  
             ___awdiv@sign 0016        ___wmul@multiplicand 0013                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000               ___ftadd@exp1 0037  
             ___ftadd@exp2 0036               ___ftadd@sign 0035                        l501 023A  
                      l505 0264                        l603 1564                        l516 0314  
                      l525 0330                        l199 1986                        l536 0E84  
                      l478 1330                        l558 1962                        l656 175E  
                      l666 187E                        l851 00C4                        l852 01E8  
                      l693 0510                        l862 0F86                        l688 03DA  
             __CFG_CPB$OFF 000000                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28           ??_init_operation 00BB                        _exp 0012  
                      _log 08C6                        _pow 03A2                        wreg 000FE8  
             __CFG_LVP$OFF 000000               ___ftdiv@cntr 0022               ___ftdiv@sign 0027  
             __CFG_WDT$OFF 000000                       l2012 0248                       l2100 0D5E  
                     l2110 0D86                       l2040 02C4                       l2104 0D6E  
                     l2042 02CE                       l2034 02A2                       l2018 0272  
                     l2114 0D96                       l2130 1440                       l2212 0DF8  
                     l2060 034C                       l2052 0302                       l2044 02D8  
                     l3004 1208                       l3100 0B5A                       l3022 07A6  
                     l2070 037C                       l2054 030C                       l2046 02E0  
                     l2302 0FD4                       l2126 1410                       l3110 0BA8  
                     l3040 082E                       l2080 0D04                       l2304 1050  
                     l2136 146C                       l2320 118A                       l2312 1146  
                     l3016 1278                       l3104 0B84                       l3112 0BCA  
                     l3034 0800                       l2218 0E20                       l2146 0C14  
                     l3106 0B8A                       l3028 07D2                       l2500 14AA  
                     l2164 0C7A                       l2332 11AC                       l3046 085C  
                     l3054 088A                       l2502 14B2                       l2238 0E5E  
                     l2086 0D2C                       l2182 0CCA                       l2174 0CA2  
                     l2414 01BE                       l3056 08C2                       l2520 14EA  
                     l2512 14D2                       l2504 14B6                       l2344 1666  
                     l2256 189E                       l2176 0CAE                       l2168 0C8A  
                     l2336 11B8                       l2610 1874                       l2602 1854  
                     l2346 1672                       l2178 0CB4                       l2194 1378  
                     l2290 0EF2                       l2442 0462                       l2434 0400  
                     l2604 185C                       l2516 14DC                       l2268 18DC  
                     l2380 002A                       l2364 0900                       l2428 03E8  
                     l2606 1860                       l2294 0F0C                       l2286 0EE4  
                     l2358 08E0                       l2446 0488                       l2392 0096  
                     l2714 1516                       l2386 0060                       l2570 0AD6  
                     l2716 1522                       l2548 1920                       l2726 1556  
                     l2718 1526                       l2582 172C                       l2494 1494  
                     l1950 12B2                       l2558 09FE                       l2584 1734  
                     l2488 1484                       l2594 1754                       l2586 1738  
                     l1962 12FE                       l1954 12C0                       l2682 1622  
                     l1964 131C                       l1956 12CA                       l2692 1646  
                     l2942 0540                       l1966 1326                       l1958 12E8  
                     l2686 162A                       l2960 05A6                       l2938 052C  
                     l2972 05DC                       l2948 0570                       l1996 1598  
                     l2982 0642                       l2958 05A0                       l1998 15A4  
                     l2976 05EE                       l2984 064E                       l2978 05F4  
                     ?_exp 0059                       ?_log 0044                       ?_pow 0062  
                     STR_1 FC58                       STR_2 FC73                       STR_3 FCDD  
                     STR_4 FC95                       STR_5 FCF5                       STR_6 FCC3  
                     STR_7 FCEA                       STR_8 FCD0                       STR_9 FCEA  
                     u2000 009E                       u2010 00A0                       _LATA 000F89  
                     _LATB 000F8A                       _LATC 000F8B                       _LATD 000F8C  
                     u1361 0206                       _LATE 000F8D                       u2090 044C  
                     u1371 021A                       u2190 191E                       u2415 16EA  
                     u1571 0CEC                       u1900 1166                       u1661 0BF8  
                     u1750 13A0                       u2607 183A                       u1591 0D14  
                     u1680 0C32                       u2617 1780                       u1761 0DE0  
                     u2627 1788                       u1860 0EFE                       u1908 1168  
                     u2637 17A8                       u1781 0E08                       u1685 0C2A  
                     u1758 13A2                       u2647 17B0                       u2577 0BD8  
                     u2587 126A                       u2597 1806                       _RCEN 007E2B  
                     i2l84 10F0                       _RSEN 007E29                       _main 0AEC  
             ___ftpack@arg 0011                       _keys FBFD               ___ftpack@exp 0014  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 006E                       exp@x 0059  
                     log@x 0044                       pow@x 0062                       pow@y 0065  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000               ___ftmul@cntr 002A  
             ___param_bank 000000               ___ftmul@sign 002B              ?_bottle_count 0001  
             ___fttol@exp1 0046                      ??_exp 005C                      ??_log 0047  
             ___fttol@lval 0042                      ??_pow 0068           ?_I2C_Master_Init 001E  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001               main@end_time 00CD  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D            __end_of___awdiv 14F4            __end_of___ftadd 03A2  
                    STR_10 FCA5                      STR_11 FCEA                      STR_12 FCB5  
                    STR_13 FCEA                      STR_14 FC84                      STR_15 FCEA  
          __end_of___ftdiv 0EB6            __end_of___ftneg 1970            __end_of___lldiv 1576  
          __end_of___ftmul 0DD0            ___awdiv@divisor 0013            __end_of___ftsub 18C8  
          __end_of___fttol 0CDC            __end_of___lwdiv 1768            __end_of___lwmod 1888  
          ___awdiv@counter 0015                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
             ___lltoft@exp 0021            __end_of_lcdInst 19B0             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_initLCD 1846  
           __CFG_EBTRB$OFF 000000              ___awtoft@sign 001C            __end_of_dpowers FC18  
                    _floor 0EB6                      _ldexp 112E                      _frexp 1350  
                    _errno 006C              ___ftpack@sign 0015                      _putch 1998  
                    pclath 000FFA                      tablat 000FF5                      pow@yi 0087  
                    status 000FD8            __end_of_runtime 1800             __CFG_PBADEN$ON 000000  
              exp@exponent 005F                ldexp@newexp 0047            __initialization 1970  
              log@exponent 0047   init_operation@start_time 00B7             ??_bottle_count 00B7  
             __end_of_main 0BE8               __end_of_keys FC0E               update_time@i 0016  
                   ??_main 00BD              ___fttol@sign1 0041            runtime@end_time 00B9  
            __activetblptr 000002          time_difference@d1 00A9          time_difference@d2 00AA  
        time_difference@d3 00AB          time_difference@s1 00A5          time_difference@s2 00A7  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0012         ??_I2C_Master_Start 0012  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0014  
                   ?_floor 0051                     ?_ldexp 0044                     ?_frexp 0011  
         __end_of___altoft 15EE           ___awdiv@dividend 0011           __end_of___awtoft 1900  
                   ?_putch 0001           __end_of___ftpack 1350           __end_of___lltoft 16BC  
                   _INT1IF 007F80                     i2l2860 10AA                     i2l2862 10AE  
                   i2l2870 10BE                     i2l2864 10B2                     i2l2866 10B6  
                   i2l2858 10A6                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9            update_time@time 0014  
           __CFG_XINST$OFF 000000                     ___ftge 13E0                     ___wmul 1926  
                ??___awdiv 0015                  ??___ftadd 0032             __CFG_STVREN$ON 000000  
                ??___ftdiv 001F                  ??___ftneg 0014                  ??___lldiv 0019  
                ??___ftmul 0023                  ??___ftsub 003E                  ??___fttol 003C  
                ??___lwdiv 0015                  ??___lwmod 001C              dec_to_hex@num 0068  
         ___awdiv@quotient 0017                  ??_lcdInst 0013                     _printf 051E  
                   floor@i 0054                     floor@x 0051      ___ftmul@f3_as_product 0027  
                ??_initLCD 0014            _time_difference 066C               __mediumconst FBFC  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
                ??_runtime 006C           __end_ofexp@coeff FC3D           __end_oflog@coeff FC58  
               __accesstop 0080    __end_of__initialization 1978                 ___altoft@c 0047  
               ___ftadd@f1 002C                 ___ftadd@f2 002F                 ___ftge@ff1 0011  
               ___ftge@ff2 0014               eval_poly@res 0041              ___rparam_used 000001  
               ___ftdiv@f1 0019                 ___ftdiv@f2 001C                 ___ftdiv@f3 0023  
               ___ftneg@f1 0011       time_difference@time1 0099       time_difference@time2 009B  
               ___awtoft@c 0019                 ___ftmul@f1 001D                 ___ftmul@f2 0020  
               ___ftsub@f1 0038                 ___ftsub@f2 003B                 ___fttol@f1 0038  
     __end_of_happynewyear FC1F             __pcstackCOMRAM 0001               ?_update_time 0014  
               ___lltoft@c 0019              __end_of_floor 0F94              __end_of_ldexp 11F0  
            __end_of_frexp 13E0              __end_of_putch 19A4         __size_of_lcdNibble 004E  
                  ??_floor 0054                    ??_ldexp 0049                    ??_frexp 0016  
     __end_of_bottle_count 08C6                 _dec_to_hex 09E0                    ??_putch 0013  
               __pbssBANK0 00D4         time_difference@hr1 009D         time_difference@hr2 009F  
       __size_of_eval_poly 00D2                    ?___ftge 0011                    ?___wmul 0011  
                ?___altoft 0047    __end_of_time_difference 07A4                  ?___awtoft 0019  
                ?___ftpack 0011                    ?_printf 00AC                  ?___lltoft 0019  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
       init_operation@time 00B9          __end_of_lcdNibble 17B6                    __Hparam 0000  
                  __Lparam 0000            __size_of___ftge 0090                    ___awdiv 1470  
                  ___ftadd 01F6                    ___ftdiv 0DD0                    ___ftneg 194C  
                  ___lldiv 14F4            __size_of___wmul 0026                    ___ftmul 0CDC  
                  ___ftsub 1888                    ___fttol 0BE8                    ___lwdiv 1716  
                  ___lwmod 1846                 _curr_state 00D4                 ??___altoft 004B  
                  __pcinit 1970                 ??___awtoft 001C                 ??___ftpack 0016  
        __end_of_eval_poly 1066                    __ramtop 1000                    _lcdInst 19A4  
               ??___lltoft 001D                    __ptext0 0AEC                    __ptext1 17B6  
                  __ptext2 11F0                    __ptext3 15EE                    __ptext4 19B0  
                  __ptext5 19BA                    __ptext6 19C2                    __ptext7 1900  
                  __ptext8 1986                    __ptext9 066C            __size_of_printf 014E  
           dec_to_hex@temp 0091                    _initLCD 1800                    _dpowers FC0E  
             __size_of_exp 01E4               __size_of_log 011A               __size_of_pow 017C  
               _keypressed 0008   __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008                    _runtime 17B6  
              ?_dec_to_hex 0068             __pintcode_body 1066       end_of_initialization 1978  
                  exp@sign 0061    __size_of_init_operation 00B2              __Lmediumconst FBFC  
                  int_func 1066  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 0015                    pow@sign 0086            ___lldiv@counter 001D  
                  printf@c 00B6                    printf@f 00AC           I2C_Master_Init@c 001E  
         I2C_Master_Read@a 0012                    postdec2 000FDD                    postinc2 000FDE  
     __size_of_update_time 0072             main@start_time 00C6           ?_time_difference 0099  
                _PORTBbits 000F81      __size_of_bottle_count 0122               _happynewyear FC18  
              ___ftdiv@exp 0026                ___ftmul@exp 0026               _bottle_count 07A4  
           __end_of___ftge 1470             __end_of___wmul 194C        __size_of_dec_to_hex 010C  
               floor@expon 0057             __end_of_printf 066C        start_initialization 1970  
               eval_poly@d 003B                 eval_poly@n 003D                 eval_poly@x 0038  
              ?_keypressed 0001                 ldexp@value 0044                __end_of_exp 01F6  
              __end_of_log 09E0                __end_of_pow 051E                 frexp@value 0011  
        ??_I2C_Master_Init 0022          ??_I2C_Master_Read 0012          ??_I2C_Master_Wait 0011  
        ??_I2C_Master_Stop 0012                   ??___ftge 0017                   ??___wmul 0015  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 006B          __size_of___altoft 0078  
        __size_of___awtoft 0038          __size_of___ftpack 00AE          __size_of___lltoft 005C  
              __pbssCOMRAM 006C        time_difference@min1 00A1        time_difference@min2 00A3  
            __pcstackBANK0 0080             _init_operation 11F0           _I2C_Master_Start 19C2  
         _I2C_Master_Write 19B0           ___lwdiv@dividend 0011          __CFG_CCP2MX$PORTC 000000  
      __size_of_keypressed 1126                  __pintcode 0008              __pmediumconst FBFC  
                _lcdNibble 1768                   ?___awdiv 0011                   ?___ftadd 002C  
                 ?___ftdiv 0019                   ?___ftneg 0011                   ?___lldiv 0011  
                 ?___ftmul 001D                   ?___ftsub 0038                   ?___fttol 0038  
                 ?___lwdiv 0011                   ?___lwmod 0018                   ?_lcdInst 0001  
         dec_to_hex@hexnum 0095                   ?_initLCD 0001                  _eval_poly 0F94  
         ___lwdiv@quotient 0015     __end_of_init_operation 12A2             __size_of_floor 00DE  
           __size_of_ldexp 00C2             __size_of_frexp 0090               ??_dec_to_hex 006A  
                 ?_runtime 00B7             __size_of_putch 000C             ___wmul@product 0015  
                 _LATDbits 000F8C           __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001  
       __end_of_dec_to_hex 0AEC          ___wmul@multiplier 0011              lcdNibble@data 0012  
               printf@flag 00B2              lcdNibble@temp 0011                 printf@prec 00B3  
               ?_eval_poly 0038          runtime@start_time 00B7        I2C_Master_Read@temp 0013  
          ?_init_operation 00B7         dec_to_hex@quotient 0097                  frexp@eptr 0014  
                 __Hrparam 0000                   __Lrparam 0000              ??_update_time 0016  
       __CFG_BOREN$SBORDIS 000000                dec_to_hex@i 0093           __size_of___awdiv 0084  
         __size_of___ftadd 01AC           __size_of___ftdiv 00E6           __size_of___ftneg 0024  
         __size_of___lldiv 0082                   ___altoft 1576           __size_of___ftmul 00F4  
         __size_of___ftsub 0040           __size_of___fttol 00F4           __size_of___lwdiv 0052  
         __size_of___lwmod 0042                   ___awtoft 18C8                   ___ftpack 12A2  
                 ___lltoft 1660           __size_of_lcdInst 000C                   _exp$1066 005C  
          _I2C_Master_Init 16BC            _I2C_Master_Read 1900           __size_of_initLCD 0046  
          _I2C_Master_Wait 1986            _I2C_Master_Stop 19BA               ??_keypressed 0001  
          ___lwdiv@divisor 0013   __size_of_time_difference 0138            ___lwdiv@counter 0017  
                 __ptext10 09E0                   __ptext11 03A2                   __ptext20 0F94  
                 __ptext12 08C6                   __ptext21 1926                   __ptext13 0012  
                 __ptext30 1470                   __ptext22 0CDC                   __ptext14 112E  
                 __ptext31 1800                   __ptext23 1888                   __ptext15 0EB6  
                 __ptext40 14F4                   __ptext32 07A4                   __ptext24 01F6  
                 __ptext16 1350                   __ptext33 051E                   __ptext25 194C  
                 __ptext17 0BE8                   __ptext34 1998                   __ptext26 0DD0  
                 __ptext18 13E0                   __ptext35 1846                   __ptext27 18C8  
                 __ptext19 1576                   __ptext36 1716                   __ptext28 1660  
                 __ptext37 19A4                   __ptext29 12A2                   __ptext38 1768  
                 __ptext39 16BC                   _pow$1064 0080                   _pow$1065 0083  
         __size_of_runtime 004A              __size_of_main 00FC            _dec_to_hex$1062 008B  
          _dec_to_hex$1063 008E                ??_lcdNibble 0011         __end_of_keypressed 112E  
                 int$flags 006E                  printf@val 00B4                   main@time 00BF  
      __end_of_update_time 1660                   exp@coeff FC1F                   log@coeff FC3D  
                putch@data 0013   __end_of_I2C_Master_Start 19CA   __end_of_I2C_Master_Write 19BA  
               _INTCONbits 000FF2                ??_eval_poly 003F                   intlevel2 0000  
         ___lwmod@dividend 0018           ___lldiv@dividend 0011                   printf@ap 00B0  
  __end_of_I2C_Master_Init 1716    __end_of_I2C_Master_Read 1926    __end_of_I2C_Master_Wait 1998  
  __end_of_I2C_Master_Stop 19C2                lcdInst@data 0013           ___lldiv@quotient 0019  
        I2C_Master_Write@d 0012            ___lwmod@divisor 001A            ___lwmod@counter 001C  
        ??_time_difference 006A  
